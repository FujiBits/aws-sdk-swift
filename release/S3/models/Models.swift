// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension S3ClientTypes.AbortIncompleteMultipartUpload: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case daysAfterInitiation = "DaysAfterInitiation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if daysAfterInitiation != 0 {
            try container.encode(daysAfterInitiation, forKey: ClientRuntime.Key("DaysAfterInitiation"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let daysAfterInitiationDecoded = try containerValues.decode(Swift.Int.self, forKey: .daysAfterInitiation)
        daysAfterInitiation = daysAfterInitiationDecoded
    }
}

extension S3ClientTypes.AbortIncompleteMultipartUpload: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AbortIncompleteMultipartUpload(daysAfterInitiation: \(Swift.String(describing: daysAfterInitiation)))"}
}

extension S3ClientTypes.AbortIncompleteMultipartUpload: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will
    ///          wait before permanently removing all parts of the upload. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">
    ///             Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a> in the
    ///             <i>Amazon S3 User Guide</i>.</p>
    public struct AbortIncompleteMultipartUpload: Swift.Equatable {
        /// <p>Specifies the number of days after which Amazon S3 aborts an incomplete multipart
        ///          upload.</p>
        public let daysAfterInitiation: Swift.Int

        public init (
            daysAfterInitiation: Swift.Int = 0
        )
        {
            self.daysAfterInitiation = daysAfterInitiation
        }
    }

}

extension AbortMultipartUploadInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AbortMultipartUploadInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), requestPayer: \(Swift.String(describing: requestPayer)), uploadId: \(Swift.String(describing: uploadId)))"}
}

extension AbortMultipartUploadInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct AbortMultipartUploadInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AbortMultipartUploadInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AbortMultipartUploadInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AbortMultipartUploadOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AbortMultipartUploadInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AbortMultipartUploadOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AbortMultipartUploadOutputError>
}

public struct AbortMultipartUploadInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AbortMultipartUploadInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AbortMultipartUploadInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AbortMultipartUploadOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "AbortMultipartUpload"))
        if let uploadId = input.operationInput.uploadId {
            let uploadIdQueryItem = ClientRuntime.URLQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
            input.builder.withQueryItem(uploadIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AbortMultipartUploadInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AbortMultipartUploadOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AbortMultipartUploadOutputError>
}

public struct AbortMultipartUploadInput: Swift.Equatable {
    /// <p>The bucket name to which the upload was taking place. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Key of the object for which the multipart upload was initiated.</p>
    public let key: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>Upload ID that identifies the multipart upload.</p>
    public let uploadId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.uploadId = uploadId
    }
}

struct AbortMultipartUploadInputBody: Swift.Equatable {
}

extension AbortMultipartUploadInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AbortMultipartUploadOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AbortMultipartUploadOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchUpload" : self = .noSuchUpload(try NoSuchUpload(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AbortMultipartUploadOutputError: Swift.Error, Swift.Equatable {
    case noSuchUpload(NoSuchUpload)
    case unknown(UnknownAWSHttpServiceError)
}

extension AbortMultipartUploadOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AbortMultipartUploadOutputResponse(requestCharged: \(Swift.String(describing: requestCharged)))"}
}

extension AbortMultipartUploadOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
    }
}

public struct AbortMultipartUploadOutputResponse: Swift.Equatable {
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?

    public init (
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

struct AbortMultipartUploadOutputResponseBody: Swift.Equatable {
}

extension AbortMultipartUploadOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes.AccelerateConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketAccelerateStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension S3ClientTypes.AccelerateConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccelerateConfiguration(status: \(Swift.String(describing: status)))"}
}

extension S3ClientTypes.AccelerateConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see
    ///             <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html">Amazon S3
    ///             Transfer Acceleration</a> in the <i>Amazon S3 User Guide</i>.</p>
    public struct AccelerateConfiguration: Swift.Equatable {
        /// <p>Specifies the transfer acceleration status of the bucket.</p>
        public let status: S3ClientTypes.BucketAccelerateStatus?

        public init (
            status: S3ClientTypes.BucketAccelerateStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension S3ClientTypes.AccessControlPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grants = "AccessControlList"
        case owner = "Owner"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let grants = grants {
            var grantsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AccessControlList"))
            for grant0 in grants {
                try grantsContainer.encode(grant0, forKey: ClientRuntime.Key("Grant"))
            }
        }
        if let owner = owner {
            try container.encode(owner, forKey: ClientRuntime.Key("Owner"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.grants) {
            struct KeyVal0{struct Grant{}}
            let grantsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Grant>.CodingKeys.self, forKey: .grants)
            if let grantsWrappedContainer = grantsWrappedContainer {
                let grantsContainer = try grantsWrappedContainer.decodeIfPresent([S3ClientTypes.Grant].self, forKey: .member)
                var grantsBuffer:[S3ClientTypes.Grant]? = nil
                if let grantsContainer = grantsContainer {
                    grantsBuffer = [S3ClientTypes.Grant]()
                    for structureContainer0 in grantsContainer {
                        grantsBuffer?.append(structureContainer0)
                    }
                }
                grants = grantsBuffer
            } else {
                grants = []
            }
        } else {
            grants = nil
        }
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
    }
}

extension S3ClientTypes.AccessControlPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessControlPolicy(grants: \(Swift.String(describing: grants)), owner: \(Swift.String(describing: owner)))"}
}

extension S3ClientTypes.AccessControlPolicy: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Contains the elements that set the ACL permissions for an object per grantee.</p>
    public struct AccessControlPolicy: Swift.Equatable {
        /// <p>A list of grants.</p>
        public let grants: [S3ClientTypes.Grant]?
        /// <p>Container for the bucket owner's display name and ID.</p>
        public let owner: S3ClientTypes.Owner?

        public init (
            grants: [S3ClientTypes.Grant]? = nil,
            owner: S3ClientTypes.Owner? = nil
        )
        {
            self.grants = grants
            self.owner = owner
        }
    }

}

extension S3ClientTypes.AccessControlTranslation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case owner = "Owner"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let owner = owner {
            try container.encode(owner, forKey: ClientRuntime.Key("Owner"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.OwnerOverride.self, forKey: .owner)
        owner = ownerDecoded
    }
}

extension S3ClientTypes.AccessControlTranslation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessControlTranslation(owner: \(Swift.String(describing: owner)))"}
}

extension S3ClientTypes.AccessControlTranslation: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A container for information about access control for replicas.</p>
    public struct AccessControlTranslation: Swift.Equatable {
        /// <p>Specifies the replica ownership. For default and valid values, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html">PUT bucket
        ///             replication</a> in the <i>Amazon S3 API Reference</i>.</p>
        public let owner: S3ClientTypes.OwnerOverride?

        public init (
            owner: S3ClientTypes.OwnerOverride? = nil
        )
        {
            self.owner = owner
        }
    }

}

extension S3ClientTypes.AnalyticsAndOperator: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case prefix = "Prefix"
        case tags = "Tag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
        }
        if let tags = tags {
            if tags.isEmpty {
                var tagsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Tag"))
                try tagsContainer.encodeNil()
            } else {
                for tag0 in tags {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tag"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        if containerValues.contains(.tags) {
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .tags)
                var tagsBuffer:[S3ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension S3ClientTypes.AnalyticsAndOperator: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AnalyticsAndOperator(prefix: \(Swift.String(describing: prefix)), tags: \(Swift.String(describing: tags)))"}
}

extension S3ClientTypes.AnalyticsAndOperator: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter.
    ///          The operator must have at least two predicates in any combination, and an object must match
    ///          all of the predicates for the filter to apply.</p>
    public struct AnalyticsAndOperator: Swift.Equatable {
        /// <p>The prefix to use when evaluating an AND predicate: The prefix that an object must have
        ///          to be included in the metrics results.</p>
        public let prefix: Swift.String?
        /// <p>The list of tags to use when evaluating an AND predicate.</p>
        public let tags: [S3ClientTypes.Tag]?

        public init (
            prefix: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.prefix = prefix
            self.tags = tags
        }
    }

}

extension S3ClientTypes.AnalyticsConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case id = "Id"
        case storageClassAnalysis = "StorageClassAnalysis"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let filter = filter {
            try container.encode(filter, forKey: ClientRuntime.Key("Filter"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let storageClassAnalysis = storageClassAnalysis {
            try container.encode(storageClassAnalysis, forKey: ClientRuntime.Key("StorageClassAnalysis"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AnalyticsFilter.self, forKey: .filter)
        filter = filterDecoded
        let storageClassAnalysisDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClassAnalysis.self, forKey: .storageClassAnalysis)
        storageClassAnalysis = storageClassAnalysisDecoded
    }
}

extension S3ClientTypes.AnalyticsConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AnalyticsConfiguration(filter: \(Swift.String(describing: filter)), id: \(Swift.String(describing: id)), storageClassAnalysis: \(Swift.String(describing: storageClassAnalysis)))"}
}

extension S3ClientTypes.AnalyticsConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.</p>
    public struct AnalyticsConfiguration: Swift.Equatable {
        /// <p>The filter used to describe a set of objects for analyses. A filter must have exactly
        ///          one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided,
        ///          all objects will be considered in any analysis.</p>
        public let filter: S3ClientTypes.AnalyticsFilter?
        /// <p>The ID that identifies the analytics configuration.</p>
        public let id: Swift.String?
        /// <p> Contains data related to access patterns to be collected and made available to analyze
        ///          the tradeoffs between different storage classes. </p>
        public let storageClassAnalysis: S3ClientTypes.StorageClassAnalysis?

        public init (
            filter: S3ClientTypes.AnalyticsFilter? = nil,
            id: Swift.String? = nil,
            storageClassAnalysis: S3ClientTypes.StorageClassAnalysis? = nil
        )
        {
            self.filter = filter
            self.id = id
            self.storageClassAnalysis = storageClassAnalysis
        }
    }

}

extension S3ClientTypes.AnalyticsExportDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3BucketDestination = "S3BucketDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let s3BucketDestination = s3BucketDestination {
            try container.encode(s3BucketDestination, forKey: ClientRuntime.Key("S3BucketDestination"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3BucketDestinationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AnalyticsS3BucketDestination.self, forKey: .s3BucketDestination)
        s3BucketDestination = s3BucketDestinationDecoded
    }
}

extension S3ClientTypes.AnalyticsExportDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AnalyticsExportDestination(s3BucketDestination: \(Swift.String(describing: s3BucketDestination)))"}
}

extension S3ClientTypes.AnalyticsExportDestination: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Where to publish the analytics results.</p>
    public struct AnalyticsExportDestination: Swift.Equatable {
        /// <p>A destination signifying output to an S3 bucket.</p>
        public let s3BucketDestination: S3ClientTypes.AnalyticsS3BucketDestination?

        public init (
            s3BucketDestination: S3ClientTypes.AnalyticsS3BucketDestination? = nil
        )
        {
            self.s3BucketDestination = s3BucketDestination
        }
    }

}

extension S3ClientTypes.AnalyticsFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case and = "And"
        case prefix = "Prefix"
        case tag = "Tag"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        switch self {
            case let .and(and):
                try container.encode(and, forKey: ClientRuntime.Key("And"))
            case let .prefix(prefix):
                try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
            case let .tag(tag):
                try container.encode(tag, forKey: ClientRuntime.Key("Tag"))
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: ClientRuntime.Key("sdkUnknown"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        if let prefix = prefixDecoded {
            self = .prefix(prefix)
            return
        }
        let tagDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tag.self, forKey: .tag)
        if let tag = tagDecoded {
            self = .tag(tag)
            return
        }
        let andDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AnalyticsAndOperator.self, forKey: .and)
        if let and = andDecoded {
            self = .and(and)
            return
        }
        self = .sdkUnknown("")
    }
}

extension S3ClientTypes {
    /// <p>The filter used to describe a set of objects for analyses. A filter must have exactly
    ///          one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided,
    ///          all objects will be considered in any analysis.</p>
    public enum AnalyticsFilter: Swift.Equatable {
        /// <p>The prefix to use when evaluating an analytics filter.</p>
        case prefix(Swift.String)
        /// <p>The tag to use when evaluating an analytics filter.</p>
        case tag(S3ClientTypes.Tag)
        /// <p>A conjunction (logical AND) of predicates, which is used in evaluating an analytics
        ///          filter. The operator must have at least two predicates.</p>
        case and(S3ClientTypes.AnalyticsAndOperator)
        case sdkUnknown(Swift.String)
    }

}

extension S3ClientTypes.AnalyticsS3BucketDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case bucketAccountId = "BucketAccountId"
        case format = "Format"
        case prefix = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let bucket = bucket {
            try container.encode(bucket, forKey: ClientRuntime.Key("Bucket"))
        }
        if let bucketAccountId = bucketAccountId {
            try container.encode(bucketAccountId, forKey: ClientRuntime.Key("BucketAccountId"))
        }
        if let format = format {
            try container.encode(format, forKey: ClientRuntime.Key("Format"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AnalyticsS3ExportFileFormat.self, forKey: .format)
        format = formatDecoded
        let bucketAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketAccountId)
        bucketAccountId = bucketAccountIdDecoded
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
    }
}

extension S3ClientTypes.AnalyticsS3BucketDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AnalyticsS3BucketDestination(bucket: \(Swift.String(describing: bucket)), bucketAccountId: \(Swift.String(describing: bucketAccountId)), format: \(Swift.String(describing: format)), prefix: \(Swift.String(describing: prefix)))"}
}

extension S3ClientTypes.AnalyticsS3BucketDestination: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Contains information about where to publish the analytics results.</p>
    public struct AnalyticsS3BucketDestination: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the bucket to which data is exported.</p>
        public let bucket: Swift.String?
        /// <p>The account ID that owns the destination S3 bucket. If no account ID is provided, the
        ///          owner is not validated before exporting data.</p>
        ///          <note>
        ///             <p> Although this value is optional, we strongly recommend that you set it to help
        ///             prevent problems if the destination bucket ownership changes. </p>
        ///          </note>
        public let bucketAccountId: Swift.String?
        /// <p>Specifies the file format used when exporting data to Amazon S3.</p>
        public let format: S3ClientTypes.AnalyticsS3ExportFileFormat?
        /// <p>The prefix to use when exporting data. The prefix is prepended to all results.</p>
        public let prefix: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            bucketAccountId: Swift.String? = nil,
            format: S3ClientTypes.AnalyticsS3ExportFileFormat? = nil,
            prefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.bucketAccountId = bucketAccountId
            self.format = format
            self.prefix = prefix
        }
    }

}

extension S3ClientTypes {
    public enum AnalyticsS3ExportFileFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case csv
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsS3ExportFileFormat] {
            return [
                .csv,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AnalyticsS3ExportFileFormat(rawValue: rawValue) ?? AnalyticsS3ExportFileFormat.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ArchiveStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case archiveAccess
        case deepArchiveAccess
        case sdkUnknown(Swift.String)

        public static var allCases: [ArchiveStatus] {
            return [
                .archiveAccess,
                .deepArchiveAccess,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .archiveAccess: return "ARCHIVE_ACCESS"
            case .deepArchiveAccess: return "DEEP_ARCHIVE_ACCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ArchiveStatus(rawValue: rawValue) ?? ArchiveStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.Bucket: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let creationDate = creationDate {
            try container.encode(ClientRuntime.TimestampWrapper(creationDate, format: .dateTime), forKey: ClientRuntime.Key("CreationDate"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        var creationDateBuffer:ClientRuntime.Date? = nil
        if let creationDateDecoded = creationDateDecoded {
            creationDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(creationDateDecoded, format: .dateTime)
        }
        creationDate = creationDateBuffer
    }
}

extension S3ClientTypes.Bucket: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Bucket(creationDate: \(Swift.String(describing: creationDate)), name: \(Swift.String(describing: name)))"}
}

extension S3ClientTypes.Bucket: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p> In terms of implementation, a Bucket is a resource. An Amazon S3 bucket name is globally
    ///          unique, and the namespace is shared by all AWS accounts. </p>
    public struct Bucket: Swift.Equatable {
        /// <p>Date the bucket was created. This date can change when making changes to your bucket, such as editing its bucket policy.</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>The name of the bucket.</p>
        public let name: Swift.String?

        public init (
            creationDate: ClientRuntime.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.creationDate = creationDate
            self.name = name
        }
    }

}

extension S3ClientTypes {
    public enum BucketAccelerateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enabled
        case suspended
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketAccelerateStatus] {
            return [
                .enabled,
                .suspended,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "Enabled"
            case .suspended: return "Suspended"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BucketAccelerateStatus(rawValue: rawValue) ?? BucketAccelerateStatus.sdkUnknown(rawValue)
        }
    }
}

extension BucketAlreadyExists: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BucketAlreadyExists()"}
}

extension BucketAlreadyExists: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested bucket name is not available. The bucket namespace is shared by all users
///          of the system. Select a different name and try again.</p>
public struct BucketAlreadyExists: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client

    public init() {}
}

extension BucketAlreadyOwnedByYou: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BucketAlreadyOwnedByYou()"}
}

extension BucketAlreadyOwnedByYou: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The bucket you tried to create already exists, and you own it. Amazon S3 returns this error
///          in all AWS Regions except in the North Virginia Region. For legacy compatibility, if you
///          re-create an existing bucket that you already own in the North Virginia Region, Amazon S3
///          returns 200 OK and resets the bucket access control lists (ACLs).</p>
public struct BucketAlreadyOwnedByYou: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client

    public init() {}
}

extension S3ClientTypes {
    public enum BucketCannedACL: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case authenticatedRead
        case `private`
        case publicRead
        case publicReadWrite
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketCannedACL] {
            return [
                .authenticatedRead,
                .private,
                .publicRead,
                .publicReadWrite,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .authenticatedRead: return "authenticated-read"
            case .private: return "private"
            case .publicRead: return "public-read"
            case .publicReadWrite: return "public-read-write"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BucketCannedACL(rawValue: rawValue) ?? BucketCannedACL.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.BucketLifecycleConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let rules = rules {
            if rules.isEmpty {
                var rulesContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Rule"))
                try rulesContainer.encodeNil()
            } else {
                for lifecyclerule0 in rules {
                    var rulesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Rule"))
                    try rulesContainer0.encode(lifecyclerule0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.rules) {
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .rules)
            if rulesWrappedContainer != nil {
                let rulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.LifecycleRule].self, forKey: .rules)
                var rulesBuffer:[S3ClientTypes.LifecycleRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [S3ClientTypes.LifecycleRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}

extension S3ClientTypes.BucketLifecycleConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BucketLifecycleConfiguration(rules: \(Swift.String(describing: rules)))"}
}

extension S3ClientTypes.BucketLifecycleConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more
    ///          information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html">Object Lifecycle Management</a>
    ///          in the <i>Amazon S3 User Guide</i>.</p>
    public struct BucketLifecycleConfiguration: Swift.Equatable {
        /// <p>A lifecycle rule for individual objects in an Amazon S3 bucket.</p>
        public let rules: [S3ClientTypes.LifecycleRule]?

        public init (
            rules: [S3ClientTypes.LifecycleRule]? = nil
        )
        {
            self.rules = rules
        }
    }

}

extension S3ClientTypes {
    public enum BucketLocationConstraint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case eu
        case afSouth1
        case apEast1
        case apNortheast1
        case apNortheast2
        case apNortheast3
        case apSouth1
        case apSoutheast1
        case apSoutheast2
        case caCentral1
        case cnNorth1
        case cnNorthwest1
        case euCentral1
        case euNorth1
        case euSouth1
        case euWest1
        case euWest2
        case euWest3
        case meSouth1
        case saEast1
        case usEast2
        case usGovEast1
        case usGovWest1
        case usWest1
        case usWest2
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketLocationConstraint] {
            return [
                .eu,
                .afSouth1,
                .apEast1,
                .apNortheast1,
                .apNortheast2,
                .apNortheast3,
                .apSouth1,
                .apSoutheast1,
                .apSoutheast2,
                .caCentral1,
                .cnNorth1,
                .cnNorthwest1,
                .euCentral1,
                .euNorth1,
                .euSouth1,
                .euWest1,
                .euWest2,
                .euWest3,
                .meSouth1,
                .saEast1,
                .usEast2,
                .usGovEast1,
                .usGovWest1,
                .usWest1,
                .usWest2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .eu: return "EU"
            case .afSouth1: return "af-south-1"
            case .apEast1: return "ap-east-1"
            case .apNortheast1: return "ap-northeast-1"
            case .apNortheast2: return "ap-northeast-2"
            case .apNortheast3: return "ap-northeast-3"
            case .apSouth1: return "ap-south-1"
            case .apSoutheast1: return "ap-southeast-1"
            case .apSoutheast2: return "ap-southeast-2"
            case .caCentral1: return "ca-central-1"
            case .cnNorth1: return "cn-north-1"
            case .cnNorthwest1: return "cn-northwest-1"
            case .euCentral1: return "eu-central-1"
            case .euNorth1: return "eu-north-1"
            case .euSouth1: return "eu-south-1"
            case .euWest1: return "eu-west-1"
            case .euWest2: return "eu-west-2"
            case .euWest3: return "eu-west-3"
            case .meSouth1: return "me-south-1"
            case .saEast1: return "sa-east-1"
            case .usEast2: return "us-east-2"
            case .usGovEast1: return "us-gov-east-1"
            case .usGovWest1: return "us-gov-west-1"
            case .usWest1: return "us-west-1"
            case .usWest2: return "us-west-2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BucketLocationConstraint(rawValue: rawValue) ?? BucketLocationConstraint.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.BucketLoggingStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingEnabled = "LoggingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let loggingEnabled = loggingEnabled {
            try container.encode(loggingEnabled, forKey: ClientRuntime.Key("LoggingEnabled"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingEnabledDecoded = try containerValues.decodeIfPresent(S3ClientTypes.LoggingEnabled.self, forKey: .loggingEnabled)
        loggingEnabled = loggingEnabledDecoded
    }
}

extension S3ClientTypes.BucketLoggingStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BucketLoggingStatus(loggingEnabled: \(Swift.String(describing: loggingEnabled)))"}
}

extension S3ClientTypes.BucketLoggingStatus: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for logging status information.</p>
    public struct BucketLoggingStatus: Swift.Equatable {
        /// <p>Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys
        ///          for a bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html">PUT Bucket logging</a> in the
        ///             <i>Amazon S3 API Reference</i>.</p>
        public let loggingEnabled: S3ClientTypes.LoggingEnabled?

        public init (
            loggingEnabled: S3ClientTypes.LoggingEnabled? = nil
        )
        {
            self.loggingEnabled = loggingEnabled
        }
    }

}

extension S3ClientTypes {
    public enum BucketLogsPermission: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fullControl
        case read
        case write
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketLogsPermission] {
            return [
                .fullControl,
                .read,
                .write,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fullControl: return "FULL_CONTROL"
            case .read: return "READ"
            case .write: return "WRITE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BucketLogsPermission(rawValue: rawValue) ?? BucketLogsPermission.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum BucketVersioningStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enabled
        case suspended
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketVersioningStatus] {
            return [
                .enabled,
                .suspended,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "Enabled"
            case .suspended: return "Suspended"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BucketVersioningStatus(rawValue: rawValue) ?? BucketVersioningStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.CORSConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cORSRules = "CORSRule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let cORSRules = cORSRules {
            if cORSRules.isEmpty {
                var cORSRulesContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("CORSRule"))
                try cORSRulesContainer.encodeNil()
            } else {
                for corsrule0 in cORSRules {
                    var cORSRulesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CORSRule"))
                    try cORSRulesContainer0.encode(corsrule0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.cORSRules) {
            let cORSRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .cORSRules)
            if cORSRulesWrappedContainer != nil {
                let cORSRulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.CORSRule].self, forKey: .cORSRules)
                var cORSRulesBuffer:[S3ClientTypes.CORSRule]? = nil
                if let cORSRulesContainer = cORSRulesContainer {
                    cORSRulesBuffer = [S3ClientTypes.CORSRule]()
                    for structureContainer0 in cORSRulesContainer {
                        cORSRulesBuffer?.append(structureContainer0)
                    }
                }
                cORSRules = cORSRulesBuffer
            } else {
                cORSRules = []
            }
        } else {
            cORSRules = nil
        }
    }
}

extension S3ClientTypes.CORSConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CORSConfiguration(cORSRules: \(Swift.String(describing: cORSRules)))"}
}

extension S3ClientTypes.CORSConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more
    ///          information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html">Enabling
    ///             Cross-Origin Resource Sharing</a> in the <i>Amazon S3 User Guide</i>.</p>
    public struct CORSConfiguration: Swift.Equatable {
        /// <p>A set of origins and methods (cross-origin access that you want to allow). You can add
        ///          up to 100 rules to the configuration.</p>
        public let cORSRules: [S3ClientTypes.CORSRule]?

        public init (
            cORSRules: [S3ClientTypes.CORSRule]? = nil
        )
        {
            self.cORSRules = cORSRules
        }
    }

}

extension S3ClientTypes.CORSRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedHeaders = "AllowedHeader"
        case allowedMethods = "AllowedMethod"
        case allowedOrigins = "AllowedOrigin"
        case exposeHeaders = "ExposeHeader"
        case iD = "ID"
        case maxAgeSeconds = "MaxAgeSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let allowedHeaders = allowedHeaders {
            if allowedHeaders.isEmpty {
                var allowedHeadersContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("AllowedHeader"))
                try allowedHeadersContainer.encodeNil()
            } else {
                for allowedheader0 in allowedHeaders {
                    var allowedHeadersContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllowedHeader"))
                    try allowedHeadersContainer0.encode(allowedheader0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let allowedMethods = allowedMethods {
            if allowedMethods.isEmpty {
                var allowedMethodsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("AllowedMethod"))
                try allowedMethodsContainer.encodeNil()
            } else {
                for allowedmethod0 in allowedMethods {
                    var allowedMethodsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllowedMethod"))
                    try allowedMethodsContainer0.encode(allowedmethod0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let allowedOrigins = allowedOrigins {
            if allowedOrigins.isEmpty {
                var allowedOriginsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("AllowedOrigin"))
                try allowedOriginsContainer.encodeNil()
            } else {
                for allowedorigin0 in allowedOrigins {
                    var allowedOriginsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllowedOrigin"))
                    try allowedOriginsContainer0.encode(allowedorigin0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let exposeHeaders = exposeHeaders {
            if exposeHeaders.isEmpty {
                var exposeHeadersContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("ExposeHeader"))
                try exposeHeadersContainer.encodeNil()
            } else {
                for exposeheader0 in exposeHeaders {
                    var exposeHeadersContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExposeHeader"))
                    try exposeHeadersContainer0.encode(exposeheader0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let iD = iD {
            try container.encode(iD, forKey: ClientRuntime.Key("ID"))
        }
        if maxAgeSeconds != 0 {
            try container.encode(maxAgeSeconds, forKey: ClientRuntime.Key("MaxAgeSeconds"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iD)
        iD = iDDecoded
        if containerValues.contains(.allowedHeaders) {
            let allowedHeadersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .allowedHeaders)
            if allowedHeadersWrappedContainer != nil {
                let allowedHeadersContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .allowedHeaders)
                var allowedHeadersBuffer:[Swift.String]? = nil
                if let allowedHeadersContainer = allowedHeadersContainer {
                    allowedHeadersBuffer = [Swift.String]()
                    for stringContainer0 in allowedHeadersContainer {
                        allowedHeadersBuffer?.append(stringContainer0)
                    }
                }
                allowedHeaders = allowedHeadersBuffer
            } else {
                allowedHeaders = []
            }
        } else {
            allowedHeaders = nil
        }
        if containerValues.contains(.allowedMethods) {
            let allowedMethodsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .allowedMethods)
            if allowedMethodsWrappedContainer != nil {
                let allowedMethodsContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .allowedMethods)
                var allowedMethodsBuffer:[Swift.String]? = nil
                if let allowedMethodsContainer = allowedMethodsContainer {
                    allowedMethodsBuffer = [Swift.String]()
                    for stringContainer0 in allowedMethodsContainer {
                        allowedMethodsBuffer?.append(stringContainer0)
                    }
                }
                allowedMethods = allowedMethodsBuffer
            } else {
                allowedMethods = []
            }
        } else {
            allowedMethods = nil
        }
        if containerValues.contains(.allowedOrigins) {
            let allowedOriginsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .allowedOrigins)
            if allowedOriginsWrappedContainer != nil {
                let allowedOriginsContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .allowedOrigins)
                var allowedOriginsBuffer:[Swift.String]? = nil
                if let allowedOriginsContainer = allowedOriginsContainer {
                    allowedOriginsBuffer = [Swift.String]()
                    for stringContainer0 in allowedOriginsContainer {
                        allowedOriginsBuffer?.append(stringContainer0)
                    }
                }
                allowedOrigins = allowedOriginsBuffer
            } else {
                allowedOrigins = []
            }
        } else {
            allowedOrigins = nil
        }
        if containerValues.contains(.exposeHeaders) {
            let exposeHeadersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .exposeHeaders)
            if exposeHeadersWrappedContainer != nil {
                let exposeHeadersContainer = try containerValues.decodeIfPresent([Swift.String].self, forKey: .exposeHeaders)
                var exposeHeadersBuffer:[Swift.String]? = nil
                if let exposeHeadersContainer = exposeHeadersContainer {
                    exposeHeadersBuffer = [Swift.String]()
                    for stringContainer0 in exposeHeadersContainer {
                        exposeHeadersBuffer?.append(stringContainer0)
                    }
                }
                exposeHeaders = exposeHeadersBuffer
            } else {
                exposeHeaders = []
            }
        } else {
            exposeHeaders = nil
        }
        let maxAgeSecondsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxAgeSeconds)
        maxAgeSeconds = maxAgeSecondsDecoded
    }
}

extension S3ClientTypes.CORSRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CORSRule(allowedHeaders: \(Swift.String(describing: allowedHeaders)), allowedMethods: \(Swift.String(describing: allowedMethods)), allowedOrigins: \(Swift.String(describing: allowedOrigins)), exposeHeaders: \(Swift.String(describing: exposeHeaders)), iD: \(Swift.String(describing: iD)), maxAgeSeconds: \(Swift.String(describing: maxAgeSeconds)))"}
}

extension S3ClientTypes.CORSRule: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies a cross-origin access rule for an Amazon S3 bucket.</p>
    public struct CORSRule: Swift.Equatable {
        /// <p>Headers that are specified in the <code>Access-Control-Request-Headers</code> header.
        ///          These headers are allowed in a preflight OPTIONS request. In response to any preflight
        ///          OPTIONS request, Amazon S3 returns any requested headers that are allowed.</p>
        public let allowedHeaders: [Swift.String]?
        /// <p>An HTTP method that you allow the origin to execute. Valid values are <code>GET</code>,
        ///             <code>PUT</code>, <code>HEAD</code>, <code>POST</code>, and <code>DELETE</code>.</p>
        public let allowedMethods: [Swift.String]?
        /// <p>One or more origins you want customers to be able to access the bucket from.</p>
        public let allowedOrigins: [Swift.String]?
        /// <p>One or more headers in the response that you want customers to be able to access from
        ///          their applications (for example, from a JavaScript <code>XMLHttpRequest</code>
        ///          object).</p>
        public let exposeHeaders: [Swift.String]?
        /// <p>Unique identifier for the rule. The value cannot be longer than 255 characters.</p>
        public let iD: Swift.String?
        /// <p>The time in seconds that your browser is to cache the preflight response for the
        ///          specified resource.</p>
        public let maxAgeSeconds: Swift.Int

        public init (
            allowedHeaders: [Swift.String]? = nil,
            allowedMethods: [Swift.String]? = nil,
            allowedOrigins: [Swift.String]? = nil,
            exposeHeaders: [Swift.String]? = nil,
            iD: Swift.String? = nil,
            maxAgeSeconds: Swift.Int = 0
        )
        {
            self.allowedHeaders = allowedHeaders
            self.allowedMethods = allowedMethods
            self.allowedOrigins = allowedOrigins
            self.exposeHeaders = exposeHeaders
            self.iD = iD
            self.maxAgeSeconds = maxAgeSeconds
        }
    }

}

extension S3ClientTypes.CSVInput: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowQuotedRecordDelimiter = "AllowQuotedRecordDelimiter"
        case comments = "Comments"
        case fieldDelimiter = "FieldDelimiter"
        case fileHeaderInfo = "FileHeaderInfo"
        case quoteCharacter = "QuoteCharacter"
        case quoteEscapeCharacter = "QuoteEscapeCharacter"
        case recordDelimiter = "RecordDelimiter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if allowQuotedRecordDelimiter != false {
            try container.encode(allowQuotedRecordDelimiter, forKey: ClientRuntime.Key("AllowQuotedRecordDelimiter"))
        }
        if let comments = comments {
            try container.encode(comments, forKey: ClientRuntime.Key("Comments"))
        }
        if let fieldDelimiter = fieldDelimiter {
            try container.encode(fieldDelimiter, forKey: ClientRuntime.Key("FieldDelimiter"))
        }
        if let fileHeaderInfo = fileHeaderInfo {
            try container.encode(fileHeaderInfo, forKey: ClientRuntime.Key("FileHeaderInfo"))
        }
        if let quoteCharacter = quoteCharacter {
            try container.encode(quoteCharacter, forKey: ClientRuntime.Key("QuoteCharacter"))
        }
        if let quoteEscapeCharacter = quoteEscapeCharacter {
            try container.encode(quoteEscapeCharacter, forKey: ClientRuntime.Key("QuoteEscapeCharacter"))
        }
        if let recordDelimiter = recordDelimiter {
            try container.encode(recordDelimiter, forKey: ClientRuntime.Key("RecordDelimiter"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileHeaderInfoDecoded = try containerValues.decodeIfPresent(S3ClientTypes.FileHeaderInfo.self, forKey: .fileHeaderInfo)
        fileHeaderInfo = fileHeaderInfoDecoded
        let commentsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comments)
        comments = commentsDecoded
        let quoteEscapeCharacterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quoteEscapeCharacter)
        quoteEscapeCharacter = quoteEscapeCharacterDecoded
        let recordDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordDelimiter)
        recordDelimiter = recordDelimiterDecoded
        let fieldDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fieldDelimiter)
        fieldDelimiter = fieldDelimiterDecoded
        let quoteCharacterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quoteCharacter)
        quoteCharacter = quoteCharacterDecoded
        let allowQuotedRecordDelimiterDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowQuotedRecordDelimiter)
        allowQuotedRecordDelimiter = allowQuotedRecordDelimiterDecoded
    }
}

extension S3ClientTypes.CSVInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CSVInput(allowQuotedRecordDelimiter: \(Swift.String(describing: allowQuotedRecordDelimiter)), comments: \(Swift.String(describing: comments)), fieldDelimiter: \(Swift.String(describing: fieldDelimiter)), fileHeaderInfo: \(Swift.String(describing: fileHeaderInfo)), quoteCharacter: \(Swift.String(describing: quoteCharacter)), quoteEscapeCharacter: \(Swift.String(describing: quoteEscapeCharacter)), recordDelimiter: \(Swift.String(describing: recordDelimiter)))"}
}

extension S3ClientTypes.CSVInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Describes how an uncompressed comma-separated values (CSV)-formatted input object is
    ///          formatted.</p>
    public struct CSVInput: Swift.Equatable {
        /// <p>Specifies that CSV field values may contain quoted record delimiters and such records
        ///          should be allowed. Default value is FALSE. Setting this value to TRUE may lower
        ///          performance.</p>
        public let allowQuotedRecordDelimiter: Swift.Bool
        /// <p>A single character used to indicate that a row should be ignored when the character is
        ///          present at the start of that row. You can specify any character to indicate a comment
        ///          line.</p>
        public let comments: Swift.String?
        /// <p>A single character used to separate individual fields in a record. You can specify an
        ///          arbitrary delimiter.</p>
        public let fieldDelimiter: Swift.String?
        /// <p>Describes the first line of input. Valid values are:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>NONE</code>: First line is not a header.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>IGNORE</code>: First line is a header, but you can't use the header values
        ///                to indicate the column in an expression. You can use column position (such as _1, _2,
        ///                …) to indicate the column (<code>SELECT s._1 FROM OBJECT s</code>).</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Use</code>: First line is a header, and you can use the header value to
        ///                identify a column in an expression (<code>SELECT "name" FROM OBJECT</code>). </p>
        ///             </li>
        ///          </ul>
        public let fileHeaderInfo: S3ClientTypes.FileHeaderInfo?
        /// <p>A single character used for escaping when the field delimiter is part of the value. For
        ///          example, if the value is <code>a, b</code>, Amazon S3 wraps this field value in quotation marks,
        ///          as follows: <code>" a , b "</code>.</p>
        ///          <p>Type: String</p>
        ///          <p>Default: <code>"</code>
        ///          </p>
        ///          <p>Ancestors: <code>CSV</code>
        ///          </p>
        public let quoteCharacter: Swift.String?
        /// <p>A single character used for escaping the quotation mark character inside an already
        ///          escaped value. For example, the value """ a , b """ is parsed as " a , b ".</p>
        public let quoteEscapeCharacter: Swift.String?
        /// <p>A single character used to separate individual records in the input. Instead of the
        ///          default value, you can specify an arbitrary delimiter.</p>
        public let recordDelimiter: Swift.String?

        public init (
            allowQuotedRecordDelimiter: Swift.Bool = false,
            comments: Swift.String? = nil,
            fieldDelimiter: Swift.String? = nil,
            fileHeaderInfo: S3ClientTypes.FileHeaderInfo? = nil,
            quoteCharacter: Swift.String? = nil,
            quoteEscapeCharacter: Swift.String? = nil,
            recordDelimiter: Swift.String? = nil
        )
        {
            self.allowQuotedRecordDelimiter = allowQuotedRecordDelimiter
            self.comments = comments
            self.fieldDelimiter = fieldDelimiter
            self.fileHeaderInfo = fileHeaderInfo
            self.quoteCharacter = quoteCharacter
            self.quoteEscapeCharacter = quoteEscapeCharacter
            self.recordDelimiter = recordDelimiter
        }
    }

}

extension S3ClientTypes.CSVOutput: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldDelimiter = "FieldDelimiter"
        case quoteCharacter = "QuoteCharacter"
        case quoteEscapeCharacter = "QuoteEscapeCharacter"
        case quoteFields = "QuoteFields"
        case recordDelimiter = "RecordDelimiter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let fieldDelimiter = fieldDelimiter {
            try container.encode(fieldDelimiter, forKey: ClientRuntime.Key("FieldDelimiter"))
        }
        if let quoteCharacter = quoteCharacter {
            try container.encode(quoteCharacter, forKey: ClientRuntime.Key("QuoteCharacter"))
        }
        if let quoteEscapeCharacter = quoteEscapeCharacter {
            try container.encode(quoteEscapeCharacter, forKey: ClientRuntime.Key("QuoteEscapeCharacter"))
        }
        if let quoteFields = quoteFields {
            try container.encode(quoteFields, forKey: ClientRuntime.Key("QuoteFields"))
        }
        if let recordDelimiter = recordDelimiter {
            try container.encode(recordDelimiter, forKey: ClientRuntime.Key("RecordDelimiter"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let quoteFieldsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.QuoteFields.self, forKey: .quoteFields)
        quoteFields = quoteFieldsDecoded
        let quoteEscapeCharacterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quoteEscapeCharacter)
        quoteEscapeCharacter = quoteEscapeCharacterDecoded
        let recordDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordDelimiter)
        recordDelimiter = recordDelimiterDecoded
        let fieldDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fieldDelimiter)
        fieldDelimiter = fieldDelimiterDecoded
        let quoteCharacterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quoteCharacter)
        quoteCharacter = quoteCharacterDecoded
    }
}

extension S3ClientTypes.CSVOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CSVOutput(fieldDelimiter: \(Swift.String(describing: fieldDelimiter)), quoteCharacter: \(Swift.String(describing: quoteCharacter)), quoteEscapeCharacter: \(Swift.String(describing: quoteEscapeCharacter)), quoteFields: \(Swift.String(describing: quoteFields)), recordDelimiter: \(Swift.String(describing: recordDelimiter)))"}
}

extension S3ClientTypes.CSVOutput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Describes how uncompressed comma-separated values (CSV)-formatted results are
    ///          formatted.</p>
    public struct CSVOutput: Swift.Equatable {
        /// <p>The value used to separate individual fields in a record. You can specify an arbitrary
        ///          delimiter.</p>
        public let fieldDelimiter: Swift.String?
        /// <p>A single character used for escaping when the field delimiter is part of the value. For
        ///          example, if the value is <code>a, b</code>, Amazon S3 wraps this field value in quotation marks,
        ///          as follows: <code>" a , b "</code>.</p>
        public let quoteCharacter: Swift.String?
        /// <p>The single character used for escaping the quote character inside an already escaped
        ///          value.</p>
        public let quoteEscapeCharacter: Swift.String?
        /// <p>Indicates whether to use quotation marks around output fields. </p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>ALWAYS</code>: Always use quotation marks for output fields.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>ASNEEDED</code>: Use quotation marks for output fields when needed.</p>
        ///             </li>
        ///          </ul>
        public let quoteFields: S3ClientTypes.QuoteFields?
        /// <p>A single character used to separate individual records in the output. Instead of the
        ///          default value, you can specify an arbitrary delimiter.</p>
        public let recordDelimiter: Swift.String?

        public init (
            fieldDelimiter: Swift.String? = nil,
            quoteCharacter: Swift.String? = nil,
            quoteEscapeCharacter: Swift.String? = nil,
            quoteFields: S3ClientTypes.QuoteFields? = nil,
            recordDelimiter: Swift.String? = nil
        )
        {
            self.fieldDelimiter = fieldDelimiter
            self.quoteCharacter = quoteCharacter
            self.quoteEscapeCharacter = quoteEscapeCharacter
            self.quoteFields = quoteFields
            self.recordDelimiter = recordDelimiter
        }
    }

}

extension S3ClientTypes.CommonPrefix: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case prefix = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
    }
}

extension S3ClientTypes.CommonPrefix: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CommonPrefix(prefix: \(Swift.String(describing: prefix)))"}
}

extension S3ClientTypes.CommonPrefix: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for all (if there are any) keys between Prefix and the next occurrence of the
    ///          string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in
    ///          the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter
    ///          is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. </p>
    public struct CommonPrefix: Swift.Equatable {
        /// <p>Container for the specified common prefix.</p>
        public let prefix: Swift.String?

        public init (
            prefix: Swift.String? = nil
        )
        {
            self.prefix = prefix
        }
    }

}

public struct CompleteMultipartUploadInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CompleteMultipartUploadInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CompleteMultipartUploadInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CompleteMultipartUploadOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let multipartUpload = input.operationInput.multipartUpload {
            do {
                let encoder = context.getEncoder()
                let multipartUploaddata = try encoder.encode(multipartUpload)
                let multipartUploadbody = ClientRuntime.HttpBody.data(multipartUploaddata)
                input.builder.withBody(multipartUploadbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CompleteMultipartUploadInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CompleteMultipartUploadOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CompleteMultipartUploadOutputError>
}

extension CompleteMultipartUploadInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CompleteMultipartUploadInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), multipartUpload: \(Swift.String(describing: multipartUpload)), requestPayer: \(Swift.String(describing: requestPayer)), uploadId: \(Swift.String(describing: uploadId)))"}
}

extension CompleteMultipartUploadInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension CompleteMultipartUploadInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multipartUpload = "CompleteMultipartUpload"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let multipartUpload = multipartUpload {
            try container.encode(multipartUpload, forKey: ClientRuntime.Key("CompleteMultipartUpload"))
        }
    }
}

public struct CompleteMultipartUploadInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CompleteMultipartUploadInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CompleteMultipartUploadInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CompleteMultipartUploadOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CompleteMultipartUploadInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CompleteMultipartUploadOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CompleteMultipartUploadOutputError>
}

public struct CompleteMultipartUploadInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CompleteMultipartUploadInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CompleteMultipartUploadInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CompleteMultipartUploadOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "CompleteMultipartUpload"))
        if let uploadId = input.operationInput.uploadId {
            let uploadIdQueryItem = ClientRuntime.URLQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
            input.builder.withQueryItem(uploadIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CompleteMultipartUploadInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CompleteMultipartUploadOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CompleteMultipartUploadOutputError>
}

public struct CompleteMultipartUploadInput: Swift.Equatable {
    /// <p>Name of the bucket to which the multipart upload was initiated.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Object key for which the multipart upload was initiated.</p>
    public let key: Swift.String?
    /// <p>The container for the multipart upload request information.</p>
    public let multipartUpload: S3ClientTypes.CompletedMultipartUpload?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>ID for the initiated multipart upload.</p>
    public let uploadId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        multipartUpload: S3ClientTypes.CompletedMultipartUpload? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.multipartUpload = multipartUpload
        self.requestPayer = requestPayer
        self.uploadId = uploadId
    }
}

struct CompleteMultipartUploadInputBody: Swift.Equatable {
    public let multipartUpload: S3ClientTypes.CompletedMultipartUpload?
}

extension CompleteMultipartUploadInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multipartUpload = "CompleteMultipartUpload"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multipartUploadDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CompletedMultipartUpload.self, forKey: .multipartUpload)
        multipartUpload = multipartUploadDecoded
    }
}

extension CompleteMultipartUploadOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CompleteMultipartUploadOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CompleteMultipartUploadOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension CompleteMultipartUploadOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CompleteMultipartUploadOutputResponse(bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), eTag: \(Swift.String(describing: eTag)), expiration: \(Swift.String(describing: expiration)), key: \(Swift.String(describing: key)), location: \(Swift.String(describing: location)), requestCharged: \(Swift.String(describing: requestCharged)), sSEKMSKeyId: \(Swift.String(describing: sSEKMSKeyId)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), versionId: \(Swift.String(describing: versionId)))"}
}

extension CompleteMultipartUploadOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = false
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            self.expiration = expirationHeaderValue
        } else {
            self.expiration = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let sSEKMSKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.sSEKMSKeyId = sSEKMSKeyIdHeaderValue
        } else {
            self.sSEKMSKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CompleteMultipartUploadOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bucket = output.bucket
            self.eTag = output.eTag
            self.key = output.key
            self.location = output.location
        } else {
            self.bucket = nil
            self.eTag = nil
            self.key = nil
            self.location = nil
        }
    }
}

public struct CompleteMultipartUploadOutputResponse: Swift.Equatable {
    /// <p>The name of the bucket that contains the newly created object.</p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>
    public let bucketKeyEnabled: Swift.Bool
    /// <p>Entity tag that identifies the newly created object's data. Objects with different
    ///          object data will have different entity tags. The entity tag is an opaque string. The entity
    ///          tag may or may not be an MD5 digest of the object data. If the entity tag is not an MD5
    ///          digest of the object data, it will contain one or more nonhexadecimal characters and/or
    ///          will consist of less than 32 or more than 32 hexadecimal digits.</p>
    public let eTag: Swift.String?
    /// <p>If the object expiration is configured, this will contain the expiration date
    ///          (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.</p>
    public let expiration: Swift.String?
    /// <p>The object key of the newly created object.</p>
    public let key: Swift.String?
    /// <p>The URI that identifies the newly created object.</p>
    public let location: Swift.String?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?
    /// <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric
    ///          customer managed customer master key (CMK) that was used for the object.</p>
    public let sSEKMSKeyId: Swift.String?
    /// <p>If you specified server-side encryption either with an Amazon S3-managed encryption key or an
    ///          AWS KMS customer master key (CMK) in your initiate multipart upload request, the response
    ///          includes this header. It confirms the encryption algorithm that Amazon S3 used to encrypt the
    ///          object.</p>
    public let serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// <p>Version ID of the newly created object, in case the bucket has versioning turned
    ///          on.</p>
    public let versionId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool = false,
        eTag: Swift.String? = nil,
        expiration: Swift.String? = nil,
        key: Swift.String? = nil,
        location: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        sSEKMSKeyId: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.eTag = eTag
        self.expiration = expiration
        self.key = key
        self.location = location
        self.requestCharged = requestCharged
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
        self.versionId = versionId
    }
}

struct CompleteMultipartUploadOutputResponseBody: Swift.Equatable {
    public let location: Swift.String?
    public let bucket: Swift.String?
    public let key: Swift.String?
    public let eTag: Swift.String?
}

extension CompleteMultipartUploadOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case eTag = "ETag"
        case key = "Key"
        case location = "Location"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
    }
}

extension S3ClientTypes.CompletedMultipartUpload: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parts = "Part"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let parts = parts {
            if parts.isEmpty {
                var partsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Part"))
                try partsContainer.encodeNil()
            } else {
                for completedpart0 in parts {
                    var partsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Part"))
                    try partsContainer0.encode(completedpart0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.parts) {
            let partsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .parts)
            if partsWrappedContainer != nil {
                let partsContainer = try containerValues.decodeIfPresent([S3ClientTypes.CompletedPart].self, forKey: .parts)
                var partsBuffer:[S3ClientTypes.CompletedPart]? = nil
                if let partsContainer = partsContainer {
                    partsBuffer = [S3ClientTypes.CompletedPart]()
                    for structureContainer0 in partsContainer {
                        partsBuffer?.append(structureContainer0)
                    }
                }
                parts = partsBuffer
            } else {
                parts = []
            }
        } else {
            parts = nil
        }
    }
}

extension S3ClientTypes.CompletedMultipartUpload: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CompletedMultipartUpload(parts: \(Swift.String(describing: parts)))"}
}

extension S3ClientTypes.CompletedMultipartUpload: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>The container for the completed multipart upload details.</p>
    public struct CompletedMultipartUpload: Swift.Equatable {
        /// <p>Array of CompletedPart data types.</p>
        public let parts: [S3ClientTypes.CompletedPart]?

        public init (
            parts: [S3ClientTypes.CompletedPart]? = nil
        )
        {
            self.parts = parts
        }
    }

}

extension S3ClientTypes.CompletedPart: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eTag = "ETag"
        case partNumber = "PartNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let eTag = eTag {
            try container.encode(eTag, forKey: ClientRuntime.Key("ETag"))
        }
        if partNumber != 0 {
            try container.encode(partNumber, forKey: ClientRuntime.Key("PartNumber"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        let partNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .partNumber)
        partNumber = partNumberDecoded
    }
}

extension S3ClientTypes.CompletedPart: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CompletedPart(eTag: \(Swift.String(describing: eTag)), partNumber: \(Swift.String(describing: partNumber)))"}
}

extension S3ClientTypes.CompletedPart: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Details of the parts that were uploaded.</p>
    public struct CompletedPart: Swift.Equatable {
        /// <p>Entity tag returned when the part was uploaded.</p>
        public let eTag: Swift.String?
        /// <p>Part number that identifies the part. This is a positive integer between 1 and
        ///          10,000.</p>
        public let partNumber: Swift.Int

        public init (
            eTag: Swift.String? = nil,
            partNumber: Swift.Int = 0
        )
        {
            self.eTag = eTag
            self.partNumber = partNumber
        }
    }

}

extension S3ClientTypes {
    public enum CompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bzip2
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [CompressionType] {
            return [
                .bzip2,
                .gzip,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bzip2: return "BZIP2"
            case .gzip: return "GZIP"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CompressionType(rawValue: rawValue) ?? CompressionType.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.Condition: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpErrorCodeReturnedEquals = "HttpErrorCodeReturnedEquals"
        case keyPrefixEquals = "KeyPrefixEquals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let httpErrorCodeReturnedEquals = httpErrorCodeReturnedEquals {
            try container.encode(httpErrorCodeReturnedEquals, forKey: ClientRuntime.Key("HttpErrorCodeReturnedEquals"))
        }
        if let keyPrefixEquals = keyPrefixEquals {
            try container.encode(keyPrefixEquals, forKey: ClientRuntime.Key("KeyPrefixEquals"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let httpErrorCodeReturnedEqualsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .httpErrorCodeReturnedEquals)
        httpErrorCodeReturnedEquals = httpErrorCodeReturnedEqualsDecoded
        let keyPrefixEqualsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPrefixEquals)
        keyPrefixEquals = keyPrefixEqualsDecoded
    }
}

extension S3ClientTypes.Condition: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Condition(httpErrorCodeReturnedEquals: \(Swift.String(describing: httpErrorCodeReturnedEquals)), keyPrefixEquals: \(Swift.String(describing: keyPrefixEquals)))"}
}

extension S3ClientTypes.Condition: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A container for describing a condition that must be met for the specified redirect to
    ///          apply. For example, 1. If request is for pages in the <code>/docs</code> folder, redirect
    ///          to the <code>/documents</code> folder. 2. If request results in HTTP error 4xx, redirect
    ///          request to another host where you might process the error.</p>
    public struct Condition: Swift.Equatable {
        /// <p>The HTTP error code when the redirect is applied. In the event of an error, if the error
        ///          code equals this value, then the specified redirect is applied. Required when parent
        ///          element <code>Condition</code> is specified and sibling <code>KeyPrefixEquals</code> is not
        ///          specified. If both are specified, then both must be true for the redirect to be
        ///          applied.</p>
        public let httpErrorCodeReturnedEquals: Swift.String?
        /// <p>The object key name prefix when the redirect is applied. For example, to redirect
        ///          requests for <code>ExamplePage.html</code>, the key prefix will be
        ///             <code>ExamplePage.html</code>. To redirect request for all pages with the prefix
        ///             <code>docs/</code>, the key prefix will be <code>/docs</code>, which identifies all
        ///          objects in the <code>docs/</code> folder. Required when the parent element
        ///             <code>Condition</code> is specified and sibling <code>HttpErrorCodeReturnedEquals</code>
        ///          is not specified. If both conditions are specified, both must be true for the redirect to
        ///          be applied.</p>
        ///          <important>
        ///             <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using
        ///          XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
        ///             XML related object key constraints</a>.</p>
        ///          </important>
        public let keyPrefixEquals: Swift.String?

        public init (
            httpErrorCodeReturnedEquals: Swift.String? = nil,
            keyPrefixEquals: Swift.String? = nil
        )
        {
            self.httpErrorCodeReturnedEquals = httpErrorCodeReturnedEquals
            self.keyPrefixEquals = keyPrefixEquals
        }
    }

}

extension S3ClientTypes.ContinuationEvent: Swift.Codable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes.ContinuationEvent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContinuationEvent()"}
}

extension S3ClientTypes {
    /// <p></p>
    public struct ContinuationEvent: Swift.Equatable {

        public init() {}
    }

}

extension CopyObjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CopyObjectInput(aCL: \(Swift.String(describing: aCL)), bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentType: \(Swift.String(describing: contentType)), copySource: \(Swift.String(describing: copySource)), copySourceIfMatch: \(Swift.String(describing: copySourceIfMatch)), copySourceIfModifiedSince: \(Swift.String(describing: copySourceIfModifiedSince)), copySourceIfNoneMatch: \(Swift.String(describing: copySourceIfNoneMatch)), copySourceIfUnmodifiedSince: \(Swift.String(describing: copySourceIfUnmodifiedSince)), copySourceSSECustomerAlgorithm: \(Swift.String(describing: copySourceSSECustomerAlgorithm)), copySourceSSECustomerKey: \(Swift.String(describing: copySourceSSECustomerKey)), copySourceSSECustomerKeyMD5: \(Swift.String(describing: copySourceSSECustomerKeyMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expectedSourceBucketOwner: \(Swift.String(describing: expectedSourceBucketOwner)), expires: \(Swift.String(describing: expires)), grantFullControl: \(Swift.String(describing: grantFullControl)), grantRead: \(Swift.String(describing: grantRead)), grantReadACP: \(Swift.String(describing: grantReadACP)), grantWriteACP: \(Swift.String(describing: grantWriteACP)), key: \(Swift.String(describing: key)), metadata: \(Swift.String(describing: metadata)), metadataDirective: \(Swift.String(describing: metadataDirective)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), requestPayer: \(Swift.String(describing: requestPayer)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKey: \(Swift.String(describing: sSECustomerKey)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), sSEKMSEncryptionContext: \(Swift.String(describing: sSEKMSEncryptionContext)), sSEKMSKeyId: \(Swift.String(describing: sSEKMSKeyId)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), storageClass: \(Swift.String(describing: storageClass)), tagging: \(Swift.String(describing: tagging)), taggingDirective: \(Swift.String(describing: taggingDirective)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)))"}
}

extension CopyObjectInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct CopyObjectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CopyObjectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CopyObjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CopyObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let aCL = input.operationInput.aCL {
            input.builder.withHeader(name: "x-amz-acl", value: Swift.String(aCL.rawValue))
        }
        if input.operationInput.bucketKeyEnabled != false {
            input.builder.withHeader(name: "x-amz-server-side-encryption-bucket-key-enabled", value: Swift.String(input.operationInput.bucketKeyEnabled))
        }
        if let cacheControl = input.operationInput.cacheControl {
            input.builder.withHeader(name: "Cache-Control", value: Swift.String(cacheControl))
        }
        if let contentDisposition = input.operationInput.contentDisposition {
            input.builder.withHeader(name: "Content-Disposition", value: Swift.String(contentDisposition))
        }
        if let contentEncoding = input.operationInput.contentEncoding {
            input.builder.withHeader(name: "Content-Encoding", value: Swift.String(contentEncoding))
        }
        if let contentLanguage = input.operationInput.contentLanguage {
            input.builder.withHeader(name: "Content-Language", value: Swift.String(contentLanguage))
        }
        if let contentType = input.operationInput.contentType {
            input.builder.withHeader(name: "Content-Type", value: Swift.String(contentType))
        }
        if let copySource = input.operationInput.copySource {
            input.builder.withHeader(name: "x-amz-copy-source", value: Swift.String(copySource))
        }
        if let copySourceIfMatch = input.operationInput.copySourceIfMatch {
            input.builder.withHeader(name: "x-amz-copy-source-if-match", value: Swift.String(copySourceIfMatch))
        }
        if let copySourceIfModifiedSince = input.operationInput.copySourceIfModifiedSince {
            input.builder.withHeader(name: "x-amz-copy-source-if-modified-since", value: Swift.String(copySourceIfModifiedSince.rfc5322()))
        }
        if let copySourceIfNoneMatch = input.operationInput.copySourceIfNoneMatch {
            input.builder.withHeader(name: "x-amz-copy-source-if-none-match", value: Swift.String(copySourceIfNoneMatch))
        }
        if let copySourceIfUnmodifiedSince = input.operationInput.copySourceIfUnmodifiedSince {
            input.builder.withHeader(name: "x-amz-copy-source-if-unmodified-since", value: Swift.String(copySourceIfUnmodifiedSince.rfc5322()))
        }
        if let copySourceSSECustomerAlgorithm = input.operationInput.copySourceSSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-copy-source-server-side-encryption-customer-algorithm", value: Swift.String(copySourceSSECustomerAlgorithm))
        }
        if let copySourceSSECustomerKey = input.operationInput.copySourceSSECustomerKey {
            input.builder.withHeader(name: "x-amz-copy-source-server-side-encryption-customer-key", value: Swift.String(copySourceSSECustomerKey))
        }
        if let copySourceSSECustomerKeyMD5 = input.operationInput.copySourceSSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-copy-source-server-side-encryption-customer-key-MD5", value: Swift.String(copySourceSSECustomerKeyMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let expectedSourceBucketOwner = input.operationInput.expectedSourceBucketOwner {
            input.builder.withHeader(name: "x-amz-source-expected-bucket-owner", value: Swift.String(expectedSourceBucketOwner))
        }
        if let expires = input.operationInput.expires {
            input.builder.withHeader(name: "Expires", value: Swift.String(expires.rfc5322()))
        }
        if let grantFullControl = input.operationInput.grantFullControl {
            input.builder.withHeader(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl))
        }
        if let grantRead = input.operationInput.grantRead {
            input.builder.withHeader(name: "x-amz-grant-read", value: Swift.String(grantRead))
        }
        if let grantReadACP = input.operationInput.grantReadACP {
            input.builder.withHeader(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP))
        }
        if let grantWriteACP = input.operationInput.grantWriteACP {
            input.builder.withHeader(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP))
        }
        if let metadataDirective = input.operationInput.metadataDirective {
            input.builder.withHeader(name: "x-amz-metadata-directive", value: Swift.String(metadataDirective.rawValue))
        }
        if let objectLockLegalHoldStatus = input.operationInput.objectLockLegalHoldStatus {
            input.builder.withHeader(name: "x-amz-object-lock-legal-hold", value: Swift.String(objectLockLegalHoldStatus.rawValue))
        }
        if let objectLockMode = input.operationInput.objectLockMode {
            input.builder.withHeader(name: "x-amz-object-lock-mode", value: Swift.String(objectLockMode.rawValue))
        }
        if let objectLockRetainUntilDate = input.operationInput.objectLockRetainUntilDate {
            input.builder.withHeader(name: "x-amz-object-lock-retain-until-date", value: Swift.String(objectLockRetainUntilDate.iso8601WithoutFractionalSeconds()))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        if let sSECustomerAlgorithm = input.operationInput.sSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sSECustomerAlgorithm))
        }
        if let sSECustomerKey = input.operationInput.sSECustomerKey {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sSECustomerKey))
        }
        if let sSECustomerKeyMD5 = input.operationInput.sSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sSECustomerKeyMD5))
        }
        if let sSEKMSEncryptionContext = input.operationInput.sSEKMSEncryptionContext {
            input.builder.withHeader(name: "x-amz-server-side-encryption-context", value: Swift.String(sSEKMSEncryptionContext))
        }
        if let sSEKMSKeyId = input.operationInput.sSEKMSKeyId {
            input.builder.withHeader(name: "x-amz-server-side-encryption-aws-kms-key-id", value: Swift.String(sSEKMSKeyId))
        }
        if let serverSideEncryption = input.operationInput.serverSideEncryption {
            input.builder.withHeader(name: "x-amz-server-side-encryption", value: Swift.String(serverSideEncryption.rawValue))
        }
        if let storageClass = input.operationInput.storageClass {
            input.builder.withHeader(name: "x-amz-storage-class", value: Swift.String(storageClass.rawValue))
        }
        if let tagging = input.operationInput.tagging {
            input.builder.withHeader(name: "x-amz-tagging", value: Swift.String(tagging))
        }
        if let taggingDirective = input.operationInput.taggingDirective {
            input.builder.withHeader(name: "x-amz-tagging-directive", value: Swift.String(taggingDirective.rawValue))
        }
        if let websiteRedirectLocation = input.operationInput.websiteRedirectLocation {
            input.builder.withHeader(name: "x-amz-website-redirect-location", value: Swift.String(websiteRedirectLocation))
        }
        if let metadata = input.operationInput.metadata {
            for (prefixHeaderMapKey, prefixHeaderMapValue) in metadata {
                input.builder.withHeader(name: "x-amz-meta-\(prefixHeaderMapKey)", value: Swift.String(prefixHeaderMapValue))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CopyObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CopyObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CopyObjectOutputError>
}

public struct CopyObjectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CopyObjectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CopyObjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CopyObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "CopyObject"))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CopyObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CopyObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CopyObjectOutputError>
}

public struct CopyObjectInput: Swift.Equatable {
    /// <p>The canned ACL to apply to the object.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let aCL: S3ClientTypes.ObjectCannedACL?
    /// <p>The name of the destination bucket.</p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using AWS KMS (SSE-KMS). Setting this header to <code>true</code> causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS. </p>
    ///          <p>Specifying this header with a COPY action doesn’t affect bucket-level settings for S3 Bucket Key.</p>
    public let bucketKeyEnabled: Swift.Bool
    /// <p>Specifies caching behavior along the request/reply chain.</p>
    public let cacheControl: Swift.String?
    /// <p>Specifies presentational information for the object.</p>
    public let contentDisposition: Swift.String?
    /// <p>Specifies what content encodings have been applied to the object and thus what decoding
    ///          mechanisms must be applied to obtain the media-type referenced by the Content-Type header
    ///          field.</p>
    public let contentEncoding: Swift.String?
    /// <p>The language the content is in.</p>
    public let contentLanguage: Swift.String?
    /// <p>A standard MIME type describing the format of the object data.</p>
    public let contentType: Swift.String?
    /// <p>Specifies the source object for the copy operation. You specify the value in one of two
    ///          formats, depending on whether you want to access the source object through an <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html">access point</a>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>For objects not accessed through an access point, specify the name of the source
    ///                bucket and the key of the source object, separated by a slash (/). For example, to
    ///                copy the object <code>reports/january.pdf</code> from the bucket
    ///                   <code>awsexamplebucket</code>, use
    ///                   <code>awsexamplebucket/reports/january.pdf</code>. The value must be URL
    ///                encoded.</p>
    ///             </li>
    ///             <li>
    ///                <p>For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format <code>arn:aws:s3:<Region>:<account-id>:accesspoint/<access-point-name>/object/<key></code>. For example, to copy the object <code>reports/january.pdf</code> through access point <code>my-access-point</code> owned by account <code>123456789012</code> in Region <code>us-west-2</code>, use the URL encoding of <code>arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf</code>. The value must be URL encoded.</p>
    ///                <note>
    ///                   <p>Amazon S3 supports copy operations using access points only when the source and destination buckets are in the same AWS Region.</p>
    ///                </note>
    ///                <p>Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format <code>arn:aws:s3-outposts:<Region>:<account-id>:outpost/<outpost-id>/object/<key></code>. For example, to copy the object <code>reports/january.pdf</code> through outpost <code>my-outpost</code> owned by account <code>123456789012</code> in Region <code>us-west-2</code>, use the URL encoding of <code>arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf</code>. The value must be URL encoded.  </p>
    ///             </li>
    ///          </ul>
    ///          <p>To copy a specific version of an object, append <code>?versionId=<version-id></code>
    ///          to the value (for example,
    ///             <code>awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893</code>).
    ///          If you don't specify a version ID, Amazon S3 copies the latest version of the source
    ///          object.</p>
    public let copySource: Swift.String?
    /// <p>Copies the object if its entity tag (ETag) matches the specified tag.</p>
    public let copySourceIfMatch: Swift.String?
    /// <p>Copies the object if it has been modified since the specified time.</p>
    public let copySourceIfModifiedSince: ClientRuntime.Date?
    /// <p>Copies the object if its entity tag (ETag) is different than the specified ETag.</p>
    public let copySourceIfNoneMatch: Swift.String?
    /// <p>Copies the object if it hasn't been modified since the specified time.</p>
    public let copySourceIfUnmodifiedSince: ClientRuntime.Date?
    /// <p>Specifies the algorithm to use when decrypting the source object (for example,
    ///          AES256).</p>
    public let copySourceSSECustomerAlgorithm: Swift.String?
    /// <p>Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source
    ///          object. The encryption key provided in this header must be one that was used when the
    ///          source object was created.</p>
    public let copySourceSSECustomerKey: Swift.String?
    /// <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
    ///          this header for a message integrity check to ensure that the encryption key was transmitted
    ///          without error.</p>
    public let copySourceSSECustomerKeyMD5: Swift.String?
    /// <p>The account ID of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The account ID of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedSourceBucketOwner: Swift.String?
    /// <p>The date and time at which the object is no longer cacheable.</p>
    public let expires: ClientRuntime.Date?
    /// <p>Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the
    ///       object.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantFullControl: Swift.String?
    /// <p>Allows grantee to read the object data and its
    ///       metadata.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantRead: Swift.String?
    /// <p>Allows grantee to read the object ACL.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantReadACP: Swift.String?
    /// <p>Allows grantee to write the ACL for the applicable
    ///       object.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantWriteACP: Swift.String?
    /// <p>The key of the destination object.</p>
    public let key: Swift.String?
    /// <p>A map of metadata to store with the object in S3.</p>
    public let metadata: [Swift.String:Swift.String]?
    /// <p>Specifies whether the metadata is copied from the source object or replaced with
    ///          metadata provided in the request.</p>
    public let metadataDirective: S3ClientTypes.MetadataDirective?
    /// <p>Specifies whether you want to apply a Legal Hold to the copied object.</p>
    public let objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// <p>The Object Lock mode that you want to apply to the copied object.</p>
    public let objectLockMode: S3ClientTypes.ObjectLockMode?
    /// <p>The date and time when you want the copied object's Object Lock to expire.</p>
    public let objectLockRetainUntilDate: ClientRuntime.Date?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>Specifies the algorithm to use to when encrypting the object (for example,
    ///          AES256).</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
    ///          value is used to store the object and then it is discarded; Amazon S3 does not store the
    ///          encryption key. The key must be appropriate for use with the algorithm specified in the
    ///             <code>x-amz-server-side-encryption-customer-algorithm</code> header.</p>
    public let sSECustomerKey: Swift.String?
    /// <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
    ///          this header for a message integrity check to ensure that the encryption key was transmitted
    ///          without error.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>Specifies the AWS KMS Encryption Context to use for object encryption. The value of this
    ///          header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value
    ///          pairs.</p>
    public let sSEKMSEncryptionContext: Swift.String?
    /// <p>Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for
    ///          an object protected by AWS KMS will fail if not made via SSL or using SigV4. For
    ///          information about configuring using any of the officially supported AWS SDKs and AWS CLI,
    ///          see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version">Specifying the
    ///             Signature Version in Request Authentication</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let sSEKMSKeyId: Swift.String?
    /// <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
    ///          AES256, aws:kms).</p>
    public let serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// <p>By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The
    ///          STANDARD storage class provides high durability and high availability. Depending on
    ///          performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses
    ///          the OUTPOSTS Storage Class. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage Classes</a> in the
    ///          <i>Amazon S3 User Guide</i>.</p>
    public let storageClass: S3ClientTypes.StorageClass?
    /// <p>The tag-set for the object destination object this value must be used in conjunction
    ///          with the <code>TaggingDirective</code>. The tag-set must be encoded as URL Query
    ///          parameters.</p>
    public let tagging: Swift.String?
    /// <p>Specifies whether the object tag-set are copied from the source object or replaced with
    ///          tag-set provided in the request.</p>
    public let taggingDirective: S3ClientTypes.TaggingDirective?
    /// <p>If the bucket is configured as a website, redirects requests for this object to another
    ///          object in the same bucket or to an external URL. Amazon S3 stores the value of this header in
    ///          the object metadata.</p>
    public let websiteRedirectLocation: Swift.String?

    public init (
        aCL: S3ClientTypes.ObjectCannedACL? = nil,
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool = false,
        cacheControl: Swift.String? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentType: Swift.String? = nil,
        copySource: Swift.String? = nil,
        copySourceIfMatch: Swift.String? = nil,
        copySourceIfModifiedSince: ClientRuntime.Date? = nil,
        copySourceIfNoneMatch: Swift.String? = nil,
        copySourceIfUnmodifiedSince: ClientRuntime.Date? = nil,
        copySourceSSECustomerAlgorithm: Swift.String? = nil,
        copySourceSSECustomerKey: Swift.String? = nil,
        copySourceSSECustomerKeyMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expectedSourceBucketOwner: Swift.String? = nil,
        expires: ClientRuntime.Date? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        key: Swift.String? = nil,
        metadata: [Swift.String:Swift.String]? = nil,
        metadataDirective: S3ClientTypes.MetadataDirective? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: ClientRuntime.Date? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKey: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        sSEKMSEncryptionContext: Swift.String? = nil,
        sSEKMSKeyId: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagging: Swift.String? = nil,
        taggingDirective: S3ClientTypes.TaggingDirective? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.aCL = aCL
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentType = contentType
        self.copySource = copySource
        self.copySourceIfMatch = copySourceIfMatch
        self.copySourceIfModifiedSince = copySourceIfModifiedSince
        self.copySourceIfNoneMatch = copySourceIfNoneMatch
        self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
        self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
        self.copySourceSSECustomerKey = copySourceSSECustomerKey
        self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.expectedSourceBucketOwner = expectedSourceBucketOwner
        self.expires = expires
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWriteACP = grantWriteACP
        self.key = key
        self.metadata = metadata
        self.metadataDirective = metadataDirective
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.requestPayer = requestPayer
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKey = sSECustomerKey
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.sSEKMSEncryptionContext = sSEKMSEncryptionContext
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
        self.storageClass = storageClass
        self.tagging = tagging
        self.taggingDirective = taggingDirective
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

struct CopyObjectInputBody: Swift.Equatable {
}

extension CopyObjectInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CopyObjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CopyObjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ObjectNotInActiveTierError" : self = .objectNotInActiveTierError(try ObjectNotInActiveTierError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CopyObjectOutputError: Swift.Error, Swift.Equatable {
    case objectNotInActiveTierError(ObjectNotInActiveTierError)
    case unknown(UnknownAWSHttpServiceError)
}

extension CopyObjectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CopyObjectOutputResponse(bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), copyObjectResult: \(Swift.String(describing: copyObjectResult)), copySourceVersionId: \(Swift.String(describing: copySourceVersionId)), expiration: \(Swift.String(describing: expiration)), requestCharged: \(Swift.String(describing: requestCharged)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), sSEKMSEncryptionContext: \(Swift.String(describing: sSEKMSEncryptionContext)), sSEKMSKeyId: \(Swift.String(describing: sSEKMSKeyId)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), versionId: \(Swift.String(describing: versionId)))"}
}

extension CopyObjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = false
        }
        if let copySourceVersionIdHeaderValue = httpResponse.headers.value(for: "x-amz-copy-source-version-id") {
            self.copySourceVersionId = copySourceVersionIdHeaderValue
        } else {
            self.copySourceVersionId = nil
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            self.expiration = expirationHeaderValue
        } else {
            self.expiration = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let sSECustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            self.sSECustomerAlgorithm = sSECustomerAlgorithmHeaderValue
        } else {
            self.sSECustomerAlgorithm = nil
        }
        if let sSECustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5HeaderValue
        } else {
            self.sSECustomerKeyMD5 = nil
        }
        if let sSEKMSEncryptionContextHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-context") {
            self.sSEKMSEncryptionContext = sSEKMSEncryptionContextHeaderValue
        } else {
            self.sSEKMSEncryptionContext = nil
        }
        if let sSEKMSKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.sSEKMSKeyId = sSEKMSKeyIdHeaderValue
        } else {
            self.sSEKMSKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.CopyObjectResult = try responseDecoder.decode(responseBody: data)
                self.copyObjectResult = output
            } else {
                self.copyObjectResult = nil
            }
        } else {
            self.copyObjectResult = nil
        }
    }
}

public struct CopyObjectOutputResponse: Swift.Equatable {
    /// <p>Indicates whether the copied object uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>
    public let bucketKeyEnabled: Swift.Bool
    /// <p>Container for all response elements.</p>
    public let copyObjectResult: S3ClientTypes.CopyObjectResult?
    /// <p>Version of the copied object in the destination bucket.</p>
    public let copySourceVersionId: Swift.String?
    /// <p>If the object expiration is configured, the response includes this header.</p>
    public let expiration: Swift.String?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header confirming the encryption algorithm used.</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header to provide round-trip message integrity verification of
    ///          the customer-provided encryption key.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>If present, specifies the AWS KMS Encryption Context to use for object encryption. The
    ///          value of this header is a base64-encoded UTF-8 string holding JSON with the encryption
    ///          context key-value pairs.</p>
    public let sSEKMSEncryptionContext: Swift.String?
    /// <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric
    ///          customer managed customer master key (CMK) that was used for the object.</p>
    public let sSEKMSKeyId: Swift.String?
    /// <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
    ///          AES256, aws:kms).</p>
    public let serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// <p>Version ID of the newly created copy.</p>
    public let versionId: Swift.String?

    public init (
        bucketKeyEnabled: Swift.Bool = false,
        copyObjectResult: S3ClientTypes.CopyObjectResult? = nil,
        copySourceVersionId: Swift.String? = nil,
        expiration: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        sSEKMSEncryptionContext: Swift.String? = nil,
        sSEKMSKeyId: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucketKeyEnabled = bucketKeyEnabled
        self.copyObjectResult = copyObjectResult
        self.copySourceVersionId = copySourceVersionId
        self.expiration = expiration
        self.requestCharged = requestCharged
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.sSEKMSEncryptionContext = sSEKMSEncryptionContext
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
        self.versionId = versionId
    }
}

struct CopyObjectOutputResponseBody: Swift.Equatable {
    public let copyObjectResult: S3ClientTypes.CopyObjectResult?
}

extension CopyObjectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyObjectResult = "CopyObjectResult"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let copyObjectResultDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CopyObjectResult.self, forKey: .copyObjectResult)
        copyObjectResult = copyObjectResultDecoded
    }
}

extension S3ClientTypes.CopyObjectResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eTag = "ETag"
        case lastModified = "LastModified"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let eTag = eTag {
            try container.encode(eTag, forKey: ClientRuntime.Key("ETag"))
        }
        if let lastModified = lastModified {
            try container.encode(ClientRuntime.TimestampWrapper(lastModified, format: .dateTime), forKey: ClientRuntime.Key("LastModified"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        var lastModifiedBuffer:ClientRuntime.Date? = nil
        if let lastModifiedDecoded = lastModifiedDecoded {
            lastModifiedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastModifiedDecoded, format: .dateTime)
        }
        lastModified = lastModifiedBuffer
    }
}

extension S3ClientTypes.CopyObjectResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CopyObjectResult(eTag: \(Swift.String(describing: eTag)), lastModified: \(Swift.String(describing: lastModified)))"}
}

extension S3ClientTypes.CopyObjectResult: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for all response elements.</p>
    public struct CopyObjectResult: Swift.Equatable {
        /// <p>Returns the ETag of the new object. The ETag reflects only changes to the contents of an
        ///          object, not its metadata. The source and destination ETag is identical for a successfully
        ///          copied non-multipart object.</p>
        public let eTag: Swift.String?
        /// <p>Creation date of the object.</p>
        public let lastModified: ClientRuntime.Date?

        public init (
            eTag: Swift.String? = nil,
            lastModified: ClientRuntime.Date? = nil
        )
        {
            self.eTag = eTag
            self.lastModified = lastModified
        }
    }

}

extension S3ClientTypes.CopyPartResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eTag = "ETag"
        case lastModified = "LastModified"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let eTag = eTag {
            try container.encode(eTag, forKey: ClientRuntime.Key("ETag"))
        }
        if let lastModified = lastModified {
            try container.encode(ClientRuntime.TimestampWrapper(lastModified, format: .dateTime), forKey: ClientRuntime.Key("LastModified"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        var lastModifiedBuffer:ClientRuntime.Date? = nil
        if let lastModifiedDecoded = lastModifiedDecoded {
            lastModifiedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastModifiedDecoded, format: .dateTime)
        }
        lastModified = lastModifiedBuffer
    }
}

extension S3ClientTypes.CopyPartResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CopyPartResult(eTag: \(Swift.String(describing: eTag)), lastModified: \(Swift.String(describing: lastModified)))"}
}

extension S3ClientTypes.CopyPartResult: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for all response elements.</p>
    public struct CopyPartResult: Swift.Equatable {
        /// <p>Entity tag of the object.</p>
        public let eTag: Swift.String?
        /// <p>Date and time at which the object was uploaded.</p>
        public let lastModified: ClientRuntime.Date?

        public init (
            eTag: Swift.String? = nil,
            lastModified: ClientRuntime.Date? = nil
        )
        {
            self.eTag = eTag
            self.lastModified = lastModified
        }
    }

}

extension S3ClientTypes.CreateBucketConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationConstraint = "LocationConstraint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let locationConstraint = locationConstraint {
            try container.encode(locationConstraint, forKey: ClientRuntime.Key("LocationConstraint"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationConstraintDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketLocationConstraint.self, forKey: .locationConstraint)
        locationConstraint = locationConstraintDecoded
    }
}

extension S3ClientTypes.CreateBucketConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBucketConfiguration(locationConstraint: \(Swift.String(describing: locationConstraint)))"}
}

extension S3ClientTypes.CreateBucketConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>The configuration information for the bucket.</p>
    public struct CreateBucketConfiguration: Swift.Equatable {
        /// <p>Specifies the Region where the bucket will be created. If you don't specify a Region,
        ///          the bucket is created in the US East (N. Virginia) Region (us-east-1).</p>
        public let locationConstraint: S3ClientTypes.BucketLocationConstraint?

        public init (
            locationConstraint: S3ClientTypes.BucketLocationConstraint? = nil
        )
        {
            self.locationConstraint = locationConstraint
        }
    }

}

public struct CreateBucketInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBucketInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBucketInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBucketOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let createBucketConfiguration = input.operationInput.createBucketConfiguration {
            do {
                let encoder = context.getEncoder()
                let createBucketConfigurationdata = try encoder.encode(createBucketConfiguration)
                let createBucketConfigurationbody = ClientRuntime.HttpBody.data(createBucketConfigurationdata)
                input.builder.withBody(createBucketConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBucketInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBucketOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBucketOutputError>
}

extension CreateBucketInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBucketInput(aCL: \(Swift.String(describing: aCL)), bucket: \(Swift.String(describing: bucket)), createBucketConfiguration: \(Swift.String(describing: createBucketConfiguration)), grantFullControl: \(Swift.String(describing: grantFullControl)), grantRead: \(Swift.String(describing: grantRead)), grantReadACP: \(Swift.String(describing: grantReadACP)), grantWrite: \(Swift.String(describing: grantWrite)), grantWriteACP: \(Swift.String(describing: grantWriteACP)), objectLockEnabledForBucket: \(Swift.String(describing: objectLockEnabledForBucket)))"}
}

extension CreateBucketInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension CreateBucketInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createBucketConfiguration = "CreateBucketConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let createBucketConfiguration = createBucketConfiguration {
            try container.encode(createBucketConfiguration, forKey: ClientRuntime.Key("CreateBucketConfiguration"))
        }
    }
}

public struct CreateBucketInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBucketInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBucketInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBucketOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let aCL = input.operationInput.aCL {
            input.builder.withHeader(name: "x-amz-acl", value: Swift.String(aCL.rawValue))
        }
        if let grantFullControl = input.operationInput.grantFullControl {
            input.builder.withHeader(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl))
        }
        if let grantRead = input.operationInput.grantRead {
            input.builder.withHeader(name: "x-amz-grant-read", value: Swift.String(grantRead))
        }
        if let grantReadACP = input.operationInput.grantReadACP {
            input.builder.withHeader(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP))
        }
        if let grantWrite = input.operationInput.grantWrite {
            input.builder.withHeader(name: "x-amz-grant-write", value: Swift.String(grantWrite))
        }
        if let grantWriteACP = input.operationInput.grantWriteACP {
            input.builder.withHeader(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP))
        }
        if input.operationInput.objectLockEnabledForBucket != false {
            input.builder.withHeader(name: "x-amz-bucket-object-lock-enabled", value: Swift.String(input.operationInput.objectLockEnabledForBucket))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBucketInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBucketOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBucketOutputError>
}

public struct CreateBucketInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBucketInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBucketInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBucketOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBucketInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBucketOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBucketOutputError>
}

public struct CreateBucketInput: Swift.Equatable {
    /// <p>The canned ACL to apply to the bucket.</p>
    public let aCL: S3ClientTypes.BucketCannedACL?
    /// <p>The name of the bucket to create.</p>
    public let bucket: Swift.String?
    /// <p>The configuration information for the bucket.</p>
    public let createBucketConfiguration: S3ClientTypes.CreateBucketConfiguration?
    /// <p>Allows grantee the read, write, read ACP, and write ACP permissions on the
    ///          bucket.</p>
    public let grantFullControl: Swift.String?
    /// <p>Allows grantee to list the objects in the bucket.</p>
    public let grantRead: Swift.String?
    /// <p>Allows grantee to read the bucket ACL.</p>
    public let grantReadACP: Swift.String?
    /// <p>Allows grantee to create new objects in the bucket.</p>
    ///          <p>For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.</p>
    public let grantWrite: Swift.String?
    /// <p>Allows grantee to write the ACL for the applicable bucket.</p>
    public let grantWriteACP: Swift.String?
    /// <p>Specifies whether you want S3 Object Lock to be enabled for the new bucket.</p>
    public let objectLockEnabledForBucket: Swift.Bool

    public init (
        aCL: S3ClientTypes.BucketCannedACL? = nil,
        bucket: Swift.String? = nil,
        createBucketConfiguration: S3ClientTypes.CreateBucketConfiguration? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWrite: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        objectLockEnabledForBucket: Swift.Bool = false
    )
    {
        self.aCL = aCL
        self.bucket = bucket
        self.createBucketConfiguration = createBucketConfiguration
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWrite = grantWrite
        self.grantWriteACP = grantWriteACP
        self.objectLockEnabledForBucket = objectLockEnabledForBucket
    }
}

struct CreateBucketInputBody: Swift.Equatable {
    public let createBucketConfiguration: S3ClientTypes.CreateBucketConfiguration?
}

extension CreateBucketInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createBucketConfiguration = "CreateBucketConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createBucketConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CreateBucketConfiguration.self, forKey: .createBucketConfiguration)
        createBucketConfiguration = createBucketConfigurationDecoded
    }
}

extension CreateBucketOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateBucketOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BucketAlreadyExists" : self = .bucketAlreadyExists(try BucketAlreadyExists(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BucketAlreadyOwnedByYou" : self = .bucketAlreadyOwnedByYou(try BucketAlreadyOwnedByYou(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateBucketOutputError: Swift.Error, Swift.Equatable {
    case bucketAlreadyExists(BucketAlreadyExists)
    case bucketAlreadyOwnedByYou(BucketAlreadyOwnedByYou)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateBucketOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBucketOutputResponse(location: \(Swift.String(describing: location)))"}
}

extension CreateBucketOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            self.location = locationHeaderValue
        } else {
            self.location = nil
        }
    }
}

public struct CreateBucketOutputResponse: Swift.Equatable {
    /// <p>Specifies the Region where the bucket will be created. If you are creating a bucket on
    ///          the US East (N. Virginia) Region (us-east-1), you do not need to specify the
    ///          location.</p>
    public let location: Swift.String?

    public init (
        location: Swift.String? = nil
    )
    {
        self.location = location
    }
}

struct CreateBucketOutputResponseBody: Swift.Equatable {
}

extension CreateBucketOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CreateMultipartUploadInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMultipartUploadInput(aCL: \(Swift.String(describing: aCL)), bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentType: \(Swift.String(describing: contentType)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expires: \(Swift.String(describing: expires)), grantFullControl: \(Swift.String(describing: grantFullControl)), grantRead: \(Swift.String(describing: grantRead)), grantReadACP: \(Swift.String(describing: grantReadACP)), grantWriteACP: \(Swift.String(describing: grantWriteACP)), key: \(Swift.String(describing: key)), metadata: \(Swift.String(describing: metadata)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), requestPayer: \(Swift.String(describing: requestPayer)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKey: \(Swift.String(describing: sSECustomerKey)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), sSEKMSEncryptionContext: \(Swift.String(describing: sSEKMSEncryptionContext)), sSEKMSKeyId: \(Swift.String(describing: sSEKMSKeyId)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), storageClass: \(Swift.String(describing: storageClass)), tagging: \(Swift.String(describing: tagging)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)))"}
}

extension CreateMultipartUploadInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct CreateMultipartUploadInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMultipartUploadInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMultipartUploadInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMultipartUploadOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let aCL = input.operationInput.aCL {
            input.builder.withHeader(name: "x-amz-acl", value: Swift.String(aCL.rawValue))
        }
        if input.operationInput.bucketKeyEnabled != false {
            input.builder.withHeader(name: "x-amz-server-side-encryption-bucket-key-enabled", value: Swift.String(input.operationInput.bucketKeyEnabled))
        }
        if let cacheControl = input.operationInput.cacheControl {
            input.builder.withHeader(name: "Cache-Control", value: Swift.String(cacheControl))
        }
        if let contentDisposition = input.operationInput.contentDisposition {
            input.builder.withHeader(name: "Content-Disposition", value: Swift.String(contentDisposition))
        }
        if let contentEncoding = input.operationInput.contentEncoding {
            input.builder.withHeader(name: "Content-Encoding", value: Swift.String(contentEncoding))
        }
        if let contentLanguage = input.operationInput.contentLanguage {
            input.builder.withHeader(name: "Content-Language", value: Swift.String(contentLanguage))
        }
        if let contentType = input.operationInput.contentType {
            input.builder.withHeader(name: "Content-Type", value: Swift.String(contentType))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let expires = input.operationInput.expires {
            input.builder.withHeader(name: "Expires", value: Swift.String(expires.rfc5322()))
        }
        if let grantFullControl = input.operationInput.grantFullControl {
            input.builder.withHeader(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl))
        }
        if let grantRead = input.operationInput.grantRead {
            input.builder.withHeader(name: "x-amz-grant-read", value: Swift.String(grantRead))
        }
        if let grantReadACP = input.operationInput.grantReadACP {
            input.builder.withHeader(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP))
        }
        if let grantWriteACP = input.operationInput.grantWriteACP {
            input.builder.withHeader(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP))
        }
        if let objectLockLegalHoldStatus = input.operationInput.objectLockLegalHoldStatus {
            input.builder.withHeader(name: "x-amz-object-lock-legal-hold", value: Swift.String(objectLockLegalHoldStatus.rawValue))
        }
        if let objectLockMode = input.operationInput.objectLockMode {
            input.builder.withHeader(name: "x-amz-object-lock-mode", value: Swift.String(objectLockMode.rawValue))
        }
        if let objectLockRetainUntilDate = input.operationInput.objectLockRetainUntilDate {
            input.builder.withHeader(name: "x-amz-object-lock-retain-until-date", value: Swift.String(objectLockRetainUntilDate.iso8601WithoutFractionalSeconds()))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        if let sSECustomerAlgorithm = input.operationInput.sSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sSECustomerAlgorithm))
        }
        if let sSECustomerKey = input.operationInput.sSECustomerKey {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sSECustomerKey))
        }
        if let sSECustomerKeyMD5 = input.operationInput.sSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sSECustomerKeyMD5))
        }
        if let sSEKMSEncryptionContext = input.operationInput.sSEKMSEncryptionContext {
            input.builder.withHeader(name: "x-amz-server-side-encryption-context", value: Swift.String(sSEKMSEncryptionContext))
        }
        if let sSEKMSKeyId = input.operationInput.sSEKMSKeyId {
            input.builder.withHeader(name: "x-amz-server-side-encryption-aws-kms-key-id", value: Swift.String(sSEKMSKeyId))
        }
        if let serverSideEncryption = input.operationInput.serverSideEncryption {
            input.builder.withHeader(name: "x-amz-server-side-encryption", value: Swift.String(serverSideEncryption.rawValue))
        }
        if let storageClass = input.operationInput.storageClass {
            input.builder.withHeader(name: "x-amz-storage-class", value: Swift.String(storageClass.rawValue))
        }
        if let tagging = input.operationInput.tagging {
            input.builder.withHeader(name: "x-amz-tagging", value: Swift.String(tagging))
        }
        if let websiteRedirectLocation = input.operationInput.websiteRedirectLocation {
            input.builder.withHeader(name: "x-amz-website-redirect-location", value: Swift.String(websiteRedirectLocation))
        }
        if let metadata = input.operationInput.metadata {
            for (prefixHeaderMapKey, prefixHeaderMapValue) in metadata {
                input.builder.withHeader(name: "x-amz-meta-\(prefixHeaderMapKey)", value: Swift.String(prefixHeaderMapValue))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMultipartUploadInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMultipartUploadOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMultipartUploadOutputError>
}

public struct CreateMultipartUploadInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMultipartUploadInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMultipartUploadInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMultipartUploadOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "uploads", value: nil))
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "CreateMultipartUpload"))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMultipartUploadInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMultipartUploadOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMultipartUploadOutputError>
}

public struct CreateMultipartUploadInput: Swift.Equatable {
    /// <p>The canned ACL to apply to the object.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let aCL: S3ClientTypes.ObjectCannedACL?
    /// <p>The name of the bucket to which to initiate the upload</p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using AWS KMS (SSE-KMS). Setting this header to <code>true</code> causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS.</p>
    ///          <p>Specifying this header with an object action doesn’t affect bucket-level settings for S3 Bucket Key.</p>
    public let bucketKeyEnabled: Swift.Bool
    /// <p>Specifies caching behavior along the request/reply chain.</p>
    public let cacheControl: Swift.String?
    /// <p>Specifies presentational information for the object.</p>
    public let contentDisposition: Swift.String?
    /// <p>Specifies what content encodings have been applied to the object and thus what decoding
    ///          mechanisms must be applied to obtain the media-type referenced by the Content-Type header
    ///          field.</p>
    public let contentEncoding: Swift.String?
    /// <p>The language the content is in.</p>
    public let contentLanguage: Swift.String?
    /// <p>A standard MIME type describing the format of the object data.</p>
    public let contentType: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The date and time at which the object is no longer cacheable.</p>
    public let expires: ClientRuntime.Date?
    /// <p>Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the
    ///       object.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantFullControl: Swift.String?
    /// <p>Allows grantee to read the object data and its
    ///       metadata.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantRead: Swift.String?
    /// <p>Allows grantee to read the object ACL.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantReadACP: Swift.String?
    /// <p>Allows grantee to write the ACL for the applicable
    ///       object.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantWriteACP: Swift.String?
    /// <p>Object key for which the multipart upload is to be initiated.</p>
    public let key: Swift.String?
    /// <p>A map of metadata to store with the object in S3.</p>
    public let metadata: [Swift.String:Swift.String]?
    /// <p>Specifies whether you want to apply a Legal Hold to the uploaded object.</p>
    public let objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// <p>Specifies the Object Lock mode that you want to apply to the uploaded object.</p>
    public let objectLockMode: S3ClientTypes.ObjectLockMode?
    /// <p>Specifies the date and time when you want the Object Lock to expire.</p>
    public let objectLockRetainUntilDate: ClientRuntime.Date?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>Specifies the algorithm to use to when encrypting the object (for example,
    ///          AES256).</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
    ///          value is used to store the object and then it is discarded; Amazon S3 does not store the
    ///          encryption key. The key must be appropriate for use with the algorithm specified in the
    ///             <code>x-amz-server-side-encryption-customer-algorithm</code> header.</p>
    public let sSECustomerKey: Swift.String?
    /// <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
    ///          this header for a message integrity check to ensure that the encryption key was transmitted
    ///          without error.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>Specifies the AWS KMS Encryption Context to use for object encryption. The value of this
    ///          header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value
    ///          pairs.</p>
    public let sSEKMSEncryptionContext: Swift.String?
    /// <p>Specifies the ID of the symmetric customer managed AWS KMS CMK to use for object
    ///          encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not
    ///          made via SSL or using SigV4. For information about configuring using any of the officially
    ///          supported AWS SDKs and AWS CLI, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version">Specifying the Signature Version in Request Authentication</a>
    ///          in the <i>Amazon S3 User Guide</i>.</p>
    public let sSEKMSKeyId: Swift.String?
    /// <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
    ///          AES256, aws:kms).</p>
    public let serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// <p>By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The
    ///          STANDARD storage class provides high durability and high availability. Depending on
    ///          performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses
    ///          the OUTPOSTS Storage Class. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage Classes</a> in the
    ///          <i>Amazon S3 User Guide</i>.</p>
    public let storageClass: S3ClientTypes.StorageClass?
    /// <p>The tag-set for the object. The tag-set must be encoded as URL Query parameters.</p>
    public let tagging: Swift.String?
    /// <p>If the bucket is configured as a website, redirects requests for this object to another
    ///          object in the same bucket or to an external URL. Amazon S3 stores the value of this header in
    ///          the object metadata.</p>
    public let websiteRedirectLocation: Swift.String?

    public init (
        aCL: S3ClientTypes.ObjectCannedACL? = nil,
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool = false,
        cacheControl: Swift.String? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentType: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expires: ClientRuntime.Date? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        key: Swift.String? = nil,
        metadata: [Swift.String:Swift.String]? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: ClientRuntime.Date? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKey: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        sSEKMSEncryptionContext: Swift.String? = nil,
        sSEKMSKeyId: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagging: Swift.String? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.aCL = aCL
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentType = contentType
        self.expectedBucketOwner = expectedBucketOwner
        self.expires = expires
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWriteACP = grantWriteACP
        self.key = key
        self.metadata = metadata
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.requestPayer = requestPayer
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKey = sSECustomerKey
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.sSEKMSEncryptionContext = sSEKMSEncryptionContext
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
        self.storageClass = storageClass
        self.tagging = tagging
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

struct CreateMultipartUploadInputBody: Swift.Equatable {
}

extension CreateMultipartUploadInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CreateMultipartUploadOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateMultipartUploadOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMultipartUploadOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMultipartUploadOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMultipartUploadOutputResponse(abortDate: \(Swift.String(describing: abortDate)), abortRuleId: \(Swift.String(describing: abortRuleId)), bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), key: \(Swift.String(describing: key)), requestCharged: \(Swift.String(describing: requestCharged)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), sSEKMSEncryptionContext: \(Swift.String(describing: sSEKMSEncryptionContext)), sSEKMSKeyId: \(Swift.String(describing: sSEKMSKeyId)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), uploadId: \(Swift.String(describing: uploadId)))"}
}

extension CreateMultipartUploadOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let abortDateHeaderValue = httpResponse.headers.value(for: "x-amz-abort-date") {
            self.abortDate = DateFormatter.rfc5322DateFormatter.date(from: abortDateHeaderValue)
        } else {
            self.abortDate = nil
        }
        if let abortRuleIdHeaderValue = httpResponse.headers.value(for: "x-amz-abort-rule-id") {
            self.abortRuleId = abortRuleIdHeaderValue
        } else {
            self.abortRuleId = nil
        }
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = false
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let sSECustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            self.sSECustomerAlgorithm = sSECustomerAlgorithmHeaderValue
        } else {
            self.sSECustomerAlgorithm = nil
        }
        if let sSECustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5HeaderValue
        } else {
            self.sSECustomerKeyMD5 = nil
        }
        if let sSEKMSEncryptionContextHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-context") {
            self.sSEKMSEncryptionContext = sSEKMSEncryptionContextHeaderValue
        } else {
            self.sSEKMSEncryptionContext = nil
        }
        if let sSEKMSKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.sSEKMSKeyId = sSEKMSKeyIdHeaderValue
        } else {
            self.sSEKMSKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateMultipartUploadOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bucket = output.bucket
            self.key = output.key
            self.uploadId = output.uploadId
        } else {
            self.bucket = nil
            self.key = nil
            self.uploadId = nil
        }
    }
}

public struct CreateMultipartUploadOutputResponse: Swift.Equatable {
    /// <p>If the bucket has a lifecycle rule configured with an action to abort incomplete
    ///          multipart uploads and the prefix in the lifecycle rule matches the object name in the
    ///          request, the response includes this header. The header indicates when the initiated
    ///          multipart upload becomes eligible for an abort operation. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">
    ///             Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a>.</p>
    ///
    ///          <p>The response also includes the <code>x-amz-abort-rule-id</code> header that provides the
    ///          ID of the lifecycle configuration rule that defines this action.</p>
    public let abortDate: ClientRuntime.Date?
    /// <p>This header is returned along with the <code>x-amz-abort-date</code> header. It
    ///          identifies the applicable lifecycle configuration rule that defines the action to abort
    ///          incomplete multipart uploads.</p>
    public let abortRuleId: Swift.String?
    /// <p>The name of the bucket to which the multipart upload was initiated. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>
    public let bucketKeyEnabled: Swift.Bool
    /// <p>Object key for which the multipart upload was initiated.</p>
    public let key: Swift.String?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header confirming the encryption algorithm used.</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header to provide round-trip message integrity verification of
    ///          the customer-provided encryption key.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>If present, specifies the AWS KMS Encryption Context to use for object encryption. The
    ///          value of this header is a base64-encoded UTF-8 string holding JSON with the encryption
    ///          context key-value pairs.</p>
    public let sSEKMSEncryptionContext: Swift.String?
    /// <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric
    ///          customer managed customer master key (CMK) that was used for the object.</p>
    public let sSEKMSKeyId: Swift.String?
    /// <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
    ///          AES256, aws:kms).</p>
    public let serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// <p>ID for the initiated multipart upload.</p>
    public let uploadId: Swift.String?

    public init (
        abortDate: ClientRuntime.Date? = nil,
        abortRuleId: Swift.String? = nil,
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool = false,
        key: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        sSEKMSEncryptionContext: Swift.String? = nil,
        sSEKMSKeyId: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.abortDate = abortDate
        self.abortRuleId = abortRuleId
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.key = key
        self.requestCharged = requestCharged
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.sSEKMSEncryptionContext = sSEKMSEncryptionContext
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
        self.uploadId = uploadId
    }
}

struct CreateMultipartUploadOutputResponseBody: Swift.Equatable {
    public let bucket: Swift.String?
    public let key: Swift.String?
    public let uploadId: Swift.String?
}

extension CreateMultipartUploadOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case key = "Key"
        case uploadId = "UploadId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let uploadIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadId)
        uploadId = uploadIdDecoded
    }
}

extension S3ClientTypes.DefaultRetention: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case days = "Days"
        case mode = "Mode"
        case years = "Years"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if days != 0 {
            try container.encode(days, forKey: ClientRuntime.Key("Days"))
        }
        if let mode = mode {
            try container.encode(mode, forKey: ClientRuntime.Key("Mode"))
        }
        if years != 0 {
            try container.encode(years, forKey: ClientRuntime.Key("Years"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockRetentionMode.self, forKey: .mode)
        mode = modeDecoded
        let daysDecoded = try containerValues.decode(Swift.Int.self, forKey: .days)
        days = daysDecoded
        let yearsDecoded = try containerValues.decode(Swift.Int.self, forKey: .years)
        years = yearsDecoded
    }
}

extension S3ClientTypes.DefaultRetention: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DefaultRetention(days: \(Swift.String(describing: days)), mode: \(Swift.String(describing: mode)), years: \(Swift.String(describing: years)))"}
}

extension S3ClientTypes.DefaultRetention: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>The container element for specifying the default Object Lock retention settings for new
    ///          objects placed in the specified bucket.</p>
    ///          <note>
    ///             <ul>
    ///                <li>
    ///                   <p>The <code>DefaultRetention</code> settings require both a mode and a
    ///                period.</p>
    ///                </li>
    ///                <li>
    ///                   <p>The <code>DefaultRetention</code> period can be either <code>Days</code>
    ///                or <code>Years</code> but you must select one. You cannot specify <code>Days</code>
    ///                and <code>Years</code> at the same time.</p>
    ///                </li>
    ///             </ul>
    ///          </note>
    public struct DefaultRetention: Swift.Equatable {
        /// <p>The number of days that you want to specify for the default retention period. Must be
        ///          used with <code>Mode</code>.</p>
        public let days: Swift.Int
        /// <p>The default Object Lock retention mode you want to apply to new objects placed in the
        ///          specified bucket. Must be used with either <code>Days</code> or <code>Years</code>.</p>
        public let mode: S3ClientTypes.ObjectLockRetentionMode?
        /// <p>The number of years that you want to specify for the default retention period. Must be
        ///          used with <code>Mode</code>.</p>
        public let years: Swift.Int

        public init (
            days: Swift.Int = 0,
            mode: S3ClientTypes.ObjectLockRetentionMode? = nil,
            years: Swift.Int = 0
        )
        {
            self.days = days
            self.mode = mode
            self.years = years
        }
    }

}

extension S3ClientTypes.Delete: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objects = "Object"
        case quiet = "Quiet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let objects = objects {
            if objects.isEmpty {
                var objectsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Object"))
                try objectsContainer.encodeNil()
            } else {
                for objectidentifier0 in objects {
                    var objectsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Object"))
                    try objectsContainer0.encode(objectidentifier0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if quiet != false {
            try container.encode(quiet, forKey: ClientRuntime.Key("Quiet"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.objects) {
            let objectsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .objects)
            if objectsWrappedContainer != nil {
                let objectsContainer = try containerValues.decodeIfPresent([S3ClientTypes.ObjectIdentifier].self, forKey: .objects)
                var objectsBuffer:[S3ClientTypes.ObjectIdentifier]? = nil
                if let objectsContainer = objectsContainer {
                    objectsBuffer = [S3ClientTypes.ObjectIdentifier]()
                    for structureContainer0 in objectsContainer {
                        objectsBuffer?.append(structureContainer0)
                    }
                }
                objects = objectsBuffer
            } else {
                objects = []
            }
        } else {
            objects = nil
        }
        let quietDecoded = try containerValues.decode(Swift.Bool.self, forKey: .quiet)
        quiet = quietDecoded
    }
}

extension S3ClientTypes.Delete: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Delete(objects: \(Swift.String(describing: objects)), quiet: \(Swift.String(describing: quiet)))"}
}

extension S3ClientTypes.Delete: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for the objects to delete.</p>
    public struct Delete: Swift.Equatable {
        /// <p>The objects to delete.</p>
        public let objects: [S3ClientTypes.ObjectIdentifier]?
        /// <p>Element to enable quiet mode for the request. When you add this element, you must set
        ///          its value to true.</p>
        public let quiet: Swift.Bool

        public init (
            objects: [S3ClientTypes.ObjectIdentifier]? = nil,
            quiet: Swift.Bool = false
        )
        {
            self.objects = objects
            self.quiet = quiet
        }
    }

}

extension DeleteBucketAnalyticsConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketAnalyticsConfigurationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), id: \(Swift.String(describing: id)))"}
}

extension DeleteBucketAnalyticsConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBucketAnalyticsConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketAnalyticsConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketAnalyticsConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketAnalyticsConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketAnalyticsConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketAnalyticsConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketAnalyticsConfigurationOutputError>
}

public struct DeleteBucketAnalyticsConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketAnalyticsConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketAnalyticsConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketAnalyticsConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "analytics", value: nil))
        if let id = input.operationInput.id {
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            input.builder.withQueryItem(idQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketAnalyticsConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketAnalyticsConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketAnalyticsConfigurationOutputError>
}

public struct DeleteBucketAnalyticsConfigurationInput: Swift.Equatable {
    /// <p>The name of the bucket from which an analytics configuration is deleted.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The ID that identifies the analytics configuration.</p>
    public let id: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

struct DeleteBucketAnalyticsConfigurationInputBody: Swift.Equatable {
}

extension DeleteBucketAnalyticsConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketAnalyticsConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteBucketAnalyticsConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBucketAnalyticsConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketAnalyticsConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketAnalyticsConfigurationOutputResponse()"}
}

extension DeleteBucketAnalyticsConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBucketAnalyticsConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBucketAnalyticsConfigurationOutputResponseBody: Swift.Equatable {
}

extension DeleteBucketAnalyticsConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketCorsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketCorsInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension DeleteBucketCorsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBucketCorsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketCorsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketCorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketCorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketCorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketCorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketCorsOutputError>
}

public struct DeleteBucketCorsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketCorsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketCorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketCorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "cors", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketCorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketCorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketCorsOutputError>
}

public struct DeleteBucketCorsInput: Swift.Equatable {
    /// <p>Specifies the bucket whose <code>cors</code> configuration is being deleted.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct DeleteBucketCorsInputBody: Swift.Equatable {
}

extension DeleteBucketCorsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketCorsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteBucketCorsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBucketCorsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketCorsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketCorsOutputResponse()"}
}

extension DeleteBucketCorsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBucketCorsOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBucketCorsOutputResponseBody: Swift.Equatable {
}

extension DeleteBucketCorsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketEncryptionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketEncryptionInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension DeleteBucketEncryptionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBucketEncryptionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketEncryptionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketEncryptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketEncryptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketEncryptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketEncryptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketEncryptionOutputError>
}

public struct DeleteBucketEncryptionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketEncryptionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketEncryptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketEncryptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "encryption", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketEncryptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketEncryptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketEncryptionOutputError>
}

public struct DeleteBucketEncryptionInput: Swift.Equatable {
    /// <p>The name of the bucket containing the server-side encryption configuration to
    ///          delete.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct DeleteBucketEncryptionInputBody: Swift.Equatable {
}

extension DeleteBucketEncryptionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketEncryptionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteBucketEncryptionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBucketEncryptionOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketEncryptionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketEncryptionOutputResponse()"}
}

extension DeleteBucketEncryptionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBucketEncryptionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBucketEncryptionOutputResponseBody: Swift.Equatable {
}

extension DeleteBucketEncryptionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension DeleteBucketInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBucketInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketOutputError>
}

public struct DeleteBucketInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketOutputError>
}

public struct DeleteBucketInput: Swift.Equatable {
    /// <p>Specifies the bucket being deleted.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct DeleteBucketInputBody: Swift.Equatable {
}

extension DeleteBucketInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketIntelligentTieringConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketIntelligentTieringConfigurationInput(bucket: \(Swift.String(describing: bucket)), id: \(Swift.String(describing: id)))"}
}

extension DeleteBucketIntelligentTieringConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBucketIntelligentTieringConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketIntelligentTieringConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketIntelligentTieringConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketIntelligentTieringConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketIntelligentTieringConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketIntelligentTieringConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketIntelligentTieringConfigurationOutputError>
}

public struct DeleteBucketIntelligentTieringConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketIntelligentTieringConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketIntelligentTieringConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketIntelligentTieringConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "intelligent-tiering", value: nil))
        if let id = input.operationInput.id {
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            input.builder.withQueryItem(idQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketIntelligentTieringConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketIntelligentTieringConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketIntelligentTieringConfigurationOutputError>
}

public struct DeleteBucketIntelligentTieringConfigurationInput: Swift.Equatable {
    /// <p>The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.</p>
    public let bucket: Swift.String?
    /// <p>The ID used to identify the S3 Intelligent-Tiering configuration.</p>
    public let id: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.id = id
    }
}

struct DeleteBucketIntelligentTieringConfigurationInputBody: Swift.Equatable {
}

extension DeleteBucketIntelligentTieringConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketIntelligentTieringConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteBucketIntelligentTieringConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBucketIntelligentTieringConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketIntelligentTieringConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketIntelligentTieringConfigurationOutputResponse()"}
}

extension DeleteBucketIntelligentTieringConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBucketIntelligentTieringConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBucketIntelligentTieringConfigurationOutputResponseBody: Swift.Equatable {
}

extension DeleteBucketIntelligentTieringConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketInventoryConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketInventoryConfigurationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), id: \(Swift.String(describing: id)))"}
}

extension DeleteBucketInventoryConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBucketInventoryConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketInventoryConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketInventoryConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketInventoryConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketInventoryConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketInventoryConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketInventoryConfigurationOutputError>
}

public struct DeleteBucketInventoryConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketInventoryConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketInventoryConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketInventoryConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "inventory", value: nil))
        if let id = input.operationInput.id {
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            input.builder.withQueryItem(idQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketInventoryConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketInventoryConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketInventoryConfigurationOutputError>
}

public struct DeleteBucketInventoryConfigurationInput: Swift.Equatable {
    /// <p>The name of the bucket containing the inventory configuration to delete.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The ID used to identify the inventory configuration.</p>
    public let id: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

struct DeleteBucketInventoryConfigurationInputBody: Swift.Equatable {
}

extension DeleteBucketInventoryConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketInventoryConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteBucketInventoryConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBucketInventoryConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketInventoryConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketInventoryConfigurationOutputResponse()"}
}

extension DeleteBucketInventoryConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBucketInventoryConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBucketInventoryConfigurationOutputResponseBody: Swift.Equatable {
}

extension DeleteBucketInventoryConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketLifecycleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketLifecycleInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension DeleteBucketLifecycleInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBucketLifecycleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketLifecycleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketLifecycleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketLifecycleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketLifecycleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketLifecycleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketLifecycleOutputError>
}

public struct DeleteBucketLifecycleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketLifecycleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketLifecycleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketLifecycleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "lifecycle", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketLifecycleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketLifecycleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketLifecycleOutputError>
}

public struct DeleteBucketLifecycleInput: Swift.Equatable {
    /// <p>The bucket name of the lifecycle to delete.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct DeleteBucketLifecycleInputBody: Swift.Equatable {
}

extension DeleteBucketLifecycleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketLifecycleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteBucketLifecycleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBucketLifecycleOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketLifecycleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketLifecycleOutputResponse()"}
}

extension DeleteBucketLifecycleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBucketLifecycleOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBucketLifecycleOutputResponseBody: Swift.Equatable {
}

extension DeleteBucketLifecycleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketMetricsConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketMetricsConfigurationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), id: \(Swift.String(describing: id)))"}
}

extension DeleteBucketMetricsConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBucketMetricsConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketMetricsConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketMetricsConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketMetricsConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketMetricsConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketMetricsConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketMetricsConfigurationOutputError>
}

public struct DeleteBucketMetricsConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketMetricsConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketMetricsConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketMetricsConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "metrics", value: nil))
        if let id = input.operationInput.id {
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            input.builder.withQueryItem(idQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketMetricsConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketMetricsConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketMetricsConfigurationOutputError>
}

public struct DeleteBucketMetricsConfigurationInput: Swift.Equatable {
    /// <p>The name of the bucket containing the metrics configuration to delete.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The ID used to identify the metrics configuration.</p>
    public let id: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

struct DeleteBucketMetricsConfigurationInputBody: Swift.Equatable {
}

extension DeleteBucketMetricsConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketMetricsConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteBucketMetricsConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBucketMetricsConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketMetricsConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketMetricsConfigurationOutputResponse()"}
}

extension DeleteBucketMetricsConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBucketMetricsConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBucketMetricsConfigurationOutputResponseBody: Swift.Equatable {
}

extension DeleteBucketMetricsConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteBucketOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBucketOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketOutputResponse()"}
}

extension DeleteBucketOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBucketOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBucketOutputResponseBody: Swift.Equatable {
}

extension DeleteBucketOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketOwnershipControlsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketOwnershipControlsInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension DeleteBucketOwnershipControlsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBucketOwnershipControlsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketOwnershipControlsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketOwnershipControlsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketOwnershipControlsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketOwnershipControlsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketOwnershipControlsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketOwnershipControlsOutputError>
}

public struct DeleteBucketOwnershipControlsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketOwnershipControlsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketOwnershipControlsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketOwnershipControlsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "ownershipControls", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketOwnershipControlsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketOwnershipControlsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketOwnershipControlsOutputError>
}

public struct DeleteBucketOwnershipControlsInput: Swift.Equatable {
    /// <p>The Amazon S3 bucket whose <code>OwnershipControls</code> you want to delete. </p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct DeleteBucketOwnershipControlsInputBody: Swift.Equatable {
}

extension DeleteBucketOwnershipControlsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketOwnershipControlsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteBucketOwnershipControlsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBucketOwnershipControlsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketOwnershipControlsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketOwnershipControlsOutputResponse()"}
}

extension DeleteBucketOwnershipControlsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBucketOwnershipControlsOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBucketOwnershipControlsOutputResponseBody: Swift.Equatable {
}

extension DeleteBucketOwnershipControlsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketPolicyInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension DeleteBucketPolicyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBucketPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketPolicyOutputError>
}

public struct DeleteBucketPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "policy", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketPolicyOutputError>
}

public struct DeleteBucketPolicyInput: Swift.Equatable {
    /// <p>The bucket name.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct DeleteBucketPolicyInputBody: Swift.Equatable {
}

extension DeleteBucketPolicyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteBucketPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBucketPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketPolicyOutputResponse()"}
}

extension DeleteBucketPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBucketPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBucketPolicyOutputResponseBody: Swift.Equatable {
}

extension DeleteBucketPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketReplicationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketReplicationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension DeleteBucketReplicationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBucketReplicationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketReplicationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketReplicationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketReplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketReplicationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketReplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketReplicationOutputError>
}

public struct DeleteBucketReplicationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketReplicationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketReplicationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketReplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "replication", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketReplicationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketReplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketReplicationOutputError>
}

public struct DeleteBucketReplicationInput: Swift.Equatable {
    /// <p> The bucket name. </p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct DeleteBucketReplicationInputBody: Swift.Equatable {
}

extension DeleteBucketReplicationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketReplicationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteBucketReplicationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBucketReplicationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketReplicationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketReplicationOutputResponse()"}
}

extension DeleteBucketReplicationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBucketReplicationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBucketReplicationOutputResponseBody: Swift.Equatable {
}

extension DeleteBucketReplicationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketTaggingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketTaggingInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension DeleteBucketTaggingInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBucketTaggingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketTaggingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketTaggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketTaggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketTaggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketTaggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketTaggingOutputError>
}

public struct DeleteBucketTaggingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketTaggingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketTaggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketTaggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "tagging", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketTaggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketTaggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketTaggingOutputError>
}

public struct DeleteBucketTaggingInput: Swift.Equatable {
    /// <p>The bucket that has the tag set to be removed.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct DeleteBucketTaggingInputBody: Swift.Equatable {
}

extension DeleteBucketTaggingInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketTaggingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteBucketTaggingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBucketTaggingOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketTaggingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketTaggingOutputResponse()"}
}

extension DeleteBucketTaggingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBucketTaggingOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBucketTaggingOutputResponseBody: Swift.Equatable {
}

extension DeleteBucketTaggingOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketWebsiteInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketWebsiteInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension DeleteBucketWebsiteInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBucketWebsiteInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketWebsiteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketWebsiteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketWebsiteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketWebsiteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketWebsiteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketWebsiteOutputError>
}

public struct DeleteBucketWebsiteInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBucketWebsiteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBucketWebsiteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBucketWebsiteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "website", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBucketWebsiteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBucketWebsiteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBucketWebsiteOutputError>
}

public struct DeleteBucketWebsiteInput: Swift.Equatable {
    /// <p>The bucket name for which you want to remove the website configuration. </p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct DeleteBucketWebsiteInputBody: Swift.Equatable {
}

extension DeleteBucketWebsiteInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBucketWebsiteOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteBucketWebsiteOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBucketWebsiteOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBucketWebsiteOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBucketWebsiteOutputResponse()"}
}

extension DeleteBucketWebsiteOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBucketWebsiteOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBucketWebsiteOutputResponseBody: Swift.Equatable {
}

extension DeleteBucketWebsiteOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes.DeleteMarkerEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isLatest = "IsLatest"
        case key = "Key"
        case lastModified = "LastModified"
        case owner = "Owner"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if isLatest != false {
            try container.encode(isLatest, forKey: ClientRuntime.Key("IsLatest"))
        }
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let lastModified = lastModified {
            try container.encode(ClientRuntime.TimestampWrapper(lastModified, format: .dateTime), forKey: ClientRuntime.Key("LastModified"))
        }
        if let owner = owner {
            try container.encode(owner, forKey: ClientRuntime.Key("Owner"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let isLatestDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isLatest)
        isLatest = isLatestDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        var lastModifiedBuffer:ClientRuntime.Date? = nil
        if let lastModifiedDecoded = lastModifiedDecoded {
            lastModifiedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastModifiedDecoded, format: .dateTime)
        }
        lastModified = lastModifiedBuffer
    }
}

extension S3ClientTypes.DeleteMarkerEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMarkerEntry(isLatest: \(Swift.String(describing: isLatest)), key: \(Swift.String(describing: key)), lastModified: \(Swift.String(describing: lastModified)), owner: \(Swift.String(describing: owner)), versionId: \(Swift.String(describing: versionId)))"}
}

extension S3ClientTypes.DeleteMarkerEntry: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Information about the delete marker.</p>
    public struct DeleteMarkerEntry: Swift.Equatable {
        /// <p>Specifies whether the object is (true) or is not (false) the latest version of an
        ///          object.</p>
        public let isLatest: Swift.Bool
        /// <p>The object key.</p>
        public let key: Swift.String?
        /// <p>Date and time the object was last modified.</p>
        public let lastModified: ClientRuntime.Date?
        /// <p>The account that created the delete marker.></p>
        public let owner: S3ClientTypes.Owner?
        /// <p>Version ID of an object.</p>
        public let versionId: Swift.String?

        public init (
            isLatest: Swift.Bool = false,
            key: Swift.String? = nil,
            lastModified: ClientRuntime.Date? = nil,
            owner: S3ClientTypes.Owner? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.isLatest = isLatest
            self.key = key
            self.lastModified = lastModified
            self.owner = owner
            self.versionId = versionId
        }
    }

}

extension S3ClientTypes.DeleteMarkerReplication: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.DeleteMarkerReplicationStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension S3ClientTypes.DeleteMarkerReplication: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMarkerReplication(status: \(Swift.String(describing: status)))"}
}

extension S3ClientTypes.DeleteMarkerReplication: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies whether Amazon S3 replicates delete markers. If you specify a <code>Filter</code>
    ///          in your replication configuration, you must also include a
    ///             <code>DeleteMarkerReplication</code> element. If your <code>Filter</code> includes a
    ///             <code>Tag</code> element, the <code>DeleteMarkerReplication</code>
    ///             <code>Status</code> must be set to Disabled, because Amazon S3 does not support replicating
    ///          delete markers for tag-based rules. For an example configuration, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config">Basic Rule Configuration</a>. </p>
    ///          <p>For more information about delete marker replication, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html">Basic Rule
    ///             Configuration</a>. </p>
    ///          <note>
    ///             <p>If you are using an earlier version of the replication configuration, Amazon S3 handles
    ///             replication of delete markers differently. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations">Backward Compatibility</a>.</p>
    ///          </note>
    public struct DeleteMarkerReplication: Swift.Equatable {
        /// <p>Indicates whether to replicate delete markers.</p>
        ///          <note>
        ///             <p>Indicates whether to replicate delete markers.</p>
        ///          </note>
        public let status: S3ClientTypes.DeleteMarkerReplicationStatus?

        public init (
            status: S3ClientTypes.DeleteMarkerReplicationStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension S3ClientTypes {
    public enum DeleteMarkerReplicationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DeleteMarkerReplicationStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeleteMarkerReplicationStatus(rawValue: rawValue) ?? DeleteMarkerReplicationStatus.sdkUnknown(rawValue)
        }
    }
}

extension DeleteObjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteObjectInput(bucket: \(Swift.String(describing: bucket)), bypassGovernanceRetention: \(Swift.String(describing: bypassGovernanceRetention)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), mFA: \(Swift.String(describing: mFA)), requestPayer: \(Swift.String(describing: requestPayer)), versionId: \(Swift.String(describing: versionId)))"}
}

extension DeleteObjectInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteObjectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteObjectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteObjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.bypassGovernanceRetention != false {
            input.builder.withHeader(name: "x-amz-bypass-governance-retention", value: Swift.String(input.operationInput.bypassGovernanceRetention))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let mFA = input.operationInput.mFA {
            input.builder.withHeader(name: "x-amz-mfa", value: Swift.String(mFA))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteObjectOutputError>
}

public struct DeleteObjectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteObjectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteObjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "DeleteObject"))
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteObjectOutputError>
}

public struct DeleteObjectInput: Swift.Equatable {
    /// <p>The bucket name of the bucket containing the object. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>Indicates whether S3 Object Lock should bypass Governance-mode restrictions to process
    ///          this operation.</p>
    public let bypassGovernanceRetention: Swift.Bool
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Key name of the object to delete.</p>
    public let key: Swift.String?
    /// <p>The concatenation of the authentication device's serial number, a space, and the value
    ///          that is displayed on your authentication device. Required to permanently delete a versioned
    ///          object if versioning is configured with MFA delete enabled.</p>
    public let mFA: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>VersionId used to reference a specific version of the object.</p>
    public let versionId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        bypassGovernanceRetention: Swift.Bool = false,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        mFA: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.bypassGovernanceRetention = bypassGovernanceRetention
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.mFA = mFA
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

struct DeleteObjectInputBody: Swift.Equatable {
}

extension DeleteObjectInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteObjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteObjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteObjectOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteObjectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteObjectOutputResponse(deleteMarker: \(Swift.String(describing: deleteMarker)), requestCharged: \(Swift.String(describing: requestCharged)), versionId: \(Swift.String(describing: versionId)))"}
}

extension DeleteObjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let deleteMarkerHeaderValue = httpResponse.headers.value(for: "x-amz-delete-marker") {
            self.deleteMarker = Swift.Bool(deleteMarkerHeaderValue) ?? false
        } else {
            self.deleteMarker = false
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
    }
}

public struct DeleteObjectOutputResponse: Swift.Equatable {
    /// <p>Specifies whether the versioned object that was permanently deleted was (true) or was
    ///          not (false) a delete marker.</p>
    public let deleteMarker: Swift.Bool
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?
    /// <p>Returns the version ID of the delete marker created as a result of the DELETE
    ///          operation.</p>
    public let versionId: Swift.String?

    public init (
        deleteMarker: Swift.Bool = false,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.deleteMarker = deleteMarker
        self.requestCharged = requestCharged
        self.versionId = versionId
    }
}

struct DeleteObjectOutputResponseBody: Swift.Equatable {
}

extension DeleteObjectOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteObjectTaggingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteObjectTaggingInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), versionId: \(Swift.String(describing: versionId)))"}
}

extension DeleteObjectTaggingInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteObjectTaggingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteObjectTaggingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteObjectTaggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteObjectTaggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteObjectTaggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteObjectTaggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteObjectTaggingOutputError>
}

public struct DeleteObjectTaggingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteObjectTaggingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteObjectTaggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteObjectTaggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "tagging", value: nil))
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteObjectTaggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteObjectTaggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteObjectTaggingOutputError>
}

public struct DeleteObjectTaggingInput: Swift.Equatable {
    /// <p>The bucket name containing the objects from which to remove the tags. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The key that identifies the object in the bucket from which to remove all tags.</p>
    public let key: Swift.String?
    /// <p>The versionId of the object that the tag-set will be removed from.</p>
    public let versionId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.versionId = versionId
    }
}

struct DeleteObjectTaggingInputBody: Swift.Equatable {
}

extension DeleteObjectTaggingInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteObjectTaggingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteObjectTaggingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteObjectTaggingOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteObjectTaggingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteObjectTaggingOutputResponse(versionId: \(Swift.String(describing: versionId)))"}
}

extension DeleteObjectTaggingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
    }
}

public struct DeleteObjectTaggingOutputResponse: Swift.Equatable {
    /// <p>The versionId of the object the tag-set was removed from.</p>
    public let versionId: Swift.String?

    public init (
        versionId: Swift.String? = nil
    )
    {
        self.versionId = versionId
    }
}

struct DeleteObjectTaggingOutputResponseBody: Swift.Equatable {
}

extension DeleteObjectTaggingOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteObjectsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteObjectsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteObjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let delete = input.operationInput.delete {
            do {
                let encoder = context.getEncoder()
                let deletedata = try encoder.encode(delete)
                let deletebody = ClientRuntime.HttpBody.data(deletedata)
                input.builder.withBody(deletebody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteObjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteObjectsOutputError>
}

extension DeleteObjectsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteObjectsInput(bucket: \(Swift.String(describing: bucket)), bypassGovernanceRetention: \(Swift.String(describing: bypassGovernanceRetention)), delete: \(Swift.String(describing: delete)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), mFA: \(Swift.String(describing: mFA)), requestPayer: \(Swift.String(describing: requestPayer)))"}
}

extension DeleteObjectsInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension DeleteObjectsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delete = "Delete"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let delete = delete {
            try container.encode(delete, forKey: ClientRuntime.Key("Delete"))
        }
    }
}

public struct DeleteObjectsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteObjectsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteObjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.bypassGovernanceRetention != false {
            input.builder.withHeader(name: "x-amz-bypass-governance-retention", value: Swift.String(input.operationInput.bypassGovernanceRetention))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let mFA = input.operationInput.mFA {
            input.builder.withHeader(name: "x-amz-mfa", value: Swift.String(mFA))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteObjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteObjectsOutputError>
}

public struct DeleteObjectsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteObjectsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteObjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "delete", value: nil))
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "DeleteObjects"))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteObjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteObjectsOutputError>
}

public struct DeleteObjectsInput: Swift.Equatable {
    /// <p>The bucket name containing the objects to delete. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>Specifies whether you want to delete this object even if it has a Governance-type Object
    ///          Lock in place. You must have sufficient permissions to perform this operation.</p>
    public let bypassGovernanceRetention: Swift.Bool
    /// <p>Container for the request.</p>
    public let delete: S3ClientTypes.Delete?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The concatenation of the authentication device's serial number, a space, and the value
    ///          that is displayed on your authentication device. Required to permanently delete a versioned
    ///          object if versioning is configured with MFA delete enabled.</p>
    public let mFA: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?

    public init (
        bucket: Swift.String? = nil,
        bypassGovernanceRetention: Swift.Bool = false,
        delete: S3ClientTypes.Delete? = nil,
        expectedBucketOwner: Swift.String? = nil,
        mFA: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil
    )
    {
        self.bucket = bucket
        self.bypassGovernanceRetention = bypassGovernanceRetention
        self.delete = delete
        self.expectedBucketOwner = expectedBucketOwner
        self.mFA = mFA
        self.requestPayer = requestPayer
    }
}

struct DeleteObjectsInputBody: Swift.Equatable {
    public let delete: S3ClientTypes.Delete?
}

extension DeleteObjectsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delete = "Delete"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deleteDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Delete.self, forKey: .delete)
        delete = deleteDecoded
    }
}

extension DeleteObjectsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteObjectsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteObjectsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteObjectsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteObjectsOutputResponse(deleted: \(Swift.String(describing: deleted)), errors: \(Swift.String(describing: errors)), requestCharged: \(Swift.String(describing: requestCharged)))"}
}

extension DeleteObjectsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteObjectsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deleted = output.deleted
            self.errors = output.errors
        } else {
            self.deleted = nil
            self.errors = nil
        }
    }
}

public struct DeleteObjectsOutputResponse: Swift.Equatable {
    /// <p>Container element for a successful delete. It identifies the object that was
    ///          successfully deleted.</p>
    public let deleted: [S3ClientTypes.DeletedObject]?
    /// <p>Container for a failed delete action that describes the object that Amazon S3 attempted to
    ///          delete and the error it encountered.</p>
    public let errors: [S3ClientTypes.Error]?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?

    public init (
        deleted: [S3ClientTypes.DeletedObject]? = nil,
        errors: [S3ClientTypes.Error]? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.deleted = deleted
        self.errors = errors
        self.requestCharged = requestCharged
    }
}

struct DeleteObjectsOutputResponseBody: Swift.Equatable {
    public let deleted: [S3ClientTypes.DeletedObject]?
    public let errors: [S3ClientTypes.Error]?
}

extension DeleteObjectsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleted = "Deleted"
        case errors = "Error"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.deleted) {
            let deletedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .deleted)
            if deletedWrappedContainer != nil {
                let deletedContainer = try containerValues.decodeIfPresent([S3ClientTypes.DeletedObject].self, forKey: .deleted)
                var deletedBuffer:[S3ClientTypes.DeletedObject]? = nil
                if let deletedContainer = deletedContainer {
                    deletedBuffer = [S3ClientTypes.DeletedObject]()
                    for structureContainer0 in deletedContainer {
                        deletedBuffer?.append(structureContainer0)
                    }
                }
                deleted = deletedBuffer
            } else {
                deleted = []
            }
        } else {
            deleted = nil
        }
        if containerValues.contains(.errors) {
            let errorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .errors)
            if errorsWrappedContainer != nil {
                let errorsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Error].self, forKey: .errors)
                var errorsBuffer:[S3ClientTypes.Error]? = nil
                if let errorsContainer = errorsContainer {
                    errorsBuffer = [S3ClientTypes.Error]()
                    for structureContainer0 in errorsContainer {
                        errorsBuffer?.append(structureContainer0)
                    }
                }
                errors = errorsBuffer
            } else {
                errors = []
            }
        } else {
            errors = nil
        }
    }
}

extension DeletePublicAccessBlockInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePublicAccessBlockInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension DeletePublicAccessBlockInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeletePublicAccessBlockInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePublicAccessBlockInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePublicAccessBlockInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePublicAccessBlockOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePublicAccessBlockInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePublicAccessBlockOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePublicAccessBlockOutputError>
}

public struct DeletePublicAccessBlockInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePublicAccessBlockInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePublicAccessBlockInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePublicAccessBlockOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "publicAccessBlock", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePublicAccessBlockInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePublicAccessBlockOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePublicAccessBlockOutputError>
}

public struct DeletePublicAccessBlockInput: Swift.Equatable {
    /// <p>The Amazon S3 bucket whose <code>PublicAccessBlock</code> configuration you want to delete.
    ///       </p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct DeletePublicAccessBlockInputBody: Swift.Equatable {
}

extension DeletePublicAccessBlockInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeletePublicAccessBlockOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeletePublicAccessBlockOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePublicAccessBlockOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePublicAccessBlockOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePublicAccessBlockOutputResponse()"}
}

extension DeletePublicAccessBlockOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePublicAccessBlockOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeletePublicAccessBlockOutputResponseBody: Swift.Equatable {
}

extension DeletePublicAccessBlockOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes.DeletedObject: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteMarker = "DeleteMarker"
        case deleteMarkerVersionId = "DeleteMarkerVersionId"
        case key = "Key"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if deleteMarker != false {
            try container.encode(deleteMarker, forKey: ClientRuntime.Key("DeleteMarker"))
        }
        if let deleteMarkerVersionId = deleteMarkerVersionId {
            try container.encode(deleteMarkerVersionId, forKey: ClientRuntime.Key("DeleteMarkerVersionId"))
        }
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let deleteMarkerDecoded = try containerValues.decode(Swift.Bool.self, forKey: .deleteMarker)
        deleteMarker = deleteMarkerDecoded
        let deleteMarkerVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deleteMarkerVersionId)
        deleteMarkerVersionId = deleteMarkerVersionIdDecoded
    }
}

extension S3ClientTypes.DeletedObject: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletedObject(deleteMarker: \(Swift.String(describing: deleteMarker)), deleteMarkerVersionId: \(Swift.String(describing: deleteMarkerVersionId)), key: \(Swift.String(describing: key)), versionId: \(Swift.String(describing: versionId)))"}
}

extension S3ClientTypes.DeletedObject: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Information about the deleted object.</p>
    public struct DeletedObject: Swift.Equatable {
        /// <p>Specifies whether the versioned object that was permanently deleted was (true) or was
        ///          not (false) a delete marker. In a simple DELETE, this header indicates whether (true) or
        ///          not (false) a delete marker was created.</p>
        public let deleteMarker: Swift.Bool
        /// <p>The version ID of the delete marker created as a result of the DELETE operation. If you
        ///          delete a specific object version, the value returned by this header is the version ID of
        ///          the object version deleted.</p>
        public let deleteMarkerVersionId: Swift.String?
        /// <p>The name of the deleted object.</p>
        public let key: Swift.String?
        /// <p>The version ID of the deleted object.</p>
        public let versionId: Swift.String?

        public init (
            deleteMarker: Swift.Bool = false,
            deleteMarkerVersionId: Swift.String? = nil,
            key: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.deleteMarker = deleteMarker
            self.deleteMarkerVersionId = deleteMarkerVersionId
            self.key = key
            self.versionId = versionId
        }
    }

}

extension S3ClientTypes.Destination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlTranslation = "AccessControlTranslation"
        case account = "Account"
        case bucket = "Bucket"
        case encryptionConfiguration = "EncryptionConfiguration"
        case metrics = "Metrics"
        case replicationTime = "ReplicationTime"
        case storageClass = "StorageClass"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let accessControlTranslation = accessControlTranslation {
            try container.encode(accessControlTranslation, forKey: ClientRuntime.Key("AccessControlTranslation"))
        }
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let bucket = bucket {
            try container.encode(bucket, forKey: ClientRuntime.Key("Bucket"))
        }
        if let encryptionConfiguration = encryptionConfiguration {
            try container.encode(encryptionConfiguration, forKey: ClientRuntime.Key("EncryptionConfiguration"))
        }
        if let metrics = metrics {
            try container.encode(metrics, forKey: ClientRuntime.Key("Metrics"))
        }
        if let replicationTime = replicationTime {
            try container.encode(replicationTime, forKey: ClientRuntime.Key("ReplicationTime"))
        }
        if let storageClass = storageClass {
            try container.encode(storageClass, forKey: ClientRuntime.Key("StorageClass"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let accessControlTranslationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AccessControlTranslation.self, forKey: .accessControlTranslation)
        accessControlTranslation = accessControlTranslationDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let replicationTimeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationTime.self, forKey: .replicationTime)
        replicationTime = replicationTimeDecoded
        let metricsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Metrics.self, forKey: .metrics)
        metrics = metricsDecoded
    }
}

extension S3ClientTypes.Destination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Destination(accessControlTranslation: \(Swift.String(describing: accessControlTranslation)), account: \(Swift.String(describing: account)), bucket: \(Swift.String(describing: bucket)), encryptionConfiguration: \(Swift.String(describing: encryptionConfiguration)), metrics: \(Swift.String(describing: metrics)), replicationTime: \(Swift.String(describing: replicationTime)), storageClass: \(Swift.String(describing: storageClass)))"}
}

extension S3ClientTypes.Destination: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies information about where to publish analysis or configuration results for an
    ///          Amazon S3 bucket and S3 Replication Time Control (S3 RTC).</p>
    public struct Destination: Swift.Equatable {
        /// <p>Specify this only in a cross-account scenario (where source and destination bucket
        ///          owners are not the same), and you want to change replica ownership to the AWS account that
        ///          owns the destination bucket. If this is not specified in the replication configuration, the
        ///          replicas are owned by same AWS account that owns the source object.</p>
        public let accessControlTranslation: S3ClientTypes.AccessControlTranslation?
        /// <p>Destination bucket owner account ID. In a cross-account scenario, if you direct Amazon S3 to
        ///          change replica ownership to the AWS account that owns the destination bucket by specifying
        ///          the <code>AccessControlTranslation</code> property, this is the account ID of the
        ///          destination bucket owner. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-change-owner.html">Replication Additional
        ///             Configuration: Changing the Replica Owner</a> in the <i>Amazon S3 User Guide</i>.</p>
        public let account: Swift.String?
        /// <p> The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store the results.</p>
        public let bucket: Swift.String?
        /// <p>A container that provides information about encryption. If
        ///             <code>SourceSelectionCriteria</code> is specified, you must specify this element.</p>
        public let encryptionConfiguration: S3ClientTypes.EncryptionConfiguration?
        /// <p> A container specifying replication metrics-related settings enabling replication
        ///          metrics and events. </p>
        public let metrics: S3ClientTypes.Metrics?
        /// <p> A container specifying S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time
        ///          when all objects and operations on objects must be replicated. Must be specified together
        ///          with a <code>Metrics</code> block. </p>
        public let replicationTime: S3ClientTypes.ReplicationTime?
        /// <p> The storage class to use when replicating objects, such as S3 Standard or reduced
        ///          redundancy. By default, Amazon S3 uses the storage class of the source object to create the
        ///          object replica. </p>
        ///          <p>For valid values, see the <code>StorageClass</code> element of the <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html">PUT Bucket
        ///             replication</a> action in the <i>Amazon S3 API Reference</i>.</p>
        public let storageClass: S3ClientTypes.StorageClass?

        public init (
            accessControlTranslation: S3ClientTypes.AccessControlTranslation? = nil,
            account: Swift.String? = nil,
            bucket: Swift.String? = nil,
            encryptionConfiguration: S3ClientTypes.EncryptionConfiguration? = nil,
            metrics: S3ClientTypes.Metrics? = nil,
            replicationTime: S3ClientTypes.ReplicationTime? = nil,
            storageClass: S3ClientTypes.StorageClass? = nil
        )
        {
            self.accessControlTranslation = accessControlTranslation
            self.account = account
            self.bucket = bucket
            self.encryptionConfiguration = encryptionConfiguration
            self.metrics = metrics
            self.replicationTime = replicationTime
            self.storageClass = storageClass
        }
    }

}

extension S3ClientTypes {
    /// <p>Requests Amazon S3 to encode the object keys in the response and specifies the encoding
    ///          method to use. An object key may contain any Unicode character; however, XML 1.0 parser
    ///          cannot parse some characters, such as characters with an ASCII value from 0 to 10. For
    ///          characters that are not supported in XML 1.0, you can add this parameter to request that
    ///          Amazon S3 encode the keys in the response.</p>
    public enum EncodingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case url
        case sdkUnknown(Swift.String)

        public static var allCases: [EncodingType] {
            return [
                .url,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .url: return "url"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EncodingType(rawValue: rawValue) ?? EncodingType.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.Encryption: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionType = "EncryptionType"
        case kMSContext = "KMSContext"
        case kMSKeyId = "KMSKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let encryptionType = encryptionType {
            try container.encode(encryptionType, forKey: ClientRuntime.Key("EncryptionType"))
        }
        if let kMSContext = kMSContext {
            try container.encode(kMSContext, forKey: ClientRuntime.Key("KMSContext"))
        }
        if let kMSKeyId = kMSKeyId {
            try container.encode(kMSKeyId, forKey: ClientRuntime.Key("KMSKeyId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ServerSideEncryption.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
        let kMSKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kMSKeyId)
        kMSKeyId = kMSKeyIdDecoded
        let kMSContextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kMSContext)
        kMSContext = kMSContextDecoded
    }
}

extension S3ClientTypes.Encryption: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Encryption(encryptionType: \(Swift.String(describing: encryptionType)), kMSContext: \(Swift.String(describing: kMSContext)), kMSKeyId: \(Swift.String(describing: kMSKeyId)))"}
}

extension S3ClientTypes.Encryption: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Contains the type of server-side encryption used.</p>
    public struct Encryption: Swift.Equatable {
        /// <p>The server-side encryption algorithm used when storing job results in Amazon S3 (for example,
        ///          AES256, aws:kms).</p>
        public let encryptionType: S3ClientTypes.ServerSideEncryption?
        /// <p>If the encryption type is <code>aws:kms</code>, this optional value can be used to
        ///          specify the encryption context for the restore results.</p>
        public let kMSContext: Swift.String?
        /// <p>If the encryption type is <code>aws:kms</code>, this optional value specifies the ID of
        ///          the symmetric customer managed AWS KMS CMK to use for encryption of job results. Amazon S3 only
        ///          supports symmetric CMKs. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using symmetric and
        ///             asymmetric keys</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
        public let kMSKeyId: Swift.String?

        public init (
            encryptionType: S3ClientTypes.ServerSideEncryption? = nil,
            kMSContext: Swift.String? = nil,
            kMSKeyId: Swift.String? = nil
        )
        {
            self.encryptionType = encryptionType
            self.kMSContext = kMSContext
            self.kMSKeyId = kMSKeyId
        }
    }

}

extension S3ClientTypes.EncryptionConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicaKmsKeyID = "ReplicaKmsKeyID"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let replicaKmsKeyID = replicaKmsKeyID {
            try container.encode(replicaKmsKeyID, forKey: ClientRuntime.Key("ReplicaKmsKeyID"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicaKmsKeyIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicaKmsKeyID)
        replicaKmsKeyID = replicaKmsKeyIDDecoded
    }
}

extension S3ClientTypes.EncryptionConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EncryptionConfiguration(replicaKmsKeyID: \(Swift.String(describing: replicaKmsKeyID)))"}
}

extension S3ClientTypes.EncryptionConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies encryption-related information for an Amazon S3 bucket that is a destination for
    ///          replicated objects.</p>
    public struct EncryptionConfiguration: Swift.Equatable {
        /// <p>Specifies the ID (Key ARN or Alias ARN) of the customer managed AWS KMS key
        ///          stored in AWS Key Management Service (KMS) for the destination bucket. Amazon S3 uses
        ///          this key to encrypt replica objects. Amazon S3 only supports symmetric, customer managed KMS keys.
        ///          For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using symmetric and
        ///             asymmetric keys</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
        public let replicaKmsKeyID: Swift.String?

        public init (
            replicaKmsKeyID: Swift.String? = nil
        )
        {
            self.replicaKmsKeyID = replicaKmsKeyID
        }
    }

}

extension S3ClientTypes.EndEvent: Swift.Codable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes.EndEvent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EndEvent()"}
}

extension S3ClientTypes {
    /// <p>A message that indicates the request is complete and no more messages will be sent. You
    ///          should not assume that the request is complete until the client receives an
    ///             <code>EndEvent</code>.</p>
    public struct EndEvent: Swift.Equatable {

        public init() {}
    }

}

extension S3ClientTypes.Error: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case key = "Key"
        case message = "Message"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let code = code {
            try container.encode(code, forKey: ClientRuntime.Key("Code"))
        }
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension S3ClientTypes.Error: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Error(code: \(Swift.String(describing: code)), key: \(Swift.String(describing: key)), message: \(Swift.String(describing: message)), versionId: \(Swift.String(describing: versionId)))"}
}

extension S3ClientTypes.Error: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for all error elements.</p>
    public struct Error: Swift.Equatable {
        /// <p>The error code is a string that uniquely identifies an error condition. It is meant to
        ///          be read and understood by programs that detect and handle errors by type. </p>
        ///          <p class="title">
        ///             <b>Amazon S3 error codes</b>
        ///          </p>
        ///          <ul>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> AccessDenied </p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Access Denied</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 403 Forbidden</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> AccountProblem</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> There is a problem with your AWS account
        ///                      that prevents the action from completing successfully. Contact AWS Support
        ///                      for further assistance.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 403 Forbidden</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> AllAccessDisabled</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> All access to this Amazon S3 resource has been
        ///                      disabled. Contact AWS Support for further assistance.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 403 Forbidden</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> AmbiguousGrantByEmailAddress</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The email address you provided is
        ///                      associated with more than one account.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> AuthorizationHeaderMalformed</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The authorization header you provided is
        ///                      invalid.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> N/A</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> BadDigest</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The Content-MD5 you specified did not
        ///                      match what we received.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> BucketAlreadyExists</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The requested bucket name is not
        ///                      available. The bucket namespace is shared by all users of the system. Please
        ///                      select a different name and try again.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 409 Conflict</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> BucketAlreadyOwnedByYou</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The bucket you tried to create already
        ///                      exists, and you own it. Amazon S3 returns this error in all AWS Regions except in
        ///                      the North Virginia Region. For legacy compatibility, if you re-create an
        ///                      existing bucket that you already own in the North Virginia Region, Amazon S3 returns
        ///                      200 OK and resets the bucket access control lists (ACLs).</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> 409 Conflict (in all Regions except the North
        ///                      Virginia Region) </p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> BucketNotEmpty</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The bucket you tried to delete is not
        ///                      empty.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 409 Conflict</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> CredentialsNotSupported</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> This request does not support
        ///                      credentials.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> CrossLocationLoggingProhibited</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Cross-location logging not allowed.
        ///                      Buckets in one geographic location cannot log information to a bucket in
        ///                      another location.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 403 Forbidden</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> EntityTooSmall</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Your proposed upload is smaller than the
        ///                      minimum allowed object size.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> EntityTooLarge</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Your proposed upload exceeds the maximum
        ///                      allowed object size.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> ExpiredToken</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The provided token has expired.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> IllegalVersioningConfigurationException </p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Indicates that the versioning
        ///                      configuration specified in the request is invalid.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> IncompleteBody</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> You did not provide the number of bytes
        ///                      specified by the Content-Length HTTP header</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> IncorrectNumberOfFilesInPostRequest</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> POST requires exactly one file upload per
        ///                      request.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InlineDataTooLarge</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Inline data exceeds the maximum allowed
        ///                      size.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InternalError</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> We encountered an internal error. Please
        ///                      try again.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 500 Internal Server Error</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Server</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidAccessKeyId</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The AWS access key ID you provided does
        ///                      not exist in our records.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 403 Forbidden</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidAddressingHeader</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> You must specify the Anonymous
        ///                      role.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> N/A</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidArgument</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Invalid Argument</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidBucketName</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The specified bucket is not valid.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidBucketState</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The request is not valid with the current
        ///                      state of the bucket.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 409 Conflict</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidDigest</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The Content-MD5 you specified is not
        ///                      valid.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidEncryptionAlgorithmError</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The encryption request you specified is
        ///                      not valid. The valid value is AES256.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidLocationConstraint</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The specified location constraint is not
        ///                      valid. For more information about Regions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro">How to Select a
        ///                         Region for Your Buckets</a>. </p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidObjectState</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The action is not valid for the current
        ///                      state of the object.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 403 Forbidden</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidPart</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> One or more of the specified parts could
        ///                      not be found. The part might not have been uploaded, or the specified entity
        ///                      tag might not have matched the part's entity tag.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidPartOrder</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The list of parts was not in ascending
        ///                      order. Parts list must be specified in order by part number.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidPayer</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> All access to this object has been
        ///                      disabled. Please contact AWS Support for further assistance.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 403 Forbidden</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidPolicyDocument</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The content of the form does not meet the
        ///                      conditions specified in the policy document.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidRange</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The requested range cannot be
        ///                      satisfied.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 416 Requested Range Not
        ///                      Satisfiable</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidRequest</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Please use AWS4-HMAC-SHA256.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> N/A</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidRequest</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> SOAP requests must be made over an HTTPS
        ///                      connection.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidRequest</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Amazon S3 Transfer Acceleration is not
        ///                      supported for buckets with non-DNS compliant names.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> N/A</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidRequest</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Amazon S3 Transfer Acceleration is not
        ///                      supported for buckets with periods (.) in their names.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> N/A</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidRequest</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Amazon S3 Transfer Accelerate endpoint only
        ///                      supports virtual style requests.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> N/A</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidRequest</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Amazon S3 Transfer Accelerate is not configured
        ///                      on this bucket.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> N/A</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidRequest</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Amazon S3 Transfer Accelerate is disabled on
        ///                      this bucket.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> N/A</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidRequest</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Amazon S3 Transfer Acceleration is not
        ///                      supported on this bucket. Contact AWS Support for more information.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> N/A</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidRequest</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Amazon S3 Transfer Acceleration cannot be
        ///                      enabled on this bucket. Contact AWS Support for more information.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> N/A</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidSecurity</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The provided security credentials are not
        ///                      valid.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 403 Forbidden</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidSOAPRequest</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The SOAP request body is invalid.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidStorageClass</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The storage class you specified is not
        ///                      valid.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidTargetBucketForLogging</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The target bucket for logging does not
        ///                      exist, is not owned by you, or does not have the appropriate grants for the
        ///                      log-delivery group. </p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidToken</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The provided token is malformed or
        ///                      otherwise invalid.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> InvalidURI</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Couldn't parse the specified URI.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> KeyTooLongError</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Your key is too long.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> MalformedACLError</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The XML you provided was not well-formed
        ///                      or did not validate against our published schema.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> MalformedPOSTRequest </p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The body of your POST request is not
        ///                      well-formed multipart/form-data.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> MalformedXML</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> This happens when the user sends malformed
        ///                      XML (XML that doesn't conform to the published XSD) for the configuration. The
        ///                      error message is, "The XML you provided was not well-formed or did not validate
        ///                      against our published schema." </p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> MaxMessageLengthExceeded</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Your request was too big.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> MaxPostPreDataLengthExceededError</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Your POST request fields preceding the
        ///                      upload file were too large.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> MetadataTooLarge</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Your metadata headers exceed the maximum
        ///                      allowed metadata size.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> MethodNotAllowed</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The specified method is not allowed
        ///                      against this resource.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 405 Method Not Allowed</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> MissingAttachment</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> A SOAP attachment was expected, but none
        ///                      were found.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> N/A</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> MissingContentLength</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> You must provide the Content-Length HTTP
        ///                      header.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 411 Length Required</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> MissingRequestBodyError</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> This happens when the user sends an empty
        ///                      XML document as a request. The error message is, "Request body is empty."
        ///                   </p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> MissingSecurityElement</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The SOAP 1.1 request is missing a security
        ///                      element.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> MissingSecurityHeader</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Your request is missing a required
        ///                      header.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> NoLoggingStatusForKey</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> There is no such thing as a logging status
        ///                      subresource for a key.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> NoSuchBucket</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The specified bucket does not
        ///                      exist.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 404 Not Found</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> NoSuchBucketPolicy</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The specified bucket does not have a
        ///                      bucket policy.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 404 Not Found</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> NoSuchKey</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The specified key does not exist.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 404 Not Found</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> NoSuchLifecycleConfiguration</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The lifecycle configuration does not
        ///                      exist. </p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 404 Not Found</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> NoSuchUpload</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The specified multipart upload does not
        ///                      exist. The upload ID might be invalid, or the multipart upload might have been
        ///                      aborted or completed.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 404 Not Found</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> NoSuchVersion </p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Indicates that the version ID specified in
        ///                      the request does not match an existing version.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 404 Not Found</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> NotImplemented</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> A header you provided implies
        ///                      functionality that is not implemented.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 501 Not Implemented</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Server</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> NotSignedUp</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Your account is not signed up for the Amazon S3
        ///                      service. You must sign up before you can use Amazon S3. You can sign up at the
        ///                      following URL: https://aws.amazon.com/s3</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 403 Forbidden</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> OperationAborted</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> A conflicting conditional action is
        ///                      currently in progress against this resource. Try again.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 409 Conflict</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> PermanentRedirect</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The bucket you are attempting to access
        ///                      must be addressed using the specified endpoint. Send all future requests to
        ///                      this endpoint.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 301 Moved Permanently</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> PreconditionFailed</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> At least one of the preconditions you
        ///                      specified did not hold.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 412 Precondition Failed</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> Redirect</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Temporary redirect.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 307 Moved Temporarily</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> RestoreAlreadyInProgress</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Object restore is already in
        ///                      progress.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 409 Conflict</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> RequestIsNotMultiPartContent</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Bucket POST must be of the enclosure-type
        ///                      multipart/form-data.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> RequestTimeout</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Your socket connection to the server was
        ///                      not read from or written to within the timeout period.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> RequestTimeTooSkewed</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The difference between the request time
        ///                      and the server's time is too large.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 403 Forbidden</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> RequestTorrentOfBucketError</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Requesting the torrent file of a bucket is
        ///                      not permitted.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> SignatureDoesNotMatch</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The request signature we calculated does
        ///                      not match the signature you provided. Check your AWS secret access key and
        ///                      signing method. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">REST Authentication</a> and
        ///                         <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/SOAPAuthentication.html">SOAP Authentication</a>
        ///                      for details.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 403 Forbidden</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> ServiceUnavailable</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Reduce your request rate.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 503 Service Unavailable</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Server</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> SlowDown</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> Reduce your request rate.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 503 Slow Down</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Server</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> TemporaryRedirect</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> You are being redirected to the bucket
        ///                      while DNS updates.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 307 Moved Temporarily</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> TokenRefreshRequired</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The provided token must be
        ///                      refreshed.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> TooManyBuckets</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> You have attempted to create more buckets
        ///                      than allowed.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> UnexpectedContent</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> This request does not support
        ///                      content.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> UnresolvableGrantByEmailAddress</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The email address you provided does not
        ///                      match any account on record.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <i>Code:</i> UserKeyMustBeSpecified</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>Description:</i> The bucket POST must contain the specified
        ///                      field name. If it is specified, check the order of the fields.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>HTTP Status Code:</i> 400 Bad Request</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <i>SOAP Fault Code Prefix:</i> Client</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///          </ul>
        ///          <p></p>
        public let code: Swift.String?
        /// <p>The error key.</p>
        public let key: Swift.String?
        /// <p>The error message contains a generic description of the error condition in English. It
        ///          is intended for a human audience. Simple programs display the message directly to the end
        ///          user if they encounter an error condition they don't know how or don't care to handle.
        ///          Sophisticated programs with more exhaustive error handling and proper internationalization
        ///          are more likely to ignore the error message.</p>
        public let message: Swift.String?
        /// <p>The version ID of the error.</p>
        public let versionId: Swift.String?

        public init (
            code: Swift.String? = nil,
            key: Swift.String? = nil,
            message: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.code = code
            self.key = key
            self.message = message
            self.versionId = versionId
        }
    }

}

extension S3ClientTypes.ErrorDocument: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
    }
}

extension S3ClientTypes.ErrorDocument: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ErrorDocument(key: \(Swift.String(describing: key)))"}
}

extension S3ClientTypes.ErrorDocument: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>The error information.</p>
    public struct ErrorDocument: Swift.Equatable {
        /// <p>The object key name to use when a 4XX class error occurs.</p>
        ///          <important>
        ///             <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using
        ///          XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
        ///             XML related object key constraints</a>.</p>
        ///          </important>
        public let key: Swift.String?

        public init (
            key: Swift.String? = nil
        )
        {
            self.key = key
        }
    }

}

extension S3ClientTypes {
    /// <p>The bucket event for which to send notifications.</p>
    public enum Event: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case s3objectcreated
        case s3objectcreatedcompletemultipartupload
        case s3objectcreatedcopy
        case s3objectcreatedpost
        case s3objectcreatedput
        case s3objectremoved
        case s3objectremoveddelete
        case s3objectremoveddeletemarkercreated
        case s3objectrestore
        case s3objectrestorecompleted
        case s3objectrestorepost
        case s3reducedredundancylostobject
        case s3replication
        case s3replicationoperationfailedreplication
        case s3replicationoperationmissedthreshold
        case s3replicationoperationnottracked
        case s3replicationoperationreplicatedafterthreshold
        case sdkUnknown(Swift.String)

        public static var allCases: [Event] {
            return [
                .s3objectcreated,
                .s3objectcreatedcompletemultipartupload,
                .s3objectcreatedcopy,
                .s3objectcreatedpost,
                .s3objectcreatedput,
                .s3objectremoved,
                .s3objectremoveddelete,
                .s3objectremoveddeletemarkercreated,
                .s3objectrestore,
                .s3objectrestorecompleted,
                .s3objectrestorepost,
                .s3reducedredundancylostobject,
                .s3replication,
                .s3replicationoperationfailedreplication,
                .s3replicationoperationmissedthreshold,
                .s3replicationoperationnottracked,
                .s3replicationoperationreplicatedafterthreshold,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .s3objectcreated: return "s3:ObjectCreated:*"
            case .s3objectcreatedcompletemultipartupload: return "s3:ObjectCreated:CompleteMultipartUpload"
            case .s3objectcreatedcopy: return "s3:ObjectCreated:Copy"
            case .s3objectcreatedpost: return "s3:ObjectCreated:Post"
            case .s3objectcreatedput: return "s3:ObjectCreated:Put"
            case .s3objectremoved: return "s3:ObjectRemoved:*"
            case .s3objectremoveddelete: return "s3:ObjectRemoved:Delete"
            case .s3objectremoveddeletemarkercreated: return "s3:ObjectRemoved:DeleteMarkerCreated"
            case .s3objectrestore: return "s3:ObjectRestore:*"
            case .s3objectrestorecompleted: return "s3:ObjectRestore:Completed"
            case .s3objectrestorepost: return "s3:ObjectRestore:Post"
            case .s3reducedredundancylostobject: return "s3:ReducedRedundancyLostObject"
            case .s3replication: return "s3:Replication:*"
            case .s3replicationoperationfailedreplication: return "s3:Replication:OperationFailedReplication"
            case .s3replicationoperationmissedthreshold: return "s3:Replication:OperationMissedThreshold"
            case .s3replicationoperationnottracked: return "s3:Replication:OperationNotTracked"
            case .s3replicationoperationreplicatedafterthreshold: return "s3:Replication:OperationReplicatedAfterThreshold"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Event(rawValue: rawValue) ?? Event.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ExistingObjectReplication: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ExistingObjectReplicationStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension S3ClientTypes.ExistingObjectReplication: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExistingObjectReplication(status: \(Swift.String(describing: status)))"}
}

extension S3ClientTypes.ExistingObjectReplication: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Optional configuration to replicate existing source bucket objects. For more
    ///          information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-what-is-isnot-replicated.html#existing-object-replication">Replicating Existing Objects</a> in the <i>Amazon S3 User Guide</i>.
    ///       </p>
    public struct ExistingObjectReplication: Swift.Equatable {
        /// <p></p>
        public let status: S3ClientTypes.ExistingObjectReplicationStatus?

        public init (
            status: S3ClientTypes.ExistingObjectReplicationStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension S3ClientTypes {
    public enum ExistingObjectReplicationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ExistingObjectReplicationStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExistingObjectReplicationStatus(rawValue: rawValue) ?? ExistingObjectReplicationStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ExpirationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ExpirationStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExpirationStatus(rawValue: rawValue) ?? ExpirationStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ExpressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sql
        case sdkUnknown(Swift.String)

        public static var allCases: [ExpressionType] {
            return [
                .sql,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sql: return "SQL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExpressionType(rawValue: rawValue) ?? ExpressionType.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum FileHeaderInfo: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ignore
        case `none`
        case use
        case sdkUnknown(Swift.String)

        public static var allCases: [FileHeaderInfo] {
            return [
                .ignore,
                .none,
                .use,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .none: return "NONE"
            case .use: return "USE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileHeaderInfo(rawValue: rawValue) ?? FileHeaderInfo.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.FilterRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(S3ClientTypes.FilterRuleName.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension S3ClientTypes.FilterRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FilterRule(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension S3ClientTypes.FilterRule: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the Amazon S3 object key name to filter on and whether to filter on the suffix or
    ///          prefix of the key name.</p>
    public struct FilterRule: Swift.Equatable {
        /// <p>The object key name prefix or suffix identifying one or more objects to which the
        ///          filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and
        ///          suffixes are not supported. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring Event Notifications</a>
        ///          in the <i>Amazon S3 User Guide</i>.</p>
        public let name: S3ClientTypes.FilterRuleName?
        /// <p>The value that the filter searches for in object key names.</p>
        public let value: Swift.String?

        public init (
            name: S3ClientTypes.FilterRuleName? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension S3ClientTypes {
    public enum FilterRuleName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case prefix
        case suffix
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterRuleName] {
            return [
                .prefix,
                .suffix,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .prefix: return "prefix"
            case .suffix: return "suffix"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FilterRuleName(rawValue: rawValue) ?? FilterRuleName.sdkUnknown(rawValue)
        }
    }
}

extension GetBucketAccelerateConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketAccelerateConfigurationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketAccelerateConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketAccelerateConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketAccelerateConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketAccelerateConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketAccelerateConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketAccelerateConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketAccelerateConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketAccelerateConfigurationOutputError>
}

public struct GetBucketAccelerateConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketAccelerateConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketAccelerateConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketAccelerateConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "accelerate", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketAccelerateConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketAccelerateConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketAccelerateConfigurationOutputError>
}

public struct GetBucketAccelerateConfigurationInput: Swift.Equatable {
    /// <p>The name of the bucket for which the accelerate configuration is retrieved.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketAccelerateConfigurationInputBody: Swift.Equatable {
}

extension GetBucketAccelerateConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketAccelerateConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketAccelerateConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketAccelerateConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketAccelerateConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketAccelerateConfigurationOutputResponse(status: \(Swift.String(describing: status)))"}
}

extension GetBucketAccelerateConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBucketAccelerateConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
        } else {
            self.status = nil
        }
    }
}

public struct GetBucketAccelerateConfigurationOutputResponse: Swift.Equatable {
    /// <p>The accelerate configuration of the bucket.</p>
    public let status: S3ClientTypes.BucketAccelerateStatus?

    public init (
        status: S3ClientTypes.BucketAccelerateStatus? = nil
    )
    {
        self.status = status
    }
}

struct GetBucketAccelerateConfigurationOutputResponseBody: Swift.Equatable {
    public let status: S3ClientTypes.BucketAccelerateStatus?
}

extension GetBucketAccelerateConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketAccelerateStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension GetBucketAclInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketAclInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketAclInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketAclInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketAclInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketAclInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketAclOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketAclInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketAclOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketAclOutputError>
}

public struct GetBucketAclInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketAclInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketAclInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketAclOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "acl", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketAclInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketAclOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketAclOutputError>
}

public struct GetBucketAclInput: Swift.Equatable {
    /// <p>Specifies the S3 bucket whose ACL is being requested.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketAclInputBody: Swift.Equatable {
}

extension GetBucketAclInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketAclOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketAclOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketAclOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketAclOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketAclOutputResponse(grants: \(Swift.String(describing: grants)), owner: \(Swift.String(describing: owner)))"}
}

extension GetBucketAclOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBucketAclOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.grants = output.grants
            self.owner = output.owner
        } else {
            self.grants = nil
            self.owner = nil
        }
    }
}

public struct GetBucketAclOutputResponse: Swift.Equatable {
    /// <p>A list of grants.</p>
    public let grants: [S3ClientTypes.Grant]?
    /// <p>Container for the bucket owner's display name and ID.</p>
    public let owner: S3ClientTypes.Owner?

    public init (
        grants: [S3ClientTypes.Grant]? = nil,
        owner: S3ClientTypes.Owner? = nil
    )
    {
        self.grants = grants
        self.owner = owner
    }
}

struct GetBucketAclOutputResponseBody: Swift.Equatable {
    public let owner: S3ClientTypes.Owner?
    public let grants: [S3ClientTypes.Grant]?
}

extension GetBucketAclOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grants = "AccessControlList"
        case owner = "Owner"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        if containerValues.contains(.grants) {
            struct KeyVal0{struct Grant{}}
            let grantsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Grant>.CodingKeys.self, forKey: .grants)
            if let grantsWrappedContainer = grantsWrappedContainer {
                let grantsContainer = try grantsWrappedContainer.decodeIfPresent([S3ClientTypes.Grant].self, forKey: .member)
                var grantsBuffer:[S3ClientTypes.Grant]? = nil
                if let grantsContainer = grantsContainer {
                    grantsBuffer = [S3ClientTypes.Grant]()
                    for structureContainer0 in grantsContainer {
                        grantsBuffer?.append(structureContainer0)
                    }
                }
                grants = grantsBuffer
            } else {
                grants = []
            }
        } else {
            grants = nil
        }
    }
}

extension GetBucketAnalyticsConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketAnalyticsConfigurationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), id: \(Swift.String(describing: id)))"}
}

extension GetBucketAnalyticsConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketAnalyticsConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketAnalyticsConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketAnalyticsConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketAnalyticsConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketAnalyticsConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketAnalyticsConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketAnalyticsConfigurationOutputError>
}

public struct GetBucketAnalyticsConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketAnalyticsConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketAnalyticsConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketAnalyticsConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "analytics", value: nil))
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "GetBucketAnalyticsConfiguration"))
        if let id = input.operationInput.id {
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            input.builder.withQueryItem(idQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketAnalyticsConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketAnalyticsConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketAnalyticsConfigurationOutputError>
}

public struct GetBucketAnalyticsConfigurationInput: Swift.Equatable {
    /// <p>The name of the bucket from which an analytics configuration is retrieved.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The ID that identifies the analytics configuration.</p>
    public let id: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

struct GetBucketAnalyticsConfigurationInputBody: Swift.Equatable {
}

extension GetBucketAnalyticsConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketAnalyticsConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketAnalyticsConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketAnalyticsConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketAnalyticsConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketAnalyticsConfigurationOutputResponse(analyticsConfiguration: \(Swift.String(describing: analyticsConfiguration)))"}
}

extension GetBucketAnalyticsConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.AnalyticsConfiguration = try responseDecoder.decode(responseBody: data)
                self.analyticsConfiguration = output
            } else {
                self.analyticsConfiguration = nil
            }
        } else {
            self.analyticsConfiguration = nil
        }
    }
}

public struct GetBucketAnalyticsConfigurationOutputResponse: Swift.Equatable {
    /// <p>The configuration and any analyses for the analytics filter.</p>
    public let analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration?

    public init (
        analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration? = nil
    )
    {
        self.analyticsConfiguration = analyticsConfiguration
    }
}

struct GetBucketAnalyticsConfigurationOutputResponseBody: Swift.Equatable {
    public let analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration?
}

extension GetBucketAnalyticsConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsConfiguration = "AnalyticsConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analyticsConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AnalyticsConfiguration.self, forKey: .analyticsConfiguration)
        analyticsConfiguration = analyticsConfigurationDecoded
    }
}

extension GetBucketCorsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketCorsInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketCorsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketCorsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketCorsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketCorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketCorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketCorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketCorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketCorsOutputError>
}

public struct GetBucketCorsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketCorsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketCorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketCorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "cors", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketCorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketCorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketCorsOutputError>
}

public struct GetBucketCorsInput: Swift.Equatable {
    /// <p>The bucket name for which to get the cors configuration.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketCorsInputBody: Swift.Equatable {
}

extension GetBucketCorsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketCorsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketCorsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketCorsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketCorsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketCorsOutputResponse(cORSRules: \(Swift.String(describing: cORSRules)))"}
}

extension GetBucketCorsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBucketCorsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cORSRules = output.cORSRules
        } else {
            self.cORSRules = nil
        }
    }
}

public struct GetBucketCorsOutputResponse: Swift.Equatable {
    /// <p>A set of origins and methods (cross-origin access that you want to allow). You can add
    ///          up to 100 rules to the configuration.</p>
    public let cORSRules: [S3ClientTypes.CORSRule]?

    public init (
        cORSRules: [S3ClientTypes.CORSRule]? = nil
    )
    {
        self.cORSRules = cORSRules
    }
}

struct GetBucketCorsOutputResponseBody: Swift.Equatable {
    public let cORSRules: [S3ClientTypes.CORSRule]?
}

extension GetBucketCorsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cORSRules = "CORSRule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.cORSRules) {
            let cORSRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .cORSRules)
            if cORSRulesWrappedContainer != nil {
                let cORSRulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.CORSRule].self, forKey: .cORSRules)
                var cORSRulesBuffer:[S3ClientTypes.CORSRule]? = nil
                if let cORSRulesContainer = cORSRulesContainer {
                    cORSRulesBuffer = [S3ClientTypes.CORSRule]()
                    for structureContainer0 in cORSRulesContainer {
                        cORSRulesBuffer?.append(structureContainer0)
                    }
                }
                cORSRules = cORSRulesBuffer
            } else {
                cORSRules = []
            }
        } else {
            cORSRules = nil
        }
    }
}

extension GetBucketEncryptionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketEncryptionInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketEncryptionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketEncryptionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketEncryptionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketEncryptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketEncryptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketEncryptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketEncryptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketEncryptionOutputError>
}

public struct GetBucketEncryptionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketEncryptionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketEncryptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketEncryptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "encryption", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketEncryptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketEncryptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketEncryptionOutputError>
}

public struct GetBucketEncryptionInput: Swift.Equatable {
    /// <p>The name of the bucket from which the server-side encryption configuration is
    ///          retrieved.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketEncryptionInputBody: Swift.Equatable {
}

extension GetBucketEncryptionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketEncryptionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketEncryptionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketEncryptionOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketEncryptionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketEncryptionOutputResponse(serverSideEncryptionConfiguration: \(Swift.String(describing: serverSideEncryptionConfiguration)))"}
}

extension GetBucketEncryptionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.ServerSideEncryptionConfiguration = try responseDecoder.decode(responseBody: data)
                self.serverSideEncryptionConfiguration = output
            } else {
                self.serverSideEncryptionConfiguration = nil
            }
        } else {
            self.serverSideEncryptionConfiguration = nil
        }
    }
}

public struct GetBucketEncryptionOutputResponse: Swift.Equatable {
    /// <p>Specifies the default server-side-encryption configuration.</p>
    public let serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration?

    public init (
        serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration? = nil
    )
    {
        self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
    }
}

struct GetBucketEncryptionOutputResponseBody: Swift.Equatable {
    public let serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration?
}

extension GetBucketEncryptionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverSideEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ServerSideEncryptionConfiguration.self, forKey: .serverSideEncryptionConfiguration)
        serverSideEncryptionConfiguration = serverSideEncryptionConfigurationDecoded
    }
}

extension GetBucketIntelligentTieringConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketIntelligentTieringConfigurationInput(bucket: \(Swift.String(describing: bucket)), id: \(Swift.String(describing: id)))"}
}

extension GetBucketIntelligentTieringConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketIntelligentTieringConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketIntelligentTieringConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketIntelligentTieringConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketIntelligentTieringConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketIntelligentTieringConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketIntelligentTieringConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketIntelligentTieringConfigurationOutputError>
}

public struct GetBucketIntelligentTieringConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketIntelligentTieringConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketIntelligentTieringConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketIntelligentTieringConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "intelligent-tiering", value: nil))
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "GetBucketIntelligentTieringConfiguration"))
        if let id = input.operationInput.id {
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            input.builder.withQueryItem(idQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketIntelligentTieringConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketIntelligentTieringConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketIntelligentTieringConfigurationOutputError>
}

public struct GetBucketIntelligentTieringConfigurationInput: Swift.Equatable {
    /// <p>The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.</p>
    public let bucket: Swift.String?
    /// <p>The ID used to identify the S3 Intelligent-Tiering configuration.</p>
    public let id: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.id = id
    }
}

struct GetBucketIntelligentTieringConfigurationInputBody: Swift.Equatable {
}

extension GetBucketIntelligentTieringConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketIntelligentTieringConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketIntelligentTieringConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketIntelligentTieringConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketIntelligentTieringConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketIntelligentTieringConfigurationOutputResponse(intelligentTieringConfiguration: \(Swift.String(describing: intelligentTieringConfiguration)))"}
}

extension GetBucketIntelligentTieringConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.IntelligentTieringConfiguration = try responseDecoder.decode(responseBody: data)
                self.intelligentTieringConfiguration = output
            } else {
                self.intelligentTieringConfiguration = nil
            }
        } else {
            self.intelligentTieringConfiguration = nil
        }
    }
}

public struct GetBucketIntelligentTieringConfigurationOutputResponse: Swift.Equatable {
    /// <p>Container for S3 Intelligent-Tiering configuration.</p>
    public let intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration?

    public init (
        intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration? = nil
    )
    {
        self.intelligentTieringConfiguration = intelligentTieringConfiguration
    }
}

struct GetBucketIntelligentTieringConfigurationOutputResponseBody: Swift.Equatable {
    public let intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration?
}

extension GetBucketIntelligentTieringConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intelligentTieringConfiguration = "IntelligentTieringConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intelligentTieringConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IntelligentTieringConfiguration.self, forKey: .intelligentTieringConfiguration)
        intelligentTieringConfiguration = intelligentTieringConfigurationDecoded
    }
}

extension GetBucketInventoryConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketInventoryConfigurationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), id: \(Swift.String(describing: id)))"}
}

extension GetBucketInventoryConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketInventoryConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketInventoryConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketInventoryConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketInventoryConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketInventoryConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketInventoryConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketInventoryConfigurationOutputError>
}

public struct GetBucketInventoryConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketInventoryConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketInventoryConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketInventoryConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "inventory", value: nil))
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "GetBucketInventoryConfiguration"))
        if let id = input.operationInput.id {
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            input.builder.withQueryItem(idQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketInventoryConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketInventoryConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketInventoryConfigurationOutputError>
}

public struct GetBucketInventoryConfigurationInput: Swift.Equatable {
    /// <p>The name of the bucket containing the inventory configuration to retrieve.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The ID used to identify the inventory configuration.</p>
    public let id: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

struct GetBucketInventoryConfigurationInputBody: Swift.Equatable {
}

extension GetBucketInventoryConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketInventoryConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketInventoryConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketInventoryConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketInventoryConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketInventoryConfigurationOutputResponse(inventoryConfiguration: \(Swift.String(describing: inventoryConfiguration)))"}
}

extension GetBucketInventoryConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.InventoryConfiguration = try responseDecoder.decode(responseBody: data)
                self.inventoryConfiguration = output
            } else {
                self.inventoryConfiguration = nil
            }
        } else {
            self.inventoryConfiguration = nil
        }
    }
}

public struct GetBucketInventoryConfigurationOutputResponse: Swift.Equatable {
    /// <p>Specifies the inventory configuration.</p>
    public let inventoryConfiguration: S3ClientTypes.InventoryConfiguration?

    public init (
        inventoryConfiguration: S3ClientTypes.InventoryConfiguration? = nil
    )
    {
        self.inventoryConfiguration = inventoryConfiguration
    }
}

struct GetBucketInventoryConfigurationOutputResponseBody: Swift.Equatable {
    public let inventoryConfiguration: S3ClientTypes.InventoryConfiguration?
}

extension GetBucketInventoryConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inventoryConfiguration = "InventoryConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inventoryConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryConfiguration.self, forKey: .inventoryConfiguration)
        inventoryConfiguration = inventoryConfigurationDecoded
    }
}

extension GetBucketLifecycleConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketLifecycleConfigurationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketLifecycleConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketLifecycleConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketLifecycleConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketLifecycleConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketLifecycleConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketLifecycleConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketLifecycleConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketLifecycleConfigurationOutputError>
}

public struct GetBucketLifecycleConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketLifecycleConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketLifecycleConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketLifecycleConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "lifecycle", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketLifecycleConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketLifecycleConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketLifecycleConfigurationOutputError>
}

public struct GetBucketLifecycleConfigurationInput: Swift.Equatable {
    /// <p>The name of the bucket for which to get the lifecycle information.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketLifecycleConfigurationInputBody: Swift.Equatable {
}

extension GetBucketLifecycleConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketLifecycleConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketLifecycleConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketLifecycleConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketLifecycleConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketLifecycleConfigurationOutputResponse(rules: \(Swift.String(describing: rules)))"}
}

extension GetBucketLifecycleConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBucketLifecycleConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.rules = output.rules
        } else {
            self.rules = nil
        }
    }
}

public struct GetBucketLifecycleConfigurationOutputResponse: Swift.Equatable {
    /// <p>Container for a lifecycle rule.</p>
    public let rules: [S3ClientTypes.LifecycleRule]?

    public init (
        rules: [S3ClientTypes.LifecycleRule]? = nil
    )
    {
        self.rules = rules
    }
}

struct GetBucketLifecycleConfigurationOutputResponseBody: Swift.Equatable {
    public let rules: [S3ClientTypes.LifecycleRule]?
}

extension GetBucketLifecycleConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.rules) {
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .rules)
            if rulesWrappedContainer != nil {
                let rulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.LifecycleRule].self, forKey: .rules)
                var rulesBuffer:[S3ClientTypes.LifecycleRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [S3ClientTypes.LifecycleRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}

extension GetBucketLocationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketLocationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketLocationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketLocationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketLocationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketLocationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketLocationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketLocationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketLocationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketLocationOutputError>
}

public struct GetBucketLocationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketLocationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketLocationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketLocationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "location", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketLocationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketLocationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketLocationOutputError>
}

public struct GetBucketLocationInput: Swift.Equatable {
    /// <p>The name of the bucket for which to get the location.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketLocationInputBody: Swift.Equatable {
}

extension GetBucketLocationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketLocationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketLocationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketLocationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketLocationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketLocationOutputResponse(locationConstraint: \(Swift.String(describing: locationConstraint)))"}
}

extension GetBucketLocationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBucketLocationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationConstraint = output.locationConstraint
        } else {
            self.locationConstraint = nil
        }
    }
}

public struct GetBucketLocationOutputResponse: Swift.Equatable {
    /// <p>Specifies the Region where the bucket resides. For a list of all the Amazon S3 supported
    ///          location constraints by Region, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions and Endpoints</a>.
    ///          Buckets in Region <code>us-east-1</code> have a LocationConstraint of
    ///          <code>null</code>.</p>
    public let locationConstraint: S3ClientTypes.BucketLocationConstraint?

    public init (
        locationConstraint: S3ClientTypes.BucketLocationConstraint? = nil
    )
    {
        self.locationConstraint = locationConstraint
    }
}

struct GetBucketLocationOutputResponseBody: Swift.Equatable {
    public let locationConstraint: S3ClientTypes.BucketLocationConstraint?
}

extension GetBucketLocationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationConstraint = "LocationConstraint"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationConstraintDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketLocationConstraint.self, forKey: .locationConstraint)
        locationConstraint = locationConstraintDecoded
    }
}

extension GetBucketLoggingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketLoggingInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketLoggingInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketLoggingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketLoggingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketLoggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketLoggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketLoggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketLoggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketLoggingOutputError>
}

public struct GetBucketLoggingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketLoggingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketLoggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketLoggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "logging", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketLoggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketLoggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketLoggingOutputError>
}

public struct GetBucketLoggingInput: Swift.Equatable {
    /// <p>The bucket name for which to get the logging information.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketLoggingInputBody: Swift.Equatable {
}

extension GetBucketLoggingInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketLoggingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketLoggingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketLoggingOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketLoggingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketLoggingOutputResponse(loggingEnabled: \(Swift.String(describing: loggingEnabled)))"}
}

extension GetBucketLoggingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBucketLoggingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loggingEnabled = output.loggingEnabled
        } else {
            self.loggingEnabled = nil
        }
    }
}

public struct GetBucketLoggingOutputResponse: Swift.Equatable {
    /// <p>Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys
    ///          for a bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html">PUT Bucket logging</a> in the
    ///             <i>Amazon S3 API Reference</i>.</p>
    public let loggingEnabled: S3ClientTypes.LoggingEnabled?

    public init (
        loggingEnabled: S3ClientTypes.LoggingEnabled? = nil
    )
    {
        self.loggingEnabled = loggingEnabled
    }
}

struct GetBucketLoggingOutputResponseBody: Swift.Equatable {
    public let loggingEnabled: S3ClientTypes.LoggingEnabled?
}

extension GetBucketLoggingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingEnabled = "LoggingEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingEnabledDecoded = try containerValues.decodeIfPresent(S3ClientTypes.LoggingEnabled.self, forKey: .loggingEnabled)
        loggingEnabled = loggingEnabledDecoded
    }
}

extension GetBucketMetricsConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketMetricsConfigurationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), id: \(Swift.String(describing: id)))"}
}

extension GetBucketMetricsConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketMetricsConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketMetricsConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketMetricsConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketMetricsConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketMetricsConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketMetricsConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketMetricsConfigurationOutputError>
}

public struct GetBucketMetricsConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketMetricsConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketMetricsConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketMetricsConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "metrics", value: nil))
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "GetBucketMetricsConfiguration"))
        if let id = input.operationInput.id {
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            input.builder.withQueryItem(idQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketMetricsConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketMetricsConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketMetricsConfigurationOutputError>
}

public struct GetBucketMetricsConfigurationInput: Swift.Equatable {
    /// <p>The name of the bucket containing the metrics configuration to retrieve.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The ID used to identify the metrics configuration.</p>
    public let id: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

struct GetBucketMetricsConfigurationInputBody: Swift.Equatable {
}

extension GetBucketMetricsConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketMetricsConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketMetricsConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketMetricsConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketMetricsConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketMetricsConfigurationOutputResponse(metricsConfiguration: \(Swift.String(describing: metricsConfiguration)))"}
}

extension GetBucketMetricsConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.MetricsConfiguration = try responseDecoder.decode(responseBody: data)
                self.metricsConfiguration = output
            } else {
                self.metricsConfiguration = nil
            }
        } else {
            self.metricsConfiguration = nil
        }
    }
}

public struct GetBucketMetricsConfigurationOutputResponse: Swift.Equatable {
    /// <p>Specifies the metrics configuration.</p>
    public let metricsConfiguration: S3ClientTypes.MetricsConfiguration?

    public init (
        metricsConfiguration: S3ClientTypes.MetricsConfiguration? = nil
    )
    {
        self.metricsConfiguration = metricsConfiguration
    }
}

struct GetBucketMetricsConfigurationOutputResponseBody: Swift.Equatable {
    public let metricsConfiguration: S3ClientTypes.MetricsConfiguration?
}

extension GetBucketMetricsConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricsConfiguration = "MetricsConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricsConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.MetricsConfiguration.self, forKey: .metricsConfiguration)
        metricsConfiguration = metricsConfigurationDecoded
    }
}

extension GetBucketNotificationConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketNotificationConfigurationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketNotificationConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketNotificationConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketNotificationConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketNotificationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketNotificationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketNotificationConfigurationOutputError>
}

public struct GetBucketNotificationConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketNotificationConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketNotificationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "notification", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketNotificationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketNotificationConfigurationOutputError>
}

public struct GetBucketNotificationConfigurationInput: Swift.Equatable {
    /// <p>The name of the bucket for which to get the notification configuration.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketNotificationConfigurationInputBody: Swift.Equatable {
}

extension GetBucketNotificationConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketNotificationConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketNotificationConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketNotificationConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketNotificationConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketNotificationConfigurationOutputResponse(lambdaFunctionConfigurations: \(Swift.String(describing: lambdaFunctionConfigurations)), queueConfigurations: \(Swift.String(describing: queueConfigurations)), topicConfigurations: \(Swift.String(describing: topicConfigurations)))"}
}

extension GetBucketNotificationConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBucketNotificationConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lambdaFunctionConfigurations = output.lambdaFunctionConfigurations
            self.queueConfigurations = output.queueConfigurations
            self.topicConfigurations = output.topicConfigurations
        } else {
            self.lambdaFunctionConfigurations = nil
            self.queueConfigurations = nil
            self.topicConfigurations = nil
        }
    }
}

/// <p>A container for specifying the notification configuration of the bucket. If this element
///          is empty, notifications are turned off for the bucket.</p>
public struct GetBucketNotificationConfigurationOutputResponse: Swift.Equatable {
    /// <p>Describes the AWS Lambda functions to invoke and the events for which to invoke
    ///          them.</p>
    public let lambdaFunctionConfigurations: [S3ClientTypes.LambdaFunctionConfiguration]?
    /// <p>The Amazon Simple Queue Service queues to publish messages to and the events for which
    ///          to publish messages.</p>
    public let queueConfigurations: [S3ClientTypes.QueueConfiguration]?
    /// <p>The topic to which notifications are sent and the events for which notifications are
    ///          generated.</p>
    public let topicConfigurations: [S3ClientTypes.TopicConfiguration]?

    public init (
        lambdaFunctionConfigurations: [S3ClientTypes.LambdaFunctionConfiguration]? = nil,
        queueConfigurations: [S3ClientTypes.QueueConfiguration]? = nil,
        topicConfigurations: [S3ClientTypes.TopicConfiguration]? = nil
    )
    {
        self.lambdaFunctionConfigurations = lambdaFunctionConfigurations
        self.queueConfigurations = queueConfigurations
        self.topicConfigurations = topicConfigurations
    }
}

struct GetBucketNotificationConfigurationOutputResponseBody: Swift.Equatable {
    public let topicConfigurations: [S3ClientTypes.TopicConfiguration]?
    public let queueConfigurations: [S3ClientTypes.QueueConfiguration]?
    public let lambdaFunctionConfigurations: [S3ClientTypes.LambdaFunctionConfiguration]?
}

extension GetBucketNotificationConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lambdaFunctionConfigurations = "CloudFunctionConfiguration"
        case queueConfigurations = "QueueConfiguration"
        case topicConfigurations = "TopicConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.topicConfigurations) {
            let topicConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .topicConfigurations)
            if topicConfigurationsWrappedContainer != nil {
                let topicConfigurationsContainer = try containerValues.decodeIfPresent([S3ClientTypes.TopicConfiguration].self, forKey: .topicConfigurations)
                var topicConfigurationsBuffer:[S3ClientTypes.TopicConfiguration]? = nil
                if let topicConfigurationsContainer = topicConfigurationsContainer {
                    topicConfigurationsBuffer = [S3ClientTypes.TopicConfiguration]()
                    for structureContainer0 in topicConfigurationsContainer {
                        topicConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                topicConfigurations = topicConfigurationsBuffer
            } else {
                topicConfigurations = []
            }
        } else {
            topicConfigurations = nil
        }
        if containerValues.contains(.queueConfigurations) {
            let queueConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .queueConfigurations)
            if queueConfigurationsWrappedContainer != nil {
                let queueConfigurationsContainer = try containerValues.decodeIfPresent([S3ClientTypes.QueueConfiguration].self, forKey: .queueConfigurations)
                var queueConfigurationsBuffer:[S3ClientTypes.QueueConfiguration]? = nil
                if let queueConfigurationsContainer = queueConfigurationsContainer {
                    queueConfigurationsBuffer = [S3ClientTypes.QueueConfiguration]()
                    for structureContainer0 in queueConfigurationsContainer {
                        queueConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                queueConfigurations = queueConfigurationsBuffer
            } else {
                queueConfigurations = []
            }
        } else {
            queueConfigurations = nil
        }
        if containerValues.contains(.lambdaFunctionConfigurations) {
            let lambdaFunctionConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .lambdaFunctionConfigurations)
            if lambdaFunctionConfigurationsWrappedContainer != nil {
                let lambdaFunctionConfigurationsContainer = try containerValues.decodeIfPresent([S3ClientTypes.LambdaFunctionConfiguration].self, forKey: .lambdaFunctionConfigurations)
                var lambdaFunctionConfigurationsBuffer:[S3ClientTypes.LambdaFunctionConfiguration]? = nil
                if let lambdaFunctionConfigurationsContainer = lambdaFunctionConfigurationsContainer {
                    lambdaFunctionConfigurationsBuffer = [S3ClientTypes.LambdaFunctionConfiguration]()
                    for structureContainer0 in lambdaFunctionConfigurationsContainer {
                        lambdaFunctionConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                lambdaFunctionConfigurations = lambdaFunctionConfigurationsBuffer
            } else {
                lambdaFunctionConfigurations = []
            }
        } else {
            lambdaFunctionConfigurations = nil
        }
    }
}

extension GetBucketOwnershipControlsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketOwnershipControlsInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketOwnershipControlsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketOwnershipControlsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketOwnershipControlsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketOwnershipControlsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketOwnershipControlsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketOwnershipControlsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketOwnershipControlsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketOwnershipControlsOutputError>
}

public struct GetBucketOwnershipControlsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketOwnershipControlsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketOwnershipControlsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketOwnershipControlsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "ownershipControls", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketOwnershipControlsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketOwnershipControlsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketOwnershipControlsOutputError>
}

public struct GetBucketOwnershipControlsInput: Swift.Equatable {
    /// <p>The name of the Amazon S3 bucket whose <code>OwnershipControls</code> you want to retrieve.
    ///       </p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketOwnershipControlsInputBody: Swift.Equatable {
}

extension GetBucketOwnershipControlsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketOwnershipControlsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketOwnershipControlsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketOwnershipControlsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketOwnershipControlsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketOwnershipControlsOutputResponse(ownershipControls: \(Swift.String(describing: ownershipControls)))"}
}

extension GetBucketOwnershipControlsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.OwnershipControls = try responseDecoder.decode(responseBody: data)
                self.ownershipControls = output
            } else {
                self.ownershipControls = nil
            }
        } else {
            self.ownershipControls = nil
        }
    }
}

public struct GetBucketOwnershipControlsOutputResponse: Swift.Equatable {
    /// <p>The <code>OwnershipControls</code> (BucketOwnerPreferred or ObjectWriter) currently in
    ///          effect for this Amazon S3 bucket.</p>
    public let ownershipControls: S3ClientTypes.OwnershipControls?

    public init (
        ownershipControls: S3ClientTypes.OwnershipControls? = nil
    )
    {
        self.ownershipControls = ownershipControls
    }
}

struct GetBucketOwnershipControlsOutputResponseBody: Swift.Equatable {
    public let ownershipControls: S3ClientTypes.OwnershipControls?
}

extension GetBucketOwnershipControlsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ownershipControls = "OwnershipControls"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownershipControlsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.OwnershipControls.self, forKey: .ownershipControls)
        ownershipControls = ownershipControlsDecoded
    }
}

extension GetBucketPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketPolicyInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketPolicyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketPolicyOutputError>
}

public struct GetBucketPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "policy", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketPolicyOutputError>
}

public struct GetBucketPolicyInput: Swift.Equatable {
    /// <p>The bucket name for which to get the bucket policy.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketPolicyInputBody: Swift.Equatable {
}

extension GetBucketPolicyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketPolicyOutputResponse(policy: \(Swift.String(describing: policy)))"}
}

extension GetBucketPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let output = Swift.String(data: data, encoding: .utf8) {
                self.policy = output
            } else {
                self.policy = nil
            }
        } else {
            self.policy = nil
        }
    }
}

public struct GetBucketPolicyOutputResponse: Swift.Equatable {
    /// <p>The bucket policy as a JSON document.</p>
    public let policy: Swift.String?

    public init (
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

struct GetBucketPolicyOutputResponseBody: Swift.Equatable {
    public let policy: Swift.String?
}

extension GetBucketPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension GetBucketPolicyStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketPolicyStatusInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketPolicyStatusInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketPolicyStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketPolicyStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketPolicyStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketPolicyStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketPolicyStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketPolicyStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketPolicyStatusOutputError>
}

public struct GetBucketPolicyStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketPolicyStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketPolicyStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketPolicyStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "policyStatus", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketPolicyStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketPolicyStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketPolicyStatusOutputError>
}

public struct GetBucketPolicyStatusInput: Swift.Equatable {
    /// <p>The name of the Amazon S3 bucket whose policy status you want to retrieve.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketPolicyStatusInputBody: Swift.Equatable {
}

extension GetBucketPolicyStatusInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketPolicyStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketPolicyStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketPolicyStatusOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketPolicyStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketPolicyStatusOutputResponse(policyStatus: \(Swift.String(describing: policyStatus)))"}
}

extension GetBucketPolicyStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.PolicyStatus = try responseDecoder.decode(responseBody: data)
                self.policyStatus = output
            } else {
                self.policyStatus = nil
            }
        } else {
            self.policyStatus = nil
        }
    }
}

public struct GetBucketPolicyStatusOutputResponse: Swift.Equatable {
    /// <p>The policy status for the specified bucket.</p>
    public let policyStatus: S3ClientTypes.PolicyStatus?

    public init (
        policyStatus: S3ClientTypes.PolicyStatus? = nil
    )
    {
        self.policyStatus = policyStatus
    }
}

struct GetBucketPolicyStatusOutputResponseBody: Swift.Equatable {
    public let policyStatus: S3ClientTypes.PolicyStatus?
}

extension GetBucketPolicyStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyStatus = "PolicyStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyStatusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.PolicyStatus.self, forKey: .policyStatus)
        policyStatus = policyStatusDecoded
    }
}

extension GetBucketReplicationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketReplicationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketReplicationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketReplicationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketReplicationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketReplicationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketReplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketReplicationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketReplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketReplicationOutputError>
}

public struct GetBucketReplicationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketReplicationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketReplicationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketReplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "replication", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketReplicationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketReplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketReplicationOutputError>
}

public struct GetBucketReplicationInput: Swift.Equatable {
    /// <p>The bucket name for which to get the replication information.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketReplicationInputBody: Swift.Equatable {
}

extension GetBucketReplicationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketReplicationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketReplicationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketReplicationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketReplicationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketReplicationOutputResponse(replicationConfiguration: \(Swift.String(describing: replicationConfiguration)))"}
}

extension GetBucketReplicationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.ReplicationConfiguration = try responseDecoder.decode(responseBody: data)
                self.replicationConfiguration = output
            } else {
                self.replicationConfiguration = nil
            }
        } else {
            self.replicationConfiguration = nil
        }
    }
}

public struct GetBucketReplicationOutputResponse: Swift.Equatable {
    /// <p>A container for replication rules. You can add up to 1,000 rules. The maximum size of a
    ///          replication configuration is 2 MB.</p>
    public let replicationConfiguration: S3ClientTypes.ReplicationConfiguration?

    public init (
        replicationConfiguration: S3ClientTypes.ReplicationConfiguration? = nil
    )
    {
        self.replicationConfiguration = replicationConfiguration
    }
}

struct GetBucketReplicationOutputResponseBody: Swift.Equatable {
    public let replicationConfiguration: S3ClientTypes.ReplicationConfiguration?
}

extension GetBucketReplicationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationConfiguration = "ReplicationConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationConfiguration.self, forKey: .replicationConfiguration)
        replicationConfiguration = replicationConfigurationDecoded
    }
}

extension GetBucketRequestPaymentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketRequestPaymentInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketRequestPaymentInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketRequestPaymentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketRequestPaymentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketRequestPaymentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketRequestPaymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketRequestPaymentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketRequestPaymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketRequestPaymentOutputError>
}

public struct GetBucketRequestPaymentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketRequestPaymentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketRequestPaymentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketRequestPaymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "requestPayment", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketRequestPaymentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketRequestPaymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketRequestPaymentOutputError>
}

public struct GetBucketRequestPaymentInput: Swift.Equatable {
    /// <p>The name of the bucket for which to get the payment request configuration</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketRequestPaymentInputBody: Swift.Equatable {
}

extension GetBucketRequestPaymentInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketRequestPaymentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketRequestPaymentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketRequestPaymentOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketRequestPaymentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketRequestPaymentOutputResponse(payer: \(Swift.String(describing: payer)))"}
}

extension GetBucketRequestPaymentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBucketRequestPaymentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.payer = output.payer
        } else {
            self.payer = nil
        }
    }
}

public struct GetBucketRequestPaymentOutputResponse: Swift.Equatable {
    /// <p>Specifies who pays for the download and request fees.</p>
    public let payer: S3ClientTypes.Payer?

    public init (
        payer: S3ClientTypes.Payer? = nil
    )
    {
        self.payer = payer
    }
}

struct GetBucketRequestPaymentOutputResponseBody: Swift.Equatable {
    public let payer: S3ClientTypes.Payer?
}

extension GetBucketRequestPaymentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case payer = "Payer"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let payerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Payer.self, forKey: .payer)
        payer = payerDecoded
    }
}

extension GetBucketTaggingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketTaggingInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketTaggingInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketTaggingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketTaggingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketTaggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketTaggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketTaggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketTaggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketTaggingOutputError>
}

public struct GetBucketTaggingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketTaggingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketTaggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketTaggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "tagging", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketTaggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketTaggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketTaggingOutputError>
}

public struct GetBucketTaggingInput: Swift.Equatable {
    /// <p>The name of the bucket for which to get the tagging information.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketTaggingInputBody: Swift.Equatable {
}

extension GetBucketTaggingInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketTaggingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketTaggingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketTaggingOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketTaggingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketTaggingOutputResponse(tagSet: \(Swift.String(describing: tagSet)))"}
}

extension GetBucketTaggingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBucketTaggingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tagSet = output.tagSet
        } else {
            self.tagSet = nil
        }
    }
}

public struct GetBucketTaggingOutputResponse: Swift.Equatable {
    /// <p>Contains the tag set.</p>
    public let tagSet: [S3ClientTypes.Tag]?

    public init (
        tagSet: [S3ClientTypes.Tag]? = nil
    )
    {
        self.tagSet = tagSet
    }
}

struct GetBucketTaggingOutputResponseBody: Swift.Equatable {
    public let tagSet: [S3ClientTypes.Tag]?
}

extension GetBucketTaggingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagSet = "TagSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.tagSet) {
            struct KeyVal0{struct Tag{}}
            let tagSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tagSet)
            if let tagSetWrappedContainer = tagSetWrappedContainer {
                let tagSetContainer = try tagSetWrappedContainer.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .member)
                var tagSetBuffer:[S3ClientTypes.Tag]? = nil
                if let tagSetContainer = tagSetContainer {
                    tagSetBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagSetContainer {
                        tagSetBuffer?.append(structureContainer0)
                    }
                }
                tagSet = tagSetBuffer
            } else {
                tagSet = []
            }
        } else {
            tagSet = nil
        }
    }
}

extension GetBucketVersioningInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketVersioningInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketVersioningInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketVersioningInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketVersioningInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketVersioningInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketVersioningOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketVersioningInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketVersioningOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketVersioningOutputError>
}

public struct GetBucketVersioningInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketVersioningInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketVersioningInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketVersioningOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "versioning", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketVersioningInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketVersioningOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketVersioningOutputError>
}

public struct GetBucketVersioningInput: Swift.Equatable {
    /// <p>The name of the bucket for which to get the versioning information.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketVersioningInputBody: Swift.Equatable {
}

extension GetBucketVersioningInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketVersioningOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketVersioningOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketVersioningOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketVersioningOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketVersioningOutputResponse(mFADelete: \(Swift.String(describing: mFADelete)), status: \(Swift.String(describing: status)))"}
}

extension GetBucketVersioningOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBucketVersioningOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mFADelete = output.mFADelete
            self.status = output.status
        } else {
            self.mFADelete = nil
            self.status = nil
        }
    }
}

public struct GetBucketVersioningOutputResponse: Swift.Equatable {
    /// <p>Specifies whether MFA delete is enabled in the bucket versioning configuration. This
    ///          element is only returned if the bucket has been configured with MFA delete. If the bucket
    ///          has never been so configured, this element is not returned.</p>
    public let mFADelete: S3ClientTypes.MFADeleteStatus?
    /// <p>The versioning state of the bucket.</p>
    public let status: S3ClientTypes.BucketVersioningStatus?

    public init (
        mFADelete: S3ClientTypes.MFADeleteStatus? = nil,
        status: S3ClientTypes.BucketVersioningStatus? = nil
    )
    {
        self.mFADelete = mFADelete
        self.status = status
    }
}

struct GetBucketVersioningOutputResponseBody: Swift.Equatable {
    public let status: S3ClientTypes.BucketVersioningStatus?
    public let mFADelete: S3ClientTypes.MFADeleteStatus?
}

extension GetBucketVersioningOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mFADelete = "MfaDelete"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketVersioningStatus.self, forKey: .status)
        status = statusDecoded
        let mFADeleteDecoded = try containerValues.decodeIfPresent(S3ClientTypes.MFADeleteStatus.self, forKey: .mFADelete)
        mFADelete = mFADeleteDecoded
    }
}

extension GetBucketWebsiteInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketWebsiteInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetBucketWebsiteInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBucketWebsiteInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketWebsiteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketWebsiteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketWebsiteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketWebsiteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketWebsiteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketWebsiteOutputError>
}

public struct GetBucketWebsiteInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBucketWebsiteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBucketWebsiteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBucketWebsiteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "website", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBucketWebsiteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBucketWebsiteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBucketWebsiteOutputError>
}

public struct GetBucketWebsiteInput: Swift.Equatable {
    /// <p>The bucket name for which to get the website configuration.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetBucketWebsiteInputBody: Swift.Equatable {
}

extension GetBucketWebsiteInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBucketWebsiteOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetBucketWebsiteOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBucketWebsiteOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBucketWebsiteOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBucketWebsiteOutputResponse(errorDocument: \(Swift.String(describing: errorDocument)), indexDocument: \(Swift.String(describing: indexDocument)), redirectAllRequestsTo: \(Swift.String(describing: redirectAllRequestsTo)), routingRules: \(Swift.String(describing: routingRules)))"}
}

extension GetBucketWebsiteOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBucketWebsiteOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errorDocument = output.errorDocument
            self.indexDocument = output.indexDocument
            self.redirectAllRequestsTo = output.redirectAllRequestsTo
            self.routingRules = output.routingRules
        } else {
            self.errorDocument = nil
            self.indexDocument = nil
            self.redirectAllRequestsTo = nil
            self.routingRules = nil
        }
    }
}

public struct GetBucketWebsiteOutputResponse: Swift.Equatable {
    /// <p>The object key name of the website error document to use for 4XX class errors.</p>
    public let errorDocument: S3ClientTypes.ErrorDocument?
    /// <p>The name of the index document for the website (for example
    ///          <code>index.html</code>).</p>
    public let indexDocument: S3ClientTypes.IndexDocument?
    /// <p>Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3
    ///          bucket.</p>
    public let redirectAllRequestsTo: S3ClientTypes.RedirectAllRequestsTo?
    /// <p>Rules that define when a redirect is applied and the redirect behavior.</p>
    public let routingRules: [S3ClientTypes.RoutingRule]?

    public init (
        errorDocument: S3ClientTypes.ErrorDocument? = nil,
        indexDocument: S3ClientTypes.IndexDocument? = nil,
        redirectAllRequestsTo: S3ClientTypes.RedirectAllRequestsTo? = nil,
        routingRules: [S3ClientTypes.RoutingRule]? = nil
    )
    {
        self.errorDocument = errorDocument
        self.indexDocument = indexDocument
        self.redirectAllRequestsTo = redirectAllRequestsTo
        self.routingRules = routingRules
    }
}

struct GetBucketWebsiteOutputResponseBody: Swift.Equatable {
    public let redirectAllRequestsTo: S3ClientTypes.RedirectAllRequestsTo?
    public let indexDocument: S3ClientTypes.IndexDocument?
    public let errorDocument: S3ClientTypes.ErrorDocument?
    public let routingRules: [S3ClientTypes.RoutingRule]?
}

extension GetBucketWebsiteOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorDocument = "ErrorDocument"
        case indexDocument = "IndexDocument"
        case redirectAllRequestsTo = "RedirectAllRequestsTo"
        case routingRules = "RoutingRules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let redirectAllRequestsToDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RedirectAllRequestsTo.self, forKey: .redirectAllRequestsTo)
        redirectAllRequestsTo = redirectAllRequestsToDecoded
        let indexDocumentDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IndexDocument.self, forKey: .indexDocument)
        indexDocument = indexDocumentDecoded
        let errorDocumentDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ErrorDocument.self, forKey: .errorDocument)
        errorDocument = errorDocumentDecoded
        if containerValues.contains(.routingRules) {
            struct KeyVal0{struct RoutingRule{}}
            let routingRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RoutingRule>.CodingKeys.self, forKey: .routingRules)
            if let routingRulesWrappedContainer = routingRulesWrappedContainer {
                let routingRulesContainer = try routingRulesWrappedContainer.decodeIfPresent([S3ClientTypes.RoutingRule].self, forKey: .member)
                var routingRulesBuffer:[S3ClientTypes.RoutingRule]? = nil
                if let routingRulesContainer = routingRulesContainer {
                    routingRulesBuffer = [S3ClientTypes.RoutingRule]()
                    for structureContainer0 in routingRulesContainer {
                        routingRulesBuffer?.append(structureContainer0)
                    }
                }
                routingRules = routingRulesBuffer
            } else {
                routingRules = []
            }
        } else {
            routingRules = nil
        }
    }
}

extension GetObjectAclInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectAclInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), requestPayer: \(Swift.String(describing: requestPayer)), versionId: \(Swift.String(describing: versionId)))"}
}

extension GetObjectAclInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetObjectAclInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectAclInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectAclInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetObjectAclOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectAclInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectAclOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetObjectAclOutputError>
}

public struct GetObjectAclInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectAclInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectAclInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetObjectAclOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "acl", value: nil))
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectAclInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectAclOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetObjectAclOutputError>
}

public struct GetObjectAclInput: Swift.Equatable {
    /// <p>The bucket name that contains the object for which to get the ACL information. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The key of the object for which to get the ACL information.</p>
    public let key: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>VersionId used to reference a specific version of the object.</p>
    public let versionId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

struct GetObjectAclInputBody: Swift.Equatable {
}

extension GetObjectAclInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetObjectAclOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetObjectAclOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchKey" : self = .noSuchKey(try NoSuchKey(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetObjectAclOutputError: Swift.Error, Swift.Equatable {
    case noSuchKey(NoSuchKey)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetObjectAclOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectAclOutputResponse(grants: \(Swift.String(describing: grants)), owner: \(Swift.String(describing: owner)), requestCharged: \(Swift.String(describing: requestCharged)))"}
}

extension GetObjectAclOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetObjectAclOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.grants = output.grants
            self.owner = output.owner
        } else {
            self.grants = nil
            self.owner = nil
        }
    }
}

public struct GetObjectAclOutputResponse: Swift.Equatable {
    /// <p>A list of grants.</p>
    public let grants: [S3ClientTypes.Grant]?
    /// <p> Container for the bucket owner's display name and ID.</p>
    public let owner: S3ClientTypes.Owner?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?

    public init (
        grants: [S3ClientTypes.Grant]? = nil,
        owner: S3ClientTypes.Owner? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.grants = grants
        self.owner = owner
        self.requestCharged = requestCharged
    }
}

struct GetObjectAclOutputResponseBody: Swift.Equatable {
    public let owner: S3ClientTypes.Owner?
    public let grants: [S3ClientTypes.Grant]?
}

extension GetObjectAclOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grants = "AccessControlList"
        case owner = "Owner"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        if containerValues.contains(.grants) {
            struct KeyVal0{struct Grant{}}
            let grantsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Grant>.CodingKeys.self, forKey: .grants)
            if let grantsWrappedContainer = grantsWrappedContainer {
                let grantsContainer = try grantsWrappedContainer.decodeIfPresent([S3ClientTypes.Grant].self, forKey: .member)
                var grantsBuffer:[S3ClientTypes.Grant]? = nil
                if let grantsContainer = grantsContainer {
                    grantsBuffer = [S3ClientTypes.Grant]()
                    for structureContainer0 in grantsContainer {
                        grantsBuffer?.append(structureContainer0)
                    }
                }
                grants = grantsBuffer
            } else {
                grants = []
            }
        } else {
            grants = nil
        }
    }
}

extension GetObjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), ifMatch: \(Swift.String(describing: ifMatch)), ifModifiedSince: \(Swift.String(describing: ifModifiedSince)), ifNoneMatch: \(Swift.String(describing: ifNoneMatch)), ifUnmodifiedSince: \(Swift.String(describing: ifUnmodifiedSince)), key: \(Swift.String(describing: key)), partNumber: \(Swift.String(describing: partNumber)), range: \(Swift.String(describing: range)), requestPayer: \(Swift.String(describing: requestPayer)), responseCacheControl: \(Swift.String(describing: responseCacheControl)), responseContentDisposition: \(Swift.String(describing: responseContentDisposition)), responseContentEncoding: \(Swift.String(describing: responseContentEncoding)), responseContentLanguage: \(Swift.String(describing: responseContentLanguage)), responseContentType: \(Swift.String(describing: responseContentType)), responseExpires: \(Swift.String(describing: responseExpires)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKey: \(Swift.String(describing: sSECustomerKey)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), versionId: \(Swift.String(describing: versionId)))"}
}

extension GetObjectInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetObjectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let ifMatch = input.operationInput.ifMatch {
            input.builder.withHeader(name: "If-Match", value: Swift.String(ifMatch))
        }
        if let ifModifiedSince = input.operationInput.ifModifiedSince {
            input.builder.withHeader(name: "If-Modified-Since", value: Swift.String(ifModifiedSince.rfc5322()))
        }
        if let ifNoneMatch = input.operationInput.ifNoneMatch {
            input.builder.withHeader(name: "If-None-Match", value: Swift.String(ifNoneMatch))
        }
        if let ifUnmodifiedSince = input.operationInput.ifUnmodifiedSince {
            input.builder.withHeader(name: "If-Unmodified-Since", value: Swift.String(ifUnmodifiedSince.rfc5322()))
        }
        if let range = input.operationInput.range {
            input.builder.withHeader(name: "Range", value: Swift.String(range))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        if let sSECustomerAlgorithm = input.operationInput.sSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sSECustomerAlgorithm))
        }
        if let sSECustomerKey = input.operationInput.sSECustomerKey {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sSECustomerKey))
        }
        if let sSECustomerKeyMD5 = input.operationInput.sSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sSECustomerKeyMD5))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetObjectOutputError>
}

public struct GetObjectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "GetObject"))
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        if let responseContentDisposition = input.operationInput.responseContentDisposition {
            let responseContentDispositionQueryItem = ClientRuntime.URLQueryItem(name: "response-content-disposition".urlPercentEncoding(), value: Swift.String(responseContentDisposition).urlPercentEncoding())
            input.builder.withQueryItem(responseContentDispositionQueryItem)
        }
        if input.operationInput.partNumber != 0 {
            let partNumberQueryItem = ClientRuntime.URLQueryItem(name: "partNumber".urlPercentEncoding(), value: Swift.String(input.operationInput.partNumber).urlPercentEncoding())
            input.builder.withQueryItem(partNumberQueryItem)
        }
        if let responseContentType = input.operationInput.responseContentType {
            let responseContentTypeQueryItem = ClientRuntime.URLQueryItem(name: "response-content-type".urlPercentEncoding(), value: Swift.String(responseContentType).urlPercentEncoding())
            input.builder.withQueryItem(responseContentTypeQueryItem)
        }
        if let responseExpires = input.operationInput.responseExpires {
            let responseExpiresQueryItem = ClientRuntime.URLQueryItem(name: "response-expires".urlPercentEncoding(), value: Swift.String(responseExpires.rfc5322()).urlPercentEncoding())
            input.builder.withQueryItem(responseExpiresQueryItem)
        }
        if let responseContentEncoding = input.operationInput.responseContentEncoding {
            let responseContentEncodingQueryItem = ClientRuntime.URLQueryItem(name: "response-content-encoding".urlPercentEncoding(), value: Swift.String(responseContentEncoding).urlPercentEncoding())
            input.builder.withQueryItem(responseContentEncodingQueryItem)
        }
        if let responseCacheControl = input.operationInput.responseCacheControl {
            let responseCacheControlQueryItem = ClientRuntime.URLQueryItem(name: "response-cache-control".urlPercentEncoding(), value: Swift.String(responseCacheControl).urlPercentEncoding())
            input.builder.withQueryItem(responseCacheControlQueryItem)
        }
        if let responseContentLanguage = input.operationInput.responseContentLanguage {
            let responseContentLanguageQueryItem = ClientRuntime.URLQueryItem(name: "response-content-language".urlPercentEncoding(), value: Swift.String(responseContentLanguage).urlPercentEncoding())
            input.builder.withQueryItem(responseContentLanguageQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetObjectOutputError>
}

public struct GetObjectInput: Swift.Equatable {
    /// <p>The bucket name containing the object. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Return the object only if its entity tag (ETag) is the same as the one specified,
    ///          otherwise return a 412 (precondition failed).</p>
    public let ifMatch: Swift.String?
    /// <p>Return the object only if it has been modified since the specified time, otherwise
    ///          return a 304 (not modified).</p>
    public let ifModifiedSince: ClientRuntime.Date?
    /// <p>Return the object only if its entity tag (ETag) is different from the one specified,
    ///          otherwise return a 304 (not modified).</p>
    public let ifNoneMatch: Swift.String?
    /// <p>Return the object only if it has not been modified since the specified time, otherwise
    ///          return a 412 (precondition failed).</p>
    public let ifUnmodifiedSince: ClientRuntime.Date?
    /// <p>Key of the object to get.</p>
    public let key: Swift.String?
    /// <p>Part number of the object being read. This is a positive integer between 1 and 10,000.
    ///          Effectively performs a 'ranged' GET request for the part specified. Useful for downloading
    ///          just a part of an object.</p>
    public let partNumber: Swift.Int
    /// <p>Downloads the specified range bytes of an object. For more information about the HTTP
    ///          Range header, see <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>.</p>
    ///          <note>
    ///             <p>Amazon S3 doesn't support retrieving multiple ranges of data per <code>GET</code>
    ///             request.</p>
    ///          </note>
    public let range: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>Sets the <code>Cache-Control</code> header of the response.</p>
    public let responseCacheControl: Swift.String?
    /// <p>Sets the <code>Content-Disposition</code> header of the response</p>
    public let responseContentDisposition: Swift.String?
    /// <p>Sets the <code>Content-Encoding</code> header of the response.</p>
    public let responseContentEncoding: Swift.String?
    /// <p>Sets the <code>Content-Language</code> header of the response.</p>
    public let responseContentLanguage: Swift.String?
    /// <p>Sets the <code>Content-Type</code> header of the response.</p>
    public let responseContentType: Swift.String?
    /// <p>Sets the <code>Expires</code> header of the response.</p>
    public let responseExpires: ClientRuntime.Date?
    /// <p>Specifies the algorithm to use to when decrypting the object (for example,
    ///          AES256).</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>Specifies the customer-provided encryption key for Amazon S3 used to encrypt the data. This
    ///          value is used to decrypt the object when recovering it and must match the one used when
    ///          storing the data. The key must be appropriate for use with the algorithm specified in the
    ///             <code>x-amz-server-side-encryption-customer-algorithm</code> header.</p>
    public let sSECustomerKey: Swift.String?
    /// <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
    ///          this header for a message integrity check to ensure that the encryption key was transmitted
    ///          without error.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>VersionId used to reference a specific version of the object.</p>
    public let versionId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        ifMatch: Swift.String? = nil,
        ifModifiedSince: ClientRuntime.Date? = nil,
        ifNoneMatch: Swift.String? = nil,
        ifUnmodifiedSince: ClientRuntime.Date? = nil,
        key: Swift.String? = nil,
        partNumber: Swift.Int = 0,
        range: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        responseCacheControl: Swift.String? = nil,
        responseContentDisposition: Swift.String? = nil,
        responseContentEncoding: Swift.String? = nil,
        responseContentLanguage: Swift.String? = nil,
        responseContentType: Swift.String? = nil,
        responseExpires: ClientRuntime.Date? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKey: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.ifMatch = ifMatch
        self.ifModifiedSince = ifModifiedSince
        self.ifNoneMatch = ifNoneMatch
        self.ifUnmodifiedSince = ifUnmodifiedSince
        self.key = key
        self.partNumber = partNumber
        self.range = range
        self.requestPayer = requestPayer
        self.responseCacheControl = responseCacheControl
        self.responseContentDisposition = responseContentDisposition
        self.responseContentEncoding = responseContentEncoding
        self.responseContentLanguage = responseContentLanguage
        self.responseContentType = responseContentType
        self.responseExpires = responseExpires
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKey = sSECustomerKey
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.versionId = versionId
    }
}

struct GetObjectInputBody: Swift.Equatable {
}

extension GetObjectInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetObjectLegalHoldInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectLegalHoldInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), requestPayer: \(Swift.String(describing: requestPayer)), versionId: \(Swift.String(describing: versionId)))"}
}

extension GetObjectLegalHoldInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetObjectLegalHoldInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectLegalHoldInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectLegalHoldInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetObjectLegalHoldOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectLegalHoldInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectLegalHoldOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetObjectLegalHoldOutputError>
}

public struct GetObjectLegalHoldInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectLegalHoldInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectLegalHoldInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetObjectLegalHoldOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "legal-hold", value: nil))
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectLegalHoldInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectLegalHoldOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetObjectLegalHoldOutputError>
}

public struct GetObjectLegalHoldInput: Swift.Equatable {
    /// <p>The bucket name containing the object whose Legal Hold status you want to retrieve. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The key name for the object whose Legal Hold status you want to retrieve.</p>
    public let key: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>The version ID of the object whose Legal Hold status you want to retrieve.</p>
    public let versionId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

struct GetObjectLegalHoldInputBody: Swift.Equatable {
}

extension GetObjectLegalHoldInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetObjectLegalHoldOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetObjectLegalHoldOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetObjectLegalHoldOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetObjectLegalHoldOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectLegalHoldOutputResponse(legalHold: \(Swift.String(describing: legalHold)))"}
}

extension GetObjectLegalHoldOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.ObjectLockLegalHold = try responseDecoder.decode(responseBody: data)
                self.legalHold = output
            } else {
                self.legalHold = nil
            }
        } else {
            self.legalHold = nil
        }
    }
}

public struct GetObjectLegalHoldOutputResponse: Swift.Equatable {
    /// <p>The current Legal Hold status for the specified object.</p>
    public let legalHold: S3ClientTypes.ObjectLockLegalHold?

    public init (
        legalHold: S3ClientTypes.ObjectLockLegalHold? = nil
    )
    {
        self.legalHold = legalHold
    }
}

struct GetObjectLegalHoldOutputResponseBody: Swift.Equatable {
    public let legalHold: S3ClientTypes.ObjectLockLegalHold?
}

extension GetObjectLegalHoldOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case legalHold = "LegalHold"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let legalHoldDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockLegalHold.self, forKey: .legalHold)
        legalHold = legalHoldDecoded
    }
}

extension GetObjectLockConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectLockConfigurationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetObjectLockConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetObjectLockConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectLockConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectLockConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetObjectLockConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectLockConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectLockConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetObjectLockConfigurationOutputError>
}

public struct GetObjectLockConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectLockConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectLockConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetObjectLockConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "object-lock", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectLockConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectLockConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetObjectLockConfigurationOutputError>
}

public struct GetObjectLockConfigurationInput: Swift.Equatable {
    /// <p>The bucket whose Object Lock configuration you want to retrieve.</p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetObjectLockConfigurationInputBody: Swift.Equatable {
}

extension GetObjectLockConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetObjectLockConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetObjectLockConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetObjectLockConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetObjectLockConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectLockConfigurationOutputResponse(objectLockConfiguration: \(Swift.String(describing: objectLockConfiguration)))"}
}

extension GetObjectLockConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.ObjectLockConfiguration = try responseDecoder.decode(responseBody: data)
                self.objectLockConfiguration = output
            } else {
                self.objectLockConfiguration = nil
            }
        } else {
            self.objectLockConfiguration = nil
        }
    }
}

public struct GetObjectLockConfigurationOutputResponse: Swift.Equatable {
    /// <p>The specified bucket's Object Lock configuration.</p>
    public let objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration?

    public init (
        objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration? = nil
    )
    {
        self.objectLockConfiguration = objectLockConfiguration
    }
}

struct GetObjectLockConfigurationOutputResponseBody: Swift.Equatable {
    public let objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration?
}

extension GetObjectLockConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objectLockConfiguration = "ObjectLockConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectLockConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockConfiguration.self, forKey: .objectLockConfiguration)
        objectLockConfiguration = objectLockConfigurationDecoded
    }
}

extension GetObjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetObjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidObjectState" : self = .invalidObjectState(try InvalidObjectState(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchKey" : self = .noSuchKey(try NoSuchKey(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetObjectOutputError: Swift.Error, Swift.Equatable {
    case invalidObjectState(InvalidObjectState)
    case noSuchKey(NoSuchKey)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetObjectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectOutputResponse(acceptRanges: \(Swift.String(describing: acceptRanges)), body: \(Swift.String(describing: body)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentLength: \(Swift.String(describing: contentLength)), contentRange: \(Swift.String(describing: contentRange)), contentType: \(Swift.String(describing: contentType)), deleteMarker: \(Swift.String(describing: deleteMarker)), eTag: \(Swift.String(describing: eTag)), expiration: \(Swift.String(describing: expiration)), expires: \(Swift.String(describing: expires)), lastModified: \(Swift.String(describing: lastModified)), metadata: \(Swift.String(describing: metadata)), missingMeta: \(Swift.String(describing: missingMeta)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), partsCount: \(Swift.String(describing: partsCount)), replicationStatus: \(Swift.String(describing: replicationStatus)), requestCharged: \(Swift.String(describing: requestCharged)), restore: \(Swift.String(describing: restore)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), sSEKMSKeyId: \(Swift.String(describing: sSEKMSKeyId)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), storageClass: \(Swift.String(describing: storageClass)), tagCount: \(Swift.String(describing: tagCount)), versionId: \(Swift.String(describing: versionId)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)))"}
}

extension GetObjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let acceptRangesHeaderValue = httpResponse.headers.value(for: "accept-ranges") {
            self.acceptRanges = acceptRangesHeaderValue
        } else {
            self.acceptRanges = nil
        }
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = false
        }
        if let cacheControlHeaderValue = httpResponse.headers.value(for: "Cache-Control") {
            self.cacheControl = cacheControlHeaderValue
        } else {
            self.cacheControl = nil
        }
        if let contentDispositionHeaderValue = httpResponse.headers.value(for: "Content-Disposition") {
            self.contentDisposition = contentDispositionHeaderValue
        } else {
            self.contentDisposition = nil
        }
        if let contentEncodingHeaderValue = httpResponse.headers.value(for: "Content-Encoding") {
            self.contentEncoding = contentEncodingHeaderValue
        } else {
            self.contentEncoding = nil
        }
        if let contentLanguageHeaderValue = httpResponse.headers.value(for: "Content-Language") {
            self.contentLanguage = contentLanguageHeaderValue
        } else {
            self.contentLanguage = nil
        }
        if let contentLengthHeaderValue = httpResponse.headers.value(for: "Content-Length") {
            self.contentLength = Swift.Int(contentLengthHeaderValue) ?? 0
        } else {
            self.contentLength = 0
        }
        if let contentRangeHeaderValue = httpResponse.headers.value(for: "Content-Range") {
            self.contentRange = contentRangeHeaderValue
        } else {
            self.contentRange = nil
        }
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            self.contentType = contentTypeHeaderValue
        } else {
            self.contentType = nil
        }
        if let deleteMarkerHeaderValue = httpResponse.headers.value(for: "x-amz-delete-marker") {
            self.deleteMarker = Swift.Bool(deleteMarkerHeaderValue) ?? false
        } else {
            self.deleteMarker = false
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            self.eTag = eTagHeaderValue
        } else {
            self.eTag = nil
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            self.expiration = expirationHeaderValue
        } else {
            self.expiration = nil
        }
        if let expiresHeaderValue = httpResponse.headers.value(for: "Expires") {
            self.expires = DateFormatter.rfc5322DateFormatter.date(from: expiresHeaderValue)
        } else {
            self.expires = nil
        }
        if let lastModifiedHeaderValue = httpResponse.headers.value(for: "Last-Modified") {
            self.lastModified = DateFormatter.rfc5322DateFormatter.date(from: lastModifiedHeaderValue)
        } else {
            self.lastModified = nil
        }
        if let missingMetaHeaderValue = httpResponse.headers.value(for: "x-amz-missing-meta") {
            self.missingMeta = Swift.Int(missingMetaHeaderValue) ?? 0
        } else {
            self.missingMeta = 0
        }
        if let objectLockLegalHoldStatusHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-legal-hold") {
            self.objectLockLegalHoldStatus = S3ClientTypes.ObjectLockLegalHoldStatus(rawValue: objectLockLegalHoldStatusHeaderValue)
        } else {
            self.objectLockLegalHoldStatus = nil
        }
        if let objectLockModeHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-mode") {
            self.objectLockMode = S3ClientTypes.ObjectLockMode(rawValue: objectLockModeHeaderValue)
        } else {
            self.objectLockMode = nil
        }
        if let objectLockRetainUntilDateHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-retain-until-date") {
            self.objectLockRetainUntilDate = DateFormatter.iso8601DateFormatterWithoutFractionalSeconds.date(from: objectLockRetainUntilDateHeaderValue)
        } else {
            self.objectLockRetainUntilDate = nil
        }
        if let partsCountHeaderValue = httpResponse.headers.value(for: "x-amz-mp-parts-count") {
            self.partsCount = Swift.Int(partsCountHeaderValue) ?? 0
        } else {
            self.partsCount = 0
        }
        if let replicationStatusHeaderValue = httpResponse.headers.value(for: "x-amz-replication-status") {
            self.replicationStatus = S3ClientTypes.ReplicationStatus(rawValue: replicationStatusHeaderValue)
        } else {
            self.replicationStatus = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let restoreHeaderValue = httpResponse.headers.value(for: "x-amz-restore") {
            self.restore = restoreHeaderValue
        } else {
            self.restore = nil
        }
        if let sSECustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            self.sSECustomerAlgorithm = sSECustomerAlgorithmHeaderValue
        } else {
            self.sSECustomerAlgorithm = nil
        }
        if let sSECustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5HeaderValue
        } else {
            self.sSECustomerKeyMD5 = nil
        }
        if let sSEKMSKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.sSEKMSKeyId = sSEKMSKeyIdHeaderValue
        } else {
            self.sSEKMSKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
        if let storageClassHeaderValue = httpResponse.headers.value(for: "x-amz-storage-class") {
            self.storageClass = S3ClientTypes.StorageClass(rawValue: storageClassHeaderValue)
        } else {
            self.storageClass = nil
        }
        if let tagCountHeaderValue = httpResponse.headers.value(for: "x-amz-tagging-count") {
            self.tagCount = Swift.Int(tagCountHeaderValue) ?? 0
        } else {
            self.tagCount = 0
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
        if let websiteRedirectLocationHeaderValue = httpResponse.headers.value(for: "x-amz-website-redirect-location") {
            self.websiteRedirectLocation = websiteRedirectLocationHeaderValue
        } else {
            self.websiteRedirectLocation = nil
        }
        let keysForMetadata = httpResponse.headers.dictionary.keys.filter({ $0.starts(with: "x-amz-meta-") })
        if (!keysForMetadata.isEmpty) {
            var mapMember = [Swift.String: String]()
            for headerKey in keysForMetadata {
                let mapMemberValue = httpResponse.headers.dictionary[headerKey]?[0]
                let mapMemberKey = headerKey.removePrefix("x-amz-meta-")
                mapMember[mapMemberKey] = mapMemberValue
            }
            self.metadata = mapMember
        } else {
            self.metadata = [:]
        }
        if case .stream(let reader) = httpResponse.body {
            let data = reader
            self.body = data
        } else {
            self.body = nil
        }
    }
}

public struct GetObjectOutputResponse: Swift.Equatable {
    /// <p>Indicates that a range of bytes was specified.</p>
    public let acceptRanges: Swift.String?
    /// <p>Object data.</p>
    public let body: ClientRuntime.ByteStream?
    /// <p>Indicates whether the object uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>
    public let bucketKeyEnabled: Swift.Bool
    /// <p>Specifies caching behavior along the request/reply chain.</p>
    public let cacheControl: Swift.String?
    /// <p>Specifies presentational information for the object.</p>
    public let contentDisposition: Swift.String?
    /// <p>Specifies what content encodings have been applied to the object and thus what decoding
    ///          mechanisms must be applied to obtain the media-type referenced by the Content-Type header
    ///          field.</p>
    public let contentEncoding: Swift.String?
    /// <p>The language the content is in.</p>
    public let contentLanguage: Swift.String?
    /// <p>Size of the body in bytes.</p>
    public let contentLength: Swift.Int
    /// <p>The portion of the object returned in the response.</p>
    public let contentRange: Swift.String?
    /// <p>A standard MIME type describing the format of the object data.</p>
    public let contentType: Swift.String?
    /// <p>Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If
    ///          false, this response header does not appear in the response.</p>
    public let deleteMarker: Swift.Bool
    /// <p>An ETag is an opaque identifier assigned by a web server to a specific version of a
    ///          resource found at a URL.</p>
    public let eTag: Swift.String?
    /// <p>If the object expiration is configured (see PUT Bucket lifecycle), the response includes
    ///          this header. It includes the expiry-date and rule-id key-value pairs providing object
    ///          expiration information. The value of the rule-id is URL encoded.</p>
    public let expiration: Swift.String?
    /// <p>The date and time at which the object is no longer cacheable.</p>
    public let expires: ClientRuntime.Date?
    /// <p>Creation date of the object.</p>
    public let lastModified: ClientRuntime.Date?
    /// <p>A map of metadata to store with the object in S3.</p>
    public let metadata: [Swift.String:Swift.String]?
    /// <p>This is set to the number of metadata entries not returned in <code>x-amz-meta</code>
    ///          headers. This can happen if you create metadata using an API like SOAP that supports more
    ///          flexible metadata than the REST API. For example, using SOAP, you can create metadata whose
    ///          values are not legal HTTP headers.</p>
    public let missingMeta: Swift.Int
    /// <p>Indicates whether this object has an active legal hold. This field is only returned if
    ///          you have permission to view an object's legal hold status. </p>
    public let objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// <p>The Object Lock mode currently in place for this object.</p>
    public let objectLockMode: S3ClientTypes.ObjectLockMode?
    /// <p>The date and time when this object's Object Lock will expire.</p>
    public let objectLockRetainUntilDate: ClientRuntime.Date?
    /// <p>The count of parts this object has.</p>
    public let partsCount: Swift.Int
    /// <p>Amazon S3 can return this if your request involves a bucket that is either a source or
    ///          destination in a replication rule.</p>
    public let replicationStatus: S3ClientTypes.ReplicationStatus?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?
    /// <p>Provides information about object restoration action and expiration time of the
    ///          restored object copy.</p>
    public let restore: Swift.String?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header confirming the encryption algorithm used.</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header to provide round-trip message integrity verification of
    ///          the customer-provided encryption key.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric
    ///          customer managed customer master key (CMK) that was used for the object.</p>
    public let sSEKMSKeyId: Swift.String?
    /// <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
    ///          AES256, aws:kms).</p>
    public let serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// <p>Provides storage class information of the object. Amazon S3 returns this header for all
    ///          objects except for S3 Standard storage class objects.</p>
    public let storageClass: S3ClientTypes.StorageClass?
    /// <p>The number of tags, if any, on the object.</p>
    public let tagCount: Swift.Int
    /// <p>Version of the object.</p>
    public let versionId: Swift.String?
    /// <p>If the bucket is configured as a website, redirects requests for this object to another
    ///          object in the same bucket or to an external URL. Amazon S3 stores the value of this header in
    ///          the object metadata.</p>
    public let websiteRedirectLocation: Swift.String?

    public init (
        acceptRanges: Swift.String? = nil,
        body: ClientRuntime.ByteStream? = nil,
        bucketKeyEnabled: Swift.Bool = false,
        cacheControl: Swift.String? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentLength: Swift.Int = 0,
        contentRange: Swift.String? = nil,
        contentType: Swift.String? = nil,
        deleteMarker: Swift.Bool = false,
        eTag: Swift.String? = nil,
        expiration: Swift.String? = nil,
        expires: ClientRuntime.Date? = nil,
        lastModified: ClientRuntime.Date? = nil,
        metadata: [Swift.String:Swift.String]? = nil,
        missingMeta: Swift.Int = 0,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: ClientRuntime.Date? = nil,
        partsCount: Swift.Int = 0,
        replicationStatus: S3ClientTypes.ReplicationStatus? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        restore: Swift.String? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        sSEKMSKeyId: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagCount: Swift.Int = 0,
        versionId: Swift.String? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.acceptRanges = acceptRanges
        self.body = body
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentLength = contentLength
        self.contentRange = contentRange
        self.contentType = contentType
        self.deleteMarker = deleteMarker
        self.eTag = eTag
        self.expiration = expiration
        self.expires = expires
        self.lastModified = lastModified
        self.metadata = metadata
        self.missingMeta = missingMeta
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.partsCount = partsCount
        self.replicationStatus = replicationStatus
        self.requestCharged = requestCharged
        self.restore = restore
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
        self.storageClass = storageClass
        self.tagCount = tagCount
        self.versionId = versionId
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

struct GetObjectOutputResponseBody: Swift.Equatable {
    public let body: ClientRuntime.ByteStream?
}

extension GetObjectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.body) {
            do {
                let bodyDecoded = try containerValues.decodeIfPresent(ClientRuntime.ByteStream.self, forKey: .body)
                body = bodyDecoded
            } catch {
                body = ClientRuntime.ByteStream.from(data: "".data(using: .utf8)!)
            }
        } else {
            body = nil
        }
    }
}

extension GetObjectRetentionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectRetentionInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), requestPayer: \(Swift.String(describing: requestPayer)), versionId: \(Swift.String(describing: versionId)))"}
}

extension GetObjectRetentionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetObjectRetentionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectRetentionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectRetentionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetObjectRetentionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectRetentionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectRetentionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetObjectRetentionOutputError>
}

public struct GetObjectRetentionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectRetentionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectRetentionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetObjectRetentionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "retention", value: nil))
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectRetentionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectRetentionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetObjectRetentionOutputError>
}

public struct GetObjectRetentionInput: Swift.Equatable {
    /// <p>The bucket name containing the object whose retention settings you want to retrieve. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The key name for the object whose retention settings you want to retrieve.</p>
    public let key: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>The version ID for the object whose retention settings you want to retrieve.</p>
    public let versionId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

struct GetObjectRetentionInputBody: Swift.Equatable {
}

extension GetObjectRetentionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetObjectRetentionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetObjectRetentionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetObjectRetentionOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetObjectRetentionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectRetentionOutputResponse(retention: \(Swift.String(describing: retention)))"}
}

extension GetObjectRetentionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.ObjectLockRetention = try responseDecoder.decode(responseBody: data)
                self.retention = output
            } else {
                self.retention = nil
            }
        } else {
            self.retention = nil
        }
    }
}

public struct GetObjectRetentionOutputResponse: Swift.Equatable {
    /// <p>The container element for an object's retention settings.</p>
    public let retention: S3ClientTypes.ObjectLockRetention?

    public init (
        retention: S3ClientTypes.ObjectLockRetention? = nil
    )
    {
        self.retention = retention
    }
}

struct GetObjectRetentionOutputResponseBody: Swift.Equatable {
    public let retention: S3ClientTypes.ObjectLockRetention?
}

extension GetObjectRetentionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retention = "Retention"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let retentionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockRetention.self, forKey: .retention)
        retention = retentionDecoded
    }
}

extension GetObjectTaggingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectTaggingInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), requestPayer: \(Swift.String(describing: requestPayer)), versionId: \(Swift.String(describing: versionId)))"}
}

extension GetObjectTaggingInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetObjectTaggingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectTaggingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectTaggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetObjectTaggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectTaggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectTaggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetObjectTaggingOutputError>
}

public struct GetObjectTaggingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectTaggingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectTaggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetObjectTaggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "tagging", value: nil))
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectTaggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectTaggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetObjectTaggingOutputError>
}

public struct GetObjectTaggingInput: Swift.Equatable {
    /// <p>The bucket name containing the object for which to get the tagging information. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Object key for which to get the tagging information.</p>
    public let key: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>The versionId of the object for which to get the tagging information.</p>
    public let versionId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

struct GetObjectTaggingInputBody: Swift.Equatable {
}

extension GetObjectTaggingInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetObjectTaggingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetObjectTaggingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetObjectTaggingOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetObjectTaggingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectTaggingOutputResponse(tagSet: \(Swift.String(describing: tagSet)), versionId: \(Swift.String(describing: versionId)))"}
}

extension GetObjectTaggingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetObjectTaggingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tagSet = output.tagSet
        } else {
            self.tagSet = nil
        }
    }
}

public struct GetObjectTaggingOutputResponse: Swift.Equatable {
    /// <p>Contains the tag set.</p>
    public let tagSet: [S3ClientTypes.Tag]?
    /// <p>The versionId of the object for which you got the tagging information.</p>
    public let versionId: Swift.String?

    public init (
        tagSet: [S3ClientTypes.Tag]? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.tagSet = tagSet
        self.versionId = versionId
    }
}

struct GetObjectTaggingOutputResponseBody: Swift.Equatable {
    public let tagSet: [S3ClientTypes.Tag]?
}

extension GetObjectTaggingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagSet = "TagSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.tagSet) {
            struct KeyVal0{struct Tag{}}
            let tagSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tagSet)
            if let tagSetWrappedContainer = tagSetWrappedContainer {
                let tagSetContainer = try tagSetWrappedContainer.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .member)
                var tagSetBuffer:[S3ClientTypes.Tag]? = nil
                if let tagSetContainer = tagSetContainer {
                    tagSetBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagSetContainer {
                        tagSetBuffer?.append(structureContainer0)
                    }
                }
                tagSet = tagSetBuffer
            } else {
                tagSet = []
            }
        } else {
            tagSet = nil
        }
    }
}

extension GetObjectTorrentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectTorrentInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), requestPayer: \(Swift.String(describing: requestPayer)))"}
}

extension GetObjectTorrentInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetObjectTorrentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectTorrentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectTorrentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetObjectTorrentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectTorrentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectTorrentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetObjectTorrentOutputError>
}

public struct GetObjectTorrentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectTorrentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectTorrentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetObjectTorrentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "torrent", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectTorrentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectTorrentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetObjectTorrentOutputError>
}

public struct GetObjectTorrentInput: Swift.Equatable {
    /// <p>The name of the bucket containing the object for which to get the torrent files.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The object key for which to get the information.</p>
    public let key: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
    }
}

struct GetObjectTorrentInputBody: Swift.Equatable {
}

extension GetObjectTorrentInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetObjectTorrentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetObjectTorrentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetObjectTorrentOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetObjectTorrentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectTorrentOutputResponse(body: \(Swift.String(describing: body)), requestCharged: \(Swift.String(describing: requestCharged)))"}
}

extension GetObjectTorrentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if case .stream(let reader) = httpResponse.body {
            let data = reader
            self.body = data
        } else {
            self.body = nil
        }
    }
}

public struct GetObjectTorrentOutputResponse: Swift.Equatable {
    /// <p>A Bencoded dictionary as defined by the BitTorrent specification</p>
    public let body: ClientRuntime.ByteStream?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?

    public init (
        body: ClientRuntime.ByteStream? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.body = body
        self.requestCharged = requestCharged
    }
}

struct GetObjectTorrentOutputResponseBody: Swift.Equatable {
    public let body: ClientRuntime.ByteStream?
}

extension GetObjectTorrentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.body) {
            do {
                let bodyDecoded = try containerValues.decodeIfPresent(ClientRuntime.ByteStream.self, forKey: .body)
                body = bodyDecoded
            } catch {
                body = ClientRuntime.ByteStream.from(data: "".data(using: .utf8)!)
            }
        } else {
            body = nil
        }
    }
}

extension GetPublicAccessBlockInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPublicAccessBlockInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension GetPublicAccessBlockInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetPublicAccessBlockInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPublicAccessBlockInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPublicAccessBlockInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPublicAccessBlockOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPublicAccessBlockInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPublicAccessBlockOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPublicAccessBlockOutputError>
}

public struct GetPublicAccessBlockInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPublicAccessBlockInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPublicAccessBlockInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPublicAccessBlockOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "publicAccessBlock", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPublicAccessBlockInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPublicAccessBlockOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPublicAccessBlockOutputError>
}

public struct GetPublicAccessBlockInput: Swift.Equatable {
    /// <p>The name of the Amazon S3 bucket whose <code>PublicAccessBlock</code> configuration you want
    ///          to retrieve. </p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct GetPublicAccessBlockInputBody: Swift.Equatable {
}

extension GetPublicAccessBlockInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetPublicAccessBlockOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetPublicAccessBlockOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPublicAccessBlockOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPublicAccessBlockOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPublicAccessBlockOutputResponse(publicAccessBlockConfiguration: \(Swift.String(describing: publicAccessBlockConfiguration)))"}
}

extension GetPublicAccessBlockOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.PublicAccessBlockConfiguration = try responseDecoder.decode(responseBody: data)
                self.publicAccessBlockConfiguration = output
            } else {
                self.publicAccessBlockConfiguration = nil
            }
        } else {
            self.publicAccessBlockConfiguration = nil
        }
    }
}

public struct GetPublicAccessBlockOutputResponse: Swift.Equatable {
    /// <p>The <code>PublicAccessBlock</code> configuration currently in effect for this Amazon S3
    ///          bucket.</p>
    public let publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration?

    public init (
        publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration? = nil
    )
    {
        self.publicAccessBlockConfiguration = publicAccessBlockConfiguration
    }
}

struct GetPublicAccessBlockOutputResponseBody: Swift.Equatable {
    public let publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration?
}

extension GetPublicAccessBlockOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case publicAccessBlockConfiguration = "PublicAccessBlockConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publicAccessBlockConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.PublicAccessBlockConfiguration.self, forKey: .publicAccessBlockConfiguration)
        publicAccessBlockConfiguration = publicAccessBlockConfigurationDecoded
    }
}

extension S3ClientTypes.GlacierJobParameters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tier = "Tier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let tier = tier {
            try container.encode(tier, forKey: ClientRuntime.Key("Tier"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tierDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tier.self, forKey: .tier)
        tier = tierDecoded
    }
}

extension S3ClientTypes.GlacierJobParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GlacierJobParameters(tier: \(Swift.String(describing: tier)))"}
}

extension S3ClientTypes.GlacierJobParameters: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for S3 Glacier job parameters.</p>
    public struct GlacierJobParameters: Swift.Equatable {
        /// <p>Retrieval tier at which the restore will be processed.</p>
        public let tier: S3ClientTypes.Tier?

        public init (
            tier: S3ClientTypes.Tier? = nil
        )
        {
            self.tier = tier
        }
    }

}

extension S3ClientTypes.Grant: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantee = "Grantee"
        case permission = "Permission"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let grantee = grantee {
            var granteeContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Grantee"))
            try granteeContainer.encode(grantee, forKey: ClientRuntime.Key(""))
            try granteeContainer.encode("http://www.w3.org/2001/XMLSchema-instance", forKey: ClientRuntime.Key("xmlns:xsi"))
        }
        if let permission = permission {
            try container.encode(permission, forKey: ClientRuntime.Key("Permission"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let granteeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Grantee.self, forKey: .grantee)
        grantee = granteeDecoded
        let permissionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Permission.self, forKey: .permission)
        permission = permissionDecoded
    }
}

extension S3ClientTypes.Grant: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Grant(grantee: \(Swift.String(describing: grantee)), permission: \(Swift.String(describing: permission)))"}
}

extension S3ClientTypes.Grant: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns",
            "xmlns:xsi"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for grant information.</p>
    public struct Grant: Swift.Equatable {
        /// <p>The person being granted permissions.</p>
        public let grantee: S3ClientTypes.Grantee?
        /// <p>Specifies the permission given to the grantee.</p>
        public let permission: S3ClientTypes.Permission?

        public init (
            grantee: S3ClientTypes.Grantee? = nil,
            permission: S3ClientTypes.Permission? = nil
        )
        {
            self.grantee = grantee
            self.permission = permission
        }
    }

}

extension S3ClientTypes.Grantee: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case emailAddress = "EmailAddress"
        case iD = "ID"
        case type = "xsi:type"
        case uRI = "URI"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let displayName = displayName {
            try container.encode(displayName, forKey: ClientRuntime.Key("DisplayName"))
        }
        if let emailAddress = emailAddress {
            try container.encode(emailAddress, forKey: ClientRuntime.Key("EmailAddress"))
        }
        if let iD = iD {
            try container.encode(iD, forKey: ClientRuntime.Key("ID"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("xsi:type"))
        }
        if let uRI = uRI {
            try container.encode(uRI, forKey: ClientRuntime.Key("URI"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let iDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iD)
        iD = iDDecoded
        let uRIDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uRI)
        uRI = uRIDecoded
        let typeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ModelType.self, forKey: .type)
        type = typeDecoded
    }
}

extension S3ClientTypes.Grantee: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Grantee(displayName: \(Swift.String(describing: displayName)), emailAddress: \(Swift.String(describing: emailAddress)), iD: \(Swift.String(describing: iD)), type: \(Swift.String(describing: type)), uRI: \(Swift.String(describing: uRI)))"}
}

extension S3ClientTypes.Grantee: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        let codingKeys = [
            "xsi:type"
        ]
        if let key = key as? ClientRuntime.Key {
            if codingKeys.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for the person being granted permissions.</p>
    public struct Grantee: Swift.Equatable {
        /// <p>Screen name of the grantee.</p>
        public let displayName: Swift.String?
        /// <p>Email address of the grantee.</p>
        ///          <note>
        ///             <p>Using email addresses to specify a grantee is only supported in the following AWS Regions: </p>
        ///             <ul>
        ///                <li>
        ///                   <p>US East (N. Virginia)</p>
        ///                </li>
        ///                <li>
        ///                   <p>US West (N. California)</p>
        ///                </li>
        ///                <li>
        ///                   <p> US West (Oregon)</p>
        ///                </li>
        ///                <li>
        ///                   <p> Asia Pacific (Singapore)</p>
        ///                </li>
        ///                <li>
        ///                   <p>Asia Pacific (Sydney)</p>
        ///                </li>
        ///                <li>
        ///                   <p>Asia Pacific (Tokyo)</p>
        ///                </li>
        ///                <li>
        ///                   <p>Europe (Ireland)</p>
        ///                </li>
        ///                <li>
        ///                   <p>South America (São Paulo)</p>
        ///                </li>
        ///             </ul>
        ///             <p>For a list of all the Amazon S3 supported Regions and endpoints, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions and Endpoints</a> in the AWS General Reference.</p>
        ///          </note>
        public let emailAddress: Swift.String?
        /// <p>The canonical user ID of the grantee.</p>
        public let iD: Swift.String?
        /// <p>Type of grantee</p>
        public let type: S3ClientTypes.ModelType?
        /// <p>URI of the grantee group.</p>
        public let uRI: Swift.String?

        public init (
            displayName: Swift.String? = nil,
            emailAddress: Swift.String? = nil,
            iD: Swift.String? = nil,
            type: S3ClientTypes.ModelType? = nil,
            uRI: Swift.String? = nil
        )
        {
            self.displayName = displayName
            self.emailAddress = emailAddress
            self.iD = iD
            self.type = type
            self.uRI = uRI
        }
    }

}

extension HeadBucketInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HeadBucketInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension HeadBucketInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct HeadBucketInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "HeadBucketInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<HeadBucketInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<HeadBucketOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<HeadBucketInput>
    public typealias MOutput = ClientRuntime.OperationOutput<HeadBucketOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<HeadBucketOutputError>
}

public struct HeadBucketInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "HeadBucketInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<HeadBucketInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<HeadBucketOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<HeadBucketInput>
    public typealias MOutput = ClientRuntime.OperationOutput<HeadBucketOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<HeadBucketOutputError>
}

public struct HeadBucketInput: Swift.Equatable {
    /// <p>The bucket name.</p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct HeadBucketInputBody: Swift.Equatable {
}

extension HeadBucketInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension HeadBucketOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension HeadBucketOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NotFound" : self = .notFound(try NotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum HeadBucketOutputError: Swift.Error, Swift.Equatable {
    case notFound(NotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension HeadBucketOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HeadBucketOutputResponse()"}
}

extension HeadBucketOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct HeadBucketOutputResponse: Swift.Equatable {

    public init() {}
}

struct HeadBucketOutputResponseBody: Swift.Equatable {
}

extension HeadBucketOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension HeadObjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HeadObjectInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), ifMatch: \(Swift.String(describing: ifMatch)), ifModifiedSince: \(Swift.String(describing: ifModifiedSince)), ifNoneMatch: \(Swift.String(describing: ifNoneMatch)), ifUnmodifiedSince: \(Swift.String(describing: ifUnmodifiedSince)), key: \(Swift.String(describing: key)), partNumber: \(Swift.String(describing: partNumber)), range: \(Swift.String(describing: range)), requestPayer: \(Swift.String(describing: requestPayer)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKey: \(Swift.String(describing: sSECustomerKey)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), versionId: \(Swift.String(describing: versionId)))"}
}

extension HeadObjectInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct HeadObjectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "HeadObjectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<HeadObjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<HeadObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let ifMatch = input.operationInput.ifMatch {
            input.builder.withHeader(name: "If-Match", value: Swift.String(ifMatch))
        }
        if let ifModifiedSince = input.operationInput.ifModifiedSince {
            input.builder.withHeader(name: "If-Modified-Since", value: Swift.String(ifModifiedSince.rfc5322()))
        }
        if let ifNoneMatch = input.operationInput.ifNoneMatch {
            input.builder.withHeader(name: "If-None-Match", value: Swift.String(ifNoneMatch))
        }
        if let ifUnmodifiedSince = input.operationInput.ifUnmodifiedSince {
            input.builder.withHeader(name: "If-Unmodified-Since", value: Swift.String(ifUnmodifiedSince.rfc5322()))
        }
        if let range = input.operationInput.range {
            input.builder.withHeader(name: "Range", value: Swift.String(range))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        if let sSECustomerAlgorithm = input.operationInput.sSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sSECustomerAlgorithm))
        }
        if let sSECustomerKey = input.operationInput.sSECustomerKey {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sSECustomerKey))
        }
        if let sSECustomerKeyMD5 = input.operationInput.sSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sSECustomerKeyMD5))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<HeadObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<HeadObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<HeadObjectOutputError>
}

public struct HeadObjectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "HeadObjectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<HeadObjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<HeadObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        if input.operationInput.partNumber != 0 {
            let partNumberQueryItem = ClientRuntime.URLQueryItem(name: "partNumber".urlPercentEncoding(), value: Swift.String(input.operationInput.partNumber).urlPercentEncoding())
            input.builder.withQueryItem(partNumberQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<HeadObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<HeadObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<HeadObjectOutputError>
}

public struct HeadObjectInput: Swift.Equatable {
    /// <p>The name of the bucket containing the object.</p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Return the object only if its entity tag (ETag) is the same as the one specified,
    ///          otherwise return a 412 (precondition failed).</p>
    public let ifMatch: Swift.String?
    /// <p>Return the object only if it has been modified since the specified time, otherwise
    ///          return a 304 (not modified).</p>
    public let ifModifiedSince: ClientRuntime.Date?
    /// <p>Return the object only if its entity tag (ETag) is different from the one specified,
    ///          otherwise return a 304 (not modified).</p>
    public let ifNoneMatch: Swift.String?
    /// <p>Return the object only if it has not been modified since the specified time, otherwise
    ///          return a 412 (precondition failed).</p>
    public let ifUnmodifiedSince: ClientRuntime.Date?
    /// <p>The object key.</p>
    public let key: Swift.String?
    /// <p>Part number of the object being read. This is a positive integer between 1 and 10,000.
    ///          Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about
    ///          the size of the part and the number of parts in this object.</p>
    public let partNumber: Swift.Int
    /// <p>Downloads the specified range bytes of an object. For more information about the HTTP
    ///          Range header, see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>.</p>
    ///          <note>
    ///             <p>Amazon S3 doesn't support retrieving multiple ranges of data per <code>GET</code>
    ///             request.</p>
    ///          </note>
    public let range: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>Specifies the algorithm to use to when encrypting the object (for example,
    ///          AES256).</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
    ///          value is used to store the object and then it is discarded; Amazon S3 does not store the
    ///          encryption key. The key must be appropriate for use with the algorithm specified in the
    ///             <code>x-amz-server-side-encryption-customer-algorithm</code> header.</p>
    public let sSECustomerKey: Swift.String?
    /// <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
    ///          this header for a message integrity check to ensure that the encryption key was transmitted
    ///          without error.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>VersionId used to reference a specific version of the object.</p>
    public let versionId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        ifMatch: Swift.String? = nil,
        ifModifiedSince: ClientRuntime.Date? = nil,
        ifNoneMatch: Swift.String? = nil,
        ifUnmodifiedSince: ClientRuntime.Date? = nil,
        key: Swift.String? = nil,
        partNumber: Swift.Int = 0,
        range: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKey: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.ifMatch = ifMatch
        self.ifModifiedSince = ifModifiedSince
        self.ifNoneMatch = ifNoneMatch
        self.ifUnmodifiedSince = ifUnmodifiedSince
        self.key = key
        self.partNumber = partNumber
        self.range = range
        self.requestPayer = requestPayer
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKey = sSECustomerKey
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.versionId = versionId
    }
}

struct HeadObjectInputBody: Swift.Equatable {
}

extension HeadObjectInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension HeadObjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension HeadObjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NotFound" : self = .notFound(try NotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum HeadObjectOutputError: Swift.Error, Swift.Equatable {
    case notFound(NotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension HeadObjectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HeadObjectOutputResponse(acceptRanges: \(Swift.String(describing: acceptRanges)), archiveStatus: \(Swift.String(describing: archiveStatus)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentLength: \(Swift.String(describing: contentLength)), contentType: \(Swift.String(describing: contentType)), deleteMarker: \(Swift.String(describing: deleteMarker)), eTag: \(Swift.String(describing: eTag)), expiration: \(Swift.String(describing: expiration)), expires: \(Swift.String(describing: expires)), lastModified: \(Swift.String(describing: lastModified)), metadata: \(Swift.String(describing: metadata)), missingMeta: \(Swift.String(describing: missingMeta)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), partsCount: \(Swift.String(describing: partsCount)), replicationStatus: \(Swift.String(describing: replicationStatus)), requestCharged: \(Swift.String(describing: requestCharged)), restore: \(Swift.String(describing: restore)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), sSEKMSKeyId: \(Swift.String(describing: sSEKMSKeyId)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), storageClass: \(Swift.String(describing: storageClass)), versionId: \(Swift.String(describing: versionId)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)))"}
}

extension HeadObjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let acceptRangesHeaderValue = httpResponse.headers.value(for: "accept-ranges") {
            self.acceptRanges = acceptRangesHeaderValue
        } else {
            self.acceptRanges = nil
        }
        if let archiveStatusHeaderValue = httpResponse.headers.value(for: "x-amz-archive-status") {
            self.archiveStatus = S3ClientTypes.ArchiveStatus(rawValue: archiveStatusHeaderValue)
        } else {
            self.archiveStatus = nil
        }
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = false
        }
        if let cacheControlHeaderValue = httpResponse.headers.value(for: "Cache-Control") {
            self.cacheControl = cacheControlHeaderValue
        } else {
            self.cacheControl = nil
        }
        if let contentDispositionHeaderValue = httpResponse.headers.value(for: "Content-Disposition") {
            self.contentDisposition = contentDispositionHeaderValue
        } else {
            self.contentDisposition = nil
        }
        if let contentEncodingHeaderValue = httpResponse.headers.value(for: "Content-Encoding") {
            self.contentEncoding = contentEncodingHeaderValue
        } else {
            self.contentEncoding = nil
        }
        if let contentLanguageHeaderValue = httpResponse.headers.value(for: "Content-Language") {
            self.contentLanguage = contentLanguageHeaderValue
        } else {
            self.contentLanguage = nil
        }
        if let contentLengthHeaderValue = httpResponse.headers.value(for: "Content-Length") {
            self.contentLength = Swift.Int(contentLengthHeaderValue) ?? 0
        } else {
            self.contentLength = 0
        }
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            self.contentType = contentTypeHeaderValue
        } else {
            self.contentType = nil
        }
        if let deleteMarkerHeaderValue = httpResponse.headers.value(for: "x-amz-delete-marker") {
            self.deleteMarker = Swift.Bool(deleteMarkerHeaderValue) ?? false
        } else {
            self.deleteMarker = false
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            self.eTag = eTagHeaderValue
        } else {
            self.eTag = nil
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            self.expiration = expirationHeaderValue
        } else {
            self.expiration = nil
        }
        if let expiresHeaderValue = httpResponse.headers.value(for: "Expires") {
            self.expires = DateFormatter.rfc5322DateFormatter.date(from: expiresHeaderValue)
        } else {
            self.expires = nil
        }
        if let lastModifiedHeaderValue = httpResponse.headers.value(for: "Last-Modified") {
            self.lastModified = DateFormatter.rfc5322DateFormatter.date(from: lastModifiedHeaderValue)
        } else {
            self.lastModified = nil
        }
        if let missingMetaHeaderValue = httpResponse.headers.value(for: "x-amz-missing-meta") {
            self.missingMeta = Swift.Int(missingMetaHeaderValue) ?? 0
        } else {
            self.missingMeta = 0
        }
        if let objectLockLegalHoldStatusHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-legal-hold") {
            self.objectLockLegalHoldStatus = S3ClientTypes.ObjectLockLegalHoldStatus(rawValue: objectLockLegalHoldStatusHeaderValue)
        } else {
            self.objectLockLegalHoldStatus = nil
        }
        if let objectLockModeHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-mode") {
            self.objectLockMode = S3ClientTypes.ObjectLockMode(rawValue: objectLockModeHeaderValue)
        } else {
            self.objectLockMode = nil
        }
        if let objectLockRetainUntilDateHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-retain-until-date") {
            self.objectLockRetainUntilDate = DateFormatter.iso8601DateFormatterWithoutFractionalSeconds.date(from: objectLockRetainUntilDateHeaderValue)
        } else {
            self.objectLockRetainUntilDate = nil
        }
        if let partsCountHeaderValue = httpResponse.headers.value(for: "x-amz-mp-parts-count") {
            self.partsCount = Swift.Int(partsCountHeaderValue) ?? 0
        } else {
            self.partsCount = 0
        }
        if let replicationStatusHeaderValue = httpResponse.headers.value(for: "x-amz-replication-status") {
            self.replicationStatus = S3ClientTypes.ReplicationStatus(rawValue: replicationStatusHeaderValue)
        } else {
            self.replicationStatus = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let restoreHeaderValue = httpResponse.headers.value(for: "x-amz-restore") {
            self.restore = restoreHeaderValue
        } else {
            self.restore = nil
        }
        if let sSECustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            self.sSECustomerAlgorithm = sSECustomerAlgorithmHeaderValue
        } else {
            self.sSECustomerAlgorithm = nil
        }
        if let sSECustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5HeaderValue
        } else {
            self.sSECustomerKeyMD5 = nil
        }
        if let sSEKMSKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.sSEKMSKeyId = sSEKMSKeyIdHeaderValue
        } else {
            self.sSEKMSKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
        if let storageClassHeaderValue = httpResponse.headers.value(for: "x-amz-storage-class") {
            self.storageClass = S3ClientTypes.StorageClass(rawValue: storageClassHeaderValue)
        } else {
            self.storageClass = nil
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
        if let websiteRedirectLocationHeaderValue = httpResponse.headers.value(for: "x-amz-website-redirect-location") {
            self.websiteRedirectLocation = websiteRedirectLocationHeaderValue
        } else {
            self.websiteRedirectLocation = nil
        }
        let keysForMetadata = httpResponse.headers.dictionary.keys.filter({ $0.starts(with: "x-amz-meta-") })
        if (!keysForMetadata.isEmpty) {
            var mapMember = [Swift.String: String]()
            for headerKey in keysForMetadata {
                let mapMemberValue = httpResponse.headers.dictionary[headerKey]?[0]
                let mapMemberKey = headerKey.removePrefix("x-amz-meta-")
                mapMember[mapMemberKey] = mapMemberValue
            }
            self.metadata = mapMember
        } else {
            self.metadata = [:]
        }
    }
}

public struct HeadObjectOutputResponse: Swift.Equatable {
    /// <p>Indicates that a range of bytes was specified.</p>
    public let acceptRanges: Swift.String?
    /// <p>The archive state of the head object.</p>
    public let archiveStatus: S3ClientTypes.ArchiveStatus?
    /// <p>Indicates whether the object uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>
    public let bucketKeyEnabled: Swift.Bool
    /// <p>Specifies caching behavior along the request/reply chain.</p>
    public let cacheControl: Swift.String?
    /// <p>Specifies presentational information for the object.</p>
    public let contentDisposition: Swift.String?
    /// <p>Specifies what content encodings have been applied to the object and thus what decoding
    ///          mechanisms must be applied to obtain the media-type referenced by the Content-Type header
    ///          field.</p>
    public let contentEncoding: Swift.String?
    /// <p>The language the content is in.</p>
    public let contentLanguage: Swift.String?
    /// <p>Size of the body in bytes.</p>
    public let contentLength: Swift.Int
    /// <p>A standard MIME type describing the format of the object data.</p>
    public let contentType: Swift.String?
    /// <p>Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If
    ///          false, this response header does not appear in the response.</p>
    public let deleteMarker: Swift.Bool
    /// <p>An ETag is an opaque identifier assigned by a web server to a specific version of a
    ///          resource found at a URL.</p>
    public let eTag: Swift.String?
    /// <p>If the object expiration is configured (see PUT Bucket lifecycle), the response includes
    ///          this header. It includes the expiry-date and rule-id key-value pairs providing object
    ///          expiration information. The value of the rule-id is URL encoded.</p>
    public let expiration: Swift.String?
    /// <p>The date and time at which the object is no longer cacheable.</p>
    public let expires: ClientRuntime.Date?
    /// <p>Creation date of the object.</p>
    public let lastModified: ClientRuntime.Date?
    /// <p>A map of metadata to store with the object in S3.</p>
    public let metadata: [Swift.String:Swift.String]?
    /// <p>This is set to the number of metadata entries not returned in <code>x-amz-meta</code>
    ///          headers. This can happen if you create metadata using an API like SOAP that supports more
    ///          flexible metadata than the REST API. For example, using SOAP, you can create metadata whose
    ///          values are not legal HTTP headers.</p>
    public let missingMeta: Swift.Int
    /// <p>Specifies whether a legal hold is in effect for this object. This header is only
    ///          returned if the requester has the <code>s3:GetObjectLegalHold</code> permission. This
    ///          header is not returned if the specified version of this object has never had a legal hold
    ///          applied. For more information about S3 Object Lock, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Object Lock</a>.</p>
    public let objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// <p>The Object Lock mode, if any, that's in effect for this object. This header is only
    ///          returned if the requester has the <code>s3:GetObjectRetention</code> permission. For more
    ///          information about S3 Object Lock, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Object
    ///             Lock</a>. </p>
    public let objectLockMode: S3ClientTypes.ObjectLockMode?
    /// <p>The date and time when the Object Lock retention period expires. This header is only
    ///          returned if the requester has the <code>s3:GetObjectRetention</code> permission.</p>
    public let objectLockRetainUntilDate: ClientRuntime.Date?
    /// <p>The count of parts this object has.</p>
    public let partsCount: Swift.Int
    /// <p>Amazon S3 can return this header if your request involves a bucket that is either a source or
    ///          a destination in a replication rule.</p>
    ///
    ///          <p>In replication, you have a source bucket on which you configure replication and
    ///          destination bucket or buckets where Amazon S3 stores object replicas. When you request an object
    ///             (<code>GetObject</code>) or object metadata (<code>HeadObject</code>) from these
    ///          buckets, Amazon S3 will return the <code>x-amz-replication-status</code> header in the response
    ///          as follows:</p>
    ///          <ul>
    ///             <li>
    ///                <p>If requesting an object from the source bucket — Amazon S3 will return the
    ///                   <code>x-amz-replication-status</code> header if the object in your request is
    ///                eligible for replication.</p>
    ///                <p> For example, suppose that in your replication configuration, you specify object
    ///                prefix <code>TaxDocs</code> requesting Amazon S3 to replicate objects with key prefix
    ///                   <code>TaxDocs</code>. Any objects you upload with this key name prefix, for
    ///                example <code>TaxDocs/document1.pdf</code>, are eligible for replication. For any
    ///                object request with this key name prefix, Amazon S3 will return the
    ///                   <code>x-amz-replication-status</code> header with value PENDING, COMPLETED or
    ///                FAILED indicating object replication status.</p>
    ///             </li>
    ///             <li>
    ///                <p>If requesting an object from a destination bucket — Amazon S3 will return the
    ///                   <code>x-amz-replication-status</code> header with value REPLICA if the object in
    ///                your request is a replica that Amazon S3 created and there is no replica modification
    ///                replication in progress.</p>
    ///             </li>
    ///             <li>
    ///                <p>When replicating objects to multiple destination buckets the
    ///                   <code>x-amz-replication-status</code> header acts differently. The header of the
    ///                source object will only return a value of COMPLETED when replication is successful to
    ///                all destinations. The header will remain at value PENDING until replication has
    ///                completed for all destinations. If one or more destinations fails replication the
    ///                header will return FAILED. </p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Replication</a>.</p>
    public let replicationStatus: S3ClientTypes.ReplicationStatus?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?
    /// <p>If the object is an archived object (an object whose storage class is GLACIER), the
    ///          response includes this header if either the archive restoration is in progress (see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html">RestoreObject</a> or an archive copy is already restored.</p>
    ///
    ///          <p> If an archive copy is already restored, the header value indicates when Amazon S3 is
    ///          scheduled to delete the object copy. For example:</p>
    ///
    ///          <p>
    ///             <code>x-amz-restore: ongoing-request="false", expiry-date="Fri, 21 Dec 2012 00:00:00
    ///             GMT"</code>
    ///          </p>
    ///
    ///          <p>If the object restoration is in progress, the header returns the value
    ///             <code>ongoing-request="true"</code>.</p>
    ///
    ///          <p>For more information about archiving objects, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-transition-general-considerations">Transitioning Objects: General Considerations</a>.</p>
    public let restore: Swift.String?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header confirming the encryption algorithm used.</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header to provide round-trip message integrity verification of
    ///          the customer-provided encryption key.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric
    ///          customer managed customer master key (CMK) that was used for the object.</p>
    public let sSEKMSKeyId: Swift.String?
    /// <p>If the object is stored using server-side encryption either with an AWS KMS customer
    ///          master key (CMK) or an Amazon S3-managed encryption key, the response includes this header with
    ///          the value of the server-side encryption algorithm used when storing this object in Amazon
    ///          S3 (for example, AES256, aws:kms).</p>
    public let serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// <p>Provides storage class information of the object. Amazon S3 returns this header for all
    ///          objects except for S3 Standard storage class objects.</p>
    ///
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage
    ///             Classes</a>.</p>
    public let storageClass: S3ClientTypes.StorageClass?
    /// <p>Version of the object.</p>
    public let versionId: Swift.String?
    /// <p>If the bucket is configured as a website, redirects requests for this object to another
    ///          object in the same bucket or to an external URL. Amazon S3 stores the value of this header in
    ///          the object metadata.</p>
    public let websiteRedirectLocation: Swift.String?

    public init (
        acceptRanges: Swift.String? = nil,
        archiveStatus: S3ClientTypes.ArchiveStatus? = nil,
        bucketKeyEnabled: Swift.Bool = false,
        cacheControl: Swift.String? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentLength: Swift.Int = 0,
        contentType: Swift.String? = nil,
        deleteMarker: Swift.Bool = false,
        eTag: Swift.String? = nil,
        expiration: Swift.String? = nil,
        expires: ClientRuntime.Date? = nil,
        lastModified: ClientRuntime.Date? = nil,
        metadata: [Swift.String:Swift.String]? = nil,
        missingMeta: Swift.Int = 0,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: ClientRuntime.Date? = nil,
        partsCount: Swift.Int = 0,
        replicationStatus: S3ClientTypes.ReplicationStatus? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        restore: Swift.String? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        sSEKMSKeyId: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        versionId: Swift.String? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.acceptRanges = acceptRanges
        self.archiveStatus = archiveStatus
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentLength = contentLength
        self.contentType = contentType
        self.deleteMarker = deleteMarker
        self.eTag = eTag
        self.expiration = expiration
        self.expires = expires
        self.lastModified = lastModified
        self.metadata = metadata
        self.missingMeta = missingMeta
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.partsCount = partsCount
        self.replicationStatus = replicationStatus
        self.requestCharged = requestCharged
        self.restore = restore
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
        self.storageClass = storageClass
        self.versionId = versionId
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

struct HeadObjectOutputResponseBody: Swift.Equatable {
}

extension HeadObjectOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes.IndexDocument: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suffix = "Suffix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let suffix = suffix {
            try container.encode(suffix, forKey: ClientRuntime.Key("Suffix"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suffixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .suffix)
        suffix = suffixDecoded
    }
}

extension S3ClientTypes.IndexDocument: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IndexDocument(suffix: \(Swift.String(describing: suffix)))"}
}

extension S3ClientTypes.IndexDocument: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for the <code>Suffix</code> element.</p>
    public struct IndexDocument: Swift.Equatable {
        /// <p>A suffix that is appended to a request that is for a directory on the website endpoint
        ///          (for example,if the suffix is index.html and you make a request to samplebucket/images/ the
        ///          data that is returned will be for the object with the key name images/index.html) The
        ///          suffix must not be empty and must not include a slash character.</p>
        ///          <important>
        ///             <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using
        ///          XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
        ///             XML related object key constraints</a>.</p>
        ///          </important>
        public let suffix: Swift.String?

        public init (
            suffix: Swift.String? = nil
        )
        {
            self.suffix = suffix
        }
    }

}

extension S3ClientTypes.Initiator: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case iD = "ID"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let displayName = displayName {
            try container.encode(displayName, forKey: ClientRuntime.Key("DisplayName"))
        }
        if let iD = iD {
            try container.encode(iD, forKey: ClientRuntime.Key("ID"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iD)
        iD = iDDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
    }
}

extension S3ClientTypes.Initiator: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Initiator(displayName: \(Swift.String(describing: displayName)), iD: \(Swift.String(describing: iD)))"}
}

extension S3ClientTypes.Initiator: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container element that identifies who initiated the multipart upload. </p>
    public struct Initiator: Swift.Equatable {
        /// <p>Name of the Principal.</p>
        public let displayName: Swift.String?
        /// <p>If the principal is an AWS account, it provides the Canonical User ID. If the principal
        ///          is an IAM User, it provides a user ARN value.</p>
        public let iD: Swift.String?

        public init (
            displayName: Swift.String? = nil,
            iD: Swift.String? = nil
        )
        {
            self.displayName = displayName
            self.iD = iD
        }
    }

}

extension S3ClientTypes.InputSerialization: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cSV = "CSV"
        case compressionType = "CompressionType"
        case jSON = "JSON"
        case parquet = "Parquet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let cSV = cSV {
            try container.encode(cSV, forKey: ClientRuntime.Key("CSV"))
        }
        if let compressionType = compressionType {
            try container.encode(compressionType, forKey: ClientRuntime.Key("CompressionType"))
        }
        if let jSON = jSON {
            try container.encode(jSON, forKey: ClientRuntime.Key("JSON"))
        }
        if let parquet = parquet {
            try container.encode(parquet, forKey: ClientRuntime.Key("Parquet"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cSVDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CSVInput.self, forKey: .cSV)
        cSV = cSVDecoded
        let compressionTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CompressionType.self, forKey: .compressionType)
        compressionType = compressionTypeDecoded
        let jSONDecoded = try containerValues.decodeIfPresent(S3ClientTypes.JSONInput.self, forKey: .jSON)
        jSON = jSONDecoded
        let parquetDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ParquetInput.self, forKey: .parquet)
        parquet = parquetDecoded
    }
}

extension S3ClientTypes.InputSerialization: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InputSerialization(cSV: \(Swift.String(describing: cSV)), compressionType: \(Swift.String(describing: compressionType)), jSON: \(Swift.String(describing: jSON)), parquet: \(Swift.String(describing: parquet)))"}
}

extension S3ClientTypes.InputSerialization: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Describes the serialization format of the object.</p>
    public struct InputSerialization: Swift.Equatable {
        /// <p>Describes the serialization of a CSV-encoded object.</p>
        public let cSV: S3ClientTypes.CSVInput?
        /// <p>Specifies object's compression format. Valid values: NONE, GZIP, BZIP2. Default Value:
        ///          NONE.</p>
        public let compressionType: S3ClientTypes.CompressionType?
        /// <p>Specifies JSON as object's input serialization format.</p>
        public let jSON: S3ClientTypes.JSONInput?
        /// <p>Specifies Parquet as object's input serialization format.</p>
        public let parquet: S3ClientTypes.ParquetInput?

        public init (
            cSV: S3ClientTypes.CSVInput? = nil,
            compressionType: S3ClientTypes.CompressionType? = nil,
            jSON: S3ClientTypes.JSONInput? = nil,
            parquet: S3ClientTypes.ParquetInput? = nil
        )
        {
            self.cSV = cSV
            self.compressionType = compressionType
            self.jSON = jSON
            self.parquet = parquet
        }
    }

}

extension S3ClientTypes {
    public enum IntelligentTieringAccessTier: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case archiveAccess
        case deepArchiveAccess
        case sdkUnknown(Swift.String)

        public static var allCases: [IntelligentTieringAccessTier] {
            return [
                .archiveAccess,
                .deepArchiveAccess,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .archiveAccess: return "ARCHIVE_ACCESS"
            case .deepArchiveAccess: return "DEEP_ARCHIVE_ACCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IntelligentTieringAccessTier(rawValue: rawValue) ?? IntelligentTieringAccessTier.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.IntelligentTieringAndOperator: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case prefix = "Prefix"
        case tags = "Tag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
        }
        if let tags = tags {
            if tags.isEmpty {
                var tagsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Tag"))
                try tagsContainer.encodeNil()
            } else {
                for tag0 in tags {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tag"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        if containerValues.contains(.tags) {
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .tags)
                var tagsBuffer:[S3ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension S3ClientTypes.IntelligentTieringAndOperator: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IntelligentTieringAndOperator(prefix: \(Swift.String(describing: prefix)), tags: \(Swift.String(describing: tags)))"}
}

extension S3ClientTypes.IntelligentTieringAndOperator: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A container for specifying S3 Intelligent-Tiering filters. The filters determine the
    ///          subset of objects to which the rule applies.</p>
    public struct IntelligentTieringAndOperator: Swift.Equatable {
        /// <p>An object key name prefix that identifies the subset of objects to which the
        ///          configuration applies.</p>
        public let prefix: Swift.String?
        /// <p>All of these tags must exist in the object's tag set in order for the configuration to
        ///          apply.</p>
        public let tags: [S3ClientTypes.Tag]?

        public init (
            prefix: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.prefix = prefix
            self.tags = tags
        }
    }

}

extension S3ClientTypes.IntelligentTieringConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case id = "Id"
        case status = "Status"
        case tierings = "Tiering"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let filter = filter {
            try container.encode(filter, forKey: ClientRuntime.Key("Filter"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tierings = tierings {
            if tierings.isEmpty {
                var tieringsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Tiering"))
                try tieringsContainer.encodeNil()
            } else {
                for tiering0 in tierings {
                    var tieringsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tiering"))
                    try tieringsContainer0.encode(tiering0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IntelligentTieringFilter.self, forKey: .filter)
        filter = filterDecoded
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IntelligentTieringStatus.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.tierings) {
            let tieringsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .tierings)
            if tieringsWrappedContainer != nil {
                let tieringsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Tiering].self, forKey: .tierings)
                var tieringsBuffer:[S3ClientTypes.Tiering]? = nil
                if let tieringsContainer = tieringsContainer {
                    tieringsBuffer = [S3ClientTypes.Tiering]()
                    for structureContainer0 in tieringsContainer {
                        tieringsBuffer?.append(structureContainer0)
                    }
                }
                tierings = tieringsBuffer
            } else {
                tierings = []
            }
        } else {
            tierings = nil
        }
    }
}

extension S3ClientTypes.IntelligentTieringConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IntelligentTieringConfiguration(filter: \(Swift.String(describing: filter)), id: \(Swift.String(describing: id)), status: \(Swift.String(describing: status)), tierings: \(Swift.String(describing: tierings)))"}
}

extension S3ClientTypes.IntelligentTieringConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket.</p>
    ///          <p>For information about the S3 Intelligent-Tiering storage class, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access">Storage class for
    ///             automatically optimizing frequently and infrequently accessed objects</a>.</p>
    public struct IntelligentTieringConfiguration: Swift.Equatable {
        /// <p>Specifies a bucket filter. The configuration only includes objects that meet the
        ///          filter's criteria.</p>
        public let filter: S3ClientTypes.IntelligentTieringFilter?
        /// <p>The ID used to identify the S3 Intelligent-Tiering configuration.</p>
        public let id: Swift.String?
        /// <p>Specifies the status of the configuration.</p>
        public let status: S3ClientTypes.IntelligentTieringStatus?
        /// <p>Specifies the S3 Intelligent-Tiering storage class tier of the configuration.</p>
        public let tierings: [S3ClientTypes.Tiering]?

        public init (
            filter: S3ClientTypes.IntelligentTieringFilter? = nil,
            id: Swift.String? = nil,
            status: S3ClientTypes.IntelligentTieringStatus? = nil,
            tierings: [S3ClientTypes.Tiering]? = nil
        )
        {
            self.filter = filter
            self.id = id
            self.status = status
            self.tierings = tierings
        }
    }

}

extension S3ClientTypes.IntelligentTieringFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case and = "And"
        case prefix = "Prefix"
        case tag = "Tag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let and = and {
            try container.encode(and, forKey: ClientRuntime.Key("And"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
        }
        if let tag = tag {
            try container.encode(tag, forKey: ClientRuntime.Key("Tag"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let tagDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tag.self, forKey: .tag)
        tag = tagDecoded
        let andDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IntelligentTieringAndOperator.self, forKey: .and)
        and = andDecoded
    }
}

extension S3ClientTypes.IntelligentTieringFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IntelligentTieringFilter(and: \(Swift.String(describing: and)), prefix: \(Swift.String(describing: prefix)), tag: \(Swift.String(describing: tag)))"}
}

extension S3ClientTypes.IntelligentTieringFilter: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>The <code>Filter</code> is used to identify objects that the S3 Intelligent-Tiering
    ///          configuration applies to.</p>
    public struct IntelligentTieringFilter: Swift.Equatable {
        /// <p>A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter.
        ///          The operator must have at least two predicates, and an object must match all of the
        ///          predicates in order for the filter to apply.</p>
        public let and: S3ClientTypes.IntelligentTieringAndOperator?
        /// <p>An object key name prefix that identifies the subset of objects to which the rule
        ///          applies.</p>
        ///          <important>
        ///             <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using
        ///          XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
        ///             XML related object key constraints</a>.</p>
        ///          </important>
        public let prefix: Swift.String?
        /// <p>A container of a key value name pair.</p>
        public let tag: S3ClientTypes.Tag?

        public init (
            and: S3ClientTypes.IntelligentTieringAndOperator? = nil,
            prefix: Swift.String? = nil,
            tag: S3ClientTypes.Tag? = nil
        )
        {
            self.and = and
            self.prefix = prefix
            self.tag = tag
        }
    }

}

extension S3ClientTypes {
    public enum IntelligentTieringStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [IntelligentTieringStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IntelligentTieringStatus(rawValue: rawValue) ?? IntelligentTieringStatus.sdkUnknown(rawValue)
        }
    }
}

extension InvalidObjectState: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidObjectState(accessTier: \(Swift.String(describing: accessTier)), storageClass: \(Swift.String(describing: storageClass)))"}
}

extension InvalidObjectState: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidObjectStateBody = try responseDecoder.decode(responseBody: data)
            self.accessTier = output.accessTier
            self.storageClass = output.storageClass
        } else {
            self.accessTier = nil
            self.storageClass = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Object is archived and inaccessible until restored.</p>
public struct InvalidObjectState: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var accessTier: S3ClientTypes.IntelligentTieringAccessTier?
    public var storageClass: S3ClientTypes.StorageClass?

    public init (
        accessTier: S3ClientTypes.IntelligentTieringAccessTier? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil
    )
    {
        self.accessTier = accessTier
        self.storageClass = storageClass
    }
}

struct InvalidObjectStateBody: Swift.Equatable {
    public let storageClass: S3ClientTypes.StorageClass?
    public let accessTier: S3ClientTypes.IntelligentTieringAccessTier?
}

extension InvalidObjectStateBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTier = "AccessTier"
        case storageClass = "StorageClass"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let accessTierDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IntelligentTieringAccessTier.self, forKey: .accessTier)
        accessTier = accessTierDecoded
    }
}

extension S3ClientTypes.InventoryConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case filter = "Filter"
        case id = "Id"
        case includedObjectVersions = "IncludedObjectVersions"
        case isEnabled = "IsEnabled"
        case optionalFields = "OptionalFields"
        case schedule = "Schedule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let filter = filter {
            try container.encode(filter, forKey: ClientRuntime.Key("Filter"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let includedObjectVersions = includedObjectVersions {
            try container.encode(includedObjectVersions, forKey: ClientRuntime.Key("IncludedObjectVersions"))
        }
        if isEnabled != false {
            try container.encode(isEnabled, forKey: ClientRuntime.Key("IsEnabled"))
        }
        if let optionalFields = optionalFields {
            var optionalFieldsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionalFields"))
            for inventoryoptionalfield0 in optionalFields {
                try optionalFieldsContainer.encode(inventoryoptionalfield0, forKey: ClientRuntime.Key("Field"))
            }
        }
        if let schedule = schedule {
            try container.encode(schedule, forKey: ClientRuntime.Key("Schedule"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryDestination.self, forKey: .destination)
        destination = destinationDecoded
        let isEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isEnabled)
        isEnabled = isEnabledDecoded
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryFilter.self, forKey: .filter)
        filter = filterDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let includedObjectVersionsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryIncludedObjectVersions.self, forKey: .includedObjectVersions)
        includedObjectVersions = includedObjectVersionsDecoded
        if containerValues.contains(.optionalFields) {
            struct KeyVal0{struct Field{}}
            let optionalFieldsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Field>.CodingKeys.self, forKey: .optionalFields)
            if let optionalFieldsWrappedContainer = optionalFieldsWrappedContainer {
                let optionalFieldsContainer = try optionalFieldsWrappedContainer.decodeIfPresent([S3ClientTypes.InventoryOptionalField].self, forKey: .member)
                var optionalFieldsBuffer:[S3ClientTypes.InventoryOptionalField]? = nil
                if let optionalFieldsContainer = optionalFieldsContainer {
                    optionalFieldsBuffer = [S3ClientTypes.InventoryOptionalField]()
                    for stringContainer0 in optionalFieldsContainer {
                        optionalFieldsBuffer?.append(stringContainer0)
                    }
                }
                optionalFields = optionalFieldsBuffer
            } else {
                optionalFields = []
            }
        } else {
            optionalFields = nil
        }
        let scheduleDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventorySchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
    }
}

extension S3ClientTypes.InventoryConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InventoryConfiguration(destination: \(Swift.String(describing: destination)), filter: \(Swift.String(describing: filter)), id: \(Swift.String(describing: id)), includedObjectVersions: \(Swift.String(describing: includedObjectVersions)), isEnabled: \(Swift.String(describing: isEnabled)), optionalFields: \(Swift.String(describing: optionalFields)), schedule: \(Swift.String(describing: schedule)))"}
}

extension S3ClientTypes.InventoryConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the inventory configuration for an Amazon S3 bucket. For more information, see
    ///             <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html">GET Bucket inventory</a> in the <i>Amazon S3 API Reference</i>.
    ///       </p>
    public struct InventoryConfiguration: Swift.Equatable {
        /// <p>Contains information about where to publish the inventory results.</p>
        public let destination: S3ClientTypes.InventoryDestination?
        /// <p>Specifies an inventory filter. The inventory only includes objects that meet the
        ///          filter's criteria.</p>
        public let filter: S3ClientTypes.InventoryFilter?
        /// <p>The ID used to identify the inventory configuration.</p>
        public let id: Swift.String?
        /// <p>Object versions to include in the inventory list. If set to <code>All</code>, the list
        ///          includes all the object versions, which adds the version-related fields
        ///             <code>VersionId</code>, <code>IsLatest</code>, and <code>DeleteMarker</code> to the
        ///          list. If set to <code>Current</code>, the list does not contain these version-related
        ///          fields.</p>
        public let includedObjectVersions: S3ClientTypes.InventoryIncludedObjectVersions?
        /// <p>Specifies whether the inventory is enabled or disabled. If set to <code>True</code>, an
        ///          inventory list is generated. If set to <code>False</code>, no inventory list is
        ///          generated.</p>
        public let isEnabled: Swift.Bool
        /// <p>Contains the optional fields that are included in the inventory results.</p>
        public let optionalFields: [S3ClientTypes.InventoryOptionalField]?
        /// <p>Specifies the schedule for generating inventory results.</p>
        public let schedule: S3ClientTypes.InventorySchedule?

        public init (
            destination: S3ClientTypes.InventoryDestination? = nil,
            filter: S3ClientTypes.InventoryFilter? = nil,
            id: Swift.String? = nil,
            includedObjectVersions: S3ClientTypes.InventoryIncludedObjectVersions? = nil,
            isEnabled: Swift.Bool = false,
            optionalFields: [S3ClientTypes.InventoryOptionalField]? = nil,
            schedule: S3ClientTypes.InventorySchedule? = nil
        )
        {
            self.destination = destination
            self.filter = filter
            self.id = id
            self.includedObjectVersions = includedObjectVersions
            self.isEnabled = isEnabled
            self.optionalFields = optionalFields
            self.schedule = schedule
        }
    }

}

extension S3ClientTypes.InventoryDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3BucketDestination = "S3BucketDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let s3BucketDestination = s3BucketDestination {
            try container.encode(s3BucketDestination, forKey: ClientRuntime.Key("S3BucketDestination"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3BucketDestinationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryS3BucketDestination.self, forKey: .s3BucketDestination)
        s3BucketDestination = s3BucketDestinationDecoded
    }
}

extension S3ClientTypes.InventoryDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InventoryDestination(s3BucketDestination: \(Swift.String(describing: s3BucketDestination)))"}
}

extension S3ClientTypes.InventoryDestination: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the inventory configuration for an Amazon S3 bucket.</p>
    public struct InventoryDestination: Swift.Equatable {
        /// <p>Contains the bucket name, file format, bucket owner (optional), and prefix (optional)
        ///          where inventory results are published.</p>
        public let s3BucketDestination: S3ClientTypes.InventoryS3BucketDestination?

        public init (
            s3BucketDestination: S3ClientTypes.InventoryS3BucketDestination? = nil
        )
        {
            self.s3BucketDestination = s3BucketDestination
        }
    }

}

extension S3ClientTypes.InventoryEncryption: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sSEKMS = "SSE-KMS"
        case sSES3 = "SSE-S3"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let sSEKMS = sSEKMS {
            try container.encode(sSEKMS, forKey: ClientRuntime.Key("SSE-KMS"))
        }
        if let sSES3 = sSES3 {
            try container.encode(sSES3, forKey: ClientRuntime.Key("SSE-S3"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sSES3Decoded = try containerValues.decodeIfPresent(S3ClientTypes.SSES3.self, forKey: .sSES3)
        sSES3 = sSES3Decoded
        let sSEKMSDecoded = try containerValues.decodeIfPresent(S3ClientTypes.SSEKMS.self, forKey: .sSEKMS)
        sSEKMS = sSEKMSDecoded
    }
}

extension S3ClientTypes.InventoryEncryption: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InventoryEncryption(sSEKMS: \(Swift.String(describing: sSEKMS)), sSES3: \(Swift.String(describing: sSES3)))"}
}

extension S3ClientTypes.InventoryEncryption: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Contains the type of server-side encryption used to encrypt the inventory
    ///          results.</p>
    public struct InventoryEncryption: Swift.Equatable {
        /// <p>Specifies the use of SSE-KMS to encrypt delivered inventory reports.</p>
        public let sSEKMS: S3ClientTypes.SSEKMS?
        /// <p>Specifies the use of SSE-S3 to encrypt delivered inventory reports.</p>
        public let sSES3: S3ClientTypes.SSES3?

        public init (
            sSEKMS: S3ClientTypes.SSEKMS? = nil,
            sSES3: S3ClientTypes.SSES3? = nil
        )
        {
            self.sSEKMS = sSEKMS
            self.sSES3 = sSES3
        }
    }

}

extension S3ClientTypes.InventoryFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case prefix = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
    }
}

extension S3ClientTypes.InventoryFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InventoryFilter(prefix: \(Swift.String(describing: prefix)))"}
}

extension S3ClientTypes.InventoryFilter: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies an inventory filter. The inventory only includes objects that meet the
    ///          filter's criteria.</p>
    public struct InventoryFilter: Swift.Equatable {
        /// <p>The prefix that an object must have to be included in the inventory results.</p>
        public let prefix: Swift.String?

        public init (
            prefix: Swift.String? = nil
        )
        {
            self.prefix = prefix
        }
    }

}

extension S3ClientTypes {
    public enum InventoryFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case csv
        case orc
        case parquet
        case sdkUnknown(Swift.String)

        public static var allCases: [InventoryFormat] {
            return [
                .csv,
                .orc,
                .parquet,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .orc: return "ORC"
            case .parquet: return "Parquet"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InventoryFormat(rawValue: rawValue) ?? InventoryFormat.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum InventoryFrequency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case daily
        case weekly
        case sdkUnknown(Swift.String)

        public static var allCases: [InventoryFrequency] {
            return [
                .daily,
                .weekly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .daily: return "Daily"
            case .weekly: return "Weekly"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InventoryFrequency(rawValue: rawValue) ?? InventoryFrequency.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum InventoryIncludedObjectVersions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case current
        case sdkUnknown(Swift.String)

        public static var allCases: [InventoryIncludedObjectVersions] {
            return [
                .all,
                .current,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "All"
            case .current: return "Current"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InventoryIncludedObjectVersions(rawValue: rawValue) ?? InventoryIncludedObjectVersions.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum InventoryOptionalField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bucketkeystatus
        case etag
        case encryptionstatus
        case intelligenttieringaccesstier
        case ismultipartuploaded
        case lastmodifieddate
        case objectlocklegalholdstatus
        case objectlockmode
        case objectlockretainuntildate
        case replicationstatus
        case size
        case storageclass
        case sdkUnknown(Swift.String)

        public static var allCases: [InventoryOptionalField] {
            return [
                .bucketkeystatus,
                .etag,
                .encryptionstatus,
                .intelligenttieringaccesstier,
                .ismultipartuploaded,
                .lastmodifieddate,
                .objectlocklegalholdstatus,
                .objectlockmode,
                .objectlockretainuntildate,
                .replicationstatus,
                .size,
                .storageclass,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bucketkeystatus: return "BucketKeyStatus"
            case .etag: return "ETag"
            case .encryptionstatus: return "EncryptionStatus"
            case .intelligenttieringaccesstier: return "IntelligentTieringAccessTier"
            case .ismultipartuploaded: return "IsMultipartUploaded"
            case .lastmodifieddate: return "LastModifiedDate"
            case .objectlocklegalholdstatus: return "ObjectLockLegalHoldStatus"
            case .objectlockmode: return "ObjectLockMode"
            case .objectlockretainuntildate: return "ObjectLockRetainUntilDate"
            case .replicationstatus: return "ReplicationStatus"
            case .size: return "Size"
            case .storageclass: return "StorageClass"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InventoryOptionalField(rawValue: rawValue) ?? InventoryOptionalField.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.InventoryS3BucketDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case bucket = "Bucket"
        case encryption = "Encryption"
        case format = "Format"
        case prefix = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let accountId = accountId {
            try container.encode(accountId, forKey: ClientRuntime.Key("AccountId"))
        }
        if let bucket = bucket {
            try container.encode(bucket, forKey: ClientRuntime.Key("Bucket"))
        }
        if let encryption = encryption {
            try container.encode(encryption, forKey: ClientRuntime.Key("Encryption"))
        }
        if let format = format {
            try container.encode(format, forKey: ClientRuntime.Key("Format"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let formatDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryFormat.self, forKey: .format)
        format = formatDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryEncryption.self, forKey: .encryption)
        encryption = encryptionDecoded
    }
}

extension S3ClientTypes.InventoryS3BucketDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InventoryS3BucketDestination(accountId: \(Swift.String(describing: accountId)), bucket: \(Swift.String(describing: bucket)), encryption: \(Swift.String(describing: encryption)), format: \(Swift.String(describing: format)), prefix: \(Swift.String(describing: prefix)))"}
}

extension S3ClientTypes.InventoryS3BucketDestination: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Contains the bucket name, file format, bucket owner (optional), and prefix (optional)
    ///          where inventory results are published.</p>
    public struct InventoryS3BucketDestination: Swift.Equatable {
        /// <p>The account ID that owns the destination S3 bucket. If no account ID is provided, the
        ///          owner is not validated before exporting data. </p>
        ///          <note>
        ///             <p> Although this value is optional, we strongly recommend that you set it to help
        ///             prevent problems if the destination bucket ownership changes. </p>
        ///          </note>
        public let accountId: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the bucket where inventory results will be
        ///          published.</p>
        public let bucket: Swift.String?
        /// <p>Contains the type of server-side encryption used to encrypt the inventory
        ///          results.</p>
        public let encryption: S3ClientTypes.InventoryEncryption?
        /// <p>Specifies the output format of the inventory results.</p>
        public let format: S3ClientTypes.InventoryFormat?
        /// <p>The prefix that is prepended to all inventory results.</p>
        public let prefix: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            bucket: Swift.String? = nil,
            encryption: S3ClientTypes.InventoryEncryption? = nil,
            format: S3ClientTypes.InventoryFormat? = nil,
            prefix: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.bucket = bucket
            self.encryption = encryption
            self.format = format
            self.prefix = prefix
        }
    }

}

extension S3ClientTypes.InventorySchedule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case frequency = "Frequency"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let frequency = frequency {
            try container.encode(frequency, forKey: ClientRuntime.Key("Frequency"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let frequencyDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryFrequency.self, forKey: .frequency)
        frequency = frequencyDecoded
    }
}

extension S3ClientTypes.InventorySchedule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InventorySchedule(frequency: \(Swift.String(describing: frequency)))"}
}

extension S3ClientTypes.InventorySchedule: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the schedule for generating inventory results.</p>
    public struct InventorySchedule: Swift.Equatable {
        /// <p>Specifies how frequently inventory results are produced.</p>
        public let frequency: S3ClientTypes.InventoryFrequency?

        public init (
            frequency: S3ClientTypes.InventoryFrequency? = nil
        )
        {
            self.frequency = frequency
        }
    }

}

extension S3ClientTypes.JSONInput: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.JSONType.self, forKey: .type)
        type = typeDecoded
    }
}

extension S3ClientTypes.JSONInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JSONInput(type: \(Swift.String(describing: type)))"}
}

extension S3ClientTypes.JSONInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies JSON as object's input serialization format.</p>
    public struct JSONInput: Swift.Equatable {
        /// <p>The type of JSON. Valid values: Document, Lines.</p>
        public let type: S3ClientTypes.JSONType?

        public init (
            type: S3ClientTypes.JSONType? = nil
        )
        {
            self.type = type
        }
    }

}

extension S3ClientTypes.JSONOutput: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recordDelimiter = "RecordDelimiter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let recordDelimiter = recordDelimiter {
            try container.encode(recordDelimiter, forKey: ClientRuntime.Key("RecordDelimiter"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordDelimiter)
        recordDelimiter = recordDelimiterDecoded
    }
}

extension S3ClientTypes.JSONOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JSONOutput(recordDelimiter: \(Swift.String(describing: recordDelimiter)))"}
}

extension S3ClientTypes.JSONOutput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies JSON as request's output serialization format.</p>
    public struct JSONOutput: Swift.Equatable {
        /// <p>The value used to separate individual records in the output. If no value is specified,
        ///          Amazon S3 uses a newline character ('\n').</p>
        public let recordDelimiter: Swift.String?

        public init (
            recordDelimiter: Swift.String? = nil
        )
        {
            self.recordDelimiter = recordDelimiter
        }
    }

}

extension S3ClientTypes {
    public enum JSONType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case document
        case lines
        case sdkUnknown(Swift.String)

        public static var allCases: [JSONType] {
            return [
                .document,
                .lines,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .document: return "DOCUMENT"
            case .lines: return "LINES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JSONType(rawValue: rawValue) ?? JSONType.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.LambdaFunctionConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Event"
        case filter = "Filter"
        case id = "Id"
        case lambdaFunctionArn = "CloudFunction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let events = events {
            if events.isEmpty {
                var eventsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Event"))
                try eventsContainer.encodeNil()
            } else {
                for event0 in events {
                    var eventsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Event"))
                    try eventsContainer0.encode(event0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let filter = filter {
            try container.encode(filter, forKey: ClientRuntime.Key("Filter"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let lambdaFunctionArn = lambdaFunctionArn {
            try container.encode(lambdaFunctionArn, forKey: ClientRuntime.Key("CloudFunction"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lambdaFunctionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaFunctionArn)
        lambdaFunctionArn = lambdaFunctionArnDecoded
        if containerValues.contains(.events) {
            let eventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .events)
            if eventsWrappedContainer != nil {
                let eventsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Event].self, forKey: .events)
                var eventsBuffer:[S3ClientTypes.Event]? = nil
                if let eventsContainer = eventsContainer {
                    eventsBuffer = [S3ClientTypes.Event]()
                    for stringContainer0 in eventsContainer {
                        eventsBuffer?.append(stringContainer0)
                    }
                }
                events = eventsBuffer
            } else {
                events = []
            }
        } else {
            events = nil
        }
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.NotificationConfigurationFilter.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension S3ClientTypes.LambdaFunctionConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LambdaFunctionConfiguration(events: \(Swift.String(describing: events)), filter: \(Swift.String(describing: filter)), id: \(Swift.String(describing: id)), lambdaFunctionArn: \(Swift.String(describing: lambdaFunctionArn)))"}
}

extension S3ClientTypes.LambdaFunctionConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A container for specifying the configuration for AWS Lambda notifications.</p>
    public struct LambdaFunctionConfiguration: Swift.Equatable {
        /// <p>The Amazon S3 bucket event for which to invoke the AWS Lambda function. For more information,
        ///          see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Supported
        ///             Event Types</a> in the <i>Amazon S3 User Guide</i>.</p>
        public let events: [S3ClientTypes.Event]?
        /// <p>Specifies object key name filtering rules. For information about key name filtering, see
        ///             <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring
        ///             Event Notifications</a> in the <i>Amazon S3 User Guide</i>.</p>
        public let filter: S3ClientTypes.NotificationConfigurationFilter?
        /// <p>An optional unique identifier for configurations in a notification configuration. If you
        ///          don't provide one, Amazon S3 will assign an ID.</p>
        public let id: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the AWS Lambda function that Amazon S3 invokes when the
        ///          specified event type occurs.</p>
        public let lambdaFunctionArn: Swift.String?

        public init (
            events: [S3ClientTypes.Event]? = nil,
            filter: S3ClientTypes.NotificationConfigurationFilter? = nil,
            id: Swift.String? = nil,
            lambdaFunctionArn: Swift.String? = nil
        )
        {
            self.events = events
            self.filter = filter
            self.id = id
            self.lambdaFunctionArn = lambdaFunctionArn
        }
    }

}

extension S3ClientTypes.LifecycleExpiration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case date = "Date"
        case days = "Days"
        case expiredObjectDeleteMarker = "ExpiredObjectDeleteMarker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let date = date {
            try container.encode(ClientRuntime.TimestampWrapper(date, format: .dateTime), forKey: ClientRuntime.Key("Date"))
        }
        if days != 0 {
            try container.encode(days, forKey: ClientRuntime.Key("Days"))
        }
        if expiredObjectDeleteMarker != false {
            try container.encode(expiredObjectDeleteMarker, forKey: ClientRuntime.Key("ExpiredObjectDeleteMarker"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .date)
        var dateBuffer:ClientRuntime.Date? = nil
        if let dateDecoded = dateDecoded {
            dateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(dateDecoded, format: .dateTime)
        }
        date = dateBuffer
        let daysDecoded = try containerValues.decode(Swift.Int.self, forKey: .days)
        days = daysDecoded
        let expiredObjectDeleteMarkerDecoded = try containerValues.decode(Swift.Bool.self, forKey: .expiredObjectDeleteMarker)
        expiredObjectDeleteMarker = expiredObjectDeleteMarkerDecoded
    }
}

extension S3ClientTypes.LifecycleExpiration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LifecycleExpiration(date: \(Swift.String(describing: date)), days: \(Swift.String(describing: days)), expiredObjectDeleteMarker: \(Swift.String(describing: expiredObjectDeleteMarker)))"}
}

extension S3ClientTypes.LifecycleExpiration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for the expiration for the lifecycle of the object.</p>
    public struct LifecycleExpiration: Swift.Equatable {
        /// <p>Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601
        ///          Format.</p>
        public let date: ClientRuntime.Date?
        /// <p>Indicates the lifetime, in days, of the objects that are subject to the rule. The value
        ///          must be a non-zero positive integer.</p>
        public let days: Swift.Int
        /// <p>Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set
        ///          to true, the delete marker will be expired; if set to false the policy takes no action.
        ///          This cannot be specified with Days or Date in a Lifecycle Expiration Policy.</p>
        public let expiredObjectDeleteMarker: Swift.Bool

        public init (
            date: ClientRuntime.Date? = nil,
            days: Swift.Int = 0,
            expiredObjectDeleteMarker: Swift.Bool = false
        )
        {
            self.date = date
            self.days = days
            self.expiredObjectDeleteMarker = expiredObjectDeleteMarker
        }
    }

}

extension S3ClientTypes.LifecycleRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortIncompleteMultipartUpload = "AbortIncompleteMultipartUpload"
        case expiration = "Expiration"
        case filter = "Filter"
        case iD = "ID"
        case noncurrentVersionExpiration = "NoncurrentVersionExpiration"
        case noncurrentVersionTransitions = "NoncurrentVersionTransition"
        case prefix = "Prefix"
        case status = "Status"
        case transitions = "Transition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let abortIncompleteMultipartUpload = abortIncompleteMultipartUpload {
            try container.encode(abortIncompleteMultipartUpload, forKey: ClientRuntime.Key("AbortIncompleteMultipartUpload"))
        }
        if let expiration = expiration {
            try container.encode(expiration, forKey: ClientRuntime.Key("Expiration"))
        }
        if let filter = filter {
            try container.encode(filter, forKey: ClientRuntime.Key("Filter"))
        }
        if let iD = iD {
            try container.encode(iD, forKey: ClientRuntime.Key("ID"))
        }
        if let noncurrentVersionExpiration = noncurrentVersionExpiration {
            try container.encode(noncurrentVersionExpiration, forKey: ClientRuntime.Key("NoncurrentVersionExpiration"))
        }
        if let noncurrentVersionTransitions = noncurrentVersionTransitions {
            if noncurrentVersionTransitions.isEmpty {
                var noncurrentVersionTransitionsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("NoncurrentVersionTransition"))
                try noncurrentVersionTransitionsContainer.encodeNil()
            } else {
                for noncurrentversiontransition0 in noncurrentVersionTransitions {
                    var noncurrentVersionTransitionsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NoncurrentVersionTransition"))
                    try noncurrentVersionTransitionsContainer0.encode(noncurrentversiontransition0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let transitions = transitions {
            if transitions.isEmpty {
                var transitionsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Transition"))
                try transitionsContainer.encodeNil()
            } else {
                for transition0 in transitions {
                    var transitionsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Transition"))
                    try transitionsContainer0.encode(transition0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expirationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.LifecycleExpiration.self, forKey: .expiration)
        expiration = expirationDecoded
        let iDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iD)
        iD = iDDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.LifecycleRuleFilter.self, forKey: .filter)
        filter = filterDecoded
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ExpirationStatus.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.transitions) {
            let transitionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .transitions)
            if transitionsWrappedContainer != nil {
                let transitionsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Transition].self, forKey: .transitions)
                var transitionsBuffer:[S3ClientTypes.Transition]? = nil
                if let transitionsContainer = transitionsContainer {
                    transitionsBuffer = [S3ClientTypes.Transition]()
                    for structureContainer0 in transitionsContainer {
                        transitionsBuffer?.append(structureContainer0)
                    }
                }
                transitions = transitionsBuffer
            } else {
                transitions = []
            }
        } else {
            transitions = nil
        }
        if containerValues.contains(.noncurrentVersionTransitions) {
            let noncurrentVersionTransitionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .noncurrentVersionTransitions)
            if noncurrentVersionTransitionsWrappedContainer != nil {
                let noncurrentVersionTransitionsContainer = try containerValues.decodeIfPresent([S3ClientTypes.NoncurrentVersionTransition].self, forKey: .noncurrentVersionTransitions)
                var noncurrentVersionTransitionsBuffer:[S3ClientTypes.NoncurrentVersionTransition]? = nil
                if let noncurrentVersionTransitionsContainer = noncurrentVersionTransitionsContainer {
                    noncurrentVersionTransitionsBuffer = [S3ClientTypes.NoncurrentVersionTransition]()
                    for structureContainer0 in noncurrentVersionTransitionsContainer {
                        noncurrentVersionTransitionsBuffer?.append(structureContainer0)
                    }
                }
                noncurrentVersionTransitions = noncurrentVersionTransitionsBuffer
            } else {
                noncurrentVersionTransitions = []
            }
        } else {
            noncurrentVersionTransitions = nil
        }
        let noncurrentVersionExpirationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.NoncurrentVersionExpiration.self, forKey: .noncurrentVersionExpiration)
        noncurrentVersionExpiration = noncurrentVersionExpirationDecoded
        let abortIncompleteMultipartUploadDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AbortIncompleteMultipartUpload.self, forKey: .abortIncompleteMultipartUpload)
        abortIncompleteMultipartUpload = abortIncompleteMultipartUploadDecoded
    }
}

extension S3ClientTypes.LifecycleRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LifecycleRule(abortIncompleteMultipartUpload: \(Swift.String(describing: abortIncompleteMultipartUpload)), expiration: \(Swift.String(describing: expiration)), filter: \(Swift.String(describing: filter)), iD: \(Swift.String(describing: iD)), noncurrentVersionExpiration: \(Swift.String(describing: noncurrentVersionExpiration)), noncurrentVersionTransitions: \(Swift.String(describing: noncurrentVersionTransitions)), prefix: \(Swift.String(describing: prefix)), status: \(Swift.String(describing: status)), transitions: \(Swift.String(describing: transitions)))"}
}

extension S3ClientTypes.LifecycleRule: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A lifecycle rule for individual objects in an Amazon S3 bucket.</p>
    public struct LifecycleRule: Swift.Equatable {
        /// <p>Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will
        ///          wait before permanently removing all parts of the upload. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">
        ///             Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a> in the
        ///             <i>Amazon S3 User Guide</i>.</p>
        public let abortIncompleteMultipartUpload: S3ClientTypes.AbortIncompleteMultipartUpload?
        /// <p>Specifies the expiration for the lifecycle of the object in the form of date, days and,
        ///          whether the object has a delete marker.</p>
        public let expiration: S3ClientTypes.LifecycleExpiration?
        /// <p>The <code>Filter</code> is used to identify objects that a Lifecycle Rule applies to. A
        ///          <code>Filter</code> must have exactly one of <code>Prefix</code>, <code>Tag</code>, or
        ///          <code>And</code> specified. <code>Filter</code> is required if the <code>LifecycleRule</code>
        ///          does not containt a <code>Prefix</code> element.</p>
        public let filter: S3ClientTypes.LifecycleRuleFilter?
        /// <p>Unique identifier for the rule. The value cannot be longer than 255 characters.</p>
        public let iD: Swift.String?
        /// <p>Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently
        ///          deletes the noncurrent object versions. You set this lifecycle configuration action on a
        ///          bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent
        ///          object versions at a specific period in the object's lifetime.</p>
        public let noncurrentVersionExpiration: S3ClientTypes.NoncurrentVersionExpiration?
        /// <p> Specifies the transition rule for the lifecycle rule that describes when noncurrent
        ///          objects transition to a specific storage class. If your bucket is versioning-enabled (or
        ///          versioning is suspended), you can set this action to request that Amazon S3 transition
        ///          noncurrent object versions to a specific storage class at a set period in the object's
        ///          lifetime. </p>
        public let noncurrentVersionTransitions: [S3ClientTypes.NoncurrentVersionTransition]?
        /// <p>Prefix identifying one or more objects to which the rule applies. This is
        ///          no longer used; use <code>Filter</code> instead.</p>
        ///          <important>
        ///             <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using
        ///          XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
        ///             XML related object key constraints</a>.</p>
        ///          </important>
        @available(*, deprecated)
        public let prefix: Swift.String?
        /// <p>If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not
        ///          currently being applied.</p>
        public let status: S3ClientTypes.ExpirationStatus?
        /// <p>Specifies when an Amazon S3 object transitions to a specified storage class.</p>
        public let transitions: [S3ClientTypes.Transition]?

        public init (
            abortIncompleteMultipartUpload: S3ClientTypes.AbortIncompleteMultipartUpload? = nil,
            expiration: S3ClientTypes.LifecycleExpiration? = nil,
            filter: S3ClientTypes.LifecycleRuleFilter? = nil,
            iD: Swift.String? = nil,
            noncurrentVersionExpiration: S3ClientTypes.NoncurrentVersionExpiration? = nil,
            noncurrentVersionTransitions: [S3ClientTypes.NoncurrentVersionTransition]? = nil,
            prefix: Swift.String? = nil,
            status: S3ClientTypes.ExpirationStatus? = nil,
            transitions: [S3ClientTypes.Transition]? = nil
        )
        {
            self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
            self.expiration = expiration
            self.filter = filter
            self.iD = iD
            self.noncurrentVersionExpiration = noncurrentVersionExpiration
            self.noncurrentVersionTransitions = noncurrentVersionTransitions
            self.prefix = prefix
            self.status = status
            self.transitions = transitions
        }
    }

}

extension S3ClientTypes.LifecycleRuleAndOperator: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case prefix = "Prefix"
        case tags = "Tag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
        }
        if let tags = tags {
            if tags.isEmpty {
                var tagsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Tag"))
                try tagsContainer.encodeNil()
            } else {
                for tag0 in tags {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tag"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        if containerValues.contains(.tags) {
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .tags)
                var tagsBuffer:[S3ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension S3ClientTypes.LifecycleRuleAndOperator: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LifecycleRuleAndOperator(prefix: \(Swift.String(describing: prefix)), tags: \(Swift.String(describing: tags)))"}
}

extension S3ClientTypes.LifecycleRuleAndOperator: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>This is used in a Lifecycle Rule Filter to apply a logical AND to two or more
    ///          predicates. The Lifecycle Rule will apply to any object matching all of the predicates
    ///          configured inside the And operator.</p>
    public struct LifecycleRuleAndOperator: Swift.Equatable {
        /// <p>Prefix identifying one or more objects to which the rule applies.</p>
        public let prefix: Swift.String?
        /// <p>All of these tags must exist in the object's tag set in order for the rule to
        ///          apply.</p>
        public let tags: [S3ClientTypes.Tag]?

        public init (
            prefix: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.prefix = prefix
            self.tags = tags
        }
    }

}

extension S3ClientTypes.LifecycleRuleFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case and = "And"
        case prefix = "Prefix"
        case tag = "Tag"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        switch self {
            case let .and(and):
                try container.encode(and, forKey: ClientRuntime.Key("And"))
            case let .prefix(prefix):
                try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
            case let .tag(tag):
                try container.encode(tag, forKey: ClientRuntime.Key("Tag"))
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: ClientRuntime.Key("sdkUnknown"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        if let prefix = prefixDecoded {
            self = .prefix(prefix)
            return
        }
        let tagDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tag.self, forKey: .tag)
        if let tag = tagDecoded {
            self = .tag(tag)
            return
        }
        let andDecoded = try containerValues.decodeIfPresent(S3ClientTypes.LifecycleRuleAndOperator.self, forKey: .and)
        if let and = andDecoded {
            self = .and(and)
            return
        }
        self = .sdkUnknown("")
    }
}

extension S3ClientTypes {
    /// <p>The <code>Filter</code> is used to identify objects that a Lifecycle Rule applies to. A
    ///             <code>Filter</code> must have exactly one of <code>Prefix</code>, <code>Tag</code>, or
    ///             <code>And</code> specified.</p>
    public enum LifecycleRuleFilter: Swift.Equatable {
        /// <p>Prefix identifying one or more objects to which the rule applies.</p>
        ///          <important>
        ///             <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using
        ///          XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
        ///             XML related object key constraints</a>.</p>
        ///          </important>
        case prefix(Swift.String)
        /// <p>This tag must exist in the object's tag set in order for the rule to apply.</p>
        case tag(S3ClientTypes.Tag)
        /// <p>This is used in a Lifecycle Rule Filter to apply a logical AND to two or more
        ///          predicates. The Lifecycle Rule will apply to any object matching all of the predicates
        ///          configured inside the And operator.</p>
        case and(S3ClientTypes.LifecycleRuleAndOperator)
        case sdkUnknown(Swift.String)
    }

}

extension ListBucketAnalyticsConfigurationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBucketAnalyticsConfigurationsInput(bucket: \(Swift.String(describing: bucket)), continuationToken: \(Swift.String(describing: continuationToken)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension ListBucketAnalyticsConfigurationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListBucketAnalyticsConfigurationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBucketAnalyticsConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBucketAnalyticsConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBucketAnalyticsConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBucketAnalyticsConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBucketAnalyticsConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBucketAnalyticsConfigurationsOutputError>
}

public struct ListBucketAnalyticsConfigurationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBucketAnalyticsConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBucketAnalyticsConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBucketAnalyticsConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "analytics", value: nil))
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "ListBucketAnalyticsConfigurations"))
        if let continuationToken = input.operationInput.continuationToken {
            let continuationTokenQueryItem = ClientRuntime.URLQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
            input.builder.withQueryItem(continuationTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBucketAnalyticsConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBucketAnalyticsConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBucketAnalyticsConfigurationsOutputError>
}

public struct ListBucketAnalyticsConfigurationsInput: Swift.Equatable {
    /// <p>The name of the bucket from which analytics configurations are retrieved.</p>
    public let bucket: Swift.String?
    /// <p>The ContinuationToken that represents a placeholder from where this request should
    ///          begin.</p>
    public let continuationToken: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct ListBucketAnalyticsConfigurationsInputBody: Swift.Equatable {
}

extension ListBucketAnalyticsConfigurationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListBucketAnalyticsConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListBucketAnalyticsConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBucketAnalyticsConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBucketAnalyticsConfigurationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBucketAnalyticsConfigurationsOutputResponse(analyticsConfigurationList: \(Swift.String(describing: analyticsConfigurationList)), continuationToken: \(Swift.String(describing: continuationToken)), isTruncated: \(Swift.String(describing: isTruncated)), nextContinuationToken: \(Swift.String(describing: nextContinuationToken)))"}
}

extension ListBucketAnalyticsConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListBucketAnalyticsConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.analyticsConfigurationList = output.analyticsConfigurationList
            self.continuationToken = output.continuationToken
            self.isTruncated = output.isTruncated
            self.nextContinuationToken = output.nextContinuationToken
        } else {
            self.analyticsConfigurationList = nil
            self.continuationToken = nil
            self.isTruncated = false
            self.nextContinuationToken = nil
        }
    }
}

public struct ListBucketAnalyticsConfigurationsOutputResponse: Swift.Equatable {
    /// <p>The list of analytics configurations for a bucket.</p>
    public let analyticsConfigurationList: [S3ClientTypes.AnalyticsConfiguration]?
    /// <p>The marker that is used as a starting point for this analytics configuration list
    ///          response. This value is present if it was sent in the request.</p>
    public let continuationToken: Swift.String?
    /// <p>Indicates whether the returned list of analytics configurations is complete. A value of
    ///          true indicates that the list is not complete and the NextContinuationToken will be provided
    ///          for a subsequent request.</p>
    public let isTruncated: Swift.Bool
    /// <p>
    ///             <code>NextContinuationToken</code> is sent when <code>isTruncated</code> is true, which
    ///          indicates that there are more analytics configurations to list. The next request must
    ///          include this <code>NextContinuationToken</code>. The token is obfuscated and is not a
    ///          usable value.</p>
    public let nextContinuationToken: Swift.String?

    public init (
        analyticsConfigurationList: [S3ClientTypes.AnalyticsConfiguration]? = nil,
        continuationToken: Swift.String? = nil,
        isTruncated: Swift.Bool = false,
        nextContinuationToken: Swift.String? = nil
    )
    {
        self.analyticsConfigurationList = analyticsConfigurationList
        self.continuationToken = continuationToken
        self.isTruncated = isTruncated
        self.nextContinuationToken = nextContinuationToken
    }
}

struct ListBucketAnalyticsConfigurationsOutputResponseBody: Swift.Equatable {
    public let isTruncated: Swift.Bool
    public let continuationToken: Swift.String?
    public let nextContinuationToken: Swift.String?
    public let analyticsConfigurationList: [S3ClientTypes.AnalyticsConfiguration]?
}

extension ListBucketAnalyticsConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsConfigurationList = "AnalyticsConfiguration"
        case continuationToken = "ContinuationToken"
        case isTruncated = "IsTruncated"
        case nextContinuationToken = "NextContinuationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let nextContinuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextContinuationToken)
        nextContinuationToken = nextContinuationTokenDecoded
        if containerValues.contains(.analyticsConfigurationList) {
            let analyticsConfigurationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .analyticsConfigurationList)
            if analyticsConfigurationListWrappedContainer != nil {
                let analyticsConfigurationListContainer = try containerValues.decodeIfPresent([S3ClientTypes.AnalyticsConfiguration].self, forKey: .analyticsConfigurationList)
                var analyticsConfigurationListBuffer:[S3ClientTypes.AnalyticsConfiguration]? = nil
                if let analyticsConfigurationListContainer = analyticsConfigurationListContainer {
                    analyticsConfigurationListBuffer = [S3ClientTypes.AnalyticsConfiguration]()
                    for structureContainer0 in analyticsConfigurationListContainer {
                        analyticsConfigurationListBuffer?.append(structureContainer0)
                    }
                }
                analyticsConfigurationList = analyticsConfigurationListBuffer
            } else {
                analyticsConfigurationList = []
            }
        } else {
            analyticsConfigurationList = nil
        }
    }
}

extension ListBucketIntelligentTieringConfigurationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBucketIntelligentTieringConfigurationsInput(bucket: \(Swift.String(describing: bucket)), continuationToken: \(Swift.String(describing: continuationToken)))"}
}

extension ListBucketIntelligentTieringConfigurationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListBucketIntelligentTieringConfigurationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBucketIntelligentTieringConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBucketIntelligentTieringConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBucketIntelligentTieringConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBucketIntelligentTieringConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBucketIntelligentTieringConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBucketIntelligentTieringConfigurationsOutputError>
}

public struct ListBucketIntelligentTieringConfigurationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBucketIntelligentTieringConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBucketIntelligentTieringConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBucketIntelligentTieringConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "intelligent-tiering", value: nil))
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "ListBucketIntelligentTieringConfigurations"))
        if let continuationToken = input.operationInput.continuationToken {
            let continuationTokenQueryItem = ClientRuntime.URLQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
            input.builder.withQueryItem(continuationTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBucketIntelligentTieringConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBucketIntelligentTieringConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBucketIntelligentTieringConfigurationsOutputError>
}

public struct ListBucketIntelligentTieringConfigurationsInput: Swift.Equatable {
    /// <p>The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.</p>
    public let bucket: Swift.String?
    /// <p>The ContinuationToken that represents a placeholder from where this request should
    ///          begin.</p>
    public let continuationToken: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
    }
}

struct ListBucketIntelligentTieringConfigurationsInputBody: Swift.Equatable {
}

extension ListBucketIntelligentTieringConfigurationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListBucketIntelligentTieringConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListBucketIntelligentTieringConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBucketIntelligentTieringConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBucketIntelligentTieringConfigurationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBucketIntelligentTieringConfigurationsOutputResponse(continuationToken: \(Swift.String(describing: continuationToken)), intelligentTieringConfigurationList: \(Swift.String(describing: intelligentTieringConfigurationList)), isTruncated: \(Swift.String(describing: isTruncated)), nextContinuationToken: \(Swift.String(describing: nextContinuationToken)))"}
}

extension ListBucketIntelligentTieringConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListBucketIntelligentTieringConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.continuationToken = output.continuationToken
            self.intelligentTieringConfigurationList = output.intelligentTieringConfigurationList
            self.isTruncated = output.isTruncated
            self.nextContinuationToken = output.nextContinuationToken
        } else {
            self.continuationToken = nil
            self.intelligentTieringConfigurationList = nil
            self.isTruncated = false
            self.nextContinuationToken = nil
        }
    }
}

public struct ListBucketIntelligentTieringConfigurationsOutputResponse: Swift.Equatable {
    /// <p>The ContinuationToken that represents a placeholder from where this request should
    ///          begin.</p>
    public let continuationToken: Swift.String?
    /// <p>The list of S3 Intelligent-Tiering configurations for a bucket.</p>
    public let intelligentTieringConfigurationList: [S3ClientTypes.IntelligentTieringConfiguration]?
    /// <p>Indicates whether the returned list of analytics configurations is complete. A value of
    ///          true indicates that the list is not complete and the NextContinuationToken will be provided
    ///          for a subsequent request.</p>
    public let isTruncated: Swift.Bool
    /// <p>The marker used to continue this inventory configuration listing. Use the
    ///             <code>NextContinuationToken</code> from this response to continue the listing in a
    ///          subsequent request. The continuation token is an opaque value that Amazon S3 understands.</p>
    public let nextContinuationToken: Swift.String?

    public init (
        continuationToken: Swift.String? = nil,
        intelligentTieringConfigurationList: [S3ClientTypes.IntelligentTieringConfiguration]? = nil,
        isTruncated: Swift.Bool = false,
        nextContinuationToken: Swift.String? = nil
    )
    {
        self.continuationToken = continuationToken
        self.intelligentTieringConfigurationList = intelligentTieringConfigurationList
        self.isTruncated = isTruncated
        self.nextContinuationToken = nextContinuationToken
    }
}

struct ListBucketIntelligentTieringConfigurationsOutputResponseBody: Swift.Equatable {
    public let isTruncated: Swift.Bool
    public let continuationToken: Swift.String?
    public let nextContinuationToken: Swift.String?
    public let intelligentTieringConfigurationList: [S3ClientTypes.IntelligentTieringConfiguration]?
}

extension ListBucketIntelligentTieringConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case continuationToken = "ContinuationToken"
        case intelligentTieringConfigurationList = "IntelligentTieringConfiguration"
        case isTruncated = "IsTruncated"
        case nextContinuationToken = "NextContinuationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let nextContinuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextContinuationToken)
        nextContinuationToken = nextContinuationTokenDecoded
        if containerValues.contains(.intelligentTieringConfigurationList) {
            let intelligentTieringConfigurationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .intelligentTieringConfigurationList)
            if intelligentTieringConfigurationListWrappedContainer != nil {
                let intelligentTieringConfigurationListContainer = try containerValues.decodeIfPresent([S3ClientTypes.IntelligentTieringConfiguration].self, forKey: .intelligentTieringConfigurationList)
                var intelligentTieringConfigurationListBuffer:[S3ClientTypes.IntelligentTieringConfiguration]? = nil
                if let intelligentTieringConfigurationListContainer = intelligentTieringConfigurationListContainer {
                    intelligentTieringConfigurationListBuffer = [S3ClientTypes.IntelligentTieringConfiguration]()
                    for structureContainer0 in intelligentTieringConfigurationListContainer {
                        intelligentTieringConfigurationListBuffer?.append(structureContainer0)
                    }
                }
                intelligentTieringConfigurationList = intelligentTieringConfigurationListBuffer
            } else {
                intelligentTieringConfigurationList = []
            }
        } else {
            intelligentTieringConfigurationList = nil
        }
    }
}

extension ListBucketInventoryConfigurationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBucketInventoryConfigurationsInput(bucket: \(Swift.String(describing: bucket)), continuationToken: \(Swift.String(describing: continuationToken)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension ListBucketInventoryConfigurationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListBucketInventoryConfigurationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBucketInventoryConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBucketInventoryConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBucketInventoryConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBucketInventoryConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBucketInventoryConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBucketInventoryConfigurationsOutputError>
}

public struct ListBucketInventoryConfigurationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBucketInventoryConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBucketInventoryConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBucketInventoryConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "inventory", value: nil))
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "ListBucketInventoryConfigurations"))
        if let continuationToken = input.operationInput.continuationToken {
            let continuationTokenQueryItem = ClientRuntime.URLQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
            input.builder.withQueryItem(continuationTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBucketInventoryConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBucketInventoryConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBucketInventoryConfigurationsOutputError>
}

public struct ListBucketInventoryConfigurationsInput: Swift.Equatable {
    /// <p>The name of the bucket containing the inventory configurations to retrieve.</p>
    public let bucket: Swift.String?
    /// <p>The marker used to continue an inventory configuration listing that has been truncated.
    ///          Use the NextContinuationToken from a previously truncated list response to continue the
    ///          listing. The continuation token is an opaque value that Amazon S3 understands.</p>
    public let continuationToken: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct ListBucketInventoryConfigurationsInputBody: Swift.Equatable {
}

extension ListBucketInventoryConfigurationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListBucketInventoryConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListBucketInventoryConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBucketInventoryConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBucketInventoryConfigurationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBucketInventoryConfigurationsOutputResponse(continuationToken: \(Swift.String(describing: continuationToken)), inventoryConfigurationList: \(Swift.String(describing: inventoryConfigurationList)), isTruncated: \(Swift.String(describing: isTruncated)), nextContinuationToken: \(Swift.String(describing: nextContinuationToken)))"}
}

extension ListBucketInventoryConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListBucketInventoryConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.continuationToken = output.continuationToken
            self.inventoryConfigurationList = output.inventoryConfigurationList
            self.isTruncated = output.isTruncated
            self.nextContinuationToken = output.nextContinuationToken
        } else {
            self.continuationToken = nil
            self.inventoryConfigurationList = nil
            self.isTruncated = false
            self.nextContinuationToken = nil
        }
    }
}

public struct ListBucketInventoryConfigurationsOutputResponse: Swift.Equatable {
    /// <p>If sent in the request, the marker that is used as a starting point for this inventory
    ///          configuration list response.</p>
    public let continuationToken: Swift.String?
    /// <p>The list of inventory configurations for a bucket.</p>
    public let inventoryConfigurationList: [S3ClientTypes.InventoryConfiguration]?
    /// <p>Tells whether the returned list of inventory configurations is complete. A value of true
    ///          indicates that the list is not complete and the NextContinuationToken is provided for a
    ///          subsequent request.</p>
    public let isTruncated: Swift.Bool
    /// <p>The marker used to continue this inventory configuration listing. Use the
    ///             <code>NextContinuationToken</code> from this response to continue the listing in a
    ///          subsequent request. The continuation token is an opaque value that Amazon S3 understands.</p>
    public let nextContinuationToken: Swift.String?

    public init (
        continuationToken: Swift.String? = nil,
        inventoryConfigurationList: [S3ClientTypes.InventoryConfiguration]? = nil,
        isTruncated: Swift.Bool = false,
        nextContinuationToken: Swift.String? = nil
    )
    {
        self.continuationToken = continuationToken
        self.inventoryConfigurationList = inventoryConfigurationList
        self.isTruncated = isTruncated
        self.nextContinuationToken = nextContinuationToken
    }
}

struct ListBucketInventoryConfigurationsOutputResponseBody: Swift.Equatable {
    public let continuationToken: Swift.String?
    public let inventoryConfigurationList: [S3ClientTypes.InventoryConfiguration]?
    public let isTruncated: Swift.Bool
    public let nextContinuationToken: Swift.String?
}

extension ListBucketInventoryConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case continuationToken = "ContinuationToken"
        case inventoryConfigurationList = "InventoryConfiguration"
        case isTruncated = "IsTruncated"
        case nextContinuationToken = "NextContinuationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        if containerValues.contains(.inventoryConfigurationList) {
            let inventoryConfigurationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .inventoryConfigurationList)
            if inventoryConfigurationListWrappedContainer != nil {
                let inventoryConfigurationListContainer = try containerValues.decodeIfPresent([S3ClientTypes.InventoryConfiguration].self, forKey: .inventoryConfigurationList)
                var inventoryConfigurationListBuffer:[S3ClientTypes.InventoryConfiguration]? = nil
                if let inventoryConfigurationListContainer = inventoryConfigurationListContainer {
                    inventoryConfigurationListBuffer = [S3ClientTypes.InventoryConfiguration]()
                    for structureContainer0 in inventoryConfigurationListContainer {
                        inventoryConfigurationListBuffer?.append(structureContainer0)
                    }
                }
                inventoryConfigurationList = inventoryConfigurationListBuffer
            } else {
                inventoryConfigurationList = []
            }
        } else {
            inventoryConfigurationList = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextContinuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextContinuationToken)
        nextContinuationToken = nextContinuationTokenDecoded
    }
}

extension ListBucketMetricsConfigurationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBucketMetricsConfigurationsInput(bucket: \(Swift.String(describing: bucket)), continuationToken: \(Swift.String(describing: continuationToken)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension ListBucketMetricsConfigurationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListBucketMetricsConfigurationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBucketMetricsConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBucketMetricsConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBucketMetricsConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBucketMetricsConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBucketMetricsConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBucketMetricsConfigurationsOutputError>
}

public struct ListBucketMetricsConfigurationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBucketMetricsConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBucketMetricsConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBucketMetricsConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "metrics", value: nil))
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "ListBucketMetricsConfigurations"))
        if let continuationToken = input.operationInput.continuationToken {
            let continuationTokenQueryItem = ClientRuntime.URLQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
            input.builder.withQueryItem(continuationTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBucketMetricsConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBucketMetricsConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBucketMetricsConfigurationsOutputError>
}

public struct ListBucketMetricsConfigurationsInput: Swift.Equatable {
    /// <p>The name of the bucket containing the metrics configurations to retrieve.</p>
    public let bucket: Swift.String?
    /// <p>The marker that is used to continue a metrics configuration listing that has been
    ///          truncated. Use the NextContinuationToken from a previously truncated list response to
    ///          continue the listing. The continuation token is an opaque value that Amazon S3
    ///          understands.</p>
    public let continuationToken: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct ListBucketMetricsConfigurationsInputBody: Swift.Equatable {
}

extension ListBucketMetricsConfigurationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListBucketMetricsConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListBucketMetricsConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBucketMetricsConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBucketMetricsConfigurationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBucketMetricsConfigurationsOutputResponse(continuationToken: \(Swift.String(describing: continuationToken)), isTruncated: \(Swift.String(describing: isTruncated)), metricsConfigurationList: \(Swift.String(describing: metricsConfigurationList)), nextContinuationToken: \(Swift.String(describing: nextContinuationToken)))"}
}

extension ListBucketMetricsConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListBucketMetricsConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.continuationToken = output.continuationToken
            self.isTruncated = output.isTruncated
            self.metricsConfigurationList = output.metricsConfigurationList
            self.nextContinuationToken = output.nextContinuationToken
        } else {
            self.continuationToken = nil
            self.isTruncated = false
            self.metricsConfigurationList = nil
            self.nextContinuationToken = nil
        }
    }
}

public struct ListBucketMetricsConfigurationsOutputResponse: Swift.Equatable {
    /// <p>The marker that is used as a starting point for this metrics configuration list
    ///          response. This value is present if it was sent in the request.</p>
    public let continuationToken: Swift.String?
    /// <p>Indicates whether the returned list of metrics configurations is complete. A value of
    ///          true indicates that the list is not complete and the NextContinuationToken will be provided
    ///          for a subsequent request.</p>
    public let isTruncated: Swift.Bool
    /// <p>The list of metrics configurations for a bucket.</p>
    public let metricsConfigurationList: [S3ClientTypes.MetricsConfiguration]?
    /// <p>The marker used to continue a metrics configuration listing that has been truncated. Use
    ///          the <code>NextContinuationToken</code> from a previously truncated list response to
    ///          continue the listing. The continuation token is an opaque value that Amazon S3
    ///          understands.</p>
    public let nextContinuationToken: Swift.String?

    public init (
        continuationToken: Swift.String? = nil,
        isTruncated: Swift.Bool = false,
        metricsConfigurationList: [S3ClientTypes.MetricsConfiguration]? = nil,
        nextContinuationToken: Swift.String? = nil
    )
    {
        self.continuationToken = continuationToken
        self.isTruncated = isTruncated
        self.metricsConfigurationList = metricsConfigurationList
        self.nextContinuationToken = nextContinuationToken
    }
}

struct ListBucketMetricsConfigurationsOutputResponseBody: Swift.Equatable {
    public let isTruncated: Swift.Bool
    public let continuationToken: Swift.String?
    public let nextContinuationToken: Swift.String?
    public let metricsConfigurationList: [S3ClientTypes.MetricsConfiguration]?
}

extension ListBucketMetricsConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case continuationToken = "ContinuationToken"
        case isTruncated = "IsTruncated"
        case metricsConfigurationList = "MetricsConfiguration"
        case nextContinuationToken = "NextContinuationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let nextContinuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextContinuationToken)
        nextContinuationToken = nextContinuationTokenDecoded
        if containerValues.contains(.metricsConfigurationList) {
            let metricsConfigurationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .metricsConfigurationList)
            if metricsConfigurationListWrappedContainer != nil {
                let metricsConfigurationListContainer = try containerValues.decodeIfPresent([S3ClientTypes.MetricsConfiguration].self, forKey: .metricsConfigurationList)
                var metricsConfigurationListBuffer:[S3ClientTypes.MetricsConfiguration]? = nil
                if let metricsConfigurationListContainer = metricsConfigurationListContainer {
                    metricsConfigurationListBuffer = [S3ClientTypes.MetricsConfiguration]()
                    for structureContainer0 in metricsConfigurationListContainer {
                        metricsConfigurationListBuffer?.append(structureContainer0)
                    }
                }
                metricsConfigurationList = metricsConfigurationListBuffer
            } else {
                metricsConfigurationList = []
            }
        } else {
            metricsConfigurationList = nil
        }
    }
}

extension ListBucketsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBucketsInput()"}
}

extension ListBucketsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListBucketsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBucketsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBucketsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBucketsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBucketsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBucketsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBucketsOutputError>
}

public struct ListBucketsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBucketsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBucketsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBucketsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBucketsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBucketsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBucketsOutputError>
}

public struct ListBucketsInput: Swift.Equatable {

    public init() {}
}

struct ListBucketsInputBody: Swift.Equatable {
}

extension ListBucketsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListBucketsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListBucketsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBucketsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBucketsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBucketsOutputResponse(buckets: \(Swift.String(describing: buckets)), owner: \(Swift.String(describing: owner)))"}
}

extension ListBucketsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListBucketsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.buckets = output.buckets
            self.owner = output.owner
        } else {
            self.buckets = nil
            self.owner = nil
        }
    }
}

public struct ListBucketsOutputResponse: Swift.Equatable {
    /// <p>The list of buckets owned by the requestor.</p>
    public let buckets: [S3ClientTypes.Bucket]?
    /// <p>The owner of the buckets listed.</p>
    public let owner: S3ClientTypes.Owner?

    public init (
        buckets: [S3ClientTypes.Bucket]? = nil,
        owner: S3ClientTypes.Owner? = nil
    )
    {
        self.buckets = buckets
        self.owner = owner
    }
}

struct ListBucketsOutputResponseBody: Swift.Equatable {
    public let buckets: [S3ClientTypes.Bucket]?
    public let owner: S3ClientTypes.Owner?
}

extension ListBucketsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buckets = "Buckets"
        case owner = "Owner"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.buckets) {
            struct KeyVal0{struct Bucket{}}
            let bucketsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Bucket>.CodingKeys.self, forKey: .buckets)
            if let bucketsWrappedContainer = bucketsWrappedContainer {
                let bucketsContainer = try bucketsWrappedContainer.decodeIfPresent([S3ClientTypes.Bucket].self, forKey: .member)
                var bucketsBuffer:[S3ClientTypes.Bucket]? = nil
                if let bucketsContainer = bucketsContainer {
                    bucketsBuffer = [S3ClientTypes.Bucket]()
                    for structureContainer0 in bucketsContainer {
                        bucketsBuffer?.append(structureContainer0)
                    }
                }
                buckets = bucketsBuffer
            } else {
                buckets = []
            }
        } else {
            buckets = nil
        }
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
    }
}

extension ListMultipartUploadsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMultipartUploadsInput(bucket: \(Swift.String(describing: bucket)), delimiter: \(Swift.String(describing: delimiter)), encodingType: \(Swift.String(describing: encodingType)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), keyMarker: \(Swift.String(describing: keyMarker)), maxUploads: \(Swift.String(describing: maxUploads)), prefix: \(Swift.String(describing: prefix)), uploadIdMarker: \(Swift.String(describing: uploadIdMarker)))"}
}

extension ListMultipartUploadsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListMultipartUploadsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMultipartUploadsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMultipartUploadsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMultipartUploadsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMultipartUploadsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMultipartUploadsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMultipartUploadsOutputError>
}

public struct ListMultipartUploadsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMultipartUploadsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMultipartUploadsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMultipartUploadsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "uploads", value: nil))
        if let uploadIdMarker = input.operationInput.uploadIdMarker {
            let uploadIdMarkerQueryItem = ClientRuntime.URLQueryItem(name: "upload-id-marker".urlPercentEncoding(), value: Swift.String(uploadIdMarker).urlPercentEncoding())
            input.builder.withQueryItem(uploadIdMarkerQueryItem)
        }
        if let delimiter = input.operationInput.delimiter {
            let delimiterQueryItem = ClientRuntime.URLQueryItem(name: "delimiter".urlPercentEncoding(), value: Swift.String(delimiter).urlPercentEncoding())
            input.builder.withQueryItem(delimiterQueryItem)
        }
        if input.operationInput.maxUploads != 0 {
            let maxUploadsQueryItem = ClientRuntime.URLQueryItem(name: "max-uploads".urlPercentEncoding(), value: Swift.String(input.operationInput.maxUploads).urlPercentEncoding())
            input.builder.withQueryItem(maxUploadsQueryItem)
        }
        if let encodingType = input.operationInput.encodingType {
            let encodingTypeQueryItem = ClientRuntime.URLQueryItem(name: "encoding-type".urlPercentEncoding(), value: Swift.String(encodingType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(encodingTypeQueryItem)
        }
        if let prefix = input.operationInput.prefix {
            let prefixQueryItem = ClientRuntime.URLQueryItem(name: "prefix".urlPercentEncoding(), value: Swift.String(prefix).urlPercentEncoding())
            input.builder.withQueryItem(prefixQueryItem)
        }
        if let keyMarker = input.operationInput.keyMarker {
            let keyMarkerQueryItem = ClientRuntime.URLQueryItem(name: "key-marker".urlPercentEncoding(), value: Swift.String(keyMarker).urlPercentEncoding())
            input.builder.withQueryItem(keyMarkerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMultipartUploadsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMultipartUploadsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMultipartUploadsOutputError>
}

public struct ListMultipartUploadsInput: Swift.Equatable {
    /// <p>The name of the bucket to which the multipart upload was initiated. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>Character you use to group keys.</p>
    ///          <p>All keys that contain the same string between the prefix, if specified, and the first
    ///          occurrence of the delimiter after the prefix are grouped under a single result element,
    ///             <code>CommonPrefixes</code>. If you don't specify the prefix parameter, then the
    ///          substring starts at the beginning of the key. The keys that are grouped under
    ///             <code>CommonPrefixes</code> result element are not returned elsewhere in the
    ///          response.</p>
    public let delimiter: Swift.String?
    /// <p>Requests Amazon S3 to encode the object keys in the response and specifies the encoding
    ///          method to use. An object key may contain any Unicode character; however, XML 1.0 parser
    ///          cannot parse some characters, such as characters with an ASCII value from 0 to 10. For
    ///          characters that are not supported in XML 1.0, you can add this parameter to request that
    ///          Amazon S3 encode the keys in the response.</p>
    public let encodingType: S3ClientTypes.EncodingType?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Together with upload-id-marker, this parameter specifies the multipart upload after
    ///          which listing should begin.</p>
    ///          <p>If <code>upload-id-marker</code> is not specified, only the keys lexicographically
    ///          greater than the specified <code>key-marker</code> will be included in the list.</p>
    ///
    ///          <p>If <code>upload-id-marker</code> is specified, any multipart uploads for a key equal to
    ///          the <code>key-marker</code> might also be included, provided those multipart uploads have
    ///          upload IDs lexicographically greater than the specified
    ///          <code>upload-id-marker</code>.</p>
    public let keyMarker: Swift.String?
    /// <p>Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response
    ///          body. 1,000 is the maximum number of uploads that can be returned in a response.</p>
    public let maxUploads: Swift.Int
    /// <p>Lists in-progress uploads only for those keys that begin with the specified prefix. You
    ///          can use prefixes to separate a bucket into different grouping of keys. (You can think of
    ///          using prefix to make groups in the same way you'd use a folder in a file system.)</p>
    public let prefix: Swift.String?
    /// <p>Together with key-marker, specifies the multipart upload after which listing should
    ///          begin. If key-marker is not specified, the upload-id-marker parameter is ignored.
    ///          Otherwise, any multipart uploads for a key equal to the key-marker might be included in the
    ///          list only if they have an upload ID lexicographically greater than the specified
    ///             <code>upload-id-marker</code>.</p>
    public let uploadIdMarker: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        expectedBucketOwner: Swift.String? = nil,
        keyMarker: Swift.String? = nil,
        maxUploads: Swift.Int = 0,
        prefix: Swift.String? = nil,
        uploadIdMarker: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.expectedBucketOwner = expectedBucketOwner
        self.keyMarker = keyMarker
        self.maxUploads = maxUploads
        self.prefix = prefix
        self.uploadIdMarker = uploadIdMarker
    }
}

struct ListMultipartUploadsInputBody: Swift.Equatable {
}

extension ListMultipartUploadsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListMultipartUploadsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListMultipartUploadsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMultipartUploadsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMultipartUploadsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMultipartUploadsOutputResponse(bucket: \(Swift.String(describing: bucket)), commonPrefixes: \(Swift.String(describing: commonPrefixes)), delimiter: \(Swift.String(describing: delimiter)), encodingType: \(Swift.String(describing: encodingType)), isTruncated: \(Swift.String(describing: isTruncated)), keyMarker: \(Swift.String(describing: keyMarker)), maxUploads: \(Swift.String(describing: maxUploads)), nextKeyMarker: \(Swift.String(describing: nextKeyMarker)), nextUploadIdMarker: \(Swift.String(describing: nextUploadIdMarker)), prefix: \(Swift.String(describing: prefix)), uploadIdMarker: \(Swift.String(describing: uploadIdMarker)), uploads: \(Swift.String(describing: uploads)))"}
}

extension ListMultipartUploadsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListMultipartUploadsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bucket = output.bucket
            self.commonPrefixes = output.commonPrefixes
            self.delimiter = output.delimiter
            self.encodingType = output.encodingType
            self.isTruncated = output.isTruncated
            self.keyMarker = output.keyMarker
            self.maxUploads = output.maxUploads
            self.nextKeyMarker = output.nextKeyMarker
            self.nextUploadIdMarker = output.nextUploadIdMarker
            self.prefix = output.prefix
            self.uploadIdMarker = output.uploadIdMarker
            self.uploads = output.uploads
        } else {
            self.bucket = nil
            self.commonPrefixes = nil
            self.delimiter = nil
            self.encodingType = nil
            self.isTruncated = false
            self.keyMarker = nil
            self.maxUploads = 0
            self.nextKeyMarker = nil
            self.nextUploadIdMarker = nil
            self.prefix = nil
            self.uploadIdMarker = nil
            self.uploads = nil
        }
    }
}

public struct ListMultipartUploadsOutputResponse: Swift.Equatable {
    /// <p>The name of the bucket to which the multipart upload was initiated.</p>
    public let bucket: Swift.String?
    /// <p>If you specify a delimiter in the request, then the result returns each distinct key
    ///          prefix containing the delimiter in a <code>CommonPrefixes</code> element. The distinct key
    ///          prefixes are returned in the <code>Prefix</code> child element.</p>
    public let commonPrefixes: [S3ClientTypes.CommonPrefix]?
    /// <p>Contains the delimiter you specified in the request. If you don't specify a delimiter in
    ///          your request, this element is absent from the response.</p>
    public let delimiter: Swift.String?
    /// <p>Encoding type used by Amazon S3 to encode object keys in the response.</p>
    ///          <p>If you specify <code>encoding-type</code> request parameter, Amazon S3 includes this element
    ///          in the response, and returns encoded key name values in the following response
    ///          elements:</p>
    ///
    ///          <p>
    ///             <code>Delimiter</code>, <code>KeyMarker</code>, <code>Prefix</code>,
    ///             <code>NextKeyMarker</code>, <code>Key</code>.</p>
    public let encodingType: S3ClientTypes.EncodingType?
    /// <p>Indicates whether the returned list of multipart uploads is truncated. A value of true
    ///          indicates that the list was truncated. The list can be truncated if the number of multipart
    ///          uploads exceeds the limit allowed or specified by max uploads.</p>
    public let isTruncated: Swift.Bool
    /// <p>The key at or after which the listing began.</p>
    public let keyMarker: Swift.String?
    /// <p>Maximum number of multipart uploads that could have been included in the
    ///          response.</p>
    public let maxUploads: Swift.Int
    /// <p>When a list is truncated, this element specifies the value that should be used for the
    ///          key-marker request parameter in a subsequent request.</p>
    public let nextKeyMarker: Swift.String?
    /// <p>When a list is truncated, this element specifies the value that should be used for the
    ///             <code>upload-id-marker</code> request parameter in a subsequent request.</p>
    public let nextUploadIdMarker: Swift.String?
    /// <p>When a prefix is provided in the request, this field contains the specified prefix. The
    ///          result contains only keys starting with the specified prefix.</p>
    public let prefix: Swift.String?
    /// <p>Upload ID after which listing began.</p>
    public let uploadIdMarker: Swift.String?
    /// <p>Container for elements related to a particular multipart upload. A response can contain
    ///          zero or more <code>Upload</code> elements.</p>
    public let uploads: [S3ClientTypes.MultipartUpload]?

    public init (
        bucket: Swift.String? = nil,
        commonPrefixes: [S3ClientTypes.CommonPrefix]? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        isTruncated: Swift.Bool = false,
        keyMarker: Swift.String? = nil,
        maxUploads: Swift.Int = 0,
        nextKeyMarker: Swift.String? = nil,
        nextUploadIdMarker: Swift.String? = nil,
        prefix: Swift.String? = nil,
        uploadIdMarker: Swift.String? = nil,
        uploads: [S3ClientTypes.MultipartUpload]? = nil
    )
    {
        self.bucket = bucket
        self.commonPrefixes = commonPrefixes
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.isTruncated = isTruncated
        self.keyMarker = keyMarker
        self.maxUploads = maxUploads
        self.nextKeyMarker = nextKeyMarker
        self.nextUploadIdMarker = nextUploadIdMarker
        self.prefix = prefix
        self.uploadIdMarker = uploadIdMarker
        self.uploads = uploads
    }
}

struct ListMultipartUploadsOutputResponseBody: Swift.Equatable {
    public let bucket: Swift.String?
    public let keyMarker: Swift.String?
    public let uploadIdMarker: Swift.String?
    public let nextKeyMarker: Swift.String?
    public let prefix: Swift.String?
    public let delimiter: Swift.String?
    public let nextUploadIdMarker: Swift.String?
    public let maxUploads: Swift.Int
    public let isTruncated: Swift.Bool
    public let uploads: [S3ClientTypes.MultipartUpload]?
    public let commonPrefixes: [S3ClientTypes.CommonPrefix]?
    public let encodingType: S3ClientTypes.EncodingType?
}

extension ListMultipartUploadsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case commonPrefixes = "CommonPrefixes"
        case delimiter = "Delimiter"
        case encodingType = "EncodingType"
        case isTruncated = "IsTruncated"
        case keyMarker = "KeyMarker"
        case maxUploads = "MaxUploads"
        case nextKeyMarker = "NextKeyMarker"
        case nextUploadIdMarker = "NextUploadIdMarker"
        case prefix = "Prefix"
        case uploadIdMarker = "UploadIdMarker"
        case uploads = "Upload"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyMarker)
        keyMarker = keyMarkerDecoded
        let uploadIdMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadIdMarker)
        uploadIdMarker = uploadIdMarkerDecoded
        let nextKeyMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextKeyMarker)
        nextKeyMarker = nextKeyMarkerDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let nextUploadIdMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextUploadIdMarker)
        nextUploadIdMarker = nextUploadIdMarkerDecoded
        let maxUploadsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxUploads)
        maxUploads = maxUploadsDecoded
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        if containerValues.contains(.uploads) {
            let uploadsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .uploads)
            if uploadsWrappedContainer != nil {
                let uploadsContainer = try containerValues.decodeIfPresent([S3ClientTypes.MultipartUpload].self, forKey: .uploads)
                var uploadsBuffer:[S3ClientTypes.MultipartUpload]? = nil
                if let uploadsContainer = uploadsContainer {
                    uploadsBuffer = [S3ClientTypes.MultipartUpload]()
                    for structureContainer0 in uploadsContainer {
                        uploadsBuffer?.append(structureContainer0)
                    }
                }
                uploads = uploadsBuffer
            } else {
                uploads = []
            }
        } else {
            uploads = nil
        }
        if containerValues.contains(.commonPrefixes) {
            let commonPrefixesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .commonPrefixes)
            if commonPrefixesWrappedContainer != nil {
                let commonPrefixesContainer = try containerValues.decodeIfPresent([S3ClientTypes.CommonPrefix].self, forKey: .commonPrefixes)
                var commonPrefixesBuffer:[S3ClientTypes.CommonPrefix]? = nil
                if let commonPrefixesContainer = commonPrefixesContainer {
                    commonPrefixesBuffer = [S3ClientTypes.CommonPrefix]()
                    for structureContainer0 in commonPrefixesContainer {
                        commonPrefixesBuffer?.append(structureContainer0)
                    }
                }
                commonPrefixes = commonPrefixesBuffer
            } else {
                commonPrefixes = []
            }
        } else {
            commonPrefixes = nil
        }
        let encodingTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.EncodingType.self, forKey: .encodingType)
        encodingType = encodingTypeDecoded
    }
}

extension ListObjectVersionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListObjectVersionsInput(bucket: \(Swift.String(describing: bucket)), delimiter: \(Swift.String(describing: delimiter)), encodingType: \(Swift.String(describing: encodingType)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), keyMarker: \(Swift.String(describing: keyMarker)), maxKeys: \(Swift.String(describing: maxKeys)), prefix: \(Swift.String(describing: prefix)), versionIdMarker: \(Swift.String(describing: versionIdMarker)))"}
}

extension ListObjectVersionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListObjectVersionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListObjectVersionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListObjectVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListObjectVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListObjectVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListObjectVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListObjectVersionsOutputError>
}

public struct ListObjectVersionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListObjectVersionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListObjectVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListObjectVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "versions", value: nil))
        if let versionIdMarker = input.operationInput.versionIdMarker {
            let versionIdMarkerQueryItem = ClientRuntime.URLQueryItem(name: "version-id-marker".urlPercentEncoding(), value: Swift.String(versionIdMarker).urlPercentEncoding())
            input.builder.withQueryItem(versionIdMarkerQueryItem)
        }
        if let delimiter = input.operationInput.delimiter {
            let delimiterQueryItem = ClientRuntime.URLQueryItem(name: "delimiter".urlPercentEncoding(), value: Swift.String(delimiter).urlPercentEncoding())
            input.builder.withQueryItem(delimiterQueryItem)
        }
        if let encodingType = input.operationInput.encodingType {
            let encodingTypeQueryItem = ClientRuntime.URLQueryItem(name: "encoding-type".urlPercentEncoding(), value: Swift.String(encodingType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(encodingTypeQueryItem)
        }
        if let prefix = input.operationInput.prefix {
            let prefixQueryItem = ClientRuntime.URLQueryItem(name: "prefix".urlPercentEncoding(), value: Swift.String(prefix).urlPercentEncoding())
            input.builder.withQueryItem(prefixQueryItem)
        }
        if input.operationInput.maxKeys != 0 {
            let maxKeysQueryItem = ClientRuntime.URLQueryItem(name: "max-keys".urlPercentEncoding(), value: Swift.String(input.operationInput.maxKeys).urlPercentEncoding())
            input.builder.withQueryItem(maxKeysQueryItem)
        }
        if let keyMarker = input.operationInput.keyMarker {
            let keyMarkerQueryItem = ClientRuntime.URLQueryItem(name: "key-marker".urlPercentEncoding(), value: Swift.String(keyMarker).urlPercentEncoding())
            input.builder.withQueryItem(keyMarkerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListObjectVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListObjectVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListObjectVersionsOutputError>
}

public struct ListObjectVersionsInput: Swift.Equatable {
    /// <p>The bucket name that contains the objects. </p>
    public let bucket: Swift.String?
    /// <p>A delimiter is a character that you specify to group keys. All keys that contain the
    ///          same string between the <code>prefix</code> and the first occurrence of the delimiter are
    ///          grouped under a single result element in CommonPrefixes. These groups are counted as one
    ///          result against the max-keys limitation. These keys are not returned elsewhere in the
    ///          response.</p>
    public let delimiter: Swift.String?
    /// <p>Requests Amazon S3 to encode the object keys in the response and specifies the encoding
    ///          method to use. An object key may contain any Unicode character; however, XML 1.0 parser
    ///          cannot parse some characters, such as characters with an ASCII value from 0 to 10. For
    ///          characters that are not supported in XML 1.0, you can add this parameter to request that
    ///          Amazon S3 encode the keys in the response.</p>
    public let encodingType: S3ClientTypes.EncodingType?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Specifies the key to start with when listing objects in a bucket.</p>
    public let keyMarker: Swift.String?
    /// <p>Sets the maximum number of keys returned in the response. By default the action returns up
    ///          to 1,000 key names. The response might contain fewer keys but will never contain more. If
    ///          additional keys satisfy the search criteria, but were not returned because max-keys was
    ///          exceeded, the response contains <isTruncated>true</isTruncated>. To return the
    ///          additional keys, see key-marker and version-id-marker.</p>
    public let maxKeys: Swift.Int
    /// <p>Use this parameter to select only those keys that begin with the specified prefix. You
    ///          can use prefixes to separate a bucket into different groupings of keys. (You can think of
    ///          using prefix to make groups in the same way you'd use a folder in a file system.) You can
    ///          use prefix with delimiter to roll up numerous objects into a single result under
    ///          CommonPrefixes. </p>
    public let prefix: Swift.String?
    /// <p>Specifies the object version you want to start listing from.</p>
    public let versionIdMarker: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        expectedBucketOwner: Swift.String? = nil,
        keyMarker: Swift.String? = nil,
        maxKeys: Swift.Int = 0,
        prefix: Swift.String? = nil,
        versionIdMarker: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.expectedBucketOwner = expectedBucketOwner
        self.keyMarker = keyMarker
        self.maxKeys = maxKeys
        self.prefix = prefix
        self.versionIdMarker = versionIdMarker
    }
}

struct ListObjectVersionsInputBody: Swift.Equatable {
}

extension ListObjectVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListObjectVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListObjectVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListObjectVersionsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListObjectVersionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListObjectVersionsOutputResponse(commonPrefixes: \(Swift.String(describing: commonPrefixes)), deleteMarkers: \(Swift.String(describing: deleteMarkers)), delimiter: \(Swift.String(describing: delimiter)), encodingType: \(Swift.String(describing: encodingType)), isTruncated: \(Swift.String(describing: isTruncated)), keyMarker: \(Swift.String(describing: keyMarker)), maxKeys: \(Swift.String(describing: maxKeys)), name: \(Swift.String(describing: name)), nextKeyMarker: \(Swift.String(describing: nextKeyMarker)), nextVersionIdMarker: \(Swift.String(describing: nextVersionIdMarker)), prefix: \(Swift.String(describing: prefix)), versionIdMarker: \(Swift.String(describing: versionIdMarker)), versions: \(Swift.String(describing: versions)))"}
}

extension ListObjectVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListObjectVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.commonPrefixes = output.commonPrefixes
            self.deleteMarkers = output.deleteMarkers
            self.delimiter = output.delimiter
            self.encodingType = output.encodingType
            self.isTruncated = output.isTruncated
            self.keyMarker = output.keyMarker
            self.maxKeys = output.maxKeys
            self.name = output.name
            self.nextKeyMarker = output.nextKeyMarker
            self.nextVersionIdMarker = output.nextVersionIdMarker
            self.prefix = output.prefix
            self.versionIdMarker = output.versionIdMarker
            self.versions = output.versions
        } else {
            self.commonPrefixes = nil
            self.deleteMarkers = nil
            self.delimiter = nil
            self.encodingType = nil
            self.isTruncated = false
            self.keyMarker = nil
            self.maxKeys = 0
            self.name = nil
            self.nextKeyMarker = nil
            self.nextVersionIdMarker = nil
            self.prefix = nil
            self.versionIdMarker = nil
            self.versions = nil
        }
    }
}

public struct ListObjectVersionsOutputResponse: Swift.Equatable {
    /// <p>All of the keys rolled up into a common prefix count as a single return when calculating
    ///          the number of returns.</p>
    public let commonPrefixes: [S3ClientTypes.CommonPrefix]?
    /// <p>Container for an object that is a delete marker.</p>
    public let deleteMarkers: [S3ClientTypes.DeleteMarkerEntry]?
    /// <p>The delimiter grouping the included keys. A delimiter is a character that you specify to
    ///          group keys. All keys that contain the same string between the prefix and the first
    ///          occurrence of the delimiter are grouped under a single result element in
    ///             <code>CommonPrefixes</code>. These groups are counted as one result against the max-keys
    ///          limitation. These keys are not returned elsewhere in the response.</p>
    public let delimiter: Swift.String?
    /// <p> Encoding type used by Amazon S3 to encode object key names in the XML response.</p>
    ///
    ///          <p>If you specify encoding-type request parameter, Amazon S3 includes this element in the
    ///          response, and returns encoded key name values in the following response elements:</p>
    ///
    ///          <p>
    ///             <code>KeyMarker, NextKeyMarker, Prefix, Key</code>, and <code>Delimiter</code>.</p>
    public let encodingType: S3ClientTypes.EncodingType?
    /// <p>A flag that indicates whether Amazon S3 returned all of the results that satisfied the search
    ///          criteria. If your results were truncated, you can make a follow-up paginated request using
    ///          the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in
    ///          another request to return the rest of the results.</p>
    public let isTruncated: Swift.Bool
    /// <p>Marks the last key returned in a truncated response.</p>
    public let keyMarker: Swift.String?
    /// <p>Specifies the maximum number of objects to return.</p>
    public let maxKeys: Swift.Int
    /// <p>The bucket name.</p>
    public let name: Swift.String?
    /// <p>When the number of responses exceeds the value of <code>MaxKeys</code>,
    ///             <code>NextKeyMarker</code> specifies the first key not returned that satisfies the
    ///          search criteria. Use this value for the key-marker request parameter in a subsequent
    ///          request.</p>
    public let nextKeyMarker: Swift.String?
    /// <p>When the number of responses exceeds the value of <code>MaxKeys</code>,
    ///             <code>NextVersionIdMarker</code> specifies the first object version not returned that
    ///          satisfies the search criteria. Use this value for the version-id-marker request parameter
    ///          in a subsequent request.</p>
    public let nextVersionIdMarker: Swift.String?
    /// <p>Selects objects that start with the value supplied by this parameter.</p>
    public let prefix: Swift.String?
    /// <p>Marks the last version of the key returned in a truncated response.</p>
    public let versionIdMarker: Swift.String?
    /// <p>Container for version information.</p>
    public let versions: [S3ClientTypes.ObjectVersion]?

    public init (
        commonPrefixes: [S3ClientTypes.CommonPrefix]? = nil,
        deleteMarkers: [S3ClientTypes.DeleteMarkerEntry]? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        isTruncated: Swift.Bool = false,
        keyMarker: Swift.String? = nil,
        maxKeys: Swift.Int = 0,
        name: Swift.String? = nil,
        nextKeyMarker: Swift.String? = nil,
        nextVersionIdMarker: Swift.String? = nil,
        prefix: Swift.String? = nil,
        versionIdMarker: Swift.String? = nil,
        versions: [S3ClientTypes.ObjectVersion]? = nil
    )
    {
        self.commonPrefixes = commonPrefixes
        self.deleteMarkers = deleteMarkers
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.isTruncated = isTruncated
        self.keyMarker = keyMarker
        self.maxKeys = maxKeys
        self.name = name
        self.nextKeyMarker = nextKeyMarker
        self.nextVersionIdMarker = nextVersionIdMarker
        self.prefix = prefix
        self.versionIdMarker = versionIdMarker
        self.versions = versions
    }
}

struct ListObjectVersionsOutputResponseBody: Swift.Equatable {
    public let isTruncated: Swift.Bool
    public let keyMarker: Swift.String?
    public let versionIdMarker: Swift.String?
    public let nextKeyMarker: Swift.String?
    public let nextVersionIdMarker: Swift.String?
    public let versions: [S3ClientTypes.ObjectVersion]?
    public let deleteMarkers: [S3ClientTypes.DeleteMarkerEntry]?
    public let name: Swift.String?
    public let prefix: Swift.String?
    public let delimiter: Swift.String?
    public let maxKeys: Swift.Int
    public let commonPrefixes: [S3ClientTypes.CommonPrefix]?
    public let encodingType: S3ClientTypes.EncodingType?
}

extension ListObjectVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commonPrefixes = "CommonPrefixes"
        case deleteMarkers = "DeleteMarker"
        case delimiter = "Delimiter"
        case encodingType = "EncodingType"
        case isTruncated = "IsTruncated"
        case keyMarker = "KeyMarker"
        case maxKeys = "MaxKeys"
        case name = "Name"
        case nextKeyMarker = "NextKeyMarker"
        case nextVersionIdMarker = "NextVersionIdMarker"
        case prefix = "Prefix"
        case versionIdMarker = "VersionIdMarker"
        case versions = "Version"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let keyMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyMarker)
        keyMarker = keyMarkerDecoded
        let versionIdMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionIdMarker)
        versionIdMarker = versionIdMarkerDecoded
        let nextKeyMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextKeyMarker)
        nextKeyMarker = nextKeyMarkerDecoded
        let nextVersionIdMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextVersionIdMarker)
        nextVersionIdMarker = nextVersionIdMarkerDecoded
        if containerValues.contains(.versions) {
            let versionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .versions)
            if versionsWrappedContainer != nil {
                let versionsContainer = try containerValues.decodeIfPresent([S3ClientTypes.ObjectVersion].self, forKey: .versions)
                var versionsBuffer:[S3ClientTypes.ObjectVersion]? = nil
                if let versionsContainer = versionsContainer {
                    versionsBuffer = [S3ClientTypes.ObjectVersion]()
                    for structureContainer0 in versionsContainer {
                        versionsBuffer?.append(structureContainer0)
                    }
                }
                versions = versionsBuffer
            } else {
                versions = []
            }
        } else {
            versions = nil
        }
        if containerValues.contains(.deleteMarkers) {
            let deleteMarkersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .deleteMarkers)
            if deleteMarkersWrappedContainer != nil {
                let deleteMarkersContainer = try containerValues.decodeIfPresent([S3ClientTypes.DeleteMarkerEntry].self, forKey: .deleteMarkers)
                var deleteMarkersBuffer:[S3ClientTypes.DeleteMarkerEntry]? = nil
                if let deleteMarkersContainer = deleteMarkersContainer {
                    deleteMarkersBuffer = [S3ClientTypes.DeleteMarkerEntry]()
                    for structureContainer0 in deleteMarkersContainer {
                        deleteMarkersBuffer?.append(structureContainer0)
                    }
                }
                deleteMarkers = deleteMarkersBuffer
            } else {
                deleteMarkers = []
            }
        } else {
            deleteMarkers = nil
        }
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let maxKeysDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxKeys)
        maxKeys = maxKeysDecoded
        if containerValues.contains(.commonPrefixes) {
            let commonPrefixesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .commonPrefixes)
            if commonPrefixesWrappedContainer != nil {
                let commonPrefixesContainer = try containerValues.decodeIfPresent([S3ClientTypes.CommonPrefix].self, forKey: .commonPrefixes)
                var commonPrefixesBuffer:[S3ClientTypes.CommonPrefix]? = nil
                if let commonPrefixesContainer = commonPrefixesContainer {
                    commonPrefixesBuffer = [S3ClientTypes.CommonPrefix]()
                    for structureContainer0 in commonPrefixesContainer {
                        commonPrefixesBuffer?.append(structureContainer0)
                    }
                }
                commonPrefixes = commonPrefixesBuffer
            } else {
                commonPrefixes = []
            }
        } else {
            commonPrefixes = nil
        }
        let encodingTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.EncodingType.self, forKey: .encodingType)
        encodingType = encodingTypeDecoded
    }
}

extension ListObjectsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListObjectsInput(bucket: \(Swift.String(describing: bucket)), delimiter: \(Swift.String(describing: delimiter)), encodingType: \(Swift.String(describing: encodingType)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), marker: \(Swift.String(describing: marker)), maxKeys: \(Swift.String(describing: maxKeys)), prefix: \(Swift.String(describing: prefix)), requestPayer: \(Swift.String(describing: requestPayer)))"}
}

extension ListObjectsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListObjectsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListObjectsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListObjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListObjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListObjectsOutputError>
}

public struct ListObjectsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListObjectsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListObjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let delimiter = input.operationInput.delimiter {
            let delimiterQueryItem = ClientRuntime.URLQueryItem(name: "delimiter".urlPercentEncoding(), value: Swift.String(delimiter).urlPercentEncoding())
            input.builder.withQueryItem(delimiterQueryItem)
        }
        if let encodingType = input.operationInput.encodingType {
            let encodingTypeQueryItem = ClientRuntime.URLQueryItem(name: "encoding-type".urlPercentEncoding(), value: Swift.String(encodingType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(encodingTypeQueryItem)
        }
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let prefix = input.operationInput.prefix {
            let prefixQueryItem = ClientRuntime.URLQueryItem(name: "prefix".urlPercentEncoding(), value: Swift.String(prefix).urlPercentEncoding())
            input.builder.withQueryItem(prefixQueryItem)
        }
        if input.operationInput.maxKeys != 0 {
            let maxKeysQueryItem = ClientRuntime.URLQueryItem(name: "max-keys".urlPercentEncoding(), value: Swift.String(input.operationInput.maxKeys).urlPercentEncoding())
            input.builder.withQueryItem(maxKeysQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListObjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListObjectsOutputError>
}

public struct ListObjectsInput: Swift.Equatable {
    /// <p>The name of the bucket containing the objects.</p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>A delimiter is a character you use to group keys.</p>
    public let delimiter: Swift.String?
    /// <p>Requests Amazon S3 to encode the object keys in the response and specifies the encoding
    ///          method to use. An object key may contain any Unicode character; however, XML 1.0 parser
    ///          cannot parse some characters, such as characters with an ASCII value from 0 to 10. For
    ///          characters that are not supported in XML 1.0, you can add this parameter to request that
    ///          Amazon S3 encode the keys in the response.</p>
    public let encodingType: S3ClientTypes.EncodingType?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Specifies the key to start with when listing objects in a bucket.</p>
    public let marker: Swift.String?
    /// <p>Sets the maximum number of keys returned in the response. By default the action returns up
    ///          to 1,000 key names. The response might contain fewer keys but will never contain more.
    ///       </p>
    public let maxKeys: Swift.Int
    /// <p>Limits the response to keys that begin with the specified prefix.</p>
    public let prefix: Swift.String?
    /// <p>Confirms that the requester knows that she or he will be charged for the list objects
    ///          request. Bucket owners need not specify this parameter in their requests.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?

    public init (
        bucket: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        expectedBucketOwner: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxKeys: Swift.Int = 0,
        prefix: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil
    )
    {
        self.bucket = bucket
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.expectedBucketOwner = expectedBucketOwner
        self.marker = marker
        self.maxKeys = maxKeys
        self.prefix = prefix
        self.requestPayer = requestPayer
    }
}

struct ListObjectsInputBody: Swift.Equatable {
}

extension ListObjectsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListObjectsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListObjectsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchBucket" : self = .noSuchBucket(try NoSuchBucket(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListObjectsOutputError: Swift.Error, Swift.Equatable {
    case noSuchBucket(NoSuchBucket)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListObjectsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListObjectsOutputResponse(commonPrefixes: \(Swift.String(describing: commonPrefixes)), contents: \(Swift.String(describing: contents)), delimiter: \(Swift.String(describing: delimiter)), encodingType: \(Swift.String(describing: encodingType)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), maxKeys: \(Swift.String(describing: maxKeys)), name: \(Swift.String(describing: name)), nextMarker: \(Swift.String(describing: nextMarker)), prefix: \(Swift.String(describing: prefix)))"}
}

extension ListObjectsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListObjectsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.commonPrefixes = output.commonPrefixes
            self.contents = output.contents
            self.delimiter = output.delimiter
            self.encodingType = output.encodingType
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.maxKeys = output.maxKeys
            self.name = output.name
            self.nextMarker = output.nextMarker
            self.prefix = output.prefix
        } else {
            self.commonPrefixes = nil
            self.contents = nil
            self.delimiter = nil
            self.encodingType = nil
            self.isTruncated = false
            self.marker = nil
            self.maxKeys = 0
            self.name = nil
            self.nextMarker = nil
            self.prefix = nil
        }
    }
}

public struct ListObjectsOutputResponse: Swift.Equatable {
    /// <p>All of the keys (up to 1,000) rolled up in a common prefix count as a single return when calculating
    ///          the number of returns. </p>
    ///
    ///          <p>A response can contain CommonPrefixes only if you specify a delimiter.</p>
    ///
    ///          <p>CommonPrefixes contains all (if there are any) keys between Prefix and the next
    ///          occurrence of the string specified by the delimiter.</p>
    ///
    ///          <p> CommonPrefixes lists keys that act like subdirectories in the directory specified by
    ///          Prefix.</p>
    ///
    ///          <p>For example, if the prefix is notes/ and the delimiter is a slash (/) as in
    ///          notes/summer/july, the common prefix is notes/summer/. All of the keys that roll up into a
    ///          common prefix count as a single return when calculating the number of returns.</p>
    public let commonPrefixes: [S3ClientTypes.CommonPrefix]?
    /// <p>Metadata about each object returned.</p>
    public let contents: [S3ClientTypes.Object]?
    /// <p>Causes keys that contain the same string between the prefix and the first occurrence of
    ///          the delimiter to be rolled up into a single result element in the
    ///             <code>CommonPrefixes</code> collection. These rolled-up keys are not returned elsewhere
    ///          in the response. Each rolled-up result counts as only one return against the
    ///             <code>MaxKeys</code> value.</p>
    public let delimiter: Swift.String?
    /// <p>Encoding type used by Amazon S3 to encode object keys in the response.</p>
    public let encodingType: S3ClientTypes.EncodingType?
    /// <p>A flag that indicates whether Amazon S3 returned all of the results that satisfied the search
    ///          criteria.</p>
    public let isTruncated: Swift.Bool
    /// <p>Indicates where in the bucket listing begins. Marker is included in the response if it
    ///          was sent with the request.</p>
    public let marker: Swift.String?
    /// <p>The maximum number of keys returned in the response body.</p>
    public let maxKeys: Swift.Int
    /// <p>The bucket name.</p>
    public let name: Swift.String?
    /// <p>When response is truncated (the IsTruncated element value in the response is true), you
    ///          can use the key name in this field as marker in the subsequent request to get next set of
    ///          objects. Amazon S3 lists objects in alphabetical order Note: This element is returned only if
    ///          you have delimiter request parameter specified. If response does not include the NextMarker
    ///          and it is truncated, you can use the value of the last Key in the response as the marker in
    ///          the subsequent request to get the next set of object keys.</p>
    public let nextMarker: Swift.String?
    /// <p>Keys that begin with the indicated prefix.</p>
    public let prefix: Swift.String?

    public init (
        commonPrefixes: [S3ClientTypes.CommonPrefix]? = nil,
        contents: [S3ClientTypes.Object]? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        maxKeys: Swift.Int = 0,
        name: Swift.String? = nil,
        nextMarker: Swift.String? = nil,
        prefix: Swift.String? = nil
    )
    {
        self.commonPrefixes = commonPrefixes
        self.contents = contents
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.isTruncated = isTruncated
        self.marker = marker
        self.maxKeys = maxKeys
        self.name = name
        self.nextMarker = nextMarker
        self.prefix = prefix
    }
}

struct ListObjectsOutputResponseBody: Swift.Equatable {
    public let isTruncated: Swift.Bool
    public let marker: Swift.String?
    public let nextMarker: Swift.String?
    public let contents: [S3ClientTypes.Object]?
    public let name: Swift.String?
    public let prefix: Swift.String?
    public let delimiter: Swift.String?
    public let maxKeys: Swift.Int
    public let commonPrefixes: [S3ClientTypes.CommonPrefix]?
    public let encodingType: S3ClientTypes.EncodingType?
}

extension ListObjectsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commonPrefixes = "CommonPrefixes"
        case contents = "Contents"
        case delimiter = "Delimiter"
        case encodingType = "EncodingType"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case maxKeys = "MaxKeys"
        case name = "Name"
        case nextMarker = "NextMarker"
        case prefix = "Prefix"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        if containerValues.contains(.contents) {
            let contentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .contents)
            if contentsWrappedContainer != nil {
                let contentsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Object].self, forKey: .contents)
                var contentsBuffer:[S3ClientTypes.Object]? = nil
                if let contentsContainer = contentsContainer {
                    contentsBuffer = [S3ClientTypes.Object]()
                    for structureContainer0 in contentsContainer {
                        contentsBuffer?.append(structureContainer0)
                    }
                }
                contents = contentsBuffer
            } else {
                contents = []
            }
        } else {
            contents = nil
        }
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let maxKeysDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxKeys)
        maxKeys = maxKeysDecoded
        if containerValues.contains(.commonPrefixes) {
            let commonPrefixesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .commonPrefixes)
            if commonPrefixesWrappedContainer != nil {
                let commonPrefixesContainer = try containerValues.decodeIfPresent([S3ClientTypes.CommonPrefix].self, forKey: .commonPrefixes)
                var commonPrefixesBuffer:[S3ClientTypes.CommonPrefix]? = nil
                if let commonPrefixesContainer = commonPrefixesContainer {
                    commonPrefixesBuffer = [S3ClientTypes.CommonPrefix]()
                    for structureContainer0 in commonPrefixesContainer {
                        commonPrefixesBuffer?.append(structureContainer0)
                    }
                }
                commonPrefixes = commonPrefixesBuffer
            } else {
                commonPrefixes = []
            }
        } else {
            commonPrefixes = nil
        }
        let encodingTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.EncodingType.self, forKey: .encodingType)
        encodingType = encodingTypeDecoded
    }
}

extension ListObjectsV2Input: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListObjectsV2Input(bucket: \(Swift.String(describing: bucket)), continuationToken: \(Swift.String(describing: continuationToken)), delimiter: \(Swift.String(describing: delimiter)), encodingType: \(Swift.String(describing: encodingType)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), fetchOwner: \(Swift.String(describing: fetchOwner)), maxKeys: \(Swift.String(describing: maxKeys)), prefix: \(Swift.String(describing: prefix)), requestPayer: \(Swift.String(describing: requestPayer)), startAfter: \(Swift.String(describing: startAfter)))"}
}

extension ListObjectsV2Input: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListObjectsV2InputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListObjectsV2InputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListObjectsV2Input>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListObjectsV2OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListObjectsV2Input>
    public typealias MOutput = ClientRuntime.OperationOutput<ListObjectsV2OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListObjectsV2OutputError>
}

public struct ListObjectsV2InputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListObjectsV2InputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListObjectsV2Input>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListObjectsV2OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "list-type", value: "2"))
        if let continuationToken = input.operationInput.continuationToken {
            let continuationTokenQueryItem = ClientRuntime.URLQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
            input.builder.withQueryItem(continuationTokenQueryItem)
        }
        if let delimiter = input.operationInput.delimiter {
            let delimiterQueryItem = ClientRuntime.URLQueryItem(name: "delimiter".urlPercentEncoding(), value: Swift.String(delimiter).urlPercentEncoding())
            input.builder.withQueryItem(delimiterQueryItem)
        }
        if input.operationInput.fetchOwner != false {
            let fetchOwnerQueryItem = ClientRuntime.URLQueryItem(name: "fetch-owner".urlPercentEncoding(), value: Swift.String(input.operationInput.fetchOwner).urlPercentEncoding())
            input.builder.withQueryItem(fetchOwnerQueryItem)
        }
        if let encodingType = input.operationInput.encodingType {
            let encodingTypeQueryItem = ClientRuntime.URLQueryItem(name: "encoding-type".urlPercentEncoding(), value: Swift.String(encodingType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(encodingTypeQueryItem)
        }
        if let startAfter = input.operationInput.startAfter {
            let startAfterQueryItem = ClientRuntime.URLQueryItem(name: "start-after".urlPercentEncoding(), value: Swift.String(startAfter).urlPercentEncoding())
            input.builder.withQueryItem(startAfterQueryItem)
        }
        if let prefix = input.operationInput.prefix {
            let prefixQueryItem = ClientRuntime.URLQueryItem(name: "prefix".urlPercentEncoding(), value: Swift.String(prefix).urlPercentEncoding())
            input.builder.withQueryItem(prefixQueryItem)
        }
        if input.operationInput.maxKeys != 0 {
            let maxKeysQueryItem = ClientRuntime.URLQueryItem(name: "max-keys".urlPercentEncoding(), value: Swift.String(input.operationInput.maxKeys).urlPercentEncoding())
            input.builder.withQueryItem(maxKeysQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListObjectsV2Input>
    public typealias MOutput = ClientRuntime.OperationOutput<ListObjectsV2OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListObjectsV2OutputError>
}

public struct ListObjectsV2Input: Swift.Equatable {
    /// <p>Bucket name to list. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a
    ///          token. ContinuationToken is obfuscated and is not a real key.</p>
    public let continuationToken: Swift.String?
    /// <p>A delimiter is a character you use to group keys.</p>
    public let delimiter: Swift.String?
    /// <p>Encoding type used by Amazon S3 to encode object keys in the response.</p>
    public let encodingType: S3ClientTypes.EncodingType?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The owner field is not present in listV2 by default, if you want to return owner field
    ///          with each key in the result then set the fetch owner field to true.</p>
    public let fetchOwner: Swift.Bool
    /// <p>Sets the maximum number of keys returned in the response. By default the action returns up
    ///          to 1,000 key names. The response might contain fewer keys but will never contain
    ///          more.</p>
    public let maxKeys: Swift.Int
    /// <p>Limits the response to keys that begin with the specified prefix.</p>
    public let prefix: Swift.String?
    /// <p>Confirms that the requester knows that she or he will be charged for the list objects
    ///          request in V2 style. Bucket owners need not specify this parameter in their
    ///          requests.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this
    ///          specified key. StartAfter can be any key in the bucket.</p>
    public let startAfter: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        expectedBucketOwner: Swift.String? = nil,
        fetchOwner: Swift.Bool = false,
        maxKeys: Swift.Int = 0,
        prefix: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        startAfter: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.expectedBucketOwner = expectedBucketOwner
        self.fetchOwner = fetchOwner
        self.maxKeys = maxKeys
        self.prefix = prefix
        self.requestPayer = requestPayer
        self.startAfter = startAfter
    }
}

struct ListObjectsV2InputBody: Swift.Equatable {
}

extension ListObjectsV2InputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListObjectsV2OutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListObjectsV2OutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchBucket" : self = .noSuchBucket(try NoSuchBucket(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListObjectsV2OutputError: Swift.Error, Swift.Equatable {
    case noSuchBucket(NoSuchBucket)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListObjectsV2OutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListObjectsV2OutputResponse(commonPrefixes: \(Swift.String(describing: commonPrefixes)), contents: \(Swift.String(describing: contents)), continuationToken: \(Swift.String(describing: continuationToken)), delimiter: \(Swift.String(describing: delimiter)), encodingType: \(Swift.String(describing: encodingType)), isTruncated: \(Swift.String(describing: isTruncated)), keyCount: \(Swift.String(describing: keyCount)), maxKeys: \(Swift.String(describing: maxKeys)), name: \(Swift.String(describing: name)), nextContinuationToken: \(Swift.String(describing: nextContinuationToken)), prefix: \(Swift.String(describing: prefix)), startAfter: \(Swift.String(describing: startAfter)))"}
}

extension ListObjectsV2OutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListObjectsV2OutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.commonPrefixes = output.commonPrefixes
            self.contents = output.contents
            self.continuationToken = output.continuationToken
            self.delimiter = output.delimiter
            self.encodingType = output.encodingType
            self.isTruncated = output.isTruncated
            self.keyCount = output.keyCount
            self.maxKeys = output.maxKeys
            self.name = output.name
            self.nextContinuationToken = output.nextContinuationToken
            self.prefix = output.prefix
            self.startAfter = output.startAfter
        } else {
            self.commonPrefixes = nil
            self.contents = nil
            self.continuationToken = nil
            self.delimiter = nil
            self.encodingType = nil
            self.isTruncated = false
            self.keyCount = 0
            self.maxKeys = 0
            self.name = nil
            self.nextContinuationToken = nil
            self.prefix = nil
            self.startAfter = nil
        }
    }
}

public struct ListObjectsV2OutputResponse: Swift.Equatable {
    /// <p>All of the keys (up to 1,000) rolled up into a common prefix count as a single return when calculating
    ///          the number of returns.</p>
    ///
    ///          <p>A response can contain <code>CommonPrefixes</code> only if you specify a
    ///          delimiter.</p>
    ///
    ///          <p>
    ///             <code>CommonPrefixes</code> contains all (if there are any) keys between
    ///             <code>Prefix</code> and the next occurrence of the string specified by a
    ///          delimiter.</p>
    ///
    ///          <p>
    ///             <code>CommonPrefixes</code> lists keys that act like subdirectories in the directory
    ///          specified by <code>Prefix</code>.</p>
    ///
    ///          <p>For example, if the prefix is <code>notes/</code> and the delimiter is a slash
    ///             (<code>/</code>) as in <code>notes/summer/july</code>, the common prefix is
    ///             <code>notes/summer/</code>. All of the keys that roll up into a common prefix count as a
    ///          single return when calculating the number of returns. </p>
    public let commonPrefixes: [S3ClientTypes.CommonPrefix]?
    /// <p>Metadata about each object returned.</p>
    public let contents: [S3ClientTypes.Object]?
    /// <p> If ContinuationToken was sent with the request, it is included in the response.</p>
    public let continuationToken: Swift.String?
    /// <p>Causes keys that contain the same string between the prefix and the first occurrence of
    ///          the delimiter to be rolled up into a single result element in the CommonPrefixes
    ///          collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up
    ///          result counts as only one return against the <code>MaxKeys</code> value.</p>
    public let delimiter: Swift.String?
    /// <p>Encoding type used by Amazon S3 to encode object key names in the XML response.</p>
    ///
    ///          <p>If you specify the encoding-type request parameter, Amazon S3 includes this element in the
    ///          response, and returns encoded key name values in the following response elements:</p>
    ///
    ///          <p>
    ///             <code>Delimiter, Prefix, Key,</code> and <code>StartAfter</code>.</p>
    public let encodingType: S3ClientTypes.EncodingType?
    /// <p>Set to false if all of the results were returned. Set to true if more keys are available
    ///          to return. If the number of results exceeds that specified by MaxKeys, all of the results
    ///          might not be returned.</p>
    public let isTruncated: Swift.Bool
    /// <p>KeyCount is the number of keys returned with this request. KeyCount will always be less
    ///          than or equals to MaxKeys field. Say you ask for 50 keys, your result will include less than
    ///          equals 50 keys </p>
    public let keyCount: Swift.Int
    /// <p>Sets the maximum number of keys returned in the response. By default the action returns up
    ///          to 1,000 key names. The response might contain fewer keys but will never contain
    ///          more.</p>
    public let maxKeys: Swift.Int
    /// <p>The bucket name.</p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let name: Swift.String?
    /// <p>
    ///             <code>NextContinuationToken</code> is sent when <code>isTruncated</code> is true, which
    ///          means there are more keys in the bucket that can be listed. The next list requests to Amazon S3
    ///          can be continued with this <code>NextContinuationToken</code>.
    ///             <code>NextContinuationToken</code> is obfuscated and is not a real key</p>
    public let nextContinuationToken: Swift.String?
    /// <p> Keys that begin with the indicated prefix.</p>
    public let prefix: Swift.String?
    /// <p>If StartAfter was sent with the request, it is included in the response.</p>
    public let startAfter: Swift.String?

    public init (
        commonPrefixes: [S3ClientTypes.CommonPrefix]? = nil,
        contents: [S3ClientTypes.Object]? = nil,
        continuationToken: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        isTruncated: Swift.Bool = false,
        keyCount: Swift.Int = 0,
        maxKeys: Swift.Int = 0,
        name: Swift.String? = nil,
        nextContinuationToken: Swift.String? = nil,
        prefix: Swift.String? = nil,
        startAfter: Swift.String? = nil
    )
    {
        self.commonPrefixes = commonPrefixes
        self.contents = contents
        self.continuationToken = continuationToken
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.isTruncated = isTruncated
        self.keyCount = keyCount
        self.maxKeys = maxKeys
        self.name = name
        self.nextContinuationToken = nextContinuationToken
        self.prefix = prefix
        self.startAfter = startAfter
    }
}

struct ListObjectsV2OutputResponseBody: Swift.Equatable {
    public let isTruncated: Swift.Bool
    public let contents: [S3ClientTypes.Object]?
    public let name: Swift.String?
    public let prefix: Swift.String?
    public let delimiter: Swift.String?
    public let maxKeys: Swift.Int
    public let commonPrefixes: [S3ClientTypes.CommonPrefix]?
    public let encodingType: S3ClientTypes.EncodingType?
    public let keyCount: Swift.Int
    public let continuationToken: Swift.String?
    public let nextContinuationToken: Swift.String?
    public let startAfter: Swift.String?
}

extension ListObjectsV2OutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commonPrefixes = "CommonPrefixes"
        case contents = "Contents"
        case continuationToken = "ContinuationToken"
        case delimiter = "Delimiter"
        case encodingType = "EncodingType"
        case isTruncated = "IsTruncated"
        case keyCount = "KeyCount"
        case maxKeys = "MaxKeys"
        case name = "Name"
        case nextContinuationToken = "NextContinuationToken"
        case prefix = "Prefix"
        case startAfter = "StartAfter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        if containerValues.contains(.contents) {
            let contentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .contents)
            if contentsWrappedContainer != nil {
                let contentsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Object].self, forKey: .contents)
                var contentsBuffer:[S3ClientTypes.Object]? = nil
                if let contentsContainer = contentsContainer {
                    contentsBuffer = [S3ClientTypes.Object]()
                    for structureContainer0 in contentsContainer {
                        contentsBuffer?.append(structureContainer0)
                    }
                }
                contents = contentsBuffer
            } else {
                contents = []
            }
        } else {
            contents = nil
        }
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let maxKeysDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxKeys)
        maxKeys = maxKeysDecoded
        if containerValues.contains(.commonPrefixes) {
            let commonPrefixesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .commonPrefixes)
            if commonPrefixesWrappedContainer != nil {
                let commonPrefixesContainer = try containerValues.decodeIfPresent([S3ClientTypes.CommonPrefix].self, forKey: .commonPrefixes)
                var commonPrefixesBuffer:[S3ClientTypes.CommonPrefix]? = nil
                if let commonPrefixesContainer = commonPrefixesContainer {
                    commonPrefixesBuffer = [S3ClientTypes.CommonPrefix]()
                    for structureContainer0 in commonPrefixesContainer {
                        commonPrefixesBuffer?.append(structureContainer0)
                    }
                }
                commonPrefixes = commonPrefixesBuffer
            } else {
                commonPrefixes = []
            }
        } else {
            commonPrefixes = nil
        }
        let encodingTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.EncodingType.self, forKey: .encodingType)
        encodingType = encodingTypeDecoded
        let keyCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .keyCount)
        keyCount = keyCountDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let nextContinuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextContinuationToken)
        nextContinuationToken = nextContinuationTokenDecoded
        let startAfterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startAfter)
        startAfter = startAfterDecoded
    }
}

extension ListPartsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPartsInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), maxParts: \(Swift.String(describing: maxParts)), partNumberMarker: \(Swift.String(describing: partNumberMarker)), requestPayer: \(Swift.String(describing: requestPayer)), uploadId: \(Swift.String(describing: uploadId)))"}
}

extension ListPartsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListPartsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPartsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPartsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPartsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPartsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPartsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPartsOutputError>
}

public struct ListPartsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPartsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPartsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPartsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "ListParts"))
        if let partNumberMarker = input.operationInput.partNumberMarker {
            let partNumberMarkerQueryItem = ClientRuntime.URLQueryItem(name: "part-number-marker".urlPercentEncoding(), value: Swift.String(partNumberMarker).urlPercentEncoding())
            input.builder.withQueryItem(partNumberMarkerQueryItem)
        }
        if input.operationInput.maxParts != 0 {
            let maxPartsQueryItem = ClientRuntime.URLQueryItem(name: "max-parts".urlPercentEncoding(), value: Swift.String(input.operationInput.maxParts).urlPercentEncoding())
            input.builder.withQueryItem(maxPartsQueryItem)
        }
        if let uploadId = input.operationInput.uploadId {
            let uploadIdQueryItem = ClientRuntime.URLQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
            input.builder.withQueryItem(uploadIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPartsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPartsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPartsOutputError>
}

public struct ListPartsInput: Swift.Equatable {
    /// <p>The name of the bucket to which the parts are being uploaded. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Object key for which the multipart upload was initiated.</p>
    public let key: Swift.String?
    /// <p>Sets the maximum number of parts to return.</p>
    public let maxParts: Swift.Int
    /// <p>Specifies the part after which listing should begin. Only parts with higher part numbers
    ///          will be listed.</p>
    public let partNumberMarker: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>Upload ID identifying the multipart upload whose parts are being listed.</p>
    public let uploadId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        maxParts: Swift.Int = 0,
        partNumberMarker: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.maxParts = maxParts
        self.partNumberMarker = partNumberMarker
        self.requestPayer = requestPayer
        self.uploadId = uploadId
    }
}

struct ListPartsInputBody: Swift.Equatable {
}

extension ListPartsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListPartsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListPartsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPartsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPartsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPartsOutputResponse(abortDate: \(Swift.String(describing: abortDate)), abortRuleId: \(Swift.String(describing: abortRuleId)), bucket: \(Swift.String(describing: bucket)), initiator: \(Swift.String(describing: initiator)), isTruncated: \(Swift.String(describing: isTruncated)), key: \(Swift.String(describing: key)), maxParts: \(Swift.String(describing: maxParts)), nextPartNumberMarker: \(Swift.String(describing: nextPartNumberMarker)), owner: \(Swift.String(describing: owner)), partNumberMarker: \(Swift.String(describing: partNumberMarker)), parts: \(Swift.String(describing: parts)), requestCharged: \(Swift.String(describing: requestCharged)), storageClass: \(Swift.String(describing: storageClass)), uploadId: \(Swift.String(describing: uploadId)))"}
}

extension ListPartsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let abortDateHeaderValue = httpResponse.headers.value(for: "x-amz-abort-date") {
            self.abortDate = DateFormatter.rfc5322DateFormatter.date(from: abortDateHeaderValue)
        } else {
            self.abortDate = nil
        }
        if let abortRuleIdHeaderValue = httpResponse.headers.value(for: "x-amz-abort-rule-id") {
            self.abortRuleId = abortRuleIdHeaderValue
        } else {
            self.abortRuleId = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPartsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bucket = output.bucket
            self.initiator = output.initiator
            self.isTruncated = output.isTruncated
            self.key = output.key
            self.maxParts = output.maxParts
            self.nextPartNumberMarker = output.nextPartNumberMarker
            self.owner = output.owner
            self.partNumberMarker = output.partNumberMarker
            self.parts = output.parts
            self.storageClass = output.storageClass
            self.uploadId = output.uploadId
        } else {
            self.bucket = nil
            self.initiator = nil
            self.isTruncated = false
            self.key = nil
            self.maxParts = 0
            self.nextPartNumberMarker = nil
            self.owner = nil
            self.partNumberMarker = nil
            self.parts = nil
            self.storageClass = nil
            self.uploadId = nil
        }
    }
}

public struct ListPartsOutputResponse: Swift.Equatable {
    /// <p>If the bucket has a lifecycle rule configured with an action to abort incomplete
    ///          multipart uploads and the prefix in the lifecycle rule matches the object name in the
    ///          request, then the response includes this header indicating when the initiated multipart
    ///          upload will become eligible for abort operation. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">Aborting
    ///             Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a>.</p>
    ///
    ///          <p>The response will also include the <code>x-amz-abort-rule-id</code> header that will
    ///          provide the ID of the lifecycle configuration rule that defines this action.</p>
    public let abortDate: ClientRuntime.Date?
    /// <p>This header is returned along with the <code>x-amz-abort-date</code> header. It
    ///          identifies applicable lifecycle configuration rule that defines the action to abort
    ///          incomplete multipart uploads.</p>
    public let abortRuleId: Swift.String?
    /// <p>The name of the bucket to which the multipart upload was initiated.</p>
    public let bucket: Swift.String?
    /// <p>Container element that identifies who initiated the multipart upload. If the initiator
    ///          is an AWS account, this element provides the same information as the <code>Owner</code>
    ///          element. If the initiator is an IAM User, this element provides the user ARN and display
    ///          name.</p>
    public let initiator: S3ClientTypes.Initiator?
    /// <p> Indicates whether the returned list of parts is truncated. A true value indicates that
    ///          the list was truncated. A list can be truncated if the number of parts exceeds the limit
    ///          returned in the MaxParts element.</p>
    public let isTruncated: Swift.Bool
    /// <p>Object key for which the multipart upload was initiated.</p>
    public let key: Swift.String?
    /// <p>Maximum number of parts that were allowed in the response.</p>
    public let maxParts: Swift.Int
    /// <p>When a list is truncated, this element specifies the last part in the list, as well as
    ///          the value to use for the part-number-marker request parameter in a subsequent
    ///          request.</p>
    public let nextPartNumberMarker: Swift.String?
    /// <p> Container element that identifies the object owner, after the object is created. If
    ///          multipart upload is initiated by an IAM user, this element provides the parent account ID
    ///          and display name.</p>
    public let owner: S3ClientTypes.Owner?
    /// <p>When a list is truncated, this element specifies the last part in the list, as well as
    ///          the value to use for the part-number-marker request parameter in a subsequent
    ///          request.</p>
    public let partNumberMarker: Swift.String?
    /// <p> Container for elements related to a particular part. A response can contain zero or
    ///          more <code>Part</code> elements.</p>
    public let parts: [S3ClientTypes.Part]?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?
    /// <p>Class of storage (STANDARD or REDUCED_REDUNDANCY) used to store the uploaded
    ///          object.</p>
    public let storageClass: S3ClientTypes.StorageClass?
    /// <p>Upload ID identifying the multipart upload whose parts are being listed.</p>
    public let uploadId: Swift.String?

    public init (
        abortDate: ClientRuntime.Date? = nil,
        abortRuleId: Swift.String? = nil,
        bucket: Swift.String? = nil,
        initiator: S3ClientTypes.Initiator? = nil,
        isTruncated: Swift.Bool = false,
        key: Swift.String? = nil,
        maxParts: Swift.Int = 0,
        nextPartNumberMarker: Swift.String? = nil,
        owner: S3ClientTypes.Owner? = nil,
        partNumberMarker: Swift.String? = nil,
        parts: [S3ClientTypes.Part]? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.abortDate = abortDate
        self.abortRuleId = abortRuleId
        self.bucket = bucket
        self.initiator = initiator
        self.isTruncated = isTruncated
        self.key = key
        self.maxParts = maxParts
        self.nextPartNumberMarker = nextPartNumberMarker
        self.owner = owner
        self.partNumberMarker = partNumberMarker
        self.parts = parts
        self.requestCharged = requestCharged
        self.storageClass = storageClass
        self.uploadId = uploadId
    }
}

struct ListPartsOutputResponseBody: Swift.Equatable {
    public let bucket: Swift.String?
    public let key: Swift.String?
    public let uploadId: Swift.String?
    public let partNumberMarker: Swift.String?
    public let nextPartNumberMarker: Swift.String?
    public let maxParts: Swift.Int
    public let isTruncated: Swift.Bool
    public let parts: [S3ClientTypes.Part]?
    public let initiator: S3ClientTypes.Initiator?
    public let owner: S3ClientTypes.Owner?
    public let storageClass: S3ClientTypes.StorageClass?
}

extension ListPartsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case initiator = "Initiator"
        case isTruncated = "IsTruncated"
        case key = "Key"
        case maxParts = "MaxParts"
        case nextPartNumberMarker = "NextPartNumberMarker"
        case owner = "Owner"
        case partNumberMarker = "PartNumberMarker"
        case parts = "Part"
        case storageClass = "StorageClass"
        case uploadId = "UploadId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let uploadIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadId)
        uploadId = uploadIdDecoded
        let partNumberMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partNumberMarker)
        partNumberMarker = partNumberMarkerDecoded
        let nextPartNumberMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPartNumberMarker)
        nextPartNumberMarker = nextPartNumberMarkerDecoded
        let maxPartsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxParts)
        maxParts = maxPartsDecoded
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        if containerValues.contains(.parts) {
            let partsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .parts)
            if partsWrappedContainer != nil {
                let partsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Part].self, forKey: .parts)
                var partsBuffer:[S3ClientTypes.Part]? = nil
                if let partsContainer = partsContainer {
                    partsBuffer = [S3ClientTypes.Part]()
                    for structureContainer0 in partsContainer {
                        partsBuffer?.append(structureContainer0)
                    }
                }
                parts = partsBuffer
            } else {
                parts = []
            }
        } else {
            parts = nil
        }
        let initiatorDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Initiator.self, forKey: .initiator)
        initiator = initiatorDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
    }
}

extension S3ClientTypes.LoggingEnabled: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetBucket = "TargetBucket"
        case targetGrants = "TargetGrants"
        case targetPrefix = "TargetPrefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let targetBucket = targetBucket {
            try container.encode(targetBucket, forKey: ClientRuntime.Key("TargetBucket"))
        }
        if let targetGrants = targetGrants {
            var targetGrantsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGrants"))
            for targetgrant0 in targetGrants {
                try targetGrantsContainer.encode(targetgrant0, forKey: ClientRuntime.Key("Grant"))
            }
        }
        if let targetPrefix = targetPrefix {
            try container.encode(targetPrefix, forKey: ClientRuntime.Key("TargetPrefix"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetBucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetBucket)
        targetBucket = targetBucketDecoded
        if containerValues.contains(.targetGrants) {
            struct KeyVal0{struct Grant{}}
            let targetGrantsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Grant>.CodingKeys.self, forKey: .targetGrants)
            if let targetGrantsWrappedContainer = targetGrantsWrappedContainer {
                let targetGrantsContainer = try targetGrantsWrappedContainer.decodeIfPresent([S3ClientTypes.TargetGrant].self, forKey: .member)
                var targetGrantsBuffer:[S3ClientTypes.TargetGrant]? = nil
                if let targetGrantsContainer = targetGrantsContainer {
                    targetGrantsBuffer = [S3ClientTypes.TargetGrant]()
                    for structureContainer0 in targetGrantsContainer {
                        targetGrantsBuffer?.append(structureContainer0)
                    }
                }
                targetGrants = targetGrantsBuffer
            } else {
                targetGrants = []
            }
        } else {
            targetGrants = nil
        }
        let targetPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetPrefix)
        targetPrefix = targetPrefixDecoded
    }
}

extension S3ClientTypes.LoggingEnabled: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoggingEnabled(targetBucket: \(Swift.String(describing: targetBucket)), targetGrants: \(Swift.String(describing: targetGrants)), targetPrefix: \(Swift.String(describing: targetPrefix)))"}
}

extension S3ClientTypes.LoggingEnabled: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys
    ///          for a bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html">PUT Bucket logging</a> in the
    ///             <i>Amazon S3 API Reference</i>.</p>
    public struct LoggingEnabled: Swift.Equatable {
        /// <p>Specifies the bucket where you want Amazon S3 to store server access logs. You can have your
        ///          logs delivered to any bucket that you own, including the same bucket that is being logged.
        ///          You can also configure multiple buckets to deliver their logs to the same target bucket. In
        ///          this case, you should choose a different <code>TargetPrefix</code> for each source bucket
        ///          so that the delivered log files can be distinguished by key.</p>
        public let targetBucket: Swift.String?
        /// <p>Container for granting information.</p>
        public let targetGrants: [S3ClientTypes.TargetGrant]?
        /// <p>A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a
        ///          single bucket, you can use a prefix to distinguish which log files came from which
        ///          bucket.</p>
        public let targetPrefix: Swift.String?

        public init (
            targetBucket: Swift.String? = nil,
            targetGrants: [S3ClientTypes.TargetGrant]? = nil,
            targetPrefix: Swift.String? = nil
        )
        {
            self.targetBucket = targetBucket
            self.targetGrants = targetGrants
            self.targetPrefix = targetPrefix
        }
    }

}

extension S3ClientTypes {
    public enum MFADelete: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MFADelete] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MFADelete(rawValue: rawValue) ?? MFADelete.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum MFADeleteStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MFADeleteStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MFADeleteStatus(rawValue: rawValue) ?? MFADeleteStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum MetadataDirective: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case copy
        case replace
        case sdkUnknown(Swift.String)

        public static var allCases: [MetadataDirective] {
            return [
                .copy,
                .replace,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .copy: return "COPY"
            case .replace: return "REPLACE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetadataDirective(rawValue: rawValue) ?? MetadataDirective.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.MetadataEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension S3ClientTypes.MetadataEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetadataEntry(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension S3ClientTypes.MetadataEntry: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A metadata key-value pair to store with an object.</p>
    public struct MetadataEntry: Swift.Equatable {
        /// <p>Name of the Object.</p>
        public let name: Swift.String?
        /// <p>Value of the Object.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension S3ClientTypes.Metrics: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventThreshold = "EventThreshold"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let eventThreshold = eventThreshold {
            try container.encode(eventThreshold, forKey: ClientRuntime.Key("EventThreshold"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.MetricsStatus.self, forKey: .status)
        status = statusDecoded
        let eventThresholdDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationTimeValue.self, forKey: .eventThreshold)
        eventThreshold = eventThresholdDecoded
    }
}

extension S3ClientTypes.Metrics: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Metrics(eventThreshold: \(Swift.String(describing: eventThreshold)), status: \(Swift.String(describing: status)))"}
}

extension S3ClientTypes.Metrics: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p> A container specifying replication metrics-related settings enabling replication
    ///          metrics and events.</p>
    public struct Metrics: Swift.Equatable {
        /// <p> A container specifying the time threshold for emitting the
        ///             <code>s3:Replication:OperationMissedThreshold</code> event. </p>
        public let eventThreshold: S3ClientTypes.ReplicationTimeValue?
        /// <p> Specifies whether the replication metrics are enabled. </p>
        public let status: S3ClientTypes.MetricsStatus?

        public init (
            eventThreshold: S3ClientTypes.ReplicationTimeValue? = nil,
            status: S3ClientTypes.MetricsStatus? = nil
        )
        {
            self.eventThreshold = eventThreshold
            self.status = status
        }
    }

}

extension S3ClientTypes.MetricsAndOperator: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case prefix = "Prefix"
        case tags = "Tag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
        }
        if let tags = tags {
            if tags.isEmpty {
                var tagsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Tag"))
                try tagsContainer.encodeNil()
            } else {
                for tag0 in tags {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tag"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        if containerValues.contains(.tags) {
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .tags)
                var tagsBuffer:[S3ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension S3ClientTypes.MetricsAndOperator: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricsAndOperator(prefix: \(Swift.String(describing: prefix)), tags: \(Swift.String(describing: tags)))"}
}

extension S3ClientTypes.MetricsAndOperator: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter.
    ///          The operator must have at least two predicates, and an object must match all of the
    ///          predicates in order for the filter to apply.</p>
    public struct MetricsAndOperator: Swift.Equatable {
        /// <p>The prefix used when evaluating an AND predicate.</p>
        public let prefix: Swift.String?
        /// <p>The list of tags used when evaluating an AND predicate.</p>
        public let tags: [S3ClientTypes.Tag]?

        public init (
            prefix: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.prefix = prefix
            self.tags = tags
        }
    }

}

extension S3ClientTypes.MetricsConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let filter = filter {
            try container.encode(filter, forKey: ClientRuntime.Key("Filter"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.MetricsFilter.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension S3ClientTypes.MetricsConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricsConfiguration(filter: \(Swift.String(describing: filter)), id: \(Swift.String(describing: id)))"}
}

extension S3ClientTypes.MetricsConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies a metrics configuration for the CloudWatch request metrics (specified by the
    ///          metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics
    ///          configuration, note that this is a full replacement of the existing metrics configuration.
    ///          If you don't include the elements you want to keep, they are erased. For more information,
    ///          see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html"> PUT Bucket
    ///             metrics</a> in the <i>Amazon S3 API Reference</i>.</p>
    public struct MetricsConfiguration: Swift.Equatable {
        /// <p>Specifies a metrics configuration filter. The metrics configuration will only include
        ///          objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction
        ///          (MetricsAndOperator).</p>
        public let filter: S3ClientTypes.MetricsFilter?
        /// <p>The ID used to identify the metrics configuration.</p>
        public let id: Swift.String?

        public init (
            filter: S3ClientTypes.MetricsFilter? = nil,
            id: Swift.String? = nil
        )
        {
            self.filter = filter
            self.id = id
        }
    }

}

extension S3ClientTypes.MetricsFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case and = "And"
        case prefix = "Prefix"
        case tag = "Tag"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        switch self {
            case let .and(and):
                try container.encode(and, forKey: ClientRuntime.Key("And"))
            case let .prefix(prefix):
                try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
            case let .tag(tag):
                try container.encode(tag, forKey: ClientRuntime.Key("Tag"))
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: ClientRuntime.Key("sdkUnknown"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        if let prefix = prefixDecoded {
            self = .prefix(prefix)
            return
        }
        let tagDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tag.self, forKey: .tag)
        if let tag = tagDecoded {
            self = .tag(tag)
            return
        }
        let andDecoded = try containerValues.decodeIfPresent(S3ClientTypes.MetricsAndOperator.self, forKey: .and)
        if let and = andDecoded {
            self = .and(and)
            return
        }
        self = .sdkUnknown("")
    }
}

extension S3ClientTypes {
    /// <p>Specifies a metrics configuration filter. The metrics configuration only includes
    ///          objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction
    ///          (MetricsAndOperator).</p>
    public enum MetricsFilter: Swift.Equatable {
        /// <p>The prefix used when evaluating a metrics filter.</p>
        case prefix(Swift.String)
        /// <p>The tag used when evaluating a metrics filter.</p>
        case tag(S3ClientTypes.Tag)
        /// <p>A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter.
        ///          The operator must have at least two predicates, and an object must match all of the
        ///          predicates in order for the filter to apply.</p>
        case and(S3ClientTypes.MetricsAndOperator)
        case sdkUnknown(Swift.String)
    }

}

extension S3ClientTypes {
    public enum MetricsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricsStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricsStatus(rawValue: rawValue) ?? MetricsStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.MultipartUpload: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case initiated = "Initiated"
        case initiator = "Initiator"
        case key = "Key"
        case owner = "Owner"
        case storageClass = "StorageClass"
        case uploadId = "UploadId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let initiated = initiated {
            try container.encode(ClientRuntime.TimestampWrapper(initiated, format: .dateTime), forKey: ClientRuntime.Key("Initiated"))
        }
        if let initiator = initiator {
            try container.encode(initiator, forKey: ClientRuntime.Key("Initiator"))
        }
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let owner = owner {
            try container.encode(owner, forKey: ClientRuntime.Key("Owner"))
        }
        if let storageClass = storageClass {
            try container.encode(storageClass, forKey: ClientRuntime.Key("StorageClass"))
        }
        if let uploadId = uploadId {
            try container.encode(uploadId, forKey: ClientRuntime.Key("UploadId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uploadIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadId)
        uploadId = uploadIdDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let initiatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .initiated)
        var initiatedBuffer:ClientRuntime.Date? = nil
        if let initiatedDecoded = initiatedDecoded {
            initiatedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(initiatedDecoded, format: .dateTime)
        }
        initiated = initiatedBuffer
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        let initiatorDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Initiator.self, forKey: .initiator)
        initiator = initiatorDecoded
    }
}

extension S3ClientTypes.MultipartUpload: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MultipartUpload(initiated: \(Swift.String(describing: initiated)), initiator: \(Swift.String(describing: initiator)), key: \(Swift.String(describing: key)), owner: \(Swift.String(describing: owner)), storageClass: \(Swift.String(describing: storageClass)), uploadId: \(Swift.String(describing: uploadId)))"}
}

extension S3ClientTypes.MultipartUpload: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for the <code>MultipartUpload</code> for the Amazon S3 object.</p>
    public struct MultipartUpload: Swift.Equatable {
        /// <p>Date and time at which the multipart upload was initiated.</p>
        public let initiated: ClientRuntime.Date?
        /// <p>Identifies who initiated the multipart upload.</p>
        public let initiator: S3ClientTypes.Initiator?
        /// <p>Key of the object for which the multipart upload was initiated.</p>
        public let key: Swift.String?
        /// <p>Specifies the owner of the object that is part of the multipart upload. </p>
        public let owner: S3ClientTypes.Owner?
        /// <p>The class of storage used to store the object.</p>
        public let storageClass: S3ClientTypes.StorageClass?
        /// <p>Upload ID that identifies the multipart upload.</p>
        public let uploadId: Swift.String?

        public init (
            initiated: ClientRuntime.Date? = nil,
            initiator: S3ClientTypes.Initiator? = nil,
            key: Swift.String? = nil,
            owner: S3ClientTypes.Owner? = nil,
            storageClass: S3ClientTypes.StorageClass? = nil,
            uploadId: Swift.String? = nil
        )
        {
            self.initiated = initiated
            self.initiator = initiator
            self.key = key
            self.owner = owner
            self.storageClass = storageClass
            self.uploadId = uploadId
        }
    }

}

extension NoSuchBucket: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchBucket()"}
}

extension NoSuchBucket: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified bucket does not exist.</p>
public struct NoSuchBucket: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client

    public init() {}
}

extension NoSuchKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchKey()"}
}

extension NoSuchKey: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified key does not exist.</p>
public struct NoSuchKey: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client

    public init() {}
}

extension NoSuchUpload: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchUpload()"}
}

extension NoSuchUpload: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified multipart upload does not exist.</p>
public struct NoSuchUpload: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client

    public init() {}
}

extension S3ClientTypes.NoncurrentVersionExpiration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case noncurrentDays = "NoncurrentDays"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if noncurrentDays != 0 {
            try container.encode(noncurrentDays, forKey: ClientRuntime.Key("NoncurrentDays"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let noncurrentDaysDecoded = try containerValues.decode(Swift.Int.self, forKey: .noncurrentDays)
        noncurrentDays = noncurrentDaysDecoded
    }
}

extension S3ClientTypes.NoncurrentVersionExpiration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoncurrentVersionExpiration(noncurrentDays: \(Swift.String(describing: noncurrentDays)))"}
}

extension S3ClientTypes.NoncurrentVersionExpiration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently
    ///          deletes the noncurrent object versions. You set this lifecycle configuration action on a
    ///          bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent
    ///          object versions at a specific period in the object's lifetime.</p>
    public struct NoncurrentVersionExpiration: Swift.Equatable {
        /// <p>Specifies the number of days an object is noncurrent before Amazon S3 can perform the
        ///          associated action. For information about the noncurrent days calculations, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations">How
        ///             Amazon S3 Calculates When an Object Became Noncurrent</a> in the <i>Amazon S3 User Guide</i>.</p>
        public let noncurrentDays: Swift.Int

        public init (
            noncurrentDays: Swift.Int = 0
        )
        {
            self.noncurrentDays = noncurrentDays
        }
    }

}

extension S3ClientTypes.NoncurrentVersionTransition: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case noncurrentDays = "NoncurrentDays"
        case storageClass = "StorageClass"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if noncurrentDays != 0 {
            try container.encode(noncurrentDays, forKey: ClientRuntime.Key("NoncurrentDays"))
        }
        if let storageClass = storageClass {
            try container.encode(storageClass, forKey: ClientRuntime.Key("StorageClass"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let noncurrentDaysDecoded = try containerValues.decode(Swift.Int.self, forKey: .noncurrentDays)
        noncurrentDays = noncurrentDaysDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.TransitionStorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
    }
}

extension S3ClientTypes.NoncurrentVersionTransition: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoncurrentVersionTransition(noncurrentDays: \(Swift.String(describing: noncurrentDays)), storageClass: \(Swift.String(describing: storageClass)))"}
}

extension S3ClientTypes.NoncurrentVersionTransition: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for the transition rule that describes when noncurrent objects transition to
    ///          the <code>STANDARD_IA</code>, <code>ONEZONE_IA</code>, <code>INTELLIGENT_TIERING</code>,
    ///             <code>GLACIER</code>, or <code>DEEP_ARCHIVE</code> storage class. If your bucket is
    ///          versioning-enabled (or versioning is suspended), you can set this action to request that
    ///          Amazon S3 transition noncurrent object versions to the <code>STANDARD_IA</code>,
    ///             <code>ONEZONE_IA</code>, <code>INTELLIGENT_TIERING</code>, <code>GLACIER</code>, or
    ///             <code>DEEP_ARCHIVE</code> storage class at a specific period in the object's
    ///          lifetime.</p>
    public struct NoncurrentVersionTransition: Swift.Equatable {
        /// <p>Specifies the number of days an object is noncurrent before Amazon S3 can perform the
        ///          associated action. For information about the noncurrent days calculations, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations">How
        ///             Amazon S3 Calculates How Long an Object Has Been Noncurrent</a> in the
        ///             <i>Amazon S3 User Guide</i>.</p>
        public let noncurrentDays: Swift.Int
        /// <p>The class of storage used to store the object.</p>
        public let storageClass: S3ClientTypes.TransitionStorageClass?

        public init (
            noncurrentDays: Swift.Int = 0,
            storageClass: S3ClientTypes.TransitionStorageClass? = nil
        )
        {
            self.noncurrentDays = noncurrentDays
            self.storageClass = storageClass
        }
    }

}

extension NotFound: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotFound()"}
}

extension NotFound: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified content does not exist.</p>
public struct NotFound: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client

    public init() {}
}

extension S3ClientTypes.NotificationConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lambdaFunctionConfigurations = "CloudFunctionConfiguration"
        case queueConfigurations = "QueueConfiguration"
        case topicConfigurations = "TopicConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let lambdaFunctionConfigurations = lambdaFunctionConfigurations {
            if lambdaFunctionConfigurations.isEmpty {
                var lambdaFunctionConfigurationsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("CloudFunctionConfiguration"))
                try lambdaFunctionConfigurationsContainer.encodeNil()
            } else {
                for lambdafunctionconfiguration0 in lambdaFunctionConfigurations {
                    var lambdaFunctionConfigurationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CloudFunctionConfiguration"))
                    try lambdaFunctionConfigurationsContainer0.encode(lambdafunctionconfiguration0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let queueConfigurations = queueConfigurations {
            if queueConfigurations.isEmpty {
                var queueConfigurationsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("QueueConfiguration"))
                try queueConfigurationsContainer.encodeNil()
            } else {
                for queueconfiguration0 in queueConfigurations {
                    var queueConfigurationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("QueueConfiguration"))
                    try queueConfigurationsContainer0.encode(queueconfiguration0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let topicConfigurations = topicConfigurations {
            if topicConfigurations.isEmpty {
                var topicConfigurationsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("TopicConfiguration"))
                try topicConfigurationsContainer.encodeNil()
            } else {
                for topicconfiguration0 in topicConfigurations {
                    var topicConfigurationsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TopicConfiguration"))
                    try topicConfigurationsContainer0.encode(topicconfiguration0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.topicConfigurations) {
            let topicConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .topicConfigurations)
            if topicConfigurationsWrappedContainer != nil {
                let topicConfigurationsContainer = try containerValues.decodeIfPresent([S3ClientTypes.TopicConfiguration].self, forKey: .topicConfigurations)
                var topicConfigurationsBuffer:[S3ClientTypes.TopicConfiguration]? = nil
                if let topicConfigurationsContainer = topicConfigurationsContainer {
                    topicConfigurationsBuffer = [S3ClientTypes.TopicConfiguration]()
                    for structureContainer0 in topicConfigurationsContainer {
                        topicConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                topicConfigurations = topicConfigurationsBuffer
            } else {
                topicConfigurations = []
            }
        } else {
            topicConfigurations = nil
        }
        if containerValues.contains(.queueConfigurations) {
            let queueConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .queueConfigurations)
            if queueConfigurationsWrappedContainer != nil {
                let queueConfigurationsContainer = try containerValues.decodeIfPresent([S3ClientTypes.QueueConfiguration].self, forKey: .queueConfigurations)
                var queueConfigurationsBuffer:[S3ClientTypes.QueueConfiguration]? = nil
                if let queueConfigurationsContainer = queueConfigurationsContainer {
                    queueConfigurationsBuffer = [S3ClientTypes.QueueConfiguration]()
                    for structureContainer0 in queueConfigurationsContainer {
                        queueConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                queueConfigurations = queueConfigurationsBuffer
            } else {
                queueConfigurations = []
            }
        } else {
            queueConfigurations = nil
        }
        if containerValues.contains(.lambdaFunctionConfigurations) {
            let lambdaFunctionConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .lambdaFunctionConfigurations)
            if lambdaFunctionConfigurationsWrappedContainer != nil {
                let lambdaFunctionConfigurationsContainer = try containerValues.decodeIfPresent([S3ClientTypes.LambdaFunctionConfiguration].self, forKey: .lambdaFunctionConfigurations)
                var lambdaFunctionConfigurationsBuffer:[S3ClientTypes.LambdaFunctionConfiguration]? = nil
                if let lambdaFunctionConfigurationsContainer = lambdaFunctionConfigurationsContainer {
                    lambdaFunctionConfigurationsBuffer = [S3ClientTypes.LambdaFunctionConfiguration]()
                    for structureContainer0 in lambdaFunctionConfigurationsContainer {
                        lambdaFunctionConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                lambdaFunctionConfigurations = lambdaFunctionConfigurationsBuffer
            } else {
                lambdaFunctionConfigurations = []
            }
        } else {
            lambdaFunctionConfigurations = nil
        }
    }
}

extension S3ClientTypes.NotificationConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotificationConfiguration(lambdaFunctionConfigurations: \(Swift.String(describing: lambdaFunctionConfigurations)), queueConfigurations: \(Swift.String(describing: queueConfigurations)), topicConfigurations: \(Swift.String(describing: topicConfigurations)))"}
}

extension S3ClientTypes.NotificationConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A container for specifying the notification configuration of the bucket. If this element
    ///          is empty, notifications are turned off for the bucket.</p>
    public struct NotificationConfiguration: Swift.Equatable {
        /// <p>Describes the AWS Lambda functions to invoke and the events for which to invoke
        ///          them.</p>
        public let lambdaFunctionConfigurations: [S3ClientTypes.LambdaFunctionConfiguration]?
        /// <p>The Amazon Simple Queue Service queues to publish messages to and the events for which
        ///          to publish messages.</p>
        public let queueConfigurations: [S3ClientTypes.QueueConfiguration]?
        /// <p>The topic to which notifications are sent and the events for which notifications are
        ///          generated.</p>
        public let topicConfigurations: [S3ClientTypes.TopicConfiguration]?

        public init (
            lambdaFunctionConfigurations: [S3ClientTypes.LambdaFunctionConfiguration]? = nil,
            queueConfigurations: [S3ClientTypes.QueueConfiguration]? = nil,
            topicConfigurations: [S3ClientTypes.TopicConfiguration]? = nil
        )
        {
            self.lambdaFunctionConfigurations = lambdaFunctionConfigurations
            self.queueConfigurations = queueConfigurations
            self.topicConfigurations = topicConfigurations
        }
    }

}

extension S3ClientTypes.NotificationConfigurationFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "S3Key"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("S3Key"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(S3ClientTypes.S3KeyFilter.self, forKey: .key)
        key = keyDecoded
    }
}

extension S3ClientTypes.NotificationConfigurationFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotificationConfigurationFilter(key: \(Swift.String(describing: key)))"}
}

extension S3ClientTypes.NotificationConfigurationFilter: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies object key name filtering rules. For information about key name filtering, see
    ///             <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring
    ///             Event Notifications</a> in the <i>Amazon S3 User Guide</i>.</p>
    public struct NotificationConfigurationFilter: Swift.Equatable {
        /// <p>A container for object key name prefix and suffix filtering rules.</p>
        public let key: S3ClientTypes.S3KeyFilter?

        public init (
            key: S3ClientTypes.S3KeyFilter? = nil
        )
        {
            self.key = key
        }
    }

}

extension S3ClientTypes.Object: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eTag = "ETag"
        case key = "Key"
        case lastModified = "LastModified"
        case owner = "Owner"
        case size = "Size"
        case storageClass = "StorageClass"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let eTag = eTag {
            try container.encode(eTag, forKey: ClientRuntime.Key("ETag"))
        }
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let lastModified = lastModified {
            try container.encode(ClientRuntime.TimestampWrapper(lastModified, format: .dateTime), forKey: ClientRuntime.Key("LastModified"))
        }
        if let owner = owner {
            try container.encode(owner, forKey: ClientRuntime.Key("Owner"))
        }
        if size != 0 {
            try container.encode(size, forKey: ClientRuntime.Key("Size"))
        }
        if let storageClass = storageClass {
            try container.encode(storageClass, forKey: ClientRuntime.Key("StorageClass"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        var lastModifiedBuffer:ClientRuntime.Date? = nil
        if let lastModifiedDecoded = lastModifiedDecoded {
            lastModifiedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastModifiedDecoded, format: .dateTime)
        }
        lastModified = lastModifiedBuffer
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        let sizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectStorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
    }
}

extension S3ClientTypes.Object: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Object(eTag: \(Swift.String(describing: eTag)), key: \(Swift.String(describing: key)), lastModified: \(Swift.String(describing: lastModified)), owner: \(Swift.String(describing: owner)), size: \(Swift.String(describing: size)), storageClass: \(Swift.String(describing: storageClass)))"}
}

extension S3ClientTypes.Object: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>An object consists of data and its descriptive metadata.</p>
    public struct Object: Swift.Equatable {
        /// <p>The entity tag is a hash of the object. The ETag reflects changes only to the contents
        ///          of an object, not its metadata. The ETag may or may not be an MD5 digest of the object
        ///          data. Whether or not it is depends on how the object was created and how it is encrypted as
        ///          described below:</p>
        ///          <ul>
        ///             <li>
        ///                <p>Objects created by the PUT Object, POST Object, or Copy operation, or through the
        ///                AWS Management Console, and are encrypted by SSE-S3 or plaintext, have ETags that are
        ///                an MD5 digest of their object data.</p>
        ///             </li>
        ///             <li>
        ///                <p>Objects created by the PUT Object, POST Object, or Copy operation, or through the
        ///                AWS Management Console, and are encrypted by SSE-C or SSE-KMS, have ETags that are
        ///                not an MD5 digest of their object data.</p>
        ///             </li>
        ///             <li>
        ///                <p>If an object is created by either the Multipart Upload or Part Copy operation, the
        ///                ETag is not an MD5 digest, regardless of the method of encryption.</p>
        ///             </li>
        ///          </ul>
        public let eTag: Swift.String?
        /// <p>The name that you assign to an object. You use the object key to retrieve the
        ///          object.</p>
        public let key: Swift.String?
        /// <p>Creation date of the object.</p>
        public let lastModified: ClientRuntime.Date?
        /// <p>The owner of the object</p>
        public let owner: S3ClientTypes.Owner?
        /// <p>Size in bytes of the object</p>
        public let size: Swift.Int
        /// <p>The class of storage used to store the object.</p>
        public let storageClass: S3ClientTypes.ObjectStorageClass?

        public init (
            eTag: Swift.String? = nil,
            key: Swift.String? = nil,
            lastModified: ClientRuntime.Date? = nil,
            owner: S3ClientTypes.Owner? = nil,
            size: Swift.Int = 0,
            storageClass: S3ClientTypes.ObjectStorageClass? = nil
        )
        {
            self.eTag = eTag
            self.key = key
            self.lastModified = lastModified
            self.owner = owner
            self.size = size
            self.storageClass = storageClass
        }
    }

}

extension ObjectAlreadyInActiveTierError: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ObjectAlreadyInActiveTierError()"}
}

extension ObjectAlreadyInActiveTierError: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>This action is not allowed against this storage tier.</p>
public struct ObjectAlreadyInActiveTierError: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client

    public init() {}
}

extension S3ClientTypes {
    public enum ObjectCannedACL: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case authenticatedRead
        case awsExecRead
        case bucketOwnerFullControl
        case bucketOwnerRead
        case `private`
        case publicRead
        case publicReadWrite
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectCannedACL] {
            return [
                .authenticatedRead,
                .awsExecRead,
                .bucketOwnerFullControl,
                .bucketOwnerRead,
                .private,
                .publicRead,
                .publicReadWrite,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .authenticatedRead: return "authenticated-read"
            case .awsExecRead: return "aws-exec-read"
            case .bucketOwnerFullControl: return "bucket-owner-full-control"
            case .bucketOwnerRead: return "bucket-owner-read"
            case .private: return "private"
            case .publicRead: return "public-read"
            case .publicReadWrite: return "public-read-write"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectCannedACL(rawValue: rawValue) ?? ObjectCannedACL.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ObjectIdentifier: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
    }
}

extension S3ClientTypes.ObjectIdentifier: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ObjectIdentifier(key: \(Swift.String(describing: key)), versionId: \(Swift.String(describing: versionId)))"}
}

extension S3ClientTypes.ObjectIdentifier: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Object Identifier is unique value to identify objects.</p>
    public struct ObjectIdentifier: Swift.Equatable {
        /// <p>Key name of the object.</p>
        ///          <important>
        ///             <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using
        ///          XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
        ///             XML related object key constraints</a>.</p>
        ///          </important>
        public let key: Swift.String?
        /// <p>VersionId for the specific version of the object to delete.</p>
        public let versionId: Swift.String?

        public init (
            key: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.key = key
            self.versionId = versionId
        }
    }

}

extension S3ClientTypes.ObjectLockConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objectLockEnabled = "ObjectLockEnabled"
        case rule = "Rule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let objectLockEnabled = objectLockEnabled {
            try container.encode(objectLockEnabled, forKey: ClientRuntime.Key("ObjectLockEnabled"))
        }
        if let rule = rule {
            try container.encode(rule, forKey: ClientRuntime.Key("Rule"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectLockEnabledDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockEnabled.self, forKey: .objectLockEnabled)
        objectLockEnabled = objectLockEnabledDecoded
        let ruleDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockRule.self, forKey: .rule)
        rule = ruleDecoded
    }
}

extension S3ClientTypes.ObjectLockConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ObjectLockConfiguration(objectLockEnabled: \(Swift.String(describing: objectLockEnabled)), rule: \(Swift.String(describing: rule)))"}
}

extension S3ClientTypes.ObjectLockConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>The container element for Object Lock configuration parameters.</p>
    public struct ObjectLockConfiguration: Swift.Equatable {
        /// <p>Indicates whether this bucket has an Object Lock configuration enabled.
        ///          Enable <code>ObjectLockEnabled</code> when you apply <code>ObjectLockConfiguration</code>
        ///          to a bucket. </p>
        public let objectLockEnabled: S3ClientTypes.ObjectLockEnabled?
        /// <p>Specifies the Object Lock rule for the specified object. Enable the this rule when you apply
        ///          <code>ObjectLockConfiguration</code> to a bucket. Bucket settings require both a mode and a period.
        ///          The period can be either <code>Days</code> or <code>Years</code> but you must select one.
        ///          You cannot specify <code>Days</code> and <code>Years</code> at the same time.</p>
        public let rule: S3ClientTypes.ObjectLockRule?

        public init (
            objectLockEnabled: S3ClientTypes.ObjectLockEnabled? = nil,
            rule: S3ClientTypes.ObjectLockRule? = nil
        )
        {
            self.objectLockEnabled = objectLockEnabled
            self.rule = rule
        }
    }

}

extension S3ClientTypes {
    public enum ObjectLockEnabled: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectLockEnabled] {
            return [
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectLockEnabled(rawValue: rawValue) ?? ObjectLockEnabled.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ObjectLockLegalHold: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockLegalHoldStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension S3ClientTypes.ObjectLockLegalHold: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ObjectLockLegalHold(status: \(Swift.String(describing: status)))"}
}

extension S3ClientTypes.ObjectLockLegalHold: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A Legal Hold configuration for an object.</p>
    public struct ObjectLockLegalHold: Swift.Equatable {
        /// <p>Indicates whether the specified object has a Legal Hold in place.</p>
        public let status: S3ClientTypes.ObjectLockLegalHoldStatus?

        public init (
            status: S3ClientTypes.ObjectLockLegalHoldStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension S3ClientTypes {
    public enum ObjectLockLegalHoldStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case off
        case on
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectLockLegalHoldStatus] {
            return [
                .off,
                .on,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .off: return "OFF"
            case .on: return "ON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectLockLegalHoldStatus(rawValue: rawValue) ?? ObjectLockLegalHoldStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ObjectLockMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case compliance
        case governance
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectLockMode] {
            return [
                .compliance,
                .governance,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .compliance: return "COMPLIANCE"
            case .governance: return "GOVERNANCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectLockMode(rawValue: rawValue) ?? ObjectLockMode.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ObjectLockRetention: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mode = "Mode"
        case retainUntilDate = "RetainUntilDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let mode = mode {
            try container.encode(mode, forKey: ClientRuntime.Key("Mode"))
        }
        if let retainUntilDate = retainUntilDate {
            try container.encode(ClientRuntime.TimestampWrapper(retainUntilDate, format: .dateTime), forKey: ClientRuntime.Key("RetainUntilDate"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockRetentionMode.self, forKey: .mode)
        mode = modeDecoded
        let retainUntilDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .retainUntilDate)
        var retainUntilDateBuffer:ClientRuntime.Date? = nil
        if let retainUntilDateDecoded = retainUntilDateDecoded {
            retainUntilDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(retainUntilDateDecoded, format: .dateTime)
        }
        retainUntilDate = retainUntilDateBuffer
    }
}

extension S3ClientTypes.ObjectLockRetention: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ObjectLockRetention(mode: \(Swift.String(describing: mode)), retainUntilDate: \(Swift.String(describing: retainUntilDate)))"}
}

extension S3ClientTypes.ObjectLockRetention: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A Retention configuration for an object.</p>
    public struct ObjectLockRetention: Swift.Equatable {
        /// <p>Indicates the Retention mode for the specified object.</p>
        public let mode: S3ClientTypes.ObjectLockRetentionMode?
        /// <p>The date on which this Object Lock Retention will expire.</p>
        public let retainUntilDate: ClientRuntime.Date?

        public init (
            mode: S3ClientTypes.ObjectLockRetentionMode? = nil,
            retainUntilDate: ClientRuntime.Date? = nil
        )
        {
            self.mode = mode
            self.retainUntilDate = retainUntilDate
        }
    }

}

extension S3ClientTypes {
    public enum ObjectLockRetentionMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case compliance
        case governance
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectLockRetentionMode] {
            return [
                .compliance,
                .governance,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .compliance: return "COMPLIANCE"
            case .governance: return "GOVERNANCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectLockRetentionMode(rawValue: rawValue) ?? ObjectLockRetentionMode.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ObjectLockRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultRetention = "DefaultRetention"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let defaultRetention = defaultRetention {
            try container.encode(defaultRetention, forKey: ClientRuntime.Key("DefaultRetention"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultRetentionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.DefaultRetention.self, forKey: .defaultRetention)
        defaultRetention = defaultRetentionDecoded
    }
}

extension S3ClientTypes.ObjectLockRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ObjectLockRule(defaultRetention: \(Swift.String(describing: defaultRetention)))"}
}

extension S3ClientTypes.ObjectLockRule: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>The container element for an Object Lock rule.</p>
    public struct ObjectLockRule: Swift.Equatable {
        /// <p>The default Object Lock retention mode and period that you want to apply to new objects
        ///          placed in the specified bucket. Bucket settings require both a mode and a period.
        ///          The period can be either <code>Days</code> or <code>Years</code> but you must select one.
        ///          You cannot specify <code>Days</code> and <code>Years</code> at the same time.</p>
        public let defaultRetention: S3ClientTypes.DefaultRetention?

        public init (
            defaultRetention: S3ClientTypes.DefaultRetention? = nil
        )
        {
            self.defaultRetention = defaultRetention
        }
    }

}

extension ObjectNotInActiveTierError: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ObjectNotInActiveTierError()"}
}

extension ObjectNotInActiveTierError: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The source object of the COPY action is not in the active tier and is only stored in
///          Amazon S3 Glacier.</p>
public struct ObjectNotInActiveTierError: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client

    public init() {}
}

extension S3ClientTypes {
    /// <p>The container element for object ownership for a bucket's ownership controls.</p>
    ///          <p>BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket
    ///          owner if the objects are uploaded with the <code>bucket-owner-full-control</code> canned
    ///          ACL.</p>
    ///          <p>ObjectWriter - The uploading account will own the object if the object is uploaded with
    ///          the <code>bucket-owner-full-control</code> canned ACL.</p>
    public enum ObjectOwnership: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bucketownerpreferred
        case objectwriter
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectOwnership] {
            return [
                .bucketownerpreferred,
                .objectwriter,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bucketownerpreferred: return "BucketOwnerPreferred"
            case .objectwriter: return "ObjectWriter"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectOwnership(rawValue: rawValue) ?? ObjectOwnership.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ObjectStorageClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deepArchive
        case glacier
        case intelligentTiering
        case onezoneIa
        case outposts
        case reducedRedundancy
        case standard
        case standardIa
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectStorageClass] {
            return [
                .deepArchive,
                .glacier,
                .intelligentTiering,
                .onezoneIa,
                .outposts,
                .reducedRedundancy,
                .standard,
                .standardIa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deepArchive: return "DEEP_ARCHIVE"
            case .glacier: return "GLACIER"
            case .intelligentTiering: return "INTELLIGENT_TIERING"
            case .onezoneIa: return "ONEZONE_IA"
            case .outposts: return "OUTPOSTS"
            case .reducedRedundancy: return "REDUCED_REDUNDANCY"
            case .standard: return "STANDARD"
            case .standardIa: return "STANDARD_IA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectStorageClass(rawValue: rawValue) ?? ObjectStorageClass.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ObjectVersion: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eTag = "ETag"
        case isLatest = "IsLatest"
        case key = "Key"
        case lastModified = "LastModified"
        case owner = "Owner"
        case size = "Size"
        case storageClass = "StorageClass"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let eTag = eTag {
            try container.encode(eTag, forKey: ClientRuntime.Key("ETag"))
        }
        if isLatest != false {
            try container.encode(isLatest, forKey: ClientRuntime.Key("IsLatest"))
        }
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let lastModified = lastModified {
            try container.encode(ClientRuntime.TimestampWrapper(lastModified, format: .dateTime), forKey: ClientRuntime.Key("LastModified"))
        }
        if let owner = owner {
            try container.encode(owner, forKey: ClientRuntime.Key("Owner"))
        }
        if size != 0 {
            try container.encode(size, forKey: ClientRuntime.Key("Size"))
        }
        if let storageClass = storageClass {
            try container.encode(storageClass, forKey: ClientRuntime.Key("StorageClass"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        let sizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectVersionStorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let isLatestDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isLatest)
        isLatest = isLatestDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        var lastModifiedBuffer:ClientRuntime.Date? = nil
        if let lastModifiedDecoded = lastModifiedDecoded {
            lastModifiedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastModifiedDecoded, format: .dateTime)
        }
        lastModified = lastModifiedBuffer
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
    }
}

extension S3ClientTypes.ObjectVersion: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ObjectVersion(eTag: \(Swift.String(describing: eTag)), isLatest: \(Swift.String(describing: isLatest)), key: \(Swift.String(describing: key)), lastModified: \(Swift.String(describing: lastModified)), owner: \(Swift.String(describing: owner)), size: \(Swift.String(describing: size)), storageClass: \(Swift.String(describing: storageClass)), versionId: \(Swift.String(describing: versionId)))"}
}

extension S3ClientTypes.ObjectVersion: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>The version of an object.</p>
    public struct ObjectVersion: Swift.Equatable {
        /// <p>The entity tag is an MD5 hash of that version of the object.</p>
        public let eTag: Swift.String?
        /// <p>Specifies whether the object is (true) or is not (false) the latest version of an
        ///          object.</p>
        public let isLatest: Swift.Bool
        /// <p>The object key.</p>
        public let key: Swift.String?
        /// <p>Date and time the object was last modified.</p>
        public let lastModified: ClientRuntime.Date?
        /// <p>Specifies the owner of the object.</p>
        public let owner: S3ClientTypes.Owner?
        /// <p>Size in bytes of the object.</p>
        public let size: Swift.Int
        /// <p>The class of storage used to store the object.</p>
        public let storageClass: S3ClientTypes.ObjectVersionStorageClass?
        /// <p>Version ID of an object.</p>
        public let versionId: Swift.String?

        public init (
            eTag: Swift.String? = nil,
            isLatest: Swift.Bool = false,
            key: Swift.String? = nil,
            lastModified: ClientRuntime.Date? = nil,
            owner: S3ClientTypes.Owner? = nil,
            size: Swift.Int = 0,
            storageClass: S3ClientTypes.ObjectVersionStorageClass? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.eTag = eTag
            self.isLatest = isLatest
            self.key = key
            self.lastModified = lastModified
            self.owner = owner
            self.size = size
            self.storageClass = storageClass
            self.versionId = versionId
        }
    }

}

extension S3ClientTypes {
    public enum ObjectVersionStorageClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectVersionStorageClass] {
            return [
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectVersionStorageClass(rawValue: rawValue) ?? ObjectVersionStorageClass.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.OutputLocation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3 = "S3"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let s3 = s3 {
            try container.encode(s3, forKey: ClientRuntime.Key("S3"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3Decoded = try containerValues.decodeIfPresent(S3ClientTypes.S3Location.self, forKey: .s3)
        s3 = s3Decoded
    }
}

extension S3ClientTypes.OutputLocation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OutputLocation(s3: \(Swift.String(describing: s3)))"}
}

extension S3ClientTypes.OutputLocation: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Describes the location where the restore job's output is stored.</p>
    public struct OutputLocation: Swift.Equatable {
        /// <p>Describes an S3 location that will receive the results of the restore request.</p>
        public let s3: S3ClientTypes.S3Location?

        public init (
            s3: S3ClientTypes.S3Location? = nil
        )
        {
            self.s3 = s3
        }
    }

}

extension S3ClientTypes.OutputSerialization: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cSV = "CSV"
        case jSON = "JSON"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let cSV = cSV {
            try container.encode(cSV, forKey: ClientRuntime.Key("CSV"))
        }
        if let jSON = jSON {
            try container.encode(jSON, forKey: ClientRuntime.Key("JSON"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cSVDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CSVOutput.self, forKey: .cSV)
        cSV = cSVDecoded
        let jSONDecoded = try containerValues.decodeIfPresent(S3ClientTypes.JSONOutput.self, forKey: .jSON)
        jSON = jSONDecoded
    }
}

extension S3ClientTypes.OutputSerialization: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OutputSerialization(cSV: \(Swift.String(describing: cSV)), jSON: \(Swift.String(describing: jSON)))"}
}

extension S3ClientTypes.OutputSerialization: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Describes how results of the Select job are serialized.</p>
    public struct OutputSerialization: Swift.Equatable {
        /// <p>Describes the serialization of CSV-encoded Select results.</p>
        public let cSV: S3ClientTypes.CSVOutput?
        /// <p>Specifies JSON as request's output serialization format.</p>
        public let jSON: S3ClientTypes.JSONOutput?

        public init (
            cSV: S3ClientTypes.CSVOutput? = nil,
            jSON: S3ClientTypes.JSONOutput? = nil
        )
        {
            self.cSV = cSV
            self.jSON = jSON
        }
    }

}

extension S3ClientTypes.Owner: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case iD = "ID"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let displayName = displayName {
            try container.encode(displayName, forKey: ClientRuntime.Key("DisplayName"))
        }
        if let iD = iD {
            try container.encode(iD, forKey: ClientRuntime.Key("ID"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let iDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iD)
        iD = iDDecoded
    }
}

extension S3ClientTypes.Owner: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Owner(displayName: \(Swift.String(describing: displayName)), iD: \(Swift.String(describing: iD)))"}
}

extension S3ClientTypes.Owner: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for the owner's display name and ID.</p>
    public struct Owner: Swift.Equatable {
        /// <p>Container for the display name of the owner.</p>
        public let displayName: Swift.String?
        /// <p>Container for the ID of the owner.</p>
        public let iD: Swift.String?

        public init (
            displayName: Swift.String? = nil,
            iD: Swift.String? = nil
        )
        {
            self.displayName = displayName
            self.iD = iD
        }
    }

}

extension S3ClientTypes {
    public enum OwnerOverride: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case destination
        case sdkUnknown(Swift.String)

        public static var allCases: [OwnerOverride] {
            return [
                .destination,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .destination: return "Destination"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OwnerOverride(rawValue: rawValue) ?? OwnerOverride.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.OwnershipControls: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let rules = rules {
            if rules.isEmpty {
                var rulesContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Rule"))
                try rulesContainer.encodeNil()
            } else {
                for ownershipcontrolsrule0 in rules {
                    var rulesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Rule"))
                    try rulesContainer0.encode(ownershipcontrolsrule0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.rules) {
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .rules)
            if rulesWrappedContainer != nil {
                let rulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.OwnershipControlsRule].self, forKey: .rules)
                var rulesBuffer:[S3ClientTypes.OwnershipControlsRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [S3ClientTypes.OwnershipControlsRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}

extension S3ClientTypes.OwnershipControls: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OwnershipControls(rules: \(Swift.String(describing: rules)))"}
}

extension S3ClientTypes.OwnershipControls: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>The container element for a bucket's ownership controls.</p>
    public struct OwnershipControls: Swift.Equatable {
        /// <p>The container element for an ownership control rule.</p>
        public let rules: [S3ClientTypes.OwnershipControlsRule]?

        public init (
            rules: [S3ClientTypes.OwnershipControlsRule]? = nil
        )
        {
            self.rules = rules
        }
    }

}

extension S3ClientTypes.OwnershipControlsRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objectOwnership = "ObjectOwnership"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let objectOwnership = objectOwnership {
            try container.encode(objectOwnership, forKey: ClientRuntime.Key("ObjectOwnership"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectOwnershipDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectOwnership.self, forKey: .objectOwnership)
        objectOwnership = objectOwnershipDecoded
    }
}

extension S3ClientTypes.OwnershipControlsRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OwnershipControlsRule(objectOwnership: \(Swift.String(describing: objectOwnership)))"}
}

extension S3ClientTypes.OwnershipControlsRule: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>The container element for an ownership control rule.</p>
    public struct OwnershipControlsRule: Swift.Equatable {
        /// <p>The container element for object ownership for a bucket's ownership controls.</p>
        ///          <p>BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket
        ///          owner if the objects are uploaded with the <code>bucket-owner-full-control</code> canned
        ///          ACL.</p>
        ///          <p>ObjectWriter - The uploading account will own the object if the object is uploaded with
        ///          the <code>bucket-owner-full-control</code> canned ACL.</p>
        public let objectOwnership: S3ClientTypes.ObjectOwnership?

        public init (
            objectOwnership: S3ClientTypes.ObjectOwnership? = nil
        )
        {
            self.objectOwnership = objectOwnership
        }
    }

}

extension S3ClientTypes.ParquetInput: Swift.Codable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes.ParquetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ParquetInput()"}
}

extension S3ClientTypes {
    /// <p>Container for Parquet.</p>
    public struct ParquetInput: Swift.Equatable {

        public init() {}
    }

}

extension S3ClientTypes.Part: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eTag = "ETag"
        case lastModified = "LastModified"
        case partNumber = "PartNumber"
        case size = "Size"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let eTag = eTag {
            try container.encode(eTag, forKey: ClientRuntime.Key("ETag"))
        }
        if let lastModified = lastModified {
            try container.encode(ClientRuntime.TimestampWrapper(lastModified, format: .dateTime), forKey: ClientRuntime.Key("LastModified"))
        }
        if partNumber != 0 {
            try container.encode(partNumber, forKey: ClientRuntime.Key("PartNumber"))
        }
        if size != 0 {
            try container.encode(size, forKey: ClientRuntime.Key("Size"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .partNumber)
        partNumber = partNumberDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        var lastModifiedBuffer:ClientRuntime.Date? = nil
        if let lastModifiedDecoded = lastModifiedDecoded {
            lastModifiedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastModifiedDecoded, format: .dateTime)
        }
        lastModified = lastModifiedBuffer
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        let sizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .size)
        size = sizeDecoded
    }
}

extension S3ClientTypes.Part: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Part(eTag: \(Swift.String(describing: eTag)), lastModified: \(Swift.String(describing: lastModified)), partNumber: \(Swift.String(describing: partNumber)), size: \(Swift.String(describing: size)))"}
}

extension S3ClientTypes.Part: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for elements related to a part.</p>
    public struct Part: Swift.Equatable {
        /// <p>Entity tag returned when the part was uploaded.</p>
        public let eTag: Swift.String?
        /// <p>Date and time at which the part was uploaded.</p>
        public let lastModified: ClientRuntime.Date?
        /// <p>Part number identifying the part. This is a positive integer between 1 and
        ///          10,000.</p>
        public let partNumber: Swift.Int
        /// <p>Size in bytes of the uploaded part data.</p>
        public let size: Swift.Int

        public init (
            eTag: Swift.String? = nil,
            lastModified: ClientRuntime.Date? = nil,
            partNumber: Swift.Int = 0,
            size: Swift.Int = 0
        )
        {
            self.eTag = eTag
            self.lastModified = lastModified
            self.partNumber = partNumber
            self.size = size
        }
    }

}

extension S3ClientTypes {
    public enum Payer: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bucketowner
        case requester
        case sdkUnknown(Swift.String)

        public static var allCases: [Payer] {
            return [
                .bucketowner,
                .requester,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bucketowner: return "BucketOwner"
            case .requester: return "Requester"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Payer(rawValue: rawValue) ?? Payer.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum Permission: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fullControl
        case read
        case readAcp
        case write
        case writeAcp
        case sdkUnknown(Swift.String)

        public static var allCases: [Permission] {
            return [
                .fullControl,
                .read,
                .readAcp,
                .write,
                .writeAcp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fullControl: return "FULL_CONTROL"
            case .read: return "READ"
            case .readAcp: return "READ_ACP"
            case .write: return "WRITE"
            case .writeAcp: return "WRITE_ACP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Permission(rawValue: rawValue) ?? Permission.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.PolicyStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isPublic = "IsPublic"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if isPublic != false {
            try container.encode(isPublic, forKey: ClientRuntime.Key("IsPublic"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isPublicDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isPublic)
        isPublic = isPublicDecoded
    }
}

extension S3ClientTypes.PolicyStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PolicyStatus(isPublic: \(Swift.String(describing: isPublic)))"}
}

extension S3ClientTypes.PolicyStatus: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>The container element for a bucket's policy status.</p>
    public struct PolicyStatus: Swift.Equatable {
        /// <p>The policy status for this bucket. <code>TRUE</code> indicates that this bucket is
        ///          public. <code>FALSE</code> indicates that the bucket is not public.</p>
        public let isPublic: Swift.Bool

        public init (
            isPublic: Swift.Bool = false
        )
        {
            self.isPublic = isPublic
        }
    }

}

extension S3ClientTypes.Progress: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bytesProcessed = "BytesProcessed"
        case bytesReturned = "BytesReturned"
        case bytesScanned = "BytesScanned"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if bytesProcessed != 0 {
            try container.encode(bytesProcessed, forKey: ClientRuntime.Key("BytesProcessed"))
        }
        if bytesReturned != 0 {
            try container.encode(bytesReturned, forKey: ClientRuntime.Key("BytesReturned"))
        }
        if bytesScanned != 0 {
            try container.encode(bytesScanned, forKey: ClientRuntime.Key("BytesScanned"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bytesScannedDecoded = try containerValues.decode(Swift.Int.self, forKey: .bytesScanned)
        bytesScanned = bytesScannedDecoded
        let bytesProcessedDecoded = try containerValues.decode(Swift.Int.self, forKey: .bytesProcessed)
        bytesProcessed = bytesProcessedDecoded
        let bytesReturnedDecoded = try containerValues.decode(Swift.Int.self, forKey: .bytesReturned)
        bytesReturned = bytesReturnedDecoded
    }
}

extension S3ClientTypes.Progress: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Progress(bytesProcessed: \(Swift.String(describing: bytesProcessed)), bytesReturned: \(Swift.String(describing: bytesReturned)), bytesScanned: \(Swift.String(describing: bytesScanned)))"}
}

extension S3ClientTypes.Progress: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>This data type contains information about progress of an operation.</p>
    public struct Progress: Swift.Equatable {
        /// <p>The current number of uncompressed object bytes processed.</p>
        public let bytesProcessed: Swift.Int
        /// <p>The current number of bytes of records payload data returned.</p>
        public let bytesReturned: Swift.Int
        /// <p>The current number of object bytes scanned.</p>
        public let bytesScanned: Swift.Int

        public init (
            bytesProcessed: Swift.Int = 0,
            bytesReturned: Swift.Int = 0,
            bytesScanned: Swift.Int = 0
        )
        {
            self.bytesProcessed = bytesProcessed
            self.bytesReturned = bytesReturned
            self.bytesScanned = bytesScanned
        }
    }

}

extension S3ClientTypes.ProgressEvent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details = "Details"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let details = details {
            try container.encode(details, forKey: ClientRuntime.Key("Details"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Progress.self, forKey: .details)
        details = detailsDecoded
    }
}

extension S3ClientTypes.ProgressEvent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProgressEvent(details: \(Swift.String(describing: details)))"}
}

extension S3ClientTypes.ProgressEvent: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>This data type contains information about the progress event of an operation.</p>
    public struct ProgressEvent: Swift.Equatable {
        /// <p>The Progress event details.</p>
        public let details: S3ClientTypes.Progress?

        public init (
            details: S3ClientTypes.Progress? = nil
        )
        {
            self.details = details
        }
    }

}

extension S3ClientTypes {
    public enum ModelProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case http
        case https
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelProtocol] {
            return [
                .http,
                .https,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .http: return "http"
            case .https: return "https"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelProtocol(rawValue: rawValue) ?? ModelProtocol.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.PublicAccessBlockConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockPublicAcls = "BlockPublicAcls"
        case blockPublicPolicy = "BlockPublicPolicy"
        case ignorePublicAcls = "IgnorePublicAcls"
        case restrictPublicBuckets = "RestrictPublicBuckets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if blockPublicAcls != false {
            try container.encode(blockPublicAcls, forKey: ClientRuntime.Key("BlockPublicAcls"))
        }
        if blockPublicPolicy != false {
            try container.encode(blockPublicPolicy, forKey: ClientRuntime.Key("BlockPublicPolicy"))
        }
        if ignorePublicAcls != false {
            try container.encode(ignorePublicAcls, forKey: ClientRuntime.Key("IgnorePublicAcls"))
        }
        if restrictPublicBuckets != false {
            try container.encode(restrictPublicBuckets, forKey: ClientRuntime.Key("RestrictPublicBuckets"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockPublicAclsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .blockPublicAcls)
        blockPublicAcls = blockPublicAclsDecoded
        let ignorePublicAclsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .ignorePublicAcls)
        ignorePublicAcls = ignorePublicAclsDecoded
        let blockPublicPolicyDecoded = try containerValues.decode(Swift.Bool.self, forKey: .blockPublicPolicy)
        blockPublicPolicy = blockPublicPolicyDecoded
        let restrictPublicBucketsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .restrictPublicBuckets)
        restrictPublicBuckets = restrictPublicBucketsDecoded
    }
}

extension S3ClientTypes.PublicAccessBlockConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PublicAccessBlockConfiguration(blockPublicAcls: \(Swift.String(describing: blockPublicAcls)), blockPublicPolicy: \(Swift.String(describing: blockPublicPolicy)), ignorePublicAcls: \(Swift.String(describing: ignorePublicAcls)), restrictPublicBuckets: \(Swift.String(describing: restrictPublicBuckets)))"}
}

extension S3ClientTypes.PublicAccessBlockConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can
    ///          enable the configuration options in any combination. For more information about when Amazon S3
    ///          considers a bucket or object public, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The Meaning of "Public"</a> in the <i>Amazon S3 User Guide</i>. </p>
    public struct PublicAccessBlockConfiguration: Swift.Equatable {
        /// <p>Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket
        ///          and objects in this bucket. Setting this element to <code>TRUE</code> causes the following
        ///          behavior:</p>
        ///          <ul>
        ///             <li>
        ///                <p>PUT Bucket acl and PUT Object acl calls fail if the specified ACL is
        ///                public.</p>
        ///             </li>
        ///             <li>
        ///                <p>PUT Object calls fail if the request includes a public ACL.</p>
        ///             </li>
        ///             <li>
        ///                <p>PUT Bucket calls fail if the request includes a public ACL.</p>
        ///             </li>
        ///          </ul>
        ///          <p>Enabling this setting doesn't affect existing policies or ACLs.</p>
        public let blockPublicAcls: Swift.Bool
        /// <p>Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this
        ///          element to <code>TRUE</code> causes Amazon S3 to reject calls to PUT Bucket policy if the
        ///          specified bucket policy allows public access. </p>
        ///          <p>Enabling this setting doesn't affect existing bucket policies.</p>
        public let blockPublicPolicy: Swift.Bool
        /// <p>Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this
        ///          bucket. Setting this element to <code>TRUE</code> causes Amazon S3 to ignore all public ACLs on
        ///          this bucket and objects in this bucket.</p>
        ///          <p>Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't
        ///          prevent new public ACLs from being set.</p>
        public let ignorePublicAcls: Swift.Bool
        /// <p>Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting
        ///          this element to <code>TRUE</code> restricts access to this bucket to only AWS service
        ///          principals and authorized users within this account if the bucket has a public
        ///          policy.</p>
        ///          <p>Enabling this setting doesn't affect previously stored bucket policies, except that
        ///          public and cross-account access within any public bucket policy, including non-public
        ///          delegation to specific accounts, is blocked.</p>
        public let restrictPublicBuckets: Swift.Bool

        public init (
            blockPublicAcls: Swift.Bool = false,
            blockPublicPolicy: Swift.Bool = false,
            ignorePublicAcls: Swift.Bool = false,
            restrictPublicBuckets: Swift.Bool = false
        )
        {
            self.blockPublicAcls = blockPublicAcls
            self.blockPublicPolicy = blockPublicPolicy
            self.ignorePublicAcls = ignorePublicAcls
            self.restrictPublicBuckets = restrictPublicBuckets
        }
    }

}

public struct PutBucketAccelerateConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketAccelerateConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketAccelerateConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketAccelerateConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let accelerateConfiguration = input.operationInput.accelerateConfiguration {
            do {
                let encoder = context.getEncoder()
                let accelerateConfigurationdata = try encoder.encode(accelerateConfiguration)
                let accelerateConfigurationbody = ClientRuntime.HttpBody.data(accelerateConfigurationdata)
                input.builder.withBody(accelerateConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketAccelerateConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketAccelerateConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketAccelerateConfigurationOutputError>
}

extension PutBucketAccelerateConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketAccelerateConfigurationInput(accelerateConfiguration: \(Swift.String(describing: accelerateConfiguration)), bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension PutBucketAccelerateConfigurationInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketAccelerateConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accelerateConfiguration = "AccelerateConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let accelerateConfiguration = accelerateConfiguration {
            try container.encode(accelerateConfiguration, forKey: ClientRuntime.Key("AccelerateConfiguration"))
        }
    }
}

public struct PutBucketAccelerateConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketAccelerateConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketAccelerateConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketAccelerateConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketAccelerateConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketAccelerateConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketAccelerateConfigurationOutputError>
}

public struct PutBucketAccelerateConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketAccelerateConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketAccelerateConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketAccelerateConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "accelerate", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketAccelerateConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketAccelerateConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketAccelerateConfigurationOutputError>
}

public struct PutBucketAccelerateConfigurationInput: Swift.Equatable {
    /// <p>Container for setting the transfer acceleration state.</p>
    public let accelerateConfiguration: S3ClientTypes.AccelerateConfiguration?
    /// <p>The name of the bucket for which the accelerate configuration is set.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        accelerateConfiguration: S3ClientTypes.AccelerateConfiguration? = nil,
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.accelerateConfiguration = accelerateConfiguration
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct PutBucketAccelerateConfigurationInputBody: Swift.Equatable {
    public let accelerateConfiguration: S3ClientTypes.AccelerateConfiguration?
}

extension PutBucketAccelerateConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accelerateConfiguration = "AccelerateConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accelerateConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AccelerateConfiguration.self, forKey: .accelerateConfiguration)
        accelerateConfiguration = accelerateConfigurationDecoded
    }
}

extension PutBucketAccelerateConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketAccelerateConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketAccelerateConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketAccelerateConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketAccelerateConfigurationOutputResponse()"}
}

extension PutBucketAccelerateConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketAccelerateConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketAccelerateConfigurationOutputResponseBody: Swift.Equatable {
}

extension PutBucketAccelerateConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketAclInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketAclInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketAclInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketAclOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let accessControlPolicy = input.operationInput.accessControlPolicy {
            do {
                let encoder = context.getEncoder()
                let accessControlPolicydata = try encoder.encode(accessControlPolicy)
                let accessControlPolicybody = ClientRuntime.HttpBody.data(accessControlPolicydata)
                input.builder.withBody(accessControlPolicybody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketAclInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketAclOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketAclOutputError>
}

extension PutBucketAclInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketAclInput(aCL: \(Swift.String(describing: aCL)), accessControlPolicy: \(Swift.String(describing: accessControlPolicy)), bucket: \(Swift.String(describing: bucket)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), grantFullControl: \(Swift.String(describing: grantFullControl)), grantRead: \(Swift.String(describing: grantRead)), grantReadACP: \(Swift.String(describing: grantReadACP)), grantWrite: \(Swift.String(describing: grantWrite)), grantWriteACP: \(Swift.String(describing: grantWriteACP)))"}
}

extension PutBucketAclInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketAclInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlPolicy = "AccessControlPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let accessControlPolicy = accessControlPolicy {
            try container.encode(accessControlPolicy, forKey: ClientRuntime.Key("AccessControlPolicy"))
        }
    }
}

public struct PutBucketAclInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketAclInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketAclInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketAclOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let aCL = input.operationInput.aCL {
            input.builder.withHeader(name: "x-amz-acl", value: Swift.String(aCL.rawValue))
        }
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let grantFullControl = input.operationInput.grantFullControl {
            input.builder.withHeader(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl))
        }
        if let grantRead = input.operationInput.grantRead {
            input.builder.withHeader(name: "x-amz-grant-read", value: Swift.String(grantRead))
        }
        if let grantReadACP = input.operationInput.grantReadACP {
            input.builder.withHeader(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP))
        }
        if let grantWrite = input.operationInput.grantWrite {
            input.builder.withHeader(name: "x-amz-grant-write", value: Swift.String(grantWrite))
        }
        if let grantWriteACP = input.operationInput.grantWriteACP {
            input.builder.withHeader(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketAclInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketAclOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketAclOutputError>
}

public struct PutBucketAclInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketAclInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketAclInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketAclOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "acl", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketAclInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketAclOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketAclOutputError>
}

public struct PutBucketAclInput: Swift.Equatable {
    /// <p>The canned ACL to apply to the bucket.</p>
    public let aCL: S3ClientTypes.BucketCannedACL?
    /// <p>Contains the elements that set the ACL permissions for an object per grantee.</p>
    public let accessControlPolicy: S3ClientTypes.AccessControlPolicy?
    /// <p>The bucket to which to apply the ACL.</p>
    public let bucket: Swift.String?
    /// <p>The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message
    ///          integrity check to verify that the request body was not corrupted in transit. For more
    ///          information, go to <a href="http://www.ietf.org/rfc/rfc1864.txt">RFC
    ///          1864.</a>
    ///          </p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Allows grantee the read, write, read ACP, and write ACP permissions on the
    ///          bucket.</p>
    public let grantFullControl: Swift.String?
    /// <p>Allows grantee to list the objects in the bucket.</p>
    public let grantRead: Swift.String?
    /// <p>Allows grantee to read the bucket ACL.</p>
    public let grantReadACP: Swift.String?
    /// <p>Allows grantee to create new objects in the bucket.</p>
    ///          <p>For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.</p>
    public let grantWrite: Swift.String?
    /// <p>Allows grantee to write the ACL for the applicable bucket.</p>
    public let grantWriteACP: Swift.String?

    public init (
        aCL: S3ClientTypes.BucketCannedACL? = nil,
        accessControlPolicy: S3ClientTypes.AccessControlPolicy? = nil,
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWrite: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil
    )
    {
        self.aCL = aCL
        self.accessControlPolicy = accessControlPolicy
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWrite = grantWrite
        self.grantWriteACP = grantWriteACP
    }
}

struct PutBucketAclInputBody: Swift.Equatable {
    public let accessControlPolicy: S3ClientTypes.AccessControlPolicy?
}

extension PutBucketAclInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlPolicy = "AccessControlPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessControlPolicyDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AccessControlPolicy.self, forKey: .accessControlPolicy)
        accessControlPolicy = accessControlPolicyDecoded
    }
}

extension PutBucketAclOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketAclOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketAclOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketAclOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketAclOutputResponse()"}
}

extension PutBucketAclOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketAclOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketAclOutputResponseBody: Swift.Equatable {
}

extension PutBucketAclOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketAnalyticsConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketAnalyticsConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketAnalyticsConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketAnalyticsConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let analyticsConfiguration = input.operationInput.analyticsConfiguration {
            do {
                let encoder = context.getEncoder()
                let analyticsConfigurationdata = try encoder.encode(analyticsConfiguration)
                let analyticsConfigurationbody = ClientRuntime.HttpBody.data(analyticsConfigurationdata)
                input.builder.withBody(analyticsConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketAnalyticsConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketAnalyticsConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketAnalyticsConfigurationOutputError>
}

extension PutBucketAnalyticsConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketAnalyticsConfigurationInput(analyticsConfiguration: \(Swift.String(describing: analyticsConfiguration)), bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), id: \(Swift.String(describing: id)))"}
}

extension PutBucketAnalyticsConfigurationInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketAnalyticsConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsConfiguration = "AnalyticsConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let analyticsConfiguration = analyticsConfiguration {
            try container.encode(analyticsConfiguration, forKey: ClientRuntime.Key("AnalyticsConfiguration"))
        }
    }
}

public struct PutBucketAnalyticsConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketAnalyticsConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketAnalyticsConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketAnalyticsConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketAnalyticsConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketAnalyticsConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketAnalyticsConfigurationOutputError>
}

public struct PutBucketAnalyticsConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketAnalyticsConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketAnalyticsConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketAnalyticsConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "analytics", value: nil))
        if let id = input.operationInput.id {
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            input.builder.withQueryItem(idQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketAnalyticsConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketAnalyticsConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketAnalyticsConfigurationOutputError>
}

public struct PutBucketAnalyticsConfigurationInput: Swift.Equatable {
    /// <p>The configuration and any analyses for the analytics filter.</p>
    public let analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration?
    /// <p>The name of the bucket to which an analytics configuration is stored.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The ID that identifies the analytics configuration.</p>
    public let id: Swift.String?

    public init (
        analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration? = nil,
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.analyticsConfiguration = analyticsConfiguration
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

struct PutBucketAnalyticsConfigurationInputBody: Swift.Equatable {
    public let analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration?
}

extension PutBucketAnalyticsConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsConfiguration = "AnalyticsConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analyticsConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AnalyticsConfiguration.self, forKey: .analyticsConfiguration)
        analyticsConfiguration = analyticsConfigurationDecoded
    }
}

extension PutBucketAnalyticsConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketAnalyticsConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketAnalyticsConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketAnalyticsConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketAnalyticsConfigurationOutputResponse()"}
}

extension PutBucketAnalyticsConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketAnalyticsConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketAnalyticsConfigurationOutputResponseBody: Swift.Equatable {
}

extension PutBucketAnalyticsConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketCorsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketCorsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketCorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketCorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let cORSConfiguration = input.operationInput.cORSConfiguration {
            do {
                let encoder = context.getEncoder()
                let cORSConfigurationdata = try encoder.encode(cORSConfiguration)
                let cORSConfigurationbody = ClientRuntime.HttpBody.data(cORSConfigurationdata)
                input.builder.withBody(cORSConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketCorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketCorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketCorsOutputError>
}

extension PutBucketCorsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketCorsInput(bucket: \(Swift.String(describing: bucket)), cORSConfiguration: \(Swift.String(describing: cORSConfiguration)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension PutBucketCorsInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketCorsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cORSConfiguration = "CORSConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let cORSConfiguration = cORSConfiguration {
            try container.encode(cORSConfiguration, forKey: ClientRuntime.Key("CORSConfiguration"))
        }
    }
}

public struct PutBucketCorsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketCorsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketCorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketCorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketCorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketCorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketCorsOutputError>
}

public struct PutBucketCorsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketCorsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketCorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketCorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "cors", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketCorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketCorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketCorsOutputError>
}

public struct PutBucketCorsInput: Swift.Equatable {
    /// <p>Specifies the bucket impacted by the <code>cors</code>configuration.</p>
    public let bucket: Swift.String?
    /// <p>Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more
    ///          information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html">Enabling Cross-Origin Resource
    ///             Sharing</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let cORSConfiguration: S3ClientTypes.CORSConfiguration?
    /// <p>The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message
    ///          integrity check to verify that the request body was not corrupted in transit. For more
    ///          information, go to <a href="http://www.ietf.org/rfc/rfc1864.txt">RFC
    ///          1864.</a>
    ///          </p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        cORSConfiguration: S3ClientTypes.CORSConfiguration? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.cORSConfiguration = cORSConfiguration
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct PutBucketCorsInputBody: Swift.Equatable {
    public let cORSConfiguration: S3ClientTypes.CORSConfiguration?
}

extension PutBucketCorsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cORSConfiguration = "CORSConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cORSConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CORSConfiguration.self, forKey: .cORSConfiguration)
        cORSConfiguration = cORSConfigurationDecoded
    }
}

extension PutBucketCorsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketCorsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketCorsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketCorsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketCorsOutputResponse()"}
}

extension PutBucketCorsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketCorsOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketCorsOutputResponseBody: Swift.Equatable {
}

extension PutBucketCorsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketEncryptionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketEncryptionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketEncryptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketEncryptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let serverSideEncryptionConfiguration = input.operationInput.serverSideEncryptionConfiguration {
            do {
                let encoder = context.getEncoder()
                let serverSideEncryptionConfigurationdata = try encoder.encode(serverSideEncryptionConfiguration)
                let serverSideEncryptionConfigurationbody = ClientRuntime.HttpBody.data(serverSideEncryptionConfigurationdata)
                input.builder.withBody(serverSideEncryptionConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketEncryptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketEncryptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketEncryptionOutputError>
}

extension PutBucketEncryptionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketEncryptionInput(bucket: \(Swift.String(describing: bucket)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), serverSideEncryptionConfiguration: \(Swift.String(describing: serverSideEncryptionConfiguration)))"}
}

extension PutBucketEncryptionInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketEncryptionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let serverSideEncryptionConfiguration = serverSideEncryptionConfiguration {
            try container.encode(serverSideEncryptionConfiguration, forKey: ClientRuntime.Key("ServerSideEncryptionConfiguration"))
        }
    }
}

public struct PutBucketEncryptionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketEncryptionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketEncryptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketEncryptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketEncryptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketEncryptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketEncryptionOutputError>
}

public struct PutBucketEncryptionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketEncryptionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketEncryptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketEncryptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "encryption", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketEncryptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketEncryptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketEncryptionOutputError>
}

public struct PutBucketEncryptionInput: Swift.Equatable {
    /// <p>Specifies default encryption for a bucket using server-side encryption with Amazon S3-managed
    ///          keys (SSE-S3) or customer master keys stored in AWS KMS (SSE-KMS). For information about
    ///          the Amazon S3 default encryption feature, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html">Amazon S3 Default Bucket Encryption</a>
    ///          in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The base64-encoded 128-bit MD5 digest of the server-side encryption configuration.</p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Specifies the default server-side-encryption configuration.</p>
    public let serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration?

    public init (
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
    }
}

struct PutBucketEncryptionInputBody: Swift.Equatable {
    public let serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration?
}

extension PutBucketEncryptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverSideEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ServerSideEncryptionConfiguration.self, forKey: .serverSideEncryptionConfiguration)
        serverSideEncryptionConfiguration = serverSideEncryptionConfigurationDecoded
    }
}

extension PutBucketEncryptionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketEncryptionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketEncryptionOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketEncryptionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketEncryptionOutputResponse()"}
}

extension PutBucketEncryptionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketEncryptionOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketEncryptionOutputResponseBody: Swift.Equatable {
}

extension PutBucketEncryptionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketIntelligentTieringConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketIntelligentTieringConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketIntelligentTieringConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketIntelligentTieringConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let intelligentTieringConfiguration = input.operationInput.intelligentTieringConfiguration {
            do {
                let encoder = context.getEncoder()
                let intelligentTieringConfigurationdata = try encoder.encode(intelligentTieringConfiguration)
                let intelligentTieringConfigurationbody = ClientRuntime.HttpBody.data(intelligentTieringConfigurationdata)
                input.builder.withBody(intelligentTieringConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketIntelligentTieringConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketIntelligentTieringConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketIntelligentTieringConfigurationOutputError>
}

extension PutBucketIntelligentTieringConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketIntelligentTieringConfigurationInput(bucket: \(Swift.String(describing: bucket)), id: \(Swift.String(describing: id)), intelligentTieringConfiguration: \(Swift.String(describing: intelligentTieringConfiguration)))"}
}

extension PutBucketIntelligentTieringConfigurationInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketIntelligentTieringConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intelligentTieringConfiguration = "IntelligentTieringConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let intelligentTieringConfiguration = intelligentTieringConfiguration {
            try container.encode(intelligentTieringConfiguration, forKey: ClientRuntime.Key("IntelligentTieringConfiguration"))
        }
    }
}

public struct PutBucketIntelligentTieringConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketIntelligentTieringConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketIntelligentTieringConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketIntelligentTieringConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketIntelligentTieringConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketIntelligentTieringConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketIntelligentTieringConfigurationOutputError>
}

public struct PutBucketIntelligentTieringConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketIntelligentTieringConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketIntelligentTieringConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketIntelligentTieringConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "intelligent-tiering", value: nil))
        if let id = input.operationInput.id {
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            input.builder.withQueryItem(idQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketIntelligentTieringConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketIntelligentTieringConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketIntelligentTieringConfigurationOutputError>
}

public struct PutBucketIntelligentTieringConfigurationInput: Swift.Equatable {
    /// <p>The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.</p>
    public let bucket: Swift.String?
    /// <p>The ID used to identify the S3 Intelligent-Tiering configuration.</p>
    public let id: Swift.String?
    /// <p>Container for S3 Intelligent-Tiering configuration.</p>
    public let intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration?

    public init (
        bucket: Swift.String? = nil,
        id: Swift.String? = nil,
        intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.id = id
        self.intelligentTieringConfiguration = intelligentTieringConfiguration
    }
}

struct PutBucketIntelligentTieringConfigurationInputBody: Swift.Equatable {
    public let intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration?
}

extension PutBucketIntelligentTieringConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intelligentTieringConfiguration = "IntelligentTieringConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intelligentTieringConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IntelligentTieringConfiguration.self, forKey: .intelligentTieringConfiguration)
        intelligentTieringConfiguration = intelligentTieringConfigurationDecoded
    }
}

extension PutBucketIntelligentTieringConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketIntelligentTieringConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketIntelligentTieringConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketIntelligentTieringConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketIntelligentTieringConfigurationOutputResponse()"}
}

extension PutBucketIntelligentTieringConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketIntelligentTieringConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketIntelligentTieringConfigurationOutputResponseBody: Swift.Equatable {
}

extension PutBucketIntelligentTieringConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketInventoryConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketInventoryConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketInventoryConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketInventoryConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let inventoryConfiguration = input.operationInput.inventoryConfiguration {
            do {
                let encoder = context.getEncoder()
                let inventoryConfigurationdata = try encoder.encode(inventoryConfiguration)
                let inventoryConfigurationbody = ClientRuntime.HttpBody.data(inventoryConfigurationdata)
                input.builder.withBody(inventoryConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketInventoryConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketInventoryConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketInventoryConfigurationOutputError>
}

extension PutBucketInventoryConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketInventoryConfigurationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), id: \(Swift.String(describing: id)), inventoryConfiguration: \(Swift.String(describing: inventoryConfiguration)))"}
}

extension PutBucketInventoryConfigurationInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketInventoryConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inventoryConfiguration = "InventoryConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let inventoryConfiguration = inventoryConfiguration {
            try container.encode(inventoryConfiguration, forKey: ClientRuntime.Key("InventoryConfiguration"))
        }
    }
}

public struct PutBucketInventoryConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketInventoryConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketInventoryConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketInventoryConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketInventoryConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketInventoryConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketInventoryConfigurationOutputError>
}

public struct PutBucketInventoryConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketInventoryConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketInventoryConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketInventoryConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "inventory", value: nil))
        if let id = input.operationInput.id {
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            input.builder.withQueryItem(idQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketInventoryConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketInventoryConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketInventoryConfigurationOutputError>
}

public struct PutBucketInventoryConfigurationInput: Swift.Equatable {
    /// <p>The name of the bucket where the inventory configuration will be stored.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The ID used to identify the inventory configuration.</p>
    public let id: Swift.String?
    /// <p>Specifies the inventory configuration.</p>
    public let inventoryConfiguration: S3ClientTypes.InventoryConfiguration?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil,
        inventoryConfiguration: S3ClientTypes.InventoryConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
        self.inventoryConfiguration = inventoryConfiguration
    }
}

struct PutBucketInventoryConfigurationInputBody: Swift.Equatable {
    public let inventoryConfiguration: S3ClientTypes.InventoryConfiguration?
}

extension PutBucketInventoryConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inventoryConfiguration = "InventoryConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inventoryConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InventoryConfiguration.self, forKey: .inventoryConfiguration)
        inventoryConfiguration = inventoryConfigurationDecoded
    }
}

extension PutBucketInventoryConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketInventoryConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketInventoryConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketInventoryConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketInventoryConfigurationOutputResponse()"}
}

extension PutBucketInventoryConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketInventoryConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketInventoryConfigurationOutputResponseBody: Swift.Equatable {
}

extension PutBucketInventoryConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketLifecycleConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketLifecycleConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketLifecycleConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketLifecycleConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let lifecycleConfiguration = input.operationInput.lifecycleConfiguration {
            do {
                let encoder = context.getEncoder()
                let lifecycleConfigurationdata = try encoder.encode(lifecycleConfiguration)
                let lifecycleConfigurationbody = ClientRuntime.HttpBody.data(lifecycleConfigurationdata)
                input.builder.withBody(lifecycleConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketLifecycleConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketLifecycleConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketLifecycleConfigurationOutputError>
}

extension PutBucketLifecycleConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketLifecycleConfigurationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), lifecycleConfiguration: \(Swift.String(describing: lifecycleConfiguration)))"}
}

extension PutBucketLifecycleConfigurationInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketLifecycleConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycleConfiguration = "LifecycleConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let lifecycleConfiguration = lifecycleConfiguration {
            try container.encode(lifecycleConfiguration, forKey: ClientRuntime.Key("LifecycleConfiguration"))
        }
    }
}

public struct PutBucketLifecycleConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketLifecycleConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketLifecycleConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketLifecycleConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketLifecycleConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketLifecycleConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketLifecycleConfigurationOutputError>
}

public struct PutBucketLifecycleConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketLifecycleConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketLifecycleConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketLifecycleConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "lifecycle", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketLifecycleConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketLifecycleConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketLifecycleConfigurationOutputError>
}

public struct PutBucketLifecycleConfigurationInput: Swift.Equatable {
    /// <p>The name of the bucket for which to set the configuration.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Container for lifecycle rules. You can add as many as 1,000 rules.</p>
    public let lifecycleConfiguration: S3ClientTypes.BucketLifecycleConfiguration?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        lifecycleConfiguration: S3ClientTypes.BucketLifecycleConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.lifecycleConfiguration = lifecycleConfiguration
    }
}

struct PutBucketLifecycleConfigurationInputBody: Swift.Equatable {
    public let lifecycleConfiguration: S3ClientTypes.BucketLifecycleConfiguration?
}

extension PutBucketLifecycleConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycleConfiguration = "LifecycleConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketLifecycleConfiguration.self, forKey: .lifecycleConfiguration)
        lifecycleConfiguration = lifecycleConfigurationDecoded
    }
}

extension PutBucketLifecycleConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketLifecycleConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketLifecycleConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketLifecycleConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketLifecycleConfigurationOutputResponse()"}
}

extension PutBucketLifecycleConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketLifecycleConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketLifecycleConfigurationOutputResponseBody: Swift.Equatable {
}

extension PutBucketLifecycleConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketLoggingInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketLoggingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketLoggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketLoggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let bucketLoggingStatus = input.operationInput.bucketLoggingStatus {
            do {
                let encoder = context.getEncoder()
                let bucketLoggingStatusdata = try encoder.encode(bucketLoggingStatus)
                let bucketLoggingStatusbody = ClientRuntime.HttpBody.data(bucketLoggingStatusdata)
                input.builder.withBody(bucketLoggingStatusbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketLoggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketLoggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketLoggingOutputError>
}

extension PutBucketLoggingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketLoggingInput(bucket: \(Swift.String(describing: bucket)), bucketLoggingStatus: \(Swift.String(describing: bucketLoggingStatus)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)))"}
}

extension PutBucketLoggingInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketLoggingInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketLoggingStatus = "BucketLoggingStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let bucketLoggingStatus = bucketLoggingStatus {
            try container.encode(bucketLoggingStatus, forKey: ClientRuntime.Key("BucketLoggingStatus"))
        }
    }
}

public struct PutBucketLoggingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketLoggingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketLoggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketLoggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketLoggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketLoggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketLoggingOutputError>
}

public struct PutBucketLoggingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketLoggingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketLoggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketLoggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "logging", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketLoggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketLoggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketLoggingOutputError>
}

public struct PutBucketLoggingInput: Swift.Equatable {
    /// <p>The name of the bucket for which to set the logging parameters.</p>
    public let bucket: Swift.String?
    /// <p>Container for logging status information.</p>
    public let bucketLoggingStatus: S3ClientTypes.BucketLoggingStatus?
    /// <p>The MD5 hash of the <code>PutBucketLogging</code> request body.</p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        bucketLoggingStatus: S3ClientTypes.BucketLoggingStatus? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.bucketLoggingStatus = bucketLoggingStatus
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
    }
}

struct PutBucketLoggingInputBody: Swift.Equatable {
    public let bucketLoggingStatus: S3ClientTypes.BucketLoggingStatus?
}

extension PutBucketLoggingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketLoggingStatus = "BucketLoggingStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketLoggingStatusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketLoggingStatus.self, forKey: .bucketLoggingStatus)
        bucketLoggingStatus = bucketLoggingStatusDecoded
    }
}

extension PutBucketLoggingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketLoggingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketLoggingOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketLoggingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketLoggingOutputResponse()"}
}

extension PutBucketLoggingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketLoggingOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketLoggingOutputResponseBody: Swift.Equatable {
}

extension PutBucketLoggingOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketMetricsConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketMetricsConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketMetricsConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketMetricsConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let metricsConfiguration = input.operationInput.metricsConfiguration {
            do {
                let encoder = context.getEncoder()
                let metricsConfigurationdata = try encoder.encode(metricsConfiguration)
                let metricsConfigurationbody = ClientRuntime.HttpBody.data(metricsConfigurationdata)
                input.builder.withBody(metricsConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketMetricsConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketMetricsConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketMetricsConfigurationOutputError>
}

extension PutBucketMetricsConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketMetricsConfigurationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), id: \(Swift.String(describing: id)), metricsConfiguration: \(Swift.String(describing: metricsConfiguration)))"}
}

extension PutBucketMetricsConfigurationInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketMetricsConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricsConfiguration = "MetricsConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let metricsConfiguration = metricsConfiguration {
            try container.encode(metricsConfiguration, forKey: ClientRuntime.Key("MetricsConfiguration"))
        }
    }
}

public struct PutBucketMetricsConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketMetricsConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketMetricsConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketMetricsConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketMetricsConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketMetricsConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketMetricsConfigurationOutputError>
}

public struct PutBucketMetricsConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketMetricsConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketMetricsConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketMetricsConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "metrics", value: nil))
        if let id = input.operationInput.id {
            let idQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
            input.builder.withQueryItem(idQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketMetricsConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketMetricsConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketMetricsConfigurationOutputError>
}

public struct PutBucketMetricsConfigurationInput: Swift.Equatable {
    /// <p>The name of the bucket for which the metrics configuration is set.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The ID used to identify the metrics configuration.</p>
    public let id: Swift.String?
    /// <p>Specifies the metrics configuration.</p>
    public let metricsConfiguration: S3ClientTypes.MetricsConfiguration?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil,
        metricsConfiguration: S3ClientTypes.MetricsConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
        self.metricsConfiguration = metricsConfiguration
    }
}

struct PutBucketMetricsConfigurationInputBody: Swift.Equatable {
    public let metricsConfiguration: S3ClientTypes.MetricsConfiguration?
}

extension PutBucketMetricsConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricsConfiguration = "MetricsConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricsConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.MetricsConfiguration.self, forKey: .metricsConfiguration)
        metricsConfiguration = metricsConfigurationDecoded
    }
}

extension PutBucketMetricsConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketMetricsConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketMetricsConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketMetricsConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketMetricsConfigurationOutputResponse()"}
}

extension PutBucketMetricsConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketMetricsConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketMetricsConfigurationOutputResponseBody: Swift.Equatable {
}

extension PutBucketMetricsConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketNotificationConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketNotificationConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketNotificationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let notificationConfiguration = input.operationInput.notificationConfiguration {
            do {
                let encoder = context.getEncoder()
                let notificationConfigurationdata = try encoder.encode(notificationConfiguration)
                let notificationConfigurationbody = ClientRuntime.HttpBody.data(notificationConfigurationdata)
                input.builder.withBody(notificationConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketNotificationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketNotificationConfigurationOutputError>
}

extension PutBucketNotificationConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketNotificationConfigurationInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), notificationConfiguration: \(Swift.String(describing: notificationConfiguration)))"}
}

extension PutBucketNotificationConfigurationInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketNotificationConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notificationConfiguration = "NotificationConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let notificationConfiguration = notificationConfiguration {
            try container.encode(notificationConfiguration, forKey: ClientRuntime.Key("NotificationConfiguration"))
        }
    }
}

public struct PutBucketNotificationConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketNotificationConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketNotificationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketNotificationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketNotificationConfigurationOutputError>
}

public struct PutBucketNotificationConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketNotificationConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketNotificationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "notification", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketNotificationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketNotificationConfigurationOutputError>
}

public struct PutBucketNotificationConfigurationInput: Swift.Equatable {
    /// <p>The name of the bucket.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>A container for specifying the notification configuration of the bucket. If this element
    ///          is empty, notifications are turned off for the bucket.</p>
    public let notificationConfiguration: S3ClientTypes.NotificationConfiguration?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        notificationConfiguration: S3ClientTypes.NotificationConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.notificationConfiguration = notificationConfiguration
    }
}

struct PutBucketNotificationConfigurationInputBody: Swift.Equatable {
    public let notificationConfiguration: S3ClientTypes.NotificationConfiguration?
}

extension PutBucketNotificationConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notificationConfiguration = "NotificationConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notificationConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.NotificationConfiguration.self, forKey: .notificationConfiguration)
        notificationConfiguration = notificationConfigurationDecoded
    }
}

extension PutBucketNotificationConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketNotificationConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketNotificationConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketNotificationConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketNotificationConfigurationOutputResponse()"}
}

extension PutBucketNotificationConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketNotificationConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketNotificationConfigurationOutputResponseBody: Swift.Equatable {
}

extension PutBucketNotificationConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketOwnershipControlsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketOwnershipControlsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketOwnershipControlsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketOwnershipControlsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let ownershipControls = input.operationInput.ownershipControls {
            do {
                let encoder = context.getEncoder()
                let ownershipControlsdata = try encoder.encode(ownershipControls)
                let ownershipControlsbody = ClientRuntime.HttpBody.data(ownershipControlsdata)
                input.builder.withBody(ownershipControlsbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketOwnershipControlsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketOwnershipControlsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketOwnershipControlsOutputError>
}

extension PutBucketOwnershipControlsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketOwnershipControlsInput(bucket: \(Swift.String(describing: bucket)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), ownershipControls: \(Swift.String(describing: ownershipControls)))"}
}

extension PutBucketOwnershipControlsInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketOwnershipControlsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ownershipControls = "OwnershipControls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let ownershipControls = ownershipControls {
            try container.encode(ownershipControls, forKey: ClientRuntime.Key("OwnershipControls"))
        }
    }
}

public struct PutBucketOwnershipControlsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketOwnershipControlsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketOwnershipControlsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketOwnershipControlsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketOwnershipControlsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketOwnershipControlsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketOwnershipControlsOutputError>
}

public struct PutBucketOwnershipControlsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketOwnershipControlsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketOwnershipControlsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketOwnershipControlsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "ownershipControls", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketOwnershipControlsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketOwnershipControlsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketOwnershipControlsOutputError>
}

public struct PutBucketOwnershipControlsInput: Swift.Equatable {
    /// <p>The name of the Amazon S3 bucket whose <code>OwnershipControls</code> you want to set.</p>
    public let bucket: Swift.String?
    /// <p>The MD5 hash of the <code>OwnershipControls</code> request body. </p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The <code>OwnershipControls</code> (BucketOwnerPreferred or ObjectWriter) that you want
    ///          to apply to this Amazon S3 bucket.</p>
    public let ownershipControls: S3ClientTypes.OwnershipControls?

    public init (
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        ownershipControls: S3ClientTypes.OwnershipControls? = nil
    )
    {
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.ownershipControls = ownershipControls
    }
}

struct PutBucketOwnershipControlsInputBody: Swift.Equatable {
    public let ownershipControls: S3ClientTypes.OwnershipControls?
}

extension PutBucketOwnershipControlsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ownershipControls = "OwnershipControls"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownershipControlsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.OwnershipControls.self, forKey: .ownershipControls)
        ownershipControls = ownershipControlsDecoded
    }
}

extension PutBucketOwnershipControlsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketOwnershipControlsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketOwnershipControlsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketOwnershipControlsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketOwnershipControlsOutputResponse()"}
}

extension PutBucketOwnershipControlsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketOwnershipControlsOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketOwnershipControlsOutputResponseBody: Swift.Equatable {
}

extension PutBucketOwnershipControlsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let policy = input.operationInput.policy {
            let policydata = policy.data(using: .utf8)
            let policybody = ClientRuntime.HttpBody.data(policydata)
            input.builder.withBody(policybody)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketPolicyOutputError>
}

extension PutBucketPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketPolicyInput(bucket: \(Swift.String(describing: bucket)), confirmRemoveSelfBucketAccess: \(Swift.String(describing: confirmRemoveSelfBucketAccess)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), policy: \(Swift.String(describing: policy)))"}
}

extension PutBucketPolicyInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let policy = policy {
            try container.encode(policy, forKey: ClientRuntime.Key("Policy"))
        }
    }
}

public struct PutBucketPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.confirmRemoveSelfBucketAccess != false {
            input.builder.withHeader(name: "x-amz-confirm-remove-self-bucket-access", value: Swift.String(input.operationInput.confirmRemoveSelfBucketAccess))
        }
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketPolicyOutputError>
}

public struct PutBucketPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "policy", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketPolicyOutputError>
}

public struct PutBucketPolicyInput: Swift.Equatable {
    /// <p>The name of the bucket.</p>
    public let bucket: Swift.String?
    /// <p>Set this parameter to true to confirm that you want to remove your permissions to change
    ///          this bucket policy in the future.</p>
    public let confirmRemoveSelfBucketAccess: Swift.Bool
    /// <p>The MD5 hash of the request body.</p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The bucket policy as a JSON document.</p>
    public let policy: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        confirmRemoveSelfBucketAccess: Swift.Bool = false,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        policy: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.confirmRemoveSelfBucketAccess = confirmRemoveSelfBucketAccess
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.policy = policy
    }
}

struct PutBucketPolicyInputBody: Swift.Equatable {
    public let policy: Swift.String?
}

extension PutBucketPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension PutBucketPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketPolicyOutputResponse()"}
}

extension PutBucketPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketPolicyOutputResponseBody: Swift.Equatable {
}

extension PutBucketPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketReplicationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketReplicationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketReplicationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketReplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let replicationConfiguration = input.operationInput.replicationConfiguration {
            do {
                let encoder = context.getEncoder()
                let replicationConfigurationdata = try encoder.encode(replicationConfiguration)
                let replicationConfigurationbody = ClientRuntime.HttpBody.data(replicationConfigurationdata)
                input.builder.withBody(replicationConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketReplicationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketReplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketReplicationOutputError>
}

extension PutBucketReplicationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketReplicationInput(bucket: \(Swift.String(describing: bucket)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), replicationConfiguration: \(Swift.String(describing: replicationConfiguration)), token: \(Swift.String(describing: token)))"}
}

extension PutBucketReplicationInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketReplicationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationConfiguration = "ReplicationConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let replicationConfiguration = replicationConfiguration {
            try container.encode(replicationConfiguration, forKey: ClientRuntime.Key("ReplicationConfiguration"))
        }
    }
}

public struct PutBucketReplicationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketReplicationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketReplicationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketReplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let token = input.operationInput.token {
            input.builder.withHeader(name: "x-amz-bucket-object-lock-token", value: Swift.String(token))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketReplicationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketReplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketReplicationOutputError>
}

public struct PutBucketReplicationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketReplicationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketReplicationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketReplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "replication", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketReplicationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketReplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketReplicationOutputError>
}

public struct PutBucketReplicationInput: Swift.Equatable {
    /// <p>The name of the bucket</p>
    public let bucket: Swift.String?
    /// <p>The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message
    ///          integrity check to verify that the request body was not corrupted in transit. For more
    ///          information, see <a href="http://www.ietf.org/rfc/rfc1864.txt">RFC 1864</a>.</p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>A container for replication rules. You can add up to 1,000 rules. The maximum size of a
    ///          replication configuration is 2 MB.</p>
    public let replicationConfiguration: S3ClientTypes.ReplicationConfiguration?
    /// <p>A token to allow Object Lock to be enabled for an existing bucket.</p>
    public let token: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        replicationConfiguration: S3ClientTypes.ReplicationConfiguration? = nil,
        token: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.replicationConfiguration = replicationConfiguration
        self.token = token
    }
}

struct PutBucketReplicationInputBody: Swift.Equatable {
    public let replicationConfiguration: S3ClientTypes.ReplicationConfiguration?
}

extension PutBucketReplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationConfiguration = "ReplicationConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationConfiguration.self, forKey: .replicationConfiguration)
        replicationConfiguration = replicationConfigurationDecoded
    }
}

extension PutBucketReplicationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketReplicationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketReplicationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketReplicationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketReplicationOutputResponse()"}
}

extension PutBucketReplicationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketReplicationOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketReplicationOutputResponseBody: Swift.Equatable {
}

extension PutBucketReplicationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketRequestPaymentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketRequestPaymentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketRequestPaymentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketRequestPaymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let requestPaymentConfiguration = input.operationInput.requestPaymentConfiguration {
            do {
                let encoder = context.getEncoder()
                let requestPaymentConfigurationdata = try encoder.encode(requestPaymentConfiguration)
                let requestPaymentConfigurationbody = ClientRuntime.HttpBody.data(requestPaymentConfigurationdata)
                input.builder.withBody(requestPaymentConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketRequestPaymentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketRequestPaymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketRequestPaymentOutputError>
}

extension PutBucketRequestPaymentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketRequestPaymentInput(bucket: \(Swift.String(describing: bucket)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), requestPaymentConfiguration: \(Swift.String(describing: requestPaymentConfiguration)))"}
}

extension PutBucketRequestPaymentInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketRequestPaymentInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestPaymentConfiguration = "RequestPaymentConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let requestPaymentConfiguration = requestPaymentConfiguration {
            try container.encode(requestPaymentConfiguration, forKey: ClientRuntime.Key("RequestPaymentConfiguration"))
        }
    }
}

public struct PutBucketRequestPaymentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketRequestPaymentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketRequestPaymentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketRequestPaymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketRequestPaymentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketRequestPaymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketRequestPaymentOutputError>
}

public struct PutBucketRequestPaymentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketRequestPaymentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketRequestPaymentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketRequestPaymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "requestPayment", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketRequestPaymentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketRequestPaymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketRequestPaymentOutputError>
}

public struct PutBucketRequestPaymentInput: Swift.Equatable {
    /// <p>The bucket name.</p>
    public let bucket: Swift.String?
    /// <p>The base64-encoded 128-bit MD5 digest of the data. You must use this header as a
    ///          message integrity check to verify that the request body was not corrupted in transit. For
    ///          more information, see <a href="http://www.ietf.org/rfc/rfc1864.txt">RFC
    ///          1864</a>.</p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Container for Payer.</p>
    public let requestPaymentConfiguration: S3ClientTypes.RequestPaymentConfiguration?

    public init (
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        requestPaymentConfiguration: S3ClientTypes.RequestPaymentConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.requestPaymentConfiguration = requestPaymentConfiguration
    }
}

struct PutBucketRequestPaymentInputBody: Swift.Equatable {
    public let requestPaymentConfiguration: S3ClientTypes.RequestPaymentConfiguration?
}

extension PutBucketRequestPaymentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestPaymentConfiguration = "RequestPaymentConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestPaymentConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RequestPaymentConfiguration.self, forKey: .requestPaymentConfiguration)
        requestPaymentConfiguration = requestPaymentConfigurationDecoded
    }
}

extension PutBucketRequestPaymentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketRequestPaymentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketRequestPaymentOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketRequestPaymentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketRequestPaymentOutputResponse()"}
}

extension PutBucketRequestPaymentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketRequestPaymentOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketRequestPaymentOutputResponseBody: Swift.Equatable {
}

extension PutBucketRequestPaymentOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketTaggingInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketTaggingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketTaggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketTaggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let tagging = input.operationInput.tagging {
            do {
                let encoder = context.getEncoder()
                let taggingdata = try encoder.encode(tagging)
                let taggingbody = ClientRuntime.HttpBody.data(taggingdata)
                input.builder.withBody(taggingbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketTaggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketTaggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketTaggingOutputError>
}

extension PutBucketTaggingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketTaggingInput(bucket: \(Swift.String(describing: bucket)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), tagging: \(Swift.String(describing: tagging)))"}
}

extension PutBucketTaggingInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketTaggingInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagging = "Tagging"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let tagging = tagging {
            try container.encode(tagging, forKey: ClientRuntime.Key("Tagging"))
        }
    }
}

public struct PutBucketTaggingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketTaggingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketTaggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketTaggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketTaggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketTaggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketTaggingOutputError>
}

public struct PutBucketTaggingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketTaggingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketTaggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketTaggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "tagging", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketTaggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketTaggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketTaggingOutputError>
}

public struct PutBucketTaggingInput: Swift.Equatable {
    /// <p>The bucket name.</p>
    public let bucket: Swift.String?
    /// <p>The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message
    ///          integrity check to verify that the request body was not corrupted in transit. For more
    ///          information, see <a href="http://www.ietf.org/rfc/rfc1864.txt">RFC 1864</a>.</p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Container for the <code>TagSet</code> and <code>Tag</code> elements.</p>
    public let tagging: S3ClientTypes.Tagging?

    public init (
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        tagging: S3ClientTypes.Tagging? = nil
    )
    {
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.tagging = tagging
    }
}

struct PutBucketTaggingInputBody: Swift.Equatable {
    public let tagging: S3ClientTypes.Tagging?
}

extension PutBucketTaggingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagging = "Tagging"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taggingDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tagging.self, forKey: .tagging)
        tagging = taggingDecoded
    }
}

extension PutBucketTaggingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketTaggingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketTaggingOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketTaggingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketTaggingOutputResponse()"}
}

extension PutBucketTaggingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketTaggingOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketTaggingOutputResponseBody: Swift.Equatable {
}

extension PutBucketTaggingOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketVersioningInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketVersioningInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketVersioningInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketVersioningOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let versioningConfiguration = input.operationInput.versioningConfiguration {
            do {
                let encoder = context.getEncoder()
                let versioningConfigurationdata = try encoder.encode(versioningConfiguration)
                let versioningConfigurationbody = ClientRuntime.HttpBody.data(versioningConfigurationdata)
                input.builder.withBody(versioningConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketVersioningInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketVersioningOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketVersioningOutputError>
}

extension PutBucketVersioningInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketVersioningInput(bucket: \(Swift.String(describing: bucket)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), mFA: \(Swift.String(describing: mFA)), versioningConfiguration: \(Swift.String(describing: versioningConfiguration)))"}
}

extension PutBucketVersioningInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketVersioningInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case versioningConfiguration = "VersioningConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let versioningConfiguration = versioningConfiguration {
            try container.encode(versioningConfiguration, forKey: ClientRuntime.Key("VersioningConfiguration"))
        }
    }
}

public struct PutBucketVersioningInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketVersioningInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketVersioningInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketVersioningOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let mFA = input.operationInput.mFA {
            input.builder.withHeader(name: "x-amz-mfa", value: Swift.String(mFA))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketVersioningInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketVersioningOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketVersioningOutputError>
}

public struct PutBucketVersioningInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketVersioningInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketVersioningInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketVersioningOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "versioning", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketVersioningInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketVersioningOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketVersioningOutputError>
}

public struct PutBucketVersioningInput: Swift.Equatable {
    /// <p>The bucket name.</p>
    public let bucket: Swift.String?
    /// <p>>The base64-encoded 128-bit MD5 digest of the data. You must use this header as a
    ///          message integrity check to verify that the request body was not corrupted in transit. For
    ///          more information, see <a href="http://www.ietf.org/rfc/rfc1864.txt">RFC
    ///          1864</a>.</p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The concatenation of the authentication device's serial number, a space, and the value
    ///          that is displayed on your authentication device.</p>
    public let mFA: Swift.String?
    /// <p>Container for setting the versioning state.</p>
    public let versioningConfiguration: S3ClientTypes.VersioningConfiguration?

    public init (
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        mFA: Swift.String? = nil,
        versioningConfiguration: S3ClientTypes.VersioningConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.mFA = mFA
        self.versioningConfiguration = versioningConfiguration
    }
}

struct PutBucketVersioningInputBody: Swift.Equatable {
    public let versioningConfiguration: S3ClientTypes.VersioningConfiguration?
}

extension PutBucketVersioningInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case versioningConfiguration = "VersioningConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versioningConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.VersioningConfiguration.self, forKey: .versioningConfiguration)
        versioningConfiguration = versioningConfigurationDecoded
    }
}

extension PutBucketVersioningOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketVersioningOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketVersioningOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketVersioningOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketVersioningOutputResponse()"}
}

extension PutBucketVersioningOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketVersioningOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketVersioningOutputResponseBody: Swift.Equatable {
}

extension PutBucketVersioningOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutBucketWebsiteInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketWebsiteInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketWebsiteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketWebsiteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let websiteConfiguration = input.operationInput.websiteConfiguration {
            do {
                let encoder = context.getEncoder()
                let websiteConfigurationdata = try encoder.encode(websiteConfiguration)
                let websiteConfigurationbody = ClientRuntime.HttpBody.data(websiteConfigurationdata)
                input.builder.withBody(websiteConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketWebsiteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketWebsiteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketWebsiteOutputError>
}

extension PutBucketWebsiteInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketWebsiteInput(bucket: \(Swift.String(describing: bucket)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), websiteConfiguration: \(Swift.String(describing: websiteConfiguration)))"}
}

extension PutBucketWebsiteInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutBucketWebsiteInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case websiteConfiguration = "WebsiteConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let websiteConfiguration = websiteConfiguration {
            try container.encode(websiteConfiguration, forKey: ClientRuntime.Key("WebsiteConfiguration"))
        }
    }
}

public struct PutBucketWebsiteInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketWebsiteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketWebsiteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketWebsiteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketWebsiteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketWebsiteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketWebsiteOutputError>
}

public struct PutBucketWebsiteInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBucketWebsiteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBucketWebsiteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBucketWebsiteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "website", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBucketWebsiteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBucketWebsiteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBucketWebsiteOutputError>
}

public struct PutBucketWebsiteInput: Swift.Equatable {
    /// <p>The bucket name.</p>
    public let bucket: Swift.String?
    /// <p>The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message
    ///          integrity check to verify that the request body was not corrupted in transit. For more
    ///          information, see <a href="http://www.ietf.org/rfc/rfc1864.txt">RFC 1864</a>.</p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Container for the request.</p>
    public let websiteConfiguration: S3ClientTypes.WebsiteConfiguration?

    public init (
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        websiteConfiguration: S3ClientTypes.WebsiteConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.websiteConfiguration = websiteConfiguration
    }
}

struct PutBucketWebsiteInputBody: Swift.Equatable {
    public let websiteConfiguration: S3ClientTypes.WebsiteConfiguration?
}

extension PutBucketWebsiteInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case websiteConfiguration = "WebsiteConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let websiteConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.WebsiteConfiguration.self, forKey: .websiteConfiguration)
        websiteConfiguration = websiteConfigurationDecoded
    }
}

extension PutBucketWebsiteOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutBucketWebsiteOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBucketWebsiteOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBucketWebsiteOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBucketWebsiteOutputResponse()"}
}

extension PutBucketWebsiteOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutBucketWebsiteOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutBucketWebsiteOutputResponseBody: Swift.Equatable {
}

extension PutBucketWebsiteOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutObjectAclInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectAclInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectAclInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectAclOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let accessControlPolicy = input.operationInput.accessControlPolicy {
            do {
                let encoder = context.getEncoder()
                let accessControlPolicydata = try encoder.encode(accessControlPolicy)
                let accessControlPolicybody = ClientRuntime.HttpBody.data(accessControlPolicydata)
                input.builder.withBody(accessControlPolicybody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectAclInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectAclOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectAclOutputError>
}

extension PutObjectAclInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectAclInput(aCL: \(Swift.String(describing: aCL)), accessControlPolicy: \(Swift.String(describing: accessControlPolicy)), bucket: \(Swift.String(describing: bucket)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), grantFullControl: \(Swift.String(describing: grantFullControl)), grantRead: \(Swift.String(describing: grantRead)), grantReadACP: \(Swift.String(describing: grantReadACP)), grantWrite: \(Swift.String(describing: grantWrite)), grantWriteACP: \(Swift.String(describing: grantWriteACP)), key: \(Swift.String(describing: key)), requestPayer: \(Swift.String(describing: requestPayer)), versionId: \(Swift.String(describing: versionId)))"}
}

extension PutObjectAclInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutObjectAclInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlPolicy = "AccessControlPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let accessControlPolicy = accessControlPolicy {
            try container.encode(accessControlPolicy, forKey: ClientRuntime.Key("AccessControlPolicy"))
        }
    }
}

public struct PutObjectAclInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectAclInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectAclInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectAclOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let aCL = input.operationInput.aCL {
            input.builder.withHeader(name: "x-amz-acl", value: Swift.String(aCL.rawValue))
        }
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let grantFullControl = input.operationInput.grantFullControl {
            input.builder.withHeader(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl))
        }
        if let grantRead = input.operationInput.grantRead {
            input.builder.withHeader(name: "x-amz-grant-read", value: Swift.String(grantRead))
        }
        if let grantReadACP = input.operationInput.grantReadACP {
            input.builder.withHeader(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP))
        }
        if let grantWrite = input.operationInput.grantWrite {
            input.builder.withHeader(name: "x-amz-grant-write", value: Swift.String(grantWrite))
        }
        if let grantWriteACP = input.operationInput.grantWriteACP {
            input.builder.withHeader(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectAclInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectAclOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectAclOutputError>
}

public struct PutObjectAclInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectAclInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectAclInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectAclOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "acl", value: nil))
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectAclInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectAclOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectAclOutputError>
}

public struct PutObjectAclInput: Swift.Equatable {
    /// <p>The canned ACL to apply to the object. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL">Canned ACL</a>.</p>
    public let aCL: S3ClientTypes.ObjectCannedACL?
    /// <p>Contains the elements that set the ACL permissions for an object per grantee.</p>
    public let accessControlPolicy: S3ClientTypes.AccessControlPolicy?
    /// <p>The bucket name that contains the object to which you want to attach the ACL. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message
    ///          integrity check to verify that the request body was not corrupted in transit. For more
    ///          information, go to <a href="http://www.ietf.org/rfc/rfc1864.txt">RFC
    ///          1864.></a>
    ///          </p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Allows grantee the read, write, read ACP, and write ACP permissions on the
    ///          bucket.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantFullControl: Swift.String?
    /// <p>Allows grantee to list the objects in the
    ///       bucket.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantRead: Swift.String?
    /// <p>Allows grantee to read the bucket ACL.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantReadACP: Swift.String?
    /// <p>Allows grantee to create new objects in the bucket.</p>
    ///          <p>For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.</p>
    public let grantWrite: Swift.String?
    /// <p>Allows grantee to write the ACL for the applicable
    ///       bucket.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantWriteACP: Swift.String?
    /// <p>Key for which the PUT action was initiated.</p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let key: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>VersionId used to reference a specific version of the object.</p>
    public let versionId: Swift.String?

    public init (
        aCL: S3ClientTypes.ObjectCannedACL? = nil,
        accessControlPolicy: S3ClientTypes.AccessControlPolicy? = nil,
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWrite: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.aCL = aCL
        self.accessControlPolicy = accessControlPolicy
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWrite = grantWrite
        self.grantWriteACP = grantWriteACP
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

struct PutObjectAclInputBody: Swift.Equatable {
    public let accessControlPolicy: S3ClientTypes.AccessControlPolicy?
}

extension PutObjectAclInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlPolicy = "AccessControlPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessControlPolicyDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AccessControlPolicy.self, forKey: .accessControlPolicy)
        accessControlPolicy = accessControlPolicyDecoded
    }
}

extension PutObjectAclOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutObjectAclOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchKey" : self = .noSuchKey(try NoSuchKey(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutObjectAclOutputError: Swift.Error, Swift.Equatable {
    case noSuchKey(NoSuchKey)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutObjectAclOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectAclOutputResponse(requestCharged: \(Swift.String(describing: requestCharged)))"}
}

extension PutObjectAclOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
    }
}

public struct PutObjectAclOutputResponse: Swift.Equatable {
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?

    public init (
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

struct PutObjectAclOutputResponseBody: Swift.Equatable {
}

extension PutObjectAclOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutObjectInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let body = input.operationInput.body {
            let bodydata = body
            let bodybody = ClientRuntime.HttpBody.stream(bodydata)
            input.builder.withBody(bodybody)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectOutputError>
}

extension PutObjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectInput(aCL: \(Swift.String(describing: aCL)), body: \(Swift.String(describing: body)), bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentLength: \(Swift.String(describing: contentLength)), contentMD5: \(Swift.String(describing: contentMD5)), contentType: \(Swift.String(describing: contentType)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expires: \(Swift.String(describing: expires)), grantFullControl: \(Swift.String(describing: grantFullControl)), grantRead: \(Swift.String(describing: grantRead)), grantReadACP: \(Swift.String(describing: grantReadACP)), grantWriteACP: \(Swift.String(describing: grantWriteACP)), key: \(Swift.String(describing: key)), metadata: \(Swift.String(describing: metadata)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), requestPayer: \(Swift.String(describing: requestPayer)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKey: \(Swift.String(describing: sSECustomerKey)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), sSEKMSEncryptionContext: \(Swift.String(describing: sSEKMSEncryptionContext)), sSEKMSKeyId: \(Swift.String(describing: sSEKMSKeyId)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), storageClass: \(Swift.String(describing: storageClass)), tagging: \(Swift.String(describing: tagging)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)))"}
}

extension PutObjectInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutObjectInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let body = body {
            try container.encode(body, forKey: ClientRuntime.Key("Body"))
        }
    }
}

public struct PutObjectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let aCL = input.operationInput.aCL {
            input.builder.withHeader(name: "x-amz-acl", value: Swift.String(aCL.rawValue))
        }
        if input.operationInput.bucketKeyEnabled != false {
            input.builder.withHeader(name: "x-amz-server-side-encryption-bucket-key-enabled", value: Swift.String(input.operationInput.bucketKeyEnabled))
        }
        if let cacheControl = input.operationInput.cacheControl {
            input.builder.withHeader(name: "Cache-Control", value: Swift.String(cacheControl))
        }
        if let contentDisposition = input.operationInput.contentDisposition {
            input.builder.withHeader(name: "Content-Disposition", value: Swift.String(contentDisposition))
        }
        if let contentEncoding = input.operationInput.contentEncoding {
            input.builder.withHeader(name: "Content-Encoding", value: Swift.String(contentEncoding))
        }
        if let contentLanguage = input.operationInput.contentLanguage {
            input.builder.withHeader(name: "Content-Language", value: Swift.String(contentLanguage))
        }
        if input.operationInput.contentLength != 0 {
            input.builder.withHeader(name: "Content-Length", value: Swift.String(input.operationInput.contentLength))
        }
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let contentType = input.operationInput.contentType {
            input.builder.withHeader(name: "Content-Type", value: Swift.String(contentType))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let expires = input.operationInput.expires {
            input.builder.withHeader(name: "Expires", value: Swift.String(expires.rfc5322()))
        }
        if let grantFullControl = input.operationInput.grantFullControl {
            input.builder.withHeader(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl))
        }
        if let grantRead = input.operationInput.grantRead {
            input.builder.withHeader(name: "x-amz-grant-read", value: Swift.String(grantRead))
        }
        if let grantReadACP = input.operationInput.grantReadACP {
            input.builder.withHeader(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP))
        }
        if let grantWriteACP = input.operationInput.grantWriteACP {
            input.builder.withHeader(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP))
        }
        if let objectLockLegalHoldStatus = input.operationInput.objectLockLegalHoldStatus {
            input.builder.withHeader(name: "x-amz-object-lock-legal-hold", value: Swift.String(objectLockLegalHoldStatus.rawValue))
        }
        if let objectLockMode = input.operationInput.objectLockMode {
            input.builder.withHeader(name: "x-amz-object-lock-mode", value: Swift.String(objectLockMode.rawValue))
        }
        if let objectLockRetainUntilDate = input.operationInput.objectLockRetainUntilDate {
            input.builder.withHeader(name: "x-amz-object-lock-retain-until-date", value: Swift.String(objectLockRetainUntilDate.iso8601WithoutFractionalSeconds()))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        if let sSECustomerAlgorithm = input.operationInput.sSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sSECustomerAlgorithm))
        }
        if let sSECustomerKey = input.operationInput.sSECustomerKey {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sSECustomerKey))
        }
        if let sSECustomerKeyMD5 = input.operationInput.sSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sSECustomerKeyMD5))
        }
        if let sSEKMSEncryptionContext = input.operationInput.sSEKMSEncryptionContext {
            input.builder.withHeader(name: "x-amz-server-side-encryption-context", value: Swift.String(sSEKMSEncryptionContext))
        }
        if let sSEKMSKeyId = input.operationInput.sSEKMSKeyId {
            input.builder.withHeader(name: "x-amz-server-side-encryption-aws-kms-key-id", value: Swift.String(sSEKMSKeyId))
        }
        if let serverSideEncryption = input.operationInput.serverSideEncryption {
            input.builder.withHeader(name: "x-amz-server-side-encryption", value: Swift.String(serverSideEncryption.rawValue))
        }
        if let storageClass = input.operationInput.storageClass {
            input.builder.withHeader(name: "x-amz-storage-class", value: Swift.String(storageClass.rawValue))
        }
        if let tagging = input.operationInput.tagging {
            input.builder.withHeader(name: "x-amz-tagging", value: Swift.String(tagging))
        }
        if let websiteRedirectLocation = input.operationInput.websiteRedirectLocation {
            input.builder.withHeader(name: "x-amz-website-redirect-location", value: Swift.String(websiteRedirectLocation))
        }
        if let metadata = input.operationInput.metadata {
            for (prefixHeaderMapKey, prefixHeaderMapValue) in metadata {
                input.builder.withHeader(name: "x-amz-meta-\(prefixHeaderMapKey)", value: Swift.String(prefixHeaderMapValue))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectOutputError>
}

public struct PutObjectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "PutObject"))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectOutputError>
}

public struct PutObjectInput: Swift.Equatable {
    /// <p>The canned ACL to apply to the object. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL">Canned
    ///       ACL</a>.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let aCL: S3ClientTypes.ObjectCannedACL?
    /// <p>Object data.</p>
    public let body: ClientRuntime.ByteStream?
    /// <p>The bucket name to which the PUT action was initiated. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using AWS KMS (SSE-KMS). Setting this header to <code>true</code> causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS.</p>
    ///          <p>Specifying this header with a PUT action doesn’t affect bucket-level settings for S3 Bucket Key.</p>
    public let bucketKeyEnabled: Swift.Bool
    /// <p> Can be used to specify caching behavior along the request/reply chain. For more
    ///          information, see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.</p>
    public let cacheControl: Swift.String?
    /// <p>Specifies presentational information for the object. For more information, see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1">http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1</a>.</p>
    public let contentDisposition: Swift.String?
    /// <p>Specifies what content encodings have been applied to the object and thus what decoding
    ///          mechanisms must be applied to obtain the media-type referenced by the Content-Type header
    ///          field. For more information, see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11</a>.</p>
    public let contentEncoding: Swift.String?
    /// <p>The language the content is in.</p>
    public let contentLanguage: Swift.String?
    /// <p>Size of the body in bytes. This parameter is useful when the size of the body cannot be
    ///          determined automatically. For more information, see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13</a>.</p>
    public let contentLength: Swift.Int
    /// <p>The base64-encoded 128-bit MD5 digest of the message (without the headers) according to
    ///          RFC 1864. This header can be used as a message integrity check to verify that the data is
    ///          the same data that was originally sent. Although it is optional, we recommend using the
    ///          Content-MD5 mechanism as an end-to-end integrity check. For more information about REST
    ///          request authentication, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">REST
    ///             Authentication</a>.</p>
    public let contentMD5: Swift.String?
    /// <p>A standard MIME type describing the format of the contents. For more information, see
    ///             <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17</a>.</p>
    public let contentType: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The date and time at which the object is no longer cacheable. For more information, see
    ///             <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21</a>.</p>
    public let expires: ClientRuntime.Date?
    /// <p>Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the
    ///       object.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantFullControl: Swift.String?
    /// <p>Allows grantee to read the object data and its
    ///       metadata.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantRead: Swift.String?
    /// <p>Allows grantee to read the object ACL.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantReadACP: Swift.String?
    /// <p>Allows grantee to write the ACL for the applicable
    ///       object.</p>
    ///          <p>This action is not supported by Amazon S3 on Outposts.</p>
    public let grantWriteACP: Swift.String?
    /// <p>Object key for which the PUT action was initiated.</p>
    public let key: Swift.String?
    /// <p>A map of metadata to store with the object in S3.</p>
    public let metadata: [Swift.String:Swift.String]?
    /// <p>Specifies whether a legal hold will be applied to this object. For more information
    ///          about S3 Object Lock, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Object
    ///          Lock</a>.</p>
    public let objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// <p>The Object Lock mode that you want to apply to this object.</p>
    public let objectLockMode: S3ClientTypes.ObjectLockMode?
    /// <p>The date and time when you want this object's Object Lock to expire. Must be formatted
    ///          as a timestamp parameter.</p>
    public let objectLockRetainUntilDate: ClientRuntime.Date?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>Specifies the algorithm to use to when encrypting the object (for example,
    ///          AES256).</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
    ///          value is used to store the object and then it is discarded; Amazon S3 does not store the
    ///          encryption key. The key must be appropriate for use with the algorithm specified in the
    ///             <code>x-amz-server-side-encryption-customer-algorithm</code> header.</p>
    public let sSECustomerKey: Swift.String?
    /// <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
    ///          this header for a message integrity check to ensure that the encryption key was transmitted
    ///          without error.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>Specifies the AWS KMS Encryption Context to use for object encryption. The value of this
    ///          header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value
    ///          pairs.</p>
    public let sSEKMSEncryptionContext: Swift.String?
    /// <p>If <code>x-amz-server-side-encryption</code> is present and has the value of
    ///          <code>aws:kms</code>, this header specifies the ID of the AWS Key Management Service
    ///          (AWS KMS) symmetrical customer managed customer master key (CMK) that was used for the
    ///          object. If you specify <code>x-amz-server-side-encryption:aws:kms</code>, but do not
    ///          provide<code> x-amz-server-side-encryption-aws-kms-key-id</code>, Amazon S3 uses the AWS
    ///          managed CMK in AWS to protect the data. If the KMS key does not exist in the same account
    ///          issuing the command, you must use the full ARN and not just the ID.
    ///       </p>
    public let sSEKMSKeyId: Swift.String?
    /// <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
    ///          AES256, aws:kms).</p>
    public let serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// <p>By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The
    ///          STANDARD storage class provides high durability and high availability. Depending on
    ///          performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses
    ///          the OUTPOSTS Storage Class. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage Classes</a> in the
    ///          <i>Amazon S3 User Guide</i>.</p>
    public let storageClass: S3ClientTypes.StorageClass?
    /// <p>The tag-set for the object. The tag-set must be encoded as URL Query parameters. (For
    ///          example, "Key1=Value1")</p>
    public let tagging: Swift.String?
    /// <p>If the bucket is configured as a website, redirects requests for this object to another
    ///          object in the same bucket or to an external URL. Amazon S3 stores the value of this header in
    ///          the object metadata. For information about object metadata, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html">Object Key and Metadata</a>.</p>
    ///
    ///          <p>In the following example, the request header sets the redirect to an object
    ///          (anotherPage.html) in the same bucket:</p>
    ///
    ///          <p>
    ///             <code>x-amz-website-redirect-location: /anotherPage.html</code>
    ///          </p>
    ///
    ///          <p>In the following example, the request header sets the object redirect to another
    ///          website:</p>
    ///
    ///          <p>
    ///             <code>x-amz-website-redirect-location: http://www.example.com/</code>
    ///          </p>
    ///
    ///          <p>For more information about website hosting in Amazon S3, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html">Hosting Websites on Amazon S3</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html">How to Configure Website Page
    ///             Redirects</a>. </p>
    public let websiteRedirectLocation: Swift.String?

    public init (
        aCL: S3ClientTypes.ObjectCannedACL? = nil,
        body: ClientRuntime.ByteStream? = nil,
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool = false,
        cacheControl: Swift.String? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentLength: Swift.Int = 0,
        contentMD5: Swift.String? = nil,
        contentType: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expires: ClientRuntime.Date? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        key: Swift.String? = nil,
        metadata: [Swift.String:Swift.String]? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: ClientRuntime.Date? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKey: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        sSEKMSEncryptionContext: Swift.String? = nil,
        sSEKMSKeyId: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagging: Swift.String? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.aCL = aCL
        self.body = body
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentLength = contentLength
        self.contentMD5 = contentMD5
        self.contentType = contentType
        self.expectedBucketOwner = expectedBucketOwner
        self.expires = expires
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWriteACP = grantWriteACP
        self.key = key
        self.metadata = metadata
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.requestPayer = requestPayer
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKey = sSECustomerKey
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.sSEKMSEncryptionContext = sSEKMSEncryptionContext
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
        self.storageClass = storageClass
        self.tagging = tagging
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

struct PutObjectInputBody: Swift.Equatable {
    public let body: ClientRuntime.ByteStream?
}

extension PutObjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.body) {
            do {
                let bodyDecoded = try containerValues.decodeIfPresent(ClientRuntime.ByteStream.self, forKey: .body)
                body = bodyDecoded
            } catch {
                body = ClientRuntime.ByteStream.from(data: "".data(using: .utf8)!)
            }
        } else {
            body = nil
        }
    }
}

public struct PutObjectLegalHoldInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectLegalHoldInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectLegalHoldInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectLegalHoldOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let legalHold = input.operationInput.legalHold {
            do {
                let encoder = context.getEncoder()
                let legalHolddata = try encoder.encode(legalHold)
                let legalHoldbody = ClientRuntime.HttpBody.data(legalHolddata)
                input.builder.withBody(legalHoldbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectLegalHoldInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectLegalHoldOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectLegalHoldOutputError>
}

extension PutObjectLegalHoldInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectLegalHoldInput(bucket: \(Swift.String(describing: bucket)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), legalHold: \(Swift.String(describing: legalHold)), requestPayer: \(Swift.String(describing: requestPayer)), versionId: \(Swift.String(describing: versionId)))"}
}

extension PutObjectLegalHoldInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutObjectLegalHoldInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case legalHold = "LegalHold"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let legalHold = legalHold {
            try container.encode(legalHold, forKey: ClientRuntime.Key("LegalHold"))
        }
    }
}

public struct PutObjectLegalHoldInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectLegalHoldInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectLegalHoldInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectLegalHoldOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectLegalHoldInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectLegalHoldOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectLegalHoldOutputError>
}

public struct PutObjectLegalHoldInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectLegalHoldInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectLegalHoldInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectLegalHoldOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "legal-hold", value: nil))
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectLegalHoldInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectLegalHoldOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectLegalHoldOutputError>
}

public struct PutObjectLegalHoldInput: Swift.Equatable {
    /// <p>The bucket name containing the object that you want to place a Legal Hold on. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The MD5 hash for the request body.</p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The key name for the object that you want to place a Legal Hold on.</p>
    public let key: Swift.String?
    /// <p>Container element for the Legal Hold configuration you want to apply to the specified
    ///          object.</p>
    public let legalHold: S3ClientTypes.ObjectLockLegalHold?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>The version ID of the object that you want to place a Legal Hold on.</p>
    public let versionId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        legalHold: S3ClientTypes.ObjectLockLegalHold? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.legalHold = legalHold
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

struct PutObjectLegalHoldInputBody: Swift.Equatable {
    public let legalHold: S3ClientTypes.ObjectLockLegalHold?
}

extension PutObjectLegalHoldInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case legalHold = "LegalHold"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let legalHoldDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockLegalHold.self, forKey: .legalHold)
        legalHold = legalHoldDecoded
    }
}

extension PutObjectLegalHoldOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutObjectLegalHoldOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutObjectLegalHoldOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutObjectLegalHoldOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectLegalHoldOutputResponse(requestCharged: \(Swift.String(describing: requestCharged)))"}
}

extension PutObjectLegalHoldOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
    }
}

public struct PutObjectLegalHoldOutputResponse: Swift.Equatable {
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?

    public init (
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

struct PutObjectLegalHoldOutputResponseBody: Swift.Equatable {
}

extension PutObjectLegalHoldOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutObjectLockConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectLockConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectLockConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectLockConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let objectLockConfiguration = input.operationInput.objectLockConfiguration {
            do {
                let encoder = context.getEncoder()
                let objectLockConfigurationdata = try encoder.encode(objectLockConfiguration)
                let objectLockConfigurationbody = ClientRuntime.HttpBody.data(objectLockConfigurationdata)
                input.builder.withBody(objectLockConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectLockConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectLockConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectLockConfigurationOutputError>
}

extension PutObjectLockConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectLockConfigurationInput(bucket: \(Swift.String(describing: bucket)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), objectLockConfiguration: \(Swift.String(describing: objectLockConfiguration)), requestPayer: \(Swift.String(describing: requestPayer)), token: \(Swift.String(describing: token)))"}
}

extension PutObjectLockConfigurationInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutObjectLockConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objectLockConfiguration = "ObjectLockConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let objectLockConfiguration = objectLockConfiguration {
            try container.encode(objectLockConfiguration, forKey: ClientRuntime.Key("ObjectLockConfiguration"))
        }
    }
}

public struct PutObjectLockConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectLockConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectLockConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectLockConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        if let token = input.operationInput.token {
            input.builder.withHeader(name: "x-amz-bucket-object-lock-token", value: Swift.String(token))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectLockConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectLockConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectLockConfigurationOutputError>
}

public struct PutObjectLockConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectLockConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectLockConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectLockConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "object-lock", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectLockConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectLockConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectLockConfigurationOutputError>
}

public struct PutObjectLockConfigurationInput: Swift.Equatable {
    /// <p>The bucket whose Object Lock configuration you want to create or replace.</p>
    public let bucket: Swift.String?
    /// <p>The MD5 hash for the request body.</p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The Object Lock configuration that you want to apply to the specified bucket.</p>
    public let objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>A token to allow Object Lock to be enabled for an existing bucket.</p>
    public let token: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        token: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.objectLockConfiguration = objectLockConfiguration
        self.requestPayer = requestPayer
        self.token = token
    }
}

struct PutObjectLockConfigurationInputBody: Swift.Equatable {
    public let objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration?
}

extension PutObjectLockConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objectLockConfiguration = "ObjectLockConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectLockConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockConfiguration.self, forKey: .objectLockConfiguration)
        objectLockConfiguration = objectLockConfigurationDecoded
    }
}

extension PutObjectLockConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutObjectLockConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutObjectLockConfigurationOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutObjectLockConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectLockConfigurationOutputResponse(requestCharged: \(Swift.String(describing: requestCharged)))"}
}

extension PutObjectLockConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
    }
}

public struct PutObjectLockConfigurationOutputResponse: Swift.Equatable {
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?

    public init (
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

struct PutObjectLockConfigurationOutputResponseBody: Swift.Equatable {
}

extension PutObjectLockConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension PutObjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutObjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutObjectOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutObjectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectOutputResponse(bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), eTag: \(Swift.String(describing: eTag)), expiration: \(Swift.String(describing: expiration)), requestCharged: \(Swift.String(describing: requestCharged)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), sSEKMSEncryptionContext: \(Swift.String(describing: sSEKMSEncryptionContext)), sSEKMSKeyId: \(Swift.String(describing: sSEKMSKeyId)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), versionId: \(Swift.String(describing: versionId)))"}
}

extension PutObjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = false
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            self.eTag = eTagHeaderValue
        } else {
            self.eTag = nil
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            self.expiration = expirationHeaderValue
        } else {
            self.expiration = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let sSECustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            self.sSECustomerAlgorithm = sSECustomerAlgorithmHeaderValue
        } else {
            self.sSECustomerAlgorithm = nil
        }
        if let sSECustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5HeaderValue
        } else {
            self.sSECustomerKeyMD5 = nil
        }
        if let sSEKMSEncryptionContextHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-context") {
            self.sSEKMSEncryptionContext = sSEKMSEncryptionContextHeaderValue
        } else {
            self.sSEKMSEncryptionContext = nil
        }
        if let sSEKMSKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.sSEKMSKeyId = sSEKMSKeyIdHeaderValue
        } else {
            self.sSEKMSKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
    }
}

public struct PutObjectOutputResponse: Swift.Equatable {
    /// <p>Indicates whether the uploaded object uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>
    public let bucketKeyEnabled: Swift.Bool
    /// <p>Entity tag for the uploaded object.</p>
    public let eTag: Swift.String?
    /// <p> If the expiration is configured for the object (see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html">PutBucketLifecycleConfiguration</a>), the response includes this header. It
    ///          includes the expiry-date and rule-id key-value pairs that provide information about object
    ///          expiration. The value of the rule-id is URL encoded.</p>
    public let expiration: Swift.String?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header confirming the encryption algorithm used.</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header to provide round-trip message integrity verification of
    ///          the customer-provided encryption key.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>If present, specifies the AWS KMS Encryption Context to use for object encryption. The
    ///          value of this header is a base64-encoded UTF-8 string holding JSON with the encryption
    ///          context key-value pairs.</p>
    public let sSEKMSEncryptionContext: Swift.String?
    /// <p>If <code>x-amz-server-side-encryption</code> is present and has the value of
    ///             <code>aws:kms</code>, this header specifies the ID of the AWS Key Management Service
    ///          (AWS KMS) symmetric customer managed customer master key (CMK) that was used for the
    ///          object. </p>
    public let sSEKMSKeyId: Swift.String?
    /// <p>If you specified server-side encryption either with an AWS KMS customer master key (CMK)
    ///          or Amazon S3-managed encryption key in your PUT request, the response includes this header. It
    ///          confirms the encryption algorithm that Amazon S3 used to encrypt the object.</p>
    public let serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// <p>Version of the object.</p>
    public let versionId: Swift.String?

    public init (
        bucketKeyEnabled: Swift.Bool = false,
        eTag: Swift.String? = nil,
        expiration: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        sSEKMSEncryptionContext: Swift.String? = nil,
        sSEKMSKeyId: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucketKeyEnabled = bucketKeyEnabled
        self.eTag = eTag
        self.expiration = expiration
        self.requestCharged = requestCharged
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.sSEKMSEncryptionContext = sSEKMSEncryptionContext
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
        self.versionId = versionId
    }
}

struct PutObjectOutputResponseBody: Swift.Equatable {
}

extension PutObjectOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutObjectRetentionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectRetentionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectRetentionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectRetentionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let retention = input.operationInput.retention {
            do {
                let encoder = context.getEncoder()
                let retentiondata = try encoder.encode(retention)
                let retentionbody = ClientRuntime.HttpBody.data(retentiondata)
                input.builder.withBody(retentionbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectRetentionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectRetentionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectRetentionOutputError>
}

extension PutObjectRetentionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectRetentionInput(bucket: \(Swift.String(describing: bucket)), bypassGovernanceRetention: \(Swift.String(describing: bypassGovernanceRetention)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), requestPayer: \(Swift.String(describing: requestPayer)), retention: \(Swift.String(describing: retention)), versionId: \(Swift.String(describing: versionId)))"}
}

extension PutObjectRetentionInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutObjectRetentionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retention = "Retention"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let retention = retention {
            try container.encode(retention, forKey: ClientRuntime.Key("Retention"))
        }
    }
}

public struct PutObjectRetentionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectRetentionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectRetentionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectRetentionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.bypassGovernanceRetention != false {
            input.builder.withHeader(name: "x-amz-bypass-governance-retention", value: Swift.String(input.operationInput.bypassGovernanceRetention))
        }
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectRetentionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectRetentionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectRetentionOutputError>
}

public struct PutObjectRetentionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectRetentionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectRetentionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectRetentionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "retention", value: nil))
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectRetentionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectRetentionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectRetentionOutputError>
}

public struct PutObjectRetentionInput: Swift.Equatable {
    /// <p>The bucket name that contains the object you want to apply this Object Retention
    ///          configuration to. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>Indicates whether this action should bypass Governance-mode restrictions.</p>
    public let bypassGovernanceRetention: Swift.Bool
    /// <p>The MD5 hash for the request body.</p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The key name for the object that you want to apply this Object Retention configuration
    ///          to.</p>
    public let key: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>The container element for the Object Retention configuration.</p>
    public let retention: S3ClientTypes.ObjectLockRetention?
    /// <p>The version ID for the object that you want to apply this Object Retention configuration
    ///          to.</p>
    public let versionId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        bypassGovernanceRetention: Swift.Bool = false,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        retention: S3ClientTypes.ObjectLockRetention? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.bypassGovernanceRetention = bypassGovernanceRetention
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.retention = retention
        self.versionId = versionId
    }
}

struct PutObjectRetentionInputBody: Swift.Equatable {
    public let retention: S3ClientTypes.ObjectLockRetention?
}

extension PutObjectRetentionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retention = "Retention"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let retentionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectLockRetention.self, forKey: .retention)
        retention = retentionDecoded
    }
}

extension PutObjectRetentionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutObjectRetentionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutObjectRetentionOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutObjectRetentionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectRetentionOutputResponse(requestCharged: \(Swift.String(describing: requestCharged)))"}
}

extension PutObjectRetentionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
    }
}

public struct PutObjectRetentionOutputResponse: Swift.Equatable {
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?

    public init (
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

struct PutObjectRetentionOutputResponseBody: Swift.Equatable {
}

extension PutObjectRetentionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutObjectTaggingInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectTaggingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectTaggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectTaggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let tagging = input.operationInput.tagging {
            do {
                let encoder = context.getEncoder()
                let taggingdata = try encoder.encode(tagging)
                let taggingbody = ClientRuntime.HttpBody.data(taggingdata)
                input.builder.withBody(taggingbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectTaggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectTaggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectTaggingOutputError>
}

extension PutObjectTaggingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectTaggingInput(bucket: \(Swift.String(describing: bucket)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), requestPayer: \(Swift.String(describing: requestPayer)), tagging: \(Swift.String(describing: tagging)), versionId: \(Swift.String(describing: versionId)))"}
}

extension PutObjectTaggingInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutObjectTaggingInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagging = "Tagging"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let tagging = tagging {
            try container.encode(tagging, forKey: ClientRuntime.Key("Tagging"))
        }
    }
}

public struct PutObjectTaggingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectTaggingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectTaggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectTaggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectTaggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectTaggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectTaggingOutputError>
}

public struct PutObjectTaggingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutObjectTaggingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutObjectTaggingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutObjectTaggingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "tagging", value: nil))
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutObjectTaggingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutObjectTaggingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutObjectTaggingOutputError>
}

public struct PutObjectTaggingInput: Swift.Equatable {
    /// <p>The bucket name containing the object. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The MD5 hash for the request body.</p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Name of the object key.</p>
    public let key: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>Container for the <code>TagSet</code> and <code>Tag</code> elements</p>
    public let tagging: S3ClientTypes.Tagging?
    /// <p>The versionId of the object that the tag-set will be added to.</p>
    public let versionId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        tagging: S3ClientTypes.Tagging? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.tagging = tagging
        self.versionId = versionId
    }
}

struct PutObjectTaggingInputBody: Swift.Equatable {
    public let tagging: S3ClientTypes.Tagging?
}

extension PutObjectTaggingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagging = "Tagging"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taggingDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tagging.self, forKey: .tagging)
        tagging = taggingDecoded
    }
}

extension PutObjectTaggingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutObjectTaggingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutObjectTaggingOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutObjectTaggingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectTaggingOutputResponse(versionId: \(Swift.String(describing: versionId)))"}
}

extension PutObjectTaggingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            self.versionId = versionIdHeaderValue
        } else {
            self.versionId = nil
        }
    }
}

public struct PutObjectTaggingOutputResponse: Swift.Equatable {
    /// <p>The versionId of the object the tag-set was added to.</p>
    public let versionId: Swift.String?

    public init (
        versionId: Swift.String? = nil
    )
    {
        self.versionId = versionId
    }
}

struct PutObjectTaggingOutputResponseBody: Swift.Equatable {
}

extension PutObjectTaggingOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutPublicAccessBlockInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutPublicAccessBlockInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutPublicAccessBlockInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutPublicAccessBlockOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let publicAccessBlockConfiguration = input.operationInput.publicAccessBlockConfiguration {
            do {
                let encoder = context.getEncoder()
                let publicAccessBlockConfigurationdata = try encoder.encode(publicAccessBlockConfiguration)
                let publicAccessBlockConfigurationbody = ClientRuntime.HttpBody.data(publicAccessBlockConfigurationdata)
                input.builder.withBody(publicAccessBlockConfigurationbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutPublicAccessBlockInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutPublicAccessBlockOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutPublicAccessBlockOutputError>
}

extension PutPublicAccessBlockInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutPublicAccessBlockInput(bucket: \(Swift.String(describing: bucket)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), publicAccessBlockConfiguration: \(Swift.String(describing: publicAccessBlockConfiguration)))"}
}

extension PutPublicAccessBlockInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension PutPublicAccessBlockInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case publicAccessBlockConfiguration = "PublicAccessBlockConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let publicAccessBlockConfiguration = publicAccessBlockConfiguration {
            try container.encode(publicAccessBlockConfiguration, forKey: ClientRuntime.Key("PublicAccessBlockConfiguration"))
        }
    }
}

public struct PutPublicAccessBlockInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutPublicAccessBlockInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutPublicAccessBlockInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutPublicAccessBlockOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutPublicAccessBlockInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutPublicAccessBlockOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutPublicAccessBlockOutputError>
}

public struct PutPublicAccessBlockInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutPublicAccessBlockInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutPublicAccessBlockInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutPublicAccessBlockOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "publicAccessBlock", value: nil))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutPublicAccessBlockInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutPublicAccessBlockOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutPublicAccessBlockOutputError>
}

public struct PutPublicAccessBlockInput: Swift.Equatable {
    /// <p>The name of the Amazon S3 bucket whose <code>PublicAccessBlock</code> configuration you want
    ///          to set.</p>
    public let bucket: Swift.String?
    /// <p>The MD5 hash of the <code>PutPublicAccessBlock</code> request body. </p>
    ///          <p>For requests made using the AWS Command Line Interface (CLI) or AWS SDKs, this field is calculated automatically.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The <code>PublicAccessBlock</code> configuration that you want to apply to this Amazon S3
    ///          bucket. You can enable the configuration options in any combination. For more information
    ///          about when Amazon S3 considers a bucket or object public, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The Meaning of "Public"</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration?

    public init (
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.publicAccessBlockConfiguration = publicAccessBlockConfiguration
    }
}

struct PutPublicAccessBlockInputBody: Swift.Equatable {
    public let publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration?
}

extension PutPublicAccessBlockInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case publicAccessBlockConfiguration = "PublicAccessBlockConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publicAccessBlockConfigurationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.PublicAccessBlockConfiguration.self, forKey: .publicAccessBlockConfiguration)
        publicAccessBlockConfiguration = publicAccessBlockConfigurationDecoded
    }
}

extension PutPublicAccessBlockOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutPublicAccessBlockOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutPublicAccessBlockOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutPublicAccessBlockOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutPublicAccessBlockOutputResponse()"}
}

extension PutPublicAccessBlockOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutPublicAccessBlockOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutPublicAccessBlockOutputResponseBody: Swift.Equatable {
}

extension PutPublicAccessBlockOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes.QueueConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Event"
        case filter = "Filter"
        case id = "Id"
        case queueArn = "Queue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let events = events {
            if events.isEmpty {
                var eventsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Event"))
                try eventsContainer.encodeNil()
            } else {
                for event0 in events {
                    var eventsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Event"))
                    try eventsContainer0.encode(event0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let filter = filter {
            try container.encode(filter, forKey: ClientRuntime.Key("Filter"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let queueArn = queueArn {
            try container.encode(queueArn, forKey: ClientRuntime.Key("Queue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let queueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueArn)
        queueArn = queueArnDecoded
        if containerValues.contains(.events) {
            let eventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .events)
            if eventsWrappedContainer != nil {
                let eventsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Event].self, forKey: .events)
                var eventsBuffer:[S3ClientTypes.Event]? = nil
                if let eventsContainer = eventsContainer {
                    eventsBuffer = [S3ClientTypes.Event]()
                    for stringContainer0 in eventsContainer {
                        eventsBuffer?.append(stringContainer0)
                    }
                }
                events = eventsBuffer
            } else {
                events = []
            }
        } else {
            events = nil
        }
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.NotificationConfigurationFilter.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension S3ClientTypes.QueueConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QueueConfiguration(events: \(Swift.String(describing: events)), filter: \(Swift.String(describing: filter)), id: \(Swift.String(describing: id)), queueArn: \(Swift.String(describing: queueArn)))"}
}

extension S3ClientTypes.QueueConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the configuration for publishing messages to an Amazon Simple Queue Service
    ///          (Amazon SQS) queue when Amazon S3 detects specified events.</p>
    public struct QueueConfiguration: Swift.Equatable {
        /// <p>A collection of bucket events for which to send notifications</p>
        public let events: [S3ClientTypes.Event]?
        /// <p>Specifies object key name filtering rules. For information about key name filtering, see
        ///             <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring
        ///             Event Notifications</a> in the <i>Amazon S3 User Guide</i>.</p>
        public let filter: S3ClientTypes.NotificationConfigurationFilter?
        /// <p>An optional unique identifier for configurations in a notification configuration. If you
        ///          don't provide one, Amazon S3 will assign an ID.</p>
        public let id: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message
        ///          when it detects events of the specified type.</p>
        public let queueArn: Swift.String?

        public init (
            events: [S3ClientTypes.Event]? = nil,
            filter: S3ClientTypes.NotificationConfigurationFilter? = nil,
            id: Swift.String? = nil,
            queueArn: Swift.String? = nil
        )
        {
            self.events = events
            self.filter = filter
            self.id = id
            self.queueArn = queueArn
        }
    }

}

extension S3ClientTypes {
    public enum QuoteFields: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case always
        case asneeded
        case sdkUnknown(Swift.String)

        public static var allCases: [QuoteFields] {
            return [
                .always,
                .asneeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .always: return "ALWAYS"
            case .asneeded: return "ASNEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QuoteFields(rawValue: rawValue) ?? QuoteFields.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.RecordsEvent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case payload = "Payload"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let payload = payload {
            try container.encode(payload, forKey: ClientRuntime.Key("Payload"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.payload) {
            do {
                let payloadDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .payload)
                payload = payloadDecoded
            } catch {
                payload = "".data(using: .utf8)
            }
        } else {
            payload = nil
        }
    }
}

extension S3ClientTypes.RecordsEvent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecordsEvent(payload: \(Swift.String(describing: payload)))"}
}

extension S3ClientTypes.RecordsEvent: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>The container for the records event.</p>
    public struct RecordsEvent: Swift.Equatable {
        /// <p>The byte array of partial, one or more result records.</p>
        public let payload: ClientRuntime.Data?

        public init (
            payload: ClientRuntime.Data? = nil
        )
        {
            self.payload = payload
        }
    }

}

extension S3ClientTypes.Redirect: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostName = "HostName"
        case httpRedirectCode = "HttpRedirectCode"
        case `protocol` = "Protocol"
        case replaceKeyPrefixWith = "ReplaceKeyPrefixWith"
        case replaceKeyWith = "ReplaceKeyWith"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let hostName = hostName {
            try container.encode(hostName, forKey: ClientRuntime.Key("HostName"))
        }
        if let httpRedirectCode = httpRedirectCode {
            try container.encode(httpRedirectCode, forKey: ClientRuntime.Key("HttpRedirectCode"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
        if let replaceKeyPrefixWith = replaceKeyPrefixWith {
            try container.encode(replaceKeyPrefixWith, forKey: ClientRuntime.Key("ReplaceKeyPrefixWith"))
        }
        if let replaceKeyWith = replaceKeyWith {
            try container.encode(replaceKeyWith, forKey: ClientRuntime.Key("ReplaceKeyWith"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostName)
        hostName = hostNameDecoded
        let httpRedirectCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .httpRedirectCode)
        httpRedirectCode = httpRedirectCodeDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ModelProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let replaceKeyPrefixWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replaceKeyPrefixWith)
        replaceKeyPrefixWith = replaceKeyPrefixWithDecoded
        let replaceKeyWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replaceKeyWith)
        replaceKeyWith = replaceKeyWithDecoded
    }
}

extension S3ClientTypes.Redirect: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Redirect(hostName: \(Swift.String(describing: hostName)), httpRedirectCode: \(Swift.String(describing: httpRedirectCode)), protocol: \(Swift.String(describing: `protocol`)), replaceKeyPrefixWith: \(Swift.String(describing: replaceKeyPrefixWith)), replaceKeyWith: \(Swift.String(describing: replaceKeyWith)))"}
}

extension S3ClientTypes.Redirect: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies how requests are redirected. In the event of an error, you can specify a
    ///          different error code to return.</p>
    public struct Redirect: Swift.Equatable {
        /// <p>Protocol to use when redirecting requests. The default is the protocol that is used in
        ///          the original request.</p>
        public let `protocol`: S3ClientTypes.ModelProtocol?
        /// <p>The host name to use in the redirect request.</p>
        public let hostName: Swift.String?
        /// <p>The HTTP redirect code to use on the response. Not required if one of the siblings is
        ///          present.</p>
        public let httpRedirectCode: Swift.String?
        /// <p>The object key prefix to use in the redirect request. For example, to redirect requests
        ///          for all pages with prefix <code>docs/</code> (objects in the <code>docs/</code> folder) to
        ///             <code>documents/</code>, you can set a condition block with <code>KeyPrefixEquals</code>
        ///          set to <code>docs/</code> and in the Redirect set <code>ReplaceKeyPrefixWith</code> to
        ///             <code>/documents</code>. Not required if one of the siblings is present. Can be present
        ///          only if <code>ReplaceKeyWith</code> is not provided.</p>
        ///          <important>
        ///             <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using
        ///          XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
        ///             XML related object key constraints</a>.</p>
        ///          </important>
        public let replaceKeyPrefixWith: Swift.String?
        /// <p>The specific object key to use in the redirect request. For example, redirect request to
        ///             <code>error.html</code>. Not required if one of the siblings is present. Can be present
        ///          only if <code>ReplaceKeyPrefixWith</code> is not provided.</p>
        ///          <important>
        ///             <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using
        ///          XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
        ///             XML related object key constraints</a>.</p>
        ///          </important>
        public let replaceKeyWith: Swift.String?

        public init (
            `protocol`: S3ClientTypes.ModelProtocol? = nil,
            hostName: Swift.String? = nil,
            httpRedirectCode: Swift.String? = nil,
            replaceKeyPrefixWith: Swift.String? = nil,
            replaceKeyWith: Swift.String? = nil
        )
        {
            self.`protocol` = `protocol`
            self.hostName = hostName
            self.httpRedirectCode = httpRedirectCode
            self.replaceKeyPrefixWith = replaceKeyPrefixWith
            self.replaceKeyWith = replaceKeyWith
        }
    }

}

extension S3ClientTypes.RedirectAllRequestsTo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostName = "HostName"
        case `protocol` = "Protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let hostName = hostName {
            try container.encode(hostName, forKey: ClientRuntime.Key("HostName"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostName)
        hostName = hostNameDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ModelProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}

extension S3ClientTypes.RedirectAllRequestsTo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RedirectAllRequestsTo(hostName: \(Swift.String(describing: hostName)), protocol: \(Swift.String(describing: `protocol`)))"}
}

extension S3ClientTypes.RedirectAllRequestsTo: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3
    ///          bucket.</p>
    public struct RedirectAllRequestsTo: Swift.Equatable {
        /// <p>Protocol to use when redirecting requests. The default is the protocol that is used in
        ///          the original request.</p>
        public let `protocol`: S3ClientTypes.ModelProtocol?
        /// <p>Name of the host where requests are redirected.</p>
        public let hostName: Swift.String?

        public init (
            `protocol`: S3ClientTypes.ModelProtocol? = nil,
            hostName: Swift.String? = nil
        )
        {
            self.`protocol` = `protocol`
            self.hostName = hostName
        }
    }

}

extension S3ClientTypes.ReplicaModifications: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicaModificationsStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension S3ClientTypes.ReplicaModifications: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReplicaModifications(status: \(Swift.String(describing: status)))"}
}

extension S3ClientTypes.ReplicaModifications: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A filter that you can specify for selection for modifications on replicas. Amazon S3 doesn't
    ///          replicate replica modifications by default. In the latest version of replication
    ///          configuration (when <code>Filter</code> is specified), you can specify this element and set
    ///          the status to <code>Enabled</code> to replicate modifications on replicas. </p>
    ///          <note>
    ///             <p> If you don't specify the <code>Filter</code> element, Amazon S3 assumes that the
    ///             replication configuration is the earlier version, V1. In the earlier version, this
    ///             element is not allowed.</p>
    ///          </note>
    public struct ReplicaModifications: Swift.Equatable {
        /// <p>Specifies whether Amazon S3 replicates modifications on replicas.</p>
        public let status: S3ClientTypes.ReplicaModificationsStatus?

        public init (
            status: S3ClientTypes.ReplicaModificationsStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension S3ClientTypes {
    public enum ReplicaModificationsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicaModificationsStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReplicaModificationsStatus(rawValue: rawValue) ?? ReplicaModificationsStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ReplicationConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case role = "Role"
        case rules = "Rule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let role = role {
            try container.encode(role, forKey: ClientRuntime.Key("Role"))
        }
        if let rules = rules {
            if rules.isEmpty {
                var rulesContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Rule"))
                try rulesContainer.encodeNil()
            } else {
                for replicationrule0 in rules {
                    var rulesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Rule"))
                    try rulesContainer0.encode(replicationrule0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        if containerValues.contains(.rules) {
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .rules)
            if rulesWrappedContainer != nil {
                let rulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.ReplicationRule].self, forKey: .rules)
                var rulesBuffer:[S3ClientTypes.ReplicationRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [S3ClientTypes.ReplicationRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}

extension S3ClientTypes.ReplicationConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReplicationConfiguration(role: \(Swift.String(describing: role)), rules: \(Swift.String(describing: rules)))"}
}

extension S3ClientTypes.ReplicationConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A container for replication rules. You can add up to 1,000 rules. The maximum size of a
    ///          replication configuration is 2 MB.</p>
    public struct ReplicationConfiguration: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that
        ///          Amazon S3 assumes when replicating objects. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html">How to Set Up
        ///             Replication</a> in the <i>Amazon S3 User Guide</i>.</p>
        public let role: Swift.String?
        /// <p>A container for one or more replication rules. A replication configuration must have at
        ///          least one rule and can contain a maximum of 1,000 rules. </p>
        public let rules: [S3ClientTypes.ReplicationRule]?

        public init (
            role: Swift.String? = nil,
            rules: [S3ClientTypes.ReplicationRule]? = nil
        )
        {
            self.role = role
            self.rules = rules
        }
    }

}

extension S3ClientTypes.ReplicationRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteMarkerReplication = "DeleteMarkerReplication"
        case destination = "Destination"
        case existingObjectReplication = "ExistingObjectReplication"
        case filter = "Filter"
        case iD = "ID"
        case prefix = "Prefix"
        case priority = "Priority"
        case sourceSelectionCriteria = "SourceSelectionCriteria"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let deleteMarkerReplication = deleteMarkerReplication {
            try container.encode(deleteMarkerReplication, forKey: ClientRuntime.Key("DeleteMarkerReplication"))
        }
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let existingObjectReplication = existingObjectReplication {
            try container.encode(existingObjectReplication, forKey: ClientRuntime.Key("ExistingObjectReplication"))
        }
        if let filter = filter {
            try container.encode(filter, forKey: ClientRuntime.Key("Filter"))
        }
        if let iD = iD {
            try container.encode(iD, forKey: ClientRuntime.Key("ID"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
        }
        if priority != 0 {
            try container.encode(priority, forKey: ClientRuntime.Key("Priority"))
        }
        if let sourceSelectionCriteria = sourceSelectionCriteria {
            try container.encode(sourceSelectionCriteria, forKey: ClientRuntime.Key("SourceSelectionCriteria"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iD)
        iD = iDDecoded
        let priorityDecoded = try containerValues.decode(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationRuleFilter.self, forKey: .filter)
        filter = filterDecoded
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationRuleStatus.self, forKey: .status)
        status = statusDecoded
        let sourceSelectionCriteriaDecoded = try containerValues.decodeIfPresent(S3ClientTypes.SourceSelectionCriteria.self, forKey: .sourceSelectionCriteria)
        sourceSelectionCriteria = sourceSelectionCriteriaDecoded
        let existingObjectReplicationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ExistingObjectReplication.self, forKey: .existingObjectReplication)
        existingObjectReplication = existingObjectReplicationDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
        let deleteMarkerReplicationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.DeleteMarkerReplication.self, forKey: .deleteMarkerReplication)
        deleteMarkerReplication = deleteMarkerReplicationDecoded
    }
}

extension S3ClientTypes.ReplicationRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReplicationRule(deleteMarkerReplication: \(Swift.String(describing: deleteMarkerReplication)), destination: \(Swift.String(describing: destination)), existingObjectReplication: \(Swift.String(describing: existingObjectReplication)), filter: \(Swift.String(describing: filter)), iD: \(Swift.String(describing: iD)), prefix: \(Swift.String(describing: prefix)), priority: \(Swift.String(describing: priority)), sourceSelectionCriteria: \(Swift.String(describing: sourceSelectionCriteria)), status: \(Swift.String(describing: status)))"}
}

extension S3ClientTypes.ReplicationRule: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies which Amazon S3 objects to replicate and where to store the replicas.</p>
    public struct ReplicationRule: Swift.Equatable {
        /// <p>Specifies whether Amazon S3 replicates delete markers. If you specify a <code>Filter</code>
        ///          in your replication configuration, you must also include a
        ///             <code>DeleteMarkerReplication</code> element. If your <code>Filter</code> includes a
        ///             <code>Tag</code> element, the <code>DeleteMarkerReplication</code>
        ///             <code>Status</code> must be set to Disabled, because Amazon S3 does not support replicating
        ///          delete markers for tag-based rules. For an example configuration, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config">Basic Rule Configuration</a>. </p>
        ///          <p>For more information about delete marker replication, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html">Basic Rule
        ///             Configuration</a>. </p>
        ///          <note>
        ///             <p>If you are using an earlier version of the replication configuration, Amazon S3 handles
        ///             replication of delete markers differently. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations">Backward Compatibility</a>.</p>
        ///          </note>
        public let deleteMarkerReplication: S3ClientTypes.DeleteMarkerReplication?
        /// <p>A container for information about the replication destination and its configurations
        ///          including enabling the S3 Replication Time Control (S3 RTC).</p>
        public let destination: S3ClientTypes.Destination?
        /// <p></p>
        public let existingObjectReplication: S3ClientTypes.ExistingObjectReplication?
        /// <p>A filter that identifies the subset of objects to which the replication rule applies. A
        ///             <code>Filter</code> must specify exactly one <code>Prefix</code>, <code>Tag</code>, or
        ///          an <code>And</code> child element.</p>
        public let filter: S3ClientTypes.ReplicationRuleFilter?
        /// <p>A unique identifier for the rule. The maximum value is 255 characters.</p>
        public let iD: Swift.String?
        /// <p>An object key name prefix that identifies the object or objects to which the rule
        ///          applies. The maximum prefix length is 1,024 characters. To include all objects in a bucket,
        ///          specify an empty string. </p>
        ///          <important>
        ///             <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using
        ///          XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
        ///             XML related object key constraints</a>.</p>
        ///          </important>
        @available(*, deprecated)
        public let prefix: Swift.String?
        /// <p>The priority indicates which rule has precedence whenever two or more replication rules
        ///          conflict. Amazon S3 will attempt to replicate objects according to all replication rules.
        ///          However, if there are two or more rules with the same destination bucket, then objects will
        ///          be replicated according to the rule with the highest priority. The higher the number, the
        ///          higher the priority. </p>
        ///          <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html">Replication</a> in the
        ///             <i>Amazon S3 User Guide</i>.</p>
        public let priority: Swift.Int
        /// <p>A container that describes additional filters for identifying the source objects that
        ///          you want to replicate. You can choose to enable or disable the replication of these
        ///          objects. Currently, Amazon S3 supports only the filter that you can specify for objects created
        ///          with server-side encryption using a customer master key (CMK) stored in AWS Key Management
        ///          Service (SSE-KMS).</p>
        public let sourceSelectionCriteria: S3ClientTypes.SourceSelectionCriteria?
        /// <p>Specifies whether the rule is enabled.</p>
        public let status: S3ClientTypes.ReplicationRuleStatus?

        public init (
            deleteMarkerReplication: S3ClientTypes.DeleteMarkerReplication? = nil,
            destination: S3ClientTypes.Destination? = nil,
            existingObjectReplication: S3ClientTypes.ExistingObjectReplication? = nil,
            filter: S3ClientTypes.ReplicationRuleFilter? = nil,
            iD: Swift.String? = nil,
            prefix: Swift.String? = nil,
            priority: Swift.Int = 0,
            sourceSelectionCriteria: S3ClientTypes.SourceSelectionCriteria? = nil,
            status: S3ClientTypes.ReplicationRuleStatus? = nil
        )
        {
            self.deleteMarkerReplication = deleteMarkerReplication
            self.destination = destination
            self.existingObjectReplication = existingObjectReplication
            self.filter = filter
            self.iD = iD
            self.prefix = prefix
            self.priority = priority
            self.sourceSelectionCriteria = sourceSelectionCriteria
            self.status = status
        }
    }

}

extension S3ClientTypes.ReplicationRuleAndOperator: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case prefix = "Prefix"
        case tags = "Tag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
        }
        if let tags = tags {
            if tags.isEmpty {
                var tagsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Tag"))
                try tagsContainer.encodeNil()
            } else {
                for tag0 in tags {
                    var tagsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tag"))
                    try tagsContainer0.encode(tag0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        if containerValues.contains(.tags) {
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .tags)
            if tagsWrappedContainer != nil {
                let tagsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .tags)
                var tagsBuffer:[S3ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension S3ClientTypes.ReplicationRuleAndOperator: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReplicationRuleAndOperator(prefix: \(Swift.String(describing: prefix)), tags: \(Swift.String(describing: tags)))"}
}

extension S3ClientTypes.ReplicationRuleAndOperator: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A container for specifying rule filters. The filters determine the subset of objects to
    ///          which the rule applies. This element is required only if you specify more than one filter. </p>
    ///          <p>For example:</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you specify both a <code>Prefix</code> and a <code>Tag</code> filter, wrap
    ///                these filters in an <code>And</code> tag. </p>
    ///             </li>
    ///             <li>
    ///                <p>If you specify a filter based on multiple tags, wrap the <code>Tag</code> elements
    ///                in an <code>And</code> tag.</p>
    ///             </li>
    ///          </ul>
    public struct ReplicationRuleAndOperator: Swift.Equatable {
        /// <p>An object key name prefix that identifies the subset of objects to which the rule
        ///          applies.</p>
        public let prefix: Swift.String?
        /// <p>An array of tags containing key and value pairs.</p>
        public let tags: [S3ClientTypes.Tag]?

        public init (
            prefix: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.prefix = prefix
            self.tags = tags
        }
    }

}

extension S3ClientTypes.ReplicationRuleFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case and = "And"
        case prefix = "Prefix"
        case tag = "Tag"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        switch self {
            case let .and(and):
                try container.encode(and, forKey: ClientRuntime.Key("And"))
            case let .prefix(prefix):
                try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
            case let .tag(tag):
                try container.encode(tag, forKey: ClientRuntime.Key("Tag"))
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: ClientRuntime.Key("sdkUnknown"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        if let prefix = prefixDecoded {
            self = .prefix(prefix)
            return
        }
        let tagDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tag.self, forKey: .tag)
        if let tag = tagDecoded {
            self = .tag(tag)
            return
        }
        let andDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationRuleAndOperator.self, forKey: .and)
        if let and = andDecoded {
            self = .and(and)
            return
        }
        self = .sdkUnknown("")
    }
}

extension S3ClientTypes {
    /// <p>A filter that identifies the subset of objects to which the replication rule applies. A
    ///             <code>Filter</code> must specify exactly one <code>Prefix</code>, <code>Tag</code>, or
    ///          an <code>And</code> child element.</p>
    public enum ReplicationRuleFilter: Swift.Equatable {
        /// <p>An object key name prefix that identifies the subset of objects to which the rule
        ///          applies.</p>
        ///          <important>
        ///             <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using
        ///          XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
        ///             XML related object key constraints</a>.</p>
        ///          </important>
        case prefix(Swift.String)
        /// <p>A container for specifying a tag key and value. </p>
        ///          <p>The rule applies only to objects that have the tag in their tag set.</p>
        case tag(S3ClientTypes.Tag)
        /// <p>A container for specifying rule filters. The filters determine the subset of objects to
        ///          which the rule applies. This element is required only if you specify more than one filter.
        ///          For example: </p>
        ///          <ul>
        ///             <li>
        ///                <p>If you specify both a <code>Prefix</code> and a <code>Tag</code> filter, wrap
        ///                these filters in an <code>And</code> tag.</p>
        ///             </li>
        ///             <li>
        ///                <p>If you specify a filter based on multiple tags, wrap the <code>Tag</code> elements
        ///                in an <code>And</code> tag.</p>
        ///             </li>
        ///          </ul>
        case and(S3ClientTypes.ReplicationRuleAndOperator)
        case sdkUnknown(Swift.String)
    }

}

extension S3ClientTypes {
    public enum ReplicationRuleStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicationRuleStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReplicationRuleStatus(rawValue: rawValue) ?? ReplicationRuleStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ReplicationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case failed
        case pending
        case replica
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicationStatus] {
            return [
                .complete,
                .failed,
                .pending,
                .replica,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .replica: return "REPLICA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReplicationStatus(rawValue: rawValue) ?? ReplicationStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ReplicationTime: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case time = "Time"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let time = time {
            try container.encode(time, forKey: ClientRuntime.Key("Time"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationTimeStatus.self, forKey: .status)
        status = statusDecoded
        let timeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicationTimeValue.self, forKey: .time)
        time = timeDecoded
    }
}

extension S3ClientTypes.ReplicationTime: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReplicationTime(status: \(Swift.String(describing: status)), time: \(Swift.String(describing: time)))"}
}

extension S3ClientTypes.ReplicationTime: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p> A container specifying S3 Replication Time Control (S3 RTC) related information, including whether S3 RTC is
    ///          enabled and the time when all objects and operations on objects must be replicated. Must be
    ///          specified together with a <code>Metrics</code> block. </p>
    public struct ReplicationTime: Swift.Equatable {
        /// <p> Specifies whether the replication time is enabled. </p>
        public let status: S3ClientTypes.ReplicationTimeStatus?
        /// <p> A container specifying the time by which replication should be complete for all objects
        ///          and operations on objects. </p>
        public let time: S3ClientTypes.ReplicationTimeValue?

        public init (
            status: S3ClientTypes.ReplicationTimeStatus? = nil,
            time: S3ClientTypes.ReplicationTimeValue? = nil
        )
        {
            self.status = status
            self.time = time
        }
    }

}

extension S3ClientTypes {
    public enum ReplicationTimeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicationTimeStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReplicationTimeStatus(rawValue: rawValue) ?? ReplicationTimeStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ReplicationTimeValue: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case minutes = "Minutes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if minutes != 0 {
            try container.encode(minutes, forKey: ClientRuntime.Key("Minutes"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minutesDecoded = try containerValues.decode(Swift.Int.self, forKey: .minutes)
        minutes = minutesDecoded
    }
}

extension S3ClientTypes.ReplicationTimeValue: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReplicationTimeValue(minutes: \(Swift.String(describing: minutes)))"}
}

extension S3ClientTypes.ReplicationTimeValue: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p> A container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics
    ///             <code>EventThreshold</code>. </p>
    public struct ReplicationTimeValue: Swift.Equatable {
        /// <p> Contains an integer specifying time in minutes. </p>
        ///          <p> Valid values: 15 minutes. </p>
        public let minutes: Swift.Int

        public init (
            minutes: Swift.Int = 0
        )
        {
            self.minutes = minutes
        }
    }

}

extension S3ClientTypes {
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public enum RequestCharged: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case requester
        case sdkUnknown(Swift.String)

        public static var allCases: [RequestCharged] {
            return [
                .requester,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .requester: return "requester"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RequestCharged(rawValue: rawValue) ?? RequestCharged.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public enum RequestPayer: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case requester
        case sdkUnknown(Swift.String)

        public static var allCases: [RequestPayer] {
            return [
                .requester,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .requester: return "requester"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RequestPayer(rawValue: rawValue) ?? RequestPayer.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.RequestPaymentConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case payer = "Payer"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let payer = payer {
            try container.encode(payer, forKey: ClientRuntime.Key("Payer"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let payerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Payer.self, forKey: .payer)
        payer = payerDecoded
    }
}

extension S3ClientTypes.RequestPaymentConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RequestPaymentConfiguration(payer: \(Swift.String(describing: payer)))"}
}

extension S3ClientTypes.RequestPaymentConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for Payer.</p>
    public struct RequestPaymentConfiguration: Swift.Equatable {
        /// <p>Specifies who pays for the download and request fees.</p>
        public let payer: S3ClientTypes.Payer?

        public init (
            payer: S3ClientTypes.Payer? = nil
        )
        {
            self.payer = payer
        }
    }

}

extension S3ClientTypes.RequestProgress: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension S3ClientTypes.RequestProgress: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RequestProgress(enabled: \(Swift.String(describing: enabled)))"}
}

extension S3ClientTypes.RequestProgress: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for specifying if periodic <code>QueryProgress</code> messages should be
    ///          sent.</p>
    public struct RequestProgress: Swift.Equatable {
        /// <p>Specifies whether periodic QueryProgress frames should be sent. Valid values: TRUE,
        ///          FALSE. Default value: FALSE.</p>
        public let enabled: Swift.Bool

        public init (
            enabled: Swift.Bool = false
        )
        {
            self.enabled = enabled
        }
    }

}

public struct RestoreObjectInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RestoreObjectInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RestoreObjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RestoreObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let restoreRequest = input.operationInput.restoreRequest {
            do {
                let encoder = context.getEncoder()
                let restoreRequestdata = try encoder.encode(restoreRequest)
                let restoreRequestbody = ClientRuntime.HttpBody.data(restoreRequestdata)
                input.builder.withBody(restoreRequestbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RestoreObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RestoreObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RestoreObjectOutputError>
}

extension RestoreObjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RestoreObjectInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), requestPayer: \(Swift.String(describing: requestPayer)), restoreRequest: \(Swift.String(describing: restoreRequest)), versionId: \(Swift.String(describing: versionId)))"}
}

extension RestoreObjectInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension RestoreObjectInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case restoreRequest = "RestoreRequest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let restoreRequest = restoreRequest {
            try container.encode(restoreRequest, forKey: ClientRuntime.Key("RestoreRequest"))
        }
    }
}

public struct RestoreObjectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RestoreObjectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RestoreObjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RestoreObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RestoreObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RestoreObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RestoreObjectOutputError>
}

public struct RestoreObjectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RestoreObjectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RestoreObjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RestoreObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "restore", value: nil))
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "RestoreObject"))
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RestoreObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RestoreObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RestoreObjectOutputError>
}

public struct RestoreObjectInput: Swift.Equatable {
    /// <p>The bucket name containing the object to restore. </p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Object key for which the action was initiated.</p>
    public let key: Swift.String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>Container for restore job parameters.</p>
    public let restoreRequest: S3ClientTypes.RestoreRequest?
    /// <p>VersionId used to reference a specific version of the object.</p>
    public let versionId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        restoreRequest: S3ClientTypes.RestoreRequest? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.restoreRequest = restoreRequest
        self.versionId = versionId
    }
}

struct RestoreObjectInputBody: Swift.Equatable {
    public let restoreRequest: S3ClientTypes.RestoreRequest?
}

extension RestoreObjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case restoreRequest = "RestoreRequest"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let restoreRequestDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RestoreRequest.self, forKey: .restoreRequest)
        restoreRequest = restoreRequestDecoded
    }
}

extension RestoreObjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RestoreObjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ObjectAlreadyInActiveTierError" : self = .objectAlreadyInActiveTierError(try ObjectAlreadyInActiveTierError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RestoreObjectOutputError: Swift.Error, Swift.Equatable {
    case objectAlreadyInActiveTierError(ObjectAlreadyInActiveTierError)
    case unknown(UnknownAWSHttpServiceError)
}

extension RestoreObjectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RestoreObjectOutputResponse(requestCharged: \(Swift.String(describing: requestCharged)), restoreOutputPath: \(Swift.String(describing: restoreOutputPath)))"}
}

extension RestoreObjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let restoreOutputPathHeaderValue = httpResponse.headers.value(for: "x-amz-restore-output-path") {
            self.restoreOutputPath = restoreOutputPathHeaderValue
        } else {
            self.restoreOutputPath = nil
        }
    }
}

public struct RestoreObjectOutputResponse: Swift.Equatable {
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?
    /// <p>Indicates the path in the provided S3 output location where Select results will be
    ///          restored to.</p>
    public let restoreOutputPath: Swift.String?

    public init (
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        restoreOutputPath: Swift.String? = nil
    )
    {
        self.requestCharged = requestCharged
        self.restoreOutputPath = restoreOutputPath
    }
}

struct RestoreObjectOutputResponseBody: Swift.Equatable {
}

extension RestoreObjectOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes.RestoreRequest: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case days = "Days"
        case description = "Description"
        case glacierJobParameters = "GlacierJobParameters"
        case outputLocation = "OutputLocation"
        case selectParameters = "SelectParameters"
        case tier = "Tier"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if days != 0 {
            try container.encode(days, forKey: ClientRuntime.Key("Days"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let glacierJobParameters = glacierJobParameters {
            try container.encode(glacierJobParameters, forKey: ClientRuntime.Key("GlacierJobParameters"))
        }
        if let outputLocation = outputLocation {
            try container.encode(outputLocation, forKey: ClientRuntime.Key("OutputLocation"))
        }
        if let selectParameters = selectParameters {
            try container.encode(selectParameters, forKey: ClientRuntime.Key("SelectParameters"))
        }
        if let tier = tier {
            try container.encode(tier, forKey: ClientRuntime.Key("Tier"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let daysDecoded = try containerValues.decode(Swift.Int.self, forKey: .days)
        days = daysDecoded
        let glacierJobParametersDecoded = try containerValues.decodeIfPresent(S3ClientTypes.GlacierJobParameters.self, forKey: .glacierJobParameters)
        glacierJobParameters = glacierJobParametersDecoded
        let typeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RestoreRequestType.self, forKey: .type)
        type = typeDecoded
        let tierDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tier.self, forKey: .tier)
        tier = tierDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let selectParametersDecoded = try containerValues.decodeIfPresent(S3ClientTypes.SelectParameters.self, forKey: .selectParameters)
        selectParameters = selectParametersDecoded
        let outputLocationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.OutputLocation.self, forKey: .outputLocation)
        outputLocation = outputLocationDecoded
    }
}

extension S3ClientTypes.RestoreRequest: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RestoreRequest(days: \(Swift.String(describing: days)), description: \(Swift.String(describing: description)), glacierJobParameters: \(Swift.String(describing: glacierJobParameters)), outputLocation: \(Swift.String(describing: outputLocation)), selectParameters: \(Swift.String(describing: selectParameters)), tier: \(Swift.String(describing: tier)), type: \(Swift.String(describing: type)))"}
}

extension S3ClientTypes.RestoreRequest: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for restore job parameters.</p>
    public struct RestoreRequest: Swift.Equatable {
        /// <p>Lifetime of the active copy in days. Do not use with restores that specify
        ///             <code>OutputLocation</code>.</p>
        ///          <p>The Days element is required for regular restores, and must not be provided for select
        ///          requests.</p>
        public let days: Swift.Int
        /// <p>The optional description for the job.</p>
        public let description: Swift.String?
        /// <p>S3 Glacier related parameters pertaining to this job. Do not use with restores that
        ///          specify <code>OutputLocation</code>.</p>
        public let glacierJobParameters: S3ClientTypes.GlacierJobParameters?
        /// <p>Describes the location where the restore job's output is stored.</p>
        public let outputLocation: S3ClientTypes.OutputLocation?
        /// <p>Describes the parameters for Select job types.</p>
        public let selectParameters: S3ClientTypes.SelectParameters?
        /// <p>Retrieval tier at which the restore will be processed.</p>
        public let tier: S3ClientTypes.Tier?
        /// <p>Type of restore request.</p>
        public let type: S3ClientTypes.RestoreRequestType?

        public init (
            days: Swift.Int = 0,
            description: Swift.String? = nil,
            glacierJobParameters: S3ClientTypes.GlacierJobParameters? = nil,
            outputLocation: S3ClientTypes.OutputLocation? = nil,
            selectParameters: S3ClientTypes.SelectParameters? = nil,
            tier: S3ClientTypes.Tier? = nil,
            type: S3ClientTypes.RestoreRequestType? = nil
        )
        {
            self.days = days
            self.description = description
            self.glacierJobParameters = glacierJobParameters
            self.outputLocation = outputLocation
            self.selectParameters = selectParameters
            self.tier = tier
            self.type = type
        }
    }

}

extension S3ClientTypes {
    public enum RestoreRequestType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case select
        case sdkUnknown(Swift.String)

        public static var allCases: [RestoreRequestType] {
            return [
                .select,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .select: return "SELECT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RestoreRequestType(rawValue: rawValue) ?? RestoreRequestType.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.RoutingRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case condition = "Condition"
        case redirect = "Redirect"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let condition = condition {
            try container.encode(condition, forKey: ClientRuntime.Key("Condition"))
        }
        if let redirect = redirect {
            try container.encode(redirect, forKey: ClientRuntime.Key("Redirect"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Condition.self, forKey: .condition)
        condition = conditionDecoded
        let redirectDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Redirect.self, forKey: .redirect)
        redirect = redirectDecoded
    }
}

extension S3ClientTypes.RoutingRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RoutingRule(condition: \(Swift.String(describing: condition)), redirect: \(Swift.String(describing: redirect)))"}
}

extension S3ClientTypes.RoutingRule: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the redirect behavior and when a redirect is applied. For more information
    ///          about routing rules, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects">Configuring advanced conditional redirects</a> in the
    ///             <i>Amazon S3 User Guide</i>.</p>
    public struct RoutingRule: Swift.Equatable {
        /// <p>A container for describing a condition that must be met for the specified redirect to
        ///          apply. For example, 1. If request is for pages in the <code>/docs</code> folder, redirect
        ///          to the <code>/documents</code> folder. 2. If request results in HTTP error 4xx, redirect
        ///          request to another host where you might process the error.</p>
        public let condition: S3ClientTypes.Condition?
        /// <p>Container for redirect information. You can redirect requests to another host, to
        ///          another page, or with another protocol. In the event of an error, you can specify a
        ///          different error code to return.</p>
        public let redirect: S3ClientTypes.Redirect?

        public init (
            condition: S3ClientTypes.Condition? = nil,
            redirect: S3ClientTypes.Redirect? = nil
        )
        {
            self.condition = condition
            self.redirect = redirect
        }
    }

}

extension S3ClientTypes.S3KeyFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterRules = "FilterRule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let filterRules = filterRules {
            if filterRules.isEmpty {
                var filterRulesContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("FilterRule"))
                try filterRulesContainer.encodeNil()
            } else {
                for filterrule0 in filterRules {
                    var filterRulesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("FilterRule"))
                    try filterRulesContainer0.encode(filterrule0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.filterRules) {
            let filterRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .filterRules)
            if filterRulesWrappedContainer != nil {
                let filterRulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.FilterRule].self, forKey: .filterRules)
                var filterRulesBuffer:[S3ClientTypes.FilterRule]? = nil
                if let filterRulesContainer = filterRulesContainer {
                    filterRulesBuffer = [S3ClientTypes.FilterRule]()
                    for structureContainer0 in filterRulesContainer {
                        filterRulesBuffer?.append(structureContainer0)
                    }
                }
                filterRules = filterRulesBuffer
            } else {
                filterRules = []
            }
        } else {
            filterRules = nil
        }
    }
}

extension S3ClientTypes.S3KeyFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "S3KeyFilter(filterRules: \(Swift.String(describing: filterRules)))"}
}

extension S3ClientTypes.S3KeyFilter: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A container for object key name prefix and suffix filtering rules.</p>
    public struct S3KeyFilter: Swift.Equatable {
        /// <p>A list of containers for the key-value pair that defines the criteria for the filter
        ///          rule.</p>
        public let filterRules: [S3ClientTypes.FilterRule]?

        public init (
            filterRules: [S3ClientTypes.FilterRule]? = nil
        )
        {
            self.filterRules = filterRules
        }
    }

}

extension S3ClientTypes.S3Location: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlList = "AccessControlList"
        case bucketName = "BucketName"
        case cannedACL = "CannedACL"
        case encryption = "Encryption"
        case prefix = "Prefix"
        case storageClass = "StorageClass"
        case tagging = "Tagging"
        case userMetadata = "UserMetadata"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let accessControlList = accessControlList {
            var accessControlListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AccessControlList"))
            for grant0 in accessControlList {
                try accessControlListContainer.encode(grant0, forKey: ClientRuntime.Key("Grant"))
            }
        }
        if let bucketName = bucketName {
            try container.encode(bucketName, forKey: ClientRuntime.Key("BucketName"))
        }
        if let cannedACL = cannedACL {
            try container.encode(cannedACL, forKey: ClientRuntime.Key("CannedACL"))
        }
        if let encryption = encryption {
            try container.encode(encryption, forKey: ClientRuntime.Key("Encryption"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: ClientRuntime.Key("Prefix"))
        }
        if let storageClass = storageClass {
            try container.encode(storageClass, forKey: ClientRuntime.Key("StorageClass"))
        }
        if let tagging = tagging {
            try container.encode(tagging, forKey: ClientRuntime.Key("Tagging"))
        }
        if let userMetadata = userMetadata {
            var userMetadataContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserMetadata"))
            for metadataentry0 in userMetadata {
                try userMetadataContainer.encode(metadataentry0, forKey: ClientRuntime.Key("MetadataEntry"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Encryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let cannedACLDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectCannedACL.self, forKey: .cannedACL)
        cannedACL = cannedACLDecoded
        if containerValues.contains(.accessControlList) {
            struct KeyVal0{struct Grant{}}
            let accessControlListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Grant>.CodingKeys.self, forKey: .accessControlList)
            if let accessControlListWrappedContainer = accessControlListWrappedContainer {
                let accessControlListContainer = try accessControlListWrappedContainer.decodeIfPresent([S3ClientTypes.Grant].self, forKey: .member)
                var accessControlListBuffer:[S3ClientTypes.Grant]? = nil
                if let accessControlListContainer = accessControlListContainer {
                    accessControlListBuffer = [S3ClientTypes.Grant]()
                    for structureContainer0 in accessControlListContainer {
                        accessControlListBuffer?.append(structureContainer0)
                    }
                }
                accessControlList = accessControlListBuffer
            } else {
                accessControlList = []
            }
        } else {
            accessControlList = nil
        }
        let taggingDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Tagging.self, forKey: .tagging)
        tagging = taggingDecoded
        if containerValues.contains(.userMetadata) {
            struct KeyVal0{struct MetadataEntry{}}
            let userMetadataWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.MetadataEntry>.CodingKeys.self, forKey: .userMetadata)
            if let userMetadataWrappedContainer = userMetadataWrappedContainer {
                let userMetadataContainer = try userMetadataWrappedContainer.decodeIfPresent([S3ClientTypes.MetadataEntry].self, forKey: .member)
                var userMetadataBuffer:[S3ClientTypes.MetadataEntry]? = nil
                if let userMetadataContainer = userMetadataContainer {
                    userMetadataBuffer = [S3ClientTypes.MetadataEntry]()
                    for structureContainer0 in userMetadataContainer {
                        userMetadataBuffer?.append(structureContainer0)
                    }
                }
                userMetadata = userMetadataBuffer
            } else {
                userMetadata = []
            }
        } else {
            userMetadata = nil
        }
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
    }
}

extension S3ClientTypes.S3Location: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "S3Location(accessControlList: \(Swift.String(describing: accessControlList)), bucketName: \(Swift.String(describing: bucketName)), cannedACL: \(Swift.String(describing: cannedACL)), encryption: \(Swift.String(describing: encryption)), prefix: \(Swift.String(describing: prefix)), storageClass: \(Swift.String(describing: storageClass)), tagging: \(Swift.String(describing: tagging)), userMetadata: \(Swift.String(describing: userMetadata)))"}
}

extension S3ClientTypes.S3Location: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Describes an Amazon S3 location that will receive the results of the restore request.</p>
    public struct S3Location: Swift.Equatable {
        /// <p>A list of grants that control access to the staged results.</p>
        public let accessControlList: [S3ClientTypes.Grant]?
        /// <p>The name of the bucket where the restore results will be placed.</p>
        public let bucketName: Swift.String?
        /// <p>The canned ACL to apply to the restore results.</p>
        public let cannedACL: S3ClientTypes.ObjectCannedACL?
        /// <p>Contains the type of server-side encryption used.</p>
        public let encryption: S3ClientTypes.Encryption?
        /// <p>The prefix that is prepended to the restore results for this request.</p>
        public let prefix: Swift.String?
        /// <p>The class of storage used to store the restore results.</p>
        public let storageClass: S3ClientTypes.StorageClass?
        /// <p>The tag-set that is applied to the restore results.</p>
        public let tagging: S3ClientTypes.Tagging?
        /// <p>A list of metadata to store with the restore results in S3.</p>
        public let userMetadata: [S3ClientTypes.MetadataEntry]?

        public init (
            accessControlList: [S3ClientTypes.Grant]? = nil,
            bucketName: Swift.String? = nil,
            cannedACL: S3ClientTypes.ObjectCannedACL? = nil,
            encryption: S3ClientTypes.Encryption? = nil,
            prefix: Swift.String? = nil,
            storageClass: S3ClientTypes.StorageClass? = nil,
            tagging: S3ClientTypes.Tagging? = nil,
            userMetadata: [S3ClientTypes.MetadataEntry]? = nil
        )
        {
            self.accessControlList = accessControlList
            self.bucketName = bucketName
            self.cannedACL = cannedACL
            self.encryption = encryption
            self.prefix = prefix
            self.storageClass = storageClass
            self.tagging = tagging
            self.userMetadata = userMetadata
        }
    }

}

extension S3ClientTypes.SSEKMS: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let keyId = keyId {
            try container.encode(keyId, forKey: ClientRuntime.Key("KeyId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension S3ClientTypes.SSEKMS: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SSEKMS(keyId: \(Swift.String(describing: keyId)))"}
}

extension S3ClientTypes.SSEKMS: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the use of SSE-KMS to encrypt delivered inventory reports.</p>
    public struct SSEKMS: Swift.Equatable {
        /// <p>Specifies the ID of the AWS Key Management Service (AWS KMS) symmetric customer managed
        ///          customer master key (CMK) to use for encrypting inventory reports.</p>
        public let keyId: Swift.String?

        public init (
            keyId: Swift.String? = nil
        )
        {
            self.keyId = keyId
        }
    }

}

extension S3ClientTypes.SSES3: Swift.Codable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes.SSES3: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SSES3()"}
}

extension S3ClientTypes {
    /// <p>Specifies the use of SSE-S3 to encrypt delivered inventory reports.</p>
    public struct SSES3: Swift.Equatable {

        public init() {}
    }

}

extension S3ClientTypes.ScanRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case end = "End"
        case start = "Start"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if end != 0 {
            try container.encode(end, forKey: ClientRuntime.Key("End"))
        }
        if start != 0 {
            try container.encode(start, forKey: ClientRuntime.Key("Start"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startDecoded = try containerValues.decode(Swift.Int.self, forKey: .start)
        start = startDecoded
        let endDecoded = try containerValues.decode(Swift.Int.self, forKey: .end)
        end = endDecoded
    }
}

extension S3ClientTypes.ScanRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScanRange(end: \(Swift.String(describing: end)), start: \(Swift.String(describing: start)))"}
}

extension S3ClientTypes.ScanRange: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the byte range of the object to get the records from. A record is processed
    ///          when its first byte is contained by the range. This parameter is optional, but when
    ///          specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the
    ///          start and end of the range.</p>
    public struct ScanRange: Swift.Equatable {
        /// <p>Specifies the end of the byte range. This parameter is optional. Valid values:
        ///          non-negative integers. The default value is one less than the size of the object being
        ///          queried. If only the End parameter is supplied, it is interpreted to mean scan the last N
        ///          bytes of the file. For example,
        ///             <code><scanrange><end>50</end></scanrange></code> means scan the
        ///          last 50 bytes.</p>
        public let end: Swift.Int
        /// <p>Specifies the start of the byte range. This parameter is optional. Valid values:
        ///          non-negative integers. The default value is 0. If only start is supplied, it means scan
        ///          from that point to the end of the file.For example;
        ///             <code><scanrange><start>50</start></scanrange></code> means scan
        ///          from byte 50 until the end of the file.</p>
        public let start: Swift.Int

        public init (
            end: Swift.Int = 0,
            start: Swift.Int = 0
        )
        {
            self.end = end
            self.start = start
        }
    }

}

extension S3ClientTypes.SelectObjectContentEventStream: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cont = "Cont"
        case end = "End"
        case progress = "Progress"
        case records = "Records"
        case stats = "Stats"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        switch self {
            case let .cont(cont):
                try container.encode(cont, forKey: ClientRuntime.Key("Cont"))
            case let .end(end):
                try container.encode(end, forKey: ClientRuntime.Key("End"))
            case let .progress(progress):
                try container.encode(progress, forKey: ClientRuntime.Key("Progress"))
            case let .records(records):
                try container.encode(records, forKey: ClientRuntime.Key("Records"))
            case let .stats(stats):
                try container.encode(stats, forKey: ClientRuntime.Key("Stats"))
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: ClientRuntime.Key("sdkUnknown"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RecordsEvent.self, forKey: .records)
        if let records = recordsDecoded {
            self = .records(records)
            return
        }
        let statsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StatsEvent.self, forKey: .stats)
        if let stats = statsDecoded {
            self = .stats(stats)
            return
        }
        let progressDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ProgressEvent.self, forKey: .progress)
        if let progress = progressDecoded {
            self = .progress(progress)
            return
        }
        let contDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ContinuationEvent.self, forKey: .cont)
        if let cont = contDecoded {
            self = .cont(cont)
            return
        }
        let endDecoded = try containerValues.decodeIfPresent(S3ClientTypes.EndEvent.self, forKey: .end)
        if let end = endDecoded {
            self = .end(end)
            return
        }
        self = .sdkUnknown("")
    }
}

extension S3ClientTypes {
    /// <p>The container for selecting objects from a content event stream.</p>
    public enum SelectObjectContentEventStream: Swift.Equatable {
        /// <p>The Records Event.</p>
        case records(S3ClientTypes.RecordsEvent)
        /// <p>The Stats Event.</p>
        case stats(S3ClientTypes.StatsEvent)
        /// <p>The Progress Event.</p>
        case progress(S3ClientTypes.ProgressEvent)
        /// <p>The Continuation Event.</p>
        case cont(S3ClientTypes.ContinuationEvent)
        /// <p>The End Event.</p>
        case end(S3ClientTypes.EndEvent)
        case sdkUnknown(Swift.String)
    }

}

public struct SelectObjectContentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SelectObjectContentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SelectObjectContentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SelectObjectContentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SelectObjectContentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SelectObjectContentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SelectObjectContentOutputError>
}

extension SelectObjectContentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SelectObjectContentInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expression: \(Swift.String(describing: expression)), expressionType: \(Swift.String(describing: expressionType)), inputSerialization: \(Swift.String(describing: inputSerialization)), key: \(Swift.String(describing: key)), outputSerialization: \(Swift.String(describing: outputSerialization)), requestProgress: \(Swift.String(describing: requestProgress)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKey: \(Swift.String(describing: sSECustomerKey)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), scanRange: \(Swift.String(describing: scanRange)))"}
}

extension SelectObjectContentInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension SelectObjectContentInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression = "Expression"
        case expressionType = "ExpressionType"
        case inputSerialization = "InputSerialization"
        case outputSerialization = "OutputSerialization"
        case requestProgress = "RequestProgress"
        case scanRange = "ScanRange"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let expression = expression {
            try container.encode(expression, forKey: ClientRuntime.Key("Expression"))
        }
        if let expressionType = expressionType {
            try container.encode(expressionType, forKey: ClientRuntime.Key("ExpressionType"))
        }
        if let inputSerialization = inputSerialization {
            try container.encode(inputSerialization, forKey: ClientRuntime.Key("InputSerialization"))
        }
        if let outputSerialization = outputSerialization {
            try container.encode(outputSerialization, forKey: ClientRuntime.Key("OutputSerialization"))
        }
        if let requestProgress = requestProgress {
            try container.encode(requestProgress, forKey: ClientRuntime.Key("RequestProgress"))
        }
        if let scanRange = scanRange {
            try container.encode(scanRange, forKey: ClientRuntime.Key("ScanRange"))
        }
    }
}

public struct SelectObjectContentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SelectObjectContentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SelectObjectContentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SelectObjectContentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let sSECustomerAlgorithm = input.operationInput.sSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sSECustomerAlgorithm))
        }
        if let sSECustomerKey = input.operationInput.sSECustomerKey {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sSECustomerKey))
        }
        if let sSECustomerKeyMD5 = input.operationInput.sSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sSECustomerKeyMD5))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SelectObjectContentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SelectObjectContentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SelectObjectContentOutputError>
}

public struct SelectObjectContentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SelectObjectContentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SelectObjectContentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SelectObjectContentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "select", value: nil))
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "select-type", value: "2"))
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "SelectObjectContent"))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SelectObjectContentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SelectObjectContentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SelectObjectContentOutputError>
}

/// <p>Request to filter the contents of an Amazon S3 object based on a simple Structured Query
///          Language (SQL) statement. In the request, along with the SQL expression, you must specify a
///          data serialization format (JSON or CSV) of the object. Amazon S3 uses this to parse object data
///          into records. It returns only records that match the specified SQL expression. You must
///          also specify the data serialization format for the response. For more information, see
///             <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectSELECTContent.html">S3Select API Documentation</a>.</p>
public struct SelectObjectContentInput: Swift.Equatable {
    /// <p>The S3 bucket.</p>
    public let bucket: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The expression that is used to query the object.</p>
    public let expression: Swift.String?
    /// <p>The type of the provided expression (for example, SQL).</p>
    public let expressionType: S3ClientTypes.ExpressionType?
    /// <p>Describes the format of the data in the object that is being queried.</p>
    public let inputSerialization: S3ClientTypes.InputSerialization?
    /// <p>The object key.</p>
    public let key: Swift.String?
    /// <p>Describes the format of the data that you want Amazon S3 to return in response.</p>
    public let outputSerialization: S3ClientTypes.OutputSerialization?
    /// <p>Specifies if periodic request progress information should be enabled.</p>
    public let requestProgress: S3ClientTypes.RequestProgress?
    /// <p>The SSE Algorithm used to encrypt the object. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption (Using Customer-Provided Encryption Keys</a>. </p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>The SSE Customer Key. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption
    ///             (Using Customer-Provided Encryption Keys</a>. </p>
    public let sSECustomerKey: Swift.String?
    /// <p>The SSE Customer Key MD5. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption
    ///             (Using Customer-Provided Encryption Keys</a>. </p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>Specifies the byte range of the object to get the records from. A record is processed
    ///          when its first byte is contained by the range. This parameter is optional, but when
    ///          specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the
    ///          start and end of the range.</p>
    ///          <p>
    ///             <code>ScanRange</code>may be used in the following ways:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code><scanrange><start>50</start><end>100</end></scanrange></code>
    ///                - process only the records starting between the bytes 50 and 100 (inclusive, counting
    ///                from zero)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code><scanrange><start>50</start></scanrange></code> -
    ///                process only the records starting after the byte 50</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code><scanrange><end>50</end></scanrange></code> -
    ///                process only the records within the last 50 bytes of the file.</p>
    ///             </li>
    ///          </ul>
    public let scanRange: S3ClientTypes.ScanRange?

    public init (
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expression: Swift.String? = nil,
        expressionType: S3ClientTypes.ExpressionType? = nil,
        inputSerialization: S3ClientTypes.InputSerialization? = nil,
        key: Swift.String? = nil,
        outputSerialization: S3ClientTypes.OutputSerialization? = nil,
        requestProgress: S3ClientTypes.RequestProgress? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKey: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        scanRange: S3ClientTypes.ScanRange? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.expression = expression
        self.expressionType = expressionType
        self.inputSerialization = inputSerialization
        self.key = key
        self.outputSerialization = outputSerialization
        self.requestProgress = requestProgress
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKey = sSECustomerKey
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.scanRange = scanRange
    }
}

struct SelectObjectContentInputBody: Swift.Equatable {
    public let expression: Swift.String?
    public let expressionType: S3ClientTypes.ExpressionType?
    public let requestProgress: S3ClientTypes.RequestProgress?
    public let inputSerialization: S3ClientTypes.InputSerialization?
    public let outputSerialization: S3ClientTypes.OutputSerialization?
    public let scanRange: S3ClientTypes.ScanRange?
}

extension SelectObjectContentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression = "Expression"
        case expressionType = "ExpressionType"
        case inputSerialization = "InputSerialization"
        case outputSerialization = "OutputSerialization"
        case requestProgress = "RequestProgress"
        case scanRange = "ScanRange"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let expressionTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ExpressionType.self, forKey: .expressionType)
        expressionType = expressionTypeDecoded
        let requestProgressDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RequestProgress.self, forKey: .requestProgress)
        requestProgress = requestProgressDecoded
        let inputSerializationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InputSerialization.self, forKey: .inputSerialization)
        inputSerialization = inputSerializationDecoded
        let outputSerializationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.OutputSerialization.self, forKey: .outputSerialization)
        outputSerialization = outputSerializationDecoded
        let scanRangeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ScanRange.self, forKey: .scanRange)
        scanRange = scanRangeDecoded
    }
}

extension SelectObjectContentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SelectObjectContentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SelectObjectContentOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SelectObjectContentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SelectObjectContentOutputResponse(payload: \(Swift.String(describing: payload)))"}
}

extension SelectObjectContentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.SelectObjectContentEventStream = try responseDecoder.decode(responseBody: data)
                self.payload = output
            } else {
                self.payload = nil
            }
        } else {
            self.payload = nil
        }
    }
}

public struct SelectObjectContentOutputResponse: Swift.Equatable {
    /// <p>The array of results.</p>
    public let payload: S3ClientTypes.SelectObjectContentEventStream?

    public init (
        payload: S3ClientTypes.SelectObjectContentEventStream? = nil
    )
    {
        self.payload = payload
    }
}

struct SelectObjectContentOutputResponseBody: Swift.Equatable {
    public let payload: S3ClientTypes.SelectObjectContentEventStream?
}

extension SelectObjectContentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case payload = "Payload"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let payloadDecoded = try containerValues.decodeIfPresent(S3ClientTypes.SelectObjectContentEventStream.self, forKey: .payload)
        payload = payloadDecoded
    }
}

extension S3ClientTypes.SelectParameters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression = "Expression"
        case expressionType = "ExpressionType"
        case inputSerialization = "InputSerialization"
        case outputSerialization = "OutputSerialization"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let expression = expression {
            try container.encode(expression, forKey: ClientRuntime.Key("Expression"))
        }
        if let expressionType = expressionType {
            try container.encode(expressionType, forKey: ClientRuntime.Key("ExpressionType"))
        }
        if let inputSerialization = inputSerialization {
            try container.encode(inputSerialization, forKey: ClientRuntime.Key("InputSerialization"))
        }
        if let outputSerialization = outputSerialization {
            try container.encode(outputSerialization, forKey: ClientRuntime.Key("OutputSerialization"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputSerializationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.InputSerialization.self, forKey: .inputSerialization)
        inputSerialization = inputSerializationDecoded
        let expressionTypeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ExpressionType.self, forKey: .expressionType)
        expressionType = expressionTypeDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let outputSerializationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.OutputSerialization.self, forKey: .outputSerialization)
        outputSerialization = outputSerializationDecoded
    }
}

extension S3ClientTypes.SelectParameters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SelectParameters(expression: \(Swift.String(describing: expression)), expressionType: \(Swift.String(describing: expressionType)), inputSerialization: \(Swift.String(describing: inputSerialization)), outputSerialization: \(Swift.String(describing: outputSerialization)))"}
}

extension S3ClientTypes.SelectParameters: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Describes the parameters for Select job types.</p>
    public struct SelectParameters: Swift.Equatable {
        /// <p>The expression that is used to query the object.</p>
        public let expression: Swift.String?
        /// <p>The type of the provided expression (for example, SQL).</p>
        public let expressionType: S3ClientTypes.ExpressionType?
        /// <p>Describes the serialization format of the object.</p>
        public let inputSerialization: S3ClientTypes.InputSerialization?
        /// <p>Describes how the results of the Select job are serialized.</p>
        public let outputSerialization: S3ClientTypes.OutputSerialization?

        public init (
            expression: Swift.String? = nil,
            expressionType: S3ClientTypes.ExpressionType? = nil,
            inputSerialization: S3ClientTypes.InputSerialization? = nil,
            outputSerialization: S3ClientTypes.OutputSerialization? = nil
        )
        {
            self.expression = expression
            self.expressionType = expressionType
            self.inputSerialization = inputSerialization
            self.outputSerialization = outputSerialization
        }
    }

}

extension S3ClientTypes {
    public enum ServerSideEncryption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aes256
        case awsKms
        case sdkUnknown(Swift.String)

        public static var allCases: [ServerSideEncryption] {
            return [
                .aes256,
                .awsKms,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aes256: return "AES256"
            case .awsKms: return "aws:kms"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServerSideEncryption(rawValue: rawValue) ?? ServerSideEncryption.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.ServerSideEncryptionByDefault: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kMSMasterKeyID = "KMSMasterKeyID"
        case sSEAlgorithm = "SSEAlgorithm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let kMSMasterKeyID = kMSMasterKeyID {
            try container.encode(kMSMasterKeyID, forKey: ClientRuntime.Key("KMSMasterKeyID"))
        }
        if let sSEAlgorithm = sSEAlgorithm {
            try container.encode(sSEAlgorithm, forKey: ClientRuntime.Key("SSEAlgorithm"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sSEAlgorithmDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ServerSideEncryption.self, forKey: .sSEAlgorithm)
        sSEAlgorithm = sSEAlgorithmDecoded
        let kMSMasterKeyIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kMSMasterKeyID)
        kMSMasterKeyID = kMSMasterKeyIDDecoded
    }
}

extension S3ClientTypes.ServerSideEncryptionByDefault: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServerSideEncryptionByDefault(kMSMasterKeyID: \(Swift.String(describing: kMSMasterKeyID)), sSEAlgorithm: \(Swift.String(describing: sSEAlgorithm)))"}
}

extension S3ClientTypes.ServerSideEncryptionByDefault: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Describes the default server-side encryption to apply to new objects in the bucket. If a
    ///          PUT Object request doesn't specify any server-side encryption, this default encryption will
    ///          be applied. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html">PUT Bucket encryption</a> in
    ///          the <i>Amazon S3 API Reference</i>.</p>
    public struct ServerSideEncryptionByDefault: Swift.Equatable {
        /// <p>AWS Key Management Service (KMS) customer AWS KMS key ID to use for the default
        ///         encryption. This parameter is allowed if and only if <code>SSEAlgorithm</code> is set to
        ///         <code>aws:kms</code>.</p>
        ///          <p>You can specify the key ID or the Amazon Resource Name (ARN) of the KMS key. However, if you
        ///         are using encryption with cross-account operations, you must use a fully qualified KMS key ARN.
        ///         For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-bucket-policy">Using encryption for cross-account operations</a>. </p>
        ///          <p>
        ///             <b>For example:</b>
        ///          </p>
        ///          <ul>
        ///             <li>
        ///                <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>Key ARN:
        ///                   <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        ///          <important>
        ///             <p>Amazon S3 only supports symmetric KMS keys and not asymmetric KMS keys. For more information, see
        ///            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using symmetric and
        ///            asymmetric keys</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
        ///          </important>
        public let kMSMasterKeyID: Swift.String?
        /// <p>Server-side encryption algorithm to use for the default encryption.</p>
        public let sSEAlgorithm: S3ClientTypes.ServerSideEncryption?

        public init (
            kMSMasterKeyID: Swift.String? = nil,
            sSEAlgorithm: S3ClientTypes.ServerSideEncryption? = nil
        )
        {
            self.kMSMasterKeyID = kMSMasterKeyID
            self.sSEAlgorithm = sSEAlgorithm
        }
    }

}

extension S3ClientTypes.ServerSideEncryptionConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let rules = rules {
            if rules.isEmpty {
                var rulesContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Rule"))
                try rulesContainer.encodeNil()
            } else {
                for serversideencryptionrule0 in rules {
                    var rulesContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Rule"))
                    try rulesContainer0.encode(serversideencryptionrule0, forKey: ClientRuntime.Key(""))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.rules) {
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .rules)
            if rulesWrappedContainer != nil {
                let rulesContainer = try containerValues.decodeIfPresent([S3ClientTypes.ServerSideEncryptionRule].self, forKey: .rules)
                var rulesBuffer:[S3ClientTypes.ServerSideEncryptionRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [S3ClientTypes.ServerSideEncryptionRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}

extension S3ClientTypes.ServerSideEncryptionConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServerSideEncryptionConfiguration(rules: \(Swift.String(describing: rules)))"}
}

extension S3ClientTypes.ServerSideEncryptionConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the default server-side-encryption configuration.</p>
    public struct ServerSideEncryptionConfiguration: Swift.Equatable {
        /// <p>Container for information about a particular server-side encryption configuration
        ///          rule.</p>
        public let rules: [S3ClientTypes.ServerSideEncryptionRule]?

        public init (
            rules: [S3ClientTypes.ServerSideEncryptionRule]? = nil
        )
        {
            self.rules = rules
        }
    }

}

extension S3ClientTypes.ServerSideEncryptionRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyServerSideEncryptionByDefault = "ApplyServerSideEncryptionByDefault"
        case bucketKeyEnabled = "BucketKeyEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefault {
            try container.encode(applyServerSideEncryptionByDefault, forKey: ClientRuntime.Key("ApplyServerSideEncryptionByDefault"))
        }
        if bucketKeyEnabled != false {
            try container.encode(bucketKeyEnabled, forKey: ClientRuntime.Key("BucketKeyEnabled"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applyServerSideEncryptionByDefaultDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ServerSideEncryptionByDefault.self, forKey: .applyServerSideEncryptionByDefault)
        applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefaultDecoded
        let bucketKeyEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .bucketKeyEnabled)
        bucketKeyEnabled = bucketKeyEnabledDecoded
    }
}

extension S3ClientTypes.ServerSideEncryptionRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServerSideEncryptionRule(applyServerSideEncryptionByDefault: \(Swift.String(describing: applyServerSideEncryptionByDefault)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)))"}
}

extension S3ClientTypes.ServerSideEncryptionRule: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies the default server-side encryption configuration.</p>
    public struct ServerSideEncryptionRule: Swift.Equatable {
        /// <p>Specifies the default server-side encryption to apply to new objects in the bucket. If a
        ///          PUT Object request doesn't specify any server-side encryption, this default encryption will
        ///          be applied.</p>
        public let applyServerSideEncryptionByDefault: S3ClientTypes.ServerSideEncryptionByDefault?
        /// <p>Specifies whether Amazon S3 should use an S3 Bucket Key with server-side encryption using KMS (SSE-KMS) for new objects in the bucket. Existing objects are not affected. Setting the <code>BucketKeyEnabled</code> element to <code>true</code> causes Amazon S3 to use an S3 Bucket Key. By default, S3 Bucket Key is not enabled.</p>
        ///          <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html">Amazon S3 Bucket Keys</a> in the <i>Amazon S3 User Guide</i>.</p>
        public let bucketKeyEnabled: Swift.Bool

        public init (
            applyServerSideEncryptionByDefault: S3ClientTypes.ServerSideEncryptionByDefault? = nil,
            bucketKeyEnabled: Swift.Bool = false
        )
        {
            self.applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefault
            self.bucketKeyEnabled = bucketKeyEnabled
        }
    }

}

extension S3ClientTypes.SourceSelectionCriteria: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicaModifications = "ReplicaModifications"
        case sseKmsEncryptedObjects = "SseKmsEncryptedObjects"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let replicaModifications = replicaModifications {
            try container.encode(replicaModifications, forKey: ClientRuntime.Key("ReplicaModifications"))
        }
        if let sseKmsEncryptedObjects = sseKmsEncryptedObjects {
            try container.encode(sseKmsEncryptedObjects, forKey: ClientRuntime.Key("SseKmsEncryptedObjects"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sseKmsEncryptedObjectsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.SseKmsEncryptedObjects.self, forKey: .sseKmsEncryptedObjects)
        sseKmsEncryptedObjects = sseKmsEncryptedObjectsDecoded
        let replicaModificationsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ReplicaModifications.self, forKey: .replicaModifications)
        replicaModifications = replicaModificationsDecoded
    }
}

extension S3ClientTypes.SourceSelectionCriteria: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SourceSelectionCriteria(replicaModifications: \(Swift.String(describing: replicaModifications)), sseKmsEncryptedObjects: \(Swift.String(describing: sseKmsEncryptedObjects)))"}
}

extension S3ClientTypes.SourceSelectionCriteria: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A container that describes additional filters for identifying the source objects that
    ///          you want to replicate. You can choose to enable or disable the replication of these
    ///          objects. Currently, Amazon S3 supports only the filter that you can specify for objects created
    ///          with server-side encryption using a customer master key (CMK) stored in AWS Key Management
    ///          Service (SSE-KMS).</p>
    public struct SourceSelectionCriteria: Swift.Equatable {
        /// <p>A filter that you can specify for selections for modifications on replicas. Amazon S3 doesn't
        ///          replicate replica modifications by default. In the latest version of replication
        ///          configuration (when <code>Filter</code> is specified), you can specify this element and set
        ///          the status to <code>Enabled</code> to replicate modifications on replicas. </p>
        ///          <note>
        ///             <p> If you don't specify the <code>Filter</code> element, Amazon S3 assumes that the
        ///             replication configuration is the earlier version, V1. In the earlier version, this
        ///             element is not allowed</p>
        ///          </note>
        public let replicaModifications: S3ClientTypes.ReplicaModifications?
        /// <p> A container for filter information for the selection of Amazon S3 objects encrypted with AWS
        ///          KMS. If you include <code>SourceSelectionCriteria</code> in the replication configuration,
        ///          this element is required. </p>
        public let sseKmsEncryptedObjects: S3ClientTypes.SseKmsEncryptedObjects?

        public init (
            replicaModifications: S3ClientTypes.ReplicaModifications? = nil,
            sseKmsEncryptedObjects: S3ClientTypes.SseKmsEncryptedObjects? = nil
        )
        {
            self.replicaModifications = replicaModifications
            self.sseKmsEncryptedObjects = sseKmsEncryptedObjects
        }
    }

}

extension S3ClientTypes.SseKmsEncryptedObjects: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.SseKmsEncryptedObjectsStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension S3ClientTypes.SseKmsEncryptedObjects: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SseKmsEncryptedObjects(status: \(Swift.String(describing: status)))"}
}

extension S3ClientTypes.SseKmsEncryptedObjects: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A container for filter information for the selection of S3 objects encrypted with AWS
    ///          KMS.</p>
    public struct SseKmsEncryptedObjects: Swift.Equatable {
        /// <p>Specifies whether Amazon S3 replicates objects created with server-side encryption using an
        ///          AWS KMS key stored in AWS Key Management Service.</p>
        public let status: S3ClientTypes.SseKmsEncryptedObjectsStatus?

        public init (
            status: S3ClientTypes.SseKmsEncryptedObjectsStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension S3ClientTypes {
    public enum SseKmsEncryptedObjectsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [SseKmsEncryptedObjectsStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SseKmsEncryptedObjectsStatus(rawValue: rawValue) ?? SseKmsEncryptedObjectsStatus.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.Stats: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bytesProcessed = "BytesProcessed"
        case bytesReturned = "BytesReturned"
        case bytesScanned = "BytesScanned"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if bytesProcessed != 0 {
            try container.encode(bytesProcessed, forKey: ClientRuntime.Key("BytesProcessed"))
        }
        if bytesReturned != 0 {
            try container.encode(bytesReturned, forKey: ClientRuntime.Key("BytesReturned"))
        }
        if bytesScanned != 0 {
            try container.encode(bytesScanned, forKey: ClientRuntime.Key("BytesScanned"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bytesScannedDecoded = try containerValues.decode(Swift.Int.self, forKey: .bytesScanned)
        bytesScanned = bytesScannedDecoded
        let bytesProcessedDecoded = try containerValues.decode(Swift.Int.self, forKey: .bytesProcessed)
        bytesProcessed = bytesProcessedDecoded
        let bytesReturnedDecoded = try containerValues.decode(Swift.Int.self, forKey: .bytesReturned)
        bytesReturned = bytesReturnedDecoded
    }
}

extension S3ClientTypes.Stats: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Stats(bytesProcessed: \(Swift.String(describing: bytesProcessed)), bytesReturned: \(Swift.String(describing: bytesReturned)), bytesScanned: \(Swift.String(describing: bytesScanned)))"}
}

extension S3ClientTypes.Stats: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for the stats details.</p>
    public struct Stats: Swift.Equatable {
        /// <p>The total number of uncompressed object bytes processed.</p>
        public let bytesProcessed: Swift.Int
        /// <p>The total number of bytes of records payload data returned.</p>
        public let bytesReturned: Swift.Int
        /// <p>The total number of object bytes scanned.</p>
        public let bytesScanned: Swift.Int

        public init (
            bytesProcessed: Swift.Int = 0,
            bytesReturned: Swift.Int = 0,
            bytesScanned: Swift.Int = 0
        )
        {
            self.bytesProcessed = bytesProcessed
            self.bytesReturned = bytesReturned
            self.bytesScanned = bytesScanned
        }
    }

}

extension S3ClientTypes.StatsEvent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details = "Details"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let details = details {
            try container.encode(details, forKey: ClientRuntime.Key("Details"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailsDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Stats.self, forKey: .details)
        details = detailsDecoded
    }
}

extension S3ClientTypes.StatsEvent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StatsEvent(details: \(Swift.String(describing: details)))"}
}

extension S3ClientTypes.StatsEvent: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for the Stats Event.</p>
    public struct StatsEvent: Swift.Equatable {
        /// <p>The Stats event details.</p>
        public let details: S3ClientTypes.Stats?

        public init (
            details: S3ClientTypes.Stats? = nil
        )
        {
            self.details = details
        }
    }

}

extension S3ClientTypes {
    public enum StorageClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deepArchive
        case glacier
        case intelligentTiering
        case onezoneIa
        case outposts
        case reducedRedundancy
        case standard
        case standardIa
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageClass] {
            return [
                .deepArchive,
                .glacier,
                .intelligentTiering,
                .onezoneIa,
                .outposts,
                .reducedRedundancy,
                .standard,
                .standardIa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deepArchive: return "DEEP_ARCHIVE"
            case .glacier: return "GLACIER"
            case .intelligentTiering: return "INTELLIGENT_TIERING"
            case .onezoneIa: return "ONEZONE_IA"
            case .outposts: return "OUTPOSTS"
            case .reducedRedundancy: return "REDUCED_REDUNDANCY"
            case .standard: return "STANDARD"
            case .standardIa: return "STANDARD_IA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StorageClass(rawValue: rawValue) ?? StorageClass.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.StorageClassAnalysis: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataExport = "DataExport"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let dataExport = dataExport {
            try container.encode(dataExport, forKey: ClientRuntime.Key("DataExport"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataExportDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClassAnalysisDataExport.self, forKey: .dataExport)
        dataExport = dataExportDecoded
    }
}

extension S3ClientTypes.StorageClassAnalysis: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StorageClassAnalysis(dataExport: \(Swift.String(describing: dataExport)))"}
}

extension S3ClientTypes.StorageClassAnalysis: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies data related to access patterns to be collected and made available to analyze
    ///          the tradeoffs between different storage classes for an Amazon S3 bucket.</p>
    public struct StorageClassAnalysis: Swift.Equatable {
        /// <p>Specifies how data related to the storage class analysis for an Amazon S3 bucket should be
        ///          exported.</p>
        public let dataExport: S3ClientTypes.StorageClassAnalysisDataExport?

        public init (
            dataExport: S3ClientTypes.StorageClassAnalysisDataExport? = nil
        )
        {
            self.dataExport = dataExport
        }
    }

}

extension S3ClientTypes.StorageClassAnalysisDataExport: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case outputSchemaVersion = "OutputSchemaVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let destination = destination {
            try container.encode(destination, forKey: ClientRuntime.Key("Destination"))
        }
        if let outputSchemaVersion = outputSchemaVersion {
            try container.encode(outputSchemaVersion, forKey: ClientRuntime.Key("OutputSchemaVersion"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputSchemaVersionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClassAnalysisSchemaVersion.self, forKey: .outputSchemaVersion)
        outputSchemaVersion = outputSchemaVersionDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(S3ClientTypes.AnalyticsExportDestination.self, forKey: .destination)
        destination = destinationDecoded
    }
}

extension S3ClientTypes.StorageClassAnalysisDataExport: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StorageClassAnalysisDataExport(destination: \(Swift.String(describing: destination)), outputSchemaVersion: \(Swift.String(describing: outputSchemaVersion)))"}
}

extension S3ClientTypes.StorageClassAnalysisDataExport: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for data related to the storage class analysis for an Amazon S3 bucket for
    ///          export.</p>
    public struct StorageClassAnalysisDataExport: Swift.Equatable {
        /// <p>The place to store the data for an analysis.</p>
        public let destination: S3ClientTypes.AnalyticsExportDestination?
        /// <p>The version of the output schema to use when exporting data. Must be
        ///          <code>V_1</code>.</p>
        public let outputSchemaVersion: S3ClientTypes.StorageClassAnalysisSchemaVersion?

        public init (
            destination: S3ClientTypes.AnalyticsExportDestination? = nil,
            outputSchemaVersion: S3ClientTypes.StorageClassAnalysisSchemaVersion? = nil
        )
        {
            self.destination = destination
            self.outputSchemaVersion = outputSchemaVersion
        }
    }

}

extension S3ClientTypes {
    public enum StorageClassAnalysisSchemaVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case v1
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageClassAnalysisSchemaVersion] {
            return [
                .v1,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .v1: return "V_1"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StorageClassAnalysisSchemaVersion(rawValue: rawValue) ?? StorageClassAnalysisSchemaVersion.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension S3ClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension S3ClientTypes.Tag: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A container of a key value name pair.</p>
    public struct Tag: Swift.Equatable {
        /// <p>Name of the object key.</p>
        public let key: Swift.String?
        /// <p>Value of the tag.</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension S3ClientTypes.Tagging: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagSet = "TagSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let tagSet = tagSet {
            var tagSetContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagSet"))
            for tag0 in tagSet {
                try tagSetContainer.encode(tag0, forKey: ClientRuntime.Key("Tag"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.tagSet) {
            struct KeyVal0{struct Tag{}}
            let tagSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tagSet)
            if let tagSetWrappedContainer = tagSetWrappedContainer {
                let tagSetContainer = try tagSetWrappedContainer.decodeIfPresent([S3ClientTypes.Tag].self, forKey: .member)
                var tagSetBuffer:[S3ClientTypes.Tag]? = nil
                if let tagSetContainer = tagSetContainer {
                    tagSetBuffer = [S3ClientTypes.Tag]()
                    for structureContainer0 in tagSetContainer {
                        tagSetBuffer?.append(structureContainer0)
                    }
                }
                tagSet = tagSetBuffer
            } else {
                tagSet = []
            }
        } else {
            tagSet = nil
        }
    }
}

extension S3ClientTypes.Tagging: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tagging(tagSet: \(Swift.String(describing: tagSet)))"}
}

extension S3ClientTypes.Tagging: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for <code>TagSet</code> elements.</p>
    public struct Tagging: Swift.Equatable {
        /// <p>A collection for a set of tags</p>
        public let tagSet: [S3ClientTypes.Tag]?

        public init (
            tagSet: [S3ClientTypes.Tag]? = nil
        )
        {
            self.tagSet = tagSet
        }
    }

}

extension S3ClientTypes {
    public enum TaggingDirective: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case copy
        case replace
        case sdkUnknown(Swift.String)

        public static var allCases: [TaggingDirective] {
            return [
                .copy,
                .replace,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .copy: return "COPY"
            case .replace: return "REPLACE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaggingDirective(rawValue: rawValue) ?? TaggingDirective.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.TargetGrant: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantee = "Grantee"
        case permission = "Permission"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let grantee = grantee {
            var granteeContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Grantee"))
            try granteeContainer.encode(grantee, forKey: ClientRuntime.Key(""))
            try granteeContainer.encode("http://www.w3.org/2001/XMLSchema-instance", forKey: ClientRuntime.Key("xmlns:xsi"))
        }
        if let permission = permission {
            try container.encode(permission, forKey: ClientRuntime.Key("Permission"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let granteeDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Grantee.self, forKey: .grantee)
        grantee = granteeDecoded
        let permissionDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketLogsPermission.self, forKey: .permission)
        permission = permissionDecoded
    }
}

extension S3ClientTypes.TargetGrant: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TargetGrant(grantee: \(Swift.String(describing: grantee)), permission: \(Swift.String(describing: permission)))"}
}

extension S3ClientTypes.TargetGrant: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns",
            "xmlns:xsi"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Container for granting information.</p>
    public struct TargetGrant: Swift.Equatable {
        /// <p>Container for the person being granted permissions.</p>
        public let grantee: S3ClientTypes.Grantee?
        /// <p>Logging permissions assigned to the grantee for the bucket.</p>
        public let permission: S3ClientTypes.BucketLogsPermission?

        public init (
            grantee: S3ClientTypes.Grantee? = nil,
            permission: S3ClientTypes.BucketLogsPermission? = nil
        )
        {
            self.grantee = grantee
            self.permission = permission
        }
    }

}

extension S3ClientTypes {
    public enum Tier: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bulk
        case expedited
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [Tier] {
            return [
                .bulk,
                .expedited,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bulk: return "Bulk"
            case .expedited: return "Expedited"
            case .standard: return "Standard"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Tier(rawValue: rawValue) ?? Tier.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes.Tiering: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTier = "AccessTier"
        case days = "Days"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let accessTier = accessTier {
            try container.encode(accessTier, forKey: ClientRuntime.Key("AccessTier"))
        }
        if days != 0 {
            try container.encode(days, forKey: ClientRuntime.Key("Days"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let daysDecoded = try containerValues.decode(Swift.Int.self, forKey: .days)
        days = daysDecoded
        let accessTierDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IntelligentTieringAccessTier.self, forKey: .accessTier)
        accessTier = accessTierDecoded
    }
}

extension S3ClientTypes.Tiering: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tiering(accessTier: \(Swift.String(describing: accessTier)), days: \(Swift.String(describing: days)))"}
}

extension S3ClientTypes.Tiering: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>The S3 Intelligent-Tiering storage class is designed to optimize storage costs by
    ///          automatically moving data to the most cost-effective storage access tier, without
    ///          additional operational overhead.</p>
    public struct Tiering: Swift.Equatable {
        /// <p>S3 Intelligent-Tiering access tier. See <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access">Storage class for
        ///             automatically optimizing frequently and infrequently accessed objects</a> for a list
        ///          of access tiers in the S3 Intelligent-Tiering storage class.</p>
        public let accessTier: S3ClientTypes.IntelligentTieringAccessTier?
        /// <p>The number of consecutive days of no access after which an object will be eligible to be
        ///          transitioned to the corresponding tier. The minimum number of days specified for
        ///          Archive Access tier must be at least 90 days and Deep Archive Access tier must be at least
        ///          180 days. The maximum can be up to 2 years (730 days).</p>
        public let days: Swift.Int

        public init (
            accessTier: S3ClientTypes.IntelligentTieringAccessTier? = nil,
            days: Swift.Int = 0
        )
        {
            self.accessTier = accessTier
            self.days = days
        }
    }

}

extension S3ClientTypes.TopicConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Event"
        case filter = "Filter"
        case id = "Id"
        case topicArn = "Topic"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let events = events {
            if events.isEmpty {
                var eventsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Event"))
                try eventsContainer.encodeNil()
            } else {
                for event0 in events {
                    var eventsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Event"))
                    try eventsContainer0.encode(event0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let filter = filter {
            try container.encode(filter, forKey: ClientRuntime.Key("Filter"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("Topic"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        if containerValues.contains(.events) {
            let eventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .events)
            if eventsWrappedContainer != nil {
                let eventsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Event].self, forKey: .events)
                var eventsBuffer:[S3ClientTypes.Event]? = nil
                if let eventsContainer = eventsContainer {
                    eventsBuffer = [S3ClientTypes.Event]()
                    for stringContainer0 in eventsContainer {
                        eventsBuffer?.append(stringContainer0)
                    }
                }
                events = eventsBuffer
            } else {
                events = []
            }
        } else {
            events = nil
        }
        let filterDecoded = try containerValues.decodeIfPresent(S3ClientTypes.NotificationConfigurationFilter.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension S3ClientTypes.TopicConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TopicConfiguration(events: \(Swift.String(describing: events)), filter: \(Swift.String(describing: filter)), id: \(Swift.String(describing: id)), topicArn: \(Swift.String(describing: topicArn)))"}
}

extension S3ClientTypes.TopicConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>A container for specifying the configuration for publication of messages to an Amazon
    ///          Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events.</p>
    public struct TopicConfiguration: Swift.Equatable {
        /// <p>The Amazon S3 bucket event about which to send notifications. For more information, see
        ///             <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Supported
        ///             Event Types</a> in the <i>Amazon S3 User Guide</i>.</p>
        public let events: [S3ClientTypes.Event]?
        /// <p>Specifies object key name filtering rules. For information about key name filtering, see
        ///             <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring
        ///             Event Notifications</a> in the <i>Amazon S3 User Guide</i>.</p>
        public let filter: S3ClientTypes.NotificationConfigurationFilter?
        /// <p>An optional unique identifier for configurations in a notification configuration. If you
        ///          don't provide one, Amazon S3 will assign an ID.</p>
        public let id: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message
        ///          when it detects events of the specified type.</p>
        public let topicArn: Swift.String?

        public init (
            events: [S3ClientTypes.Event]? = nil,
            filter: S3ClientTypes.NotificationConfigurationFilter? = nil,
            id: Swift.String? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.events = events
            self.filter = filter
            self.id = id
            self.topicArn = topicArn
        }
    }

}

extension S3ClientTypes.Transition: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case date = "Date"
        case days = "Days"
        case storageClass = "StorageClass"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let date = date {
            try container.encode(ClientRuntime.TimestampWrapper(date, format: .dateTime), forKey: ClientRuntime.Key("Date"))
        }
        if days != 0 {
            try container.encode(days, forKey: ClientRuntime.Key("Days"))
        }
        if let storageClass = storageClass {
            try container.encode(storageClass, forKey: ClientRuntime.Key("StorageClass"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .date)
        var dateBuffer:ClientRuntime.Date? = nil
        if let dateDecoded = dateDecoded {
            dateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(dateDecoded, format: .dateTime)
        }
        date = dateBuffer
        let daysDecoded = try containerValues.decode(Swift.Int.self, forKey: .days)
        days = daysDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.TransitionStorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
    }
}

extension S3ClientTypes.Transition: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Transition(date: \(Swift.String(describing: date)), days: \(Swift.String(describing: days)), storageClass: \(Swift.String(describing: storageClass)))"}
}

extension S3ClientTypes.Transition: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies when an object transitions to a specified storage class. For more information
    ///          about Amazon S3 lifecycle configuration rules, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html">Transitioning
    ///             Objects Using Amazon S3 Lifecycle</a> in the <i>Amazon S3 User Guide</i>.</p>
    public struct Transition: Swift.Equatable {
        /// <p>Indicates when objects are transitioned to the specified storage class. The date value
        ///          must be in ISO 8601 format. The time is always midnight UTC.</p>
        public let date: ClientRuntime.Date?
        /// <p>Indicates the number of days after creation when objects are transitioned to the
        ///          specified storage class. The value must be a positive integer.</p>
        public let days: Swift.Int
        /// <p>The storage class to which you want the object to transition.</p>
        public let storageClass: S3ClientTypes.TransitionStorageClass?

        public init (
            date: ClientRuntime.Date? = nil,
            days: Swift.Int = 0,
            storageClass: S3ClientTypes.TransitionStorageClass? = nil
        )
        {
            self.date = date
            self.days = days
            self.storageClass = storageClass
        }
    }

}

extension S3ClientTypes {
    public enum TransitionStorageClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deepArchive
        case glacier
        case intelligentTiering
        case onezoneIa
        case standardIa
        case sdkUnknown(Swift.String)

        public static var allCases: [TransitionStorageClass] {
            return [
                .deepArchive,
                .glacier,
                .intelligentTiering,
                .onezoneIa,
                .standardIa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deepArchive: return "DEEP_ARCHIVE"
            case .glacier: return "GLACIER"
            case .intelligentTiering: return "INTELLIGENT_TIERING"
            case .onezoneIa: return "ONEZONE_IA"
            case .standardIa: return "STANDARD_IA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TransitionStorageClass(rawValue: rawValue) ?? TransitionStorageClass.sdkUnknown(rawValue)
        }
    }
}

extension S3ClientTypes {
    public enum ModelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case amazoncustomerbyemail
        case canonicaluser
        case group
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelType] {
            return [
                .amazoncustomerbyemail,
                .canonicaluser,
                .group,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .amazoncustomerbyemail: return "AmazonCustomerByEmail"
            case .canonicaluser: return "CanonicalUser"
            case .group: return "Group"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelType(rawValue: rawValue) ?? ModelType.sdkUnknown(rawValue)
        }
    }
}

extension UploadPartCopyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadPartCopyInput(bucket: \(Swift.String(describing: bucket)), copySource: \(Swift.String(describing: copySource)), copySourceIfMatch: \(Swift.String(describing: copySourceIfMatch)), copySourceIfModifiedSince: \(Swift.String(describing: copySourceIfModifiedSince)), copySourceIfNoneMatch: \(Swift.String(describing: copySourceIfNoneMatch)), copySourceIfUnmodifiedSince: \(Swift.String(describing: copySourceIfUnmodifiedSince)), copySourceRange: \(Swift.String(describing: copySourceRange)), copySourceSSECustomerAlgorithm: \(Swift.String(describing: copySourceSSECustomerAlgorithm)), copySourceSSECustomerKey: \(Swift.String(describing: copySourceSSECustomerKey)), copySourceSSECustomerKeyMD5: \(Swift.String(describing: copySourceSSECustomerKeyMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expectedSourceBucketOwner: \(Swift.String(describing: expectedSourceBucketOwner)), key: \(Swift.String(describing: key)), partNumber: \(Swift.String(describing: partNumber)), requestPayer: \(Swift.String(describing: requestPayer)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKey: \(Swift.String(describing: sSECustomerKey)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), uploadId: \(Swift.String(describing: uploadId)))"}
}

extension UploadPartCopyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct UploadPartCopyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UploadPartCopyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UploadPartCopyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UploadPartCopyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let copySource = input.operationInput.copySource {
            input.builder.withHeader(name: "x-amz-copy-source", value: Swift.String(copySource))
        }
        if let copySourceIfMatch = input.operationInput.copySourceIfMatch {
            input.builder.withHeader(name: "x-amz-copy-source-if-match", value: Swift.String(copySourceIfMatch))
        }
        if let copySourceIfModifiedSince = input.operationInput.copySourceIfModifiedSince {
            input.builder.withHeader(name: "x-amz-copy-source-if-modified-since", value: Swift.String(copySourceIfModifiedSince.rfc5322()))
        }
        if let copySourceIfNoneMatch = input.operationInput.copySourceIfNoneMatch {
            input.builder.withHeader(name: "x-amz-copy-source-if-none-match", value: Swift.String(copySourceIfNoneMatch))
        }
        if let copySourceIfUnmodifiedSince = input.operationInput.copySourceIfUnmodifiedSince {
            input.builder.withHeader(name: "x-amz-copy-source-if-unmodified-since", value: Swift.String(copySourceIfUnmodifiedSince.rfc5322()))
        }
        if let copySourceRange = input.operationInput.copySourceRange {
            input.builder.withHeader(name: "x-amz-copy-source-range", value: Swift.String(copySourceRange))
        }
        if let copySourceSSECustomerAlgorithm = input.operationInput.copySourceSSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-copy-source-server-side-encryption-customer-algorithm", value: Swift.String(copySourceSSECustomerAlgorithm))
        }
        if let copySourceSSECustomerKey = input.operationInput.copySourceSSECustomerKey {
            input.builder.withHeader(name: "x-amz-copy-source-server-side-encryption-customer-key", value: Swift.String(copySourceSSECustomerKey))
        }
        if let copySourceSSECustomerKeyMD5 = input.operationInput.copySourceSSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-copy-source-server-side-encryption-customer-key-MD5", value: Swift.String(copySourceSSECustomerKeyMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let expectedSourceBucketOwner = input.operationInput.expectedSourceBucketOwner {
            input.builder.withHeader(name: "x-amz-source-expected-bucket-owner", value: Swift.String(expectedSourceBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        if let sSECustomerAlgorithm = input.operationInput.sSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sSECustomerAlgorithm))
        }
        if let sSECustomerKey = input.operationInput.sSECustomerKey {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sSECustomerKey))
        }
        if let sSECustomerKeyMD5 = input.operationInput.sSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sSECustomerKeyMD5))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UploadPartCopyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UploadPartCopyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UploadPartCopyOutputError>
}

public struct UploadPartCopyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UploadPartCopyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UploadPartCopyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UploadPartCopyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "UploadPartCopy"))
        let partNumberQueryItem = ClientRuntime.URLQueryItem(name: "partNumber".urlPercentEncoding(), value: Swift.String(input.operationInput.partNumber).urlPercentEncoding())
        input.builder.withQueryItem(partNumberQueryItem)
        if let uploadId = input.operationInput.uploadId {
            let uploadIdQueryItem = ClientRuntime.URLQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
            input.builder.withQueryItem(uploadIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UploadPartCopyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UploadPartCopyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UploadPartCopyOutputError>
}

public struct UploadPartCopyInput: Swift.Equatable {
    /// <p>The bucket name.</p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>Specifies the source object for the copy operation. You specify the value in one of two
    ///          formats, depending on whether you want to access the source object through an <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html">access point</a>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>For objects not accessed through an access point, specify the name of the source
    ///                bucket and key of the source object, separated by a slash (/). For example, to copy
    ///                the object <code>reports/january.pdf</code> from the bucket
    ///                   <code>awsexamplebucket</code>, use
    ///                   <code>awsexamplebucket/reports/january.pdf</code>. The value must be URL
    ///                encoded.</p>
    ///             </li>
    ///             <li>
    ///                <p>For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format <code>arn:aws:s3:<Region>:<account-id>:accesspoint/<access-point-name>/object/<key></code>. For example, to copy the object <code>reports/january.pdf</code> through access point <code>my-access-point</code> owned by account <code>123456789012</code> in Region <code>us-west-2</code>, use the URL encoding of <code>arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf</code>. The value must be URL encoded.</p>
    ///                <note>
    ///                   <p>Amazon S3 supports copy operations using access points only when the source and destination buckets are in the same AWS Region.</p>
    ///                </note>
    ///                <p>Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format <code>arn:aws:s3-outposts:<Region>:<account-id>:outpost/<outpost-id>/object/<key></code>. For example, to copy the object <code>reports/january.pdf</code> through outpost <code>my-outpost</code> owned by account <code>123456789012</code> in Region <code>us-west-2</code>, use the URL encoding of <code>arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf</code>. The value must be URL encoded.  </p>
    ///             </li>
    ///          </ul>
    ///          <p>To copy a specific version of an object, append <code>?versionId=<version-id></code>
    ///          to the value (for example,
    ///             <code>awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893</code>).
    ///          If you don't specify a version ID, Amazon S3 copies the latest version of the source
    ///          object.</p>
    public let copySource: Swift.String?
    /// <p>Copies the object if its entity tag (ETag) matches the specified tag.</p>
    public let copySourceIfMatch: Swift.String?
    /// <p>Copies the object if it has been modified since the specified time.</p>
    public let copySourceIfModifiedSince: ClientRuntime.Date?
    /// <p>Copies the object if its entity tag (ETag) is different than the specified ETag.</p>
    public let copySourceIfNoneMatch: Swift.String?
    /// <p>Copies the object if it hasn't been modified since the specified time.</p>
    public let copySourceIfUnmodifiedSince: ClientRuntime.Date?
    /// <p>The range of bytes to copy from the source object. The range value must use the form
    ///          bytes=first-last, where the first and last are the zero-based byte offsets to copy. For
    ///          example, bytes=0-9 indicates that you want to copy the first 10 bytes of the source. You
    ///          can copy a range only if the source object is greater than 5 MB.</p>
    public let copySourceRange: Swift.String?
    /// <p>Specifies the algorithm to use when decrypting the source object (for example,
    ///          AES256).</p>
    public let copySourceSSECustomerAlgorithm: Swift.String?
    /// <p>Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source
    ///          object. The encryption key provided in this header must be one that was used when the
    ///          source object was created.</p>
    public let copySourceSSECustomerKey: Swift.String?
    /// <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
    ///          this header for a message integrity check to ensure that the encryption key was transmitted
    ///          without error.</p>
    public let copySourceSSECustomerKeyMD5: Swift.String?
    /// <p>The account ID of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>The account ID of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedSourceBucketOwner: Swift.String?
    /// <p>Object key for which the multipart upload was initiated.</p>
    public let key: Swift.String?
    /// <p>Part number of part being copied. This is a positive integer between 1 and
    ///          10,000.</p>
    public let partNumber: Swift.Int
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>Specifies the algorithm to use to when encrypting the object (for example,
    ///          AES256).</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
    ///          value is used to store the object and then it is discarded; Amazon S3 does not store the
    ///          encryption key. The key must be appropriate for use with the algorithm specified in the
    ///             <code>x-amz-server-side-encryption-customer-algorithm</code> header. This must be the
    ///          same encryption key specified in the initiate multipart upload request.</p>
    public let sSECustomerKey: Swift.String?
    /// <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
    ///          this header for a message integrity check to ensure that the encryption key was transmitted
    ///          without error.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>Upload ID identifying the multipart upload whose part is being copied.</p>
    public let uploadId: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        copySource: Swift.String? = nil,
        copySourceIfMatch: Swift.String? = nil,
        copySourceIfModifiedSince: ClientRuntime.Date? = nil,
        copySourceIfNoneMatch: Swift.String? = nil,
        copySourceIfUnmodifiedSince: ClientRuntime.Date? = nil,
        copySourceRange: Swift.String? = nil,
        copySourceSSECustomerAlgorithm: Swift.String? = nil,
        copySourceSSECustomerKey: Swift.String? = nil,
        copySourceSSECustomerKeyMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expectedSourceBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        partNumber: Swift.Int = 0,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKey: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.copySource = copySource
        self.copySourceIfMatch = copySourceIfMatch
        self.copySourceIfModifiedSince = copySourceIfModifiedSince
        self.copySourceIfNoneMatch = copySourceIfNoneMatch
        self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
        self.copySourceRange = copySourceRange
        self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
        self.copySourceSSECustomerKey = copySourceSSECustomerKey
        self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.expectedSourceBucketOwner = expectedSourceBucketOwner
        self.key = key
        self.partNumber = partNumber
        self.requestPayer = requestPayer
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKey = sSECustomerKey
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.uploadId = uploadId
    }
}

struct UploadPartCopyInputBody: Swift.Equatable {
}

extension UploadPartCopyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UploadPartCopyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UploadPartCopyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UploadPartCopyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UploadPartCopyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadPartCopyOutputResponse(bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), copyPartResult: \(Swift.String(describing: copyPartResult)), copySourceVersionId: \(Swift.String(describing: copySourceVersionId)), requestCharged: \(Swift.String(describing: requestCharged)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), sSEKMSKeyId: \(Swift.String(describing: sSEKMSKeyId)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)))"}
}

extension UploadPartCopyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = false
        }
        if let copySourceVersionIdHeaderValue = httpResponse.headers.value(for: "x-amz-copy-source-version-id") {
            self.copySourceVersionId = copySourceVersionIdHeaderValue
        } else {
            self.copySourceVersionId = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let sSECustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            self.sSECustomerAlgorithm = sSECustomerAlgorithmHeaderValue
        } else {
            self.sSECustomerAlgorithm = nil
        }
        if let sSECustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5HeaderValue
        } else {
            self.sSECustomerKeyMD5 = nil
        }
        if let sSEKMSKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.sSEKMSKeyId = sSEKMSKeyIdHeaderValue
        } else {
            self.sSEKMSKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: S3ClientTypes.CopyPartResult = try responseDecoder.decode(responseBody: data)
                self.copyPartResult = output
            } else {
                self.copyPartResult = nil
            }
        } else {
            self.copyPartResult = nil
        }
    }
}

public struct UploadPartCopyOutputResponse: Swift.Equatable {
    /// <p>Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>
    public let bucketKeyEnabled: Swift.Bool
    /// <p>Container for all response elements.</p>
    public let copyPartResult: S3ClientTypes.CopyPartResult?
    /// <p>The version of the source object that was copied, if you have enabled versioning on the
    ///          source bucket.</p>
    public let copySourceVersionId: Swift.String?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header confirming the encryption algorithm used.</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header to provide round-trip message integrity verification of
    ///          the customer-provided encryption key.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric
    ///          customer managed customer master key (CMK) that was used for the object.</p>
    public let sSEKMSKeyId: Swift.String?
    /// <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
    ///          AES256, aws:kms).</p>
    public let serverSideEncryption: S3ClientTypes.ServerSideEncryption?

    public init (
        bucketKeyEnabled: Swift.Bool = false,
        copyPartResult: S3ClientTypes.CopyPartResult? = nil,
        copySourceVersionId: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        sSEKMSKeyId: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil
    )
    {
        self.bucketKeyEnabled = bucketKeyEnabled
        self.copyPartResult = copyPartResult
        self.copySourceVersionId = copySourceVersionId
        self.requestCharged = requestCharged
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
    }
}

struct UploadPartCopyOutputResponseBody: Swift.Equatable {
    public let copyPartResult: S3ClientTypes.CopyPartResult?
}

extension UploadPartCopyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyPartResult = "CopyPartResult"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let copyPartResultDecoded = try containerValues.decodeIfPresent(S3ClientTypes.CopyPartResult.self, forKey: .copyPartResult)
        copyPartResult = copyPartResultDecoded
    }
}

public struct UploadPartInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UploadPartInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UploadPartInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UploadPartOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let body = input.operationInput.body {
            let bodydata = body
            let bodybody = ClientRuntime.HttpBody.stream(bodydata)
            input.builder.withBody(bodybody)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UploadPartInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UploadPartOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UploadPartOutputError>
}

extension UploadPartInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadPartInput(body: \(Swift.String(describing: body)), bucket: \(Swift.String(describing: bucket)), contentLength: \(Swift.String(describing: contentLength)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), partNumber: \(Swift.String(describing: partNumber)), requestPayer: \(Swift.String(describing: requestPayer)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKey: \(Swift.String(describing: sSECustomerKey)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), uploadId: \(Swift.String(describing: uploadId)))"}
}

extension UploadPartInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension UploadPartInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let body = body {
            try container.encode(body, forKey: ClientRuntime.Key("Body"))
        }
    }
}

public struct UploadPartInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UploadPartInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UploadPartInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UploadPartOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.contentLength != 0 {
            input.builder.withHeader(name: "Content-Length", value: Swift.String(input.operationInput.contentLength))
        }
        if let contentMD5 = input.operationInput.contentMD5 {
            input.builder.withHeader(name: "Content-MD5", value: Swift.String(contentMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue))
        }
        if let sSECustomerAlgorithm = input.operationInput.sSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sSECustomerAlgorithm))
        }
        if let sSECustomerKey = input.operationInput.sSECustomerKey {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sSECustomerKey))
        }
        if let sSECustomerKeyMD5 = input.operationInput.sSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sSECustomerKeyMD5))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UploadPartInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UploadPartOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UploadPartOutputError>
}

public struct UploadPartInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UploadPartInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UploadPartInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UploadPartOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "UploadPart"))
        let partNumberQueryItem = ClientRuntime.URLQueryItem(name: "partNumber".urlPercentEncoding(), value: Swift.String(input.operationInput.partNumber).urlPercentEncoding())
        input.builder.withQueryItem(partNumberQueryItem)
        if let uploadId = input.operationInput.uploadId {
            let uploadIdQueryItem = ClientRuntime.URLQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
            input.builder.withQueryItem(uploadIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UploadPartInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UploadPartOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UploadPartOutputError>
}

public struct UploadPartInput: Swift.Equatable {
    /// <p>Object data.</p>
    public let body: ClientRuntime.ByteStream?
    /// <p>The name of the bucket to which the multipart upload was initiated.</p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: Swift.String?
    /// <p>Size of the body in bytes. This parameter is useful when the size of the body cannot be
    ///          determined automatically.</p>
    public let contentLength: Swift.Int
    /// <p>The base64-encoded 128-bit MD5 digest of the part data. This parameter is auto-populated
    ///          when using the command from the CLI. This parameter is required if object lock parameters
    ///          are specified.</p>
    public let contentMD5: Swift.String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: Swift.String?
    /// <p>Object key for which the multipart upload was initiated.</p>
    public let key: Swift.String?
    /// <p>Part number of part being uploaded. This is a positive integer between 1 and
    ///          10,000.</p>
    public let partNumber: Swift.Int
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: S3ClientTypes.RequestPayer?
    /// <p>Specifies the algorithm to use to when encrypting the object (for example,
    ///          AES256).</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
    ///          value is used to store the object and then it is discarded; Amazon S3 does not store the
    ///          encryption key. The key must be appropriate for use with the algorithm specified in the
    ///             <code>x-amz-server-side-encryption-customer-algorithm header</code>. This must be the
    ///          same encryption key specified in the initiate multipart upload request.</p>
    public let sSECustomerKey: Swift.String?
    /// <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
    ///          this header for a message integrity check to ensure that the encryption key was transmitted
    ///          without error.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>Upload ID identifying the multipart upload whose part is being uploaded.</p>
    public let uploadId: Swift.String?

    public init (
        body: ClientRuntime.ByteStream? = nil,
        bucket: Swift.String? = nil,
        contentLength: Swift.Int = 0,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        partNumber: Swift.Int = 0,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKey: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.body = body
        self.bucket = bucket
        self.contentLength = contentLength
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.partNumber = partNumber
        self.requestPayer = requestPayer
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKey = sSECustomerKey
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.uploadId = uploadId
    }
}

struct UploadPartInputBody: Swift.Equatable {
    public let body: ClientRuntime.ByteStream?
}

extension UploadPartInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.body) {
            do {
                let bodyDecoded = try containerValues.decodeIfPresent(ClientRuntime.ByteStream.self, forKey: .body)
                body = bodyDecoded
            } catch {
                body = ClientRuntime.ByteStream.from(data: "".data(using: .utf8)!)
            }
        } else {
            body = nil
        }
    }
}

extension UploadPartOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UploadPartOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UploadPartOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UploadPartOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadPartOutputResponse(bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), eTag: \(Swift.String(describing: eTag)), requestCharged: \(Swift.String(describing: requestCharged)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), sSEKMSKeyId: \(Swift.String(describing: sSEKMSKeyId)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)))"}
}

extension UploadPartOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            self.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        } else {
            self.bucketKeyEnabled = false
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            self.eTag = eTagHeaderValue
        } else {
            self.eTag = nil
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            self.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        } else {
            self.requestCharged = nil
        }
        if let sSECustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            self.sSECustomerAlgorithm = sSECustomerAlgorithmHeaderValue
        } else {
            self.sSECustomerAlgorithm = nil
        }
        if let sSECustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5HeaderValue
        } else {
            self.sSECustomerKeyMD5 = nil
        }
        if let sSEKMSKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            self.sSEKMSKeyId = sSEKMSKeyIdHeaderValue
        } else {
            self.sSEKMSKeyId = nil
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            self.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        } else {
            self.serverSideEncryption = nil
        }
    }
}

public struct UploadPartOutputResponse: Swift.Equatable {
    /// <p>Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>
    public let bucketKeyEnabled: Swift.Bool
    /// <p>Entity tag for the uploaded object.</p>
    public let eTag: Swift.String?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header confirming the encryption algorithm used.</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header to provide round-trip message integrity verification of
    ///          the customer-provided encryption key.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric
    ///          customer managed customer master key (CMK) was used for the object.</p>
    public let sSEKMSKeyId: Swift.String?
    /// <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
    ///          AES256, aws:kms).</p>
    public let serverSideEncryption: S3ClientTypes.ServerSideEncryption?

    public init (
        bucketKeyEnabled: Swift.Bool = false,
        eTag: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        sSEKMSKeyId: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil
    )
    {
        self.bucketKeyEnabled = bucketKeyEnabled
        self.eTag = eTag
        self.requestCharged = requestCharged
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
    }
}

struct UploadPartOutputResponseBody: Swift.Equatable {
}

extension UploadPartOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension S3ClientTypes.VersioningConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mFADelete = "MfaDelete"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let mFADelete = mFADelete {
            try container.encode(mFADelete, forKey: ClientRuntime.Key("MfaDelete"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mFADeleteDecoded = try containerValues.decodeIfPresent(S3ClientTypes.MFADelete.self, forKey: .mFADelete)
        mFADelete = mFADeleteDecoded
        let statusDecoded = try containerValues.decodeIfPresent(S3ClientTypes.BucketVersioningStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension S3ClientTypes.VersioningConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VersioningConfiguration(mFADelete: \(Swift.String(describing: mFADelete)), status: \(Swift.String(describing: status)))"}
}

extension S3ClientTypes.VersioningConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Describes the versioning state of an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html">PUT
    ///             Bucket versioning</a> in the <i>Amazon S3 API Reference</i>.</p>
    public struct VersioningConfiguration: Swift.Equatable {
        /// <p>Specifies whether MFA delete is enabled in the bucket versioning configuration. This
        ///          element is only returned if the bucket has been configured with MFA delete. If the bucket
        ///          has never been so configured, this element is not returned.</p>
        public let mFADelete: S3ClientTypes.MFADelete?
        /// <p>The versioning state of the bucket.</p>
        public let status: S3ClientTypes.BucketVersioningStatus?

        public init (
            mFADelete: S3ClientTypes.MFADelete? = nil,
            status: S3ClientTypes.BucketVersioningStatus? = nil
        )
        {
            self.mFADelete = mFADelete
            self.status = status
        }
    }

}

extension S3ClientTypes.WebsiteConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorDocument = "ErrorDocument"
        case indexDocument = "IndexDocument"
        case redirectAllRequestsTo = "RedirectAllRequestsTo"
        case routingRules = "RoutingRules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let errorDocument = errorDocument {
            try container.encode(errorDocument, forKey: ClientRuntime.Key("ErrorDocument"))
        }
        if let indexDocument = indexDocument {
            try container.encode(indexDocument, forKey: ClientRuntime.Key("IndexDocument"))
        }
        if let redirectAllRequestsTo = redirectAllRequestsTo {
            try container.encode(redirectAllRequestsTo, forKey: ClientRuntime.Key("RedirectAllRequestsTo"))
        }
        if let routingRules = routingRules {
            var routingRulesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RoutingRules"))
            for routingrule0 in routingRules {
                try routingRulesContainer.encode(routingrule0, forKey: ClientRuntime.Key("RoutingRule"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDocumentDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ErrorDocument.self, forKey: .errorDocument)
        errorDocument = errorDocumentDecoded
        let indexDocumentDecoded = try containerValues.decodeIfPresent(S3ClientTypes.IndexDocument.self, forKey: .indexDocument)
        indexDocument = indexDocumentDecoded
        let redirectAllRequestsToDecoded = try containerValues.decodeIfPresent(S3ClientTypes.RedirectAllRequestsTo.self, forKey: .redirectAllRequestsTo)
        redirectAllRequestsTo = redirectAllRequestsToDecoded
        if containerValues.contains(.routingRules) {
            struct KeyVal0{struct RoutingRule{}}
            let routingRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RoutingRule>.CodingKeys.self, forKey: .routingRules)
            if let routingRulesWrappedContainer = routingRulesWrappedContainer {
                let routingRulesContainer = try routingRulesWrappedContainer.decodeIfPresent([S3ClientTypes.RoutingRule].self, forKey: .member)
                var routingRulesBuffer:[S3ClientTypes.RoutingRule]? = nil
                if let routingRulesContainer = routingRulesContainer {
                    routingRulesBuffer = [S3ClientTypes.RoutingRule]()
                    for structureContainer0 in routingRulesContainer {
                        routingRulesBuffer?.append(structureContainer0)
                    }
                }
                routingRules = routingRulesBuffer
            } else {
                routingRules = []
            }
        } else {
            routingRules = nil
        }
    }
}

extension S3ClientTypes.WebsiteConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WebsiteConfiguration(errorDocument: \(Swift.String(describing: errorDocument)), indexDocument: \(Swift.String(describing: indexDocument)), redirectAllRequestsTo: \(Swift.String(describing: redirectAllRequestsTo)), routingRules: \(Swift.String(describing: routingRules)))"}
}

extension S3ClientTypes.WebsiteConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension S3ClientTypes {
    /// <p>Specifies website configuration parameters for an Amazon S3 bucket.</p>
    public struct WebsiteConfiguration: Swift.Equatable {
        /// <p>The name of the error document for the website.</p>
        public let errorDocument: S3ClientTypes.ErrorDocument?
        /// <p>The name of the index document for the website.</p>
        public let indexDocument: S3ClientTypes.IndexDocument?
        /// <p>The redirect behavior for every request to this bucket's website endpoint.</p>
        ///          <important>
        ///             <p>If you specify this property, you can't specify any other property.</p>
        ///          </important>
        public let redirectAllRequestsTo: S3ClientTypes.RedirectAllRequestsTo?
        /// <p>Rules that define when a redirect is applied and the redirect behavior.</p>
        public let routingRules: [S3ClientTypes.RoutingRule]?

        public init (
            errorDocument: S3ClientTypes.ErrorDocument? = nil,
            indexDocument: S3ClientTypes.IndexDocument? = nil,
            redirectAllRequestsTo: S3ClientTypes.RedirectAllRequestsTo? = nil,
            routingRules: [S3ClientTypes.RoutingRule]? = nil
        )
        {
            self.errorDocument = errorDocument
            self.indexDocument = indexDocument
            self.redirectAllRequestsTo = redirectAllRequestsTo
            self.routingRules = routingRules
        }
    }

}

public struct WriteGetObjectResponseInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "WriteGetObjectResponseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<WriteGetObjectResponseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<WriteGetObjectResponseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let body = input.operationInput.body {
            let bodydata = body
            let bodybody = ClientRuntime.HttpBody.stream(bodydata)
            input.builder.withBody(bodybody)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<WriteGetObjectResponseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<WriteGetObjectResponseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<WriteGetObjectResponseOutputError>
}

extension WriteGetObjectResponseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WriteGetObjectResponseInput(acceptRanges: \(Swift.String(describing: acceptRanges)), body: \(Swift.String(describing: body)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentLength: \(Swift.String(describing: contentLength)), contentRange: \(Swift.String(describing: contentRange)), contentType: \(Swift.String(describing: contentType)), deleteMarker: \(Swift.String(describing: deleteMarker)), eTag: \(Swift.String(describing: eTag)), errorCode: \(Swift.String(describing: errorCode)), errorMessage: \(Swift.String(describing: errorMessage)), expiration: \(Swift.String(describing: expiration)), expires: \(Swift.String(describing: expires)), lastModified: \(Swift.String(describing: lastModified)), metadata: \(Swift.String(describing: metadata)), missingMeta: \(Swift.String(describing: missingMeta)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), partsCount: \(Swift.String(describing: partsCount)), replicationStatus: \(Swift.String(describing: replicationStatus)), requestCharged: \(Swift.String(describing: requestCharged)), requestRoute: \(Swift.String(describing: requestRoute)), requestToken: \(Swift.String(describing: requestToken)), restore: \(Swift.String(describing: restore)), sSECustomerAlgorithm: \(Swift.String(describing: sSECustomerAlgorithm)), sSECustomerKeyMD5: \(Swift.String(describing: sSECustomerKeyMD5)), sSEKMSKeyId: \(Swift.String(describing: sSEKMSKeyId)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), statusCode: \(Swift.String(describing: statusCode)), storageClass: \(Swift.String(describing: storageClass)), tagCount: \(Swift.String(describing: tagCount)), versionId: \(Swift.String(describing: versionId)))"}
}

extension WriteGetObjectResponseInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension WriteGetObjectResponseInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let body = body {
            try container.encode(body, forKey: ClientRuntime.Key("Body"))
        }
    }
}

public struct WriteGetObjectResponseInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "WriteGetObjectResponseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<WriteGetObjectResponseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<WriteGetObjectResponseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let acceptRanges = input.operationInput.acceptRanges {
            input.builder.withHeader(name: "x-amz-fwd-header-accept-ranges", value: Swift.String(acceptRanges))
        }
        if input.operationInput.bucketKeyEnabled != false {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled", value: Swift.String(input.operationInput.bucketKeyEnabled))
        }
        if let cacheControl = input.operationInput.cacheControl {
            input.builder.withHeader(name: "x-amz-fwd-header-Cache-Control", value: Swift.String(cacheControl))
        }
        if let contentDisposition = input.operationInput.contentDisposition {
            input.builder.withHeader(name: "x-amz-fwd-header-Content-Disposition", value: Swift.String(contentDisposition))
        }
        if let contentEncoding = input.operationInput.contentEncoding {
            input.builder.withHeader(name: "x-amz-fwd-header-Content-Encoding", value: Swift.String(contentEncoding))
        }
        if let contentLanguage = input.operationInput.contentLanguage {
            input.builder.withHeader(name: "x-amz-fwd-header-Content-Language", value: Swift.String(contentLanguage))
        }
        if input.operationInput.contentLength != 0 {
            input.builder.withHeader(name: "Content-Length", value: Swift.String(input.operationInput.contentLength))
        }
        if let contentRange = input.operationInput.contentRange {
            input.builder.withHeader(name: "x-amz-fwd-header-Content-Range", value: Swift.String(contentRange))
        }
        if let contentType = input.operationInput.contentType {
            input.builder.withHeader(name: "x-amz-fwd-header-Content-Type", value: Swift.String(contentType))
        }
        if input.operationInput.deleteMarker != false {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-delete-marker", value: Swift.String(input.operationInput.deleteMarker))
        }
        if let eTag = input.operationInput.eTag {
            input.builder.withHeader(name: "x-amz-fwd-header-ETag", value: Swift.String(eTag))
        }
        if let errorCode = input.operationInput.errorCode {
            input.builder.withHeader(name: "x-amz-fwd-error-code", value: Swift.String(errorCode))
        }
        if let errorMessage = input.operationInput.errorMessage {
            input.builder.withHeader(name: "x-amz-fwd-error-message", value: Swift.String(errorMessage))
        }
        if let expiration = input.operationInput.expiration {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-expiration", value: Swift.String(expiration))
        }
        if let expires = input.operationInput.expires {
            input.builder.withHeader(name: "x-amz-fwd-header-Expires", value: Swift.String(expires.rfc5322()))
        }
        if let lastModified = input.operationInput.lastModified {
            input.builder.withHeader(name: "x-amz-fwd-header-Last-Modified", value: Swift.String(lastModified.rfc5322()))
        }
        if input.operationInput.missingMeta != 0 {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-missing-meta", value: Swift.String(input.operationInput.missingMeta))
        }
        if let objectLockLegalHoldStatus = input.operationInput.objectLockLegalHoldStatus {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-object-lock-legal-hold", value: Swift.String(objectLockLegalHoldStatus.rawValue))
        }
        if let objectLockMode = input.operationInput.objectLockMode {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-object-lock-mode", value: Swift.String(objectLockMode.rawValue))
        }
        if let objectLockRetainUntilDate = input.operationInput.objectLockRetainUntilDate {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-object-lock-retain-until-date", value: Swift.String(objectLockRetainUntilDate.iso8601WithoutFractionalSeconds()))
        }
        if input.operationInput.partsCount != 0 {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-mp-parts-count", value: Swift.String(input.operationInput.partsCount))
        }
        if let replicationStatus = input.operationInput.replicationStatus {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-replication-status", value: Swift.String(replicationStatus.rawValue))
        }
        if let requestCharged = input.operationInput.requestCharged {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-request-charged", value: Swift.String(requestCharged.rawValue))
        }
        if let requestRoute = input.operationInput.requestRoute {
            input.builder.withHeader(name: "x-amz-request-route", value: Swift.String(requestRoute))
        }
        if let requestToken = input.operationInput.requestToken {
            input.builder.withHeader(name: "x-amz-request-token", value: Swift.String(requestToken))
        }
        if let restore = input.operationInput.restore {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-restore", value: Swift.String(restore))
        }
        if let sSECustomerAlgorithm = input.operationInput.sSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sSECustomerAlgorithm))
        }
        if let sSECustomerKeyMD5 = input.operationInput.sSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sSECustomerKeyMD5))
        }
        if let sSEKMSKeyId = input.operationInput.sSEKMSKeyId {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id", value: Swift.String(sSEKMSKeyId))
        }
        if let serverSideEncryption = input.operationInput.serverSideEncryption {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-server-side-encryption", value: Swift.String(serverSideEncryption.rawValue))
        }
        if input.operationInput.statusCode != 0 {
            input.builder.withHeader(name: "x-amz-fwd-status", value: Swift.String(input.operationInput.statusCode))
        }
        if let storageClass = input.operationInput.storageClass {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-storage-class", value: Swift.String(storageClass.rawValue))
        }
        if input.operationInput.tagCount != 0 {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-tagging-count", value: Swift.String(input.operationInput.tagCount))
        }
        if let versionId = input.operationInput.versionId {
            input.builder.withHeader(name: "x-amz-fwd-header-x-amz-version-id", value: Swift.String(versionId))
        }
        if let metadata = input.operationInput.metadata {
            for (prefixHeaderMapKey, prefixHeaderMapValue) in metadata {
                input.builder.withHeader(name: "x-amz-meta-\(prefixHeaderMapKey)", value: Swift.String(prefixHeaderMapValue))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<WriteGetObjectResponseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<WriteGetObjectResponseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<WriteGetObjectResponseOutputError>
}

public struct WriteGetObjectResponseInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "WriteGetObjectResponseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<WriteGetObjectResponseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<WriteGetObjectResponseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "x-id", value: "WriteGetObjectResponse"))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<WriteGetObjectResponseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<WriteGetObjectResponseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<WriteGetObjectResponseOutputError>
}

public struct WriteGetObjectResponseInput: Swift.Equatable {
    /// <p>Indicates that a range of bytes was specified.</p>
    public let acceptRanges: Swift.String?
    /// <p>The object data.</p>
    public let body: ClientRuntime.ByteStream?
    /// <p> Indicates whether the object stored in Amazon S3 uses an S3 bucket key for server-side
    ///          encryption with AWS KMS (SSE-KMS).</p>
    public let bucketKeyEnabled: Swift.Bool
    /// <p>Specifies caching behavior along the request/reply chain.</p>
    public let cacheControl: Swift.String?
    /// <p>Specifies presentational information for the object.</p>
    public let contentDisposition: Swift.String?
    /// <p>Specifies what content encodings have been applied to the object and thus what decoding
    ///           mechanisms must be applied to obtain the media-type referenced by the Content-Type header
    ///           field.</p>
    public let contentEncoding: Swift.String?
    /// <p>The language the content is in.</p>
    public let contentLanguage: Swift.String?
    /// <p>The size of the content body in bytes.</p>
    public let contentLength: Swift.Int
    /// <p>The portion of the object returned in the response.</p>
    public let contentRange: Swift.String?
    /// <p>A standard MIME type describing the format of the object data.</p>
    public let contentType: Swift.String?
    /// <p>Specifies whether an object stored in Amazon S3 is (<code>true</code>) or is not
    ///             (<code>false</code>) a delete marker. </p>
    public let deleteMarker: Swift.Bool
    /// <p>An opaque identifier assigned by a web server to a specific version of a resource found
    ///          at a URL. </p>
    public let eTag: Swift.String?
    /// <p>A string that uniquely identifies an error condition. Returned in the <Code> tag
    ///          of the error XML response for a corresponding <code>GetObject</code> call. Cannot be used
    ///          with a successful <code>StatusCode</code> header or when the transformed object is provided
    ///           in the body. All error codes from S3 are sentence-cased. Regex value is "^[A-Z][a-zA-Z]+$".</p>
    public let errorCode: Swift.String?
    /// <p>Contains a generic description of the error condition. Returned in the <Message>
    ///          tag of the error XML response for a corresponding <code>GetObject</code> call. Cannot be
    ///          used with a successful <code>StatusCode</code> header or when the transformed object is
    ///          provided in body.</p>
    public let errorMessage: Swift.String?
    /// <p>If object stored in Amazon S3 expiration is configured (see PUT Bucket lifecycle) it includes expiry-date and rule-id key-value pairs providing object expiration information. The value of the rule-id is URL encoded. </p>
    public let expiration: Swift.String?
    /// <p>The date and time at which the object is no longer cacheable.</p>
    public let expires: ClientRuntime.Date?
    /// <p>The date and time that the object was last modified.</p>
    public let lastModified: ClientRuntime.Date?
    /// <p>A map of metadata to store with the object in S3.</p>
    public let metadata: [Swift.String:Swift.String]?
    /// <p>Set to the number of metadata entries not returned in <code>x-amz-meta</code> headers.
    ///          This can happen if you create metadata using an API like SOAP that supports more flexible
    ///          metadata than the REST API. For example, using SOAP, you can create metadata whose values
    ///          are not legal HTTP headers.</p>
    public let missingMeta: Swift.Int
    /// <p>Indicates whether an object stored in Amazon S3 has an active legal hold.</p>
    public let objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// <p>Indicates whether an object stored in Amazon S3 has Object Lock enabled. For more
    ///           information about S3 Object Lock, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock.html">Object Lock</a>.</p>
    public let objectLockMode: S3ClientTypes.ObjectLockMode?
    /// <p>The date and time when Object Lock is configured to expire.</p>
    public let objectLockRetainUntilDate: ClientRuntime.Date?
    /// <p>The count of parts this object has.</p>
    public let partsCount: Swift.Int
    /// <p>Indicates if request involves bucket that is either a source or destination in a Replication rule. For more
    ///           information about S3 Replication, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication.html">Replication</a>.</p>
    public let replicationStatus: S3ClientTypes.ReplicationStatus?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: S3ClientTypes.RequestCharged?
    /// <p>Route prefix to the HTTP URL generated.</p>
    public let requestRoute: Swift.String?
    /// <p>A single use encrypted token that maps <code>WriteGetObjectResponse</code> to the end
    ///          user <code>GetObject</code> request.</p>
    public let requestToken: Swift.String?
    /// <p>Provides information about object restoration operation and expiration time of the
    ///           restored object copy.</p>
    public let restore: Swift.String?
    /// <p>Encryption algorithm used if server-side encryption with a customer-provided encryption key was specified for object stored in Amazon S3.</p>
    public let sSECustomerAlgorithm: Swift.String?
    /// <p> 128-bit MD5 digest of customer-provided encryption key used in Amazon S3 to encrypt data
    ///          stored in S3. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerSideEncryptionCustomerKeys.html">Protecting data
    ///             using server-side encryption with customer-provided encryption keys
    ///          (SSE-C)</a>.</p>
    public let sSECustomerKeyMD5: Swift.String?
    /// <p> If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric customer managed customer master key (CMK) that was used for stored in Amazon S3 object. </p>
    public let sSEKMSKeyId: Swift.String?
    /// <p> The server-side encryption algorithm used when storing requested object in Amazon S3 (for example, AES256, aws:kms).</p>
    public let serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// <p>The integer status code for an HTTP response of a corresponding <code>GetObject</code>
    ///          request.</p>
    ///              <p class="title">
    ///             <b>Status Codes</b>
    ///          </p>
    ///          <ul>
    ///             <li>
    ///                    <p>
    ///                   <i>200 - OK</i>
    ///                </p>
    ///                 </li>
    ///             <li>
    ///                    <p>
    ///                   <i>206 - Partial Content</i>
    ///                </p>
    ///                 </li>
    ///             <li>
    ///                    <p>
    ///                   <i>304 - Not Modified</i>
    ///                </p>
    ///                 </li>
    ///             <li>
    ///                    <p>
    ///                   <i>400 - Bad Request</i>
    ///                    </p>
    ///                 </li>
    ///             <li>
    ///                    <p>
    ///                   <i>401 - Unauthorized</i>
    ///                    </p>
    ///                 </li>
    ///             <li>
    ///                    <p>
    ///                   <i>403 - Forbidden</i>
    ///                    </p>
    ///                 </li>
    ///             <li>
    ///                    <p>
    ///                   <i>404 - Not Found</i>
    ///                    </p>
    ///                 </li>
    ///             <li>
    ///                    <p>
    ///                   <i>405 - Method Not Allowed</i>
    ///                    </p>
    ///                 </li>
    ///             <li>
    ///                    <p>
    ///                   <i>409 - Conflict</i>
    ///                    </p>
    ///                 </li>
    ///             <li>
    ///                    <p>
    ///                   <i>411 - Length Required</i>
    ///                    </p>
    ///                 </li>
    ///             <li>
    ///                    <p>
    ///                   <i>412 - Precondition Failed</i>
    ///                    </p>
    ///                 </li>
    ///             <li>
    ///                    <p>
    ///                   <i>416 - Range Not Satisfiable</i>
    ///                    </p>
    ///                 </li>
    ///             <li>
    ///                    <p>
    ///                   <i>500 - Internal Server Error</i>
    ///                    </p>
    ///                 </li>
    ///             <li>
    ///                    <p>
    ///                   <i>503 - Service Unavailable</i>
    ///                    </p>
    ///                 </li>
    ///          </ul>
    public let statusCode: Swift.Int
    /// <p> The class of storage used to store object in Amazon S3.</p>
    public let storageClass: S3ClientTypes.StorageClass?
    /// <p>The number of tags, if any, on the object.</p>
    public let tagCount: Swift.Int
    /// <p>An ID used to reference a specific version of the object.</p>
    public let versionId: Swift.String?

    public init (
        acceptRanges: Swift.String? = nil,
        body: ClientRuntime.ByteStream? = nil,
        bucketKeyEnabled: Swift.Bool = false,
        cacheControl: Swift.String? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentLength: Swift.Int = 0,
        contentRange: Swift.String? = nil,
        contentType: Swift.String? = nil,
        deleteMarker: Swift.Bool = false,
        eTag: Swift.String? = nil,
        errorCode: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        expiration: Swift.String? = nil,
        expires: ClientRuntime.Date? = nil,
        lastModified: ClientRuntime.Date? = nil,
        metadata: [Swift.String:Swift.String]? = nil,
        missingMeta: Swift.Int = 0,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: ClientRuntime.Date? = nil,
        partsCount: Swift.Int = 0,
        replicationStatus: S3ClientTypes.ReplicationStatus? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        requestRoute: Swift.String? = nil,
        requestToken: Swift.String? = nil,
        restore: Swift.String? = nil,
        sSECustomerAlgorithm: Swift.String? = nil,
        sSECustomerKeyMD5: Swift.String? = nil,
        sSEKMSKeyId: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        statusCode: Swift.Int = 0,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagCount: Swift.Int = 0,
        versionId: Swift.String? = nil
    )
    {
        self.acceptRanges = acceptRanges
        self.body = body
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentLength = contentLength
        self.contentRange = contentRange
        self.contentType = contentType
        self.deleteMarker = deleteMarker
        self.eTag = eTag
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.expiration = expiration
        self.expires = expires
        self.lastModified = lastModified
        self.metadata = metadata
        self.missingMeta = missingMeta
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.partsCount = partsCount
        self.replicationStatus = replicationStatus
        self.requestCharged = requestCharged
        self.requestRoute = requestRoute
        self.requestToken = requestToken
        self.restore = restore
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
        self.statusCode = statusCode
        self.storageClass = storageClass
        self.tagCount = tagCount
        self.versionId = versionId
    }
}

struct WriteGetObjectResponseInputBody: Swift.Equatable {
    public let body: ClientRuntime.ByteStream?
}

extension WriteGetObjectResponseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.body) {
            do {
                let bodyDecoded = try containerValues.decodeIfPresent(ClientRuntime.ByteStream.self, forKey: .body)
                body = bodyDecoded
            } catch {
                body = ClientRuntime.ByteStream.from(data: "".data(using: .utf8)!)
            }
        } else {
            body = nil
        }
    }
}

extension WriteGetObjectResponseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension WriteGetObjectResponseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum WriteGetObjectResponseOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension WriteGetObjectResponseOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WriteGetObjectResponseOutputResponse()"}
}

extension WriteGetObjectResponseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct WriteGetObjectResponseOutputResponse: Swift.Equatable {

    public init() {}
}

struct WriteGetObjectResponseOutputResponseBody: Swift.Equatable {
}

extension WriteGetObjectResponseOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}
