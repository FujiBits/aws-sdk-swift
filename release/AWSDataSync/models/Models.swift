// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension DataSyncClientTypes.AgentListEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArn = agentArn {
            try encodeContainer.encode(agentArn, forKey: .agentArn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentArn)
        agentArn = agentArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AgentStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension DataSyncClientTypes.AgentListEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AgentListEntry(agentArn: \(Swift.String(describing: agentArn)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)))"}
}

extension DataSyncClientTypes {
    /// Represents a single entry in a list of agents. AgentListEntry returns an array that contains a list of agents when the [ListAgents](https://docs.aws.amazon.com/datasync/latest/userguide/API_ListAgents.html) operation is called.
    public struct AgentListEntry: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the agent.
        public var agentArn: Swift.String?
        /// The name of the agent.
        public var name: Swift.String?
        /// The status of the agent.
        public var status: DataSyncClientTypes.AgentStatus?

        public init (
            agentArn: Swift.String? = nil,
            name: Swift.String? = nil,
            status: DataSyncClientTypes.AgentStatus? = nil
        )
        {
            self.agentArn = agentArn
            self.name = name
            self.status = status
        }
    }

}

extension DataSyncClientTypes {
    public enum AgentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case offline
        case online
        case sdkUnknown(Swift.String)

        public static var allCases: [AgentStatus] {
            return [
                .offline,
                .online,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .offline: return "OFFLINE"
            case .online: return "ONLINE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AgentStatus(rawValue: rawValue) ?? AgentStatus.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum Atime: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bestEffort
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Atime] {
            return [
                .bestEffort,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bestEffort: return "BEST_EFFORT"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Atime(rawValue: rawValue) ?? Atime.sdkUnknown(rawValue)
        }
    }
}

public struct CancelTaskExecutionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelTaskExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelTaskExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelTaskExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelTaskExecutionOutputError>
}

extension CancelTaskExecutionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelTaskExecutionInput(taskExecutionArn: \(Swift.String(describing: taskExecutionArn)))"}
}

extension CancelTaskExecutionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskExecutionArn = "TaskExecutionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskExecutionArn = taskExecutionArn {
            try encodeContainer.encode(taskExecutionArn, forKey: .taskExecutionArn)
        }
    }
}

public struct CancelTaskExecutionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelTaskExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelTaskExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelTaskExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelTaskExecutionOutputError>
}

public struct CancelTaskExecutionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelTaskExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelTaskExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelTaskExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelTaskExecutionOutputError>
}

public struct CancelTaskExecutionInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelTaskExecutionInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CancelTaskExecutionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CancelTaskExecutionInput
    public typealias MOutput = ClientRuntime.OperationOutput<CancelTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelTaskExecutionOutputError>
}

public struct CancelTaskExecutionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelTaskExecutionInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CancelTaskExecutionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CancelTaskExecutionInput
    public typealias MOutput = ClientRuntime.OperationOutput<CancelTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelTaskExecutionOutputError>
}

/// CancelTaskExecutionRequest
public struct CancelTaskExecutionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the task execution to cancel.
    /// This member is required.
    public var taskExecutionArn: Swift.String?

    public init (
        taskExecutionArn: Swift.String? = nil
    )
    {
        self.taskExecutionArn = taskExecutionArn
    }
}

struct CancelTaskExecutionInputBody: Swift.Equatable {
    public let taskExecutionArn: Swift.String?
}

extension CancelTaskExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskExecutionArn = "TaskExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskExecutionArn)
        taskExecutionArn = taskExecutionArnDecoded
    }
}

extension CancelTaskExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelTaskExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelTaskExecutionOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelTaskExecutionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelTaskExecutionOutputResponse()"}
}

extension CancelTaskExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CancelTaskExecutionOutputResponse: Swift.Equatable {

    public init() {}
}

struct CancelTaskExecutionOutputResponseBody: Swift.Equatable {
}

extension CancelTaskExecutionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateAgentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAgentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAgentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAgentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAgentOutputError>
}

extension CreateAgentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAgentInput(activationKey: \(Swift.String(describing: activationKey)), agentName: \(Swift.String(describing: agentName)), securityGroupArns: \(Swift.String(describing: securityGroupArns)), subnetArns: \(Swift.String(describing: subnetArns)), tags: \(Swift.String(describing: tags)), vpcEndpointId: \(Swift.String(describing: vpcEndpointId)))"}
}

extension CreateAgentInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activationKey = "ActivationKey"
        case agentName = "AgentName"
        case securityGroupArns = "SecurityGroupArns"
        case subnetArns = "SubnetArns"
        case tags = "Tags"
        case vpcEndpointId = "VpcEndpointId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activationKey = activationKey {
            try encodeContainer.encode(activationKey, forKey: .activationKey)
        }
        if let agentName = agentName {
            try encodeContainer.encode(agentName, forKey: .agentName)
        }
        if let securityGroupArns = securityGroupArns {
            var securityGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupArns)
            for plsecuritygrouparnlist0 in securityGroupArns {
                try securityGroupArnsContainer.encode(plsecuritygrouparnlist0)
            }
        }
        if let subnetArns = subnetArns {
            var subnetArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetArns)
            for plsubnetarnlist0 in subnetArns {
                try subnetArnsContainer.encode(plsubnetarnlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
        if let vpcEndpointId = vpcEndpointId {
            try encodeContainer.encode(vpcEndpointId, forKey: .vpcEndpointId)
        }
    }
}

public struct CreateAgentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAgentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAgentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAgentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAgentOutputError>
}

public struct CreateAgentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAgentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAgentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAgentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAgentOutputError>
}

public struct CreateAgentInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAgentInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateAgentInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateAgentInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAgentOutputError>
}

public struct CreateAgentInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAgentInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateAgentInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateAgentInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAgentOutputError>
}

/// CreateAgentRequest
public struct CreateAgentInput: Swift.Equatable {
    /// Your agent activation key. You can get the activation key either by sending an HTTP GET request with redirects that enable you to get the agent IP address (port 80). Alternatively, you can get it from the DataSync console. The redirect URL returned in the response provides you the activation key for your agent in the query string parameter activationKey. It might also include other activation-related parameters; however, these are merely defaults. The arguments you pass to this API call determine the actual configuration of your agent. For more information, see Activating an Agent in the DataSync User Guide.
    /// This member is required.
    public var activationKey: Swift.String?
    /// The name you configured for your agent. This value is a text reference that is used to identify the agent in the console.
    public var agentName: Swift.String?
    /// The ARNs of the security groups used to protect your data transfer task subnets. See [SecurityGroupArns](https://docs.aws.amazon.com/datasync/latest/userguide/API_Ec2Config.html#DataSync-Type-Ec2Config-SecurityGroupArns).
    public var securityGroupArns: [Swift.String]?
    /// The Amazon Resource Names (ARNs) of the subnets in which DataSync will create elastic network interfaces for each data transfer task. The agent that runs a task must be private. When you start a task that is associated with an agent created in a VPC, or one that has access to an IP address in a VPC, then the task is also private. In this case, DataSync creates four network interfaces for each task in your subnet. For a data transfer to work, the agent must be able to route to all these four network interfaces.
    public var subnetArns: [Swift.String]?
    /// The key-value pair that represents the tag that you want to associate with the agent. The value can be an empty string. This value helps you manage, filter, and search for your agents. Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @.
    public var tags: [DataSyncClientTypes.TagListEntry]?
    /// The ID of the VPC (virtual private cloud) endpoint that the agent has access to. This is the client-side VPC endpoint, also called a PrivateLink. If you don't have a PrivateLink VPC endpoint, see [Creating a VPC Endpoint Service Configuration](https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html#create-endpoint-service) in the Amazon VPC User Guide. VPC endpoint ID looks like this: vpce-01234d5aff67890e1.
    public var vpcEndpointId: Swift.String?

    public init (
        activationKey: Swift.String? = nil,
        agentName: Swift.String? = nil,
        securityGroupArns: [Swift.String]? = nil,
        subnetArns: [Swift.String]? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil,
        vpcEndpointId: Swift.String? = nil
    )
    {
        self.activationKey = activationKey
        self.agentName = agentName
        self.securityGroupArns = securityGroupArns
        self.subnetArns = subnetArns
        self.tags = tags
        self.vpcEndpointId = vpcEndpointId
    }
}

struct CreateAgentInputBody: Swift.Equatable {
    public let activationKey: Swift.String?
    public let agentName: Swift.String?
    public let tags: [DataSyncClientTypes.TagListEntry]?
    public let vpcEndpointId: Swift.String?
    public let subnetArns: [Swift.String]?
    public let securityGroupArns: [Swift.String]?
}

extension CreateAgentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activationKey = "ActivationKey"
        case agentName = "AgentName"
        case securityGroupArns = "SecurityGroupArns"
        case subnetArns = "SubnetArns"
        case tags = "Tags"
        case vpcEndpointId = "VpcEndpointId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activationKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activationKey)
        activationKey = activationKeyDecoded
        let agentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentName)
        agentName = agentNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let subnetArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetArns)
        var subnetArnsDecoded0:[Swift.String]? = nil
        if let subnetArnsContainer = subnetArnsContainer {
            subnetArnsDecoded0 = [Swift.String]()
            for string0 in subnetArnsContainer {
                if let string0 = string0 {
                    subnetArnsDecoded0?.append(string0)
                }
            }
        }
        subnetArns = subnetArnsDecoded0
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
    }
}

extension CreateAgentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAgentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAgentOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAgentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAgentOutputResponse(agentArn: \(Swift.String(describing: agentArn)))"}
}

extension CreateAgentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateAgentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentArn = output.agentArn
        } else {
            self.agentArn = nil
        }
    }
}

/// CreateAgentResponse
public struct CreateAgentOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the agent. Use the ListAgents operation to return a list of agents for your account and Amazon Web Services Region.
    public var agentArn: Swift.String?

    public init (
        agentArn: Swift.String? = nil
    )
    {
        self.agentArn = agentArn
    }
}

struct CreateAgentOutputResponseBody: Swift.Equatable {
    public let agentArn: Swift.String?
}

extension CreateAgentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentArn)
        agentArn = agentArnDecoded
    }
}

public struct CreateLocationEfsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationEfsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationEfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationEfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationEfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationEfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationEfsOutputError>
}

extension CreateLocationEfsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationEfsInput(ec2Config: \(Swift.String(describing: ec2Config)), efsFilesystemArn: \(Swift.String(describing: efsFilesystemArn)), subdirectory: \(Swift.String(describing: subdirectory)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateLocationEfsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ec2Config = "Ec2Config"
        case efsFilesystemArn = "EfsFilesystemArn"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ec2Config = ec2Config {
            try encodeContainer.encode(ec2Config, forKey: .ec2Config)
        }
        if let efsFilesystemArn = efsFilesystemArn {
            try encodeContainer.encode(efsFilesystemArn, forKey: .efsFilesystemArn)
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
    }
}

public struct CreateLocationEfsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationEfsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationEfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationEfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationEfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationEfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationEfsOutputError>
}

public struct CreateLocationEfsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationEfsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationEfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationEfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationEfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationEfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationEfsOutputError>
}

public struct CreateLocationEfsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationEfsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateLocationEfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationEfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLocationEfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationEfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationEfsOutputError>
}

public struct CreateLocationEfsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationEfsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateLocationEfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationEfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLocationEfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationEfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationEfsOutputError>
}

/// CreateLocationEfsRequest
public struct CreateLocationEfsInput: Swift.Equatable {
    /// The subnet and security group that the Amazon EFS file system uses. The security group that you provide needs to be able to communicate with the security group on the mount target in the subnet specified. The exact relationship between security group M (of the mount target) and security group S (which you provide for DataSync to use at this stage) is as follows:
    ///
    /// * Security group M (which you associate with the mount target) must allow inbound access for the Transmission Control Protocol (TCP) on the NFS port (2049) from security group S. You can enable inbound connections either by IP address (CIDR range) or security group.
    ///
    /// * Security group S (provided to DataSync to access EFS) should have a rule that enables outbound connections to the NFS port on one of the file system’s mount targets. You can enable outbound connections either by IP address (CIDR range) or security group. For information about security groups and mount targets, see Security Groups for Amazon EC2 Instances and Mount Targets in the Amazon EFS User Guide.
    /// This member is required.
    public var ec2Config: DataSyncClientTypes.Ec2Config?
    /// The Amazon Resource Name (ARN) for the Amazon EFS file system.
    /// This member is required.
    public var efsFilesystemArn: Swift.String?
    /// A subdirectory in the location’s path. This subdirectory in the EFS file system is used to read data from the EFS source location or write data to the EFS destination. By default, DataSync uses the root directory. Subdirectory must be specified with forward slashes. For example, /path/to/folder.
    public var subdirectory: Swift.String?
    /// The key-value pair that represents a tag that you want to add to the resource. The value can be an empty string. This value helps you manage, filter, and search for your resources. We recommend that you create a name tag for your location.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init (
        ec2Config: DataSyncClientTypes.Ec2Config? = nil,
        efsFilesystemArn: Swift.String? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.ec2Config = ec2Config
        self.efsFilesystemArn = efsFilesystemArn
        self.subdirectory = subdirectory
        self.tags = tags
    }
}

struct CreateLocationEfsInputBody: Swift.Equatable {
    public let subdirectory: Swift.String?
    public let efsFilesystemArn: Swift.String?
    public let ec2Config: DataSyncClientTypes.Ec2Config?
    public let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationEfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ec2Config = "Ec2Config"
        case efsFilesystemArn = "EfsFilesystemArn"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let efsFilesystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .efsFilesystemArn)
        efsFilesystemArn = efsFilesystemArnDecoded
        let ec2ConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Ec2Config.self, forKey: .ec2Config)
        ec2Config = ec2ConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLocationEfsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLocationEfsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLocationEfsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLocationEfsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationEfsOutputResponse(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension CreateLocationEfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateLocationEfsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

/// CreateLocationEfs
public struct CreateLocationEfsOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Amazon EFS file system location that is created.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationEfsOutputResponseBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension CreateLocationEfsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public struct CreateLocationFsxWindowsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationFsxWindowsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationFsxWindowsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationFsxWindowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationFsxWindowsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationFsxWindowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationFsxWindowsOutputError>
}

extension CreateLocationFsxWindowsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationFsxWindowsInput(domain: \(Swift.String(describing: domain)), fsxFilesystemArn: \(Swift.String(describing: fsxFilesystemArn)), password: \(Swift.String(describing: password)), securityGroupArns: \(Swift.String(describing: securityGroupArns)), subdirectory: \(Swift.String(describing: subdirectory)), tags: \(Swift.String(describing: tags)), user: \(Swift.String(describing: user)))"}
}

extension CreateLocationFsxWindowsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
        case fsxFilesystemArn = "FsxFilesystemArn"
        case password = "Password"
        case securityGroupArns = "SecurityGroupArns"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let fsxFilesystemArn = fsxFilesystemArn {
            try encodeContainer.encode(fsxFilesystemArn, forKey: .fsxFilesystemArn)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let securityGroupArns = securityGroupArns {
            var securityGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupArns)
            for ec2securitygrouparnlist0 in securityGroupArns {
                try securityGroupArnsContainer.encode(ec2securitygrouparnlist0)
            }
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
        if let user = user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }
}

public struct CreateLocationFsxWindowsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationFsxWindowsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationFsxWindowsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationFsxWindowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationFsxWindowsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationFsxWindowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationFsxWindowsOutputError>
}

public struct CreateLocationFsxWindowsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationFsxWindowsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationFsxWindowsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationFsxWindowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationFsxWindowsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationFsxWindowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationFsxWindowsOutputError>
}

public struct CreateLocationFsxWindowsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationFsxWindowsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateLocationFsxWindowsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationFsxWindowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLocationFsxWindowsInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationFsxWindowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationFsxWindowsOutputError>
}

public struct CreateLocationFsxWindowsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationFsxWindowsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateLocationFsxWindowsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationFsxWindowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLocationFsxWindowsInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationFsxWindowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationFsxWindowsOutputError>
}

public struct CreateLocationFsxWindowsInput: Swift.Equatable {
    /// The name of the Windows domain that the FSx for Windows File Server belongs to.
    public var domain: Swift.String?
    /// The Amazon Resource Name (ARN) for the FSx for Windows File Server file system.
    /// This member is required.
    public var fsxFilesystemArn: Swift.String?
    /// The password of the user who has the permissions to access files and folders in the FSx for Windows File Server file system.
    /// This member is required.
    public var password: Swift.String?
    /// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for Windows File Server file system.
    /// This member is required.
    public var securityGroupArns: [Swift.String]?
    /// A subdirectory in the location’s path. This subdirectory in the Amazon FSx for Windows File Server file system is used to read data from the Amazon FSx for Windows File Server source location or write data to the FSx for Windows File Server destination.
    public var subdirectory: Swift.String?
    /// The key-value pair that represents a tag that you want to add to the resource. The value can be an empty string. This value helps you manage, filter, and search for your resources. We recommend that you create a name tag for your location.
    public var tags: [DataSyncClientTypes.TagListEntry]?
    /// The user who has the permissions to access files and folders in the FSx for Windows File Server file system. For information about choosing a user name that ensures sufficient permissions to files, folders, and metadata, see [user].
    /// This member is required.
    public var user: Swift.String?

    public init (
        domain: Swift.String? = nil,
        fsxFilesystemArn: Swift.String? = nil,
        password: Swift.String? = nil,
        securityGroupArns: [Swift.String]? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil,
        user: Swift.String? = nil
    )
    {
        self.domain = domain
        self.fsxFilesystemArn = fsxFilesystemArn
        self.password = password
        self.securityGroupArns = securityGroupArns
        self.subdirectory = subdirectory
        self.tags = tags
        self.user = user
    }
}

struct CreateLocationFsxWindowsInputBody: Swift.Equatable {
    public let subdirectory: Swift.String?
    public let fsxFilesystemArn: Swift.String?
    public let securityGroupArns: [Swift.String]?
    public let tags: [DataSyncClientTypes.TagListEntry]?
    public let user: Swift.String?
    public let domain: Swift.String?
    public let password: Swift.String?
}

extension CreateLocationFsxWindowsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
        case fsxFilesystemArn = "FsxFilesystemArn"
        case password = "Password"
        case securityGroupArns = "SecurityGroupArns"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
        case user = "User"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let fsxFilesystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fsxFilesystemArn)
        fsxFilesystemArn = fsxFilesystemArnDecoded
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
    }
}

extension CreateLocationFsxWindowsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLocationFsxWindowsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLocationFsxWindowsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLocationFsxWindowsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationFsxWindowsOutputResponse(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension CreateLocationFsxWindowsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateLocationFsxWindowsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

public struct CreateLocationFsxWindowsOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the FSx for Windows File Server file system location that is created.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationFsxWindowsOutputResponseBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension CreateLocationFsxWindowsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public struct CreateLocationHdfsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationHdfsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationHdfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationHdfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationHdfsOutputError>
}

extension CreateLocationHdfsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationHdfsInput(agentArns: \(Swift.String(describing: agentArns)), authenticationType: \(Swift.String(describing: authenticationType)), blockSize: \(Swift.String(describing: blockSize)), kerberosKeytab: \(Swift.String(describing: kerberosKeytab)), kerberosKrb5Conf: \(Swift.String(describing: kerberosKrb5Conf)), kerberosPrincipal: \(Swift.String(describing: kerberosPrincipal)), kmsKeyProviderUri: \(Swift.String(describing: kmsKeyProviderUri)), nameNodes: \(Swift.String(describing: nameNodes)), qopConfiguration: \(Swift.String(describing: qopConfiguration)), replicationFactor: \(Swift.String(describing: replicationFactor)), simpleUser: \(Swift.String(describing: simpleUser)), subdirectory: \(Swift.String(describing: subdirectory)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateLocationHdfsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blockSize = "BlockSize"
        case kerberosKeytab = "KerberosKeytab"
        case kerberosKrb5Conf = "KerberosKrb5Conf"
        case kerberosPrincipal = "KerberosPrincipal"
        case kmsKeyProviderUri = "KmsKeyProviderUri"
        case nameNodes = "NameNodes"
        case qopConfiguration = "QopConfiguration"
        case replicationFactor = "ReplicationFactor"
        case simpleUser = "SimpleUser"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarnlist0 in agentArns {
                try agentArnsContainer.encode(agentarnlist0)
            }
        }
        if let authenticationType = authenticationType {
            try encodeContainer.encode(authenticationType.rawValue, forKey: .authenticationType)
        }
        if let blockSize = blockSize {
            try encodeContainer.encode(blockSize, forKey: .blockSize)
        }
        if let kerberosKeytab = kerberosKeytab {
            try encodeContainer.encode(kerberosKeytab.base64EncodedString(), forKey: .kerberosKeytab)
        }
        if let kerberosKrb5Conf = kerberosKrb5Conf {
            try encodeContainer.encode(kerberosKrb5Conf.base64EncodedString(), forKey: .kerberosKrb5Conf)
        }
        if let kerberosPrincipal = kerberosPrincipal {
            try encodeContainer.encode(kerberosPrincipal, forKey: .kerberosPrincipal)
        }
        if let kmsKeyProviderUri = kmsKeyProviderUri {
            try encodeContainer.encode(kmsKeyProviderUri, forKey: .kmsKeyProviderUri)
        }
        if let nameNodes = nameNodes {
            var nameNodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nameNodes)
            for hdfsnamenodelist0 in nameNodes {
                try nameNodesContainer.encode(hdfsnamenodelist0)
            }
        }
        if let qopConfiguration = qopConfiguration {
            try encodeContainer.encode(qopConfiguration, forKey: .qopConfiguration)
        }
        if let replicationFactor = replicationFactor {
            try encodeContainer.encode(replicationFactor, forKey: .replicationFactor)
        }
        if let simpleUser = simpleUser {
            try encodeContainer.encode(simpleUser, forKey: .simpleUser)
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
    }
}

public struct CreateLocationHdfsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationHdfsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationHdfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationHdfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationHdfsOutputError>
}

public struct CreateLocationHdfsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationHdfsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationHdfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationHdfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationHdfsOutputError>
}

public struct CreateLocationHdfsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationHdfsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateLocationHdfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLocationHdfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationHdfsOutputError>
}

public struct CreateLocationHdfsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationHdfsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateLocationHdfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLocationHdfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationHdfsOutputError>
}

public struct CreateLocationHdfsInput: Swift.Equatable {
    /// The Amazon Resource Names (ARNs) of the agents that are used to connect to the HDFS cluster.
    /// This member is required.
    public var agentArns: [Swift.String]?
    /// The type of authentication used to determine the identity of the user.
    /// This member is required.
    public var authenticationType: DataSyncClientTypes.HdfsAuthenticationType?
    /// The size of data blocks to write into the HDFS cluster. The block size must be a multiple of 512 bytes. The default block size is 128 mebibytes (MiB).
    public var blockSize: Swift.Int?
    /// The Kerberos key table (keytab) that contains mappings between the defined Kerberos principal and the encrypted keys. You can load the keytab from a file by providing the file's address. If you're using the CLI, it performs base64 encoding for you. Otherwise, provide the base64-encoded text. If KERBEROS is specified for AuthenticationType, this parameter is required.
    public var kerberosKeytab: ClientRuntime.Data?
    /// The krb5.conf file that contains the Kerberos configuration information. You can load the krb5.conf file by providing the file's address. If you're using the CLI, it performs the base64 encoding for you. Otherwise, provide the base64-encoded text. If KERBEROS is specified for AuthenticationType, this parameter is required.
    public var kerberosKrb5Conf: ClientRuntime.Data?
    /// The Kerberos principal with access to the files and folders on the HDFS cluster. If KERBEROS is specified for AuthenticationType, this parameter is required.
    public var kerberosPrincipal: Swift.String?
    /// The URI of the HDFS cluster's Key Management Server (KMS).
    public var kmsKeyProviderUri: Swift.String?
    /// The NameNode that manages the HDFS namespace. The NameNode performs operations such as opening, closing, and renaming files and directories. The NameNode contains the information to map blocks of data to the DataNodes. You can use only one NameNode.
    /// This member is required.
    public var nameNodes: [DataSyncClientTypes.HdfsNameNode]?
    /// The Quality of Protection (QOP) configuration specifies the Remote Procedure Call (RPC) and data transfer protection settings configured on the Hadoop Distributed File System (HDFS) cluster. If QopConfiguration isn't specified, RpcProtection and DataTransferProtection default to PRIVACY. If you set RpcProtection or DataTransferProtection, the other parameter assumes the same value.
    public var qopConfiguration: DataSyncClientTypes.QopConfiguration?
    /// The number of DataNodes to replicate the data to when writing to the HDFS cluster. By default, data is replicated to three DataNodes.
    public var replicationFactor: Swift.Int?
    /// The user name used to identify the client on the host operating system. If SIMPLE is specified for AuthenticationType, this parameter is required.
    public var simpleUser: Swift.String?
    /// A subdirectory in the HDFS cluster. This subdirectory is used to read data from or write data to the HDFS cluster. If the subdirectory isn't specified, it will default to /.
    public var subdirectory: Swift.String?
    /// The key-value pair that represents the tag that you want to add to the location. The value can be an empty string. We recommend using tags to name your resources.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init (
        agentArns: [Swift.String]? = nil,
        authenticationType: DataSyncClientTypes.HdfsAuthenticationType? = nil,
        blockSize: Swift.Int? = nil,
        kerberosKeytab: ClientRuntime.Data? = nil,
        kerberosKrb5Conf: ClientRuntime.Data? = nil,
        kerberosPrincipal: Swift.String? = nil,
        kmsKeyProviderUri: Swift.String? = nil,
        nameNodes: [DataSyncClientTypes.HdfsNameNode]? = nil,
        qopConfiguration: DataSyncClientTypes.QopConfiguration? = nil,
        replicationFactor: Swift.Int? = nil,
        simpleUser: Swift.String? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.agentArns = agentArns
        self.authenticationType = authenticationType
        self.blockSize = blockSize
        self.kerberosKeytab = kerberosKeytab
        self.kerberosKrb5Conf = kerberosKrb5Conf
        self.kerberosPrincipal = kerberosPrincipal
        self.kmsKeyProviderUri = kmsKeyProviderUri
        self.nameNodes = nameNodes
        self.qopConfiguration = qopConfiguration
        self.replicationFactor = replicationFactor
        self.simpleUser = simpleUser
        self.subdirectory = subdirectory
        self.tags = tags
    }
}

struct CreateLocationHdfsInputBody: Swift.Equatable {
    public let subdirectory: Swift.String?
    public let nameNodes: [DataSyncClientTypes.HdfsNameNode]?
    public let blockSize: Swift.Int?
    public let replicationFactor: Swift.Int?
    public let kmsKeyProviderUri: Swift.String?
    public let qopConfiguration: DataSyncClientTypes.QopConfiguration?
    public let authenticationType: DataSyncClientTypes.HdfsAuthenticationType?
    public let simpleUser: Swift.String?
    public let kerberosPrincipal: Swift.String?
    public let kerberosKeytab: ClientRuntime.Data?
    public let kerberosKrb5Conf: ClientRuntime.Data?
    public let agentArns: [Swift.String]?
    public let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationHdfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blockSize = "BlockSize"
        case kerberosKeytab = "KerberosKeytab"
        case kerberosKrb5Conf = "KerberosKrb5Conf"
        case kerberosPrincipal = "KerberosPrincipal"
        case kmsKeyProviderUri = "KmsKeyProviderUri"
        case nameNodes = "NameNodes"
        case qopConfiguration = "QopConfiguration"
        case replicationFactor = "ReplicationFactor"
        case simpleUser = "SimpleUser"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let nameNodesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.HdfsNameNode?].self, forKey: .nameNodes)
        var nameNodesDecoded0:[DataSyncClientTypes.HdfsNameNode]? = nil
        if let nameNodesContainer = nameNodesContainer {
            nameNodesDecoded0 = [DataSyncClientTypes.HdfsNameNode]()
            for structure0 in nameNodesContainer {
                if let structure0 = structure0 {
                    nameNodesDecoded0?.append(structure0)
                }
            }
        }
        nameNodes = nameNodesDecoded0
        let blockSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockSize)
        blockSize = blockSizeDecoded
        let replicationFactorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .replicationFactor)
        replicationFactor = replicationFactorDecoded
        let kmsKeyProviderUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyProviderUri)
        kmsKeyProviderUri = kmsKeyProviderUriDecoded
        let qopConfigurationDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.QopConfiguration.self, forKey: .qopConfiguration)
        qopConfiguration = qopConfigurationDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.HdfsAuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let simpleUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .simpleUser)
        simpleUser = simpleUserDecoded
        let kerberosPrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kerberosPrincipal)
        kerberosPrincipal = kerberosPrincipalDecoded
        let kerberosKeytabDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .kerberosKeytab)
        kerberosKeytab = kerberosKeytabDecoded
        let kerberosKrb5ConfDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .kerberosKrb5Conf)
        kerberosKrb5Conf = kerberosKrb5ConfDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLocationHdfsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLocationHdfsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLocationHdfsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLocationHdfsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationHdfsOutputResponse(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension CreateLocationHdfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateLocationHdfsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

public struct CreateLocationHdfsOutputResponse: Swift.Equatable {
    /// The ARN of the source HDFS cluster location that's created.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationHdfsOutputResponseBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension CreateLocationHdfsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public struct CreateLocationNfsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationNfsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationNfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationNfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationNfsOutputError>
}

extension CreateLocationNfsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationNfsInput(mountOptions: \(Swift.String(describing: mountOptions)), onPremConfig: \(Swift.String(describing: onPremConfig)), serverHostname: \(Swift.String(describing: serverHostname)), subdirectory: \(Swift.String(describing: subdirectory)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateLocationNfsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mountOptions = "MountOptions"
        case onPremConfig = "OnPremConfig"
        case serverHostname = "ServerHostname"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mountOptions = mountOptions {
            try encodeContainer.encode(mountOptions, forKey: .mountOptions)
        }
        if let onPremConfig = onPremConfig {
            try encodeContainer.encode(onPremConfig, forKey: .onPremConfig)
        }
        if let serverHostname = serverHostname {
            try encodeContainer.encode(serverHostname, forKey: .serverHostname)
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
    }
}

public struct CreateLocationNfsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationNfsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationNfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationNfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationNfsOutputError>
}

public struct CreateLocationNfsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationNfsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationNfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationNfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationNfsOutputError>
}

public struct CreateLocationNfsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationNfsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateLocationNfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLocationNfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationNfsOutputError>
}

public struct CreateLocationNfsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationNfsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateLocationNfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLocationNfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationNfsOutputError>
}

/// CreateLocationNfsRequest
public struct CreateLocationNfsInput: Swift.Equatable {
    /// The NFS mount options that DataSync can use to mount your NFS share.
    public var mountOptions: DataSyncClientTypes.NfsMountOptions?
    /// Contains a list of Amazon Resource Names (ARNs) of agents that are used to connect to an NFS server. If you are copying data to or from your Snowcone device, see [NFS Server on Snowcone](https://docs.aws.amazon.com/datasync/latest/userguide/create-nfs-location.html#nfs-on-snowcone) for more information.
    /// This member is required.
    public var onPremConfig: DataSyncClientTypes.OnPremConfig?
    /// The name of the NFS server. This value is the IP address or Domain Name Service (DNS) name of the NFS server. An agent that is installed on-premises uses this host name to mount the NFS server in a network. If you are copying data to or from your Snowcone device, see [NFS Server on Snowcone](https://docs.aws.amazon.com/datasync/latest/userguide/create-nfs-location.html#nfs-on-snowcone) for more information. This name must either be DNS-compliant or must be an IP version 4 (IPv4) address.
    /// This member is required.
    public var serverHostname: Swift.String?
    /// The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS destination. The NFS path should be a path that's exported by the NFS server, or a subdirectory of that path. The path should be such that it can be mounted by other NFS clients in your network. To see all the paths exported by your NFS server, run "showmount -e nfs-server-name" from an NFS client that has access to your server. You can specify any directory that appears in the results, and any subdirectory of that directory. Ensure that the NFS export is accessible without Kerberos authentication. To transfer all the data in the folder you specified, DataSync needs to have permissions to read all the data. To ensure this, either configure the NFS export with no_root_squash, or ensure that the permissions for all of the files that you want DataSync allow read access for all users. Doing either enables the agent to read the files. For the agent to access directories, you must additionally enable all execute access. If you are copying data to or from your Snowcone device, see [NFS Server on Snowcone](https://docs.aws.amazon.com/datasync/latest/userguide/create-nfs-location.html#nfs-on-snowcone) for more information. For information about NFS export configuration, see 18.7. The /etc/exports Configuration File in the Red Hat Enterprise Linux documentation.
    /// This member is required.
    public var subdirectory: Swift.String?
    /// The key-value pair that represents the tag that you want to add to the location. The value can be an empty string. We recommend using tags to name your resources.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init (
        mountOptions: DataSyncClientTypes.NfsMountOptions? = nil,
        onPremConfig: DataSyncClientTypes.OnPremConfig? = nil,
        serverHostname: Swift.String? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.mountOptions = mountOptions
        self.onPremConfig = onPremConfig
        self.serverHostname = serverHostname
        self.subdirectory = subdirectory
        self.tags = tags
    }
}

struct CreateLocationNfsInputBody: Swift.Equatable {
    public let subdirectory: Swift.String?
    public let serverHostname: Swift.String?
    public let onPremConfig: DataSyncClientTypes.OnPremConfig?
    public let mountOptions: DataSyncClientTypes.NfsMountOptions?
    public let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationNfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mountOptions = "MountOptions"
        case onPremConfig = "OnPremConfig"
        case serverHostname = "ServerHostname"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let serverHostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverHostname)
        serverHostname = serverHostnameDecoded
        let onPremConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.OnPremConfig.self, forKey: .onPremConfig)
        onPremConfig = onPremConfigDecoded
        let mountOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.NfsMountOptions.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLocationNfsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLocationNfsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLocationNfsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLocationNfsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationNfsOutputResponse(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension CreateLocationNfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateLocationNfsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

/// CreateLocationNfsResponse
public struct CreateLocationNfsOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the source NFS file system location that is created.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationNfsOutputResponseBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension CreateLocationNfsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public struct CreateLocationObjectStorageInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationObjectStorageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationObjectStorageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationObjectStorageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationObjectStorageOutputError>
}

extension CreateLocationObjectStorageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationObjectStorageInput(accessKey: \(Swift.String(describing: accessKey)), agentArns: \(Swift.String(describing: agentArns)), bucketName: \(Swift.String(describing: bucketName)), secretKey: \(Swift.String(describing: secretKey)), serverHostname: \(Swift.String(describing: serverHostname)), serverPort: \(Swift.String(describing: serverPort)), serverProtocol: \(Swift.String(describing: serverProtocol)), subdirectory: \(Swift.String(describing: subdirectory)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateLocationObjectStorageInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKey = "AccessKey"
        case agentArns = "AgentArns"
        case bucketName = "BucketName"
        case secretKey = "SecretKey"
        case serverHostname = "ServerHostname"
        case serverPort = "ServerPort"
        case serverProtocol = "ServerProtocol"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessKey = accessKey {
            try encodeContainer.encode(accessKey, forKey: .accessKey)
        }
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarnlist0 in agentArns {
                try agentArnsContainer.encode(agentarnlist0)
            }
        }
        if let bucketName = bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let secretKey = secretKey {
            try encodeContainer.encode(secretKey, forKey: .secretKey)
        }
        if let serverHostname = serverHostname {
            try encodeContainer.encode(serverHostname, forKey: .serverHostname)
        }
        if let serverPort = serverPort {
            try encodeContainer.encode(serverPort, forKey: .serverPort)
        }
        if let serverProtocol = serverProtocol {
            try encodeContainer.encode(serverProtocol.rawValue, forKey: .serverProtocol)
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
    }
}

public struct CreateLocationObjectStorageInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationObjectStorageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationObjectStorageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationObjectStorageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationObjectStorageOutputError>
}

public struct CreateLocationObjectStorageInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationObjectStorageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationObjectStorageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationObjectStorageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationObjectStorageOutputError>
}

public struct CreateLocationObjectStorageInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationObjectStorageInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateLocationObjectStorageInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLocationObjectStorageInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationObjectStorageOutputError>
}

public struct CreateLocationObjectStorageInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationObjectStorageInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateLocationObjectStorageInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLocationObjectStorageInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationObjectStorageOutputError>
}

/// CreateLocationObjectStorageRequest
public struct CreateLocationObjectStorageInput: Swift.Equatable {
    /// Optional. The access key is used if credentials are required to access the self-managed object storage server. If your object storage requires a user name and password to authenticate, use AccessKey and SecretKey to provide the user name and password, respectively.
    public var accessKey: Swift.String?
    /// The Amazon Resource Name (ARN) of the agents associated with the self-managed object storage server location.
    /// This member is required.
    public var agentArns: [Swift.String]?
    /// The bucket on the self-managed object storage server that is used to read data from.
    /// This member is required.
    public var bucketName: Swift.String?
    /// Optional. The secret key is used if credentials are required to access the self-managed object storage server. If your object storage requires a user name and password to authenticate, use AccessKey and SecretKey to provide the user name and password, respectively.
    public var secretKey: Swift.String?
    /// The name of the self-managed object storage server. This value is the IP address or Domain Name Service (DNS) name of the object storage server. An agent uses this host name to mount the object storage server in a network.
    /// This member is required.
    public var serverHostname: Swift.String?
    /// The port that your self-managed object storage server accepts inbound network traffic on. The server port is set by default to TCP 80 (HTTP) or TCP 443 (HTTPS). You can specify a custom port if your self-managed object storage server requires one.
    public var serverPort: Swift.Int?
    /// The protocol that the object storage server uses to communicate. Valid values are HTTP or HTTPS.
    public var serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol?
    /// The subdirectory in the self-managed object storage server that is used to read data from.
    public var subdirectory: Swift.String?
    /// The key-value pair that represents the tag that you want to add to the location. The value can be an empty string. We recommend using tags to name your resources.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init (
        accessKey: Swift.String? = nil,
        agentArns: [Swift.String]? = nil,
        bucketName: Swift.String? = nil,
        secretKey: Swift.String? = nil,
        serverHostname: Swift.String? = nil,
        serverPort: Swift.Int? = nil,
        serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.accessKey = accessKey
        self.agentArns = agentArns
        self.bucketName = bucketName
        self.secretKey = secretKey
        self.serverHostname = serverHostname
        self.serverPort = serverPort
        self.serverProtocol = serverProtocol
        self.subdirectory = subdirectory
        self.tags = tags
    }
}

struct CreateLocationObjectStorageInputBody: Swift.Equatable {
    public let serverHostname: Swift.String?
    public let serverPort: Swift.Int?
    public let serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol?
    public let subdirectory: Swift.String?
    public let bucketName: Swift.String?
    public let accessKey: Swift.String?
    public let secretKey: Swift.String?
    public let agentArns: [Swift.String]?
    public let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationObjectStorageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKey = "AccessKey"
        case agentArns = "AgentArns"
        case bucketName = "BucketName"
        case secretKey = "SecretKey"
        case serverHostname = "ServerHostname"
        case serverPort = "ServerPort"
        case serverProtocol = "ServerProtocol"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverHostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverHostname)
        serverHostname = serverHostnameDecoded
        let serverPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .serverPort)
        serverPort = serverPortDecoded
        let serverProtocolDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ObjectStorageServerProtocol.self, forKey: .serverProtocol)
        serverProtocol = serverProtocolDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let accessKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKey)
        accessKey = accessKeyDecoded
        let secretKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretKey)
        secretKey = secretKeyDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLocationObjectStorageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLocationObjectStorageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLocationObjectStorageOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLocationObjectStorageOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationObjectStorageOutputResponse(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension CreateLocationObjectStorageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateLocationObjectStorageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

/// CreateLocationObjectStorageResponse
public struct CreateLocationObjectStorageOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the agents associated with the self-managed object storage server location.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationObjectStorageOutputResponseBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension CreateLocationObjectStorageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public struct CreateLocationS3InputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationS3InputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationS3Input>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationS3Input>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationS3OutputError>
}

extension CreateLocationS3Input: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationS3Input(agentArns: \(Swift.String(describing: agentArns)), s3BucketArn: \(Swift.String(describing: s3BucketArn)), s3Config: \(Swift.String(describing: s3Config)), s3StorageClass: \(Swift.String(describing: s3StorageClass)), subdirectory: \(Swift.String(describing: subdirectory)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateLocationS3Input: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case s3BucketArn = "S3BucketArn"
        case s3Config = "S3Config"
        case s3StorageClass = "S3StorageClass"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarnlist0 in agentArns {
                try agentArnsContainer.encode(agentarnlist0)
            }
        }
        if let s3BucketArn = s3BucketArn {
            try encodeContainer.encode(s3BucketArn, forKey: .s3BucketArn)
        }
        if let s3Config = s3Config {
            try encodeContainer.encode(s3Config, forKey: .s3Config)
        }
        if let s3StorageClass = s3StorageClass {
            try encodeContainer.encode(s3StorageClass.rawValue, forKey: .s3StorageClass)
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
    }
}

public struct CreateLocationS3InputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationS3InputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationS3Input>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationS3Input>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationS3OutputError>
}

public struct CreateLocationS3InputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationS3InputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationS3Input>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationS3Input>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationS3OutputError>
}

public struct CreateLocationS3InputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationS3InputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateLocationS3Input,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLocationS3Input
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationS3OutputError>
}

public struct CreateLocationS3InputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationS3InputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateLocationS3Input,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLocationS3Input
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationS3OutputError>
}

/// CreateLocationS3Request
public struct CreateLocationS3Input: Swift.Equatable {
    /// If you are using DataSync on an Amazon Web Services Outpost, specify the Amazon Resource Names (ARNs) of the DataSync agents deployed on your Outpost. For more information about launching a DataSync agent on an Amazon Web Services Outpost, see [Deploy your DataSync agent on Outposts](https://docs.aws.amazon.com/datasync/latest/userguide/deploy-agents.html#outposts-agent).
    public var agentArns: [Swift.String]?
    /// The ARN of the Amazon S3 bucket. If the bucket is on an Amazon Web Services Outpost, this must be an access point ARN.
    /// This member is required.
    public var s3BucketArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that is used to access an Amazon S3 bucket. For detailed information about using such a role, see Creating a Location for Amazon S3 in the DataSync User Guide.
    /// This member is required.
    public var s3Config: DataSyncClientTypes.S3Config?
    /// The Amazon S3 storage class that you want to store your files in when this location is used as a task destination. For buckets in Amazon Web Services Regions, the storage class defaults to Standard. For buckets on Outposts, the storage class defaults to Amazon Web Services S3 Outposts. For more information about S3 storage classes, see [Amazon S3 Storage Classes](http://aws.amazon.com/s3/storage-classes/). Some storage classes have behaviors that can affect your S3 storage cost. For detailed information, see [Considerations when working with S3 storage classes in DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes).
    public var s3StorageClass: DataSyncClientTypes.S3StorageClass?
    /// A subdirectory in the Amazon S3 bucket. This subdirectory in Amazon S3 is used to read data from the S3 source location or write data to the S3 destination.
    public var subdirectory: Swift.String?
    /// The key-value pair that represents the tag that you want to add to the location. The value can be an empty string. We recommend using tags to name your resources.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init (
        agentArns: [Swift.String]? = nil,
        s3BucketArn: Swift.String? = nil,
        s3Config: DataSyncClientTypes.S3Config? = nil,
        s3StorageClass: DataSyncClientTypes.S3StorageClass? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.agentArns = agentArns
        self.s3BucketArn = s3BucketArn
        self.s3Config = s3Config
        self.s3StorageClass = s3StorageClass
        self.subdirectory = subdirectory
        self.tags = tags
    }
}

struct CreateLocationS3InputBody: Swift.Equatable {
    public let subdirectory: Swift.String?
    public let s3BucketArn: Swift.String?
    public let s3StorageClass: DataSyncClientTypes.S3StorageClass?
    public let s3Config: DataSyncClientTypes.S3Config?
    public let agentArns: [Swift.String]?
    public let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationS3InputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case s3BucketArn = "S3BucketArn"
        case s3Config = "S3Config"
        case s3StorageClass = "S3StorageClass"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let s3BucketArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketArn)
        s3BucketArn = s3BucketArnDecoded
        let s3StorageClassDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.S3StorageClass.self, forKey: .s3StorageClass)
        s3StorageClass = s3StorageClassDecoded
        let s3ConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.S3Config.self, forKey: .s3Config)
        s3Config = s3ConfigDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLocationS3OutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLocationS3OutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLocationS3OutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLocationS3OutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationS3OutputResponse(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension CreateLocationS3OutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateLocationS3OutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

/// CreateLocationS3Response
public struct CreateLocationS3OutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the source Amazon S3 bucket location that is created.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationS3OutputResponseBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension CreateLocationS3OutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public struct CreateLocationSmbInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationSmbInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationSmbInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationSmbInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationSmbOutputError>
}

extension CreateLocationSmbInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationSmbInput(agentArns: \(Swift.String(describing: agentArns)), domain: \(Swift.String(describing: domain)), mountOptions: \(Swift.String(describing: mountOptions)), password: \(Swift.String(describing: password)), serverHostname: \(Swift.String(describing: serverHostname)), subdirectory: \(Swift.String(describing: subdirectory)), tags: \(Swift.String(describing: tags)), user: \(Swift.String(describing: user)))"}
}

extension CreateLocationSmbInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case domain = "Domain"
        case mountOptions = "MountOptions"
        case password = "Password"
        case serverHostname = "ServerHostname"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarnlist0 in agentArns {
                try agentArnsContainer.encode(agentarnlist0)
            }
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let mountOptions = mountOptions {
            try encodeContainer.encode(mountOptions, forKey: .mountOptions)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let serverHostname = serverHostname {
            try encodeContainer.encode(serverHostname, forKey: .serverHostname)
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
        if let user = user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }
}

public struct CreateLocationSmbInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationSmbInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationSmbInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationSmbInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationSmbOutputError>
}

public struct CreateLocationSmbInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationSmbInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLocationSmbInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLocationSmbInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationSmbOutputError>
}

public struct CreateLocationSmbInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationSmbInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateLocationSmbInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLocationSmbInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationSmbOutputError>
}

public struct CreateLocationSmbInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLocationSmbInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateLocationSmbInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLocationSmbInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLocationSmbOutputError>
}

/// CreateLocationSmbRequest
public struct CreateLocationSmbInput: Swift.Equatable {
    /// The Amazon Resource Names (ARNs) of agents to use for a Simple Message Block (SMB) location.
    /// This member is required.
    public var agentArns: [Swift.String]?
    /// The name of the Windows domain that the SMB server belongs to.
    public var domain: Swift.String?
    /// The mount options used by DataSync to access the SMB server.
    public var mountOptions: DataSyncClientTypes.SmbMountOptions?
    /// The password of the user who can mount the share, has the permissions to access files and folders in the SMB share.
    /// This member is required.
    public var password: Swift.String?
    /// The name of the SMB server. This value is the IP address or Domain Name Service (DNS) name of the SMB server. An agent that is installed on-premises uses this hostname to mount the SMB server in a network. This name must either be DNS-compliant or must be an IP version 4 (IPv4) address.
    /// This member is required.
    public var serverHostname: Swift.String?
    /// The subdirectory in the SMB file system that is used to read data from the SMB source location or write data to the SMB destination. The SMB path should be a path that's exported by the SMB server, or a subdirectory of that path. The path should be such that it can be mounted by other SMB clients in your network. Subdirectory must be specified with forward slashes. For example, /path/to/folder. To transfer all the data in the folder you specified, DataSync needs to have permissions to mount the SMB share, as well as to access all the data in that share. To ensure this, either ensure that the user/password specified belongs to the user who can mount the share, and who has the appropriate permissions for all of the files and directories that you want DataSync to access, or use credentials of a member of the Backup Operators group to mount the share. Doing either enables the agent to access the data. For the agent to access directories, you must additionally enable all execute access.
    /// This member is required.
    public var subdirectory: Swift.String?
    /// The key-value pair that represents the tag that you want to add to the location. The value can be an empty string. We recommend using tags to name your resources.
    public var tags: [DataSyncClientTypes.TagListEntry]?
    /// The user who can mount the share, has the permissions to access files and folders in the SMB share. For information about choosing a user name that ensures sufficient permissions to files, folders, and metadata, see [user].
    /// This member is required.
    public var user: Swift.String?

    public init (
        agentArns: [Swift.String]? = nil,
        domain: Swift.String? = nil,
        mountOptions: DataSyncClientTypes.SmbMountOptions? = nil,
        password: Swift.String? = nil,
        serverHostname: Swift.String? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil,
        user: Swift.String? = nil
    )
    {
        self.agentArns = agentArns
        self.domain = domain
        self.mountOptions = mountOptions
        self.password = password
        self.serverHostname = serverHostname
        self.subdirectory = subdirectory
        self.tags = tags
        self.user = user
    }
}

struct CreateLocationSmbInputBody: Swift.Equatable {
    public let subdirectory: Swift.String?
    public let serverHostname: Swift.String?
    public let user: Swift.String?
    public let domain: Swift.String?
    public let password: Swift.String?
    public let agentArns: [Swift.String]?
    public let mountOptions: DataSyncClientTypes.SmbMountOptions?
    public let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationSmbInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case domain = "Domain"
        case mountOptions = "MountOptions"
        case password = "Password"
        case serverHostname = "ServerHostname"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
        case user = "User"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let serverHostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverHostname)
        serverHostname = serverHostnameDecoded
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let mountOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.SmbMountOptions.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLocationSmbOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLocationSmbOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLocationSmbOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLocationSmbOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationSmbOutputResponse(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension CreateLocationSmbOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateLocationSmbOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

/// CreateLocationSmbResponse
public struct CreateLocationSmbOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the source SMB file system location that is created.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationSmbOutputResponseBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension CreateLocationSmbOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public struct CreateTaskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTaskOutputError>
}

extension CreateTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTaskInput(cloudWatchLogGroupArn: \(Swift.String(describing: cloudWatchLogGroupArn)), destinationLocationArn: \(Swift.String(describing: destinationLocationArn)), excludes: \(Swift.String(describing: excludes)), includes: \(Swift.String(describing: includes)), name: \(Swift.String(describing: name)), options: \(Swift.String(describing: options)), schedule: \(Swift.String(describing: schedule)), sourceLocationArn: \(Swift.String(describing: sourceLocationArn)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateTaskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case destinationLocationArn = "DestinationLocationArn"
        case excludes = "Excludes"
        case includes = "Includes"
        case name = "Name"
        case options = "Options"
        case schedule = "Schedule"
        case sourceLocationArn = "SourceLocationArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogGroupArn = cloudWatchLogGroupArn {
            try encodeContainer.encode(cloudWatchLogGroupArn, forKey: .cloudWatchLogGroupArn)
        }
        if let destinationLocationArn = destinationLocationArn {
            try encodeContainer.encode(destinationLocationArn, forKey: .destinationLocationArn)
        }
        if let excludes = excludes {
            var excludesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludes)
            for filterlist0 in excludes {
                try excludesContainer.encode(filterlist0)
            }
        }
        if let includes = includes {
            var includesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includes)
            for filterlist0 in includes {
                try includesContainer.encode(filterlist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let sourceLocationArn = sourceLocationArn {
            try encodeContainer.encode(sourceLocationArn, forKey: .sourceLocationArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
    }
}

public struct CreateTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTaskOutputError>
}

public struct CreateTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTaskOutputError>
}

public struct CreateTaskInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTaskInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateTaskInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateTaskInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTaskOutputError>
}

public struct CreateTaskInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTaskInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateTaskInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateTaskInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTaskOutputError>
}

/// CreateTaskRequest
public struct CreateTaskInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Amazon CloudWatch log group that is used to monitor and log events in the task.
    public var cloudWatchLogGroupArn: Swift.String?
    /// The Amazon Resource Name (ARN) of an Amazon Web Services storage resource's location.
    /// This member is required.
    public var destinationLocationArn: Swift.String?
    /// A list of filter rules that determines which files to exclude from a task. The list should contain a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example, "/folder1|/folder2".
    public var excludes: [DataSyncClientTypes.FilterRule]?
    /// A list of filter rules that determines which files to include when running a task. The pattern contains a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example, "/folder1|/folder2".
    public var includes: [DataSyncClientTypes.FilterRule]?
    /// The name of a task. This value is a text reference that is used to identify the task in the console.
    public var name: Swift.String?
    /// The set of configuration options that control the behavior of a single execution of the task that occurs when you call StartTaskExecution. You can configure these options to preserve metadata such as user ID (UID) and group ID (GID), file permissions, data integrity verification, and so on. For each individual task execution, you can override these options by specifying the OverrideOptions before starting the task execution. For more information, see the [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) operation.
    public var options: DataSyncClientTypes.Options?
    /// Specifies a schedule used to periodically transfer files from a source to a destination location. The schedule should be specified in UTC time. For more information, see [Scheduling your task](https://docs.aws.amazon.com/datasync/latest/userguide/task-scheduling.html).
    public var schedule: DataSyncClientTypes.TaskSchedule?
    /// The Amazon Resource Name (ARN) of the source location for the task.
    /// This member is required.
    public var sourceLocationArn: Swift.String?
    /// The key-value pair that represents the tag that you want to add to the resource. The value can be an empty string.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init (
        cloudWatchLogGroupArn: Swift.String? = nil,
        destinationLocationArn: Swift.String? = nil,
        excludes: [DataSyncClientTypes.FilterRule]? = nil,
        includes: [DataSyncClientTypes.FilterRule]? = nil,
        name: Swift.String? = nil,
        options: DataSyncClientTypes.Options? = nil,
        schedule: DataSyncClientTypes.TaskSchedule? = nil,
        sourceLocationArn: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
        self.destinationLocationArn = destinationLocationArn
        self.excludes = excludes
        self.includes = includes
        self.name = name
        self.options = options
        self.schedule = schedule
        self.sourceLocationArn = sourceLocationArn
        self.tags = tags
    }
}

struct CreateTaskInputBody: Swift.Equatable {
    public let sourceLocationArn: Swift.String?
    public let destinationLocationArn: Swift.String?
    public let cloudWatchLogGroupArn: Swift.String?
    public let name: Swift.String?
    public let options: DataSyncClientTypes.Options?
    public let excludes: [DataSyncClientTypes.FilterRule]?
    public let schedule: DataSyncClientTypes.TaskSchedule?
    public let tags: [DataSyncClientTypes.TagListEntry]?
    public let includes: [DataSyncClientTypes.FilterRule]?
}

extension CreateTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case destinationLocationArn = "DestinationLocationArn"
        case excludes = "Excludes"
        case includes = "Includes"
        case name = "Name"
        case options = "Options"
        case schedule = "Schedule"
        case sourceLocationArn = "SourceLocationArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceLocationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLocationArn)
        sourceLocationArn = sourceLocationArnDecoded
        let destinationLocationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationLocationArn)
        destinationLocationArn = destinationLocationArnDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Options.self, forKey: .options)
        options = optionsDecoded
        let excludesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .excludes)
        var excludesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in excludesContainer {
                if let structure0 = structure0 {
                    excludesDecoded0?.append(structure0)
                }
            }
        }
        excludes = excludesDecoded0
        let scheduleDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskSchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let includesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .includes)
        var includesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let includesContainer = includesContainer {
            includesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in includesContainer {
                if let structure0 = structure0 {
                    includesDecoded0?.append(structure0)
                }
            }
        }
        includes = includesDecoded0
    }
}

extension CreateTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTaskOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTaskOutputResponse(taskArn: \(Swift.String(describing: taskArn)))"}
}

extension CreateTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskArn = output.taskArn
        } else {
            self.taskArn = nil
        }
    }
}

/// CreateTaskResponse
public struct CreateTaskOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the task.
    public var taskArn: Swift.String?

    public init (
        taskArn: Swift.String? = nil
    )
    {
        self.taskArn = taskArn
    }
}

struct CreateTaskOutputResponseBody: Swift.Equatable {
    public let taskArn: Swift.String?
}

extension CreateTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskArn = "TaskArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
    }
}

public struct DeleteAgentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAgentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAgentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAgentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAgentOutputError>
}

extension DeleteAgentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAgentInput(agentArn: \(Swift.String(describing: agentArn)))"}
}

extension DeleteAgentInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArn = agentArn {
            try encodeContainer.encode(agentArn, forKey: .agentArn)
        }
    }
}

public struct DeleteAgentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAgentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAgentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAgentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAgentOutputError>
}

public struct DeleteAgentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAgentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAgentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAgentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAgentOutputError>
}

public struct DeleteAgentInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAgentInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeleteAgentInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteAgentInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAgentOutputError>
}

public struct DeleteAgentInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAgentInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeleteAgentInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteAgentInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAgentOutputError>
}

/// DeleteAgentRequest
public struct DeleteAgentInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the agent to delete. Use the ListAgents operation to return a list of agents for your account and Amazon Web Services Region.
    /// This member is required.
    public var agentArn: Swift.String?

    public init (
        agentArn: Swift.String? = nil
    )
    {
        self.agentArn = agentArn
    }
}

struct DeleteAgentInputBody: Swift.Equatable {
    public let agentArn: Swift.String?
}

extension DeleteAgentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentArn)
        agentArn = agentArnDecoded
    }
}

extension DeleteAgentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAgentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAgentOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAgentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAgentOutputResponse()"}
}

extension DeleteAgentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAgentOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteAgentOutputResponseBody: Swift.Equatable {
}

extension DeleteAgentOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteLocationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLocationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLocationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLocationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLocationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLocationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLocationOutputError>
}

extension DeleteLocationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLocationInput(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension DeleteLocationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

public struct DeleteLocationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLocationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLocationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLocationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLocationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLocationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLocationOutputError>
}

public struct DeleteLocationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLocationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLocationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLocationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLocationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLocationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLocationOutputError>
}

public struct DeleteLocationInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLocationInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeleteLocationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLocationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteLocationInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLocationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLocationOutputError>
}

public struct DeleteLocationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLocationInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeleteLocationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLocationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteLocationInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLocationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLocationOutputError>
}

/// DeleteLocation
public struct DeleteLocationInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the location to delete.
    /// This member is required.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DeleteLocationInputBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension DeleteLocationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension DeleteLocationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLocationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLocationOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLocationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLocationOutputResponse()"}
}

extension DeleteLocationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLocationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteLocationOutputResponseBody: Swift.Equatable {
}

extension DeleteLocationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteTaskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTaskOutputError>
}

extension DeleteTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTaskInput(taskArn: \(Swift.String(describing: taskArn)))"}
}

extension DeleteTaskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskArn = "TaskArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskArn = taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }
}

public struct DeleteTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTaskOutputError>
}

public struct DeleteTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTaskOutputError>
}

public struct DeleteTaskInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTaskInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeleteTaskInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteTaskInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTaskOutputError>
}

public struct DeleteTaskInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTaskInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeleteTaskInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteTaskInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTaskOutputError>
}

/// DeleteTask
public struct DeleteTaskInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the task to delete.
    /// This member is required.
    public var taskArn: Swift.String?

    public init (
        taskArn: Swift.String? = nil
    )
    {
        self.taskArn = taskArn
    }
}

struct DeleteTaskInputBody: Swift.Equatable {
    public let taskArn: Swift.String?
}

extension DeleteTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskArn = "TaskArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
    }
}

extension DeleteTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTaskOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTaskOutputResponse()"}
}

extension DeleteTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTaskOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteTaskOutputResponseBody: Swift.Equatable {
}

extension DeleteTaskOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DescribeAgentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAgentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAgentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAgentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAgentOutputError>
}

extension DescribeAgentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAgentInput(agentArn: \(Swift.String(describing: agentArn)))"}
}

extension DescribeAgentInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArn = agentArn {
            try encodeContainer.encode(agentArn, forKey: .agentArn)
        }
    }
}

public struct DescribeAgentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAgentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAgentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAgentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAgentOutputError>
}

public struct DescribeAgentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAgentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAgentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAgentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAgentOutputError>
}

public struct DescribeAgentInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAgentInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DescribeAgentInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeAgentInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAgentOutputError>
}

public struct DescribeAgentInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAgentInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DescribeAgentInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeAgentInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAgentOutputError>
}

/// DescribeAgent
public struct DescribeAgentInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the agent to describe.
    /// This member is required.
    public var agentArn: Swift.String?

    public init (
        agentArn: Swift.String? = nil
    )
    {
        self.agentArn = agentArn
    }
}

struct DescribeAgentInputBody: Swift.Equatable {
    public let agentArn: Swift.String?
}

extension DescribeAgentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentArn)
        agentArn = agentArnDecoded
    }
}

extension DescribeAgentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAgentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAgentOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAgentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAgentOutputResponse(agentArn: \(Swift.String(describing: agentArn)), creationTime: \(Swift.String(describing: creationTime)), endpointType: \(Swift.String(describing: endpointType)), lastConnectionTime: \(Swift.String(describing: lastConnectionTime)), name: \(Swift.String(describing: name)), privateLinkConfig: \(Swift.String(describing: privateLinkConfig)), status: \(Swift.String(describing: status)))"}
}

extension DescribeAgentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAgentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentArn = output.agentArn
            self.creationTime = output.creationTime
            self.endpointType = output.endpointType
            self.lastConnectionTime = output.lastConnectionTime
            self.name = output.name
            self.privateLinkConfig = output.privateLinkConfig
            self.status = output.status
        } else {
            self.agentArn = nil
            self.creationTime = nil
            self.endpointType = nil
            self.lastConnectionTime = nil
            self.name = nil
            self.privateLinkConfig = nil
            self.status = nil
        }
    }
}

/// DescribeAgentResponse
public struct DescribeAgentOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the agent.
    public var agentArn: Swift.String?
    /// The time that the agent was activated (that is, created in your account).
    public var creationTime: ClientRuntime.Date?
    /// The type of endpoint that your agent is connected to. If the endpoint is a VPC endpoint, the agent is not accessible over the public internet.
    public var endpointType: DataSyncClientTypes.EndpointType?
    /// The time that the agent last connected to DataSync.
    public var lastConnectionTime: ClientRuntime.Date?
    /// The name of the agent.
    public var name: Swift.String?
    /// The subnet and the security group that DataSync used to access a VPC endpoint.
    public var privateLinkConfig: DataSyncClientTypes.PrivateLinkConfig?
    /// The status of the agent. If the status is ONLINE, then the agent is configured properly and is available to use. The Running status is the normal running status for an agent. If the status is OFFLINE, the agent's VM is turned off or the agent is in an unhealthy state. When the issue that caused the unhealthy state is resolved, the agent returns to ONLINE status.
    public var status: DataSyncClientTypes.AgentStatus?

    public init (
        agentArn: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        endpointType: DataSyncClientTypes.EndpointType? = nil,
        lastConnectionTime: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        privateLinkConfig: DataSyncClientTypes.PrivateLinkConfig? = nil,
        status: DataSyncClientTypes.AgentStatus? = nil
    )
    {
        self.agentArn = agentArn
        self.creationTime = creationTime
        self.endpointType = endpointType
        self.lastConnectionTime = lastConnectionTime
        self.name = name
        self.privateLinkConfig = privateLinkConfig
        self.status = status
    }
}

struct DescribeAgentOutputResponseBody: Swift.Equatable {
    public let agentArn: Swift.String?
    public let name: Swift.String?
    public let status: DataSyncClientTypes.AgentStatus?
    public let lastConnectionTime: ClientRuntime.Date?
    public let creationTime: ClientRuntime.Date?
    public let endpointType: DataSyncClientTypes.EndpointType?
    public let privateLinkConfig: DataSyncClientTypes.PrivateLinkConfig?
}

extension DescribeAgentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
        case creationTime = "CreationTime"
        case endpointType = "EndpointType"
        case lastConnectionTime = "LastConnectionTime"
        case name = "Name"
        case privateLinkConfig = "PrivateLinkConfig"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentArn)
        agentArn = agentArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AgentStatus.self, forKey: .status)
        status = statusDecoded
        let lastConnectionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastConnectionTime)
        lastConnectionTime = lastConnectionTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let endpointTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.EndpointType.self, forKey: .endpointType)
        endpointType = endpointTypeDecoded
        let privateLinkConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PrivateLinkConfig.self, forKey: .privateLinkConfig)
        privateLinkConfig = privateLinkConfigDecoded
    }
}

public struct DescribeLocationEfsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationEfsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationEfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationEfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationEfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationEfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationEfsOutputError>
}

extension DescribeLocationEfsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationEfsInput(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension DescribeLocationEfsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

public struct DescribeLocationEfsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationEfsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationEfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationEfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationEfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationEfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationEfsOutputError>
}

public struct DescribeLocationEfsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationEfsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationEfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationEfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationEfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationEfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationEfsOutputError>
}

public struct DescribeLocationEfsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationEfsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DescribeLocationEfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationEfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLocationEfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationEfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationEfsOutputError>
}

public struct DescribeLocationEfsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationEfsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DescribeLocationEfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationEfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLocationEfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationEfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationEfsOutputError>
}

/// DescribeLocationEfsRequest
public struct DescribeLocationEfsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the EFS location to describe.
    /// This member is required.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationEfsInputBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension DescribeLocationEfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension DescribeLocationEfsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLocationEfsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLocationEfsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLocationEfsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationEfsOutputResponse(creationTime: \(Swift.String(describing: creationTime)), ec2Config: \(Swift.String(describing: ec2Config)), locationArn: \(Swift.String(describing: locationArn)), locationUri: \(Swift.String(describing: locationUri)))"}
}

extension DescribeLocationEfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLocationEfsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.ec2Config = output.ec2Config
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
        } else {
            self.creationTime = nil
            self.ec2Config = nil
            self.locationArn = nil
            self.locationUri = nil
        }
    }
}

/// DescribeLocationEfsResponse
public struct DescribeLocationEfsOutputResponse: Swift.Equatable {
    /// The time that the EFS location was created.
    public var creationTime: ClientRuntime.Date?
    /// The subnet and the security group that DataSync uses to access target EFS file system. The subnet must have at least one mount target for that file system. The security group that you provide needs to be able to communicate with the security group on the mount target in the subnet specified.
    public var ec2Config: DataSyncClientTypes.Ec2Config?
    /// The Amazon Resource Name (ARN) of the EFS location that was described.
    public var locationArn: Swift.String?
    /// The URL of the EFS location that was described.
    public var locationUri: Swift.String?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        ec2Config: DataSyncClientTypes.Ec2Config? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.ec2Config = ec2Config
        self.locationArn = locationArn
        self.locationUri = locationUri
    }
}

struct DescribeLocationEfsOutputResponseBody: Swift.Equatable {
    public let locationArn: Swift.String?
    public let locationUri: Swift.String?
    public let ec2Config: DataSyncClientTypes.Ec2Config?
    public let creationTime: ClientRuntime.Date?
}

extension DescribeLocationEfsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case ec2Config = "Ec2Config"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let ec2ConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Ec2Config.self, forKey: .ec2Config)
        ec2Config = ec2ConfigDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

public struct DescribeLocationFsxWindowsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationFsxWindowsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationFsxWindowsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationFsxWindowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationFsxWindowsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationFsxWindowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationFsxWindowsOutputError>
}

extension DescribeLocationFsxWindowsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationFsxWindowsInput(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension DescribeLocationFsxWindowsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

public struct DescribeLocationFsxWindowsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationFsxWindowsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationFsxWindowsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationFsxWindowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationFsxWindowsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationFsxWindowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationFsxWindowsOutputError>
}

public struct DescribeLocationFsxWindowsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationFsxWindowsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationFsxWindowsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationFsxWindowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationFsxWindowsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationFsxWindowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationFsxWindowsOutputError>
}

public struct DescribeLocationFsxWindowsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationFsxWindowsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DescribeLocationFsxWindowsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationFsxWindowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLocationFsxWindowsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationFsxWindowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationFsxWindowsOutputError>
}

public struct DescribeLocationFsxWindowsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationFsxWindowsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DescribeLocationFsxWindowsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationFsxWindowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLocationFsxWindowsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationFsxWindowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationFsxWindowsOutputError>
}

public struct DescribeLocationFsxWindowsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the FSx for Windows File Server location to describe.
    /// This member is required.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationFsxWindowsInputBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension DescribeLocationFsxWindowsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension DescribeLocationFsxWindowsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLocationFsxWindowsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLocationFsxWindowsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLocationFsxWindowsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationFsxWindowsOutputResponse(creationTime: \(Swift.String(describing: creationTime)), domain: \(Swift.String(describing: domain)), locationArn: \(Swift.String(describing: locationArn)), locationUri: \(Swift.String(describing: locationUri)), securityGroupArns: \(Swift.String(describing: securityGroupArns)), user: \(Swift.String(describing: user)))"}
}

extension DescribeLocationFsxWindowsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLocationFsxWindowsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.domain = output.domain
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.securityGroupArns = output.securityGroupArns
            self.user = output.user
        } else {
            self.creationTime = nil
            self.domain = nil
            self.locationArn = nil
            self.locationUri = nil
            self.securityGroupArns = nil
            self.user = nil
        }
    }
}

public struct DescribeLocationFsxWindowsOutputResponse: Swift.Equatable {
    /// The time that the FSx for Windows File Server location was created.
    public var creationTime: ClientRuntime.Date?
    /// The name of the Windows domain that the FSx for Windows File Server belongs to.
    public var domain: Swift.String?
    /// The Amazon Resource Name (ARN) of the FSx for Windows File Server location that was described.
    public var locationArn: Swift.String?
    /// The URL of the FSx for Windows File Server location that was described.
    public var locationUri: Swift.String?
    /// The Amazon Resource Names (ARNs) of the security groups that are configured for the FSx for Windows File Server file system.
    public var securityGroupArns: [Swift.String]?
    /// The user who has the permissions to access files and folders in the FSx for Windows File Server file system.
    public var user: Swift.String?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        domain: Swift.String? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        securityGroupArns: [Swift.String]? = nil,
        user: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.domain = domain
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.securityGroupArns = securityGroupArns
        self.user = user
    }
}

struct DescribeLocationFsxWindowsOutputResponseBody: Swift.Equatable {
    public let locationArn: Swift.String?
    public let locationUri: Swift.String?
    public let securityGroupArns: [Swift.String]?
    public let creationTime: ClientRuntime.Date?
    public let user: Swift.String?
    public let domain: Swift.String?
}

extension DescribeLocationFsxWindowsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case domain = "Domain"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case securityGroupArns = "SecurityGroupArns"
        case user = "User"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
    }
}

public struct DescribeLocationHdfsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationHdfsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationHdfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationHdfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationHdfsOutputError>
}

extension DescribeLocationHdfsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationHdfsInput(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension DescribeLocationHdfsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

public struct DescribeLocationHdfsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationHdfsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationHdfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationHdfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationHdfsOutputError>
}

public struct DescribeLocationHdfsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationHdfsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationHdfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationHdfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationHdfsOutputError>
}

public struct DescribeLocationHdfsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationHdfsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DescribeLocationHdfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLocationHdfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationHdfsOutputError>
}

public struct DescribeLocationHdfsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationHdfsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DescribeLocationHdfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLocationHdfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationHdfsOutputError>
}

public struct DescribeLocationHdfsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the HDFS cluster location to describe.
    /// This member is required.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationHdfsInputBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension DescribeLocationHdfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension DescribeLocationHdfsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLocationHdfsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLocationHdfsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLocationHdfsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationHdfsOutputResponse(agentArns: \(Swift.String(describing: agentArns)), authenticationType: \(Swift.String(describing: authenticationType)), blockSize: \(Swift.String(describing: blockSize)), creationTime: \(Swift.String(describing: creationTime)), kerberosPrincipal: \(Swift.String(describing: kerberosPrincipal)), kmsKeyProviderUri: \(Swift.String(describing: kmsKeyProviderUri)), locationArn: \(Swift.String(describing: locationArn)), locationUri: \(Swift.String(describing: locationUri)), nameNodes: \(Swift.String(describing: nameNodes)), qopConfiguration: \(Swift.String(describing: qopConfiguration)), replicationFactor: \(Swift.String(describing: replicationFactor)), simpleUser: \(Swift.String(describing: simpleUser)))"}
}

extension DescribeLocationHdfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLocationHdfsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentArns = output.agentArns
            self.authenticationType = output.authenticationType
            self.blockSize = output.blockSize
            self.creationTime = output.creationTime
            self.kerberosPrincipal = output.kerberosPrincipal
            self.kmsKeyProviderUri = output.kmsKeyProviderUri
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.nameNodes = output.nameNodes
            self.qopConfiguration = output.qopConfiguration
            self.replicationFactor = output.replicationFactor
            self.simpleUser = output.simpleUser
        } else {
            self.agentArns = nil
            self.authenticationType = nil
            self.blockSize = nil
            self.creationTime = nil
            self.kerberosPrincipal = nil
            self.kmsKeyProviderUri = nil
            self.locationArn = nil
            self.locationUri = nil
            self.nameNodes = nil
            self.qopConfiguration = nil
            self.replicationFactor = nil
            self.simpleUser = nil
        }
    }
}

public struct DescribeLocationHdfsOutputResponse: Swift.Equatable {
    /// The ARNs of the agents that are used to connect to the HDFS cluster.
    public var agentArns: [Swift.String]?
    /// The type of authentication used to determine the identity of the user.
    public var authenticationType: DataSyncClientTypes.HdfsAuthenticationType?
    /// The size of the data blocks to write into the HDFS cluster.
    public var blockSize: Swift.Int?
    /// The time that the HDFS location was created.
    public var creationTime: ClientRuntime.Date?
    /// The Kerberos principal with access to the files and folders on the HDFS cluster. This parameter is used if the AuthenticationType is defined as KERBEROS.
    public var kerberosPrincipal: Swift.String?
    /// The URI of the HDFS cluster's Key Management Server (KMS).
    public var kmsKeyProviderUri: Swift.String?
    /// The ARN of the HDFS cluster location.
    public var locationArn: Swift.String?
    /// The URI of the HDFS cluster location.
    public var locationUri: Swift.String?
    /// The NameNode that manage the HDFS namespace.
    public var nameNodes: [DataSyncClientTypes.HdfsNameNode]?
    /// The Quality of Protection (QOP) configuration specifies the Remote Procedure Call (RPC) and data transfer protection settings configured on the Hadoop Distributed File System (HDFS) cluster.
    public var qopConfiguration: DataSyncClientTypes.QopConfiguration?
    /// The number of DataNodes to replicate the data to when writing to the HDFS cluster.
    public var replicationFactor: Swift.Int?
    /// The user name used to identify the client on the host operating system. This parameter is used if the AuthenticationType is defined as SIMPLE.
    public var simpleUser: Swift.String?

    public init (
        agentArns: [Swift.String]? = nil,
        authenticationType: DataSyncClientTypes.HdfsAuthenticationType? = nil,
        blockSize: Swift.Int? = nil,
        creationTime: ClientRuntime.Date? = nil,
        kerberosPrincipal: Swift.String? = nil,
        kmsKeyProviderUri: Swift.String? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        nameNodes: [DataSyncClientTypes.HdfsNameNode]? = nil,
        qopConfiguration: DataSyncClientTypes.QopConfiguration? = nil,
        replicationFactor: Swift.Int? = nil,
        simpleUser: Swift.String? = nil
    )
    {
        self.agentArns = agentArns
        self.authenticationType = authenticationType
        self.blockSize = blockSize
        self.creationTime = creationTime
        self.kerberosPrincipal = kerberosPrincipal
        self.kmsKeyProviderUri = kmsKeyProviderUri
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.nameNodes = nameNodes
        self.qopConfiguration = qopConfiguration
        self.replicationFactor = replicationFactor
        self.simpleUser = simpleUser
    }
}

struct DescribeLocationHdfsOutputResponseBody: Swift.Equatable {
    public let locationArn: Swift.String?
    public let locationUri: Swift.String?
    public let nameNodes: [DataSyncClientTypes.HdfsNameNode]?
    public let blockSize: Swift.Int?
    public let replicationFactor: Swift.Int?
    public let kmsKeyProviderUri: Swift.String?
    public let qopConfiguration: DataSyncClientTypes.QopConfiguration?
    public let authenticationType: DataSyncClientTypes.HdfsAuthenticationType?
    public let simpleUser: Swift.String?
    public let kerberosPrincipal: Swift.String?
    public let agentArns: [Swift.String]?
    public let creationTime: ClientRuntime.Date?
}

extension DescribeLocationHdfsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blockSize = "BlockSize"
        case creationTime = "CreationTime"
        case kerberosPrincipal = "KerberosPrincipal"
        case kmsKeyProviderUri = "KmsKeyProviderUri"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case nameNodes = "NameNodes"
        case qopConfiguration = "QopConfiguration"
        case replicationFactor = "ReplicationFactor"
        case simpleUser = "SimpleUser"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let nameNodesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.HdfsNameNode?].self, forKey: .nameNodes)
        var nameNodesDecoded0:[DataSyncClientTypes.HdfsNameNode]? = nil
        if let nameNodesContainer = nameNodesContainer {
            nameNodesDecoded0 = [DataSyncClientTypes.HdfsNameNode]()
            for structure0 in nameNodesContainer {
                if let structure0 = structure0 {
                    nameNodesDecoded0?.append(structure0)
                }
            }
        }
        nameNodes = nameNodesDecoded0
        let blockSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockSize)
        blockSize = blockSizeDecoded
        let replicationFactorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .replicationFactor)
        replicationFactor = replicationFactorDecoded
        let kmsKeyProviderUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyProviderUri)
        kmsKeyProviderUri = kmsKeyProviderUriDecoded
        let qopConfigurationDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.QopConfiguration.self, forKey: .qopConfiguration)
        qopConfiguration = qopConfigurationDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.HdfsAuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let simpleUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .simpleUser)
        simpleUser = simpleUserDecoded
        let kerberosPrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kerberosPrincipal)
        kerberosPrincipal = kerberosPrincipalDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

public struct DescribeLocationNfsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationNfsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationNfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationNfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationNfsOutputError>
}

extension DescribeLocationNfsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationNfsInput(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension DescribeLocationNfsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

public struct DescribeLocationNfsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationNfsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationNfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationNfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationNfsOutputError>
}

public struct DescribeLocationNfsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationNfsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationNfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationNfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationNfsOutputError>
}

public struct DescribeLocationNfsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationNfsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DescribeLocationNfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLocationNfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationNfsOutputError>
}

public struct DescribeLocationNfsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationNfsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DescribeLocationNfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLocationNfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationNfsOutputError>
}

/// DescribeLocationNfsRequest
public struct DescribeLocationNfsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the NFS location to describe.
    /// This member is required.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationNfsInputBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension DescribeLocationNfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension DescribeLocationNfsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLocationNfsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLocationNfsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLocationNfsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationNfsOutputResponse(creationTime: \(Swift.String(describing: creationTime)), locationArn: \(Swift.String(describing: locationArn)), locationUri: \(Swift.String(describing: locationUri)), mountOptions: \(Swift.String(describing: mountOptions)), onPremConfig: \(Swift.String(describing: onPremConfig)))"}
}

extension DescribeLocationNfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLocationNfsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.mountOptions = output.mountOptions
            self.onPremConfig = output.onPremConfig
        } else {
            self.creationTime = nil
            self.locationArn = nil
            self.locationUri = nil
            self.mountOptions = nil
            self.onPremConfig = nil
        }
    }
}

/// DescribeLocationNfsResponse
public struct DescribeLocationNfsOutputResponse: Swift.Equatable {
    /// The time that the NFS location was created.
    public var creationTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the NFS location that was described.
    public var locationArn: Swift.String?
    /// The URL of the source NFS location that was described.
    public var locationUri: Swift.String?
    /// The NFS mount options that DataSync used to mount your NFS share.
    public var mountOptions: DataSyncClientTypes.NfsMountOptions?
    /// A list of Amazon Resource Names (ARNs) of agents to use for a Network File System (NFS) location.
    public var onPremConfig: DataSyncClientTypes.OnPremConfig?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        mountOptions: DataSyncClientTypes.NfsMountOptions? = nil,
        onPremConfig: DataSyncClientTypes.OnPremConfig? = nil
    )
    {
        self.creationTime = creationTime
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.mountOptions = mountOptions
        self.onPremConfig = onPremConfig
    }
}

struct DescribeLocationNfsOutputResponseBody: Swift.Equatable {
    public let locationArn: Swift.String?
    public let locationUri: Swift.String?
    public let onPremConfig: DataSyncClientTypes.OnPremConfig?
    public let mountOptions: DataSyncClientTypes.NfsMountOptions?
    public let creationTime: ClientRuntime.Date?
}

extension DescribeLocationNfsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case mountOptions = "MountOptions"
        case onPremConfig = "OnPremConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let onPremConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.OnPremConfig.self, forKey: .onPremConfig)
        onPremConfig = onPremConfigDecoded
        let mountOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.NfsMountOptions.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

public struct DescribeLocationObjectStorageInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationObjectStorageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationObjectStorageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationObjectStorageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationObjectStorageOutputError>
}

extension DescribeLocationObjectStorageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationObjectStorageInput(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension DescribeLocationObjectStorageInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

public struct DescribeLocationObjectStorageInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationObjectStorageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationObjectStorageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationObjectStorageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationObjectStorageOutputError>
}

public struct DescribeLocationObjectStorageInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationObjectStorageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationObjectStorageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationObjectStorageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationObjectStorageOutputError>
}

public struct DescribeLocationObjectStorageInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationObjectStorageInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DescribeLocationObjectStorageInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLocationObjectStorageInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationObjectStorageOutputError>
}

public struct DescribeLocationObjectStorageInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationObjectStorageInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DescribeLocationObjectStorageInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLocationObjectStorageInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationObjectStorageOutputError>
}

/// DescribeLocationObjectStorageRequest
public struct DescribeLocationObjectStorageInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the self-managed object storage server location that was described.
    /// This member is required.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationObjectStorageInputBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension DescribeLocationObjectStorageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension DescribeLocationObjectStorageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLocationObjectStorageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLocationObjectStorageOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLocationObjectStorageOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationObjectStorageOutputResponse(accessKey: \(Swift.String(describing: accessKey)), agentArns: \(Swift.String(describing: agentArns)), creationTime: \(Swift.String(describing: creationTime)), locationArn: \(Swift.String(describing: locationArn)), locationUri: \(Swift.String(describing: locationUri)), serverPort: \(Swift.String(describing: serverPort)), serverProtocol: \(Swift.String(describing: serverProtocol)))"}
}

extension DescribeLocationObjectStorageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLocationObjectStorageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accessKey = output.accessKey
            self.agentArns = output.agentArns
            self.creationTime = output.creationTime
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.serverPort = output.serverPort
            self.serverProtocol = output.serverProtocol
        } else {
            self.accessKey = nil
            self.agentArns = nil
            self.creationTime = nil
            self.locationArn = nil
            self.locationUri = nil
            self.serverPort = nil
            self.serverProtocol = nil
        }
    }
}

/// DescribeLocationObjectStorageResponse
public struct DescribeLocationObjectStorageOutputResponse: Swift.Equatable {
    /// Optional. The access key is used if credentials are required to access the self-managed object storage server. If your object storage requires a user name and password to authenticate, use AccessKey and SecretKey to provide the user name and password, respectively.
    public var accessKey: Swift.String?
    /// The Amazon Resource Name (ARN) of the agents associated with the self-managed object storage server location.
    public var agentArns: [Swift.String]?
    /// The time that the self-managed object storage server agent was created.
    public var creationTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the self-managed object storage server location to describe.
    public var locationArn: Swift.String?
    /// The URL of the source self-managed object storage server location that was described.
    public var locationUri: Swift.String?
    /// The port that your self-managed object storage server accepts inbound network traffic on. The server port is set by default to TCP 80 (HTTP) or TCP 443 (HTTPS).
    public var serverPort: Swift.Int?
    /// The protocol that the object storage server uses to communicate. Valid values are HTTP or HTTPS.
    public var serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol?

    public init (
        accessKey: Swift.String? = nil,
        agentArns: [Swift.String]? = nil,
        creationTime: ClientRuntime.Date? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        serverPort: Swift.Int? = nil,
        serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol? = nil
    )
    {
        self.accessKey = accessKey
        self.agentArns = agentArns
        self.creationTime = creationTime
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.serverPort = serverPort
        self.serverProtocol = serverProtocol
    }
}

struct DescribeLocationObjectStorageOutputResponseBody: Swift.Equatable {
    public let locationArn: Swift.String?
    public let locationUri: Swift.String?
    public let accessKey: Swift.String?
    public let serverPort: Swift.Int?
    public let serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol?
    public let agentArns: [Swift.String]?
    public let creationTime: ClientRuntime.Date?
}

extension DescribeLocationObjectStorageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKey = "AccessKey"
        case agentArns = "AgentArns"
        case creationTime = "CreationTime"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case serverPort = "ServerPort"
        case serverProtocol = "ServerProtocol"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let accessKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKey)
        accessKey = accessKeyDecoded
        let serverPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .serverPort)
        serverPort = serverPortDecoded
        let serverProtocolDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ObjectStorageServerProtocol.self, forKey: .serverProtocol)
        serverProtocol = serverProtocolDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

public struct DescribeLocationS3InputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationS3InputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationS3Input>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationS3Input>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationS3OutputError>
}

extension DescribeLocationS3Input: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationS3Input(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension DescribeLocationS3Input: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

public struct DescribeLocationS3InputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationS3InputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationS3Input>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationS3Input>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationS3OutputError>
}

public struct DescribeLocationS3InputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationS3InputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationS3Input>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationS3Input>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationS3OutputError>
}

public struct DescribeLocationS3InputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationS3InputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DescribeLocationS3Input,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLocationS3Input
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationS3OutputError>
}

public struct DescribeLocationS3InputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationS3InputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DescribeLocationS3Input,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLocationS3Input
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationS3OutputError>
}

/// DescribeLocationS3Request
public struct DescribeLocationS3Input: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Amazon S3 bucket location to describe.
    /// This member is required.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationS3InputBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension DescribeLocationS3InputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension DescribeLocationS3OutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLocationS3OutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLocationS3OutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLocationS3OutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationS3OutputResponse(agentArns: \(Swift.String(describing: agentArns)), creationTime: \(Swift.String(describing: creationTime)), locationArn: \(Swift.String(describing: locationArn)), locationUri: \(Swift.String(describing: locationUri)), s3Config: \(Swift.String(describing: s3Config)), s3StorageClass: \(Swift.String(describing: s3StorageClass)))"}
}

extension DescribeLocationS3OutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLocationS3OutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentArns = output.agentArns
            self.creationTime = output.creationTime
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.s3Config = output.s3Config
            self.s3StorageClass = output.s3StorageClass
        } else {
            self.agentArns = nil
            self.creationTime = nil
            self.locationArn = nil
            self.locationUri = nil
            self.s3Config = nil
            self.s3StorageClass = nil
        }
    }
}

/// DescribeLocationS3Response
public struct DescribeLocationS3OutputResponse: Swift.Equatable {
    /// If you are using DataSync on an Amazon Web Services Outpost, the Amazon Resource Name (ARNs) of the EC2 agents deployed on your Outpost. For more information about launching a DataSync agent on an Amazon Web Services Outpost, see [Deploy your DataSync agent on Outposts](https://docs.aws.amazon.com/datasync/latest/userguide/deploy-agents.html#outposts-agent).
    public var agentArns: [Swift.String]?
    /// The time that the Amazon S3 bucket location was created.
    public var creationTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the Amazon S3 bucket or access point.
    public var locationArn: Swift.String?
    /// The URL of the Amazon S3 location that was described.
    public var locationUri: Swift.String?
    /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that is used to access an Amazon S3 bucket. For detailed information about using such a role, see Creating a Location for Amazon S3 in the DataSync User Guide.
    public var s3Config: DataSyncClientTypes.S3Config?
    /// The Amazon S3 storage class that you chose to store your files in when this location is used as a task destination. For more information about S3 storage classes, see [Amazon S3 Storage Classes](http://aws.amazon.com/s3/storage-classes/). Some storage classes have behaviors that can affect your S3 storage cost. For detailed information, see [Considerations when working with S3 storage classes in DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes).
    public var s3StorageClass: DataSyncClientTypes.S3StorageClass?

    public init (
        agentArns: [Swift.String]? = nil,
        creationTime: ClientRuntime.Date? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        s3Config: DataSyncClientTypes.S3Config? = nil,
        s3StorageClass: DataSyncClientTypes.S3StorageClass? = nil
    )
    {
        self.agentArns = agentArns
        self.creationTime = creationTime
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.s3Config = s3Config
        self.s3StorageClass = s3StorageClass
    }
}

struct DescribeLocationS3OutputResponseBody: Swift.Equatable {
    public let locationArn: Swift.String?
    public let locationUri: Swift.String?
    public let s3StorageClass: DataSyncClientTypes.S3StorageClass?
    public let s3Config: DataSyncClientTypes.S3Config?
    public let agentArns: [Swift.String]?
    public let creationTime: ClientRuntime.Date?
}

extension DescribeLocationS3OutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case creationTime = "CreationTime"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case s3Config = "S3Config"
        case s3StorageClass = "S3StorageClass"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let s3StorageClassDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.S3StorageClass.self, forKey: .s3StorageClass)
        s3StorageClass = s3StorageClassDecoded
        let s3ConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.S3Config.self, forKey: .s3Config)
        s3Config = s3ConfigDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

public struct DescribeLocationSmbInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationSmbInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationSmbInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationSmbInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationSmbOutputError>
}

extension DescribeLocationSmbInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationSmbInput(locationArn: \(Swift.String(describing: locationArn)))"}
}

extension DescribeLocationSmbInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

public struct DescribeLocationSmbInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationSmbInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationSmbInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationSmbInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationSmbOutputError>
}

public struct DescribeLocationSmbInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationSmbInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLocationSmbInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLocationSmbInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationSmbOutputError>
}

public struct DescribeLocationSmbInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationSmbInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DescribeLocationSmbInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLocationSmbInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationSmbOutputError>
}

public struct DescribeLocationSmbInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLocationSmbInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DescribeLocationSmbInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLocationSmbInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLocationSmbOutputError>
}

/// DescribeLocationSmbRequest
public struct DescribeLocationSmbInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the SMB location to describe.
    /// This member is required.
    public var locationArn: Swift.String?

    public init (
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationSmbInputBody: Swift.Equatable {
    public let locationArn: Swift.String?
}

extension DescribeLocationSmbInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension DescribeLocationSmbOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLocationSmbOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLocationSmbOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLocationSmbOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLocationSmbOutputResponse(agentArns: \(Swift.String(describing: agentArns)), creationTime: \(Swift.String(describing: creationTime)), domain: \(Swift.String(describing: domain)), locationArn: \(Swift.String(describing: locationArn)), locationUri: \(Swift.String(describing: locationUri)), mountOptions: \(Swift.String(describing: mountOptions)), user: \(Swift.String(describing: user)))"}
}

extension DescribeLocationSmbOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLocationSmbOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentArns = output.agentArns
            self.creationTime = output.creationTime
            self.domain = output.domain
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.mountOptions = output.mountOptions
            self.user = output.user
        } else {
            self.agentArns = nil
            self.creationTime = nil
            self.domain = nil
            self.locationArn = nil
            self.locationUri = nil
            self.mountOptions = nil
            self.user = nil
        }
    }
}

/// DescribeLocationSmbResponse
public struct DescribeLocationSmbOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the source SMB file system location that is created.
    public var agentArns: [Swift.String]?
    /// The time that the SMB location was created.
    public var creationTime: ClientRuntime.Date?
    /// The name of the Windows domain that the SMB server belongs to.
    public var domain: Swift.String?
    /// The Amazon Resource Name (ARN) of the SMB location that was described.
    public var locationArn: Swift.String?
    /// The URL of the source SMB location that was described.
    public var locationUri: Swift.String?
    /// The mount options that are available for DataSync to use to access an SMB location.
    public var mountOptions: DataSyncClientTypes.SmbMountOptions?
    /// The user who can mount the share, has the permissions to access files and folders in the SMB share.
    public var user: Swift.String?

    public init (
        agentArns: [Swift.String]? = nil,
        creationTime: ClientRuntime.Date? = nil,
        domain: Swift.String? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        mountOptions: DataSyncClientTypes.SmbMountOptions? = nil,
        user: Swift.String? = nil
    )
    {
        self.agentArns = agentArns
        self.creationTime = creationTime
        self.domain = domain
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.mountOptions = mountOptions
        self.user = user
    }
}

struct DescribeLocationSmbOutputResponseBody: Swift.Equatable {
    public let locationArn: Swift.String?
    public let locationUri: Swift.String?
    public let agentArns: [Swift.String]?
    public let user: Swift.String?
    public let domain: Swift.String?
    public let mountOptions: DataSyncClientTypes.SmbMountOptions?
    public let creationTime: ClientRuntime.Date?
}

extension DescribeLocationSmbOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case creationTime = "CreationTime"
        case domain = "Domain"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case mountOptions = "MountOptions"
        case user = "User"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let mountOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.SmbMountOptions.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

public struct DescribeTaskExecutionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTaskExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTaskExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTaskExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTaskExecutionOutputError>
}

extension DescribeTaskExecutionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTaskExecutionInput(taskExecutionArn: \(Swift.String(describing: taskExecutionArn)))"}
}

extension DescribeTaskExecutionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskExecutionArn = "TaskExecutionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskExecutionArn = taskExecutionArn {
            try encodeContainer.encode(taskExecutionArn, forKey: .taskExecutionArn)
        }
    }
}

public struct DescribeTaskExecutionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTaskExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTaskExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTaskExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTaskExecutionOutputError>
}

public struct DescribeTaskExecutionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTaskExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTaskExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTaskExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTaskExecutionOutputError>
}

public struct DescribeTaskExecutionInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTaskExecutionInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DescribeTaskExecutionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeTaskExecutionInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTaskExecutionOutputError>
}

public struct DescribeTaskExecutionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTaskExecutionInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DescribeTaskExecutionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeTaskExecutionInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTaskExecutionOutputError>
}

/// DescribeTaskExecutionRequest
public struct DescribeTaskExecutionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the task that is being executed.
    /// This member is required.
    public var taskExecutionArn: Swift.String?

    public init (
        taskExecutionArn: Swift.String? = nil
    )
    {
        self.taskExecutionArn = taskExecutionArn
    }
}

struct DescribeTaskExecutionInputBody: Swift.Equatable {
    public let taskExecutionArn: Swift.String?
}

extension DescribeTaskExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskExecutionArn = "TaskExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskExecutionArn)
        taskExecutionArn = taskExecutionArnDecoded
    }
}

extension DescribeTaskExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTaskExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTaskExecutionOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTaskExecutionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTaskExecutionOutputResponse(bytesTransferred: \(Swift.String(describing: bytesTransferred)), bytesWritten: \(Swift.String(describing: bytesWritten)), estimatedBytesToTransfer: \(Swift.String(describing: estimatedBytesToTransfer)), estimatedFilesToTransfer: \(Swift.String(describing: estimatedFilesToTransfer)), excludes: \(Swift.String(describing: excludes)), filesTransferred: \(Swift.String(describing: filesTransferred)), includes: \(Swift.String(describing: includes)), options: \(Swift.String(describing: options)), result: \(Swift.String(describing: result)), startTime: \(Swift.String(describing: startTime)), status: \(Swift.String(describing: status)), taskExecutionArn: \(Swift.String(describing: taskExecutionArn)))"}
}

extension DescribeTaskExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeTaskExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bytesTransferred = output.bytesTransferred
            self.bytesWritten = output.bytesWritten
            self.estimatedBytesToTransfer = output.estimatedBytesToTransfer
            self.estimatedFilesToTransfer = output.estimatedFilesToTransfer
            self.excludes = output.excludes
            self.filesTransferred = output.filesTransferred
            self.includes = output.includes
            self.options = output.options
            self.result = output.result
            self.startTime = output.startTime
            self.status = output.status
            self.taskExecutionArn = output.taskExecutionArn
        } else {
            self.bytesTransferred = 0
            self.bytesWritten = 0
            self.estimatedBytesToTransfer = 0
            self.estimatedFilesToTransfer = 0
            self.excludes = nil
            self.filesTransferred = 0
            self.includes = nil
            self.options = nil
            self.result = nil
            self.startTime = nil
            self.status = nil
            self.taskExecutionArn = nil
        }
    }
}

/// DescribeTaskExecutionResponse
public struct DescribeTaskExecutionOutputResponse: Swift.Equatable {
    /// The physical number of bytes transferred over the network.
    public var bytesTransferred: Swift.Int
    /// The number of logical bytes written to the destination Amazon Web Services storage resource.
    public var bytesWritten: Swift.Int
    /// The estimated physical number of bytes that is to be transferred over the network.
    public var estimatedBytesToTransfer: Swift.Int
    /// The expected number of files that is to be transferred over the network. This value is calculated during the PREPARING phase, before the TRANSFERRING phase. This value is the expected number of files to be transferred. It's calculated based on comparing the content of the source and destination locations and finding the delta that needs to be transferred.
    public var estimatedFilesToTransfer: Swift.Int
    /// A list of filter rules that determines which files to exclude from a task. The list should contain a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example: "/folder1|/folder2"
    public var excludes: [DataSyncClientTypes.FilterRule]?
    /// The actual number of files that was transferred over the network. This value is calculated and updated on an ongoing basis during the TRANSFERRING phase. It's updated periodically when each file is read from the source and sent over the network. If failures occur during a transfer, this value can be less than EstimatedFilesToTransfer. This value can also be greater than EstimatedFilesTransferred in some cases. This element is implementation-specific for some location types, so don't use it as an indicator for a correct file number or to monitor your task execution.
    public var filesTransferred: Swift.Int
    /// A list of filter rules that determines which files to include when running a task. The list should contain a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example: "/folder1|/folder2"
    public var includes: [DataSyncClientTypes.FilterRule]?
    /// Represents the options that are available to control the behavior of a [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) operation. Behavior includes preserving metadata such as user ID (UID), group ID (GID), and file permissions, and also overwriting files in the destination, data integrity verification, and so on. A task has a set of default options associated with it. If you don't specify an option in [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html), the default value is used. You can override the defaults options on each task execution by specifying an overriding Options value to [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html).
    public var options: DataSyncClientTypes.Options?
    /// The result of the task execution.
    public var result: DataSyncClientTypes.TaskExecutionResultDetail?
    /// The time that the task execution was started.
    public var startTime: ClientRuntime.Date?
    /// The status of the task execution. For detailed information about task execution statuses, see Understanding Task Statuses in the DataSync User Guide.
    public var status: DataSyncClientTypes.TaskExecutionStatus?
    /// The Amazon Resource Name (ARN) of the task execution that was described. TaskExecutionArn is hierarchical and includes TaskArn for the task that was executed. For example, a TaskExecution value with the ARN arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2/execution/exec-08ef1e88ec491019b executed the task with the ARN arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2.
    public var taskExecutionArn: Swift.String?

    public init (
        bytesTransferred: Swift.Int = 0,
        bytesWritten: Swift.Int = 0,
        estimatedBytesToTransfer: Swift.Int = 0,
        estimatedFilesToTransfer: Swift.Int = 0,
        excludes: [DataSyncClientTypes.FilterRule]? = nil,
        filesTransferred: Swift.Int = 0,
        includes: [DataSyncClientTypes.FilterRule]? = nil,
        options: DataSyncClientTypes.Options? = nil,
        result: DataSyncClientTypes.TaskExecutionResultDetail? = nil,
        startTime: ClientRuntime.Date? = nil,
        status: DataSyncClientTypes.TaskExecutionStatus? = nil,
        taskExecutionArn: Swift.String? = nil
    )
    {
        self.bytesTransferred = bytesTransferred
        self.bytesWritten = bytesWritten
        self.estimatedBytesToTransfer = estimatedBytesToTransfer
        self.estimatedFilesToTransfer = estimatedFilesToTransfer
        self.excludes = excludes
        self.filesTransferred = filesTransferred
        self.includes = includes
        self.options = options
        self.result = result
        self.startTime = startTime
        self.status = status
        self.taskExecutionArn = taskExecutionArn
    }
}

struct DescribeTaskExecutionOutputResponseBody: Swift.Equatable {
    public let taskExecutionArn: Swift.String?
    public let status: DataSyncClientTypes.TaskExecutionStatus?
    public let options: DataSyncClientTypes.Options?
    public let excludes: [DataSyncClientTypes.FilterRule]?
    public let includes: [DataSyncClientTypes.FilterRule]?
    public let startTime: ClientRuntime.Date?
    public let estimatedFilesToTransfer: Swift.Int
    public let estimatedBytesToTransfer: Swift.Int
    public let filesTransferred: Swift.Int
    public let bytesWritten: Swift.Int
    public let bytesTransferred: Swift.Int
    public let result: DataSyncClientTypes.TaskExecutionResultDetail?
}

extension DescribeTaskExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bytesTransferred = "BytesTransferred"
        case bytesWritten = "BytesWritten"
        case estimatedBytesToTransfer = "EstimatedBytesToTransfer"
        case estimatedFilesToTransfer = "EstimatedFilesToTransfer"
        case excludes = "Excludes"
        case filesTransferred = "FilesTransferred"
        case includes = "Includes"
        case options = "Options"
        case result = "Result"
        case startTime = "StartTime"
        case status = "Status"
        case taskExecutionArn = "TaskExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskExecutionArn)
        taskExecutionArn = taskExecutionArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Options.self, forKey: .options)
        options = optionsDecoded
        let excludesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .excludes)
        var excludesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in excludesContainer {
                if let structure0 = structure0 {
                    excludesDecoded0?.append(structure0)
                }
            }
        }
        excludes = excludesDecoded0
        let includesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .includes)
        var includesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let includesContainer = includesContainer {
            includesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in includesContainer {
                if let structure0 = structure0 {
                    includesDecoded0?.append(structure0)
                }
            }
        }
        includes = includesDecoded0
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let estimatedFilesToTransferDecoded = try containerValues.decode(Swift.Int.self, forKey: .estimatedFilesToTransfer)
        estimatedFilesToTransfer = estimatedFilesToTransferDecoded
        let estimatedBytesToTransferDecoded = try containerValues.decode(Swift.Int.self, forKey: .estimatedBytesToTransfer)
        estimatedBytesToTransfer = estimatedBytesToTransferDecoded
        let filesTransferredDecoded = try containerValues.decode(Swift.Int.self, forKey: .filesTransferred)
        filesTransferred = filesTransferredDecoded
        let bytesWrittenDecoded = try containerValues.decode(Swift.Int.self, forKey: .bytesWritten)
        bytesWritten = bytesWrittenDecoded
        let bytesTransferredDecoded = try containerValues.decode(Swift.Int.self, forKey: .bytesTransferred)
        bytesTransferred = bytesTransferredDecoded
        let resultDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskExecutionResultDetail.self, forKey: .result)
        result = resultDecoded
    }
}

public struct DescribeTaskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTaskOutputError>
}

extension DescribeTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTaskInput(taskArn: \(Swift.String(describing: taskArn)))"}
}

extension DescribeTaskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskArn = "TaskArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskArn = taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }
}

public struct DescribeTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTaskOutputError>
}

public struct DescribeTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTaskOutputError>
}

public struct DescribeTaskInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTaskInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DescribeTaskInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeTaskInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTaskOutputError>
}

public struct DescribeTaskInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTaskInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DescribeTaskInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeTaskInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTaskOutputError>
}

/// DescribeTaskRequest
public struct DescribeTaskInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the task to describe.
    /// This member is required.
    public var taskArn: Swift.String?

    public init (
        taskArn: Swift.String? = nil
    )
    {
        self.taskArn = taskArn
    }
}

struct DescribeTaskInputBody: Swift.Equatable {
    public let taskArn: Swift.String?
}

extension DescribeTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskArn = "TaskArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
    }
}

extension DescribeTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTaskOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTaskOutputResponse(cloudWatchLogGroupArn: \(Swift.String(describing: cloudWatchLogGroupArn)), creationTime: \(Swift.String(describing: creationTime)), currentTaskExecutionArn: \(Swift.String(describing: currentTaskExecutionArn)), destinationLocationArn: \(Swift.String(describing: destinationLocationArn)), destinationNetworkInterfaceArns: \(Swift.String(describing: destinationNetworkInterfaceArns)), errorCode: \(Swift.String(describing: errorCode)), errorDetail: \(Swift.String(describing: errorDetail)), excludes: \(Swift.String(describing: excludes)), includes: \(Swift.String(describing: includes)), name: \(Swift.String(describing: name)), options: \(Swift.String(describing: options)), schedule: \(Swift.String(describing: schedule)), sourceLocationArn: \(Swift.String(describing: sourceLocationArn)), sourceNetworkInterfaceArns: \(Swift.String(describing: sourceNetworkInterfaceArns)), status: \(Swift.String(describing: status)), taskArn: \(Swift.String(describing: taskArn)))"}
}

extension DescribeTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cloudWatchLogGroupArn = output.cloudWatchLogGroupArn
            self.creationTime = output.creationTime
            self.currentTaskExecutionArn = output.currentTaskExecutionArn
            self.destinationLocationArn = output.destinationLocationArn
            self.destinationNetworkInterfaceArns = output.destinationNetworkInterfaceArns
            self.errorCode = output.errorCode
            self.errorDetail = output.errorDetail
            self.excludes = output.excludes
            self.includes = output.includes
            self.name = output.name
            self.options = output.options
            self.schedule = output.schedule
            self.sourceLocationArn = output.sourceLocationArn
            self.sourceNetworkInterfaceArns = output.sourceNetworkInterfaceArns
            self.status = output.status
            self.taskArn = output.taskArn
        } else {
            self.cloudWatchLogGroupArn = nil
            self.creationTime = nil
            self.currentTaskExecutionArn = nil
            self.destinationLocationArn = nil
            self.destinationNetworkInterfaceArns = nil
            self.errorCode = nil
            self.errorDetail = nil
            self.excludes = nil
            self.includes = nil
            self.name = nil
            self.options = nil
            self.schedule = nil
            self.sourceLocationArn = nil
            self.sourceNetworkInterfaceArns = nil
            self.status = nil
            self.taskArn = nil
        }
    }
}

/// DescribeTaskResponse
public struct DescribeTaskOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Amazon CloudWatch log group that was used to monitor and log events in the task. For more information on these groups, see Working with Log Groups and Log Streams in the Amazon CloudWatch User Guide.
    public var cloudWatchLogGroupArn: Swift.String?
    /// The time that the task was created.
    public var creationTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the task execution that is syncing files.
    public var currentTaskExecutionArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon Web Services storage resource's location.
    public var destinationLocationArn: Swift.String?
    /// The Amazon Resource Names (ARNs) of the destination elastic network interfaces (ENIs) that were created for your subnet.
    public var destinationNetworkInterfaceArns: [Swift.String]?
    /// Errors that DataSync encountered during execution of the task. You can use this error code to help troubleshoot issues.
    public var errorCode: Swift.String?
    /// Detailed description of an error that was encountered during the task execution. You can use this information to help troubleshoot issues.
    public var errorDetail: Swift.String?
    /// A list of filter rules that determines which files to exclude from a task. The list should contain a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example, "/folder1|/folder2".
    public var excludes: [DataSyncClientTypes.FilterRule]?
    /// A list of filter rules that determines which files to include when running a task. The pattern contains a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example, "/folder1|/folder2".
    public var includes: [DataSyncClientTypes.FilterRule]?
    /// The name of the task that was described.
    public var name: Swift.String?
    /// The set of configuration options that control the behavior of a single execution of the task that occurs when you call StartTaskExecution. You can configure these options to preserve metadata such as user ID (UID) and group (GID), file permissions, data integrity verification, and so on. For each individual task execution, you can override these options by specifying the overriding OverrideOptions value to [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) operation.
    public var options: DataSyncClientTypes.Options?
    /// The schedule used to periodically transfer files from a source to a destination location.
    public var schedule: DataSyncClientTypes.TaskSchedule?
    /// The Amazon Resource Name (ARN) of the source file system's location.
    public var sourceLocationArn: Swift.String?
    /// The Amazon Resource Names (ARNs) of the source elastic network interfaces (ENIs) that were created for your subnet.
    public var sourceNetworkInterfaceArns: [Swift.String]?
    /// The status of the task that was described. For detailed information about task execution statuses, see Understanding Task Statuses in the DataSync User Guide.
    public var status: DataSyncClientTypes.TaskStatus?
    /// The Amazon Resource Name (ARN) of the task that was described.
    public var taskArn: Swift.String?

    public init (
        cloudWatchLogGroupArn: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        currentTaskExecutionArn: Swift.String? = nil,
        destinationLocationArn: Swift.String? = nil,
        destinationNetworkInterfaceArns: [Swift.String]? = nil,
        errorCode: Swift.String? = nil,
        errorDetail: Swift.String? = nil,
        excludes: [DataSyncClientTypes.FilterRule]? = nil,
        includes: [DataSyncClientTypes.FilterRule]? = nil,
        name: Swift.String? = nil,
        options: DataSyncClientTypes.Options? = nil,
        schedule: DataSyncClientTypes.TaskSchedule? = nil,
        sourceLocationArn: Swift.String? = nil,
        sourceNetworkInterfaceArns: [Swift.String]? = nil,
        status: DataSyncClientTypes.TaskStatus? = nil,
        taskArn: Swift.String? = nil
    )
    {
        self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
        self.creationTime = creationTime
        self.currentTaskExecutionArn = currentTaskExecutionArn
        self.destinationLocationArn = destinationLocationArn
        self.destinationNetworkInterfaceArns = destinationNetworkInterfaceArns
        self.errorCode = errorCode
        self.errorDetail = errorDetail
        self.excludes = excludes
        self.includes = includes
        self.name = name
        self.options = options
        self.schedule = schedule
        self.sourceLocationArn = sourceLocationArn
        self.sourceNetworkInterfaceArns = sourceNetworkInterfaceArns
        self.status = status
        self.taskArn = taskArn
    }
}

struct DescribeTaskOutputResponseBody: Swift.Equatable {
    public let taskArn: Swift.String?
    public let status: DataSyncClientTypes.TaskStatus?
    public let name: Swift.String?
    public let currentTaskExecutionArn: Swift.String?
    public let sourceLocationArn: Swift.String?
    public let destinationLocationArn: Swift.String?
    public let cloudWatchLogGroupArn: Swift.String?
    public let sourceNetworkInterfaceArns: [Swift.String]?
    public let destinationNetworkInterfaceArns: [Swift.String]?
    public let options: DataSyncClientTypes.Options?
    public let excludes: [DataSyncClientTypes.FilterRule]?
    public let schedule: DataSyncClientTypes.TaskSchedule?
    public let errorCode: Swift.String?
    public let errorDetail: Swift.String?
    public let creationTime: ClientRuntime.Date?
    public let includes: [DataSyncClientTypes.FilterRule]?
}

extension DescribeTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case creationTime = "CreationTime"
        case currentTaskExecutionArn = "CurrentTaskExecutionArn"
        case destinationLocationArn = "DestinationLocationArn"
        case destinationNetworkInterfaceArns = "DestinationNetworkInterfaceArns"
        case errorCode = "ErrorCode"
        case errorDetail = "ErrorDetail"
        case excludes = "Excludes"
        case includes = "Includes"
        case name = "Name"
        case options = "Options"
        case schedule = "Schedule"
        case sourceLocationArn = "SourceLocationArn"
        case sourceNetworkInterfaceArns = "SourceNetworkInterfaceArns"
        case status = "Status"
        case taskArn = "TaskArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskStatus.self, forKey: .status)
        status = statusDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let currentTaskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentTaskExecutionArn)
        currentTaskExecutionArn = currentTaskExecutionArnDecoded
        let sourceLocationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLocationArn)
        sourceLocationArn = sourceLocationArnDecoded
        let destinationLocationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationLocationArn)
        destinationLocationArn = destinationLocationArnDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let sourceNetworkInterfaceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sourceNetworkInterfaceArns)
        var sourceNetworkInterfaceArnsDecoded0:[Swift.String]? = nil
        if let sourceNetworkInterfaceArnsContainer = sourceNetworkInterfaceArnsContainer {
            sourceNetworkInterfaceArnsDecoded0 = [Swift.String]()
            for string0 in sourceNetworkInterfaceArnsContainer {
                if let string0 = string0 {
                    sourceNetworkInterfaceArnsDecoded0?.append(string0)
                }
            }
        }
        sourceNetworkInterfaceArns = sourceNetworkInterfaceArnsDecoded0
        let destinationNetworkInterfaceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .destinationNetworkInterfaceArns)
        var destinationNetworkInterfaceArnsDecoded0:[Swift.String]? = nil
        if let destinationNetworkInterfaceArnsContainer = destinationNetworkInterfaceArnsContainer {
            destinationNetworkInterfaceArnsDecoded0 = [Swift.String]()
            for string0 in destinationNetworkInterfaceArnsContainer {
                if let string0 = string0 {
                    destinationNetworkInterfaceArnsDecoded0?.append(string0)
                }
            }
        }
        destinationNetworkInterfaceArns = destinationNetworkInterfaceArnsDecoded0
        let optionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Options.self, forKey: .options)
        options = optionsDecoded
        let excludesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .excludes)
        var excludesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in excludesContainer {
                if let structure0 = structure0 {
                    excludesDecoded0?.append(structure0)
                }
            }
        }
        excludes = excludesDecoded0
        let scheduleDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskSchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorDetailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorDetail)
        errorDetail = errorDetailDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let includesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .includes)
        var includesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let includesContainer = includesContainer {
            includesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in includesContainer {
                if let structure0 = structure0 {
                    includesDecoded0?.append(structure0)
                }
            }
        }
        includes = includesDecoded0
    }
}

extension DataSyncClientTypes.Ec2Config: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupArns = "SecurityGroupArns"
        case subnetArn = "SubnetArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupArns = securityGroupArns {
            var securityGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupArns)
            for ec2securitygrouparnlist0 in securityGroupArns {
                try securityGroupArnsContainer.encode(ec2securitygrouparnlist0)
            }
        }
        if let subnetArn = subnetArn {
            try encodeContainer.encode(subnetArn, forKey: .subnetArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetArn)
        subnetArn = subnetArnDecoded
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
    }
}

extension DataSyncClientTypes.Ec2Config: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Ec2Config(securityGroupArns: \(Swift.String(describing: securityGroupArns)), subnetArn: \(Swift.String(describing: subnetArn)))"}
}

extension DataSyncClientTypes {
    /// The subnet and the security group that DataSync uses to access target EFS file system. The subnet must have at least one mount target for that file system. The security group that you provide needs to be able to communicate with the security group on the mount target in the subnet specified.
    public struct Ec2Config: Swift.Equatable {
        /// The Amazon Resource Names (ARNs) of the security groups that are configured for the Amazon EC2 resource.
        /// This member is required.
        public var securityGroupArns: [Swift.String]?
        /// The ARN of the subnet and the security group that DataSync uses to access the target EFS file system.
        /// This member is required.
        public var subnetArn: Swift.String?

        public init (
            securityGroupArns: [Swift.String]? = nil,
            subnetArn: Swift.String? = nil
        )
        {
            self.securityGroupArns = securityGroupArns
            self.subnetArn = subnetArn
        }
    }

}

extension DataSyncClientTypes {
    public enum EndpointType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fips
        case privateLink
        case `public`
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointType] {
            return [
                .fips,
                .privateLink,
                .public,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fips: return "FIPS"
            case .privateLink: return "PRIVATE_LINK"
            case .public: return "PUBLIC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EndpointType(rawValue: rawValue) ?? EndpointType.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.FilterRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterType = "FilterType"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterType = filterType {
            try encodeContainer.encode(filterType.rawValue, forKey: .filterType)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.FilterType.self, forKey: .filterType)
        filterType = filterTypeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension DataSyncClientTypes.FilterRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FilterRule(filterType: \(Swift.String(describing: filterType)), value: \(Swift.String(describing: value)))"}
}

extension DataSyncClientTypes {
    /// Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
    public struct FilterRule: Swift.Equatable {
        /// The type of filter rule to apply. DataSync only supports the SIMPLE_PATTERN rule type.
        public var filterType: DataSyncClientTypes.FilterType?
        /// A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|" (that is, a pipe), for example: /folder1|/folder2
        public var value: Swift.String?

        public init (
            filterType: DataSyncClientTypes.FilterType? = nil,
            value: Swift.String? = nil
        )
        {
            self.filterType = filterType
            self.value = value
        }
    }

}

extension DataSyncClientTypes {
    public enum FilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case simplePattern
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterType] {
            return [
                .simplePattern,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .simplePattern: return "SIMPLE_PATTERN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FilterType(rawValue: rawValue) ?? FilterType.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum Gid: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case both
        case intValue
        case name
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Gid] {
            return [
                .both,
                .intValue,
                .name,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .both: return "BOTH"
            case .intValue: return "INT_VALUE"
            case .name: return "NAME"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Gid(rawValue: rawValue) ?? Gid.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum HdfsAuthenticationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case kerberos
        case simple
        case sdkUnknown(Swift.String)

        public static var allCases: [HdfsAuthenticationType] {
            return [
                .kerberos,
                .simple,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .kerberos: return "KERBEROS"
            case .simple: return "SIMPLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HdfsAuthenticationType(rawValue: rawValue) ?? HdfsAuthenticationType.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum HdfsDataTransferProtection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case authentication
        case disabled
        case integrity
        case privacy
        case sdkUnknown(Swift.String)

        public static var allCases: [HdfsDataTransferProtection] {
            return [
                .authentication,
                .disabled,
                .integrity,
                .privacy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .authentication: return "AUTHENTICATION"
            case .disabled: return "DISABLED"
            case .integrity: return "INTEGRITY"
            case .privacy: return "PRIVACY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HdfsDataTransferProtection(rawValue: rawValue) ?? HdfsDataTransferProtection.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.HdfsNameNode: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostname = "Hostname"
        case port = "Port"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hostname = hostname {
            try encodeContainer.encode(hostname, forKey: .hostname)
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostname)
        hostname = hostnameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
    }
}

extension DataSyncClientTypes.HdfsNameNode: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HdfsNameNode(hostname: \(Swift.String(describing: hostname)), port: \(Swift.String(describing: port)))"}
}

extension DataSyncClientTypes {
    /// The NameNode of the Hadoop Distributed File System (HDFS). The NameNode manages the file system's namespace. The NameNode performs operations such as opening, closing, and renaming files and directories. The NameNode contains the information to map blocks of data to the DataNodes.
    public struct HdfsNameNode: Swift.Equatable {
        /// The hostname of the NameNode in the HDFS cluster. This value is the IP address or Domain Name Service (DNS) name of the NameNode. An agent that's installed on-premises uses this hostname to communicate with the NameNode in the network.
        /// This member is required.
        public var hostname: Swift.String?
        /// The port that the NameNode uses to listen to client requests.
        /// This member is required.
        public var port: Swift.Int?

        public init (
            hostname: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.hostname = hostname
            self.port = port
        }
    }

}

extension DataSyncClientTypes {
    public enum HdfsRpcProtection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case authentication
        case disabled
        case integrity
        case privacy
        case sdkUnknown(Swift.String)

        public static var allCases: [HdfsRpcProtection] {
            return [
                .authentication,
                .disabled,
                .integrity,
                .privacy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .authentication: return "AUTHENTICATION"
            case .disabled: return "DISABLED"
            case .integrity: return "INTEGRITY"
            case .privacy: return "PRIVACY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HdfsRpcProtection(rawValue: rawValue) ?? HdfsRpcProtection.sdkUnknown(rawValue)
        }
    }
}

extension InternalException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalException(errorCode: \(Swift.String(describing: errorCode)), message: \(Swift.String(describing: message)))"}
}

extension InternalException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalExceptionBody = try responseDecoder.decode(responseBody: data)
            self.errorCode = output.errorCode
            self.message = output.message
        } else {
            self.errorCode = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when an error occurs in the DataSync service.
public struct InternalException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var errorCode: Swift.String?
    public var message: Swift.String?

    public init (
        errorCode: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.errorCode = errorCode
        self.message = message
    }
}

struct InternalExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let errorCode: Swift.String?
}

extension InternalExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
    }
}

extension InvalidRequestException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidRequestException(errorCode: \(Swift.String(describing: errorCode)), message: \(Swift.String(describing: message)))"}
}

extension InvalidRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.errorCode = output.errorCode
            self.message = output.message
        } else {
            self.errorCode = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown when the client submits a malformed request.
public struct InvalidRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var errorCode: Swift.String?
    public var message: Swift.String?

    public init (
        errorCode: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.errorCode = errorCode
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let errorCode: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
    }
}

public struct ListAgentsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAgentsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAgentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAgentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAgentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAgentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAgentsOutputError>
}

extension ListAgentsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAgentsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListAgentsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListAgentsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAgentsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAgentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAgentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAgentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAgentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAgentsOutputError>
}

public struct ListAgentsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAgentsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAgentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAgentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAgentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAgentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAgentsOutputError>
}

public struct ListAgentsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAgentsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListAgentsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAgentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListAgentsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListAgentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAgentsOutputError>
}

public struct ListAgentsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAgentsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListAgentsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAgentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListAgentsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListAgentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAgentsOutputError>
}

/// ListAgentsRequest
public struct ListAgentsInput: Swift.Equatable {
    /// The maximum number of agents to list.
    public var maxResults: Swift.Int?
    /// An opaque string that indicates the position at which to begin the next list of agents.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListAgentsInputBody: Swift.Equatable {
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension ListAgentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAgentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAgentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAgentsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAgentsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAgentsOutputResponse(agents: \(Swift.String(describing: agents)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListAgentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAgentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agents = output.agents
            self.nextToken = output.nextToken
        } else {
            self.agents = nil
            self.nextToken = nil
        }
    }
}

/// ListAgentsResponse
public struct ListAgentsOutputResponse: Swift.Equatable {
    /// A list of agents in your account.
    public var agents: [DataSyncClientTypes.AgentListEntry]?
    /// An opaque string that indicates the position at which to begin returning the next list of agents.
    public var nextToken: Swift.String?

    public init (
        agents: [DataSyncClientTypes.AgentListEntry]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.agents = agents
        self.nextToken = nextToken
    }
}

struct ListAgentsOutputResponseBody: Swift.Equatable {
    public let agents: [DataSyncClientTypes.AgentListEntry]?
    public let nextToken: Swift.String?
}

extension ListAgentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agents = "Agents"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.AgentListEntry?].self, forKey: .agents)
        var agentsDecoded0:[DataSyncClientTypes.AgentListEntry]? = nil
        if let agentsContainer = agentsContainer {
            agentsDecoded0 = [DataSyncClientTypes.AgentListEntry]()
            for structure0 in agentsContainer {
                if let structure0 = structure0 {
                    agentsDecoded0?.append(structure0)
                }
            }
        }
        agents = agentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListLocationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLocationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLocationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLocationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLocationsOutputError>
}

extension ListLocationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListLocationsInput(filters: \(Swift.String(describing: filters)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListLocationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for locationfilters0 in filters {
                try filtersContainer.encode(locationfilters0)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListLocationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLocationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLocationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLocationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLocationsOutputError>
}

public struct ListLocationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLocationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLocationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLocationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLocationsOutputError>
}

public struct ListLocationsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLocationsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListLocationsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListLocationsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLocationsOutputError>
}

public struct ListLocationsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLocationsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListLocationsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListLocationsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLocationsOutputError>
}

/// ListLocationsRequest
public struct ListLocationsInput: Swift.Equatable {
    /// You can use API filters to narrow down the list of resources returned by ListLocations. For example, to retrieve all tasks on a specific source location, you can use ListLocations with filter name LocationType S3 and Operator Equals.
    public var filters: [DataSyncClientTypes.LocationFilter]?
    /// The maximum number of locations to return.
    public var maxResults: Swift.Int?
    /// An opaque string that indicates the position at which to begin the next list of locations.
    public var nextToken: Swift.String?

    public init (
        filters: [DataSyncClientTypes.LocationFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListLocationsInputBody: Swift.Equatable {
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
    public let filters: [DataSyncClientTypes.LocationFilter]?
}

extension ListLocationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let filtersContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.LocationFilter?].self, forKey: .filters)
        var filtersDecoded0:[DataSyncClientTypes.LocationFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [DataSyncClientTypes.LocationFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
    }
}

extension ListLocationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLocationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListLocationsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLocationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListLocationsOutputResponse(locations: \(Swift.String(describing: locations)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListLocationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListLocationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locations = output.locations
            self.nextToken = output.nextToken
        } else {
            self.locations = nil
            self.nextToken = nil
        }
    }
}

/// ListLocationsResponse
public struct ListLocationsOutputResponse: Swift.Equatable {
    /// An array that contains a list of locations.
    public var locations: [DataSyncClientTypes.LocationListEntry]?
    /// An opaque string that indicates the position at which to begin returning the next list of locations.
    public var nextToken: Swift.String?

    public init (
        locations: [DataSyncClientTypes.LocationListEntry]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.locations = locations
        self.nextToken = nextToken
    }
}

struct ListLocationsOutputResponseBody: Swift.Equatable {
    public let locations: [DataSyncClientTypes.LocationListEntry]?
    public let nextToken: Swift.String?
}

extension ListLocationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locations = "Locations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.LocationListEntry?].self, forKey: .locations)
        var locationsDecoded0:[DataSyncClientTypes.LocationListEntry]? = nil
        if let locationsContainer = locationsContainer {
            locationsDecoded0 = [DataSyncClientTypes.LocationListEntry]()
            for structure0 in locationsContainer {
                if let structure0 = structure0 {
                    locationsDecoded0?.append(structure0)
                }
            }
        }
        locations = locationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListTagsForResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListTagsForResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTagsForResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListTagsForResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTagsForResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

/// ListTagsForResourceRequest
public struct ListTagsForResourceInput: Swift.Equatable {
    /// The maximum number of locations to return.
    public var maxResults: Swift.Int?
    /// An opaque string that indicates the position at which to begin the next list of locations.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource whose tags to list.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(nextToken: \(Swift.String(describing: nextToken)), tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

/// ListTagsForResourceResponse
public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// An opaque string that indicates the position at which to begin returning the next list of resource tags.
    public var nextToken: Swift.String?
    /// Array of resource tags.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init (
        nextToken: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let tags: [DataSyncClientTypes.TagListEntry]?
    public let nextToken: Swift.String?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListTaskExecutionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTaskExecutionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTaskExecutionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTaskExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTaskExecutionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTaskExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTaskExecutionsOutputError>
}

extension ListTaskExecutionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTaskExecutionsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), taskArn: \(Swift.String(describing: taskArn)))"}
}

extension ListTaskExecutionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case taskArn = "TaskArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let taskArn = taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }
}

public struct ListTaskExecutionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTaskExecutionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTaskExecutionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTaskExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTaskExecutionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTaskExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTaskExecutionsOutputError>
}

public struct ListTaskExecutionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTaskExecutionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTaskExecutionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTaskExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTaskExecutionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTaskExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTaskExecutionsOutputError>
}

public struct ListTaskExecutionsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTaskExecutionsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListTaskExecutionsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTaskExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTaskExecutionsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTaskExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTaskExecutionsOutputError>
}

public struct ListTaskExecutionsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTaskExecutionsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListTaskExecutionsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTaskExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTaskExecutionsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTaskExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTaskExecutionsOutputError>
}

/// ListTaskExecutions
public struct ListTaskExecutionsInput: Swift.Equatable {
    /// The maximum number of executed tasks to list.
    public var maxResults: Swift.Int?
    /// An opaque string that indicates the position at which to begin the next list of the executed tasks.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the task whose tasks you want to list.
    public var taskArn: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        taskArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.taskArn = taskArn
    }
}

struct ListTaskExecutionsInputBody: Swift.Equatable {
    public let taskArn: Swift.String?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension ListTaskExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case taskArn = "TaskArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTaskExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTaskExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTaskExecutionsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTaskExecutionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTaskExecutionsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), taskExecutions: \(Swift.String(describing: taskExecutions)))"}
}

extension ListTaskExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTaskExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.taskExecutions = output.taskExecutions
        } else {
            self.nextToken = nil
            self.taskExecutions = nil
        }
    }
}

/// ListTaskExecutionsResponse
public struct ListTaskExecutionsOutputResponse: Swift.Equatable {
    /// An opaque string that indicates the position at which to begin returning the next list of executed tasks.
    public var nextToken: Swift.String?
    /// A list of executed tasks.
    public var taskExecutions: [DataSyncClientTypes.TaskExecutionListEntry]?

    public init (
        nextToken: Swift.String? = nil,
        taskExecutions: [DataSyncClientTypes.TaskExecutionListEntry]? = nil
    )
    {
        self.nextToken = nextToken
        self.taskExecutions = taskExecutions
    }
}

struct ListTaskExecutionsOutputResponseBody: Swift.Equatable {
    public let taskExecutions: [DataSyncClientTypes.TaskExecutionListEntry]?
    public let nextToken: Swift.String?
}

extension ListTaskExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case taskExecutions = "TaskExecutions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TaskExecutionListEntry?].self, forKey: .taskExecutions)
        var taskExecutionsDecoded0:[DataSyncClientTypes.TaskExecutionListEntry]? = nil
        if let taskExecutionsContainer = taskExecutionsContainer {
            taskExecutionsDecoded0 = [DataSyncClientTypes.TaskExecutionListEntry]()
            for structure0 in taskExecutionsContainer {
                if let structure0 = structure0 {
                    taskExecutionsDecoded0?.append(structure0)
                }
            }
        }
        taskExecutions = taskExecutionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListTasksInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTasksInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTasksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTasksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTasksOutputError>
}

extension ListTasksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTasksInput(filters: \(Swift.String(describing: filters)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListTasksInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for taskfilters0 in filters {
                try filtersContainer.encode(taskfilters0)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListTasksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTasksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTasksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTasksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTasksOutputError>
}

public struct ListTasksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTasksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTasksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTasksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTasksOutputError>
}

public struct ListTasksInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTasksInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListTasksInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTasksInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTasksOutputError>
}

public struct ListTasksInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTasksInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListTasksInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTasksInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTasksOutputError>
}

/// ListTasksRequest
public struct ListTasksInput: Swift.Equatable {
    /// You can use API filters to narrow down the list of resources returned by ListTasks. For example, to retrieve all tasks on a specific source location, you can use ListTasks with filter name LocationId and Operator Equals with the ARN for the location.
    public var filters: [DataSyncClientTypes.TaskFilter]?
    /// The maximum number of tasks to return.
    public var maxResults: Swift.Int?
    /// An opaque string that indicates the position at which to begin the next list of tasks.
    public var nextToken: Swift.String?

    public init (
        filters: [DataSyncClientTypes.TaskFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListTasksInputBody: Swift.Equatable {
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
    public let filters: [DataSyncClientTypes.TaskFilter]?
}

extension ListTasksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let filtersContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TaskFilter?].self, forKey: .filters)
        var filtersDecoded0:[DataSyncClientTypes.TaskFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [DataSyncClientTypes.TaskFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
    }
}

extension ListTasksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTasksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTasksOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTasksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTasksOutputResponse(nextToken: \(Swift.String(describing: nextToken)), tasks: \(Swift.String(describing: tasks)))"}
}

extension ListTasksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTasksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tasks = output.tasks
        } else {
            self.nextToken = nil
            self.tasks = nil
        }
    }
}

/// ListTasksResponse
public struct ListTasksOutputResponse: Swift.Equatable {
    /// An opaque string that indicates the position at which to begin returning the next list of tasks.
    public var nextToken: Swift.String?
    /// A list of all the tasks that are returned.
    public var tasks: [DataSyncClientTypes.TaskListEntry]?

    public init (
        nextToken: Swift.String? = nil,
        tasks: [DataSyncClientTypes.TaskListEntry]? = nil
    )
    {
        self.nextToken = nextToken
        self.tasks = tasks
    }
}

struct ListTasksOutputResponseBody: Swift.Equatable {
    public let tasks: [DataSyncClientTypes.TaskListEntry]?
    public let nextToken: Swift.String?
}

extension ListTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tasks = "Tasks"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tasksContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TaskListEntry?].self, forKey: .tasks)
        var tasksDecoded0:[DataSyncClientTypes.TaskListEntry]? = nil
        if let tasksContainer = tasksContainer {
            tasksDecoded0 = [DataSyncClientTypes.TaskListEntry]()
            for structure0 in tasksContainer {
                if let structure0 = structure0 {
                    tasksDecoded0?.append(structure0)
                }
            }
        }
        tasks = tasksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DataSyncClientTypes.LocationFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case `operator` = "Operator"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let `operator` = `operator` {
            try encodeContainer.encode(`operator`.rawValue, forKey: .`operator`)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filtervalues0 in values {
                try valuesContainer.encode(filtervalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.LocationFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
        let operatorDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Operator.self, forKey: .operator)
        `operator` = operatorDecoded
    }
}

extension DataSyncClientTypes.LocationFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LocationFilter(name: \(Swift.String(describing: name)), operator: \(Swift.String(describing: `operator`)), values: \(Swift.String(describing: values)))"}
}

extension DataSyncClientTypes {
    /// You can use API filters to narrow down the list of resources returned by ListLocations. For example, to retrieve all your Amazon S3 locations, you can use ListLocations with filter name LocationType S3 and Operator Equals.
    public struct LocationFilter: Swift.Equatable {
        /// The operator that is used to compare filter values (for example, Equals or Contains). For more about API filtering operators, see [API filters for ListTasks and ListLocations](https://docs.aws.amazon.com/datasync/latest/userguide/query-resources.html).
        /// This member is required.
        public var `operator`: DataSyncClientTypes.Operator?
        /// The name of the filter being used. Each API call supports a list of filters that are available for it (for example, LocationType for ListLocations).
        /// This member is required.
        public var name: DataSyncClientTypes.LocationFilterName?
        /// The values that you want to filter for. For example, you might want to display only Amazon S3 locations.
        /// This member is required.
        public var values: [Swift.String]?

        public init (
            `operator`: DataSyncClientTypes.Operator? = nil,
            name: DataSyncClientTypes.LocationFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.`operator` = `operator`
            self.name = name
            self.values = values
        }
    }

}

extension DataSyncClientTypes {
    public enum LocationFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case locationtype
        case locationuri
        case sdkUnknown(Swift.String)

        public static var allCases: [LocationFilterName] {
            return [
                .creationtime,
                .locationtype,
                .locationuri,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .locationtype: return "LocationType"
            case .locationuri: return "LocationUri"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LocationFilterName(rawValue: rawValue) ?? LocationFilterName.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.LocationListEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
        if let locationUri = locationUri {
            try encodeContainer.encode(locationUri, forKey: .locationUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
    }
}

extension DataSyncClientTypes.LocationListEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LocationListEntry(locationArn: \(Swift.String(describing: locationArn)), locationUri: \(Swift.String(describing: locationUri)))"}
}

extension DataSyncClientTypes {
    /// Represents a single entry in a list of locations. LocationListEntry returns an array that contains a list of locations when the [ListLocations](https://docs.aws.amazon.com/datasync/latest/userguide/API_ListLocations.html) operation is called.
    public struct LocationListEntry: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the location. For Network File System (NFS) or Amazon EFS, the location is the export path. For Amazon S3, the location is the prefix path that you want to mount and use as the root of the location.
        public var locationArn: Swift.String?
        /// Represents a list of URLs of a location. LocationUri returns an array that contains a list of locations when the [ListLocations](https://docs.aws.amazon.com/datasync/latest/userguide/API_ListLocations.html) operation is called. Format: TYPE://GLOBAL_ID/SUBDIR. TYPE designates the type of location. Valid values: NFS | EFS | S3. GLOBAL_ID is the globally unique identifier of the resource that backs the location. An example for EFS is us-east-2.fs-abcd1234. An example for Amazon S3 is the bucket name, such as myBucket. An example for NFS is a valid IPv4 address or a host name compliant with Domain Name Service (DNS). SUBDIR is a valid file system path, delimited by forward slashes as is the *nix convention. For NFS and Amazon EFS, it's the export path to mount the location. For Amazon S3, it's the prefix path that you mount to and treat as the root of the location.
        public var locationUri: Swift.String?

        public init (
            locationArn: Swift.String? = nil,
            locationUri: Swift.String? = nil
        )
        {
            self.locationArn = locationArn
            self.locationUri = locationUri
        }
    }

}

extension DataSyncClientTypes {
    public enum LogLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case basic
        case off
        case transfer
        case sdkUnknown(Swift.String)

        public static var allCases: [LogLevel] {
            return [
                .basic,
                .off,
                .transfer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .basic: return "BASIC"
            case .off: return "OFF"
            case .transfer: return "TRANSFER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogLevel(rawValue: rawValue) ?? LogLevel.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum Mtime: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case preserve
        case sdkUnknown(Swift.String)

        public static var allCases: [Mtime] {
            return [
                .none,
                .preserve,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .preserve: return "PRESERVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mtime(rawValue: rawValue) ?? Mtime.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.NfsMountOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let version = version {
            try encodeContainer.encode(version.rawValue, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.NfsVersion.self, forKey: .version)
        version = versionDecoded
    }
}

extension DataSyncClientTypes.NfsMountOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NfsMountOptions(version: \(Swift.String(describing: version)))"}
}

extension DataSyncClientTypes {
    /// Represents the mount options that are available for DataSync to access an NFS location.
    public struct NfsMountOptions: Swift.Equatable {
        /// The specific NFS version that you want DataSync to use to mount your NFS share. If the server refuses to use the version specified, the sync will fail. If you don't specify a version, DataSync defaults to AUTOMATIC. That is, DataSync automatically selects a version based on negotiation with the NFS server. You can specify the following NFS versions:
        ///
        /// * [NFSv3](https://tools.ietf.org/html/rfc1813) - stateless protocol version that allows for asynchronous writes on the server.
        ///
        /// * [NFSv4.0](https://tools.ietf.org/html/rfc3530) - stateful, firewall-friendly protocol version that supports delegations and pseudo file systems.
        ///
        /// * [NFSv4.1](https://tools.ietf.org/html/rfc5661) - stateful protocol version that supports sessions, directory delegations, and parallel data processing. Version 4.1 also includes all features available in version 4.0.
        public var version: DataSyncClientTypes.NfsVersion?

        public init (
            version: DataSyncClientTypes.NfsVersion? = nil
        )
        {
            self.version = version
        }
    }

}

extension DataSyncClientTypes {
    public enum NfsVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case automatic
        case nfs3
        case nfs40
        case nfs41
        case sdkUnknown(Swift.String)

        public static var allCases: [NfsVersion] {
            return [
                .automatic,
                .nfs3,
                .nfs40,
                .nfs41,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "AUTOMATIC"
            case .nfs3: return "NFS3"
            case .nfs40: return "NFS4_0"
            case .nfs41: return "NFS4_1"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NfsVersion(rawValue: rawValue) ?? NfsVersion.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum ObjectStorageServerProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case http
        case https
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectStorageServerProtocol] {
            return [
                .http,
                .https,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .http: return "HTTP"
            case .https: return "HTTPS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectStorageServerProtocol(rawValue: rawValue) ?? ObjectStorageServerProtocol.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.OnPremConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarnlist0 in agentArns {
                try agentArnsContainer.encode(agentarnlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
    }
}

extension DataSyncClientTypes.OnPremConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OnPremConfig(agentArns: \(Swift.String(describing: agentArns)))"}
}

extension DataSyncClientTypes {
    /// A list of Amazon Resource Names (ARNs) of agents to use for a Network File System (NFS) location.
    public struct OnPremConfig: Swift.Equatable {
        /// ARNs of the agents to use for an NFS location.
        /// This member is required.
        public var agentArns: [Swift.String]?

        public init (
            agentArns: [Swift.String]? = nil
        )
        {
            self.agentArns = agentArns
        }
    }

}

extension DataSyncClientTypes {
    public enum Operator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case beginsWith
        case contains
        case eq
        case ge
        case gt
        case `in`
        case le
        case lt
        case ne
        case notContains
        case sdkUnknown(Swift.String)

        public static var allCases: [Operator] {
            return [
                .beginsWith,
                .contains,
                .eq,
                .ge,
                .gt,
                .in,
                .le,
                .lt,
                .ne,
                .notContains,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .beginsWith: return "BeginsWith"
            case .contains: return "Contains"
            case .eq: return "Equals"
            case .ge: return "GreaterThanOrEqual"
            case .gt: return "GreaterThan"
            case .in: return "In"
            case .le: return "LessThanOrEqual"
            case .lt: return "LessThan"
            case .ne: return "NotEquals"
            case .notContains: return "NotContains"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Operator(rawValue: rawValue) ?? Operator.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.Options: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case atime = "Atime"
        case bytesPerSecond = "BytesPerSecond"
        case gid = "Gid"
        case logLevel = "LogLevel"
        case mtime = "Mtime"
        case overwriteMode = "OverwriteMode"
        case posixPermissions = "PosixPermissions"
        case preserveDeletedFiles = "PreserveDeletedFiles"
        case preserveDevices = "PreserveDevices"
        case securityDescriptorCopyFlags = "SecurityDescriptorCopyFlags"
        case taskQueueing = "TaskQueueing"
        case transferMode = "TransferMode"
        case uid = "Uid"
        case verifyMode = "VerifyMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let atime = atime {
            try encodeContainer.encode(atime.rawValue, forKey: .atime)
        }
        if let bytesPerSecond = bytesPerSecond {
            try encodeContainer.encode(bytesPerSecond, forKey: .bytesPerSecond)
        }
        if let gid = gid {
            try encodeContainer.encode(gid.rawValue, forKey: .gid)
        }
        if let logLevel = logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let mtime = mtime {
            try encodeContainer.encode(mtime.rawValue, forKey: .mtime)
        }
        if let overwriteMode = overwriteMode {
            try encodeContainer.encode(overwriteMode.rawValue, forKey: .overwriteMode)
        }
        if let posixPermissions = posixPermissions {
            try encodeContainer.encode(posixPermissions.rawValue, forKey: .posixPermissions)
        }
        if let preserveDeletedFiles = preserveDeletedFiles {
            try encodeContainer.encode(preserveDeletedFiles.rawValue, forKey: .preserveDeletedFiles)
        }
        if let preserveDevices = preserveDevices {
            try encodeContainer.encode(preserveDevices.rawValue, forKey: .preserveDevices)
        }
        if let securityDescriptorCopyFlags = securityDescriptorCopyFlags {
            try encodeContainer.encode(securityDescriptorCopyFlags.rawValue, forKey: .securityDescriptorCopyFlags)
        }
        if let taskQueueing = taskQueueing {
            try encodeContainer.encode(taskQueueing.rawValue, forKey: .taskQueueing)
        }
        if let transferMode = transferMode {
            try encodeContainer.encode(transferMode.rawValue, forKey: .transferMode)
        }
        if let uid = uid {
            try encodeContainer.encode(uid.rawValue, forKey: .uid)
        }
        if let verifyMode = verifyMode {
            try encodeContainer.encode(verifyMode.rawValue, forKey: .verifyMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let verifyModeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.VerifyMode.self, forKey: .verifyMode)
        verifyMode = verifyModeDecoded
        let overwriteModeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.OverwriteMode.self, forKey: .overwriteMode)
        overwriteMode = overwriteModeDecoded
        let atimeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Atime.self, forKey: .atime)
        atime = atimeDecoded
        let mtimeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Mtime.self, forKey: .mtime)
        mtime = mtimeDecoded
        let uidDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Uid.self, forKey: .uid)
        uid = uidDecoded
        let gidDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Gid.self, forKey: .gid)
        gid = gidDecoded
        let preserveDeletedFilesDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PreserveDeletedFiles.self, forKey: .preserveDeletedFiles)
        preserveDeletedFiles = preserveDeletedFilesDecoded
        let preserveDevicesDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PreserveDevices.self, forKey: .preserveDevices)
        preserveDevices = preserveDevicesDecoded
        let posixPermissionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PosixPermissions.self, forKey: .posixPermissions)
        posixPermissions = posixPermissionsDecoded
        let bytesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bytesPerSecond)
        bytesPerSecond = bytesPerSecondDecoded
        let taskQueueingDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskQueueing.self, forKey: .taskQueueing)
        taskQueueing = taskQueueingDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let transferModeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TransferMode.self, forKey: .transferMode)
        transferMode = transferModeDecoded
        let securityDescriptorCopyFlagsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.SmbSecurityDescriptorCopyFlags.self, forKey: .securityDescriptorCopyFlags)
        securityDescriptorCopyFlags = securityDescriptorCopyFlagsDecoded
    }
}

extension DataSyncClientTypes.Options: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Options(atime: \(Swift.String(describing: atime)), bytesPerSecond: \(Swift.String(describing: bytesPerSecond)), gid: \(Swift.String(describing: gid)), logLevel: \(Swift.String(describing: logLevel)), mtime: \(Swift.String(describing: mtime)), overwriteMode: \(Swift.String(describing: overwriteMode)), posixPermissions: \(Swift.String(describing: posixPermissions)), preserveDeletedFiles: \(Swift.String(describing: preserveDeletedFiles)), preserveDevices: \(Swift.String(describing: preserveDevices)), securityDescriptorCopyFlags: \(Swift.String(describing: securityDescriptorCopyFlags)), taskQueueing: \(Swift.String(describing: taskQueueing)), transferMode: \(Swift.String(describing: transferMode)), uid: \(Swift.String(describing: uid)), verifyMode: \(Swift.String(describing: verifyMode)))"}
}

extension DataSyncClientTypes {
    /// Represents the options that are available to control the behavior of a [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) operation. Behavior includes preserving metadata such as user ID (UID), group ID (GID), and file permissions, and also overwriting files in the destination, data integrity verification, and so on. A task has a set of default options associated with it. If you don't specify an option in [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html), the default value is used. You can override the defaults options on each task execution by specifying an overriding Options value to [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html).
    public struct Options: Swift.Equatable {
        /// A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to). If you set Atime to BEST_EFFORT, DataSync attempts to preserve the original Atime attribute on all source files (that is, the version before the PREPARING phase). However, Atime's behavior is not fully standard across platforms, so DataSync can only do this on a best-effort basis. Default value: BEST_EFFORT. BEST_EFFORT: Attempt to preserve the per-file Atime value (recommended). NONE: Ignore Atime. If Atime is set to BEST_EFFORT, Mtime must be set to PRESERVE. If Atime is set to NONE, Mtime must also be NONE.
        public var atime: DataSyncClientTypes.Atime?
        /// A value that limits the bandwidth used by DataSync. For example, if you want DataSync to use a maximum of 1 MB, set this value to 1048576 (=1024*1024).
        public var bytesPerSecond: Swift.Int?
        /// The POSIX group ID (GID) of the file's owners. This option should only be set for NFS, EFS, and S3 locations. For more information about what metadata is copied by DataSync, see [Metadata Copied by DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied). Default value: INT_VALUE. This preserves the integer value of the ID. INT_VALUE: Preserve the integer value of user ID (UID) and GID (recommended). NONE: Ignore UID and GID.
        public var gid: DataSyncClientTypes.Gid?
        /// A value that determines the type of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide. For more information about providing a log group for DataSync, see [CloudWatchLogGroupArn](https://docs.aws.amazon.com/datasync/latest/userguide/API_CreateTask.html#DataSync-CreateTask-request-CloudWatchLogGroupArn). If set to OFF, no logs are published. BASIC publishes logs on errors for individual files transferred, and TRANSFER publishes logs for every file or object that is transferred and integrity checked.
        public var logLevel: DataSyncClientTypes.LogLevel?
        /// A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase. This option is required for cases when you need to run the same task more than one time. Default value: PRESERVE. PRESERVE: Preserve original Mtime (recommended) NONE: Ignore Mtime. If Mtime is set to PRESERVE, Atime must be set to BEST_EFFORT. If Mtime is set to NONE, Atime must also be set to NONE.
        public var mtime: DataSyncClientTypes.Mtime?
        /// A value that determines whether files at the destination should be overwritten or preserved when copying files. If set to NEVER a destination file will not be replaced by a source file, even if the destination file differs from the source file. If you modify files in the destination and you sync the files, you can use this value to protect against overwriting those changes. Some storage classes have specific behaviors that can affect your S3 storage cost. For detailed information, see [Considerations when working with Amazon S3 storage classes in DataSync ](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes) in the DataSync User Guide.
        public var overwriteMode: DataSyncClientTypes.OverwriteMode?
        /// A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. This option should only be set for NFS, EFS, and S3 locations. For more information about what metadata is copied by DataSync, see [Metadata Copied by DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied). Default value: PRESERVE. PRESERVE: Preserve POSIX-style permissions (recommended). NONE: Ignore permissions. DataSync can preserve extant permissions of a source location.
        public var posixPermissions: DataSyncClientTypes.PosixPermissions?
        /// A value that specifies whether files in the destination that don't exist in the source file system should be preserved. This option can affect your storage cost. If your task deletes objects, you might incur minimum storage duration charges for certain storage classes. For detailed information, see [Considerations when working with Amazon S3 storage classes in DataSync ](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes) in the DataSync User Guide. Default value: PRESERVE. PRESERVE: Ignore such destination files (recommended). REMOVE: Delete destination files that aren’t present in the source.
        public var preserveDeletedFiles: DataSyncClientTypes.PreserveDeletedFiles?
        /// A value that determines whether DataSync should preserve the metadata of block and character devices in the source file system, and re-create the files with that device name and metadata on the destination. DataSync does not copy the contents of such devices, only the name and metadata. DataSync can't sync the actual contents of such devices, because they are nonterminal and don't return an end-of-file (EOF) marker. Default value: NONE. NONE: Ignore special devices (recommended). PRESERVE: Preserve character and block device metadata. This option isn't currently supported for Amazon EFS.
        public var preserveDevices: DataSyncClientTypes.PreserveDevices?
        /// A value that determines which components of the SMB security descriptor are copied from source to destination objects. This value is only used for transfers between SMB and Amazon FSx for Windows File Server locations, or between two Amazon FSx for Windows File Server locations. For more information about how DataSync handles metadata, see [How DataSync Handles Metadata and Special Files](https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html). Default value: OWNER_DACL. OWNER_DACL: For each copied object, DataSync copies the following metadata:
        ///
        /// * Object owner.
        ///
        /// * NTFS discretionary access control lists (DACLs), which determine whether to grant access to an object.
        ///
        ///
        /// When choosing this option, DataSync does NOT copy the NTFS system access control lists (SACLs), which are used by administrators to log attempts to access a secured object. OWNER_DACL_SACL: For each copied object, DataSync copies the following metadata:
        ///
        /// * Object owner.
        ///
        /// * NTFS discretionary access control lists (DACLs), which determine whether to grant access to an object.
        ///
        /// * NTFS system access control lists (SACLs), which are used by administrators to log attempts to access a secured object.
        ///
        ///
        /// Copying SACLs requires granting additional permissions to the Windows user that DataSync uses to access your SMB location. For information about choosing a user that ensures sufficient permissions to files, folders, and metadata, see [user]. NONE: None of the SMB security descriptor components are copied. Destination objects are owned by the user that was provided for accessing the destination location. DACLs and SACLs are set based on the destination server’s configuration.
        public var securityDescriptorCopyFlags: DataSyncClientTypes.SmbSecurityDescriptorCopyFlags?
        /// A value that determines whether tasks should be queued before executing the tasks. If set to ENABLED, the tasks will be queued. The default is ENABLED. If you use the same agent to run multiple tasks, you can enable the tasks to run in series. For more information, see [Queueing task executions](https://docs.aws.amazon.com/datasync/latest/userguide/run-task.html#queue-task-execution).
        public var taskQueueing: DataSyncClientTypes.TaskQueueing?
        /// A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location. CHANGED: DataSync copies only data or metadata that is new or different content from the source location to the destination location. ALL: DataSync copies all source location content to the destination, without comparing to existing content on the destination.
        public var transferMode: DataSyncClientTypes.TransferMode?
        /// The POSIX user ID (UID) of the file's owner. This option should only be set for NFS, EFS, and S3 locations. To learn more about what metadata is copied by DataSync, see [Metadata Copied by DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied). Default value: INT_VALUE. This preserves the integer value of the ID. INT_VALUE: Preserve the integer value of UID and group ID (GID) (recommended). NONE: Ignore UID and GID.
        public var uid: DataSyncClientTypes.Uid?
        /// A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. For more information, see [Configure task settings](https://docs.aws.amazon.com/datasync/latest/userguide/create-task.html). Default value: POINT_IN_TIME_CONSISTENT. ONLY_FILES_TRANSFERRED (recommended): Perform verification only on files that were transferred. POINT_IN_TIME_CONSISTENT: Scan the entire source and entire destination at the end of the transfer to verify that source and destination are fully synchronized. This option isn't supported when transferring to S3 Glacier or S3 Glacier Deep Archive storage classes. NONE: No additional verification is done at the end of the transfer, but all data transmissions are integrity-checked with checksum verification during the transfer.
        public var verifyMode: DataSyncClientTypes.VerifyMode?

        public init (
            atime: DataSyncClientTypes.Atime? = nil,
            bytesPerSecond: Swift.Int? = nil,
            gid: DataSyncClientTypes.Gid? = nil,
            logLevel: DataSyncClientTypes.LogLevel? = nil,
            mtime: DataSyncClientTypes.Mtime? = nil,
            overwriteMode: DataSyncClientTypes.OverwriteMode? = nil,
            posixPermissions: DataSyncClientTypes.PosixPermissions? = nil,
            preserveDeletedFiles: DataSyncClientTypes.PreserveDeletedFiles? = nil,
            preserveDevices: DataSyncClientTypes.PreserveDevices? = nil,
            securityDescriptorCopyFlags: DataSyncClientTypes.SmbSecurityDescriptorCopyFlags? = nil,
            taskQueueing: DataSyncClientTypes.TaskQueueing? = nil,
            transferMode: DataSyncClientTypes.TransferMode? = nil,
            uid: DataSyncClientTypes.Uid? = nil,
            verifyMode: DataSyncClientTypes.VerifyMode? = nil
        )
        {
            self.atime = atime
            self.bytesPerSecond = bytesPerSecond
            self.gid = gid
            self.logLevel = logLevel
            self.mtime = mtime
            self.overwriteMode = overwriteMode
            self.posixPermissions = posixPermissions
            self.preserveDeletedFiles = preserveDeletedFiles
            self.preserveDevices = preserveDevices
            self.securityDescriptorCopyFlags = securityDescriptorCopyFlags
            self.taskQueueing = taskQueueing
            self.transferMode = transferMode
            self.uid = uid
            self.verifyMode = verifyMode
        }
    }

}

extension DataSyncClientTypes {
    public enum OverwriteMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case always
        case never
        case sdkUnknown(Swift.String)

        public static var allCases: [OverwriteMode] {
            return [
                .always,
                .never,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .always: return "ALWAYS"
            case .never: return "NEVER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OverwriteMode(rawValue: rawValue) ?? OverwriteMode.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum PhaseStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case error
        case pending
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [PhaseStatus] {
            return [
                .error,
                .pending,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .error: return "ERROR"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PhaseStatus(rawValue: rawValue) ?? PhaseStatus.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum PosixPermissions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case preserve
        case sdkUnknown(Swift.String)

        public static var allCases: [PosixPermissions] {
            return [
                .none,
                .preserve,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .preserve: return "PRESERVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PosixPermissions(rawValue: rawValue) ?? PosixPermissions.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum PreserveDeletedFiles: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case preserve
        case remove
        case sdkUnknown(Swift.String)

        public static var allCases: [PreserveDeletedFiles] {
            return [
                .preserve,
                .remove,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .preserve: return "PRESERVE"
            case .remove: return "REMOVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PreserveDeletedFiles(rawValue: rawValue) ?? PreserveDeletedFiles.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum PreserveDevices: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case preserve
        case sdkUnknown(Swift.String)

        public static var allCases: [PreserveDevices] {
            return [
                .none,
                .preserve,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .preserve: return "PRESERVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PreserveDevices(rawValue: rawValue) ?? PreserveDevices.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.PrivateLinkConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case privateLinkEndpoint = "PrivateLinkEndpoint"
        case securityGroupArns = "SecurityGroupArns"
        case subnetArns = "SubnetArns"
        case vpcEndpointId = "VpcEndpointId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let privateLinkEndpoint = privateLinkEndpoint {
            try encodeContainer.encode(privateLinkEndpoint, forKey: .privateLinkEndpoint)
        }
        if let securityGroupArns = securityGroupArns {
            var securityGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupArns)
            for plsecuritygrouparnlist0 in securityGroupArns {
                try securityGroupArnsContainer.encode(plsecuritygrouparnlist0)
            }
        }
        if let subnetArns = subnetArns {
            var subnetArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetArns)
            for plsubnetarnlist0 in subnetArns {
                try subnetArnsContainer.encode(plsubnetarnlist0)
            }
        }
        if let vpcEndpointId = vpcEndpointId {
            try encodeContainer.encode(vpcEndpointId, forKey: .vpcEndpointId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let privateLinkEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateLinkEndpoint)
        privateLinkEndpoint = privateLinkEndpointDecoded
        let subnetArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetArns)
        var subnetArnsDecoded0:[Swift.String]? = nil
        if let subnetArnsContainer = subnetArnsContainer {
            subnetArnsDecoded0 = [Swift.String]()
            for string0 in subnetArnsContainer {
                if let string0 = string0 {
                    subnetArnsDecoded0?.append(string0)
                }
            }
        }
        subnetArns = subnetArnsDecoded0
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
    }
}

extension DataSyncClientTypes.PrivateLinkConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PrivateLinkConfig(privateLinkEndpoint: \(Swift.String(describing: privateLinkEndpoint)), securityGroupArns: \(Swift.String(describing: securityGroupArns)), subnetArns: \(Swift.String(describing: subnetArns)), vpcEndpointId: \(Swift.String(describing: vpcEndpointId)))"}
}

extension DataSyncClientTypes {
    /// The VPC endpoint, subnet, and security group that an agent uses to access IP addresses in a VPC (Virtual Private Cloud).
    public struct PrivateLinkConfig: Swift.Equatable {
        /// The private endpoint that is configured for an agent that has access to IP addresses in a [PrivateLink](https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html). An agent that is configured with this endpoint will not be accessible over the public internet.
        public var privateLinkEndpoint: Swift.String?
        /// The Amazon Resource Names (ARNs) of the security groups that are configured for the EC2 resource that hosts an agent activated in a VPC or an agent that has access to a VPC endpoint.
        public var securityGroupArns: [Swift.String]?
        /// The Amazon Resource Names (ARNs) of the subnets that are configured for an agent activated in a VPC or an agent that has access to a VPC endpoint.
        public var subnetArns: [Swift.String]?
        /// The ID of the VPC endpoint that is configured for an agent. An agent that is configured with a VPC endpoint will not be accessible over the public internet.
        public var vpcEndpointId: Swift.String?

        public init (
            privateLinkEndpoint: Swift.String? = nil,
            securityGroupArns: [Swift.String]? = nil,
            subnetArns: [Swift.String]? = nil,
            vpcEndpointId: Swift.String? = nil
        )
        {
            self.privateLinkEndpoint = privateLinkEndpoint
            self.securityGroupArns = securityGroupArns
            self.subnetArns = subnetArns
            self.vpcEndpointId = vpcEndpointId
        }
    }

}

extension DataSyncClientTypes.QopConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataTransferProtection = "DataTransferProtection"
        case rpcProtection = "RpcProtection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataTransferProtection = dataTransferProtection {
            try encodeContainer.encode(dataTransferProtection.rawValue, forKey: .dataTransferProtection)
        }
        if let rpcProtection = rpcProtection {
            try encodeContainer.encode(rpcProtection.rawValue, forKey: .rpcProtection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rpcProtectionDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.HdfsRpcProtection.self, forKey: .rpcProtection)
        rpcProtection = rpcProtectionDecoded
        let dataTransferProtectionDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.HdfsDataTransferProtection.self, forKey: .dataTransferProtection)
        dataTransferProtection = dataTransferProtectionDecoded
    }
}

extension DataSyncClientTypes.QopConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QopConfiguration(dataTransferProtection: \(Swift.String(describing: dataTransferProtection)), rpcProtection: \(Swift.String(describing: rpcProtection)))"}
}

extension DataSyncClientTypes {
    /// The Quality of Protection (QOP) configuration specifies the Remote Procedure Call (RPC) and data transfer privacy settings configured on the Hadoop Distributed File System (HDFS) cluster.
    public struct QopConfiguration: Swift.Equatable {
        /// The data transfer protection setting configured on the HDFS cluster. This setting corresponds to your dfs.data.transfer.protection setting in the hdfs-site.xml file on your Hadoop cluster.
        public var dataTransferProtection: DataSyncClientTypes.HdfsDataTransferProtection?
        /// The RPC protection setting configured on the HDFS cluster. This setting corresponds to your hadoop.rpc.protection setting in your core-site.xml file on your Hadoop cluster.
        public var rpcProtection: DataSyncClientTypes.HdfsRpcProtection?

        public init (
            dataTransferProtection: DataSyncClientTypes.HdfsDataTransferProtection? = nil,
            rpcProtection: DataSyncClientTypes.HdfsRpcProtection? = nil
        )
        {
            self.dataTransferProtection = dataTransferProtection
            self.rpcProtection = rpcProtection
        }
    }

}

extension DataSyncClientTypes.S3Config: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketAccessRoleArn = "BucketAccessRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketAccessRoleArn = bucketAccessRoleArn {
            try encodeContainer.encode(bucketAccessRoleArn, forKey: .bucketAccessRoleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketAccessRoleArn)
        bucketAccessRoleArn = bucketAccessRoleArnDecoded
    }
}

extension DataSyncClientTypes.S3Config: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "S3Config(bucketAccessRoleArn: \(Swift.String(describing: bucketAccessRoleArn)))"}
}

extension DataSyncClientTypes {
    /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that is used to access an Amazon S3 bucket. For detailed information about using such a role, see Creating a Location for Amazon S3 in the DataSync User Guide.
    public struct S3Config: Swift.Equatable {
        /// The Amazon S3 bucket to access. This bucket is used as a parameter in the [CreateLocationS3](https://docs.aws.amazon.com/datasync/latest/userguide/API_CreateLocationS3.html) operation.
        /// This member is required.
        public var bucketAccessRoleArn: Swift.String?

        public init (
            bucketAccessRoleArn: Swift.String? = nil
        )
        {
            self.bucketAccessRoleArn = bucketAccessRoleArn
        }
    }

}

extension DataSyncClientTypes {
    public enum S3StorageClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deepArchive
        case glacier
        case intelligentTiering
        case onezoneIa
        case outposts
        case standard
        case standardIa
        case sdkUnknown(Swift.String)

        public static var allCases: [S3StorageClass] {
            return [
                .deepArchive,
                .glacier,
                .intelligentTiering,
                .onezoneIa,
                .outposts,
                .standard,
                .standardIa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deepArchive: return "DEEP_ARCHIVE"
            case .glacier: return "GLACIER"
            case .intelligentTiering: return "INTELLIGENT_TIERING"
            case .onezoneIa: return "ONEZONE_IA"
            case .outposts: return "OUTPOSTS"
            case .standard: return "STANDARD"
            case .standardIa: return "STANDARD_IA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = S3StorageClass(rawValue: rawValue) ?? S3StorageClass.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.SmbMountOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let version = version {
            try encodeContainer.encode(version.rawValue, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.SmbVersion.self, forKey: .version)
        version = versionDecoded
    }
}

extension DataSyncClientTypes.SmbMountOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SmbMountOptions(version: \(Swift.String(describing: version)))"}
}

extension DataSyncClientTypes {
    /// Represents the mount options that are available for DataSync to access an SMB location.
    public struct SmbMountOptions: Swift.Equatable {
        /// The specific SMB version that you want DataSync to use to mount your SMB share. If you don't specify a version, DataSync defaults to AUTOMATIC. That is, DataSync automatically selects a version based on negotiation with the SMB server.
        public var version: DataSyncClientTypes.SmbVersion?

        public init (
            version: DataSyncClientTypes.SmbVersion? = nil
        )
        {
            self.version = version
        }
    }

}

extension DataSyncClientTypes {
    public enum SmbSecurityDescriptorCopyFlags: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case ownerDacl
        case ownerDaclSacl
        case sdkUnknown(Swift.String)

        public static var allCases: [SmbSecurityDescriptorCopyFlags] {
            return [
                .none,
                .ownerDacl,
                .ownerDaclSacl,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .ownerDacl: return "OWNER_DACL"
            case .ownerDaclSacl: return "OWNER_DACL_SACL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SmbSecurityDescriptorCopyFlags(rawValue: rawValue) ?? SmbSecurityDescriptorCopyFlags.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum SmbVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case automatic
        case smb2
        case smb3
        case sdkUnknown(Swift.String)

        public static var allCases: [SmbVersion] {
            return [
                .automatic,
                .smb2,
                .smb3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "AUTOMATIC"
            case .smb2: return "SMB2"
            case .smb3: return "SMB3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SmbVersion(rawValue: rawValue) ?? SmbVersion.sdkUnknown(rawValue)
        }
    }
}

public struct StartTaskExecutionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartTaskExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartTaskExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartTaskExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartTaskExecutionOutputError>
}

extension StartTaskExecutionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartTaskExecutionInput(excludes: \(Swift.String(describing: excludes)), includes: \(Swift.String(describing: includes)), overrideOptions: \(Swift.String(describing: overrideOptions)), taskArn: \(Swift.String(describing: taskArn)))"}
}

extension StartTaskExecutionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludes = "Excludes"
        case includes = "Includes"
        case overrideOptions = "OverrideOptions"
        case taskArn = "TaskArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let excludes = excludes {
            var excludesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludes)
            for filterlist0 in excludes {
                try excludesContainer.encode(filterlist0)
            }
        }
        if let includes = includes {
            var includesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includes)
            for filterlist0 in includes {
                try includesContainer.encode(filterlist0)
            }
        }
        if let overrideOptions = overrideOptions {
            try encodeContainer.encode(overrideOptions, forKey: .overrideOptions)
        }
        if let taskArn = taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }
}

public struct StartTaskExecutionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartTaskExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartTaskExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartTaskExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartTaskExecutionOutputError>
}

public struct StartTaskExecutionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartTaskExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartTaskExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartTaskExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartTaskExecutionOutputError>
}

public struct StartTaskExecutionInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartTaskExecutionInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: StartTaskExecutionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartTaskExecutionInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartTaskExecutionOutputError>
}

public struct StartTaskExecutionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartTaskExecutionInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: StartTaskExecutionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartTaskExecutionInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartTaskExecutionOutputError>
}

/// StartTaskExecutionRequest
public struct StartTaskExecutionInput: Swift.Equatable {
    /// A list of filter rules that determines which files to exclude from a task. The list contains a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example, "/folder1|/folder2".
    public var excludes: [DataSyncClientTypes.FilterRule]?
    /// A list of filter rules that determines which files to include when running a task. The pattern should contain a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example, "/folder1|/folder2".
    public var includes: [DataSyncClientTypes.FilterRule]?
    /// Represents the options that are available to control the behavior of a [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) operation. Behavior includes preserving metadata such as user ID (UID), group ID (GID), and file permissions, and also overwriting files in the destination, data integrity verification, and so on. A task has a set of default options associated with it. If you don't specify an option in [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html), the default value is used. You can override the defaults options on each task execution by specifying an overriding Options value to [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html).
    public var overrideOptions: DataSyncClientTypes.Options?
    /// The Amazon Resource Name (ARN) of the task to start.
    /// This member is required.
    public var taskArn: Swift.String?

    public init (
        excludes: [DataSyncClientTypes.FilterRule]? = nil,
        includes: [DataSyncClientTypes.FilterRule]? = nil,
        overrideOptions: DataSyncClientTypes.Options? = nil,
        taskArn: Swift.String? = nil
    )
    {
        self.excludes = excludes
        self.includes = includes
        self.overrideOptions = overrideOptions
        self.taskArn = taskArn
    }
}

struct StartTaskExecutionInputBody: Swift.Equatable {
    public let taskArn: Swift.String?
    public let overrideOptions: DataSyncClientTypes.Options?
    public let includes: [DataSyncClientTypes.FilterRule]?
    public let excludes: [DataSyncClientTypes.FilterRule]?
}

extension StartTaskExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludes = "Excludes"
        case includes = "Includes"
        case overrideOptions = "OverrideOptions"
        case taskArn = "TaskArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let overrideOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Options.self, forKey: .overrideOptions)
        overrideOptions = overrideOptionsDecoded
        let includesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .includes)
        var includesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let includesContainer = includesContainer {
            includesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in includesContainer {
                if let structure0 = structure0 {
                    includesDecoded0?.append(structure0)
                }
            }
        }
        includes = includesDecoded0
        let excludesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .excludes)
        var excludesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in excludesContainer {
                if let structure0 = structure0 {
                    excludesDecoded0?.append(structure0)
                }
            }
        }
        excludes = excludesDecoded0
    }
}

extension StartTaskExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartTaskExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartTaskExecutionOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartTaskExecutionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartTaskExecutionOutputResponse(taskExecutionArn: \(Swift.String(describing: taskExecutionArn)))"}
}

extension StartTaskExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartTaskExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskExecutionArn = output.taskExecutionArn
        } else {
            self.taskExecutionArn = nil
        }
    }
}

/// StartTaskExecutionResponse
public struct StartTaskExecutionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the specific task execution that was started.
    public var taskExecutionArn: Swift.String?

    public init (
        taskExecutionArn: Swift.String? = nil
    )
    {
        self.taskExecutionArn = taskExecutionArn
    }
}

struct StartTaskExecutionOutputResponseBody: Swift.Equatable {
    public let taskExecutionArn: Swift.String?
}

extension StartTaskExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskExecutionArn = "TaskExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskExecutionArn)
        taskExecutionArn = taskExecutionArnDecoded
    }
}

extension DataSyncClientTypes.TagListEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension DataSyncClientTypes.TagListEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagListEntry(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension DataSyncClientTypes {
    /// Represents a single entry in a list of Amazon Web Services resource tags. TagListEntry returns an array that contains a list of tasks when the [ListTagsForResource](https://docs.aws.amazon.com/datasync/latest/userguide/API_ListTagsForResource.html) operation is called.
    public struct TagListEntry: Swift.Equatable {
        /// The key for an Amazon Web Services resource tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value for an Amazon Web Services resource tag.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: TagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = TagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: TagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = TagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

/// TagResourceRequest
public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource to apply the tag to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags to apply.
    /// This member is required.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let tags: [DataSyncClientTypes.TagListEntry]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DataSyncClientTypes.TaskExecutionListEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case taskExecutionArn = "TaskExecutionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let taskExecutionArn = taskExecutionArn {
            try encodeContainer.encode(taskExecutionArn, forKey: .taskExecutionArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskExecutionArn)
        taskExecutionArn = taskExecutionArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskExecutionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension DataSyncClientTypes.TaskExecutionListEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskExecutionListEntry(status: \(Swift.String(describing: status)), taskExecutionArn: \(Swift.String(describing: taskExecutionArn)))"}
}

extension DataSyncClientTypes {
    /// Represents a single entry in a list of task executions. TaskExecutionListEntry returns an array that contains a list of specific invocations of a task when the [ListTaskExecutions](https://docs.aws.amazon.com/datasync/latest/userguide/API_ListTaskExecutions.html) operation is called.
    public struct TaskExecutionListEntry: Swift.Equatable {
        /// The status of a task execution.
        public var status: DataSyncClientTypes.TaskExecutionStatus?
        /// The Amazon Resource Name (ARN) of the task that was executed.
        public var taskExecutionArn: Swift.String?

        public init (
            status: DataSyncClientTypes.TaskExecutionStatus? = nil,
            taskExecutionArn: Swift.String? = nil
        )
        {
            self.status = status
            self.taskExecutionArn = taskExecutionArn
        }
    }

}

extension DataSyncClientTypes.TaskExecutionResultDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorDetail = "ErrorDetail"
        case prepareDuration = "PrepareDuration"
        case prepareStatus = "PrepareStatus"
        case totalDuration = "TotalDuration"
        case transferDuration = "TransferDuration"
        case transferStatus = "TransferStatus"
        case verifyDuration = "VerifyDuration"
        case verifyStatus = "VerifyStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorDetail = errorDetail {
            try encodeContainer.encode(errorDetail, forKey: .errorDetail)
        }
        if let prepareDuration = prepareDuration {
            try encodeContainer.encode(prepareDuration, forKey: .prepareDuration)
        }
        if let prepareStatus = prepareStatus {
            try encodeContainer.encode(prepareStatus.rawValue, forKey: .prepareStatus)
        }
        if let totalDuration = totalDuration {
            try encodeContainer.encode(totalDuration, forKey: .totalDuration)
        }
        if let transferDuration = transferDuration {
            try encodeContainer.encode(transferDuration, forKey: .transferDuration)
        }
        if let transferStatus = transferStatus {
            try encodeContainer.encode(transferStatus.rawValue, forKey: .transferStatus)
        }
        if let verifyDuration = verifyDuration {
            try encodeContainer.encode(verifyDuration, forKey: .verifyDuration)
        }
        if let verifyStatus = verifyStatus {
            try encodeContainer.encode(verifyStatus.rawValue, forKey: .verifyStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prepareDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .prepareDuration)
        prepareDuration = prepareDurationDecoded
        let prepareStatusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PhaseStatus.self, forKey: .prepareStatus)
        prepareStatus = prepareStatusDecoded
        let totalDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalDuration)
        totalDuration = totalDurationDecoded
        let transferDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transferDuration)
        transferDuration = transferDurationDecoded
        let transferStatusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PhaseStatus.self, forKey: .transferStatus)
        transferStatus = transferStatusDecoded
        let verifyDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .verifyDuration)
        verifyDuration = verifyDurationDecoded
        let verifyStatusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PhaseStatus.self, forKey: .verifyStatus)
        verifyStatus = verifyStatusDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorDetailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorDetail)
        errorDetail = errorDetailDecoded
    }
}

extension DataSyncClientTypes.TaskExecutionResultDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskExecutionResultDetail(errorCode: \(Swift.String(describing: errorCode)), errorDetail: \(Swift.String(describing: errorDetail)), prepareDuration: \(Swift.String(describing: prepareDuration)), prepareStatus: \(Swift.String(describing: prepareStatus)), totalDuration: \(Swift.String(describing: totalDuration)), transferDuration: \(Swift.String(describing: transferDuration)), transferStatus: \(Swift.String(describing: transferStatus)), verifyDuration: \(Swift.String(describing: verifyDuration)), verifyStatus: \(Swift.String(describing: verifyStatus)))"}
}

extension DataSyncClientTypes {
    /// Describes the detailed result of a TaskExecution operation. This result includes the time in milliseconds spent in each phase, the status of the task execution, and the errors encountered.
    public struct TaskExecutionResultDetail: Swift.Equatable {
        /// Errors that DataSync encountered during execution of the task. You can use this error code to help troubleshoot issues.
        public var errorCode: Swift.String?
        /// Detailed description of an error that was encountered during the task execution. You can use this information to help troubleshoot issues.
        public var errorDetail: Swift.String?
        /// The total time in milliseconds that DataSync spent in the PREPARING phase.
        public var prepareDuration: Swift.Int?
        /// The status of the PREPARING phase.
        public var prepareStatus: DataSyncClientTypes.PhaseStatus?
        /// The total time in milliseconds that DataSync took to transfer the file from the source to the destination location.
        public var totalDuration: Swift.Int?
        /// The total time in milliseconds that DataSync spent in the TRANSFERRING phase.
        public var transferDuration: Swift.Int?
        /// The status of the TRANSFERRING phase.
        public var transferStatus: DataSyncClientTypes.PhaseStatus?
        /// The total time in milliseconds that DataSync spent in the VERIFYING phase.
        public var verifyDuration: Swift.Int?
        /// The status of the VERIFYING phase.
        public var verifyStatus: DataSyncClientTypes.PhaseStatus?

        public init (
            errorCode: Swift.String? = nil,
            errorDetail: Swift.String? = nil,
            prepareDuration: Swift.Int? = nil,
            prepareStatus: DataSyncClientTypes.PhaseStatus? = nil,
            totalDuration: Swift.Int? = nil,
            transferDuration: Swift.Int? = nil,
            transferStatus: DataSyncClientTypes.PhaseStatus? = nil,
            verifyDuration: Swift.Int? = nil,
            verifyStatus: DataSyncClientTypes.PhaseStatus? = nil
        )
        {
            self.errorCode = errorCode
            self.errorDetail = errorDetail
            self.prepareDuration = prepareDuration
            self.prepareStatus = prepareStatus
            self.totalDuration = totalDuration
            self.transferDuration = transferDuration
            self.transferStatus = transferStatus
            self.verifyDuration = verifyDuration
            self.verifyStatus = verifyStatus
        }
    }

}

extension DataSyncClientTypes {
    public enum TaskExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case error
        case launching
        case preparing
        case queued
        case success
        case transferring
        case verifying
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskExecutionStatus] {
            return [
                .error,
                .launching,
                .preparing,
                .queued,
                .success,
                .transferring,
                .verifying,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .error: return "ERROR"
            case .launching: return "LAUNCHING"
            case .preparing: return "PREPARING"
            case .queued: return "QUEUED"
            case .success: return "SUCCESS"
            case .transferring: return "TRANSFERRING"
            case .verifying: return "VERIFYING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaskExecutionStatus(rawValue: rawValue) ?? TaskExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.TaskFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case `operator` = "Operator"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let `operator` = `operator` {
            try encodeContainer.encode(`operator`.rawValue, forKey: .`operator`)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filtervalues0 in values {
                try valuesContainer.encode(filtervalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
        let operatorDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Operator.self, forKey: .operator)
        `operator` = operatorDecoded
    }
}

extension DataSyncClientTypes.TaskFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskFilter(name: \(Swift.String(describing: name)), operator: \(Swift.String(describing: `operator`)), values: \(Swift.String(describing: values)))"}
}

extension DataSyncClientTypes {
    /// You can use API filters to narrow down the list of resources returned by ListTasks. For example, to retrieve all tasks on a source location, you can use ListTasks with filter name LocationId and Operator Equals with the ARN for the location.
    public struct TaskFilter: Swift.Equatable {
        /// The operator that is used to compare filter values (for example, Equals or Contains). For more about API filtering operators, see [API filters for ListTasks and ListLocations](https://docs.aws.amazon.com/datasync/latest/userguide/query-resources.html).
        /// This member is required.
        public var `operator`: DataSyncClientTypes.Operator?
        /// The name of the filter being used. Each API call supports a list of filters that are available for it. For example, LocationId for ListTasks.
        /// This member is required.
        public var name: DataSyncClientTypes.TaskFilterName?
        /// The values that you want to filter for. For example, you might want to display only tasks for a specific destination location.
        /// This member is required.
        public var values: [Swift.String]?

        public init (
            `operator`: DataSyncClientTypes.Operator? = nil,
            name: DataSyncClientTypes.TaskFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.`operator` = `operator`
            self.name = name
            self.values = values
        }
    }

}

extension DataSyncClientTypes {
    public enum TaskFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case locationid
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskFilterName] {
            return [
                .creationtime,
                .locationid,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .locationid: return "LocationId"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaskFilterName(rawValue: rawValue) ?? TaskFilterName.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.TaskListEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case status = "Status"
        case taskArn = "TaskArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let taskArn = taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskStatus.self, forKey: .status)
        status = statusDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DataSyncClientTypes.TaskListEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskListEntry(name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)), taskArn: \(Swift.String(describing: taskArn)))"}
}

extension DataSyncClientTypes {
    /// Represents a single entry in a list of tasks. TaskListEntry returns an array that contains a list of tasks when the [ListTasks](https://docs.aws.amazon.com/datasync/latest/userguide/API_ListTasks.html) operation is called. A task includes the source and destination file systems to sync and the options to use for the tasks.
    public struct TaskListEntry: Swift.Equatable {
        /// The name of the task.
        public var name: Swift.String?
        /// The status of the task.
        public var status: DataSyncClientTypes.TaskStatus?
        /// The Amazon Resource Name (ARN) of the task.
        public var taskArn: Swift.String?

        public init (
            name: Swift.String? = nil,
            status: DataSyncClientTypes.TaskStatus? = nil,
            taskArn: Swift.String? = nil
        )
        {
            self.name = name
            self.status = status
            self.taskArn = taskArn
        }
    }

}

extension DataSyncClientTypes {
    public enum TaskQueueing: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskQueueing] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaskQueueing(rawValue: rawValue) ?? TaskQueueing.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.TaskSchedule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduleExpression = "ScheduleExpression"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scheduleExpression = scheduleExpression {
            try encodeContainer.encode(scheduleExpression, forKey: .scheduleExpression)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleExpression)
        scheduleExpression = scheduleExpressionDecoded
    }
}

extension DataSyncClientTypes.TaskSchedule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskSchedule(scheduleExpression: \(Swift.String(describing: scheduleExpression)))"}
}

extension DataSyncClientTypes {
    /// Specifies the schedule you want your task to use for repeated executions. For more information, see [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html).
    public struct TaskSchedule: Swift.Equatable {
        /// A cron expression that specifies when DataSync initiates a scheduled transfer from a source to a destination location.
        /// This member is required.
        public var scheduleExpression: Swift.String?

        public init (
            scheduleExpression: Swift.String? = nil
        )
        {
            self.scheduleExpression = scheduleExpression
        }
    }

}

extension DataSyncClientTypes {
    public enum TaskStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case creating
        case queued
        case running
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskStatus] {
            return [
                .available,
                .creating,
                .queued,
                .running,
                .unavailable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .creating: return "CREATING"
            case .queued: return "QUEUED"
            case .running: return "RUNNING"
            case .unavailable: return "UNAVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaskStatus(rawValue: rawValue) ?? TaskStatus.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum TransferMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case changed
        case sdkUnknown(Swift.String)

        public static var allCases: [TransferMode] {
            return [
                .all,
                .changed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .changed: return "CHANGED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TransferMode(rawValue: rawValue) ?? TransferMode.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum Uid: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case both
        case intValue
        case name
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Uid] {
            return [
                .both,
                .intValue,
                .name,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .both: return "BOTH"
            case .intValue: return "INT_VALUE"
            case .name: return "NAME"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Uid(rawValue: rawValue) ?? Uid.sdkUnknown(rawValue)
        }
    }
}

public struct UntagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(keys: \(Swift.String(describing: keys)), resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keys = "Keys"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keys = keys {
            var keysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keys)
            for tagkeylist0 in keys {
                try keysContainer.encode(tagkeylist0)
            }
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UntagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UntagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UntagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UntagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

/// UntagResourceRequest
public struct UntagResourceInput: Swift.Equatable {
    /// The keys in the key-value pair in the tag to remove.
    /// This member is required.
    public var keys: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the resource to remove the tag from.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        keys: [Swift.String]? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.keys = keys
        self.resourceArn = resourceArn
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let keys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keys = "Keys"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let keysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .keys)
        var keysDecoded0:[Swift.String]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [Swift.String]()
            for string0 in keysContainer {
                if let string0 = string0 {
                    keysDecoded0?.append(string0)
                }
            }
        }
        keys = keysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateAgentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAgentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAgentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAgentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAgentOutputError>
}

extension UpdateAgentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAgentInput(agentArn: \(Swift.String(describing: agentArn)), name: \(Swift.String(describing: name)))"}
}

extension UpdateAgentInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArn = agentArn {
            try encodeContainer.encode(agentArn, forKey: .agentArn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct UpdateAgentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAgentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAgentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAgentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAgentOutputError>
}

public struct UpdateAgentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAgentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAgentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAgentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAgentOutputError>
}

public struct UpdateAgentInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAgentInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UpdateAgentInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateAgentInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAgentOutputError>
}

public struct UpdateAgentInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAgentInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UpdateAgentInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAgentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateAgentInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAgentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAgentOutputError>
}

/// UpdateAgentRequest
public struct UpdateAgentInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the agent to update.
    /// This member is required.
    public var agentArn: Swift.String?
    /// The name that you want to use to configure the agent.
    public var name: Swift.String?

    public init (
        agentArn: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.agentArn = agentArn
        self.name = name
    }
}

struct UpdateAgentInputBody: Swift.Equatable {
    public let agentArn: Swift.String?
    public let name: Swift.String?
}

extension UpdateAgentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentArn)
        agentArn = agentArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension UpdateAgentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateAgentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateAgentOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAgentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAgentOutputResponse()"}
}

extension UpdateAgentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAgentOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateAgentOutputResponseBody: Swift.Equatable {
}

extension UpdateAgentOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateLocationHdfsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationHdfsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLocationHdfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLocationHdfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationHdfsOutputError>
}

extension UpdateLocationHdfsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLocationHdfsInput(agentArns: \(Swift.String(describing: agentArns)), authenticationType: \(Swift.String(describing: authenticationType)), blockSize: \(Swift.String(describing: blockSize)), kerberosKeytab: \(Swift.String(describing: kerberosKeytab)), kerberosKrb5Conf: \(Swift.String(describing: kerberosKrb5Conf)), kerberosPrincipal: \(Swift.String(describing: kerberosPrincipal)), kmsKeyProviderUri: \(Swift.String(describing: kmsKeyProviderUri)), locationArn: \(Swift.String(describing: locationArn)), nameNodes: \(Swift.String(describing: nameNodes)), qopConfiguration: \(Swift.String(describing: qopConfiguration)), replicationFactor: \(Swift.String(describing: replicationFactor)), simpleUser: \(Swift.String(describing: simpleUser)), subdirectory: \(Swift.String(describing: subdirectory)))"}
}

extension UpdateLocationHdfsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blockSize = "BlockSize"
        case kerberosKeytab = "KerberosKeytab"
        case kerberosKrb5Conf = "KerberosKrb5Conf"
        case kerberosPrincipal = "KerberosPrincipal"
        case kmsKeyProviderUri = "KmsKeyProviderUri"
        case locationArn = "LocationArn"
        case nameNodes = "NameNodes"
        case qopConfiguration = "QopConfiguration"
        case replicationFactor = "ReplicationFactor"
        case simpleUser = "SimpleUser"
        case subdirectory = "Subdirectory"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarnlist0 in agentArns {
                try agentArnsContainer.encode(agentarnlist0)
            }
        }
        if let authenticationType = authenticationType {
            try encodeContainer.encode(authenticationType.rawValue, forKey: .authenticationType)
        }
        if let blockSize = blockSize {
            try encodeContainer.encode(blockSize, forKey: .blockSize)
        }
        if let kerberosKeytab = kerberosKeytab {
            try encodeContainer.encode(kerberosKeytab.base64EncodedString(), forKey: .kerberosKeytab)
        }
        if let kerberosKrb5Conf = kerberosKrb5Conf {
            try encodeContainer.encode(kerberosKrb5Conf.base64EncodedString(), forKey: .kerberosKrb5Conf)
        }
        if let kerberosPrincipal = kerberosPrincipal {
            try encodeContainer.encode(kerberosPrincipal, forKey: .kerberosPrincipal)
        }
        if let kmsKeyProviderUri = kmsKeyProviderUri {
            try encodeContainer.encode(kmsKeyProviderUri, forKey: .kmsKeyProviderUri)
        }
        if let locationArn = locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
        if let nameNodes = nameNodes {
            var nameNodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nameNodes)
            for hdfsnamenodelist0 in nameNodes {
                try nameNodesContainer.encode(hdfsnamenodelist0)
            }
        }
        if let qopConfiguration = qopConfiguration {
            try encodeContainer.encode(qopConfiguration, forKey: .qopConfiguration)
        }
        if let replicationFactor = replicationFactor {
            try encodeContainer.encode(replicationFactor, forKey: .replicationFactor)
        }
        if let simpleUser = simpleUser {
            try encodeContainer.encode(simpleUser, forKey: .simpleUser)
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
    }
}

public struct UpdateLocationHdfsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationHdfsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLocationHdfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLocationHdfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationHdfsOutputError>
}

public struct UpdateLocationHdfsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationHdfsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLocationHdfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLocationHdfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationHdfsOutputError>
}

public struct UpdateLocationHdfsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationHdfsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UpdateLocationHdfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateLocationHdfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationHdfsOutputError>
}

public struct UpdateLocationHdfsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationHdfsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UpdateLocationHdfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationHdfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateLocationHdfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationHdfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationHdfsOutputError>
}

public struct UpdateLocationHdfsInput: Swift.Equatable {
    /// The ARNs of the agents that are used to connect to the HDFS cluster.
    public var agentArns: [Swift.String]?
    /// The type of authentication used to determine the identity of the user.
    public var authenticationType: DataSyncClientTypes.HdfsAuthenticationType?
    /// The size of the data blocks to write into the HDFS cluster.
    public var blockSize: Swift.Int?
    /// The Kerberos key table (keytab) that contains mappings between the defined Kerberos principal and the encrypted keys. You can load the keytab from a file by providing the file's address. If you use the AWS CLI, it performs base64 encoding for you. Otherwise, provide the base64-encoded text.
    public var kerberosKeytab: ClientRuntime.Data?
    /// The krb5.conf file that contains the Kerberos configuration information. You can load the krb5.conf file by providing the file's address. If you're using the AWS CLI, it performs the base64 encoding for you. Otherwise, provide the base64-encoded text.
    public var kerberosKrb5Conf: ClientRuntime.Data?
    /// The Kerberos principal with access to the files and folders on the HDFS cluster.
    public var kerberosPrincipal: Swift.String?
    /// The URI of the HDFS cluster's Key Management Server (KMS).
    public var kmsKeyProviderUri: Swift.String?
    /// The Amazon Resource Name (ARN) of the source HDFS cluster location.
    /// This member is required.
    public var locationArn: Swift.String?
    /// The NameNode that manages the HDFS namespace. The NameNode performs operations such as opening, closing, and renaming files and directories. The NameNode contains the information to map blocks of data to the DataNodes. You can use only one NameNode.
    public var nameNodes: [DataSyncClientTypes.HdfsNameNode]?
    /// The Quality of Protection (QOP) configuration specifies the Remote Procedure Call (RPC) and data transfer privacy settings configured on the Hadoop Distributed File System (HDFS) cluster.
    public var qopConfiguration: DataSyncClientTypes.QopConfiguration?
    /// The number of DataNodes to replicate the data to when writing to the HDFS cluster.
    public var replicationFactor: Swift.Int?
    /// The user name used to identify the client on the host operating system.
    public var simpleUser: Swift.String?
    /// A subdirectory in the HDFS cluster. This subdirectory is used to read data from or write data to the HDFS cluster.
    public var subdirectory: Swift.String?

    public init (
        agentArns: [Swift.String]? = nil,
        authenticationType: DataSyncClientTypes.HdfsAuthenticationType? = nil,
        blockSize: Swift.Int? = nil,
        kerberosKeytab: ClientRuntime.Data? = nil,
        kerberosKrb5Conf: ClientRuntime.Data? = nil,
        kerberosPrincipal: Swift.String? = nil,
        kmsKeyProviderUri: Swift.String? = nil,
        locationArn: Swift.String? = nil,
        nameNodes: [DataSyncClientTypes.HdfsNameNode]? = nil,
        qopConfiguration: DataSyncClientTypes.QopConfiguration? = nil,
        replicationFactor: Swift.Int? = nil,
        simpleUser: Swift.String? = nil,
        subdirectory: Swift.String? = nil
    )
    {
        self.agentArns = agentArns
        self.authenticationType = authenticationType
        self.blockSize = blockSize
        self.kerberosKeytab = kerberosKeytab
        self.kerberosKrb5Conf = kerberosKrb5Conf
        self.kerberosPrincipal = kerberosPrincipal
        self.kmsKeyProviderUri = kmsKeyProviderUri
        self.locationArn = locationArn
        self.nameNodes = nameNodes
        self.qopConfiguration = qopConfiguration
        self.replicationFactor = replicationFactor
        self.simpleUser = simpleUser
        self.subdirectory = subdirectory
    }
}

struct UpdateLocationHdfsInputBody: Swift.Equatable {
    public let locationArn: Swift.String?
    public let subdirectory: Swift.String?
    public let nameNodes: [DataSyncClientTypes.HdfsNameNode]?
    public let blockSize: Swift.Int?
    public let replicationFactor: Swift.Int?
    public let kmsKeyProviderUri: Swift.String?
    public let qopConfiguration: DataSyncClientTypes.QopConfiguration?
    public let authenticationType: DataSyncClientTypes.HdfsAuthenticationType?
    public let simpleUser: Swift.String?
    public let kerberosPrincipal: Swift.String?
    public let kerberosKeytab: ClientRuntime.Data?
    public let kerberosKrb5Conf: ClientRuntime.Data?
    public let agentArns: [Swift.String]?
}

extension UpdateLocationHdfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blockSize = "BlockSize"
        case kerberosKeytab = "KerberosKeytab"
        case kerberosKrb5Conf = "KerberosKrb5Conf"
        case kerberosPrincipal = "KerberosPrincipal"
        case kmsKeyProviderUri = "KmsKeyProviderUri"
        case locationArn = "LocationArn"
        case nameNodes = "NameNodes"
        case qopConfiguration = "QopConfiguration"
        case replicationFactor = "ReplicationFactor"
        case simpleUser = "SimpleUser"
        case subdirectory = "Subdirectory"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let nameNodesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.HdfsNameNode?].self, forKey: .nameNodes)
        var nameNodesDecoded0:[DataSyncClientTypes.HdfsNameNode]? = nil
        if let nameNodesContainer = nameNodesContainer {
            nameNodesDecoded0 = [DataSyncClientTypes.HdfsNameNode]()
            for structure0 in nameNodesContainer {
                if let structure0 = structure0 {
                    nameNodesDecoded0?.append(structure0)
                }
            }
        }
        nameNodes = nameNodesDecoded0
        let blockSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockSize)
        blockSize = blockSizeDecoded
        let replicationFactorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .replicationFactor)
        replicationFactor = replicationFactorDecoded
        let kmsKeyProviderUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyProviderUri)
        kmsKeyProviderUri = kmsKeyProviderUriDecoded
        let qopConfigurationDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.QopConfiguration.self, forKey: .qopConfiguration)
        qopConfiguration = qopConfigurationDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.HdfsAuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let simpleUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .simpleUser)
        simpleUser = simpleUserDecoded
        let kerberosPrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kerberosPrincipal)
        kerberosPrincipal = kerberosPrincipalDecoded
        let kerberosKeytabDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .kerberosKeytab)
        kerberosKeytab = kerberosKeytabDecoded
        let kerberosKrb5ConfDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .kerberosKrb5Conf)
        kerberosKrb5Conf = kerberosKrb5ConfDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
    }
}

extension UpdateLocationHdfsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateLocationHdfsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateLocationHdfsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateLocationHdfsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLocationHdfsOutputResponse()"}
}

extension UpdateLocationHdfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateLocationHdfsOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateLocationHdfsOutputResponseBody: Swift.Equatable {
}

extension UpdateLocationHdfsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateLocationNfsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationNfsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLocationNfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLocationNfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationNfsOutputError>
}

extension UpdateLocationNfsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLocationNfsInput(locationArn: \(Swift.String(describing: locationArn)), mountOptions: \(Swift.String(describing: mountOptions)), onPremConfig: \(Swift.String(describing: onPremConfig)), subdirectory: \(Swift.String(describing: subdirectory)))"}
}

extension UpdateLocationNfsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
        case mountOptions = "MountOptions"
        case onPremConfig = "OnPremConfig"
        case subdirectory = "Subdirectory"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
        if let mountOptions = mountOptions {
            try encodeContainer.encode(mountOptions, forKey: .mountOptions)
        }
        if let onPremConfig = onPremConfig {
            try encodeContainer.encode(onPremConfig, forKey: .onPremConfig)
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
    }
}

public struct UpdateLocationNfsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationNfsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLocationNfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLocationNfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationNfsOutputError>
}

public struct UpdateLocationNfsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationNfsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLocationNfsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLocationNfsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationNfsOutputError>
}

public struct UpdateLocationNfsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationNfsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UpdateLocationNfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateLocationNfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationNfsOutputError>
}

public struct UpdateLocationNfsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationNfsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UpdateLocationNfsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationNfsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateLocationNfsInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationNfsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationNfsOutputError>
}

public struct UpdateLocationNfsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the NFS location to update.
    /// This member is required.
    public var locationArn: Swift.String?
    /// Represents the mount options that are available for DataSync to access an NFS location.
    public var mountOptions: DataSyncClientTypes.NfsMountOptions?
    /// A list of Amazon Resource Names (ARNs) of agents to use for a Network File System (NFS) location.
    public var onPremConfig: DataSyncClientTypes.OnPremConfig?
    /// The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS destination. The NFS path should be a path that's exported by the NFS server, or a subdirectory of that path. The path should be such that it can be mounted by other NFS clients in your network. To see all the paths exported by your NFS server, run "showmount -e nfs-server-name" from an NFS client that has access to your server. You can specify any directory that appears in the results, and any subdirectory of that directory. Ensure that the NFS export is accessible without Kerberos authentication. To transfer all the data in the folder that you specified, DataSync must have permissions to read all the data. To ensure this, either configure the NFS export with no_root_squash, or ensure that the files you want DataSync to access have permissions that allow read access for all users. Doing either option enables the agent to read the files. For the agent to access directories, you must additionally enable all execute access. If you are copying data to or from your Snowcone device, see [NFS Server on Snowcone](https://docs.aws.amazon.com/datasync/latest/userguide/create-nfs-location.html#nfs-on-snowcone) for more information. For information about NFS export configuration, see 18.7. The /etc/exports Configuration File in the Red Hat Enterprise Linux documentation.
    public var subdirectory: Swift.String?

    public init (
        locationArn: Swift.String? = nil,
        mountOptions: DataSyncClientTypes.NfsMountOptions? = nil,
        onPremConfig: DataSyncClientTypes.OnPremConfig? = nil,
        subdirectory: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
        self.mountOptions = mountOptions
        self.onPremConfig = onPremConfig
        self.subdirectory = subdirectory
    }
}

struct UpdateLocationNfsInputBody: Swift.Equatable {
    public let locationArn: Swift.String?
    public let subdirectory: Swift.String?
    public let onPremConfig: DataSyncClientTypes.OnPremConfig?
    public let mountOptions: DataSyncClientTypes.NfsMountOptions?
}

extension UpdateLocationNfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
        case mountOptions = "MountOptions"
        case onPremConfig = "OnPremConfig"
        case subdirectory = "Subdirectory"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let onPremConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.OnPremConfig.self, forKey: .onPremConfig)
        onPremConfig = onPremConfigDecoded
        let mountOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.NfsMountOptions.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
    }
}

extension UpdateLocationNfsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateLocationNfsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateLocationNfsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateLocationNfsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLocationNfsOutputResponse()"}
}

extension UpdateLocationNfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateLocationNfsOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateLocationNfsOutputResponseBody: Swift.Equatable {
}

extension UpdateLocationNfsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateLocationObjectStorageInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationObjectStorageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLocationObjectStorageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLocationObjectStorageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationObjectStorageOutputError>
}

extension UpdateLocationObjectStorageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLocationObjectStorageInput(accessKey: \(Swift.String(describing: accessKey)), agentArns: \(Swift.String(describing: agentArns)), locationArn: \(Swift.String(describing: locationArn)), secretKey: \(Swift.String(describing: secretKey)), serverPort: \(Swift.String(describing: serverPort)), serverProtocol: \(Swift.String(describing: serverProtocol)), subdirectory: \(Swift.String(describing: subdirectory)))"}
}

extension UpdateLocationObjectStorageInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKey = "AccessKey"
        case agentArns = "AgentArns"
        case locationArn = "LocationArn"
        case secretKey = "SecretKey"
        case serverPort = "ServerPort"
        case serverProtocol = "ServerProtocol"
        case subdirectory = "Subdirectory"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessKey = accessKey {
            try encodeContainer.encode(accessKey, forKey: .accessKey)
        }
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarnlist0 in agentArns {
                try agentArnsContainer.encode(agentarnlist0)
            }
        }
        if let locationArn = locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
        if let secretKey = secretKey {
            try encodeContainer.encode(secretKey, forKey: .secretKey)
        }
        if let serverPort = serverPort {
            try encodeContainer.encode(serverPort, forKey: .serverPort)
        }
        if let serverProtocol = serverProtocol {
            try encodeContainer.encode(serverProtocol.rawValue, forKey: .serverProtocol)
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
    }
}

public struct UpdateLocationObjectStorageInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationObjectStorageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLocationObjectStorageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLocationObjectStorageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationObjectStorageOutputError>
}

public struct UpdateLocationObjectStorageInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationObjectStorageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLocationObjectStorageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLocationObjectStorageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationObjectStorageOutputError>
}

public struct UpdateLocationObjectStorageInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationObjectStorageInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UpdateLocationObjectStorageInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateLocationObjectStorageInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationObjectStorageOutputError>
}

public struct UpdateLocationObjectStorageInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationObjectStorageInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UpdateLocationObjectStorageInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationObjectStorageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateLocationObjectStorageInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationObjectStorageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationObjectStorageOutputError>
}

public struct UpdateLocationObjectStorageInput: Swift.Equatable {
    /// Optional. The access key is used if credentials are required to access the self-managed object storage server. If your object storage requires a user name and password to authenticate, use AccessKey and SecretKey to provide the user name and password, respectively.
    public var accessKey: Swift.String?
    /// The Amazon Resource Name (ARN) of the agents associated with the self-managed object storage server location.
    public var agentArns: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the self-managed object storage server location to be updated.
    /// This member is required.
    public var locationArn: Swift.String?
    /// Optional. The secret key is used if credentials are required to access the self-managed object storage server. If your object storage requires a user name and password to authenticate, use AccessKey and SecretKey to provide the user name and password, respectively.
    public var secretKey: Swift.String?
    /// The port that your self-managed object storage server accepts inbound network traffic on. The server port is set by default to TCP 80 (HTTP) or TCP 443 (HTTPS). You can specify a custom port if your self-managed object storage server requires one.
    public var serverPort: Swift.Int?
    /// The protocol that the object storage server uses to communicate. Valid values are HTTP or HTTPS.
    public var serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol?
    /// The subdirectory in the self-managed object storage server that is used to read data from.
    public var subdirectory: Swift.String?

    public init (
        accessKey: Swift.String? = nil,
        agentArns: [Swift.String]? = nil,
        locationArn: Swift.String? = nil,
        secretKey: Swift.String? = nil,
        serverPort: Swift.Int? = nil,
        serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol? = nil,
        subdirectory: Swift.String? = nil
    )
    {
        self.accessKey = accessKey
        self.agentArns = agentArns
        self.locationArn = locationArn
        self.secretKey = secretKey
        self.serverPort = serverPort
        self.serverProtocol = serverProtocol
        self.subdirectory = subdirectory
    }
}

struct UpdateLocationObjectStorageInputBody: Swift.Equatable {
    public let locationArn: Swift.String?
    public let serverPort: Swift.Int?
    public let serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol?
    public let subdirectory: Swift.String?
    public let accessKey: Swift.String?
    public let secretKey: Swift.String?
    public let agentArns: [Swift.String]?
}

extension UpdateLocationObjectStorageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKey = "AccessKey"
        case agentArns = "AgentArns"
        case locationArn = "LocationArn"
        case secretKey = "SecretKey"
        case serverPort = "ServerPort"
        case serverProtocol = "ServerProtocol"
        case subdirectory = "Subdirectory"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let serverPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .serverPort)
        serverPort = serverPortDecoded
        let serverProtocolDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ObjectStorageServerProtocol.self, forKey: .serverProtocol)
        serverProtocol = serverProtocolDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let accessKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKey)
        accessKey = accessKeyDecoded
        let secretKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretKey)
        secretKey = secretKeyDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
    }
}

extension UpdateLocationObjectStorageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateLocationObjectStorageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateLocationObjectStorageOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateLocationObjectStorageOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLocationObjectStorageOutputResponse()"}
}

extension UpdateLocationObjectStorageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateLocationObjectStorageOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateLocationObjectStorageOutputResponseBody: Swift.Equatable {
}

extension UpdateLocationObjectStorageOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateLocationSmbInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationSmbInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLocationSmbInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLocationSmbInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationSmbOutputError>
}

extension UpdateLocationSmbInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLocationSmbInput(agentArns: \(Swift.String(describing: agentArns)), domain: \(Swift.String(describing: domain)), locationArn: \(Swift.String(describing: locationArn)), mountOptions: \(Swift.String(describing: mountOptions)), password: \(Swift.String(describing: password)), subdirectory: \(Swift.String(describing: subdirectory)), user: \(Swift.String(describing: user)))"}
}

extension UpdateLocationSmbInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case domain = "Domain"
        case locationArn = "LocationArn"
        case mountOptions = "MountOptions"
        case password = "Password"
        case subdirectory = "Subdirectory"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarnlist0 in agentArns {
                try agentArnsContainer.encode(agentarnlist0)
            }
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let locationArn = locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
        if let mountOptions = mountOptions {
            try encodeContainer.encode(mountOptions, forKey: .mountOptions)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let user = user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }
}

public struct UpdateLocationSmbInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationSmbInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLocationSmbInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLocationSmbInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationSmbOutputError>
}

public struct UpdateLocationSmbInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationSmbInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLocationSmbInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLocationSmbInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationSmbOutputError>
}

public struct UpdateLocationSmbInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationSmbInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UpdateLocationSmbInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateLocationSmbInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationSmbOutputError>
}

public struct UpdateLocationSmbInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLocationSmbInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UpdateLocationSmbInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLocationSmbOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateLocationSmbInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLocationSmbOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLocationSmbOutputError>
}

public struct UpdateLocationSmbInput: Swift.Equatable {
    /// The Amazon Resource Names (ARNs) of agents to use for a Simple Message Block (SMB) location.
    public var agentArns: [Swift.String]?
    /// The name of the Windows domain that the SMB server belongs to.
    public var domain: Swift.String?
    /// The Amazon Resource Name (ARN) of the SMB location to update.
    /// This member is required.
    public var locationArn: Swift.String?
    /// Represents the mount options that are available for DataSync to access an SMB location.
    public var mountOptions: DataSyncClientTypes.SmbMountOptions?
    /// The password of the user who can mount the share has the permissions to access files and folders in the SMB share.
    public var password: Swift.String?
    /// The subdirectory in the SMB file system that is used to read data from the SMB source location or write data to the SMB destination. The SMB path should be a path that's exported by the SMB server, or a subdirectory of that path. The path should be such that it can be mounted by other SMB clients in your network. Subdirectory must be specified with forward slashes. For example, /path/to/folder. To transfer all the data in the folder that you specified, DataSync must have permissions to mount the SMB share and to access all the data in that share. To ensure this, do either of the following:
    ///
    /// * Ensure that the user/password specified belongs to the user who can mount the share and who has the appropriate permissions for all of the files and directories that you want DataSync to access.
    ///
    /// * Use credentials of a member of the Backup Operators group to mount the share.
    ///
    ///
    /// Doing either of these options enables the agent to access the data. For the agent to access directories, you must also enable all execute access.
    public var subdirectory: Swift.String?
    /// The user who can mount the share has the permissions to access files and folders in the SMB share.
    public var user: Swift.String?

    public init (
        agentArns: [Swift.String]? = nil,
        domain: Swift.String? = nil,
        locationArn: Swift.String? = nil,
        mountOptions: DataSyncClientTypes.SmbMountOptions? = nil,
        password: Swift.String? = nil,
        subdirectory: Swift.String? = nil,
        user: Swift.String? = nil
    )
    {
        self.agentArns = agentArns
        self.domain = domain
        self.locationArn = locationArn
        self.mountOptions = mountOptions
        self.password = password
        self.subdirectory = subdirectory
        self.user = user
    }
}

struct UpdateLocationSmbInputBody: Swift.Equatable {
    public let locationArn: Swift.String?
    public let subdirectory: Swift.String?
    public let user: Swift.String?
    public let domain: Swift.String?
    public let password: Swift.String?
    public let agentArns: [Swift.String]?
    public let mountOptions: DataSyncClientTypes.SmbMountOptions?
}

extension UpdateLocationSmbInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case domain = "Domain"
        case locationArn = "LocationArn"
        case mountOptions = "MountOptions"
        case password = "Password"
        case subdirectory = "Subdirectory"
        case user = "User"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let mountOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.SmbMountOptions.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
    }
}

extension UpdateLocationSmbOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateLocationSmbOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateLocationSmbOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateLocationSmbOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLocationSmbOutputResponse()"}
}

extension UpdateLocationSmbOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateLocationSmbOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateLocationSmbOutputResponseBody: Swift.Equatable {
}

extension UpdateLocationSmbOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateTaskExecutionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTaskExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTaskExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTaskExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTaskExecutionOutputError>
}

extension UpdateTaskExecutionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTaskExecutionInput(options: \(Swift.String(describing: options)), taskExecutionArn: \(Swift.String(describing: taskExecutionArn)))"}
}

extension UpdateTaskExecutionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case taskExecutionArn = "TaskExecutionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let taskExecutionArn = taskExecutionArn {
            try encodeContainer.encode(taskExecutionArn, forKey: .taskExecutionArn)
        }
    }
}

public struct UpdateTaskExecutionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTaskExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTaskExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTaskExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTaskExecutionOutputError>
}

public struct UpdateTaskExecutionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTaskExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTaskExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTaskExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTaskExecutionOutputError>
}

public struct UpdateTaskExecutionInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTaskExecutionInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UpdateTaskExecutionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateTaskExecutionInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTaskExecutionOutputError>
}

public struct UpdateTaskExecutionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTaskExecutionInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UpdateTaskExecutionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTaskExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateTaskExecutionInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTaskExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTaskExecutionOutputError>
}

public struct UpdateTaskExecutionInput: Swift.Equatable {
    /// Represents the options that are available to control the behavior of a [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) operation. Behavior includes preserving metadata such as user ID (UID), group ID (GID), and file permissions, and also overwriting files in the destination, data integrity verification, and so on. A task has a set of default options associated with it. If you don't specify an option in [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html), the default value is used. You can override the defaults options on each task execution by specifying an overriding Options value to [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html).
    /// This member is required.
    public var options: DataSyncClientTypes.Options?
    /// The Amazon Resource Name (ARN) of the specific task execution that is being updated.
    /// This member is required.
    public var taskExecutionArn: Swift.String?

    public init (
        options: DataSyncClientTypes.Options? = nil,
        taskExecutionArn: Swift.String? = nil
    )
    {
        self.options = options
        self.taskExecutionArn = taskExecutionArn
    }
}

struct UpdateTaskExecutionInputBody: Swift.Equatable {
    public let taskExecutionArn: Swift.String?
    public let options: DataSyncClientTypes.Options?
}

extension UpdateTaskExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case taskExecutionArn = "TaskExecutionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskExecutionArn)
        taskExecutionArn = taskExecutionArnDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Options.self, forKey: .options)
        options = optionsDecoded
    }
}

extension UpdateTaskExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTaskExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTaskExecutionOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTaskExecutionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTaskExecutionOutputResponse()"}
}

extension UpdateTaskExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateTaskExecutionOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateTaskExecutionOutputResponseBody: Swift.Equatable {
}

extension UpdateTaskExecutionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateTaskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTaskOutputError>
}

extension UpdateTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTaskInput(cloudWatchLogGroupArn: \(Swift.String(describing: cloudWatchLogGroupArn)), excludes: \(Swift.String(describing: excludes)), includes: \(Swift.String(describing: includes)), name: \(Swift.String(describing: name)), options: \(Swift.String(describing: options)), schedule: \(Swift.String(describing: schedule)), taskArn: \(Swift.String(describing: taskArn)))"}
}

extension UpdateTaskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case excludes = "Excludes"
        case includes = "Includes"
        case name = "Name"
        case options = "Options"
        case schedule = "Schedule"
        case taskArn = "TaskArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogGroupArn = cloudWatchLogGroupArn {
            try encodeContainer.encode(cloudWatchLogGroupArn, forKey: .cloudWatchLogGroupArn)
        }
        if let excludes = excludes {
            var excludesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludes)
            for filterlist0 in excludes {
                try excludesContainer.encode(filterlist0)
            }
        }
        if let includes = includes {
            var includesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includes)
            for filterlist0 in includes {
                try includesContainer.encode(filterlist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let taskArn = taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }
}

public struct UpdateTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTaskOutputError>
}

public struct UpdateTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTaskOutputError>
}

public struct UpdateTaskInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTaskInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UpdateTaskInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateTaskInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTaskOutputError>
}

public struct UpdateTaskInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTaskInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UpdateTaskInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateTaskInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTaskOutputError>
}

/// UpdateTaskResponse
public struct UpdateTaskInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource name of the Amazon CloudWatch log group.
    public var cloudWatchLogGroupArn: Swift.String?
    /// A list of filter rules that determines which files to exclude from a task. The list should contain a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example, "/folder1|/folder2".
    public var excludes: [DataSyncClientTypes.FilterRule]?
    /// A list of filter rules that determines which files to include when running a task. The pattern contains a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example, "/folder1|/folder2".
    public var includes: [DataSyncClientTypes.FilterRule]?
    /// The name of the task to update.
    public var name: Swift.String?
    /// Represents the options that are available to control the behavior of a [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) operation. Behavior includes preserving metadata such as user ID (UID), group ID (GID), and file permissions, and also overwriting files in the destination, data integrity verification, and so on. A task has a set of default options associated with it. If you don't specify an option in [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html), the default value is used. You can override the defaults options on each task execution by specifying an overriding Options value to [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html).
    public var options: DataSyncClientTypes.Options?
    /// Specifies a schedule used to periodically transfer files from a source to a destination location. You can configure your task to execute hourly, daily, weekly or on specific days of the week. You control when in the day or hour you want the task to execute. The time you specify is UTC time. For more information, see [Scheduling your task](https://docs.aws.amazon.com/datasync/latest/userguide/task-scheduling.html).
    public var schedule: DataSyncClientTypes.TaskSchedule?
    /// The Amazon Resource Name (ARN) of the resource name of the task to update.
    /// This member is required.
    public var taskArn: Swift.String?

    public init (
        cloudWatchLogGroupArn: Swift.String? = nil,
        excludes: [DataSyncClientTypes.FilterRule]? = nil,
        includes: [DataSyncClientTypes.FilterRule]? = nil,
        name: Swift.String? = nil,
        options: DataSyncClientTypes.Options? = nil,
        schedule: DataSyncClientTypes.TaskSchedule? = nil,
        taskArn: Swift.String? = nil
    )
    {
        self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
        self.excludes = excludes
        self.includes = includes
        self.name = name
        self.options = options
        self.schedule = schedule
        self.taskArn = taskArn
    }
}

struct UpdateTaskInputBody: Swift.Equatable {
    public let taskArn: Swift.String?
    public let options: DataSyncClientTypes.Options?
    public let excludes: [DataSyncClientTypes.FilterRule]?
    public let schedule: DataSyncClientTypes.TaskSchedule?
    public let name: Swift.String?
    public let cloudWatchLogGroupArn: Swift.String?
    public let includes: [DataSyncClientTypes.FilterRule]?
}

extension UpdateTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case excludes = "Excludes"
        case includes = "Includes"
        case name = "Name"
        case options = "Options"
        case schedule = "Schedule"
        case taskArn = "TaskArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Options.self, forKey: .options)
        options = optionsDecoded
        let excludesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .excludes)
        var excludesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in excludesContainer {
                if let structure0 = structure0 {
                    excludesDecoded0?.append(structure0)
                }
            }
        }
        excludes = excludesDecoded0
        let scheduleDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskSchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let includesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .includes)
        var includesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let includesContainer = includesContainer {
            includesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in includesContainer {
                if let structure0 = structure0 {
                    includesDecoded0?.append(structure0)
                }
            }
        }
        includes = includesDecoded0
    }
}

extension UpdateTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTaskOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTaskOutputResponse()"}
}

extension UpdateTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateTaskOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateTaskOutputResponseBody: Swift.Equatable {
}

extension UpdateTaskOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DataSyncClientTypes {
    public enum VerifyMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case onlyFilesTransferred
        case pointInTimeConsistent
        case sdkUnknown(Swift.String)

        public static var allCases: [VerifyMode] {
            return [
                .none,
                .onlyFilesTransferred,
                .pointInTimeConsistent,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .onlyFilesTransferred: return "ONLY_FILES_TRANSFERRED"
            case .pointInTimeConsistent: return "POINT_IN_TIME_CONSISTENT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VerifyMode(rawValue: rawValue) ?? VerifyMode.sdkUnknown(rawValue)
        }
    }
}
