// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTransitGatewayVpcAttachmentsOutputResponseBody: Equatable {
    public let transitGatewayVpcAttachments: [TransitGatewayVpcAttachment]?
    public let nextToken: String?
}

extension DescribeTransitGatewayVpcAttachmentsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case transitGatewayVpcAttachments = "transitGatewayVpcAttachments"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.transitGatewayVpcAttachments) {
            struct KeyVal0{struct item{}}
            let transitGatewayVpcAttachmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .transitGatewayVpcAttachments)
            if let transitGatewayVpcAttachmentsWrappedContainer = transitGatewayVpcAttachmentsWrappedContainer {
                let transitGatewayVpcAttachmentsContainer = try transitGatewayVpcAttachmentsWrappedContainer.decodeIfPresent([TransitGatewayVpcAttachment].self, forKey: .member)
                var transitGatewayVpcAttachmentsBuffer:[TransitGatewayVpcAttachment]? = nil
                if let transitGatewayVpcAttachmentsContainer = transitGatewayVpcAttachmentsContainer {
                    transitGatewayVpcAttachmentsBuffer = [TransitGatewayVpcAttachment]()
                    for structureContainer0 in transitGatewayVpcAttachmentsContainer {
                        transitGatewayVpcAttachmentsBuffer?.append(structureContainer0)
                    }
                }
                transitGatewayVpcAttachments = transitGatewayVpcAttachmentsBuffer
            } else {
                transitGatewayVpcAttachments = []
            }
        } else {
            transitGatewayVpcAttachments = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
