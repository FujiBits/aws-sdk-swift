// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AthenaIntegration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case integrationResultS3DestinationArn = "IntegrationResultS3DestinationArn"
        case partitionEndDate = "PartitionEndDate"
        case partitionLoadFrequency = "PartitionLoadFrequency"
        case partitionStartDate = "PartitionStartDate"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let integrationResultS3DestinationArn = integrationResultS3DestinationArn {
            try container.encode(integrationResultS3DestinationArn, forKey: Key("IntegrationResultS3DestinationArn"))
        }
        if let partitionEndDate = partitionEndDate {
            try container.encode(TimestampWrapper(partitionEndDate, format: .dateTime), forKey: Key("PartitionEndDate"))
        }
        if let partitionLoadFrequency = partitionLoadFrequency {
            try container.encode(partitionLoadFrequency, forKey: Key("PartitionLoadFrequency"))
        }
        if let partitionStartDate = partitionStartDate {
            try container.encode(TimestampWrapper(partitionStartDate, format: .dateTime), forKey: Key("PartitionStartDate"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integrationResultS3DestinationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .integrationResultS3DestinationArn)
        integrationResultS3DestinationArn = integrationResultS3DestinationArnDecoded
        let partitionLoadFrequencyDecoded = try containerValues.decodeIfPresent(PartitionLoadFrequency.self, forKey: .partitionLoadFrequency)
        partitionLoadFrequency = partitionLoadFrequencyDecoded
        let partitionStartDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .partitionStartDate)
        var partitionStartDateBuffer:Date? = nil
        if let partitionStartDateDecoded = partitionStartDateDecoded {
            partitionStartDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(partitionStartDateDecoded, format: .dateTime)
        }
        partitionStartDate = partitionStartDateBuffer
        let partitionEndDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .partitionEndDate)
        var partitionEndDateBuffer:Date? = nil
        if let partitionEndDateDecoded = partitionEndDateDecoded {
            partitionEndDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(partitionEndDateDecoded, format: .dateTime)
        }
        partitionEndDate = partitionEndDateBuffer
    }
}
