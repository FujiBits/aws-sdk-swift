// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DiskImageDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case checksum = "checksum"
        case format = "format"
        case importManifestUrl = "importManifestUrl"
        case size = "size"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let checksum = checksum {
            try container.encode(checksum, forKey: Key("Checksum"))
        }
        if let format = format {
            try container.encode(format, forKey: Key("Format"))
        }
        if let importManifestUrl = importManifestUrl {
            try container.encode(importManifestUrl, forKey: Key("ImportManifestUrl"))
        }
        if size != 0 {
            try container.encode(size, forKey: Key("Size"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checksumDecoded = try containerValues.decodeIfPresent(String.self, forKey: .checksum)
        checksum = checksumDecoded
        let formatDecoded = try containerValues.decodeIfPresent(DiskImageFormat.self, forKey: .format)
        format = formatDecoded
        let importManifestUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .importManifestUrl)
        importManifestUrl = importManifestUrlDecoded
        let sizeDecoded = try containerValues.decode(Int.self, forKey: .size)
        size = sizeDecoded
    }
}
