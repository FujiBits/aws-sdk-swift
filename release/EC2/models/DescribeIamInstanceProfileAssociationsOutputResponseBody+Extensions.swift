// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeIamInstanceProfileAssociationsOutputResponseBody: Equatable {
    public let iamInstanceProfileAssociations: [IamInstanceProfileAssociation]?
    public let nextToken: String?
}

extension DescribeIamInstanceProfileAssociationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case iamInstanceProfileAssociations = "iamInstanceProfileAssociationSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.iamInstanceProfileAssociations) {
            struct KeyVal0{struct item{}}
            let iamInstanceProfileAssociationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .iamInstanceProfileAssociations)
            if let iamInstanceProfileAssociationsWrappedContainer = iamInstanceProfileAssociationsWrappedContainer {
                let iamInstanceProfileAssociationsContainer = try iamInstanceProfileAssociationsWrappedContainer.decodeIfPresent([IamInstanceProfileAssociation].self, forKey: .member)
                var iamInstanceProfileAssociationsBuffer:[IamInstanceProfileAssociation]? = nil
                if let iamInstanceProfileAssociationsContainer = iamInstanceProfileAssociationsContainer {
                    iamInstanceProfileAssociationsBuffer = [IamInstanceProfileAssociation]()
                    for structureContainer0 in iamInstanceProfileAssociationsContainer {
                        iamInstanceProfileAssociationsBuffer?.append(structureContainer0)
                    }
                }
                iamInstanceProfileAssociations = iamInstanceProfileAssociationsBuffer
            } else {
                iamInstanceProfileAssociations = []
            }
        } else {
            iamInstanceProfileAssociations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
