// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AnalysisSecurityGroupRule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cidr = "cidr"
        case direction = "direction"
        case portRange = "portRange"
        case prefixListId = "prefixListId"
        case `protocol` = "protocol"
        case securityGroupId = "securityGroupId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cidr = cidr {
            try container.encode(cidr, forKey: Key("Cidr"))
        }
        if let direction = direction {
            try container.encode(direction, forKey: Key("Direction"))
        }
        if let portRange = portRange {
            try container.encode(portRange, forKey: Key("PortRange"))
        }
        if let prefixListId = prefixListId {
            try container.encode(prefixListId, forKey: Key("PrefixListId"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: Key("Protocol"))
        }
        if let securityGroupId = securityGroupId {
            try container.encode(securityGroupId, forKey: Key("SecurityGroupId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cidr)
        cidr = cidrDecoded
        let directionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .direction)
        direction = directionDecoded
        let securityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityGroupId)
        securityGroupId = securityGroupIdDecoded
        let portRangeDecoded = try containerValues.decodeIfPresent(PortRange.self, forKey: .portRange)
        portRange = portRangeDecoded
        let prefixListIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefixListId)
        prefixListId = prefixListIdDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(String.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}
