// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Vpc: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cidrBlock = "cidrBlock"
        case cidrBlockAssociationSet = "cidrBlockAssociationSet"
        case dhcpOptionsId = "dhcpOptionsId"
        case instanceTenancy = "instanceTenancy"
        case ipv6CidrBlockAssociationSet = "ipv6CidrBlockAssociationSet"
        case isDefault = "isDefault"
        case ownerId = "ownerId"
        case state = "state"
        case tags = "tagSet"
        case vpcId = "vpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cidrBlock = cidrBlock {
            try container.encode(cidrBlock, forKey: Key("CidrBlock"))
        }
        if let cidrBlockAssociationSet = cidrBlockAssociationSet {
            if !cidrBlockAssociationSet.isEmpty {
                for (index0, vpccidrblockassociation0) in cidrBlockAssociationSet.enumerated() {
                    var cidrBlockAssociationSetContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("CidrBlockAssociationSet.\(index0.advanced(by: 1))"))
                    try cidrBlockAssociationSetContainer0.encode(vpccidrblockassociation0, forKey: Key(""))
                }
            }
        }
        if let dhcpOptionsId = dhcpOptionsId {
            try container.encode(dhcpOptionsId, forKey: Key("DhcpOptionsId"))
        }
        if let instanceTenancy = instanceTenancy {
            try container.encode(instanceTenancy, forKey: Key("InstanceTenancy"))
        }
        if let ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet {
            if !ipv6CidrBlockAssociationSet.isEmpty {
                for (index0, vpcipv6cidrblockassociation0) in ipv6CidrBlockAssociationSet.enumerated() {
                    var ipv6CidrBlockAssociationSetContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Ipv6CidrBlockAssociationSet.\(index0.advanced(by: 1))"))
                    try ipv6CidrBlockAssociationSetContainer0.encode(vpcipv6cidrblockassociation0, forKey: Key(""))
                }
            }
        }
        if isDefault != false {
            try container.encode(isDefault, forKey: Key("IsDefault"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: Key("OwnerId"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: Key("VpcId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrBlockDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cidrBlock)
        cidrBlock = cidrBlockDecoded
        let dhcpOptionsIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dhcpOptionsId)
        dhcpOptionsId = dhcpOptionsIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(VpcState.self, forKey: .state)
        state = stateDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let instanceTenancyDecoded = try containerValues.decodeIfPresent(Tenancy.self, forKey: .instanceTenancy)
        instanceTenancy = instanceTenancyDecoded
        if containerValues.contains(.ipv6CidrBlockAssociationSet) {
            struct KeyVal0{struct item{}}
            let ipv6CidrBlockAssociationSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipv6CidrBlockAssociationSet)
            if let ipv6CidrBlockAssociationSetWrappedContainer = ipv6CidrBlockAssociationSetWrappedContainer {
                let ipv6CidrBlockAssociationSetContainer = try ipv6CidrBlockAssociationSetWrappedContainer.decodeIfPresent([VpcIpv6CidrBlockAssociation].self, forKey: .member)
                var ipv6CidrBlockAssociationSetBuffer:[VpcIpv6CidrBlockAssociation]? = nil
                if let ipv6CidrBlockAssociationSetContainer = ipv6CidrBlockAssociationSetContainer {
                    ipv6CidrBlockAssociationSetBuffer = [VpcIpv6CidrBlockAssociation]()
                    for structureContainer0 in ipv6CidrBlockAssociationSetContainer {
                        ipv6CidrBlockAssociationSetBuffer?.append(structureContainer0)
                    }
                }
                ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSetBuffer
            } else {
                ipv6CidrBlockAssociationSet = []
            }
        } else {
            ipv6CidrBlockAssociationSet = nil
        }
        if containerValues.contains(.cidrBlockAssociationSet) {
            struct KeyVal0{struct item{}}
            let cidrBlockAssociationSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .cidrBlockAssociationSet)
            if let cidrBlockAssociationSetWrappedContainer = cidrBlockAssociationSetWrappedContainer {
                let cidrBlockAssociationSetContainer = try cidrBlockAssociationSetWrappedContainer.decodeIfPresent([VpcCidrBlockAssociation].self, forKey: .member)
                var cidrBlockAssociationSetBuffer:[VpcCidrBlockAssociation]? = nil
                if let cidrBlockAssociationSetContainer = cidrBlockAssociationSetContainer {
                    cidrBlockAssociationSetBuffer = [VpcCidrBlockAssociation]()
                    for structureContainer0 in cidrBlockAssociationSetContainer {
                        cidrBlockAssociationSetBuffer?.append(structureContainer0)
                    }
                }
                cidrBlockAssociationSet = cidrBlockAssociationSetBuffer
            } else {
                cidrBlockAssociationSet = []
            }
        } else {
            cidrBlockAssociationSet = nil
        }
        let isDefaultDecoded = try containerValues.decode(Bool.self, forKey: .isDefault)
        isDefault = isDefaultDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
