// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AvailableCapacity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availableInstanceCapacity = "availableInstanceCapacity"
        case availableVCpus = "availableVCpus"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let availableInstanceCapacity = availableInstanceCapacity {
            if !availableInstanceCapacity.isEmpty {
                for (index0, instancecapacity0) in availableInstanceCapacity.enumerated() {
                    var availableInstanceCapacityContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("AvailableInstanceCapacity.\(index0.advanced(by: 1))"))
                    try availableInstanceCapacityContainer0.encode(instancecapacity0, forKey: Key(""))
                }
            }
        }
        if availableVCpus != 0 {
            try container.encode(availableVCpus, forKey: Key("AvailableVCpus"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.availableInstanceCapacity) {
            struct KeyVal0{struct item{}}
            let availableInstanceCapacityWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .availableInstanceCapacity)
            if let availableInstanceCapacityWrappedContainer = availableInstanceCapacityWrappedContainer {
                let availableInstanceCapacityContainer = try availableInstanceCapacityWrappedContainer.decodeIfPresent([InstanceCapacity].self, forKey: .member)
                var availableInstanceCapacityBuffer:[InstanceCapacity]? = nil
                if let availableInstanceCapacityContainer = availableInstanceCapacityContainer {
                    availableInstanceCapacityBuffer = [InstanceCapacity]()
                    for structureContainer0 in availableInstanceCapacityContainer {
                        availableInstanceCapacityBuffer?.append(structureContainer0)
                    }
                }
                availableInstanceCapacity = availableInstanceCapacityBuffer
            } else {
                availableInstanceCapacity = []
            }
        } else {
            availableInstanceCapacity = nil
        }
        let availableVCpusDecoded = try containerValues.decode(Int.self, forKey: .availableVCpus)
        availableVCpus = availableVCpusDecoded
    }
}
