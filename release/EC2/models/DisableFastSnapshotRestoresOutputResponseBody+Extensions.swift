// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DisableFastSnapshotRestoresOutputResponseBody: Equatable {
    public let successful: [DisableFastSnapshotRestoreSuccessItem]?
    public let unsuccessful: [DisableFastSnapshotRestoreErrorItem]?
}

extension DisableFastSnapshotRestoresOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case successful = "successful"
        case unsuccessful = "unsuccessful"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.successful) {
            struct KeyVal0{struct item{}}
            let successfulWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .successful)
            if let successfulWrappedContainer = successfulWrappedContainer {
                let successfulContainer = try successfulWrappedContainer.decodeIfPresent([DisableFastSnapshotRestoreSuccessItem].self, forKey: .member)
                var successfulBuffer:[DisableFastSnapshotRestoreSuccessItem]? = nil
                if let successfulContainer = successfulContainer {
                    successfulBuffer = [DisableFastSnapshotRestoreSuccessItem]()
                    for structureContainer0 in successfulContainer {
                        successfulBuffer?.append(structureContainer0)
                    }
                }
                successful = successfulBuffer
            } else {
                successful = []
            }
        } else {
            successful = nil
        }
        if containerValues.contains(.unsuccessful) {
            struct KeyVal0{struct item{}}
            let unsuccessfulWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .unsuccessful)
            if let unsuccessfulWrappedContainer = unsuccessfulWrappedContainer {
                let unsuccessfulContainer = try unsuccessfulWrappedContainer.decodeIfPresent([DisableFastSnapshotRestoreErrorItem].self, forKey: .member)
                var unsuccessfulBuffer:[DisableFastSnapshotRestoreErrorItem]? = nil
                if let unsuccessfulContainer = unsuccessfulContainer {
                    unsuccessfulBuffer = [DisableFastSnapshotRestoreErrorItem]()
                    for structureContainer0 in unsuccessfulContainer {
                        unsuccessfulBuffer?.append(structureContainer0)
                    }
                }
                unsuccessful = unsuccessfulBuffer
            } else {
                unsuccessful = []
            }
        } else {
            unsuccessful = nil
        }
    }
}
