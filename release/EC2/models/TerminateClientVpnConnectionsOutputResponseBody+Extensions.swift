// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TerminateClientVpnConnectionsOutputResponseBody: Equatable {
    public let clientVpnEndpointId: String?
    public let username: String?
    public let connectionStatuses: [TerminateConnectionStatus]?
}

extension TerminateClientVpnConnectionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientVpnEndpointId = "clientVpnEndpointId"
        case connectionStatuses = "connectionStatuses"
        case username = "username"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientVpnEndpointIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientVpnEndpointId)
        clientVpnEndpointId = clientVpnEndpointIdDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
        if containerValues.contains(.connectionStatuses) {
            struct KeyVal0{struct item{}}
            let connectionStatusesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .connectionStatuses)
            if let connectionStatusesWrappedContainer = connectionStatusesWrappedContainer {
                let connectionStatusesContainer = try connectionStatusesWrappedContainer.decodeIfPresent([TerminateConnectionStatus].self, forKey: .member)
                var connectionStatusesBuffer:[TerminateConnectionStatus]? = nil
                if let connectionStatusesContainer = connectionStatusesContainer {
                    connectionStatusesBuffer = [TerminateConnectionStatus]()
                    for structureContainer0 in connectionStatusesContainer {
                        connectionStatusesBuffer?.append(structureContainer0)
                    }
                }
                connectionStatuses = connectionStatusesBuffer
            } else {
                connectionStatuses = []
            }
        } else {
            connectionStatuses = nil
        }
    }
}
