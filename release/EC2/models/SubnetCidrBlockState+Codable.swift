// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SubnetCidrBlockState: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case state = "state"
        case statusMessage = "statusMessage"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: Key("StatusMessage"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(SubnetCidrBlockStateCode.self, forKey: .state)
        state = stateDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
    }
}
