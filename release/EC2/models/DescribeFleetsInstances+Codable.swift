// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DescribeFleetsInstances: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceIds = "instanceIds"
        case instanceType = "instanceType"
        case launchTemplateAndOverrides = "launchTemplateAndOverrides"
        case lifecycle = "lifecycle"
        case platform = "platform"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let instanceIds = instanceIds {
            if !instanceIds.isEmpty {
                for (index0, instanceid0) in instanceIds.enumerated() {
                    var instanceIdsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("InstanceIds.\(index0.advanced(by: 1))"))
                    try instanceIdsContainer0.encode(instanceid0, forKey: Key(""))
                }
            }
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: Key("InstanceType"))
        }
        if let launchTemplateAndOverrides = launchTemplateAndOverrides {
            try container.encode(launchTemplateAndOverrides, forKey: Key("LaunchTemplateAndOverrides"))
        }
        if let lifecycle = lifecycle {
            try container.encode(lifecycle, forKey: Key("Lifecycle"))
        }
        if let platform = platform {
            try container.encode(platform, forKey: Key("Platform"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateAndOverridesDecoded = try containerValues.decodeIfPresent(LaunchTemplateAndOverridesResponse.self, forKey: .launchTemplateAndOverrides)
        launchTemplateAndOverrides = launchTemplateAndOverridesDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(InstanceLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        if containerValues.contains(.instanceIds) {
            struct KeyVal0{struct item{}}
            let instanceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instanceIds)
            if let instanceIdsWrappedContainer = instanceIdsWrappedContainer {
                let instanceIdsContainer = try instanceIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var instanceIdsBuffer:[String]? = nil
                if let instanceIdsContainer = instanceIdsContainer {
                    instanceIdsBuffer = [String]()
                    for stringContainer0 in instanceIdsContainer {
                        instanceIdsBuffer?.append(stringContainer0)
                    }
                }
                instanceIds = instanceIdsBuffer
            } else {
                instanceIds = []
            }
        } else {
            instanceIds = nil
        }
        let instanceTypeDecoded = try containerValues.decodeIfPresent(InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let platformDecoded = try containerValues.decodeIfPresent(PlatformValues.self, forKey: .platform)
        platform = platformDecoded
    }
}
