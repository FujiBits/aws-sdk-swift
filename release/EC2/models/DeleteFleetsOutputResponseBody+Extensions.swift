// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteFleetsOutputResponseBody: Equatable {
    public let successfulFleetDeletions: [DeleteFleetSuccessItem]?
    public let unsuccessfulFleetDeletions: [DeleteFleetErrorItem]?
}

extension DeleteFleetsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case successfulFleetDeletions = "successfulFleetDeletionSet"
        case unsuccessfulFleetDeletions = "unsuccessfulFleetDeletionSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.successfulFleetDeletions) {
            struct KeyVal0{struct item{}}
            let successfulFleetDeletionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .successfulFleetDeletions)
            if let successfulFleetDeletionsWrappedContainer = successfulFleetDeletionsWrappedContainer {
                let successfulFleetDeletionsContainer = try successfulFleetDeletionsWrappedContainer.decodeIfPresent([DeleteFleetSuccessItem].self, forKey: .member)
                var successfulFleetDeletionsBuffer:[DeleteFleetSuccessItem]? = nil
                if let successfulFleetDeletionsContainer = successfulFleetDeletionsContainer {
                    successfulFleetDeletionsBuffer = [DeleteFleetSuccessItem]()
                    for structureContainer0 in successfulFleetDeletionsContainer {
                        successfulFleetDeletionsBuffer?.append(structureContainer0)
                    }
                }
                successfulFleetDeletions = successfulFleetDeletionsBuffer
            } else {
                successfulFleetDeletions = []
            }
        } else {
            successfulFleetDeletions = nil
        }
        if containerValues.contains(.unsuccessfulFleetDeletions) {
            struct KeyVal0{struct item{}}
            let unsuccessfulFleetDeletionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .unsuccessfulFleetDeletions)
            if let unsuccessfulFleetDeletionsWrappedContainer = unsuccessfulFleetDeletionsWrappedContainer {
                let unsuccessfulFleetDeletionsContainer = try unsuccessfulFleetDeletionsWrappedContainer.decodeIfPresent([DeleteFleetErrorItem].self, forKey: .member)
                var unsuccessfulFleetDeletionsBuffer:[DeleteFleetErrorItem]? = nil
                if let unsuccessfulFleetDeletionsContainer = unsuccessfulFleetDeletionsContainer {
                    unsuccessfulFleetDeletionsBuffer = [DeleteFleetErrorItem]()
                    for structureContainer0 in unsuccessfulFleetDeletionsContainer {
                        unsuccessfulFleetDeletionsBuffer?.append(structureContainer0)
                    }
                }
                unsuccessfulFleetDeletions = unsuccessfulFleetDeletionsBuffer
            } else {
                unsuccessfulFleetDeletions = []
            }
        } else {
            unsuccessfulFleetDeletions = nil
        }
    }
}
