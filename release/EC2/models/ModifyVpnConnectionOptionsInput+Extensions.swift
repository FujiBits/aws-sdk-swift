// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ModifyVpnConnectionOptionsInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyVpnConnectionOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyVpnConnectionOptionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyVpnConnectionOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyVpnConnectionOptionsInput>
    public typealias MOutput = OperationOutput<ModifyVpnConnectionOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyVpnConnectionOptionsOutputError>
}

public struct ModifyVpnConnectionOptionsInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyVpnConnectionOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyVpnConnectionOptionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyVpnConnectionOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyVpnConnectionOptionsInput>
    public typealias MOutput = OperationOutput<ModifyVpnConnectionOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyVpnConnectionOptionsOutputError>
}

public struct ModifyVpnConnectionOptionsInputBodyMiddleware: Middleware {
    public let id: String = "ModifyVpnConnectionOptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyVpnConnectionOptionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyVpnConnectionOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyVpnConnectionOptionsInput>
    public typealias MOutput = OperationOutput<ModifyVpnConnectionOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyVpnConnectionOptionsOutputError>
}

extension ModifyVpnConnectionOptionsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if let localIpv4NetworkCidr = localIpv4NetworkCidr {
            try container.encode(localIpv4NetworkCidr, forKey: Key("LocalIpv4NetworkCidr"))
        }
        if let localIpv6NetworkCidr = localIpv6NetworkCidr {
            try container.encode(localIpv6NetworkCidr, forKey: Key("LocalIpv6NetworkCidr"))
        }
        if let remoteIpv4NetworkCidr = remoteIpv4NetworkCidr {
            try container.encode(remoteIpv4NetworkCidr, forKey: Key("RemoteIpv4NetworkCidr"))
        }
        if let remoteIpv6NetworkCidr = remoteIpv6NetworkCidr {
            try container.encode(remoteIpv6NetworkCidr, forKey: Key("RemoteIpv6NetworkCidr"))
        }
        if let vpnConnectionId = vpnConnectionId {
            try container.encode(vpnConnectionId, forKey: Key("VpnConnectionId"))
        }
        try container.encode("ModifyVpnConnectionOptions", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
