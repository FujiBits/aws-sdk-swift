// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCoipPoolUsageOutputResponseBody: Equatable {
    public let coipPoolId: String?
    public let coipAddressUsages: [CoipAddressUsage]?
    public let localGatewayRouteTableId: String?
}

extension GetCoipPoolUsageOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case coipAddressUsages = "coipAddressUsageSet"
        case coipPoolId = "coipPoolId"
        case localGatewayRouteTableId = "localGatewayRouteTableId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let coipPoolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .coipPoolId)
        coipPoolId = coipPoolIdDecoded
        if containerValues.contains(.coipAddressUsages) {
            struct KeyVal0{struct item{}}
            let coipAddressUsagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .coipAddressUsages)
            if let coipAddressUsagesWrappedContainer = coipAddressUsagesWrappedContainer {
                let coipAddressUsagesContainer = try coipAddressUsagesWrappedContainer.decodeIfPresent([CoipAddressUsage].self, forKey: .member)
                var coipAddressUsagesBuffer:[CoipAddressUsage]? = nil
                if let coipAddressUsagesContainer = coipAddressUsagesContainer {
                    coipAddressUsagesBuffer = [CoipAddressUsage]()
                    for structureContainer0 in coipAddressUsagesContainer {
                        coipAddressUsagesBuffer?.append(structureContainer0)
                    }
                }
                coipAddressUsages = coipAddressUsagesBuffer
            } else {
                coipAddressUsages = []
            }
        } else {
            coipAddressUsages = nil
        }
        let localGatewayRouteTableIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .localGatewayRouteTableId)
        localGatewayRouteTableId = localGatewayRouteTableIdDecoded
    }
}
