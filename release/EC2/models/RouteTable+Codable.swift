// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RouteTable: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case associations = "associationSet"
        case ownerId = "ownerId"
        case propagatingVgws = "propagatingVgwSet"
        case routeTableId = "routeTableId"
        case routes = "routeSet"
        case tags = "tagSet"
        case vpcId = "vpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let associations = associations {
            if !associations.isEmpty {
                for (index0, routetableassociation0) in associations.enumerated() {
                    var associationsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("AssociationSet.\(index0.advanced(by: 1))"))
                    try associationsContainer0.encode(routetableassociation0, forKey: Key(""))
                }
            }
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: Key("OwnerId"))
        }
        if let propagatingVgws = propagatingVgws {
            if !propagatingVgws.isEmpty {
                for (index0, propagatingvgw0) in propagatingVgws.enumerated() {
                    var propagatingVgwsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("PropagatingVgwSet.\(index0.advanced(by: 1))"))
                    try propagatingVgwsContainer0.encode(propagatingvgw0, forKey: Key(""))
                }
            }
        }
        if let routeTableId = routeTableId {
            try container.encode(routeTableId, forKey: Key("RouteTableId"))
        }
        if let routes = routes {
            if !routes.isEmpty {
                for (index0, route0) in routes.enumerated() {
                    var routesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("RouteSet.\(index0.advanced(by: 1))"))
                    try routesContainer0.encode(route0, forKey: Key(""))
                }
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: Key("VpcId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.associations) {
            struct KeyVal0{struct item{}}
            let associationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .associations)
            if let associationsWrappedContainer = associationsWrappedContainer {
                let associationsContainer = try associationsWrappedContainer.decodeIfPresent([RouteTableAssociation].self, forKey: .member)
                var associationsBuffer:[RouteTableAssociation]? = nil
                if let associationsContainer = associationsContainer {
                    associationsBuffer = [RouteTableAssociation]()
                    for structureContainer0 in associationsContainer {
                        associationsBuffer?.append(structureContainer0)
                    }
                }
                associations = associationsBuffer
            } else {
                associations = []
            }
        } else {
            associations = nil
        }
        if containerValues.contains(.propagatingVgws) {
            struct KeyVal0{struct item{}}
            let propagatingVgwsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .propagatingVgws)
            if let propagatingVgwsWrappedContainer = propagatingVgwsWrappedContainer {
                let propagatingVgwsContainer = try propagatingVgwsWrappedContainer.decodeIfPresent([PropagatingVgw].self, forKey: .member)
                var propagatingVgwsBuffer:[PropagatingVgw]? = nil
                if let propagatingVgwsContainer = propagatingVgwsContainer {
                    propagatingVgwsBuffer = [PropagatingVgw]()
                    for structureContainer0 in propagatingVgwsContainer {
                        propagatingVgwsBuffer?.append(structureContainer0)
                    }
                }
                propagatingVgws = propagatingVgwsBuffer
            } else {
                propagatingVgws = []
            }
        } else {
            propagatingVgws = nil
        }
        let routeTableIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .routeTableId)
        routeTableId = routeTableIdDecoded
        if containerValues.contains(.routes) {
            struct KeyVal0{struct item{}}
            let routesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .routes)
            if let routesWrappedContainer = routesWrappedContainer {
                let routesContainer = try routesWrappedContainer.decodeIfPresent([Route].self, forKey: .member)
                var routesBuffer:[Route]? = nil
                if let routesContainer = routesContainer {
                    routesBuffer = [Route]()
                    for structureContainer0 in routesContainer {
                        routesBuffer?.append(structureContainer0)
                    }
                }
                routes = routesBuffer
            } else {
                routes = []
            }
        } else {
            routes = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
    }
}
