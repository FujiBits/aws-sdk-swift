// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSnapshotOutputResponseBody: Equatable {
    public let dataEncryptionKeyId: String?
    public let description: String?
    public let encrypted: Bool
    public let kmsKeyId: String?
    public let ownerId: String?
    public let progress: String?
    public let snapshotId: String?
    public let startTime: Date?
    public let state: SnapshotState?
    public let stateMessage: String?
    public let volumeId: String?
    public let volumeSize: Int
    public let ownerAlias: String?
    public let outpostArn: String?
    public let tags: [Tag]?
}

extension CreateSnapshotOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dataEncryptionKeyId = "dataEncryptionKeyId"
        case description = "description"
        case encrypted = "encrypted"
        case kmsKeyId = "kmsKeyId"
        case outpostArn = "outpostArn"
        case ownerAlias = "ownerAlias"
        case ownerId = "ownerId"
        case progress = "progress"
        case snapshotId = "snapshotId"
        case startTime = "startTime"
        case state = "status"
        case stateMessage = "statusMessage"
        case tags = "tagSet"
        case volumeId = "volumeId"
        case volumeSize = "volumeSize"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataEncryptionKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataEncryptionKeyId)
        dataEncryptionKeyId = dataEncryptionKeyIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let encryptedDecoded = try containerValues.decode(Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let progressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .progress)
        progress = progressDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        var startTimeBuffer:Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let stateDecoded = try containerValues.decodeIfPresent(SnapshotState.self, forKey: .state)
        state = stateDecoded
        let stateMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateMessage)
        stateMessage = stateMessageDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let volumeSizeDecoded = try containerValues.decode(Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let ownerAliasDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerAlias)
        ownerAlias = ownerAliasDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
