// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VpnConnection: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case category = "category"
        case customerGatewayConfiguration = "customerGatewayConfiguration"
        case customerGatewayId = "customerGatewayId"
        case options = "options"
        case routes = "routes"
        case state = "state"
        case tags = "tagSet"
        case transitGatewayId = "transitGatewayId"
        case type = "type"
        case vgwTelemetry = "vgwTelemetry"
        case vpnConnectionId = "vpnConnectionId"
        case vpnGatewayId = "vpnGatewayId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let category = category {
            try container.encode(category, forKey: Key("Category"))
        }
        if let customerGatewayConfiguration = customerGatewayConfiguration {
            try container.encode(customerGatewayConfiguration, forKey: Key("CustomerGatewayConfiguration"))
        }
        if let customerGatewayId = customerGatewayId {
            try container.encode(customerGatewayId, forKey: Key("CustomerGatewayId"))
        }
        if let options = options {
            try container.encode(options, forKey: Key("Options"))
        }
        if let routes = routes {
            if !routes.isEmpty {
                for (index0, vpnstaticroute0) in routes.enumerated() {
                    var routesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Routes.\(index0.advanced(by: 1))"))
                    try routesContainer0.encode(vpnstaticroute0, forKey: Key(""))
                }
            }
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
        if let transitGatewayId = transitGatewayId {
            try container.encode(transitGatewayId, forKey: Key("TransitGatewayId"))
        }
        if let type = type {
            try container.encode(type, forKey: Key("Type"))
        }
        if let vgwTelemetry = vgwTelemetry {
            if !vgwTelemetry.isEmpty {
                for (index0, vgwtelemetry0) in vgwTelemetry.enumerated() {
                    var vgwTelemetryContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("VgwTelemetry.\(index0.advanced(by: 1))"))
                    try vgwTelemetryContainer0.encode(vgwtelemetry0, forKey: Key(""))
                }
            }
        }
        if let vpnConnectionId = vpnConnectionId {
            try container.encode(vpnConnectionId, forKey: Key("VpnConnectionId"))
        }
        if let vpnGatewayId = vpnGatewayId {
            try container.encode(vpnGatewayId, forKey: Key("VpnGatewayId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customerGatewayConfigurationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customerGatewayConfiguration)
        customerGatewayConfiguration = customerGatewayConfigurationDecoded
        let customerGatewayIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customerGatewayId)
        customerGatewayId = customerGatewayIdDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .category)
        category = categoryDecoded
        let stateDecoded = try containerValues.decodeIfPresent(VpnState.self, forKey: .state)
        state = stateDecoded
        let typeDecoded = try containerValues.decodeIfPresent(GatewayType.self, forKey: .type)
        type = typeDecoded
        let vpnConnectionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpnConnectionId)
        vpnConnectionId = vpnConnectionIdDecoded
        let vpnGatewayIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpnGatewayId)
        vpnGatewayId = vpnGatewayIdDecoded
        let transitGatewayIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transitGatewayId)
        transitGatewayId = transitGatewayIdDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(VpnConnectionOptions.self, forKey: .options)
        options = optionsDecoded
        if containerValues.contains(.routes) {
            struct KeyVal0{struct item{}}
            let routesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .routes)
            if let routesWrappedContainer = routesWrappedContainer {
                let routesContainer = try routesWrappedContainer.decodeIfPresent([VpnStaticRoute].self, forKey: .member)
                var routesBuffer:[VpnStaticRoute]? = nil
                if let routesContainer = routesContainer {
                    routesBuffer = [VpnStaticRoute]()
                    for structureContainer0 in routesContainer {
                        routesBuffer?.append(structureContainer0)
                    }
                }
                routes = routesBuffer
            } else {
                routes = []
            }
        } else {
            routes = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.vgwTelemetry) {
            struct KeyVal0{struct item{}}
            let vgwTelemetryWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .vgwTelemetry)
            if let vgwTelemetryWrappedContainer = vgwTelemetryWrappedContainer {
                let vgwTelemetryContainer = try vgwTelemetryWrappedContainer.decodeIfPresent([VgwTelemetry].self, forKey: .member)
                var vgwTelemetryBuffer:[VgwTelemetry]? = nil
                if let vgwTelemetryContainer = vgwTelemetryContainer {
                    vgwTelemetryBuffer = [VgwTelemetry]()
                    for structureContainer0 in vgwTelemetryContainer {
                        vgwTelemetryBuffer?.append(structureContainer0)
                    }
                }
                vgwTelemetry = vgwTelemetryBuffer
            } else {
                vgwTelemetry = []
            }
        } else {
            vgwTelemetry = nil
        }
    }
}
