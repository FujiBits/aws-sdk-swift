// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeImportImageTasksOutputResponseBody: Equatable {
    public let importImageTasks: [ImportImageTask]?
    public let nextToken: String?
}

extension DescribeImportImageTasksOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case importImageTasks = "importImageTaskSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.importImageTasks) {
            struct KeyVal0{struct item{}}
            let importImageTasksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .importImageTasks)
            if let importImageTasksWrappedContainer = importImageTasksWrappedContainer {
                let importImageTasksContainer = try importImageTasksWrappedContainer.decodeIfPresent([ImportImageTask].self, forKey: .member)
                var importImageTasksBuffer:[ImportImageTask]? = nil
                if let importImageTasksContainer = importImageTasksContainer {
                    importImageTasksBuffer = [ImportImageTask]()
                    for structureContainer0 in importImageTasksContainer {
                        importImageTasksBuffer?.append(structureContainer0)
                    }
                }
                importImageTasks = importImageTasksBuffer
            } else {
                importImageTasks = []
            }
        } else {
            importImageTasks = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
