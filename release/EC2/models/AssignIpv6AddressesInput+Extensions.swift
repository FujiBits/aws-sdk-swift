// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct AssignIpv6AddressesInputHeadersMiddleware: Middleware {
    public let id: String = "AssignIpv6AddressesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssignIpv6AddressesInput>,
                  next: H) -> Swift.Result<OperationOutput<AssignIpv6AddressesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssignIpv6AddressesInput>
    public typealias MOutput = OperationOutput<AssignIpv6AddressesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssignIpv6AddressesOutputError>
}

public struct AssignIpv6AddressesInputQueryItemMiddleware: Middleware {
    public let id: String = "AssignIpv6AddressesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssignIpv6AddressesInput>,
                  next: H) -> Swift.Result<OperationOutput<AssignIpv6AddressesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssignIpv6AddressesInput>
    public typealias MOutput = OperationOutput<AssignIpv6AddressesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssignIpv6AddressesOutputError>
}

public struct AssignIpv6AddressesInputBodyMiddleware: Middleware {
    public let id: String = "AssignIpv6AddressesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssignIpv6AddressesInput>,
                  next: H) -> Swift.Result<OperationOutput<AssignIpv6AddressesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssignIpv6AddressesInput>
    public typealias MOutput = OperationOutput<AssignIpv6AddressesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssignIpv6AddressesOutputError>
}

extension AssignIpv6AddressesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if ipv6AddressCount != 0 {
            try container.encode(ipv6AddressCount, forKey: Key("Ipv6AddressCount"))
        }
        if let ipv6Addresses = ipv6Addresses {
            if !ipv6Addresses.isEmpty {
                for (index0, string0) in ipv6Addresses.enumerated() {
                    var ipv6AddressesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Ipv6Addresses.\(index0.advanced(by: 1))"))
                    try ipv6AddressesContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let networkInterfaceId = networkInterfaceId {
            try container.encode(networkInterfaceId, forKey: Key("NetworkInterfaceId"))
        }
        try container.encode("AssignIpv6Addresses", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
