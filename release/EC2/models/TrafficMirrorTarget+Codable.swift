// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TrafficMirrorTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "description"
        case networkInterfaceId = "networkInterfaceId"
        case networkLoadBalancerArn = "networkLoadBalancerArn"
        case ownerId = "ownerId"
        case tags = "tagSet"
        case trafficMirrorTargetId = "trafficMirrorTargetId"
        case type = "type"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let networkInterfaceId = networkInterfaceId {
            try container.encode(networkInterfaceId, forKey: Key("NetworkInterfaceId"))
        }
        if let networkLoadBalancerArn = networkLoadBalancerArn {
            try container.encode(networkLoadBalancerArn, forKey: Key("NetworkLoadBalancerArn"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: Key("OwnerId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
        if let trafficMirrorTargetId = trafficMirrorTargetId {
            try container.encode(trafficMirrorTargetId, forKey: Key("TrafficMirrorTargetId"))
        }
        if let type = type {
            try container.encode(type, forKey: Key("Type"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficMirrorTargetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trafficMirrorTargetId)
        trafficMirrorTargetId = trafficMirrorTargetIdDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let networkLoadBalancerArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkLoadBalancerArn)
        networkLoadBalancerArn = networkLoadBalancerArnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(TrafficMirrorTargetType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
