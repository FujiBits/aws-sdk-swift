// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSnapshotAttributeOutputResponseBody: Equatable {
    public let createVolumePermissions: [CreateVolumePermission]?
    public let productCodes: [ProductCode]?
    public let snapshotId: String?
}

extension DescribeSnapshotAttributeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createVolumePermissions = "createVolumePermission"
        case productCodes = "productCodes"
        case snapshotId = "snapshotId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.createVolumePermissions) {
            struct KeyVal0{struct item{}}
            let createVolumePermissionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .createVolumePermissions)
            if let createVolumePermissionsWrappedContainer = createVolumePermissionsWrappedContainer {
                let createVolumePermissionsContainer = try createVolumePermissionsWrappedContainer.decodeIfPresent([CreateVolumePermission].self, forKey: .member)
                var createVolumePermissionsBuffer:[CreateVolumePermission]? = nil
                if let createVolumePermissionsContainer = createVolumePermissionsContainer {
                    createVolumePermissionsBuffer = [CreateVolumePermission]()
                    for structureContainer0 in createVolumePermissionsContainer {
                        createVolumePermissionsBuffer?.append(structureContainer0)
                    }
                }
                createVolumePermissions = createVolumePermissionsBuffer
            } else {
                createVolumePermissions = []
            }
        } else {
            createVolumePermissions = nil
        }
        if containerValues.contains(.productCodes) {
            struct KeyVal0{struct item{}}
            let productCodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .productCodes)
            if let productCodesWrappedContainer = productCodesWrappedContainer {
                let productCodesContainer = try productCodesWrappedContainer.decodeIfPresent([ProductCode].self, forKey: .member)
                var productCodesBuffer:[ProductCode]? = nil
                if let productCodesContainer = productCodesContainer {
                    productCodesBuffer = [ProductCode]()
                    for structureContainer0 in productCodesContainer {
                        productCodesBuffer?.append(structureContainer0)
                    }
                }
                productCodes = productCodesBuffer
            } else {
                productCodes = []
            }
        } else {
            productCodes = nil
        }
        let snapshotIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
    }
}
