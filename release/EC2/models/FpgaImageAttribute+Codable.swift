// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FpgaImageAttribute: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "description"
        case fpgaImageId = "fpgaImageId"
        case loadPermissions = "loadPermissions"
        case name = "name"
        case productCodes = "productCodes"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let fpgaImageId = fpgaImageId {
            try container.encode(fpgaImageId, forKey: Key("FpgaImageId"))
        }
        if let loadPermissions = loadPermissions {
            if !loadPermissions.isEmpty {
                for (index0, loadpermission0) in loadPermissions.enumerated() {
                    var loadPermissionsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("LoadPermissions.\(index0.advanced(by: 1))"))
                    try loadPermissionsContainer0.encode(loadpermission0, forKey: Key(""))
                }
            }
        }
        if let name = name {
            try container.encode(name, forKey: Key("Name"))
        }
        if let productCodes = productCodes {
            if !productCodes.isEmpty {
                for (index0, productcode0) in productCodes.enumerated() {
                    var productCodesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("ProductCodes.\(index0.advanced(by: 1))"))
                    try productCodesContainer0.encode(productcode0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fpgaImageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fpgaImageId)
        fpgaImageId = fpgaImageIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.loadPermissions) {
            struct KeyVal0{struct item{}}
            let loadPermissionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .loadPermissions)
            if let loadPermissionsWrappedContainer = loadPermissionsWrappedContainer {
                let loadPermissionsContainer = try loadPermissionsWrappedContainer.decodeIfPresent([LoadPermission].self, forKey: .member)
                var loadPermissionsBuffer:[LoadPermission]? = nil
                if let loadPermissionsContainer = loadPermissionsContainer {
                    loadPermissionsBuffer = [LoadPermission]()
                    for structureContainer0 in loadPermissionsContainer {
                        loadPermissionsBuffer?.append(structureContainer0)
                    }
                }
                loadPermissions = loadPermissionsBuffer
            } else {
                loadPermissions = []
            }
        } else {
            loadPermissions = nil
        }
        if containerValues.contains(.productCodes) {
            struct KeyVal0{struct item{}}
            let productCodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .productCodes)
            if let productCodesWrappedContainer = productCodesWrappedContainer {
                let productCodesContainer = try productCodesWrappedContainer.decodeIfPresent([ProductCode].self, forKey: .member)
                var productCodesBuffer:[ProductCode]? = nil
                if let productCodesContainer = productCodesContainer {
                    productCodesBuffer = [ProductCode]()
                    for structureContainer0 in productCodesContainer {
                        productCodesBuffer?.append(structureContainer0)
                    }
                }
                productCodes = productCodesBuffer
            } else {
                productCodes = []
            }
        } else {
            productCodes = nil
        }
    }
}
