// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ModifySpotFleetRequestInputHeadersMiddleware: Middleware {
    public let id: String = "ModifySpotFleetRequestInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifySpotFleetRequestInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifySpotFleetRequestOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifySpotFleetRequestInput>
    public typealias MOutput = OperationOutput<ModifySpotFleetRequestOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifySpotFleetRequestOutputError>
}

public struct ModifySpotFleetRequestInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifySpotFleetRequestInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifySpotFleetRequestInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifySpotFleetRequestOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifySpotFleetRequestInput>
    public typealias MOutput = OperationOutput<ModifySpotFleetRequestOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifySpotFleetRequestOutputError>
}

public struct ModifySpotFleetRequestInputBodyMiddleware: Middleware {
    public let id: String = "ModifySpotFleetRequestInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifySpotFleetRequestInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifySpotFleetRequestOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifySpotFleetRequestInput>
    public typealias MOutput = OperationOutput<ModifySpotFleetRequestOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifySpotFleetRequestOutputError>
}

extension ModifySpotFleetRequestInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let excessCapacityTerminationPolicy = excessCapacityTerminationPolicy {
            try container.encode(excessCapacityTerminationPolicy, forKey: Key("ExcessCapacityTerminationPolicy"))
        }
        if let launchTemplateConfigs = launchTemplateConfigs {
            if !launchTemplateConfigs.isEmpty {
                for (index0, launchtemplateconfig0) in launchTemplateConfigs.enumerated() {
                    var launchTemplateConfigsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("LaunchTemplateConfig.\(index0.advanced(by: 1))"))
                    try launchTemplateConfigsContainer0.encode(launchtemplateconfig0, forKey: Key(""))
                }
            }
        }
        if onDemandTargetCapacity != 0 {
            try container.encode(onDemandTargetCapacity, forKey: Key("OnDemandTargetCapacity"))
        }
        if let spotFleetRequestId = spotFleetRequestId {
            try container.encode(spotFleetRequestId, forKey: Key("SpotFleetRequestId"))
        }
        if targetCapacity != 0 {
            try container.encode(targetCapacity, forKey: Key("TargetCapacity"))
        }
        try container.encode("ModifySpotFleetRequest", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
