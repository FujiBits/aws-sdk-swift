// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceStatusDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case impairedSince = "impairedSince"
        case name = "name"
        case status = "status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let impairedSince = impairedSince {
            try container.encode(TimestampWrapper(impairedSince, format: .dateTime), forKey: Key("ImpairedSince"))
        }
        if let name = name {
            try container.encode(name, forKey: Key("Name"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let impairedSinceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .impairedSince)
        var impairedSinceBuffer:Date? = nil
        if let impairedSinceDecoded = impairedSinceDecoded {
            impairedSinceBuffer = try TimestampWrapperDecoder.parseDateStringValue(impairedSinceDecoded, format: .dateTime)
        }
        impairedSince = impairedSinceBuffer
        let nameDecoded = try containerValues.decodeIfPresent(StatusName.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(StatusType.self, forKey: .status)
        status = statusDecoded
    }
}
