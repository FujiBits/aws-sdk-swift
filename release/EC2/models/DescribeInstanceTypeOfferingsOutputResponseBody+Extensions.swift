// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInstanceTypeOfferingsOutputResponseBody: Equatable {
    public let instanceTypeOfferings: [InstanceTypeOffering]?
    public let nextToken: String?
}

extension DescribeInstanceTypeOfferingsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceTypeOfferings = "instanceTypeOfferingSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceTypeOfferings) {
            struct KeyVal0{struct item{}}
            let instanceTypeOfferingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instanceTypeOfferings)
            if let instanceTypeOfferingsWrappedContainer = instanceTypeOfferingsWrappedContainer {
                let instanceTypeOfferingsContainer = try instanceTypeOfferingsWrappedContainer.decodeIfPresent([InstanceTypeOffering].self, forKey: .member)
                var instanceTypeOfferingsBuffer:[InstanceTypeOffering]? = nil
                if let instanceTypeOfferingsContainer = instanceTypeOfferingsContainer {
                    instanceTypeOfferingsBuffer = [InstanceTypeOffering]()
                    for structureContainer0 in instanceTypeOfferingsContainer {
                        instanceTypeOfferingsBuffer?.append(structureContainer0)
                    }
                }
                instanceTypeOfferings = instanceTypeOfferingsBuffer
            } else {
                instanceTypeOfferings = []
            }
        } else {
            instanceTypeOfferings = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
