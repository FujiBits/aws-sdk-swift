// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TerminateInstancesOutputResponseBody: Equatable {
    public let terminatingInstances: [InstanceStateChange]?
}

extension TerminateInstancesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case terminatingInstances = "instancesSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.terminatingInstances) {
            struct KeyVal0{struct item{}}
            let terminatingInstancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .terminatingInstances)
            if let terminatingInstancesWrappedContainer = terminatingInstancesWrappedContainer {
                let terminatingInstancesContainer = try terminatingInstancesWrappedContainer.decodeIfPresent([InstanceStateChange].self, forKey: .member)
                var terminatingInstancesBuffer:[InstanceStateChange]? = nil
                if let terminatingInstancesContainer = terminatingInstancesContainer {
                    terminatingInstancesBuffer = [InstanceStateChange]()
                    for structureContainer0 in terminatingInstancesContainer {
                        terminatingInstancesBuffer?.append(structureContainer0)
                    }
                }
                terminatingInstances = terminatingInstancesBuffer
            } else {
                terminatingInstances = []
            }
        } else {
            terminatingInstances = nil
        }
    }
}
