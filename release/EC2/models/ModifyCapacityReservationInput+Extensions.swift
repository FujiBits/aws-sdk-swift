// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ModifyCapacityReservationInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyCapacityReservationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyCapacityReservationInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyCapacityReservationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyCapacityReservationInput>
    public typealias MOutput = OperationOutput<ModifyCapacityReservationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyCapacityReservationOutputError>
}

public struct ModifyCapacityReservationInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyCapacityReservationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyCapacityReservationInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyCapacityReservationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyCapacityReservationInput>
    public typealias MOutput = OperationOutput<ModifyCapacityReservationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyCapacityReservationOutputError>
}

public struct ModifyCapacityReservationInputBodyMiddleware: Middleware {
    public let id: String = "ModifyCapacityReservationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyCapacityReservationInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyCapacityReservationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyCapacityReservationInput>
    public typealias MOutput = OperationOutput<ModifyCapacityReservationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyCapacityReservationOutputError>
}

extension ModifyCapacityReservationInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if accept != false {
            try container.encode(accept, forKey: Key("Accept"))
        }
        if let capacityReservationId = capacityReservationId {
            try container.encode(capacityReservationId, forKey: Key("CapacityReservationId"))
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if let endDate = endDate {
            try container.encode(TimestampWrapper(endDate, format: .dateTime), forKey: Key("EndDate"))
        }
        if let endDateType = endDateType {
            try container.encode(endDateType, forKey: Key("EndDateType"))
        }
        if instanceCount != 0 {
            try container.encode(instanceCount, forKey: Key("InstanceCount"))
        }
        try container.encode("ModifyCapacityReservation", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
