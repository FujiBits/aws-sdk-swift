// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransitGatewayMulticastDomain: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "creationTime"
        case options = "options"
        case ownerId = "ownerId"
        case state = "state"
        case tags = "tagSet"
        case transitGatewayId = "transitGatewayId"
        case transitGatewayMulticastDomainArn = "transitGatewayMulticastDomainArn"
        case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let creationTime = creationTime {
            try container.encode(TimestampWrapper(creationTime, format: .dateTime), forKey: Key("CreationTime"))
        }
        if let options = options {
            try container.encode(options, forKey: Key("Options"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: Key("OwnerId"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
        if let transitGatewayId = transitGatewayId {
            try container.encode(transitGatewayId, forKey: Key("TransitGatewayId"))
        }
        if let transitGatewayMulticastDomainArn = transitGatewayMulticastDomainArn {
            try container.encode(transitGatewayMulticastDomainArn, forKey: Key("TransitGatewayMulticastDomainArn"))
        }
        if let transitGatewayMulticastDomainId = transitGatewayMulticastDomainId {
            try container.encode(transitGatewayMulticastDomainId, forKey: Key("TransitGatewayMulticastDomainId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transitGatewayMulticastDomainIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transitGatewayMulticastDomainId)
        transitGatewayMulticastDomainId = transitGatewayMulticastDomainIdDecoded
        let transitGatewayIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transitGatewayId)
        transitGatewayId = transitGatewayIdDecoded
        let transitGatewayMulticastDomainArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transitGatewayMulticastDomainArn)
        transitGatewayMulticastDomainArn = transitGatewayMulticastDomainArnDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(TransitGatewayMulticastDomainOptions.self, forKey: .options)
        options = optionsDecoded
        let stateDecoded = try containerValues.decodeIfPresent(TransitGatewayMulticastDomainState.self, forKey: .state)
        state = stateDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationTime)
        var creationTimeBuffer:Date? = nil
        if let creationTimeDecoded = creationTimeDecoded {
            creationTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(creationTimeDecoded, format: .dateTime)
        }
        creationTime = creationTimeBuffer
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
