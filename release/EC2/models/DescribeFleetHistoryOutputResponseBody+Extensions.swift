// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeFleetHistoryOutputResponseBody: Equatable {
    public let historyRecords: [HistoryRecordEntry]?
    public let lastEvaluatedTime: Date?
    public let nextToken: String?
    public let fleetId: String?
    public let startTime: Date?
}

extension DescribeFleetHistoryOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fleetId = "fleetId"
        case historyRecords = "historyRecordSet"
        case lastEvaluatedTime = "lastEvaluatedTime"
        case nextToken = "nextToken"
        case startTime = "startTime"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.historyRecords) {
            struct KeyVal0{struct item{}}
            let historyRecordsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .historyRecords)
            if let historyRecordsWrappedContainer = historyRecordsWrappedContainer {
                let historyRecordsContainer = try historyRecordsWrappedContainer.decodeIfPresent([HistoryRecordEntry].self, forKey: .member)
                var historyRecordsBuffer:[HistoryRecordEntry]? = nil
                if let historyRecordsContainer = historyRecordsContainer {
                    historyRecordsBuffer = [HistoryRecordEntry]()
                    for structureContainer0 in historyRecordsContainer {
                        historyRecordsBuffer?.append(structureContainer0)
                    }
                }
                historyRecords = historyRecordsBuffer
            } else {
                historyRecords = []
            }
        } else {
            historyRecords = nil
        }
        let lastEvaluatedTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastEvaluatedTime)
        var lastEvaluatedTimeBuffer:Date? = nil
        if let lastEvaluatedTimeDecoded = lastEvaluatedTimeDecoded {
            lastEvaluatedTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(lastEvaluatedTimeDecoded, format: .dateTime)
        }
        lastEvaluatedTime = lastEvaluatedTimeBuffer
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        var startTimeBuffer:Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
    }
}
