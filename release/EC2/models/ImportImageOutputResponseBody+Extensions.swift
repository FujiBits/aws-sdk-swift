// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportImageOutputResponseBody: Equatable {
    public let architecture: String?
    public let description: String?
    public let encrypted: Bool
    public let hypervisor: String?
    public let imageId: String?
    public let importTaskId: String?
    public let kmsKeyId: String?
    public let licenseType: String?
    public let platform: String?
    public let progress: String?
    public let snapshotDetails: [SnapshotDetail]?
    public let status: String?
    public let statusMessage: String?
    public let licenseSpecifications: [ImportImageLicenseConfigurationResponse]?
    public let tags: [Tag]?
}

extension ImportImageOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case architecture = "architecture"
        case description = "description"
        case encrypted = "encrypted"
        case hypervisor = "hypervisor"
        case imageId = "imageId"
        case importTaskId = "importTaskId"
        case kmsKeyId = "kmsKeyId"
        case licenseSpecifications = "licenseSpecifications"
        case licenseType = "licenseType"
        case platform = "platform"
        case progress = "progress"
        case snapshotDetails = "snapshotDetailSet"
        case status = "status"
        case statusMessage = "statusMessage"
        case tags = "tagSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let architectureDecoded = try containerValues.decodeIfPresent(String.self, forKey: .architecture)
        architecture = architectureDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let encryptedDecoded = try containerValues.decode(Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let hypervisorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hypervisor)
        hypervisor = hypervisorDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let importTaskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .importTaskId)
        importTaskId = importTaskIdDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let licenseTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseType)
        licenseType = licenseTypeDecoded
        let platformDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platform)
        platform = platformDecoded
        let progressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .progress)
        progress = progressDecoded
        if containerValues.contains(.snapshotDetails) {
            struct KeyVal0{struct item{}}
            let snapshotDetailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .snapshotDetails)
            if let snapshotDetailsWrappedContainer = snapshotDetailsWrappedContainer {
                let snapshotDetailsContainer = try snapshotDetailsWrappedContainer.decodeIfPresent([SnapshotDetail].self, forKey: .member)
                var snapshotDetailsBuffer:[SnapshotDetail]? = nil
                if let snapshotDetailsContainer = snapshotDetailsContainer {
                    snapshotDetailsBuffer = [SnapshotDetail]()
                    for structureContainer0 in snapshotDetailsContainer {
                        snapshotDetailsBuffer?.append(structureContainer0)
                    }
                }
                snapshotDetails = snapshotDetailsBuffer
            } else {
                snapshotDetails = []
            }
        } else {
            snapshotDetails = nil
        }
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        if containerValues.contains(.licenseSpecifications) {
            struct KeyVal0{struct item{}}
            let licenseSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .licenseSpecifications)
            if let licenseSpecificationsWrappedContainer = licenseSpecificationsWrappedContainer {
                let licenseSpecificationsContainer = try licenseSpecificationsWrappedContainer.decodeIfPresent([ImportImageLicenseConfigurationResponse].self, forKey: .member)
                var licenseSpecificationsBuffer:[ImportImageLicenseConfigurationResponse]? = nil
                if let licenseSpecificationsContainer = licenseSpecificationsContainer {
                    licenseSpecificationsBuffer = [ImportImageLicenseConfigurationResponse]()
                    for structureContainer0 in licenseSpecificationsContainer {
                        licenseSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                licenseSpecifications = licenseSpecificationsBuffer
            } else {
                licenseSpecifications = []
            }
        } else {
            licenseSpecifications = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
