// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BundleTask: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bundleId = "bundleId"
        case bundleTaskError = "error"
        case instanceId = "instanceId"
        case progress = "progress"
        case startTime = "startTime"
        case state = "state"
        case storage = "storage"
        case updateTime = "updateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let bundleId = bundleId {
            try container.encode(bundleId, forKey: Key("BundleId"))
        }
        if let bundleTaskError = bundleTaskError {
            try container.encode(bundleTaskError, forKey: Key("Error"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let progress = progress {
            try container.encode(progress, forKey: Key("Progress"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("StartTime"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
        if let storage = storage {
            try container.encode(storage, forKey: Key("Storage"))
        }
        if let updateTime = updateTime {
            try container.encode(TimestampWrapper(updateTime, format: .dateTime), forKey: Key("UpdateTime"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let bundleTaskErrorDecoded = try containerValues.decodeIfPresent(BundleTaskError.self, forKey: .bundleTaskError)
        bundleTaskError = bundleTaskErrorDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let progressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .progress)
        progress = progressDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startTime)
        var startTimeBuffer:Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let stateDecoded = try containerValues.decodeIfPresent(BundleTaskState.self, forKey: .state)
        state = stateDecoded
        let storageDecoded = try containerValues.decodeIfPresent(Storage.self, forKey: .storage)
        storage = storageDecoded
        let updateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updateTime)
        var updateTimeBuffer:Date? = nil
        if let updateTimeDecoded = updateTimeDecoded {
            updateTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(updateTimeDecoded, format: .dateTime)
        }
        updateTime = updateTimeBuffer
    }
}
