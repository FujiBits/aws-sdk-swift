// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DhcpOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dhcpConfigurations = "dhcpConfigurationSet"
        case dhcpOptionsId = "dhcpOptionsId"
        case ownerId = "ownerId"
        case tags = "tagSet"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let dhcpConfigurations = dhcpConfigurations {
            if !dhcpConfigurations.isEmpty {
                for (index0, dhcpconfiguration0) in dhcpConfigurations.enumerated() {
                    var dhcpConfigurationsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("DhcpConfigurationSet.\(index0.advanced(by: 1))"))
                    try dhcpConfigurationsContainer0.encode(dhcpconfiguration0, forKey: Key(""))
                }
            }
        }
        if let dhcpOptionsId = dhcpOptionsId {
            try container.encode(dhcpOptionsId, forKey: Key("DhcpOptionsId"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: Key("OwnerId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.dhcpConfigurations) {
            struct KeyVal0{struct item{}}
            let dhcpConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .dhcpConfigurations)
            if let dhcpConfigurationsWrappedContainer = dhcpConfigurationsWrappedContainer {
                let dhcpConfigurationsContainer = try dhcpConfigurationsWrappedContainer.decodeIfPresent([DhcpConfiguration].self, forKey: .member)
                var dhcpConfigurationsBuffer:[DhcpConfiguration]? = nil
                if let dhcpConfigurationsContainer = dhcpConfigurationsContainer {
                    dhcpConfigurationsBuffer = [DhcpConfiguration]()
                    for structureContainer0 in dhcpConfigurationsContainer {
                        dhcpConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                dhcpConfigurations = dhcpConfigurationsBuffer
            } else {
                dhcpConfigurations = []
            }
        } else {
            dhcpConfigurations = nil
        }
        let dhcpOptionsIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dhcpOptionsId)
        dhcpOptionsId = dhcpOptionsIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
