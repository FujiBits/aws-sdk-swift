// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeEgressOnlyInternetGatewaysOutputResponseBody: Equatable {
    public let egressOnlyInternetGateways: [EgressOnlyInternetGateway]?
    public let nextToken: String?
}

extension DescribeEgressOnlyInternetGatewaysOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case egressOnlyInternetGateways = "egressOnlyInternetGatewaySet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.egressOnlyInternetGateways) {
            struct KeyVal0{struct item{}}
            let egressOnlyInternetGatewaysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .egressOnlyInternetGateways)
            if let egressOnlyInternetGatewaysWrappedContainer = egressOnlyInternetGatewaysWrappedContainer {
                let egressOnlyInternetGatewaysContainer = try egressOnlyInternetGatewaysWrappedContainer.decodeIfPresent([EgressOnlyInternetGateway].self, forKey: .member)
                var egressOnlyInternetGatewaysBuffer:[EgressOnlyInternetGateway]? = nil
                if let egressOnlyInternetGatewaysContainer = egressOnlyInternetGatewaysContainer {
                    egressOnlyInternetGatewaysBuffer = [EgressOnlyInternetGateway]()
                    for structureContainer0 in egressOnlyInternetGatewaysContainer {
                        egressOnlyInternetGatewaysBuffer?.append(structureContainer0)
                    }
                }
                egressOnlyInternetGateways = egressOnlyInternetGatewaysBuffer
            } else {
                egressOnlyInternetGateways = []
            }
        } else {
            egressOnlyInternetGateways = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
