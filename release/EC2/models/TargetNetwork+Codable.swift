// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TargetNetwork: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case associationId = "associationId"
        case clientVpnEndpointId = "clientVpnEndpointId"
        case securityGroups = "securityGroups"
        case status = "status"
        case targetNetworkId = "targetNetworkId"
        case vpcId = "vpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let associationId = associationId {
            try container.encode(associationId, forKey: Key("AssociationId"))
        }
        if let clientVpnEndpointId = clientVpnEndpointId {
            try container.encode(clientVpnEndpointId, forKey: Key("ClientVpnEndpointId"))
        }
        if let securityGroups = securityGroups {
            if !securityGroups.isEmpty {
                for (index0, string0) in securityGroups.enumerated() {
                    var securityGroupsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("SecurityGroups.\(index0.advanced(by: 1))"))
                    try securityGroupsContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let targetNetworkId = targetNetworkId {
            try container.encode(targetNetworkId, forKey: Key("TargetNetworkId"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: Key("VpcId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let targetNetworkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetNetworkId)
        targetNetworkId = targetNetworkIdDecoded
        let clientVpnEndpointIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientVpnEndpointId)
        clientVpnEndpointId = clientVpnEndpointIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AssociationStatus.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.securityGroups) {
            struct KeyVal0{struct item{}}
            let securityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .securityGroups)
            if let securityGroupsWrappedContainer = securityGroupsWrappedContainer {
                let securityGroupsContainer = try securityGroupsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var securityGroupsBuffer:[String]? = nil
                if let securityGroupsContainer = securityGroupsContainer {
                    securityGroupsBuffer = [String]()
                    for stringContainer0 in securityGroupsContainer {
                        securityGroupsBuffer?.append(stringContainer0)
                    }
                }
                securityGroups = securityGroupsBuffer
            } else {
                securityGroups = []
            }
        } else {
            securityGroups = nil
        }
    }
}
