// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VolumeStatusEvent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "description"
        case eventId = "eventId"
        case eventType = "eventType"
        case instanceId = "instanceId"
        case notAfter = "notAfter"
        case notBefore = "notBefore"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let eventId = eventId {
            try container.encode(eventId, forKey: Key("EventId"))
        }
        if let eventType = eventType {
            try container.encode(eventType, forKey: Key("EventType"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let notAfter = notAfter {
            try container.encode(TimestampWrapper(notAfter, format: .dateTime), forKey: Key("NotAfter"))
        }
        if let notBefore = notBefore {
            try container.encode(TimestampWrapper(notBefore, format: .dateTime), forKey: Key("NotBefore"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let notAfterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notAfter)
        var notAfterBuffer:Date? = nil
        if let notAfterDecoded = notAfterDecoded {
            notAfterBuffer = try TimestampWrapperDecoder.parseDateStringValue(notAfterDecoded, format: .dateTime)
        }
        notAfter = notAfterBuffer
        let notBeforeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notBefore)
        var notBeforeBuffer:Date? = nil
        if let notBeforeDecoded = notBeforeDecoded {
            notBeforeBuffer = try TimestampWrapperDecoder.parseDateStringValue(notBeforeDecoded, format: .dateTime)
        }
        notBefore = notBeforeBuffer
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
    }
}
