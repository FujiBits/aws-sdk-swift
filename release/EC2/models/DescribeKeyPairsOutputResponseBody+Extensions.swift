// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeKeyPairsOutputResponseBody: Equatable {
    public let keyPairs: [KeyPairInfo]?
}

extension DescribeKeyPairsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case keyPairs = "keySet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.keyPairs) {
            struct KeyVal0{struct item{}}
            let keyPairsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .keyPairs)
            if let keyPairsWrappedContainer = keyPairsWrappedContainer {
                let keyPairsContainer = try keyPairsWrappedContainer.decodeIfPresent([KeyPairInfo].self, forKey: .member)
                var keyPairsBuffer:[KeyPairInfo]? = nil
                if let keyPairsContainer = keyPairsContainer {
                    keyPairsBuffer = [KeyPairInfo]()
                    for structureContainer0 in keyPairsContainer {
                        keyPairsBuffer?.append(structureContainer0)
                    }
                }
                keyPairs = keyPairsBuffer
            } else {
                keyPairs = []
            }
        } else {
            keyPairs = nil
        }
    }
}
