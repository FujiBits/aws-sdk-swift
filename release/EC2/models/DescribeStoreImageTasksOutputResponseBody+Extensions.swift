// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeStoreImageTasksOutputResponseBody: Equatable {
    public let storeImageTaskResults: [StoreImageTaskResult]?
    public let nextToken: String?
}

extension DescribeStoreImageTasksOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case storeImageTaskResults = "storeImageTaskResultSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.storeImageTaskResults) {
            struct KeyVal0{struct item{}}
            let storeImageTaskResultsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .storeImageTaskResults)
            if let storeImageTaskResultsWrappedContainer = storeImageTaskResultsWrappedContainer {
                let storeImageTaskResultsContainer = try storeImageTaskResultsWrappedContainer.decodeIfPresent([StoreImageTaskResult].self, forKey: .member)
                var storeImageTaskResultsBuffer:[StoreImageTaskResult]? = nil
                if let storeImageTaskResultsContainer = storeImageTaskResultsContainer {
                    storeImageTaskResultsBuffer = [StoreImageTaskResult]()
                    for structureContainer0 in storeImageTaskResultsContainer {
                        storeImageTaskResultsBuffer?.append(structureContainer0)
                    }
                }
                storeImageTaskResults = storeImageTaskResultsBuffer
            } else {
                storeImageTaskResults = []
            }
        } else {
            storeImageTaskResults = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
