// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNetworkInterfaceAttributeOutputResponseBody: Equatable {
    public let attachment: NetworkInterfaceAttachment?
    public let description: AttributeValue?
    public let groups: [GroupIdentifier]?
    public let networkInterfaceId: String?
    public let sourceDestCheck: AttributeBooleanValue?
}

extension DescribeNetworkInterfaceAttributeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attachment = "attachment"
        case description = "description"
        case groups = "groupSet"
        case networkInterfaceId = "networkInterfaceId"
        case sourceDestCheck = "sourceDestCheck"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachmentDecoded = try containerValues.decodeIfPresent(NetworkInterfaceAttachment.self, forKey: .attachment)
        attachment = attachmentDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(AttributeValue.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.groups) {
            struct KeyVal0{struct item{}}
            let groupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .groups)
            if let groupsWrappedContainer = groupsWrappedContainer {
                let groupsContainer = try groupsWrappedContainer.decodeIfPresent([GroupIdentifier].self, forKey: .member)
                var groupsBuffer:[GroupIdentifier]? = nil
                if let groupsContainer = groupsContainer {
                    groupsBuffer = [GroupIdentifier]()
                    for structureContainer0 in groupsContainer {
                        groupsBuffer?.append(structureContainer0)
                    }
                }
                groups = groupsBuffer
            } else {
                groups = []
            }
        } else {
            groups = nil
        }
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let sourceDestCheckDecoded = try containerValues.decodeIfPresent(AttributeBooleanValue.self, forKey: .sourceDestCheck)
        sourceDestCheck = sourceDestCheckDecoded
    }
}
