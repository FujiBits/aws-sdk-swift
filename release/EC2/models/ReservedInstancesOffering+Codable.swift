// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReservedInstancesOffering: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone = "availabilityZone"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case fixedPrice = "fixedPrice"
        case instanceTenancy = "instanceTenancy"
        case instanceType = "instanceType"
        case marketplace = "marketplace"
        case offeringClass = "offeringClass"
        case offeringType = "offeringType"
        case pricingDetails = "pricingDetailsSet"
        case productDescription = "productDescription"
        case recurringCharges = "recurringCharges"
        case reservedInstancesOfferingId = "reservedInstancesOfferingId"
        case scope = "scope"
        case usagePrice = "usagePrice"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: Key("AvailabilityZone"))
        }
        if let currencyCode = currencyCode {
            try container.encode(currencyCode, forKey: Key("CurrencyCode"))
        }
        if duration != 0 {
            try container.encode(duration, forKey: Key("Duration"))
        }
        if fixedPrice != 0.0 {
            try container.encode(String(fixedPrice), forKey: Key("FixedPrice"))
        }
        if let instanceTenancy = instanceTenancy {
            try container.encode(instanceTenancy, forKey: Key("InstanceTenancy"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: Key("InstanceType"))
        }
        if marketplace != false {
            try container.encode(marketplace, forKey: Key("Marketplace"))
        }
        if let offeringClass = offeringClass {
            try container.encode(offeringClass, forKey: Key("OfferingClass"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: Key("OfferingType"))
        }
        if let pricingDetails = pricingDetails {
            if !pricingDetails.isEmpty {
                for (index0, pricingdetail0) in pricingDetails.enumerated() {
                    var pricingDetailsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("PricingDetailsSet.\(index0.advanced(by: 1))"))
                    try pricingDetailsContainer0.encode(pricingdetail0, forKey: Key(""))
                }
            }
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: Key("ProductDescription"))
        }
        if let recurringCharges = recurringCharges {
            if !recurringCharges.isEmpty {
                for (index0, recurringcharge0) in recurringCharges.enumerated() {
                    var recurringChargesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("RecurringCharges.\(index0.advanced(by: 1))"))
                    try recurringChargesContainer0.encode(recurringcharge0, forKey: Key(""))
                }
            }
        }
        if let reservedInstancesOfferingId = reservedInstancesOfferingId {
            try container.encode(reservedInstancesOfferingId, forKey: Key("ReservedInstancesOfferingId"))
        }
        if let scope = scope {
            try container.encode(scope, forKey: Key("Scope"))
        }
        if usagePrice != 0.0 {
            try container.encode(String(usagePrice), forKey: Key("UsagePrice"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let fixedPriceDecoded = try containerValues.decode(Float.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let productDescriptionDecoded = try containerValues.decodeIfPresent(RIProductDescription.self, forKey: .productDescription)
        productDescription = productDescriptionDecoded
        let reservedInstancesOfferingIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reservedInstancesOfferingId)
        reservedInstancesOfferingId = reservedInstancesOfferingIdDecoded
        let usagePriceDecoded = try containerValues.decode(Float.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(CurrencyCodeValues.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let instanceTenancyDecoded = try containerValues.decodeIfPresent(Tenancy.self, forKey: .instanceTenancy)
        instanceTenancy = instanceTenancyDecoded
        let marketplaceDecoded = try containerValues.decode(Bool.self, forKey: .marketplace)
        marketplace = marketplaceDecoded
        let offeringClassDecoded = try containerValues.decodeIfPresent(OfferingClassType.self, forKey: .offeringClass)
        offeringClass = offeringClassDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(OfferingTypeValues.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        if containerValues.contains(.pricingDetails) {
            struct KeyVal0{struct item{}}
            let pricingDetailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .pricingDetails)
            if let pricingDetailsWrappedContainer = pricingDetailsWrappedContainer {
                let pricingDetailsContainer = try pricingDetailsWrappedContainer.decodeIfPresent([PricingDetail].self, forKey: .member)
                var pricingDetailsBuffer:[PricingDetail]? = nil
                if let pricingDetailsContainer = pricingDetailsContainer {
                    pricingDetailsBuffer = [PricingDetail]()
                    for structureContainer0 in pricingDetailsContainer {
                        pricingDetailsBuffer?.append(structureContainer0)
                    }
                }
                pricingDetails = pricingDetailsBuffer
            } else {
                pricingDetails = []
            }
        } else {
            pricingDetails = nil
        }
        if containerValues.contains(.recurringCharges) {
            struct KeyVal0{struct item{}}
            let recurringChargesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .recurringCharges)
            if let recurringChargesWrappedContainer = recurringChargesWrappedContainer {
                let recurringChargesContainer = try recurringChargesWrappedContainer.decodeIfPresent([RecurringCharge].self, forKey: .member)
                var recurringChargesBuffer:[RecurringCharge]? = nil
                if let recurringChargesContainer = recurringChargesContainer {
                    recurringChargesBuffer = [RecurringCharge]()
                    for structureContainer0 in recurringChargesContainer {
                        recurringChargesBuffer?.append(structureContainer0)
                    }
                }
                recurringCharges = recurringChargesBuffer
            } else {
                recurringCharges = []
            }
        } else {
            recurringCharges = nil
        }
        let scopeDecoded = try containerValues.decodeIfPresent(Scope.self, forKey: .scope)
        scope = scopeDecoded
    }
}
