// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AddressAttribute: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allocationId = "allocationId"
        case ptrRecord = "ptrRecord"
        case ptrRecordUpdate = "ptrRecordUpdate"
        case publicIp = "publicIp"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let allocationId = allocationId {
            try container.encode(allocationId, forKey: Key("AllocationId"))
        }
        if let ptrRecord = ptrRecord {
            try container.encode(ptrRecord, forKey: Key("PtrRecord"))
        }
        if let ptrRecordUpdate = ptrRecordUpdate {
            try container.encode(ptrRecordUpdate, forKey: Key("PtrRecordUpdate"))
        }
        if let publicIp = publicIp {
            try container.encode(publicIp, forKey: Key("PublicIp"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publicIpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .publicIp)
        publicIp = publicIpDecoded
        let allocationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .allocationId)
        allocationId = allocationIdDecoded
        let ptrRecordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ptrRecord)
        ptrRecord = ptrRecordDecoded
        let ptrRecordUpdateDecoded = try containerValues.decodeIfPresent(PtrUpdateStatus.self, forKey: .ptrRecordUpdate)
        ptrRecordUpdate = ptrRecordUpdateDecoded
    }
}
