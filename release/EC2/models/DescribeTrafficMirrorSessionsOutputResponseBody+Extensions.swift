// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTrafficMirrorSessionsOutputResponseBody: Equatable {
    public let trafficMirrorSessions: [TrafficMirrorSession]?
    public let nextToken: String?
}

extension DescribeTrafficMirrorSessionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case trafficMirrorSessions = "trafficMirrorSessionSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.trafficMirrorSessions) {
            struct KeyVal0{struct item{}}
            let trafficMirrorSessionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .trafficMirrorSessions)
            if let trafficMirrorSessionsWrappedContainer = trafficMirrorSessionsWrappedContainer {
                let trafficMirrorSessionsContainer = try trafficMirrorSessionsWrappedContainer.decodeIfPresent([TrafficMirrorSession].self, forKey: .member)
                var trafficMirrorSessionsBuffer:[TrafficMirrorSession]? = nil
                if let trafficMirrorSessionsContainer = trafficMirrorSessionsContainer {
                    trafficMirrorSessionsBuffer = [TrafficMirrorSession]()
                    for structureContainer0 in trafficMirrorSessionsContainer {
                        trafficMirrorSessionsBuffer?.append(structureContainer0)
                    }
                }
                trafficMirrorSessions = trafficMirrorSessionsBuffer
            } else {
                trafficMirrorSessions = []
            }
        } else {
            trafficMirrorSessions = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
