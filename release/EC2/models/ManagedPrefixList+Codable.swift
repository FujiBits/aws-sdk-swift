// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ManagedPrefixList: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addressFamily = "addressFamily"
        case maxEntries = "maxEntries"
        case ownerId = "ownerId"
        case prefixListArn = "prefixListArn"
        case prefixListId = "prefixListId"
        case prefixListName = "prefixListName"
        case state = "state"
        case stateMessage = "stateMessage"
        case tags = "tagSet"
        case version = "version"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let addressFamily = addressFamily {
            try container.encode(addressFamily, forKey: Key("AddressFamily"))
        }
        if maxEntries != 0 {
            try container.encode(maxEntries, forKey: Key("MaxEntries"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: Key("OwnerId"))
        }
        if let prefixListArn = prefixListArn {
            try container.encode(prefixListArn, forKey: Key("PrefixListArn"))
        }
        if let prefixListId = prefixListId {
            try container.encode(prefixListId, forKey: Key("PrefixListId"))
        }
        if let prefixListName = prefixListName {
            try container.encode(prefixListName, forKey: Key("PrefixListName"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
        if let stateMessage = stateMessage {
            try container.encode(stateMessage, forKey: Key("StateMessage"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
        if version != 0 {
            try container.encode(version, forKey: Key("Version"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixListIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefixListId)
        prefixListId = prefixListIdDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let stateDecoded = try containerValues.decodeIfPresent(PrefixListState.self, forKey: .state)
        state = stateDecoded
        let stateMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateMessage)
        stateMessage = stateMessageDecoded
        let prefixListArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefixListArn)
        prefixListArn = prefixListArnDecoded
        let prefixListNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefixListName)
        prefixListName = prefixListNameDecoded
        let maxEntriesDecoded = try containerValues.decode(Int.self, forKey: .maxEntries)
        maxEntries = maxEntriesDecoded
        let versionDecoded = try containerValues.decode(Int.self, forKey: .version)
        version = versionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
    }
}
