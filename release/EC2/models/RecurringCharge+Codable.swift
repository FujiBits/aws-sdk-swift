// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RecurringCharge: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case amount = "amount"
        case frequency = "frequency"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if amount != 0.0 {
            try container.encode(String(amount), forKey: Key("Amount"))
        }
        if let frequency = frequency {
            try container.encode(frequency, forKey: Key("Frequency"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let amountDecoded = try containerValues.decode(Double.self, forKey: .amount)
        amount = amountDecoded
        let frequencyDecoded = try containerValues.decodeIfPresent(RecurringChargeFrequency.self, forKey: .frequency)
        frequency = frequencyDecoded
    }
}
