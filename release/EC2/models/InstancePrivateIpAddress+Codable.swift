// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstancePrivateIpAddress: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case association = "association"
        case primary = "primary"
        case privateDnsName = "privateDnsName"
        case privateIpAddress = "privateIpAddress"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let association = association {
            try container.encode(association, forKey: Key("Association"))
        }
        if primary != false {
            try container.encode(primary, forKey: Key("Primary"))
        }
        if let privateDnsName = privateDnsName {
            try container.encode(privateDnsName, forKey: Key("PrivateDnsName"))
        }
        if let privateIpAddress = privateIpAddress {
            try container.encode(privateIpAddress, forKey: Key("PrivateIpAddress"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationDecoded = try containerValues.decodeIfPresent(InstanceNetworkInterfaceAssociation.self, forKey: .association)
        association = associationDecoded
        let primaryDecoded = try containerValues.decode(Bool.self, forKey: .primary)
        primary = primaryDecoded
        let privateDnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .privateDnsName)
        privateDnsName = privateDnsNameDecoded
        let privateIpAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .privateIpAddress)
        privateIpAddress = privateIpAddressDecoded
    }
}
