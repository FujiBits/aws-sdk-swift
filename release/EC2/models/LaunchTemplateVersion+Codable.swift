// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LaunchTemplateVersion: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createTime = "createTime"
        case createdBy = "createdBy"
        case defaultVersion = "defaultVersion"
        case launchTemplateData = "launchTemplateData"
        case launchTemplateId = "launchTemplateId"
        case launchTemplateName = "launchTemplateName"
        case versionDescription = "versionDescription"
        case versionNumber = "versionNumber"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let createTime = createTime {
            try container.encode(TimestampWrapper(createTime, format: .dateTime), forKey: Key("CreateTime"))
        }
        if let createdBy = createdBy {
            try container.encode(createdBy, forKey: Key("CreatedBy"))
        }
        if defaultVersion != false {
            try container.encode(defaultVersion, forKey: Key("DefaultVersion"))
        }
        if let launchTemplateData = launchTemplateData {
            try container.encode(launchTemplateData, forKey: Key("LaunchTemplateData"))
        }
        if let launchTemplateId = launchTemplateId {
            try container.encode(launchTemplateId, forKey: Key("LaunchTemplateId"))
        }
        if let launchTemplateName = launchTemplateName {
            try container.encode(launchTemplateName, forKey: Key("LaunchTemplateName"))
        }
        if let versionDescription = versionDescription {
            try container.encode(versionDescription, forKey: Key("VersionDescription"))
        }
        if versionNumber != 0 {
            try container.encode(versionNumber, forKey: Key("VersionNumber"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchTemplateId)
        launchTemplateId = launchTemplateIdDecoded
        let launchTemplateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchTemplateName)
        launchTemplateName = launchTemplateNameDecoded
        let versionNumberDecoded = try containerValues.decode(Int.self, forKey: .versionNumber)
        versionNumber = versionNumberDecoded
        let versionDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .versionDescription)
        versionDescription = versionDescriptionDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createTime)
        var createTimeBuffer:Date? = nil
        if let createTimeDecoded = createTimeDecoded {
            createTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(createTimeDecoded, format: .dateTime)
        }
        createTime = createTimeBuffer
        let createdByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let defaultVersionDecoded = try containerValues.decode(Bool.self, forKey: .defaultVersion)
        defaultVersion = defaultVersionDecoded
        let launchTemplateDataDecoded = try containerValues.decodeIfPresent(ResponseLaunchTemplateData.self, forKey: .launchTemplateData)
        launchTemplateData = launchTemplateDataDecoded
    }
}
