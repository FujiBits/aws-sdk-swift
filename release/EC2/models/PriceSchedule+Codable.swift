// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PriceSchedule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case active = "active"
        case currencyCode = "currencyCode"
        case price = "price"
        case term = "term"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if active != false {
            try container.encode(active, forKey: Key("Active"))
        }
        if let currencyCode = currencyCode {
            try container.encode(currencyCode, forKey: Key("CurrencyCode"))
        }
        if price != 0.0 {
            try container.encode(String(price), forKey: Key("Price"))
        }
        if term != 0 {
            try container.encode(term, forKey: Key("Term"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeDecoded = try containerValues.decode(Bool.self, forKey: .active)
        active = activeDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(CurrencyCodeValues.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let priceDecoded = try containerValues.decode(Double.self, forKey: .price)
        price = priceDecoded
        let termDecoded = try containerValues.decode(Int.self, forKey: .term)
        term = termDecoded
    }
}
