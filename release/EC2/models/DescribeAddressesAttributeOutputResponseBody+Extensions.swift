// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAddressesAttributeOutputResponseBody: Equatable {
    public let addresses: [AddressAttribute]?
    public let nextToken: String?
}

extension DescribeAddressesAttributeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addresses = "addressSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.addresses) {
            struct KeyVal0{struct item{}}
            let addressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .addresses)
            if let addressesWrappedContainer = addressesWrappedContainer {
                let addressesContainer = try addressesWrappedContainer.decodeIfPresent([AddressAttribute].self, forKey: .member)
                var addressesBuffer:[AddressAttribute]? = nil
                if let addressesContainer = addressesContainer {
                    addressesBuffer = [AddressAttribute]()
                    for structureContainer0 in addressesContainer {
                        addressesBuffer?.append(structureContainer0)
                    }
                }
                addresses = addressesBuffer
            } else {
                addresses = []
            }
        } else {
            addresses = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
