// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateNetworkAclEntryInputHeadersMiddleware: Middleware {
    public let id: String = "CreateNetworkAclEntryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkAclEntryInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkAclEntryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkAclEntryInput>
    public typealias MOutput = OperationOutput<CreateNetworkAclEntryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkAclEntryOutputError>
}

public struct CreateNetworkAclEntryInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateNetworkAclEntryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkAclEntryInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkAclEntryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkAclEntryInput>
    public typealias MOutput = OperationOutput<CreateNetworkAclEntryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkAclEntryOutputError>
}

public struct CreateNetworkAclEntryInputBodyMiddleware: Middleware {
    public let id: String = "CreateNetworkAclEntryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkAclEntryInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkAclEntryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkAclEntryInput>
    public typealias MOutput = OperationOutput<CreateNetworkAclEntryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkAclEntryOutputError>
}

extension CreateNetworkAclEntryInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cidrBlock = cidrBlock {
            try container.encode(cidrBlock, forKey: Key("CidrBlock"))
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if egress != false {
            try container.encode(egress, forKey: Key("Egress"))
        }
        if let icmpTypeCode = icmpTypeCode {
            try container.encode(icmpTypeCode, forKey: Key("Icmp"))
        }
        if let ipv6CidrBlock = ipv6CidrBlock {
            try container.encode(ipv6CidrBlock, forKey: Key("Ipv6CidrBlock"))
        }
        if let networkAclId = networkAclId {
            try container.encode(networkAclId, forKey: Key("NetworkAclId"))
        }
        if let portRange = portRange {
            try container.encode(portRange, forKey: Key("PortRange"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: Key("Protocol"))
        }
        if let ruleAction = ruleAction {
            try container.encode(ruleAction, forKey: Key("RuleAction"))
        }
        if ruleNumber != 0 {
            try container.encode(ruleNumber, forKey: Key("RuleNumber"))
        }
        try container.encode("CreateNetworkAclEntry", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
