// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DetachVolumeOutputResponseBody: Equatable {
    public let attachTime: Date?
    public let device: String?
    public let instanceId: String?
    public let state: VolumeAttachmentState?
    public let volumeId: String?
    public let deleteOnTermination: Bool
}

extension DetachVolumeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attachTime = "attachTime"
        case deleteOnTermination = "deleteOnTermination"
        case device = "device"
        case instanceId = "instanceId"
        case state = "status"
        case volumeId = "volumeId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attachTime)
        var attachTimeBuffer:Date? = nil
        if let attachTimeDecoded = attachTimeDecoded {
            attachTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(attachTimeDecoded, format: .dateTime)
        }
        attachTime = attachTimeBuffer
        let deviceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .device)
        device = deviceDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(VolumeAttachmentState.self, forKey: .state)
        state = stateDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let deleteOnTerminationDecoded = try containerValues.decode(Bool.self, forKey: .deleteOnTermination)
        deleteOnTermination = deleteOnTerminationDecoded
    }
}
