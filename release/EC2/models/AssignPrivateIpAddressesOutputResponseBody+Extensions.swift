// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AssignPrivateIpAddressesOutputResponseBody: Equatable {
    public let networkInterfaceId: String?
    public let assignedPrivateIpAddresses: [AssignedPrivateIpAddress]?
}

extension AssignPrivateIpAddressesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case assignedPrivateIpAddresses = "assignedPrivateIpAddressesSet"
        case networkInterfaceId = "networkInterfaceId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        if containerValues.contains(.assignedPrivateIpAddresses) {
            struct KeyVal0{struct item{}}
            let assignedPrivateIpAddressesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .assignedPrivateIpAddresses)
            if let assignedPrivateIpAddressesWrappedContainer = assignedPrivateIpAddressesWrappedContainer {
                let assignedPrivateIpAddressesContainer = try assignedPrivateIpAddressesWrappedContainer.decodeIfPresent([AssignedPrivateIpAddress].self, forKey: .member)
                var assignedPrivateIpAddressesBuffer:[AssignedPrivateIpAddress]? = nil
                if let assignedPrivateIpAddressesContainer = assignedPrivateIpAddressesContainer {
                    assignedPrivateIpAddressesBuffer = [AssignedPrivateIpAddress]()
                    for structureContainer0 in assignedPrivateIpAddressesContainer {
                        assignedPrivateIpAddressesBuffer?.append(structureContainer0)
                    }
                }
                assignedPrivateIpAddresses = assignedPrivateIpAddressesBuffer
            } else {
                assignedPrivateIpAddresses = []
            }
        } else {
            assignedPrivateIpAddresses = nil
        }
    }
}
