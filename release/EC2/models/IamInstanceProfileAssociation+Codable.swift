// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IamInstanceProfileAssociation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case associationId = "associationId"
        case iamInstanceProfile = "iamInstanceProfile"
        case instanceId = "instanceId"
        case state = "state"
        case timestamp = "timestamp"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let associationId = associationId {
            try container.encode(associationId, forKey: Key("AssociationId"))
        }
        if let iamInstanceProfile = iamInstanceProfile {
            try container.encode(iamInstanceProfile, forKey: Key("IamInstanceProfile"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
        if let timestamp = timestamp {
            try container.encode(TimestampWrapper(timestamp, format: .dateTime), forKey: Key("Timestamp"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let iamInstanceProfileDecoded = try containerValues.decodeIfPresent(IamInstanceProfile.self, forKey: .iamInstanceProfile)
        iamInstanceProfile = iamInstanceProfileDecoded
        let stateDecoded = try containerValues.decodeIfPresent(IamInstanceProfileAssociationState.self, forKey: .state)
        state = stateDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timestamp)
        var timestampBuffer:Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
    }
}
