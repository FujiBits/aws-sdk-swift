// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNetworkInterfacePermissionsOutputResponseBody: Equatable {
    public let networkInterfacePermissions: [NetworkInterfacePermission]?
    public let nextToken: String?
}

extension DescribeNetworkInterfacePermissionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case networkInterfacePermissions = "networkInterfacePermissions"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.networkInterfacePermissions) {
            struct KeyVal0{struct item{}}
            let networkInterfacePermissionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .networkInterfacePermissions)
            if let networkInterfacePermissionsWrappedContainer = networkInterfacePermissionsWrappedContainer {
                let networkInterfacePermissionsContainer = try networkInterfacePermissionsWrappedContainer.decodeIfPresent([NetworkInterfacePermission].self, forKey: .member)
                var networkInterfacePermissionsBuffer:[NetworkInterfacePermission]? = nil
                if let networkInterfacePermissionsContainer = networkInterfacePermissionsContainer {
                    networkInterfacePermissionsBuffer = [NetworkInterfacePermission]()
                    for structureContainer0 in networkInterfacePermissionsContainer {
                        networkInterfacePermissionsBuffer?.append(structureContainer0)
                    }
                }
                networkInterfacePermissions = networkInterfacePermissionsBuffer
            } else {
                networkInterfacePermissions = []
            }
        } else {
            networkInterfacePermissions = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
