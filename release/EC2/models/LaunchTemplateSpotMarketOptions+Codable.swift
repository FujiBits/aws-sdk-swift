// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LaunchTemplateSpotMarketOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blockDurationMinutes = "blockDurationMinutes"
        case instanceInterruptionBehavior = "instanceInterruptionBehavior"
        case maxPrice = "maxPrice"
        case spotInstanceType = "spotInstanceType"
        case validUntil = "validUntil"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if blockDurationMinutes != 0 {
            try container.encode(blockDurationMinutes, forKey: Key("BlockDurationMinutes"))
        }
        if let instanceInterruptionBehavior = instanceInterruptionBehavior {
            try container.encode(instanceInterruptionBehavior, forKey: Key("InstanceInterruptionBehavior"))
        }
        if let maxPrice = maxPrice {
            try container.encode(maxPrice, forKey: Key("MaxPrice"))
        }
        if let spotInstanceType = spotInstanceType {
            try container.encode(spotInstanceType, forKey: Key("SpotInstanceType"))
        }
        if let validUntil = validUntil {
            try container.encode(TimestampWrapper(validUntil, format: .dateTime), forKey: Key("ValidUntil"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maxPrice)
        maxPrice = maxPriceDecoded
        let spotInstanceTypeDecoded = try containerValues.decodeIfPresent(SpotInstanceType.self, forKey: .spotInstanceType)
        spotInstanceType = spotInstanceTypeDecoded
        let blockDurationMinutesDecoded = try containerValues.decode(Int.self, forKey: .blockDurationMinutes)
        blockDurationMinutes = blockDurationMinutesDecoded
        let validUntilDecoded = try containerValues.decodeIfPresent(String.self, forKey: .validUntil)
        var validUntilBuffer:Date? = nil
        if let validUntilDecoded = validUntilDecoded {
            validUntilBuffer = try TimestampWrapperDecoder.parseDateStringValue(validUntilDecoded, format: .dateTime)
        }
        validUntil = validUntilBuffer
        let instanceInterruptionBehaviorDecoded = try containerValues.decodeIfPresent(InstanceInterruptionBehavior.self, forKey: .instanceInterruptionBehavior)
        instanceInterruptionBehavior = instanceInterruptionBehaviorDecoded
    }
}
