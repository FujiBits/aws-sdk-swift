// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InferenceAcceleratorInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accelerators = "accelerators"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let accelerators = accelerators {
            if !accelerators.isEmpty {
                for (index0, inferencedeviceinfo0) in accelerators.enumerated() {
                    var acceleratorsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Accelerators.\(index0.advanced(by: 1))"))
                    try acceleratorsContainer0.encode(inferencedeviceinfo0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.accelerators) {
            struct KeyVal0{struct member{}}
            let acceleratorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accelerators)
            if let acceleratorsWrappedContainer = acceleratorsWrappedContainer {
                let acceleratorsContainer = try acceleratorsWrappedContainer.decodeIfPresent([InferenceDeviceInfo].self, forKey: .member)
                var acceleratorsBuffer:[InferenceDeviceInfo]? = nil
                if let acceleratorsContainer = acceleratorsContainer {
                    acceleratorsBuffer = [InferenceDeviceInfo]()
                    for structureContainer0 in acceleratorsContainer {
                        acceleratorsBuffer?.append(structureContainer0)
                    }
                }
                accelerators = acceleratorsBuffer
            } else {
                accelerators = []
            }
        } else {
            accelerators = nil
        }
    }
}
