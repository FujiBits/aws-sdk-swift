// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTrafficMirrorTargetsOutputResponseBody: Equatable {
    public let trafficMirrorTargets: [TrafficMirrorTarget]?
    public let nextToken: String?
}

extension DescribeTrafficMirrorTargetsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case trafficMirrorTargets = "trafficMirrorTargetSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.trafficMirrorTargets) {
            struct KeyVal0{struct item{}}
            let trafficMirrorTargetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .trafficMirrorTargets)
            if let trafficMirrorTargetsWrappedContainer = trafficMirrorTargetsWrappedContainer {
                let trafficMirrorTargetsContainer = try trafficMirrorTargetsWrappedContainer.decodeIfPresent([TrafficMirrorTarget].self, forKey: .member)
                var trafficMirrorTargetsBuffer:[TrafficMirrorTarget]? = nil
                if let trafficMirrorTargetsContainer = trafficMirrorTargetsContainer {
                    trafficMirrorTargetsBuffer = [TrafficMirrorTarget]()
                    for structureContainer0 in trafficMirrorTargetsContainer {
                        trafficMirrorTargetsBuffer?.append(structureContainer0)
                    }
                }
                trafficMirrorTargets = trafficMirrorTargetsBuffer
            } else {
                trafficMirrorTargets = []
            }
        } else {
            trafficMirrorTargets = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
