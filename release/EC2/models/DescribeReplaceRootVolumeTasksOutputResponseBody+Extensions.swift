// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReplaceRootVolumeTasksOutputResponseBody: Equatable {
    public let replaceRootVolumeTasks: [ReplaceRootVolumeTask]?
    public let nextToken: String?
}

extension DescribeReplaceRootVolumeTasksOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case replaceRootVolumeTasks = "replaceRootVolumeTaskSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.replaceRootVolumeTasks) {
            struct KeyVal0{struct item{}}
            let replaceRootVolumeTasksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .replaceRootVolumeTasks)
            if let replaceRootVolumeTasksWrappedContainer = replaceRootVolumeTasksWrappedContainer {
                let replaceRootVolumeTasksContainer = try replaceRootVolumeTasksWrappedContainer.decodeIfPresent([ReplaceRootVolumeTask].self, forKey: .member)
                var replaceRootVolumeTasksBuffer:[ReplaceRootVolumeTask]? = nil
                if let replaceRootVolumeTasksContainer = replaceRootVolumeTasksContainer {
                    replaceRootVolumeTasksBuffer = [ReplaceRootVolumeTask]()
                    for structureContainer0 in replaceRootVolumeTasksContainer {
                        replaceRootVolumeTasksBuffer?.append(structureContainer0)
                    }
                }
                replaceRootVolumeTasks = replaceRootVolumeTasksBuffer
            } else {
                replaceRootVolumeTasks = []
            }
        } else {
            replaceRootVolumeTasks = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
