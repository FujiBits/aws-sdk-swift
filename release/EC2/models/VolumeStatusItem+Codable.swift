// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VolumeStatusItem: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions = "actionsSet"
        case attachmentStatuses = "attachmentStatuses"
        case availabilityZone = "availabilityZone"
        case events = "eventsSet"
        case outpostArn = "outpostArn"
        case volumeId = "volumeId"
        case volumeStatus = "volumeStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let actions = actions {
            if !actions.isEmpty {
                for (index0, volumestatusaction0) in actions.enumerated() {
                    var actionsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("ActionsSet.\(index0.advanced(by: 1))"))
                    try actionsContainer0.encode(volumestatusaction0, forKey: Key(""))
                }
            }
        }
        if let attachmentStatuses = attachmentStatuses {
            if !attachmentStatuses.isEmpty {
                for (index0, volumestatusattachmentstatus0) in attachmentStatuses.enumerated() {
                    var attachmentStatusesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("AttachmentStatuses.\(index0.advanced(by: 1))"))
                    try attachmentStatusesContainer0.encode(volumestatusattachmentstatus0, forKey: Key(""))
                }
            }
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: Key("AvailabilityZone"))
        }
        if let events = events {
            if !events.isEmpty {
                for (index0, volumestatusevent0) in events.enumerated() {
                    var eventsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("EventsSet.\(index0.advanced(by: 1))"))
                    try eventsContainer0.encode(volumestatusevent0, forKey: Key(""))
                }
            }
        }
        if let outpostArn = outpostArn {
            try container.encode(outpostArn, forKey: Key("OutpostArn"))
        }
        if let volumeId = volumeId {
            try container.encode(volumeId, forKey: Key("VolumeId"))
        }
        if let volumeStatus = volumeStatus {
            try container.encode(volumeStatus, forKey: Key("VolumeStatus"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.actions) {
            struct KeyVal0{struct item{}}
            let actionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .actions)
            if let actionsWrappedContainer = actionsWrappedContainer {
                let actionsContainer = try actionsWrappedContainer.decodeIfPresent([VolumeStatusAction].self, forKey: .member)
                var actionsBuffer:[VolumeStatusAction]? = nil
                if let actionsContainer = actionsContainer {
                    actionsBuffer = [VolumeStatusAction]()
                    for structureContainer0 in actionsContainer {
                        actionsBuffer?.append(structureContainer0)
                    }
                }
                actions = actionsBuffer
            } else {
                actions = []
            }
        } else {
            actions = nil
        }
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
        if containerValues.contains(.events) {
            struct KeyVal0{struct item{}}
            let eventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .events)
            if let eventsWrappedContainer = eventsWrappedContainer {
                let eventsContainer = try eventsWrappedContainer.decodeIfPresent([VolumeStatusEvent].self, forKey: .member)
                var eventsBuffer:[VolumeStatusEvent]? = nil
                if let eventsContainer = eventsContainer {
                    eventsBuffer = [VolumeStatusEvent]()
                    for structureContainer0 in eventsContainer {
                        eventsBuffer?.append(structureContainer0)
                    }
                }
                events = eventsBuffer
            } else {
                events = []
            }
        } else {
            events = nil
        }
        let volumeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let volumeStatusDecoded = try containerValues.decodeIfPresent(VolumeStatusInfo.self, forKey: .volumeStatus)
        volumeStatus = volumeStatusDecoded
        if containerValues.contains(.attachmentStatuses) {
            struct KeyVal0{struct item{}}
            let attachmentStatusesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .attachmentStatuses)
            if let attachmentStatusesWrappedContainer = attachmentStatusesWrappedContainer {
                let attachmentStatusesContainer = try attachmentStatusesWrappedContainer.decodeIfPresent([VolumeStatusAttachmentStatus].self, forKey: .member)
                var attachmentStatusesBuffer:[VolumeStatusAttachmentStatus]? = nil
                if let attachmentStatusesContainer = attachmentStatusesContainer {
                    attachmentStatusesBuffer = [VolumeStatusAttachmentStatus]()
                    for structureContainer0 in attachmentStatusesContainer {
                        attachmentStatusesBuffer?.append(structureContainer0)
                    }
                }
                attachmentStatuses = attachmentStatusesBuffer
            } else {
                attachmentStatuses = []
            }
        } else {
            attachmentStatuses = nil
        }
    }
}
