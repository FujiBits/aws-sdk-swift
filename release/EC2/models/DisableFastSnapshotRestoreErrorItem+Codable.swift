// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DisableFastSnapshotRestoreErrorItem: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fastSnapshotRestoreStateErrors = "fastSnapshotRestoreStateErrorSet"
        case snapshotId = "snapshotId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let fastSnapshotRestoreStateErrors = fastSnapshotRestoreStateErrors {
            if !fastSnapshotRestoreStateErrors.isEmpty {
                for (index0, disablefastsnapshotrestorestateerroritem0) in fastSnapshotRestoreStateErrors.enumerated() {
                    var fastSnapshotRestoreStateErrorsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("FastSnapshotRestoreStateErrorSet.\(index0.advanced(by: 1))"))
                    try fastSnapshotRestoreStateErrorsContainer0.encode(disablefastsnapshotrestorestateerroritem0, forKey: Key(""))
                }
            }
        }
        if let snapshotId = snapshotId {
            try container.encode(snapshotId, forKey: Key("SnapshotId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        if containerValues.contains(.fastSnapshotRestoreStateErrors) {
            struct KeyVal0{struct item{}}
            let fastSnapshotRestoreStateErrorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .fastSnapshotRestoreStateErrors)
            if let fastSnapshotRestoreStateErrorsWrappedContainer = fastSnapshotRestoreStateErrorsWrappedContainer {
                let fastSnapshotRestoreStateErrorsContainer = try fastSnapshotRestoreStateErrorsWrappedContainer.decodeIfPresent([DisableFastSnapshotRestoreStateErrorItem].self, forKey: .member)
                var fastSnapshotRestoreStateErrorsBuffer:[DisableFastSnapshotRestoreStateErrorItem]? = nil
                if let fastSnapshotRestoreStateErrorsContainer = fastSnapshotRestoreStateErrorsContainer {
                    fastSnapshotRestoreStateErrorsBuffer = [DisableFastSnapshotRestoreStateErrorItem]()
                    for structureContainer0 in fastSnapshotRestoreStateErrorsContainer {
                        fastSnapshotRestoreStateErrorsBuffer?.append(structureContainer0)
                    }
                }
                fastSnapshotRestoreStateErrors = fastSnapshotRestoreStateErrorsBuffer
            } else {
                fastSnapshotRestoreStateErrors = []
            }
        } else {
            fastSnapshotRestoreStateErrors = nil
        }
    }
}
