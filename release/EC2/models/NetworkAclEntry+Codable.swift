// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkAclEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cidrBlock = "cidrBlock"
        case egress = "egress"
        case icmpTypeCode = "icmpTypeCode"
        case ipv6CidrBlock = "ipv6CidrBlock"
        case portRange = "portRange"
        case `protocol` = "protocol"
        case ruleAction = "ruleAction"
        case ruleNumber = "ruleNumber"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let cidrBlock = cidrBlock {
            try container.encode(cidrBlock, forKey: Key("CidrBlock"))
        }
        if egress != false {
            try container.encode(egress, forKey: Key("Egress"))
        }
        if let icmpTypeCode = icmpTypeCode {
            try container.encode(icmpTypeCode, forKey: Key("IcmpTypeCode"))
        }
        if let ipv6CidrBlock = ipv6CidrBlock {
            try container.encode(ipv6CidrBlock, forKey: Key("Ipv6CidrBlock"))
        }
        if let portRange = portRange {
            try container.encode(portRange, forKey: Key("PortRange"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: Key("Protocol"))
        }
        if let ruleAction = ruleAction {
            try container.encode(ruleAction, forKey: Key("RuleAction"))
        }
        if ruleNumber != 0 {
            try container.encode(ruleNumber, forKey: Key("RuleNumber"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrBlockDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cidrBlock)
        cidrBlock = cidrBlockDecoded
        let egressDecoded = try containerValues.decode(Bool.self, forKey: .egress)
        egress = egressDecoded
        let icmpTypeCodeDecoded = try containerValues.decodeIfPresent(IcmpTypeCode.self, forKey: .icmpTypeCode)
        icmpTypeCode = icmpTypeCodeDecoded
        let ipv6CidrBlockDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipv6CidrBlock)
        ipv6CidrBlock = ipv6CidrBlockDecoded
        let portRangeDecoded = try containerValues.decodeIfPresent(PortRange.self, forKey: .portRange)
        portRange = portRangeDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(String.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let ruleActionDecoded = try containerValues.decodeIfPresent(RuleAction.self, forKey: .ruleAction)
        ruleAction = ruleActionDecoded
        let ruleNumberDecoded = try containerValues.decode(Int.self, forKey: .ruleNumber)
        ruleNumber = ruleNumberDecoded
    }
}
