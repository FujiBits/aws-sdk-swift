// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransitGatewayPrefixListReference: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blackhole = "blackhole"
        case prefixListId = "prefixListId"
        case prefixListOwnerId = "prefixListOwnerId"
        case state = "state"
        case transitGatewayAttachment = "transitGatewayAttachment"
        case transitGatewayRouteTableId = "transitGatewayRouteTableId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if blackhole != false {
            try container.encode(blackhole, forKey: Key("Blackhole"))
        }
        if let prefixListId = prefixListId {
            try container.encode(prefixListId, forKey: Key("PrefixListId"))
        }
        if let prefixListOwnerId = prefixListOwnerId {
            try container.encode(prefixListOwnerId, forKey: Key("PrefixListOwnerId"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
        if let transitGatewayAttachment = transitGatewayAttachment {
            try container.encode(transitGatewayAttachment, forKey: Key("TransitGatewayAttachment"))
        }
        if let transitGatewayRouteTableId = transitGatewayRouteTableId {
            try container.encode(transitGatewayRouteTableId, forKey: Key("TransitGatewayRouteTableId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transitGatewayRouteTableIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transitGatewayRouteTableId)
        transitGatewayRouteTableId = transitGatewayRouteTableIdDecoded
        let prefixListIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefixListId)
        prefixListId = prefixListIdDecoded
        let prefixListOwnerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefixListOwnerId)
        prefixListOwnerId = prefixListOwnerIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(TransitGatewayPrefixListReferenceState.self, forKey: .state)
        state = stateDecoded
        let blackholeDecoded = try containerValues.decode(Bool.self, forKey: .blackhole)
        blackhole = blackholeDecoded
        let transitGatewayAttachmentDecoded = try containerValues.decodeIfPresent(TransitGatewayPrefixListAttachment.self, forKey: .transitGatewayAttachment)
        transitGatewayAttachment = transitGatewayAttachmentDecoded
    }
}
