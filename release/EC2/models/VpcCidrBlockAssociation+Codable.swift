// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VpcCidrBlockAssociation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case associationId = "associationId"
        case cidrBlock = "cidrBlock"
        case cidrBlockState = "cidrBlockState"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let associationId = associationId {
            try container.encode(associationId, forKey: Key("AssociationId"))
        }
        if let cidrBlock = cidrBlock {
            try container.encode(cidrBlock, forKey: Key("CidrBlock"))
        }
        if let cidrBlockState = cidrBlockState {
            try container.encode(cidrBlockState, forKey: Key("CidrBlockState"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let cidrBlockDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cidrBlock)
        cidrBlock = cidrBlockDecoded
        let cidrBlockStateDecoded = try containerValues.decodeIfPresent(VpcCidrBlockState.self, forKey: .cidrBlockState)
        cidrBlockState = cidrBlockStateDecoded
    }
}
