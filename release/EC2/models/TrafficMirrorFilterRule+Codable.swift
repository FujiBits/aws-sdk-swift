// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TrafficMirrorFilterRule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "description"
        case destinationCidrBlock = "destinationCidrBlock"
        case destinationPortRange = "destinationPortRange"
        case `protocol` = "protocol"
        case ruleAction = "ruleAction"
        case ruleNumber = "ruleNumber"
        case sourceCidrBlock = "sourceCidrBlock"
        case sourcePortRange = "sourcePortRange"
        case trafficDirection = "trafficDirection"
        case trafficMirrorFilterId = "trafficMirrorFilterId"
        case trafficMirrorFilterRuleId = "trafficMirrorFilterRuleId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let destinationCidrBlock = destinationCidrBlock {
            try container.encode(destinationCidrBlock, forKey: Key("DestinationCidrBlock"))
        }
        if let destinationPortRange = destinationPortRange {
            try container.encode(destinationPortRange, forKey: Key("DestinationPortRange"))
        }
        if `protocol` != 0 {
            try container.encode(`protocol`, forKey: Key("Protocol"))
        }
        if let ruleAction = ruleAction {
            try container.encode(ruleAction, forKey: Key("RuleAction"))
        }
        if ruleNumber != 0 {
            try container.encode(ruleNumber, forKey: Key("RuleNumber"))
        }
        if let sourceCidrBlock = sourceCidrBlock {
            try container.encode(sourceCidrBlock, forKey: Key("SourceCidrBlock"))
        }
        if let sourcePortRange = sourcePortRange {
            try container.encode(sourcePortRange, forKey: Key("SourcePortRange"))
        }
        if let trafficDirection = trafficDirection {
            try container.encode(trafficDirection, forKey: Key("TrafficDirection"))
        }
        if let trafficMirrorFilterId = trafficMirrorFilterId {
            try container.encode(trafficMirrorFilterId, forKey: Key("TrafficMirrorFilterId"))
        }
        if let trafficMirrorFilterRuleId = trafficMirrorFilterRuleId {
            try container.encode(trafficMirrorFilterRuleId, forKey: Key("TrafficMirrorFilterRuleId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficMirrorFilterRuleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trafficMirrorFilterRuleId)
        trafficMirrorFilterRuleId = trafficMirrorFilterRuleIdDecoded
        let trafficMirrorFilterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trafficMirrorFilterId)
        trafficMirrorFilterId = trafficMirrorFilterIdDecoded
        let trafficDirectionDecoded = try containerValues.decodeIfPresent(TrafficDirection.self, forKey: .trafficDirection)
        trafficDirection = trafficDirectionDecoded
        let ruleNumberDecoded = try containerValues.decode(Int.self, forKey: .ruleNumber)
        ruleNumber = ruleNumberDecoded
        let ruleActionDecoded = try containerValues.decodeIfPresent(TrafficMirrorRuleAction.self, forKey: .ruleAction)
        ruleAction = ruleActionDecoded
        let protocolDecoded = try containerValues.decode(Int.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let destinationPortRangeDecoded = try containerValues.decodeIfPresent(TrafficMirrorPortRange.self, forKey: .destinationPortRange)
        destinationPortRange = destinationPortRangeDecoded
        let sourcePortRangeDecoded = try containerValues.decodeIfPresent(TrafficMirrorPortRange.self, forKey: .sourcePortRange)
        sourcePortRange = sourcePortRangeDecoded
        let destinationCidrBlockDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationCidrBlock)
        destinationCidrBlock = destinationCidrBlockDecoded
        let sourceCidrBlockDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceCidrBlock)
        sourceCidrBlock = sourceCidrBlockDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
    }
}
