// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RunInstancesOutputResponseBody: Equatable {
    public let groups: [GroupIdentifier]?
    public let instances: [Instance]?
    public let ownerId: String?
    public let requesterId: String?
    public let reservationId: String?
}

extension RunInstancesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case groups = "groupSet"
        case instances = "instancesSet"
        case ownerId = "ownerId"
        case requesterId = "requesterId"
        case reservationId = "reservationId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.groups) {
            struct KeyVal0{struct item{}}
            let groupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .groups)
            if let groupsWrappedContainer = groupsWrappedContainer {
                let groupsContainer = try groupsWrappedContainer.decodeIfPresent([GroupIdentifier].self, forKey: .member)
                var groupsBuffer:[GroupIdentifier]? = nil
                if let groupsContainer = groupsContainer {
                    groupsBuffer = [GroupIdentifier]()
                    for structureContainer0 in groupsContainer {
                        groupsBuffer?.append(structureContainer0)
                    }
                }
                groups = groupsBuffer
            } else {
                groups = []
            }
        } else {
            groups = nil
        }
        if containerValues.contains(.instances) {
            struct KeyVal0{struct item{}}
            let instancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instances)
            if let instancesWrappedContainer = instancesWrappedContainer {
                let instancesContainer = try instancesWrappedContainer.decodeIfPresent([Instance].self, forKey: .member)
                var instancesBuffer:[Instance]? = nil
                if let instancesContainer = instancesContainer {
                    instancesBuffer = [Instance]()
                    for structureContainer0 in instancesContainer {
                        instancesBuffer?.append(structureContainer0)
                    }
                }
                instances = instancesBuffer
            } else {
                instances = []
            }
        } else {
            instances = nil
        }
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let requesterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requesterId)
        requesterId = requesterIdDecoded
        let reservationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reservationId)
        reservationId = reservationIdDecoded
    }
}
