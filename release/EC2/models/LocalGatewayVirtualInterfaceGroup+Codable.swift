// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LocalGatewayVirtualInterfaceGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case localGatewayId = "localGatewayId"
        case localGatewayVirtualInterfaceGroupId = "localGatewayVirtualInterfaceGroupId"
        case localGatewayVirtualInterfaceIds = "localGatewayVirtualInterfaceIdSet"
        case ownerId = "ownerId"
        case tags = "tagSet"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let localGatewayId = localGatewayId {
            try container.encode(localGatewayId, forKey: Key("LocalGatewayId"))
        }
        if let localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId {
            try container.encode(localGatewayVirtualInterfaceGroupId, forKey: Key("LocalGatewayVirtualInterfaceGroupId"))
        }
        if let localGatewayVirtualInterfaceIds = localGatewayVirtualInterfaceIds {
            if !localGatewayVirtualInterfaceIds.isEmpty {
                for (index0, localgatewayvirtualinterfaceid0) in localGatewayVirtualInterfaceIds.enumerated() {
                    var localGatewayVirtualInterfaceIdsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("LocalGatewayVirtualInterfaceIdSet.\(index0.advanced(by: 1))"))
                    try localGatewayVirtualInterfaceIdsContainer0.encode(localgatewayvirtualinterfaceid0, forKey: Key(""))
                }
            }
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: Key("OwnerId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localGatewayVirtualInterfaceGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .localGatewayVirtualInterfaceGroupId)
        localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupIdDecoded
        if containerValues.contains(.localGatewayVirtualInterfaceIds) {
            struct KeyVal0{struct item{}}
            let localGatewayVirtualInterfaceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .localGatewayVirtualInterfaceIds)
            if let localGatewayVirtualInterfaceIdsWrappedContainer = localGatewayVirtualInterfaceIdsWrappedContainer {
                let localGatewayVirtualInterfaceIdsContainer = try localGatewayVirtualInterfaceIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var localGatewayVirtualInterfaceIdsBuffer:[String]? = nil
                if let localGatewayVirtualInterfaceIdsContainer = localGatewayVirtualInterfaceIdsContainer {
                    localGatewayVirtualInterfaceIdsBuffer = [String]()
                    for stringContainer0 in localGatewayVirtualInterfaceIdsContainer {
                        localGatewayVirtualInterfaceIdsBuffer?.append(stringContainer0)
                    }
                }
                localGatewayVirtualInterfaceIds = localGatewayVirtualInterfaceIdsBuffer
            } else {
                localGatewayVirtualInterfaceIds = []
            }
        } else {
            localGatewayVirtualInterfaceIds = nil
        }
        let localGatewayIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .localGatewayId)
        localGatewayId = localGatewayIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
