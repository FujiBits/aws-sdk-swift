// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ClassicLoadBalancersConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case classicLoadBalancers = "classicLoadBalancers"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let classicLoadBalancers = classicLoadBalancers {
            if !classicLoadBalancers.isEmpty {
                for (index0, classicloadbalancer0) in classicLoadBalancers.enumerated() {
                    var classicLoadBalancersContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("ClassicLoadBalancers.\(index0.advanced(by: 1))"))
                    try classicLoadBalancersContainer0.encode(classicloadbalancer0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.classicLoadBalancers) {
            struct KeyVal0{struct item{}}
            let classicLoadBalancersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .classicLoadBalancers)
            if let classicLoadBalancersWrappedContainer = classicLoadBalancersWrappedContainer {
                let classicLoadBalancersContainer = try classicLoadBalancersWrappedContainer.decodeIfPresent([ClassicLoadBalancer].self, forKey: .member)
                var classicLoadBalancersBuffer:[ClassicLoadBalancer]? = nil
                if let classicLoadBalancersContainer = classicLoadBalancersContainer {
                    classicLoadBalancersBuffer = [ClassicLoadBalancer]()
                    for structureContainer0 in classicLoadBalancersContainer {
                        classicLoadBalancersBuffer?.append(structureContainer0)
                    }
                }
                classicLoadBalancers = classicLoadBalancersBuffer
            } else {
                classicLoadBalancers = []
            }
        } else {
            classicLoadBalancers = nil
        }
    }
}
