// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AllocateAddressOutputResponseBody: Equatable {
    public let publicIp: String?
    public let allocationId: String?
    public let publicIpv4Pool: String?
    public let networkBorderGroup: String?
    public let domain: DomainType?
    public let customerOwnedIp: String?
    public let customerOwnedIpv4Pool: String?
    public let carrierIp: String?
}

extension AllocateAddressOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case allocationId = "allocationId"
        case carrierIp = "carrierIp"
        case customerOwnedIp = "customerOwnedIp"
        case customerOwnedIpv4Pool = "customerOwnedIpv4Pool"
        case domain = "domain"
        case networkBorderGroup = "networkBorderGroup"
        case publicIp = "publicIp"
        case publicIpv4Pool = "publicIpv4Pool"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publicIpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .publicIp)
        publicIp = publicIpDecoded
        let allocationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .allocationId)
        allocationId = allocationIdDecoded
        let publicIpv4PoolDecoded = try containerValues.decodeIfPresent(String.self, forKey: .publicIpv4Pool)
        publicIpv4Pool = publicIpv4PoolDecoded
        let networkBorderGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkBorderGroup)
        networkBorderGroup = networkBorderGroupDecoded
        let domainDecoded = try containerValues.decodeIfPresent(DomainType.self, forKey: .domain)
        domain = domainDecoded
        let customerOwnedIpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customerOwnedIp)
        customerOwnedIp = customerOwnedIpDecoded
        let customerOwnedIpv4PoolDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customerOwnedIpv4Pool)
        customerOwnedIpv4Pool = customerOwnedIpv4PoolDecoded
        let carrierIpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .carrierIp)
        carrierIp = carrierIpDecoded
    }
}
