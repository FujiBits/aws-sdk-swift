// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTransitGatewayMulticastDomainsOutputResponseBody: Equatable {
    public let transitGatewayMulticastDomains: [TransitGatewayMulticastDomain]?
    public let nextToken: String?
}

extension DescribeTransitGatewayMulticastDomainsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case transitGatewayMulticastDomains = "transitGatewayMulticastDomains"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.transitGatewayMulticastDomains) {
            struct KeyVal0{struct item{}}
            let transitGatewayMulticastDomainsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .transitGatewayMulticastDomains)
            if let transitGatewayMulticastDomainsWrappedContainer = transitGatewayMulticastDomainsWrappedContainer {
                let transitGatewayMulticastDomainsContainer = try transitGatewayMulticastDomainsWrappedContainer.decodeIfPresent([TransitGatewayMulticastDomain].self, forKey: .member)
                var transitGatewayMulticastDomainsBuffer:[TransitGatewayMulticastDomain]? = nil
                if let transitGatewayMulticastDomainsContainer = transitGatewayMulticastDomainsContainer {
                    transitGatewayMulticastDomainsBuffer = [TransitGatewayMulticastDomain]()
                    for structureContainer0 in transitGatewayMulticastDomainsContainer {
                        transitGatewayMulticastDomainsBuffer?.append(structureContainer0)
                    }
                }
                transitGatewayMulticastDomains = transitGatewayMulticastDomainsBuffer
            } else {
                transitGatewayMulticastDomains = []
            }
        } else {
            transitGatewayMulticastDomains = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
