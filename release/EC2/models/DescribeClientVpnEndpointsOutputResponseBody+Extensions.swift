// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClientVpnEndpointsOutputResponseBody: Equatable {
    public let clientVpnEndpoints: [ClientVpnEndpoint]?
    public let nextToken: String?
}

extension DescribeClientVpnEndpointsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientVpnEndpoints = "clientVpnEndpoint"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.clientVpnEndpoints) {
            struct KeyVal0{struct item{}}
            let clientVpnEndpointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .clientVpnEndpoints)
            if let clientVpnEndpointsWrappedContainer = clientVpnEndpointsWrappedContainer {
                let clientVpnEndpointsContainer = try clientVpnEndpointsWrappedContainer.decodeIfPresent([ClientVpnEndpoint].self, forKey: .member)
                var clientVpnEndpointsBuffer:[ClientVpnEndpoint]? = nil
                if let clientVpnEndpointsContainer = clientVpnEndpointsContainer {
                    clientVpnEndpointsBuffer = [ClientVpnEndpoint]()
                    for structureContainer0 in clientVpnEndpointsContainer {
                        clientVpnEndpointsBuffer?.append(structureContainer0)
                    }
                }
                clientVpnEndpoints = clientVpnEndpointsBuffer
            } else {
                clientVpnEndpoints = []
            }
        } else {
            clientVpnEndpoints = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
