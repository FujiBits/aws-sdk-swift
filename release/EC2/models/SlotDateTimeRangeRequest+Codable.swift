// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SlotDateTimeRangeRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case earliestTime = "EarliestTime"
        case latestTime = "LatestTime"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let earliestTime = earliestTime {
            try container.encode(TimestampWrapper(earliestTime, format: .dateTime), forKey: Key("EarliestTime"))
        }
        if let latestTime = latestTime {
            try container.encode(TimestampWrapper(latestTime, format: .dateTime), forKey: Key("LatestTime"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let earliestTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .earliestTime)
        var earliestTimeBuffer:Date? = nil
        if let earliestTimeDecoded = earliestTimeDecoded {
            earliestTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(earliestTimeDecoded, format: .dateTime)
        }
        earliestTime = earliestTimeBuffer
        let latestTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .latestTime)
        var latestTimeBuffer:Date? = nil
        if let latestTimeDecoded = latestTimeDecoded {
            latestTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(latestTimeDecoded, format: .dateTime)
        }
        latestTime = latestTimeBuffer
    }
}
