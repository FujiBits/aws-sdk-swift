// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LaunchTemplatePlacement: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case affinity = "affinity"
        case availabilityZone = "availabilityZone"
        case groupName = "groupName"
        case hostId = "hostId"
        case hostResourceGroupArn = "hostResourceGroupArn"
        case partitionNumber = "partitionNumber"
        case spreadDomain = "spreadDomain"
        case tenancy = "tenancy"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let affinity = affinity {
            try container.encode(affinity, forKey: Key("Affinity"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: Key("AvailabilityZone"))
        }
        if let groupName = groupName {
            try container.encode(groupName, forKey: Key("GroupName"))
        }
        if let hostId = hostId {
            try container.encode(hostId, forKey: Key("HostId"))
        }
        if let hostResourceGroupArn = hostResourceGroupArn {
            try container.encode(hostResourceGroupArn, forKey: Key("HostResourceGroupArn"))
        }
        if partitionNumber != 0 {
            try container.encode(partitionNumber, forKey: Key("PartitionNumber"))
        }
        if let spreadDomain = spreadDomain {
            try container.encode(spreadDomain, forKey: Key("SpreadDomain"))
        }
        if let tenancy = tenancy {
            try container.encode(tenancy, forKey: Key("Tenancy"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let affinityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .affinity)
        affinity = affinityDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let hostIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostId)
        hostId = hostIdDecoded
        let tenancyDecoded = try containerValues.decodeIfPresent(Tenancy.self, forKey: .tenancy)
        tenancy = tenancyDecoded
        let spreadDomainDecoded = try containerValues.decodeIfPresent(String.self, forKey: .spreadDomain)
        spreadDomain = spreadDomainDecoded
        let hostResourceGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostResourceGroupArn)
        hostResourceGroupArn = hostResourceGroupArnDecoded
        let partitionNumberDecoded = try containerValues.decode(Int.self, forKey: .partitionNumber)
        partitionNumber = partitionNumberDecoded
    }
}
