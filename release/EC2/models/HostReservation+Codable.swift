// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HostReservation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case count = "count"
        case currencyCode = "currencyCode"
        case duration = "duration"
        case end = "end"
        case hostIdSet = "hostIdSet"
        case hostReservationId = "hostReservationId"
        case hourlyPrice = "hourlyPrice"
        case instanceFamily = "instanceFamily"
        case offeringId = "offeringId"
        case paymentOption = "paymentOption"
        case start = "start"
        case state = "state"
        case tags = "tagSet"
        case upfrontPrice = "upfrontPrice"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if count != 0 {
            try container.encode(count, forKey: Key("Count"))
        }
        if let currencyCode = currencyCode {
            try container.encode(currencyCode, forKey: Key("CurrencyCode"))
        }
        if duration != 0 {
            try container.encode(duration, forKey: Key("Duration"))
        }
        if let end = end {
            try container.encode(TimestampWrapper(end, format: .dateTime), forKey: Key("End"))
        }
        if let hostIdSet = hostIdSet {
            if !hostIdSet.isEmpty {
                for (index0, string0) in hostIdSet.enumerated() {
                    var hostIdSetContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("HostIdSet.\(index0.advanced(by: 1))"))
                    try hostIdSetContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let hostReservationId = hostReservationId {
            try container.encode(hostReservationId, forKey: Key("HostReservationId"))
        }
        if let hourlyPrice = hourlyPrice {
            try container.encode(hourlyPrice, forKey: Key("HourlyPrice"))
        }
        if let instanceFamily = instanceFamily {
            try container.encode(instanceFamily, forKey: Key("InstanceFamily"))
        }
        if let offeringId = offeringId {
            try container.encode(offeringId, forKey: Key("OfferingId"))
        }
        if let paymentOption = paymentOption {
            try container.encode(paymentOption, forKey: Key("PaymentOption"))
        }
        if let start = start {
            try container.encode(TimestampWrapper(start, format: .dateTime), forKey: Key("Start"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
        if let upfrontPrice = upfrontPrice {
            try container.encode(upfrontPrice, forKey: Key("UpfrontPrice"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(CurrencyCodeValues.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let endDecoded = try containerValues.decodeIfPresent(String.self, forKey: .end)
        var endBuffer:Date? = nil
        if let endDecoded = endDecoded {
            endBuffer = try TimestampWrapperDecoder.parseDateStringValue(endDecoded, format: .dateTime)
        }
        end = endBuffer
        if containerValues.contains(.hostIdSet) {
            struct KeyVal0{struct item{}}
            let hostIdSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .hostIdSet)
            if let hostIdSetWrappedContainer = hostIdSetWrappedContainer {
                let hostIdSetContainer = try hostIdSetWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var hostIdSetBuffer:[String]? = nil
                if let hostIdSetContainer = hostIdSetContainer {
                    hostIdSetBuffer = [String]()
                    for stringContainer0 in hostIdSetContainer {
                        hostIdSetBuffer?.append(stringContainer0)
                    }
                }
                hostIdSet = hostIdSetBuffer
            } else {
                hostIdSet = []
            }
        } else {
            hostIdSet = nil
        }
        let hostReservationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostReservationId)
        hostReservationId = hostReservationIdDecoded
        let hourlyPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hourlyPrice)
        hourlyPrice = hourlyPriceDecoded
        let instanceFamilyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceFamily)
        instanceFamily = instanceFamilyDecoded
        let offeringIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let paymentOptionDecoded = try containerValues.decodeIfPresent(PaymentOption.self, forKey: .paymentOption)
        paymentOption = paymentOptionDecoded
        let startDecoded = try containerValues.decodeIfPresent(String.self, forKey: .start)
        var startBuffer:Date? = nil
        if let startDecoded = startDecoded {
            startBuffer = try TimestampWrapperDecoder.parseDateStringValue(startDecoded, format: .dateTime)
        }
        start = startBuffer
        let stateDecoded = try containerValues.decodeIfPresent(ReservationState.self, forKey: .state)
        state = stateDecoded
        let upfrontPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .upfrontPrice)
        upfrontPrice = upfrontPriceDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
