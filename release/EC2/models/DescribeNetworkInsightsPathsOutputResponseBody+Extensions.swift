// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNetworkInsightsPathsOutputResponseBody: Equatable {
    public let networkInsightsPaths: [NetworkInsightsPath]?
    public let nextToken: String?
}

extension DescribeNetworkInsightsPathsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case networkInsightsPaths = "networkInsightsPathSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.networkInsightsPaths) {
            struct KeyVal0{struct item{}}
            let networkInsightsPathsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .networkInsightsPaths)
            if let networkInsightsPathsWrappedContainer = networkInsightsPathsWrappedContainer {
                let networkInsightsPathsContainer = try networkInsightsPathsWrappedContainer.decodeIfPresent([NetworkInsightsPath].self, forKey: .member)
                var networkInsightsPathsBuffer:[NetworkInsightsPath]? = nil
                if let networkInsightsPathsContainer = networkInsightsPathsContainer {
                    networkInsightsPathsBuffer = [NetworkInsightsPath]()
                    for structureContainer0 in networkInsightsPathsContainer {
                        networkInsightsPathsBuffer?.append(structureContainer0)
                    }
                }
                networkInsightsPaths = networkInsightsPathsBuffer
            } else {
                networkInsightsPaths = []
            }
        } else {
            networkInsightsPaths = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
