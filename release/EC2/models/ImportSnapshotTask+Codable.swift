// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImportSnapshotTask: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "description"
        case importTaskId = "importTaskId"
        case snapshotTaskDetail = "snapshotTaskDetail"
        case tags = "tagSet"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let importTaskId = importTaskId {
            try container.encode(importTaskId, forKey: Key("ImportTaskId"))
        }
        if let snapshotTaskDetail = snapshotTaskDetail {
            try container.encode(snapshotTaskDetail, forKey: Key("SnapshotTaskDetail"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let importTaskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .importTaskId)
        importTaskId = importTaskIdDecoded
        let snapshotTaskDetailDecoded = try containerValues.decodeIfPresent(SnapshotTaskDetail.self, forKey: .snapshotTaskDetail)
        snapshotTaskDetail = snapshotTaskDetailDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
