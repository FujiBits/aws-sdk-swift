// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateVolumeOutputResponseBody: Equatable {
    public let attachments: [VolumeAttachment]?
    public let availabilityZone: String?
    public let createTime: Date?
    public let encrypted: Bool
    public let kmsKeyId: String?
    public let outpostArn: String?
    public let size: Int
    public let snapshotId: String?
    public let state: VolumeState?
    public let volumeId: String?
    public let iops: Int
    public let tags: [Tag]?
    public let volumeType: VolumeType?
    public let fastRestored: Bool
    public let multiAttachEnabled: Bool
    public let throughput: Int
}

extension CreateVolumeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attachments = "attachmentSet"
        case availabilityZone = "availabilityZone"
        case createTime = "createTime"
        case encrypted = "encrypted"
        case fastRestored = "fastRestored"
        case iops = "iops"
        case kmsKeyId = "kmsKeyId"
        case multiAttachEnabled = "multiAttachEnabled"
        case outpostArn = "outpostArn"
        case size = "size"
        case snapshotId = "snapshotId"
        case state = "status"
        case tags = "tagSet"
        case throughput = "throughput"
        case volumeId = "volumeId"
        case volumeType = "volumeType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.attachments) {
            struct KeyVal0{struct item{}}
            let attachmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .attachments)
            if let attachmentsWrappedContainer = attachmentsWrappedContainer {
                let attachmentsContainer = try attachmentsWrappedContainer.decodeIfPresent([VolumeAttachment].self, forKey: .member)
                var attachmentsBuffer:[VolumeAttachment]? = nil
                if let attachmentsContainer = attachmentsContainer {
                    attachmentsBuffer = [VolumeAttachment]()
                    for structureContainer0 in attachmentsContainer {
                        attachmentsBuffer?.append(structureContainer0)
                    }
                }
                attachments = attachmentsBuffer
            } else {
                attachments = []
            }
        } else {
            attachments = nil
        }
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createTime)
        var createTimeBuffer:Date? = nil
        if let createTimeDecoded = createTimeDecoded {
            createTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(createTimeDecoded, format: .dateTime)
        }
        createTime = createTimeBuffer
        let encryptedDecoded = try containerValues.decode(Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
        let sizeDecoded = try containerValues.decode(Int.self, forKey: .size)
        size = sizeDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(VolumeState.self, forKey: .state)
        state = stateDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let iopsDecoded = try containerValues.decode(Int.self, forKey: .iops)
        iops = iopsDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let volumeTypeDecoded = try containerValues.decodeIfPresent(VolumeType.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let fastRestoredDecoded = try containerValues.decode(Bool.self, forKey: .fastRestored)
        fastRestored = fastRestoredDecoded
        let multiAttachEnabledDecoded = try containerValues.decode(Bool.self, forKey: .multiAttachEnabled)
        multiAttachEnabled = multiAttachEnabledDecoded
        let throughputDecoded = try containerValues.decode(Int.self, forKey: .throughput)
        throughput = throughputDecoded
    }
}
