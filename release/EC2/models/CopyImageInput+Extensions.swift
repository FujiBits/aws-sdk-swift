// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CopyImageInputHeadersMiddleware: Middleware {
    public let id: String = "CopyImageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CopyImageInput>,
                  next: H) -> Swift.Result<OperationOutput<CopyImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CopyImageInput>
    public typealias MOutput = OperationOutput<CopyImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CopyImageOutputError>
}

public struct CopyImageInputQueryItemMiddleware: Middleware {
    public let id: String = "CopyImageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CopyImageInput>,
                  next: H) -> Swift.Result<OperationOutput<CopyImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CopyImageInput>
    public typealias MOutput = OperationOutput<CopyImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CopyImageOutputError>
}

public struct CopyImageInputBodyMiddleware: Middleware {
    public let id: String = "CopyImageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CopyImageInput>,
                  next: H) -> Swift.Result<OperationOutput<CopyImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CopyImageInput>
    public typealias MOutput = OperationOutput<CopyImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CopyImageOutputError>
}

extension CopyImageInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: Key("ClientToken"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let destinationOutpostArn = destinationOutpostArn {
            try container.encode(destinationOutpostArn, forKey: Key("DestinationOutpostArn"))
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if encrypted != false {
            try container.encode(encrypted, forKey: Key("Encrypted"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: Key("KmsKeyId"))
        }
        if let name = name {
            try container.encode(name, forKey: Key("Name"))
        }
        if let sourceImageId = sourceImageId {
            try container.encode(sourceImageId, forKey: Key("SourceImageId"))
        }
        if let sourceRegion = sourceRegion {
            try container.encode(sourceRegion, forKey: Key("SourceRegion"))
        }
        try container.encode("CopyImage", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
