// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeIpv6PoolsOutputResponseBody: Equatable {
    public let ipv6Pools: [Ipv6Pool]?
    public let nextToken: String?
}

extension DescribeIpv6PoolsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case ipv6Pools = "ipv6PoolSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.ipv6Pools) {
            struct KeyVal0{struct item{}}
            let ipv6PoolsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipv6Pools)
            if let ipv6PoolsWrappedContainer = ipv6PoolsWrappedContainer {
                let ipv6PoolsContainer = try ipv6PoolsWrappedContainer.decodeIfPresent([Ipv6Pool].self, forKey: .member)
                var ipv6PoolsBuffer:[Ipv6Pool]? = nil
                if let ipv6PoolsContainer = ipv6PoolsContainer {
                    ipv6PoolsBuffer = [Ipv6Pool]()
                    for structureContainer0 in ipv6PoolsContainer {
                        ipv6PoolsBuffer?.append(structureContainer0)
                    }
                }
                ipv6Pools = ipv6PoolsBuffer
            } else {
                ipv6Pools = []
            }
        } else {
            ipv6Pools = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
