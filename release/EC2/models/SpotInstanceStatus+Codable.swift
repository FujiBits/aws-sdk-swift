// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SpotInstanceStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code = "code"
        case message = "message"
        case updateTime = "updateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let code = code {
            try container.encode(code, forKey: Key("Code"))
        }
        if let message = message {
            try container.encode(message, forKey: Key("Message"))
        }
        if let updateTime = updateTime {
            try container.encode(TimestampWrapper(updateTime, format: .dateTime), forKey: Key("UpdateTime"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let updateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updateTime)
        var updateTimeBuffer:Date? = nil
        if let updateTimeDecoded = updateTimeDecoded {
            updateTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(updateTimeDecoded, format: .dateTime)
        }
        updateTime = updateTimeBuffer
    }
}
