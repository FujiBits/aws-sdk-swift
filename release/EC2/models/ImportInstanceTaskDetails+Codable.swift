// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImportInstanceTaskDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "description"
        case instanceId = "instanceId"
        case platform = "platform"
        case volumes = "volumes"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let platform = platform {
            try container.encode(platform, forKey: Key("Platform"))
        }
        if let volumes = volumes {
            if !volumes.isEmpty {
                for (index0, importinstancevolumedetailitem0) in volumes.enumerated() {
                    var volumesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Volumes.\(index0.advanced(by: 1))"))
                    try volumesContainer0.encode(importinstancevolumedetailitem0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let platformDecoded = try containerValues.decodeIfPresent(PlatformValues.self, forKey: .platform)
        platform = platformDecoded
        if containerValues.contains(.volumes) {
            struct KeyVal0{struct item{}}
            let volumesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .volumes)
            if let volumesWrappedContainer = volumesWrappedContainer {
                let volumesContainer = try volumesWrappedContainer.decodeIfPresent([ImportInstanceVolumeDetailItem].self, forKey: .member)
                var volumesBuffer:[ImportInstanceVolumeDetailItem]? = nil
                if let volumesContainer = volumesContainer {
                    volumesBuffer = [ImportInstanceVolumeDetailItem]()
                    for structureContainer0 in volumesContainer {
                        volumesBuffer?.append(structureContainer0)
                    }
                }
                volumes = volumesBuffer
            } else {
                volumes = []
            }
        } else {
            volumes = nil
        }
    }
}
