// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DeleteRouteInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteRouteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteRouteInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteRouteInput>
    public typealias MOutput = OperationOutput<DeleteRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteRouteOutputError>
}

public struct DeleteRouteInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteRouteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteRouteInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteRouteInput>
    public typealias MOutput = OperationOutput<DeleteRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteRouteOutputError>
}

public struct DeleteRouteInputBodyMiddleware: Middleware {
    public let id: String = "DeleteRouteInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteRouteInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteRouteInput>
    public typealias MOutput = OperationOutput<DeleteRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteRouteOutputError>
}

extension DeleteRouteInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let destinationCidrBlock = destinationCidrBlock {
            try container.encode(destinationCidrBlock, forKey: Key("DestinationCidrBlock"))
        }
        if let destinationIpv6CidrBlock = destinationIpv6CidrBlock {
            try container.encode(destinationIpv6CidrBlock, forKey: Key("DestinationIpv6CidrBlock"))
        }
        if let destinationPrefixListId = destinationPrefixListId {
            try container.encode(destinationPrefixListId, forKey: Key("DestinationPrefixListId"))
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if let routeTableId = routeTableId {
            try container.encode(routeTableId, forKey: Key("RouteTableId"))
        }
        try container.encode("DeleteRoute", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
