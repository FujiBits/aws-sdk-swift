// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReservedInstanceLimitPrice: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case amount = "amount"
        case currencyCode = "currencyCode"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if amount != 0.0 {
            try container.encode(String(amount), forKey: Key("Amount"))
        }
        if let currencyCode = currencyCode {
            try container.encode(currencyCode, forKey: Key("CurrencyCode"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let amountDecoded = try containerValues.decode(Double.self, forKey: .amount)
        amount = amountDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(CurrencyCodeValues.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
    }
}
