// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFleetOutputResponseBody: Equatable {
    public let fleetId: String?
    public let errors: [CreateFleetError]?
    public let instances: [CreateFleetInstance]?
}

extension CreateFleetOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case errors = "errorSet"
        case fleetId = "fleetId"
        case instances = "fleetInstanceSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        if containerValues.contains(.errors) {
            struct KeyVal0{struct item{}}
            let errorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .errors)
            if let errorsWrappedContainer = errorsWrappedContainer {
                let errorsContainer = try errorsWrappedContainer.decodeIfPresent([CreateFleetError].self, forKey: .member)
                var errorsBuffer:[CreateFleetError]? = nil
                if let errorsContainer = errorsContainer {
                    errorsBuffer = [CreateFleetError]()
                    for structureContainer0 in errorsContainer {
                        errorsBuffer?.append(structureContainer0)
                    }
                }
                errors = errorsBuffer
            } else {
                errors = []
            }
        } else {
            errors = nil
        }
        if containerValues.contains(.instances) {
            struct KeyVal0{struct item{}}
            let instancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instances)
            if let instancesWrappedContainer = instancesWrappedContainer {
                let instancesContainer = try instancesWrappedContainer.decodeIfPresent([CreateFleetInstance].self, forKey: .member)
                var instancesBuffer:[CreateFleetInstance]? = nil
                if let instancesContainer = instancesContainer {
                    instancesBuffer = [CreateFleetInstance]()
                    for structureContainer0 in instancesContainer {
                        instancesBuffer?.append(structureContainer0)
                    }
                }
                instances = instancesBuffer
            } else {
                instances = []
            }
        } else {
            instances = nil
        }
    }
}
