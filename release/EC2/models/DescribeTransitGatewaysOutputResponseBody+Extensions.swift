// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTransitGatewaysOutputResponseBody: Equatable {
    public let transitGateways: [TransitGateway]?
    public let nextToken: String?
}

extension DescribeTransitGatewaysOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case transitGateways = "transitGatewaySet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.transitGateways) {
            struct KeyVal0{struct item{}}
            let transitGatewaysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .transitGateways)
            if let transitGatewaysWrappedContainer = transitGatewaysWrappedContainer {
                let transitGatewaysContainer = try transitGatewaysWrappedContainer.decodeIfPresent([TransitGateway].self, forKey: .member)
                var transitGatewaysBuffer:[TransitGateway]? = nil
                if let transitGatewaysContainer = transitGatewaysContainer {
                    transitGatewaysBuffer = [TransitGateway]()
                    for structureContainer0 in transitGatewaysContainer {
                        transitGatewaysBuffer?.append(structureContainer0)
                    }
                }
                transitGateways = transitGatewaysBuffer
            } else {
                transitGateways = []
            }
        } else {
            transitGateways = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
