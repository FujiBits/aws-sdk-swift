// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProvisionedBandwidth: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case provisionTime = "provisionTime"
        case provisioned = "provisioned"
        case requestTime = "requestTime"
        case requested = "requested"
        case status = "status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let provisionTime = provisionTime {
            try container.encode(TimestampWrapper(provisionTime, format: .dateTime), forKey: Key("ProvisionTime"))
        }
        if let provisioned = provisioned {
            try container.encode(provisioned, forKey: Key("Provisioned"))
        }
        if let requestTime = requestTime {
            try container.encode(TimestampWrapper(requestTime, format: .dateTime), forKey: Key("RequestTime"))
        }
        if let requested = requested {
            try container.encode(requested, forKey: Key("Requested"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let provisionTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .provisionTime)
        var provisionTimeBuffer:Date? = nil
        if let provisionTimeDecoded = provisionTimeDecoded {
            provisionTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(provisionTimeDecoded, format: .dateTime)
        }
        provisionTime = provisionTimeBuffer
        let provisionedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .provisioned)
        provisioned = provisionedDecoded
        let requestTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestTime)
        var requestTimeBuffer:Date? = nil
        if let requestTimeDecoded = requestTimeDecoded {
            requestTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(requestTimeDecoded, format: .dateTime)
        }
        requestTime = requestTimeBuffer
        let requestedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requested)
        requested = requestedDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
    }
}
