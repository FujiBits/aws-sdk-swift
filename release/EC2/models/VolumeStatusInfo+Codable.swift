// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VolumeStatusInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details = "details"
        case status = "status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let details = details {
            if !details.isEmpty {
                for (index0, volumestatusdetails0) in details.enumerated() {
                    var detailsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Details.\(index0.advanced(by: 1))"))
                    try detailsContainer0.encode(volumestatusdetails0, forKey: Key(""))
                }
            }
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.details) {
            struct KeyVal0{struct item{}}
            let detailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .details)
            if let detailsWrappedContainer = detailsWrappedContainer {
                let detailsContainer = try detailsWrappedContainer.decodeIfPresent([VolumeStatusDetails].self, forKey: .member)
                var detailsBuffer:[VolumeStatusDetails]? = nil
                if let detailsContainer = detailsContainer {
                    detailsBuffer = [VolumeStatusDetails]()
                    for structureContainer0 in detailsContainer {
                        detailsBuffer?.append(structureContainer0)
                    }
                }
                details = detailsBuffer
            } else {
                details = []
            }
        } else {
            details = nil
        }
        let statusDecoded = try containerValues.decodeIfPresent(VolumeStatusInfoStatus.self, forKey: .status)
        status = statusDecoded
    }
}
