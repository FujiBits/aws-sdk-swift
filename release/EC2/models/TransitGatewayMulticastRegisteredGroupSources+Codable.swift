// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransitGatewayMulticastRegisteredGroupSources: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case groupIpAddress = "groupIpAddress"
        case registeredNetworkInterfaceIds = "registeredNetworkInterfaceIds"
        case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let groupIpAddress = groupIpAddress {
            try container.encode(groupIpAddress, forKey: Key("GroupIpAddress"))
        }
        if let registeredNetworkInterfaceIds = registeredNetworkInterfaceIds {
            if !registeredNetworkInterfaceIds.isEmpty {
                for (index0, string0) in registeredNetworkInterfaceIds.enumerated() {
                    var registeredNetworkInterfaceIdsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("RegisteredNetworkInterfaceIds.\(index0.advanced(by: 1))"))
                    try registeredNetworkInterfaceIdsContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let transitGatewayMulticastDomainId = transitGatewayMulticastDomainId {
            try container.encode(transitGatewayMulticastDomainId, forKey: Key("TransitGatewayMulticastDomainId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transitGatewayMulticastDomainIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transitGatewayMulticastDomainId)
        transitGatewayMulticastDomainId = transitGatewayMulticastDomainIdDecoded
        if containerValues.contains(.registeredNetworkInterfaceIds) {
            struct KeyVal0{struct item{}}
            let registeredNetworkInterfaceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .registeredNetworkInterfaceIds)
            if let registeredNetworkInterfaceIdsWrappedContainer = registeredNetworkInterfaceIdsWrappedContainer {
                let registeredNetworkInterfaceIdsContainer = try registeredNetworkInterfaceIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var registeredNetworkInterfaceIdsBuffer:[String]? = nil
                if let registeredNetworkInterfaceIdsContainer = registeredNetworkInterfaceIdsContainer {
                    registeredNetworkInterfaceIdsBuffer = [String]()
                    for stringContainer0 in registeredNetworkInterfaceIdsContainer {
                        registeredNetworkInterfaceIdsBuffer?.append(stringContainer0)
                    }
                }
                registeredNetworkInterfaceIds = registeredNetworkInterfaceIdsBuffer
            } else {
                registeredNetworkInterfaceIds = []
            }
        } else {
            registeredNetworkInterfaceIds = nil
        }
        let groupIpAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupIpAddress)
        groupIpAddress = groupIpAddressDecoded
    }
}
