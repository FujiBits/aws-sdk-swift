// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SpotDatafeedSubscription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bucket = "bucket"
        case fault = "fault"
        case ownerId = "ownerId"
        case prefix = "prefix"
        case state = "state"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let bucket = bucket {
            try container.encode(bucket, forKey: Key("Bucket"))
        }
        if let fault = fault {
            try container.encode(fault, forKey: Key("Fault"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: Key("OwnerId"))
        }
        if let prefix = prefix {
            try container.encode(prefix, forKey: Key("Prefix"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bucket)
        bucket = bucketDecoded
        let faultDecoded = try containerValues.decodeIfPresent(SpotInstanceStateFault.self, forKey: .fault)
        fault = faultDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefix)
        prefix = prefixDecoded
        let stateDecoded = try containerValues.decodeIfPresent(DatafeedSubscriptionState.self, forKey: .state)
        state = stateDecoded
    }
}
