// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInstanceTypesOutputResponseBody: Equatable {
    public let instanceTypes: [InstanceTypeInfo]?
    public let nextToken: String?
}

extension DescribeInstanceTypesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceTypes = "instanceTypeSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceTypes) {
            struct KeyVal0{struct item{}}
            let instanceTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instanceTypes)
            if let instanceTypesWrappedContainer = instanceTypesWrappedContainer {
                let instanceTypesContainer = try instanceTypesWrappedContainer.decodeIfPresent([InstanceTypeInfo].self, forKey: .member)
                var instanceTypesBuffer:[InstanceTypeInfo]? = nil
                if let instanceTypesContainer = instanceTypesContainer {
                    instanceTypesBuffer = [InstanceTypeInfo]()
                    for structureContainer0 in instanceTypesContainer {
                        instanceTypesBuffer?.append(structureContainer0)
                    }
                }
                instanceTypes = instanceTypesBuffer
            } else {
                instanceTypes = []
            }
        } else {
            instanceTypes = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
