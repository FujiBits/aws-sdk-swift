// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ModifySubnetAttributeInputHeadersMiddleware: Middleware {
    public let id: String = "ModifySubnetAttributeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifySubnetAttributeInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifySubnetAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifySubnetAttributeInput>
    public typealias MOutput = OperationOutput<ModifySubnetAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifySubnetAttributeOutputError>
}

public struct ModifySubnetAttributeInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifySubnetAttributeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifySubnetAttributeInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifySubnetAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifySubnetAttributeInput>
    public typealias MOutput = OperationOutput<ModifySubnetAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifySubnetAttributeOutputError>
}

public struct ModifySubnetAttributeInputBodyMiddleware: Middleware {
    public let id: String = "ModifySubnetAttributeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifySubnetAttributeInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifySubnetAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifySubnetAttributeInput>
    public typealias MOutput = OperationOutput<ModifySubnetAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifySubnetAttributeOutputError>
}

extension ModifySubnetAttributeInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let assignIpv6AddressOnCreation = assignIpv6AddressOnCreation {
            try container.encode(assignIpv6AddressOnCreation, forKey: Key("AssignIpv6AddressOnCreation"))
        }
        if let customerOwnedIpv4Pool = customerOwnedIpv4Pool {
            try container.encode(customerOwnedIpv4Pool, forKey: Key("CustomerOwnedIpv4Pool"))
        }
        if let mapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch {
            try container.encode(mapCustomerOwnedIpOnLaunch, forKey: Key("MapCustomerOwnedIpOnLaunch"))
        }
        if let mapPublicIpOnLaunch = mapPublicIpOnLaunch {
            try container.encode(mapPublicIpOnLaunch, forKey: Key("MapPublicIpOnLaunch"))
        }
        if let subnetId = subnetId {
            try container.encode(subnetId, forKey: Key("SubnetId"))
        }
        try container.encode("ModifySubnetAttribute", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
