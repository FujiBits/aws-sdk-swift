// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ScheduledInstanceAvailability: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone = "availabilityZone"
        case availableInstanceCount = "availableInstanceCount"
        case firstSlotStartTime = "firstSlotStartTime"
        case hourlyPrice = "hourlyPrice"
        case instanceType = "instanceType"
        case maxTermDurationInDays = "maxTermDurationInDays"
        case minTermDurationInDays = "minTermDurationInDays"
        case networkPlatform = "networkPlatform"
        case platform = "platform"
        case purchaseToken = "purchaseToken"
        case recurrence = "recurrence"
        case slotDurationInHours = "slotDurationInHours"
        case totalScheduledInstanceHours = "totalScheduledInstanceHours"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: Key("AvailabilityZone"))
        }
        if availableInstanceCount != 0 {
            try container.encode(availableInstanceCount, forKey: Key("AvailableInstanceCount"))
        }
        if let firstSlotStartTime = firstSlotStartTime {
            try container.encode(TimestampWrapper(firstSlotStartTime, format: .dateTime), forKey: Key("FirstSlotStartTime"))
        }
        if let hourlyPrice = hourlyPrice {
            try container.encode(hourlyPrice, forKey: Key("HourlyPrice"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: Key("InstanceType"))
        }
        if maxTermDurationInDays != 0 {
            try container.encode(maxTermDurationInDays, forKey: Key("MaxTermDurationInDays"))
        }
        if minTermDurationInDays != 0 {
            try container.encode(minTermDurationInDays, forKey: Key("MinTermDurationInDays"))
        }
        if let networkPlatform = networkPlatform {
            try container.encode(networkPlatform, forKey: Key("NetworkPlatform"))
        }
        if let platform = platform {
            try container.encode(platform, forKey: Key("Platform"))
        }
        if let purchaseToken = purchaseToken {
            try container.encode(purchaseToken, forKey: Key("PurchaseToken"))
        }
        if let recurrence = recurrence {
            try container.encode(recurrence, forKey: Key("Recurrence"))
        }
        if slotDurationInHours != 0 {
            try container.encode(slotDurationInHours, forKey: Key("SlotDurationInHours"))
        }
        if totalScheduledInstanceHours != 0 {
            try container.encode(totalScheduledInstanceHours, forKey: Key("TotalScheduledInstanceHours"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let availableInstanceCountDecoded = try containerValues.decode(Int.self, forKey: .availableInstanceCount)
        availableInstanceCount = availableInstanceCountDecoded
        let firstSlotStartTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .firstSlotStartTime)
        var firstSlotStartTimeBuffer:Date? = nil
        if let firstSlotStartTimeDecoded = firstSlotStartTimeDecoded {
            firstSlotStartTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(firstSlotStartTimeDecoded, format: .dateTime)
        }
        firstSlotStartTime = firstSlotStartTimeBuffer
        let hourlyPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hourlyPrice)
        hourlyPrice = hourlyPriceDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let maxTermDurationInDaysDecoded = try containerValues.decode(Int.self, forKey: .maxTermDurationInDays)
        maxTermDurationInDays = maxTermDurationInDaysDecoded
        let minTermDurationInDaysDecoded = try containerValues.decode(Int.self, forKey: .minTermDurationInDays)
        minTermDurationInDays = minTermDurationInDaysDecoded
        let networkPlatformDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkPlatform)
        networkPlatform = networkPlatformDecoded
        let platformDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platform)
        platform = platformDecoded
        let purchaseTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .purchaseToken)
        purchaseToken = purchaseTokenDecoded
        let recurrenceDecoded = try containerValues.decodeIfPresent(ScheduledInstanceRecurrence.self, forKey: .recurrence)
        recurrence = recurrenceDecoded
        let slotDurationInHoursDecoded = try containerValues.decode(Int.self, forKey: .slotDurationInHours)
        slotDurationInHours = slotDurationInHoursDecoded
        let totalScheduledInstanceHoursDecoded = try containerValues.decode(Int.self, forKey: .totalScheduledInstanceHours)
        totalScheduledInstanceHours = totalScheduledInstanceHoursDecoded
    }
}
