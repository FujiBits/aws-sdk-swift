// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateFleetError: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case errorCode = "errorCode"
        case errorMessage = "errorMessage"
        case launchTemplateAndOverrides = "launchTemplateAndOverrides"
        case lifecycle = "lifecycle"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let errorCode = errorCode {
            try container.encode(errorCode, forKey: Key("ErrorCode"))
        }
        if let errorMessage = errorMessage {
            try container.encode(errorMessage, forKey: Key("ErrorMessage"))
        }
        if let launchTemplateAndOverrides = launchTemplateAndOverrides {
            try container.encode(launchTemplateAndOverrides, forKey: Key("LaunchTemplateAndOverrides"))
        }
        if let lifecycle = lifecycle {
            try container.encode(lifecycle, forKey: Key("Lifecycle"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateAndOverridesDecoded = try containerValues.decodeIfPresent(LaunchTemplateAndOverridesResponse.self, forKey: .launchTemplateAndOverrides)
        launchTemplateAndOverrides = launchTemplateAndOverridesDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(InstanceLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}
