// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImportVolumeTaskDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone = "availabilityZone"
        case bytesConverted = "bytesConverted"
        case description = "description"
        case image = "image"
        case volume = "volume"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: Key("AvailabilityZone"))
        }
        if bytesConverted != 0 {
            try container.encode(bytesConverted, forKey: Key("BytesConverted"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let image = image {
            try container.encode(image, forKey: Key("Image"))
        }
        if let volume = volume {
            try container.encode(volume, forKey: Key("Volume"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let bytesConvertedDecoded = try containerValues.decode(Int.self, forKey: .bytesConverted)
        bytesConverted = bytesConvertedDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let imageDecoded = try containerValues.decodeIfPresent(DiskImageDescription.self, forKey: .image)
        image = imageDecoded
        let volumeDecoded = try containerValues.decodeIfPresent(DiskImageVolumeDescription.self, forKey: .volume)
        volume = volumeDecoded
    }
}
