// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeFpgaImagesOutputResponseBody: Equatable {
    public let fpgaImages: [FpgaImage]?
    public let nextToken: String?
}

extension DescribeFpgaImagesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fpgaImages = "fpgaImageSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.fpgaImages) {
            struct KeyVal0{struct item{}}
            let fpgaImagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .fpgaImages)
            if let fpgaImagesWrappedContainer = fpgaImagesWrappedContainer {
                let fpgaImagesContainer = try fpgaImagesWrappedContainer.decodeIfPresent([FpgaImage].self, forKey: .member)
                var fpgaImagesBuffer:[FpgaImage]? = nil
                if let fpgaImagesContainer = fpgaImagesContainer {
                    fpgaImagesBuffer = [FpgaImage]()
                    for structureContainer0 in fpgaImagesContainer {
                        fpgaImagesBuffer?.append(structureContainer0)
                    }
                }
                fpgaImages = fpgaImagesBuffer
            } else {
                fpgaImages = []
            }
        } else {
            fpgaImages = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
