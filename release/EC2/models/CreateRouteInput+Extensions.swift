// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateRouteInputHeadersMiddleware: Middleware {
    public let id: String = "CreateRouteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRouteInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRouteInput>
    public typealias MOutput = OperationOutput<CreateRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRouteOutputError>
}

public struct CreateRouteInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateRouteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRouteInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRouteInput>
    public typealias MOutput = OperationOutput<CreateRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRouteOutputError>
}

public struct CreateRouteInputBodyMiddleware: Middleware {
    public let id: String = "CreateRouteInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRouteInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRouteInput>
    public typealias MOutput = OperationOutput<CreateRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRouteOutputError>
}

extension CreateRouteInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let carrierGatewayId = carrierGatewayId {
            try container.encode(carrierGatewayId, forKey: Key("CarrierGatewayId"))
        }
        if let destinationCidrBlock = destinationCidrBlock {
            try container.encode(destinationCidrBlock, forKey: Key("DestinationCidrBlock"))
        }
        if let destinationIpv6CidrBlock = destinationIpv6CidrBlock {
            try container.encode(destinationIpv6CidrBlock, forKey: Key("DestinationIpv6CidrBlock"))
        }
        if let destinationPrefixListId = destinationPrefixListId {
            try container.encode(destinationPrefixListId, forKey: Key("DestinationPrefixListId"))
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if let egressOnlyInternetGatewayId = egressOnlyInternetGatewayId {
            try container.encode(egressOnlyInternetGatewayId, forKey: Key("EgressOnlyInternetGatewayId"))
        }
        if let gatewayId = gatewayId {
            try container.encode(gatewayId, forKey: Key("GatewayId"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let localGatewayId = localGatewayId {
            try container.encode(localGatewayId, forKey: Key("LocalGatewayId"))
        }
        if let natGatewayId = natGatewayId {
            try container.encode(natGatewayId, forKey: Key("NatGatewayId"))
        }
        if let networkInterfaceId = networkInterfaceId {
            try container.encode(networkInterfaceId, forKey: Key("NetworkInterfaceId"))
        }
        if let routeTableId = routeTableId {
            try container.encode(routeTableId, forKey: Key("RouteTableId"))
        }
        if let transitGatewayId = transitGatewayId {
            try container.encode(transitGatewayId, forKey: Key("TransitGatewayId"))
        }
        if let vpcEndpointId = vpcEndpointId {
            try container.encode(vpcEndpointId, forKey: Key("VpcEndpointId"))
        }
        if let vpcPeeringConnectionId = vpcPeeringConnectionId {
            try container.encode(vpcPeeringConnectionId, forKey: Key("VpcPeeringConnectionId"))
        }
        try container.encode("CreateRoute", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
