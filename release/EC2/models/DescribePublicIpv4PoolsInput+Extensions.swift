// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribePublicIpv4PoolsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribePublicIpv4PoolsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribePublicIpv4PoolsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribePublicIpv4PoolsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribePublicIpv4PoolsInput>
    public typealias MOutput = OperationOutput<DescribePublicIpv4PoolsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribePublicIpv4PoolsOutputError>
}

public struct DescribePublicIpv4PoolsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribePublicIpv4PoolsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribePublicIpv4PoolsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribePublicIpv4PoolsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribePublicIpv4PoolsInput>
    public typealias MOutput = OperationOutput<DescribePublicIpv4PoolsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribePublicIpv4PoolsOutputError>
}

public struct DescribePublicIpv4PoolsInputBodyMiddleware: Middleware {
    public let id: String = "DescribePublicIpv4PoolsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribePublicIpv4PoolsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribePublicIpv4PoolsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribePublicIpv4PoolsInput>
    public typealias MOutput = OperationOutput<DescribePublicIpv4PoolsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribePublicIpv4PoolsOutputError>
}

extension DescribePublicIpv4PoolsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let filters = filters {
            if !filters.isEmpty {
                for (index0, filter0) in filters.enumerated() {
                    var filtersContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Filter.\(index0.advanced(by: 1))"))
                    try filtersContainer0.encode(filter0, forKey: Key(""))
                }
            }
        }
        if maxResults != 0 {
            try container.encode(maxResults, forKey: Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        if let poolIds = poolIds {
            if !poolIds.isEmpty {
                for (index0, ipv4poolec2id0) in poolIds.enumerated() {
                    var poolIdsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("PoolId.\(index0.advanced(by: 1))"))
                    try poolIdsContainer0.encode(ipv4poolec2id0, forKey: Key(""))
                }
            }
        }
        try container.encode("DescribePublicIpv4Pools", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
