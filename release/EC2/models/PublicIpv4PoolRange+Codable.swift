// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PublicIpv4PoolRange: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addressCount = "addressCount"
        case availableAddressCount = "availableAddressCount"
        case firstAddress = "firstAddress"
        case lastAddress = "lastAddress"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if addressCount != 0 {
            try container.encode(addressCount, forKey: Key("AddressCount"))
        }
        if availableAddressCount != 0 {
            try container.encode(availableAddressCount, forKey: Key("AvailableAddressCount"))
        }
        if let firstAddress = firstAddress {
            try container.encode(firstAddress, forKey: Key("FirstAddress"))
        }
        if let lastAddress = lastAddress {
            try container.encode(lastAddress, forKey: Key("LastAddress"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firstAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .firstAddress)
        firstAddress = firstAddressDecoded
        let lastAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastAddress)
        lastAddress = lastAddressDecoded
        let addressCountDecoded = try containerValues.decode(Int.self, forKey: .addressCount)
        addressCount = addressCountDecoded
        let availableAddressCountDecoded = try containerValues.decode(Int.self, forKey: .availableAddressCount)
        availableAddressCount = availableAddressCountDecoded
    }
}
