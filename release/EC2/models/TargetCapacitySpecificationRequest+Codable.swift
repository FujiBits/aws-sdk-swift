// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TargetCapacitySpecificationRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultTargetCapacityType = "DefaultTargetCapacityType"
        case onDemandTargetCapacity = "OnDemandTargetCapacity"
        case spotTargetCapacity = "SpotTargetCapacity"
        case totalTargetCapacity = "TotalTargetCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let defaultTargetCapacityType = defaultTargetCapacityType {
            try container.encode(defaultTargetCapacityType, forKey: Key("DefaultTargetCapacityType"))
        }
        if onDemandTargetCapacity != 0 {
            try container.encode(onDemandTargetCapacity, forKey: Key("OnDemandTargetCapacity"))
        }
        if spotTargetCapacity != 0 {
            try container.encode(spotTargetCapacity, forKey: Key("SpotTargetCapacity"))
        }
        if totalTargetCapacity != 0 {
            try container.encode(totalTargetCapacity, forKey: Key("TotalTargetCapacity"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalTargetCapacityDecoded = try containerValues.decode(Int.self, forKey: .totalTargetCapacity)
        totalTargetCapacity = totalTargetCapacityDecoded
        let onDemandTargetCapacityDecoded = try containerValues.decode(Int.self, forKey: .onDemandTargetCapacity)
        onDemandTargetCapacity = onDemandTargetCapacityDecoded
        let spotTargetCapacityDecoded = try containerValues.decode(Int.self, forKey: .spotTargetCapacity)
        spotTargetCapacity = spotTargetCapacityDecoded
        let defaultTargetCapacityTypeDecoded = try containerValues.decodeIfPresent(DefaultTargetCapacityType.self, forKey: .defaultTargetCapacityType)
        defaultTargetCapacityType = defaultTargetCapacityTypeDecoded
    }
}
