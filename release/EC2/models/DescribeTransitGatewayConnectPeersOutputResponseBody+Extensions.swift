// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTransitGatewayConnectPeersOutputResponseBody: Equatable {
    public let transitGatewayConnectPeers: [TransitGatewayConnectPeer]?
    public let nextToken: String?
}

extension DescribeTransitGatewayConnectPeersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case transitGatewayConnectPeers = "transitGatewayConnectPeerSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.transitGatewayConnectPeers) {
            struct KeyVal0{struct item{}}
            let transitGatewayConnectPeersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .transitGatewayConnectPeers)
            if let transitGatewayConnectPeersWrappedContainer = transitGatewayConnectPeersWrappedContainer {
                let transitGatewayConnectPeersContainer = try transitGatewayConnectPeersWrappedContainer.decodeIfPresent([TransitGatewayConnectPeer].self, forKey: .member)
                var transitGatewayConnectPeersBuffer:[TransitGatewayConnectPeer]? = nil
                if let transitGatewayConnectPeersContainer = transitGatewayConnectPeersContainer {
                    transitGatewayConnectPeersBuffer = [TransitGatewayConnectPeer]()
                    for structureContainer0 in transitGatewayConnectPeersContainer {
                        transitGatewayConnectPeersBuffer?.append(structureContainer0)
                    }
                }
                transitGatewayConnectPeers = transitGatewayConnectPeersBuffer
            } else {
                transitGatewayConnectPeers = []
            }
        } else {
            transitGatewayConnectPeers = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
