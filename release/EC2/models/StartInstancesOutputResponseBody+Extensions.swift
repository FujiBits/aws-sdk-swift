// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartInstancesOutputResponseBody: Equatable {
    public let startingInstances: [InstanceStateChange]?
}

extension StartInstancesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case startingInstances = "instancesSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.startingInstances) {
            struct KeyVal0{struct item{}}
            let startingInstancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .startingInstances)
            if let startingInstancesWrappedContainer = startingInstancesWrappedContainer {
                let startingInstancesContainer = try startingInstancesWrappedContainer.decodeIfPresent([InstanceStateChange].self, forKey: .member)
                var startingInstancesBuffer:[InstanceStateChange]? = nil
                if let startingInstancesContainer = startingInstancesContainer {
                    startingInstancesBuffer = [InstanceStateChange]()
                    for structureContainer0 in startingInstancesContainer {
                        startingInstancesBuffer?.append(structureContainer0)
                    }
                }
                startingInstances = startingInstancesBuffer
            } else {
                startingInstances = []
            }
        } else {
            startingInstances = nil
        }
    }
}
