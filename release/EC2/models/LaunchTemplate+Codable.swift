// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LaunchTemplate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createTime = "createTime"
        case createdBy = "createdBy"
        case defaultVersionNumber = "defaultVersionNumber"
        case latestVersionNumber = "latestVersionNumber"
        case launchTemplateId = "launchTemplateId"
        case launchTemplateName = "launchTemplateName"
        case tags = "tagSet"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let createTime = createTime {
            try container.encode(TimestampWrapper(createTime, format: .dateTime), forKey: Key("CreateTime"))
        }
        if let createdBy = createdBy {
            try container.encode(createdBy, forKey: Key("CreatedBy"))
        }
        if defaultVersionNumber != 0 {
            try container.encode(defaultVersionNumber, forKey: Key("DefaultVersionNumber"))
        }
        if latestVersionNumber != 0 {
            try container.encode(latestVersionNumber, forKey: Key("LatestVersionNumber"))
        }
        if let launchTemplateId = launchTemplateId {
            try container.encode(launchTemplateId, forKey: Key("LaunchTemplateId"))
        }
        if let launchTemplateName = launchTemplateName {
            try container.encode(launchTemplateName, forKey: Key("LaunchTemplateName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchTemplateId)
        launchTemplateId = launchTemplateIdDecoded
        let launchTemplateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchTemplateName)
        launchTemplateName = launchTemplateNameDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createTime)
        var createTimeBuffer:Date? = nil
        if let createTimeDecoded = createTimeDecoded {
            createTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(createTimeDecoded, format: .dateTime)
        }
        createTime = createTimeBuffer
        let createdByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let defaultVersionNumberDecoded = try containerValues.decode(Int.self, forKey: .defaultVersionNumber)
        defaultVersionNumber = defaultVersionNumberDecoded
        let latestVersionNumberDecoded = try containerValues.decode(Int.self, forKey: .latestVersionNumber)
        latestVersionNumber = latestVersionNumberDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
