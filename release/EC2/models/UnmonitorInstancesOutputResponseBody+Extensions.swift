// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UnmonitorInstancesOutputResponseBody: Equatable {
    public let instanceMonitorings: [InstanceMonitoring]?
}

extension UnmonitorInstancesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceMonitorings = "instancesSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceMonitorings) {
            struct KeyVal0{struct item{}}
            let instanceMonitoringsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instanceMonitorings)
            if let instanceMonitoringsWrappedContainer = instanceMonitoringsWrappedContainer {
                let instanceMonitoringsContainer = try instanceMonitoringsWrappedContainer.decodeIfPresent([InstanceMonitoring].self, forKey: .member)
                var instanceMonitoringsBuffer:[InstanceMonitoring]? = nil
                if let instanceMonitoringsContainer = instanceMonitoringsContainer {
                    instanceMonitoringsBuffer = [InstanceMonitoring]()
                    for structureContainer0 in instanceMonitoringsContainer {
                        instanceMonitoringsBuffer?.append(structureContainer0)
                    }
                }
                instanceMonitorings = instanceMonitoringsBuffer
            } else {
                instanceMonitorings = []
            }
        } else {
            instanceMonitorings = nil
        }
    }
}
