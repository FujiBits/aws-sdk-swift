// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetManagedPrefixListAssociationsOutputResponseBody: Equatable {
    public let prefixListAssociations: [PrefixListAssociation]?
    public let nextToken: String?
}

extension GetManagedPrefixListAssociationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case prefixListAssociations = "prefixListAssociationSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.prefixListAssociations) {
            struct KeyVal0{struct item{}}
            let prefixListAssociationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .prefixListAssociations)
            if let prefixListAssociationsWrappedContainer = prefixListAssociationsWrappedContainer {
                let prefixListAssociationsContainer = try prefixListAssociationsWrappedContainer.decodeIfPresent([PrefixListAssociation].self, forKey: .member)
                var prefixListAssociationsBuffer:[PrefixListAssociation]? = nil
                if let prefixListAssociationsContainer = prefixListAssociationsContainer {
                    prefixListAssociationsBuffer = [PrefixListAssociation]()
                    for structureContainer0 in prefixListAssociationsContainer {
                        prefixListAssociationsBuffer?.append(structureContainer0)
                    }
                }
                prefixListAssociations = prefixListAssociationsBuffer
            } else {
                prefixListAssociations = []
            }
        } else {
            prefixListAssociations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
