// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetManagedPrefixListEntriesOutputResponseBody: Equatable {
    public let entries: [PrefixListEntry]?
    public let nextToken: String?
}

extension GetManagedPrefixListEntriesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case entries = "entrySet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.entries) {
            struct KeyVal0{struct item{}}
            let entriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .entries)
            if let entriesWrappedContainer = entriesWrappedContainer {
                let entriesContainer = try entriesWrappedContainer.decodeIfPresent([PrefixListEntry].self, forKey: .member)
                var entriesBuffer:[PrefixListEntry]? = nil
                if let entriesContainer = entriesContainer {
                    entriesBuffer = [PrefixListEntry]()
                    for structureContainer0 in entriesContainer {
                        entriesBuffer?.append(structureContainer0)
                    }
                }
                entries = entriesBuffer
            } else {
                entries = []
            }
        } else {
            entries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
