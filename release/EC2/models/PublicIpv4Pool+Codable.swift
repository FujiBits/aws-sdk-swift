// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PublicIpv4Pool: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "description"
        case networkBorderGroup = "networkBorderGroup"
        case poolAddressRanges = "poolAddressRangeSet"
        case poolId = "poolId"
        case tags = "tagSet"
        case totalAddressCount = "totalAddressCount"
        case totalAvailableAddressCount = "totalAvailableAddressCount"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let networkBorderGroup = networkBorderGroup {
            try container.encode(networkBorderGroup, forKey: Key("NetworkBorderGroup"))
        }
        if let poolAddressRanges = poolAddressRanges {
            if !poolAddressRanges.isEmpty {
                for (index0, publicipv4poolrange0) in poolAddressRanges.enumerated() {
                    var poolAddressRangesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("PoolAddressRangeSet.\(index0.advanced(by: 1))"))
                    try poolAddressRangesContainer0.encode(publicipv4poolrange0, forKey: Key(""))
                }
            }
        }
        if let poolId = poolId {
            try container.encode(poolId, forKey: Key("PoolId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
        if totalAddressCount != 0 {
            try container.encode(totalAddressCount, forKey: Key("TotalAddressCount"))
        }
        if totalAvailableAddressCount != 0 {
            try container.encode(totalAvailableAddressCount, forKey: Key("TotalAvailableAddressCount"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let poolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .poolId)
        poolId = poolIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.poolAddressRanges) {
            struct KeyVal0{struct item{}}
            let poolAddressRangesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .poolAddressRanges)
            if let poolAddressRangesWrappedContainer = poolAddressRangesWrappedContainer {
                let poolAddressRangesContainer = try poolAddressRangesWrappedContainer.decodeIfPresent([PublicIpv4PoolRange].self, forKey: .member)
                var poolAddressRangesBuffer:[PublicIpv4PoolRange]? = nil
                if let poolAddressRangesContainer = poolAddressRangesContainer {
                    poolAddressRangesBuffer = [PublicIpv4PoolRange]()
                    for structureContainer0 in poolAddressRangesContainer {
                        poolAddressRangesBuffer?.append(structureContainer0)
                    }
                }
                poolAddressRanges = poolAddressRangesBuffer
            } else {
                poolAddressRanges = []
            }
        } else {
            poolAddressRanges = nil
        }
        let totalAddressCountDecoded = try containerValues.decode(Int.self, forKey: .totalAddressCount)
        totalAddressCount = totalAddressCountDecoded
        let totalAvailableAddressCountDecoded = try containerValues.decode(Int.self, forKey: .totalAvailableAddressCount)
        totalAvailableAddressCount = totalAvailableAddressCountDecoded
        let networkBorderGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkBorderGroup)
        networkBorderGroup = networkBorderGroupDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
