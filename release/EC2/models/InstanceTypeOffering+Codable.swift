// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceTypeOffering: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceType = "instanceType"
        case location = "location"
        case locationType = "locationType"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: Key("InstanceType"))
        }
        if let location = location {
            try container.encode(location, forKey: Key("Location"))
        }
        if let locationType = locationType {
            try container.encode(locationType, forKey: Key("LocationType"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let locationTypeDecoded = try containerValues.decodeIfPresent(LocationType.self, forKey: .locationType)
        locationType = locationTypeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}
