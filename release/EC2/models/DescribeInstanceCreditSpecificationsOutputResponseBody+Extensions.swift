// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInstanceCreditSpecificationsOutputResponseBody: Equatable {
    public let instanceCreditSpecifications: [InstanceCreditSpecification]?
    public let nextToken: String?
}

extension DescribeInstanceCreditSpecificationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceCreditSpecifications = "instanceCreditSpecificationSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.instanceCreditSpecifications) {
            struct KeyVal0{struct item{}}
            let instanceCreditSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instanceCreditSpecifications)
            if let instanceCreditSpecificationsWrappedContainer = instanceCreditSpecificationsWrappedContainer {
                let instanceCreditSpecificationsContainer = try instanceCreditSpecificationsWrappedContainer.decodeIfPresent([InstanceCreditSpecification].self, forKey: .member)
                var instanceCreditSpecificationsBuffer:[InstanceCreditSpecification]? = nil
                if let instanceCreditSpecificationsContainer = instanceCreditSpecificationsContainer {
                    instanceCreditSpecificationsBuffer = [InstanceCreditSpecification]()
                    for structureContainer0 in instanceCreditSpecificationsContainer {
                        instanceCreditSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                instanceCreditSpecifications = instanceCreditSpecificationsBuffer
            } else {
                instanceCreditSpecifications = []
            }
        } else {
            instanceCreditSpecifications = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
