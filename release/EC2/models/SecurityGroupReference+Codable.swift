// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityGroupReference: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case groupId = "groupId"
        case referencingVpcId = "referencingVpcId"
        case vpcPeeringConnectionId = "vpcPeeringConnectionId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let groupId = groupId {
            try container.encode(groupId, forKey: Key("GroupId"))
        }
        if let referencingVpcId = referencingVpcId {
            try container.encode(referencingVpcId, forKey: Key("ReferencingVpcId"))
        }
        if let vpcPeeringConnectionId = vpcPeeringConnectionId {
            try container.encode(vpcPeeringConnectionId, forKey: Key("VpcPeeringConnectionId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let referencingVpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .referencingVpcId)
        referencingVpcId = referencingVpcIdDecoded
        let vpcPeeringConnectionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcPeeringConnectionId)
        vpcPeeringConnectionId = vpcPeeringConnectionIdDecoded
    }
}
