// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceStorageInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case disks = "disks"
        case nvmeSupport = "nvmeSupport"
        case totalSizeInGB = "totalSizeInGB"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let disks = disks {
            if !disks.isEmpty {
                for (index0, diskinfo0) in disks.enumerated() {
                    var disksContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Disks.\(index0.advanced(by: 1))"))
                    try disksContainer0.encode(diskinfo0, forKey: Key(""))
                }
            }
        }
        if let nvmeSupport = nvmeSupport {
            try container.encode(nvmeSupport, forKey: Key("NvmeSupport"))
        }
        if let totalSizeInGB = totalSizeInGB {
            try container.encode(totalSizeInGB, forKey: Key("TotalSizeInGB"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalSizeInGBDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .totalSizeInGB)
        totalSizeInGB = totalSizeInGBDecoded
        if containerValues.contains(.disks) {
            struct KeyVal0{struct item{}}
            let disksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .disks)
            if let disksWrappedContainer = disksWrappedContainer {
                let disksContainer = try disksWrappedContainer.decodeIfPresent([DiskInfo].self, forKey: .member)
                var disksBuffer:[DiskInfo]? = nil
                if let disksContainer = disksContainer {
                    disksBuffer = [DiskInfo]()
                    for structureContainer0 in disksContainer {
                        disksBuffer?.append(structureContainer0)
                    }
                }
                disks = disksBuffer
            } else {
                disks = []
            }
        } else {
            disks = nil
        }
        let nvmeSupportDecoded = try containerValues.decodeIfPresent(EphemeralNvmeSupport.self, forKey: .nvmeSupport)
        nvmeSupport = nvmeSupportDecoded
    }
}
