// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkCardInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maximumNetworkInterfaces = "maximumNetworkInterfaces"
        case networkCardIndex = "networkCardIndex"
        case networkPerformance = "networkPerformance"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let maximumNetworkInterfaces = maximumNetworkInterfaces {
            try container.encode(maximumNetworkInterfaces, forKey: Key("MaximumNetworkInterfaces"))
        }
        if let networkCardIndex = networkCardIndex {
            try container.encode(networkCardIndex, forKey: Key("NetworkCardIndex"))
        }
        if let networkPerformance = networkPerformance {
            try container.encode(networkPerformance, forKey: Key("NetworkPerformance"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkCardIndexDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .networkCardIndex)
        networkCardIndex = networkCardIndexDecoded
        let networkPerformanceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkPerformance)
        networkPerformance = networkPerformanceDecoded
        let maximumNetworkInterfacesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumNetworkInterfaces)
        maximumNetworkInterfaces = maximumNetworkInterfacesDecoded
    }
}
