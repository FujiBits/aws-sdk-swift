// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DisableFastSnapshotRestoreStateErrorItem: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone = "availabilityZone"
        case error = "error"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: Key("AvailabilityZone"))
        }
        if let error = error {
            try container.encode(error, forKey: Key("Error"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let errorDecoded = try containerValues.decodeIfPresent(DisableFastSnapshotRestoreStateError.self, forKey: .error)
        error = errorDecoded
    }
}
