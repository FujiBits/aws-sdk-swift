// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RegisterImageInputHeadersMiddleware: Middleware {
    public let id: String = "RegisterImageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterImageInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterImageInput>
    public typealias MOutput = OperationOutput<RegisterImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterImageOutputError>
}

public struct RegisterImageInputQueryItemMiddleware: Middleware {
    public let id: String = "RegisterImageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterImageInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterImageInput>
    public typealias MOutput = OperationOutput<RegisterImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterImageOutputError>
}

public struct RegisterImageInputBodyMiddleware: Middleware {
    public let id: String = "RegisterImageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterImageInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterImageInput>
    public typealias MOutput = OperationOutput<RegisterImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterImageOutputError>
}

extension RegisterImageInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let architecture = architecture {
            try container.encode(architecture, forKey: Key("Architecture"))
        }
        if let billingProducts = billingProducts {
            if !billingProducts.isEmpty {
                for (index0, string0) in billingProducts.enumerated() {
                    var billingProductsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("BillingProduct.\(index0.advanced(by: 1))"))
                    try billingProductsContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let blockDeviceMappings = blockDeviceMappings {
            if !blockDeviceMappings.isEmpty {
                for (index0, blockdevicemapping0) in blockDeviceMappings.enumerated() {
                    var blockDeviceMappingsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("BlockDeviceMapping.\(index0.advanced(by: 1))"))
                    try blockDeviceMappingsContainer0.encode(blockdevicemapping0, forKey: Key(""))
                }
            }
        }
        if let bootMode = bootMode {
            try container.encode(bootMode, forKey: Key("BootMode"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if enaSupport != false {
            try container.encode(enaSupport, forKey: Key("EnaSupport"))
        }
        if let imageLocation = imageLocation {
            try container.encode(imageLocation, forKey: Key("ImageLocation"))
        }
        if let kernelId = kernelId {
            try container.encode(kernelId, forKey: Key("KernelId"))
        }
        if let name = name {
            try container.encode(name, forKey: Key("Name"))
        }
        if let ramdiskId = ramdiskId {
            try container.encode(ramdiskId, forKey: Key("RamdiskId"))
        }
        if let rootDeviceName = rootDeviceName {
            try container.encode(rootDeviceName, forKey: Key("RootDeviceName"))
        }
        if let sriovNetSupport = sriovNetSupport {
            try container.encode(sriovNetSupport, forKey: Key("SriovNetSupport"))
        }
        if let virtualizationType = virtualizationType {
            try container.encode(virtualizationType, forKey: Key("VirtualizationType"))
        }
        try container.encode("RegisterImage", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
