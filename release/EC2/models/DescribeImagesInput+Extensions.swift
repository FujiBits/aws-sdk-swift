// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeImagesInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeImagesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeImagesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeImagesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeImagesInput>
    public typealias MOutput = OperationOutput<DescribeImagesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeImagesOutputError>
}

public struct DescribeImagesInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeImagesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeImagesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeImagesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeImagesInput>
    public typealias MOutput = OperationOutput<DescribeImagesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeImagesOutputError>
}

public struct DescribeImagesInputBodyMiddleware: Middleware {
    public let id: String = "DescribeImagesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeImagesInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeImagesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeImagesInput>
    public typealias MOutput = OperationOutput<DescribeImagesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeImagesOutputError>
}

extension DescribeImagesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if let executableUsers = executableUsers {
            if !executableUsers.isEmpty {
                for (index0, string0) in executableUsers.enumerated() {
                    var executableUsersContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("ExecutableBy.\(index0.advanced(by: 1))"))
                    try executableUsersContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let filters = filters {
            if !filters.isEmpty {
                for (index0, filter0) in filters.enumerated() {
                    var filtersContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Filter.\(index0.advanced(by: 1))"))
                    try filtersContainer0.encode(filter0, forKey: Key(""))
                }
            }
        }
        if let imageIds = imageIds {
            if !imageIds.isEmpty {
                for (index0, imageid0) in imageIds.enumerated() {
                    var imageIdsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("ImageId.\(index0.advanced(by: 1))"))
                    try imageIdsContainer0.encode(imageid0, forKey: Key(""))
                }
            }
        }
        if let owners = owners {
            if !owners.isEmpty {
                for (index0, string0) in owners.enumerated() {
                    var ownersContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Owner.\(index0.advanced(by: 1))"))
                    try ownersContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        try container.encode("DescribeImages", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
