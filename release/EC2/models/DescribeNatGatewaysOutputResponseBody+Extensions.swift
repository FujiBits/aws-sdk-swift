// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNatGatewaysOutputResponseBody: Equatable {
    public let natGateways: [NatGateway]?
    public let nextToken: String?
}

extension DescribeNatGatewaysOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case natGateways = "natGatewaySet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.natGateways) {
            struct KeyVal0{struct item{}}
            let natGatewaysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .natGateways)
            if let natGatewaysWrappedContainer = natGatewaysWrappedContainer {
                let natGatewaysContainer = try natGatewaysWrappedContainer.decodeIfPresent([NatGateway].self, forKey: .member)
                var natGatewaysBuffer:[NatGateway]? = nil
                if let natGatewaysContainer = natGatewaysContainer {
                    natGatewaysBuffer = [NatGateway]()
                    for structureContainer0 in natGatewaysContainer {
                        natGatewaysBuffer?.append(structureContainer0)
                    }
                }
                natGateways = natGatewaysBuffer
            } else {
                natGateways = []
            }
        } else {
            natGateways = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
