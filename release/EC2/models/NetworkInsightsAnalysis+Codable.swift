// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkInsightsAnalysis: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alternatePathHints = "alternatePathHintSet"
        case explanations = "explanationSet"
        case filterInArns = "filterInArnSet"
        case forwardPathComponents = "forwardPathComponentSet"
        case networkInsightsAnalysisArn = "networkInsightsAnalysisArn"
        case networkInsightsAnalysisId = "networkInsightsAnalysisId"
        case networkInsightsPathId = "networkInsightsPathId"
        case networkPathFound = "networkPathFound"
        case returnPathComponents = "returnPathComponentSet"
        case startDate = "startDate"
        case status = "status"
        case statusMessage = "statusMessage"
        case tags = "tagSet"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let alternatePathHints = alternatePathHints {
            if !alternatePathHints.isEmpty {
                for (index0, alternatepathhint0) in alternatePathHints.enumerated() {
                    var alternatePathHintsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("AlternatePathHintSet.\(index0.advanced(by: 1))"))
                    try alternatePathHintsContainer0.encode(alternatepathhint0, forKey: Key(""))
                }
            }
        }
        if let explanations = explanations {
            if !explanations.isEmpty {
                for (index0, explanation0) in explanations.enumerated() {
                    var explanationsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("ExplanationSet.\(index0.advanced(by: 1))"))
                    try explanationsContainer0.encode(explanation0, forKey: Key(""))
                }
            }
        }
        if let filterInArns = filterInArns {
            if !filterInArns.isEmpty {
                for (index0, resourcearn0) in filterInArns.enumerated() {
                    var filterInArnsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("FilterInArnSet.\(index0.advanced(by: 1))"))
                    try filterInArnsContainer0.encode(resourcearn0, forKey: Key(""))
                }
            }
        }
        if let forwardPathComponents = forwardPathComponents {
            if !forwardPathComponents.isEmpty {
                for (index0, pathcomponent0) in forwardPathComponents.enumerated() {
                    var forwardPathComponentsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("ForwardPathComponentSet.\(index0.advanced(by: 1))"))
                    try forwardPathComponentsContainer0.encode(pathcomponent0, forKey: Key(""))
                }
            }
        }
        if let networkInsightsAnalysisArn = networkInsightsAnalysisArn {
            try container.encode(networkInsightsAnalysisArn, forKey: Key("NetworkInsightsAnalysisArn"))
        }
        if let networkInsightsAnalysisId = networkInsightsAnalysisId {
            try container.encode(networkInsightsAnalysisId, forKey: Key("NetworkInsightsAnalysisId"))
        }
        if let networkInsightsPathId = networkInsightsPathId {
            try container.encode(networkInsightsPathId, forKey: Key("NetworkInsightsPathId"))
        }
        if networkPathFound != false {
            try container.encode(networkPathFound, forKey: Key("NetworkPathFound"))
        }
        if let returnPathComponents = returnPathComponents {
            if !returnPathComponents.isEmpty {
                for (index0, pathcomponent0) in returnPathComponents.enumerated() {
                    var returnPathComponentsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReturnPathComponentSet.\(index0.advanced(by: 1))"))
                    try returnPathComponentsContainer0.encode(pathcomponent0, forKey: Key(""))
                }
            }
        }
        if let startDate = startDate {
            try container.encode(TimestampWrapper(startDate, format: .dateTime), forKey: Key("StartDate"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: Key("StatusMessage"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkInsightsAnalysisIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkInsightsAnalysisId)
        networkInsightsAnalysisId = networkInsightsAnalysisIdDecoded
        let networkInsightsAnalysisArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkInsightsAnalysisArn)
        networkInsightsAnalysisArn = networkInsightsAnalysisArnDecoded
        let networkInsightsPathIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkInsightsPathId)
        networkInsightsPathId = networkInsightsPathIdDecoded
        if containerValues.contains(.filterInArns) {
            struct KeyVal0{struct item{}}
            let filterInArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .filterInArns)
            if let filterInArnsWrappedContainer = filterInArnsWrappedContainer {
                let filterInArnsContainer = try filterInArnsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var filterInArnsBuffer:[String]? = nil
                if let filterInArnsContainer = filterInArnsContainer {
                    filterInArnsBuffer = [String]()
                    for stringContainer0 in filterInArnsContainer {
                        filterInArnsBuffer?.append(stringContainer0)
                    }
                }
                filterInArns = filterInArnsBuffer
            } else {
                filterInArns = []
            }
        } else {
            filterInArns = nil
        }
        let startDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startDate)
        var startDateBuffer:Date? = nil
        if let startDateDecoded = startDateDecoded {
            startDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(startDateDecoded, format: .dateTime)
        }
        startDate = startDateBuffer
        let statusDecoded = try containerValues.decodeIfPresent(AnalysisStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let networkPathFoundDecoded = try containerValues.decode(Bool.self, forKey: .networkPathFound)
        networkPathFound = networkPathFoundDecoded
        if containerValues.contains(.forwardPathComponents) {
            struct KeyVal0{struct item{}}
            let forwardPathComponentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .forwardPathComponents)
            if let forwardPathComponentsWrappedContainer = forwardPathComponentsWrappedContainer {
                let forwardPathComponentsContainer = try forwardPathComponentsWrappedContainer.decodeIfPresent([PathComponent].self, forKey: .member)
                var forwardPathComponentsBuffer:[PathComponent]? = nil
                if let forwardPathComponentsContainer = forwardPathComponentsContainer {
                    forwardPathComponentsBuffer = [PathComponent]()
                    for structureContainer0 in forwardPathComponentsContainer {
                        forwardPathComponentsBuffer?.append(structureContainer0)
                    }
                }
                forwardPathComponents = forwardPathComponentsBuffer
            } else {
                forwardPathComponents = []
            }
        } else {
            forwardPathComponents = nil
        }
        if containerValues.contains(.returnPathComponents) {
            struct KeyVal0{struct item{}}
            let returnPathComponentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .returnPathComponents)
            if let returnPathComponentsWrappedContainer = returnPathComponentsWrappedContainer {
                let returnPathComponentsContainer = try returnPathComponentsWrappedContainer.decodeIfPresent([PathComponent].self, forKey: .member)
                var returnPathComponentsBuffer:[PathComponent]? = nil
                if let returnPathComponentsContainer = returnPathComponentsContainer {
                    returnPathComponentsBuffer = [PathComponent]()
                    for structureContainer0 in returnPathComponentsContainer {
                        returnPathComponentsBuffer?.append(structureContainer0)
                    }
                }
                returnPathComponents = returnPathComponentsBuffer
            } else {
                returnPathComponents = []
            }
        } else {
            returnPathComponents = nil
        }
        if containerValues.contains(.explanations) {
            struct KeyVal0{struct item{}}
            let explanationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .explanations)
            if let explanationsWrappedContainer = explanationsWrappedContainer {
                let explanationsContainer = try explanationsWrappedContainer.decodeIfPresent([Explanation].self, forKey: .member)
                var explanationsBuffer:[Explanation]? = nil
                if let explanationsContainer = explanationsContainer {
                    explanationsBuffer = [Explanation]()
                    for structureContainer0 in explanationsContainer {
                        explanationsBuffer?.append(structureContainer0)
                    }
                }
                explanations = explanationsBuffer
            } else {
                explanations = []
            }
        } else {
            explanations = nil
        }
        if containerValues.contains(.alternatePathHints) {
            struct KeyVal0{struct item{}}
            let alternatePathHintsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .alternatePathHints)
            if let alternatePathHintsWrappedContainer = alternatePathHintsWrappedContainer {
                let alternatePathHintsContainer = try alternatePathHintsWrappedContainer.decodeIfPresent([AlternatePathHint].self, forKey: .member)
                var alternatePathHintsBuffer:[AlternatePathHint]? = nil
                if let alternatePathHintsContainer = alternatePathHintsContainer {
                    alternatePathHintsBuffer = [AlternatePathHint]()
                    for structureContainer0 in alternatePathHintsContainer {
                        alternatePathHintsBuffer?.append(structureContainer0)
                    }
                }
                alternatePathHints = alternatePathHintsBuffer
            } else {
                alternatePathHints = []
            }
        } else {
            alternatePathHints = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
