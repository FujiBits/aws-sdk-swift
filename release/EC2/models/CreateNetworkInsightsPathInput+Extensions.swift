// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateNetworkInsightsPathInputHeadersMiddleware: Middleware {
    public let id: String = "CreateNetworkInsightsPathInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkInsightsPathInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkInsightsPathOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkInsightsPathInput>
    public typealias MOutput = OperationOutput<CreateNetworkInsightsPathOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkInsightsPathOutputError>
}

public struct CreateNetworkInsightsPathInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateNetworkInsightsPathInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkInsightsPathInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkInsightsPathOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkInsightsPathInput>
    public typealias MOutput = OperationOutput<CreateNetworkInsightsPathOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkInsightsPathOutputError>
}

public struct CreateNetworkInsightsPathInputBodyMiddleware: Middleware {
    public let id: String = "CreateNetworkInsightsPathInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkInsightsPathInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkInsightsPathOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkInsightsPathInput>
    public typealias MOutput = OperationOutput<CreateNetworkInsightsPathOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkInsightsPathOutputError>
}

extension CreateNetworkInsightsPathInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: Key("ClientToken"))
        }
        if let destination = destination {
            try container.encode(destination, forKey: Key("Destination"))
        }
        if let destinationIp = destinationIp {
            try container.encode(destinationIp, forKey: Key("DestinationIp"))
        }
        if destinationPort != 0 {
            try container.encode(destinationPort, forKey: Key("DestinationPort"))
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: Key("Protocol"))
        }
        if let source = source {
            try container.encode(source, forKey: Key("Source"))
        }
        if let sourceIp = sourceIp {
            try container.encode(sourceIp, forKey: Key("SourceIp"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: Key(""))
                }
            }
        }
        try container.encode("CreateNetworkInsightsPath", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
