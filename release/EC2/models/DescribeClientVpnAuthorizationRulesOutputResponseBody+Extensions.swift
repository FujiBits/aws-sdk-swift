// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClientVpnAuthorizationRulesOutputResponseBody: Equatable {
    public let authorizationRules: [AuthorizationRule]?
    public let nextToken: String?
}

extension DescribeClientVpnAuthorizationRulesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case authorizationRules = "authorizationRule"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.authorizationRules) {
            struct KeyVal0{struct item{}}
            let authorizationRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .authorizationRules)
            if let authorizationRulesWrappedContainer = authorizationRulesWrappedContainer {
                let authorizationRulesContainer = try authorizationRulesWrappedContainer.decodeIfPresent([AuthorizationRule].self, forKey: .member)
                var authorizationRulesBuffer:[AuthorizationRule]? = nil
                if let authorizationRulesContainer = authorizationRulesContainer {
                    authorizationRulesBuffer = [AuthorizationRule]()
                    for structureContainer0 in authorizationRulesContainer {
                        authorizationRulesBuffer?.append(structureContainer0)
                    }
                }
                authorizationRules = authorizationRulesBuffer
            } else {
                authorizationRules = []
            }
        } else {
            authorizationRules = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
