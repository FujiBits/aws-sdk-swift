// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTransitGatewayRouteTablesOutputResponseBody: Equatable {
    public let transitGatewayRouteTables: [TransitGatewayRouteTable]?
    public let nextToken: String?
}

extension DescribeTransitGatewayRouteTablesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case transitGatewayRouteTables = "transitGatewayRouteTables"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.transitGatewayRouteTables) {
            struct KeyVal0{struct item{}}
            let transitGatewayRouteTablesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .transitGatewayRouteTables)
            if let transitGatewayRouteTablesWrappedContainer = transitGatewayRouteTablesWrappedContainer {
                let transitGatewayRouteTablesContainer = try transitGatewayRouteTablesWrappedContainer.decodeIfPresent([TransitGatewayRouteTable].self, forKey: .member)
                var transitGatewayRouteTablesBuffer:[TransitGatewayRouteTable]? = nil
                if let transitGatewayRouteTablesContainer = transitGatewayRouteTablesContainer {
                    transitGatewayRouteTablesBuffer = [TransitGatewayRouteTable]()
                    for structureContainer0 in transitGatewayRouteTablesContainer {
                        transitGatewayRouteTablesBuffer?.append(structureContainer0)
                    }
                }
                transitGatewayRouteTables = transitGatewayRouteTablesBuffer
            } else {
                transitGatewayRouteTables = []
            }
        } else {
            transitGatewayRouteTables = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
