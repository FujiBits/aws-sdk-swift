// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LaunchTemplateInstanceMarketOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case marketType = "marketType"
        case spotOptions = "spotOptions"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let marketType = marketType {
            try container.encode(marketType, forKey: Key("MarketType"))
        }
        if let spotOptions = spotOptions {
            try container.encode(spotOptions, forKey: Key("SpotOptions"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let marketTypeDecoded = try containerValues.decodeIfPresent(MarketType.self, forKey: .marketType)
        marketType = marketTypeDecoded
        let spotOptionsDecoded = try containerValues.decodeIfPresent(LaunchTemplateSpotMarketOptions.self, forKey: .spotOptions)
        spotOptions = spotOptionsDecoded
    }
}
