// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSecurityGroupReferencesOutputResponseBody: Equatable {
    public let securityGroupReferenceSet: [SecurityGroupReference]?
}

extension DescribeSecurityGroupReferencesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case securityGroupReferenceSet = "securityGroupReferenceSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.securityGroupReferenceSet) {
            struct KeyVal0{struct item{}}
            let securityGroupReferenceSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .securityGroupReferenceSet)
            if let securityGroupReferenceSetWrappedContainer = securityGroupReferenceSetWrappedContainer {
                let securityGroupReferenceSetContainer = try securityGroupReferenceSetWrappedContainer.decodeIfPresent([SecurityGroupReference].self, forKey: .member)
                var securityGroupReferenceSetBuffer:[SecurityGroupReference]? = nil
                if let securityGroupReferenceSetContainer = securityGroupReferenceSetContainer {
                    securityGroupReferenceSetBuffer = [SecurityGroupReference]()
                    for structureContainer0 in securityGroupReferenceSetContainer {
                        securityGroupReferenceSetBuffer?.append(structureContainer0)
                    }
                }
                securityGroupReferenceSet = securityGroupReferenceSetBuffer
            } else {
                securityGroupReferenceSet = []
            }
        } else {
            securityGroupReferenceSet = nil
        }
    }
}
