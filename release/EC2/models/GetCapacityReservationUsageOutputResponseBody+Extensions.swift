// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCapacityReservationUsageOutputResponseBody: Equatable {
    public let nextToken: String?
    public let capacityReservationId: String?
    public let instanceType: String?
    public let totalInstanceCount: Int
    public let availableInstanceCount: Int
    public let state: CapacityReservationState?
    public let instanceUsages: [InstanceUsage]?
}

extension GetCapacityReservationUsageOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case availableInstanceCount = "availableInstanceCount"
        case capacityReservationId = "capacityReservationId"
        case instanceType = "instanceType"
        case instanceUsages = "instanceUsageSet"
        case nextToken = "nextToken"
        case state = "state"
        case totalInstanceCount = "totalInstanceCount"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let capacityReservationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .capacityReservationId)
        capacityReservationId = capacityReservationIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let totalInstanceCountDecoded = try containerValues.decode(Int.self, forKey: .totalInstanceCount)
        totalInstanceCount = totalInstanceCountDecoded
        let availableInstanceCountDecoded = try containerValues.decode(Int.self, forKey: .availableInstanceCount)
        availableInstanceCount = availableInstanceCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CapacityReservationState.self, forKey: .state)
        state = stateDecoded
        if containerValues.contains(.instanceUsages) {
            struct KeyVal0{struct item{}}
            let instanceUsagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .instanceUsages)
            if let instanceUsagesWrappedContainer = instanceUsagesWrappedContainer {
                let instanceUsagesContainer = try instanceUsagesWrappedContainer.decodeIfPresent([InstanceUsage].self, forKey: .member)
                var instanceUsagesBuffer:[InstanceUsage]? = nil
                if let instanceUsagesContainer = instanceUsagesContainer {
                    instanceUsagesBuffer = [InstanceUsage]()
                    for structureContainer0 in instanceUsagesContainer {
                        instanceUsagesBuffer?.append(structureContainer0)
                    }
                }
                instanceUsages = instanceUsagesBuffer
            } else {
                instanceUsages = []
            }
        } else {
            instanceUsages = nil
        }
    }
}
