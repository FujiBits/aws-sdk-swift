// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DhcpConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "key"
        case values = "valueSet"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let key = key {
            try container.encode(key, forKey: Key("Key"))
        }
        if let values = values {
            if !values.isEmpty {
                for (index0, attributevalue0) in values.enumerated() {
                    var valuesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("ValueSet.\(index0.advanced(by: 1))"))
                    try valuesContainer0.encode(attributevalue0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        if containerValues.contains(.values) {
            struct KeyVal0{struct item{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([AttributeValue].self, forKey: .member)
                var valuesBuffer:[AttributeValue]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [AttributeValue]()
                    for structureContainer0 in valuesContainer {
                        valuesBuffer?.append(structureContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
    }
}
