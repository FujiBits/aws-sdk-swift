// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNetworkInsightsAnalysesOutputResponseBody: Equatable {
    public let networkInsightsAnalyses: [NetworkInsightsAnalysis]?
    public let nextToken: String?
}

extension DescribeNetworkInsightsAnalysesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case networkInsightsAnalyses = "networkInsightsAnalysisSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.networkInsightsAnalyses) {
            struct KeyVal0{struct item{}}
            let networkInsightsAnalysesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .networkInsightsAnalyses)
            if let networkInsightsAnalysesWrappedContainer = networkInsightsAnalysesWrappedContainer {
                let networkInsightsAnalysesContainer = try networkInsightsAnalysesWrappedContainer.decodeIfPresent([NetworkInsightsAnalysis].self, forKey: .member)
                var networkInsightsAnalysesBuffer:[NetworkInsightsAnalysis]? = nil
                if let networkInsightsAnalysesContainer = networkInsightsAnalysesContainer {
                    networkInsightsAnalysesBuffer = [NetworkInsightsAnalysis]()
                    for structureContainer0 in networkInsightsAnalysesContainer {
                        networkInsightsAnalysesBuffer?.append(structureContainer0)
                    }
                }
                networkInsightsAnalyses = networkInsightsAnalysesBuffer
            } else {
                networkInsightsAnalyses = []
            }
        } else {
            networkInsightsAnalyses = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
