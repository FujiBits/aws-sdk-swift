// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LocalGatewayVirtualInterface: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case localAddress = "localAddress"
        case localBgpAsn = "localBgpAsn"
        case localGatewayId = "localGatewayId"
        case localGatewayVirtualInterfaceId = "localGatewayVirtualInterfaceId"
        case ownerId = "ownerId"
        case peerAddress = "peerAddress"
        case peerBgpAsn = "peerBgpAsn"
        case tags = "tagSet"
        case vlan = "vlan"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let localAddress = localAddress {
            try container.encode(localAddress, forKey: Key("LocalAddress"))
        }
        if localBgpAsn != 0 {
            try container.encode(localBgpAsn, forKey: Key("LocalBgpAsn"))
        }
        if let localGatewayId = localGatewayId {
            try container.encode(localGatewayId, forKey: Key("LocalGatewayId"))
        }
        if let localGatewayVirtualInterfaceId = localGatewayVirtualInterfaceId {
            try container.encode(localGatewayVirtualInterfaceId, forKey: Key("LocalGatewayVirtualInterfaceId"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: Key("OwnerId"))
        }
        if let peerAddress = peerAddress {
            try container.encode(peerAddress, forKey: Key("PeerAddress"))
        }
        if peerBgpAsn != 0 {
            try container.encode(peerBgpAsn, forKey: Key("PeerBgpAsn"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
        if vlan != 0 {
            try container.encode(vlan, forKey: Key("Vlan"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localGatewayVirtualInterfaceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .localGatewayVirtualInterfaceId)
        localGatewayVirtualInterfaceId = localGatewayVirtualInterfaceIdDecoded
        let localGatewayIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .localGatewayId)
        localGatewayId = localGatewayIdDecoded
        let vlanDecoded = try containerValues.decode(Int.self, forKey: .vlan)
        vlan = vlanDecoded
        let localAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .localAddress)
        localAddress = localAddressDecoded
        let peerAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .peerAddress)
        peerAddress = peerAddressDecoded
        let localBgpAsnDecoded = try containerValues.decode(Int.self, forKey: .localBgpAsn)
        localBgpAsn = localBgpAsnDecoded
        let peerBgpAsnDecoded = try containerValues.decode(Int.self, forKey: .peerBgpAsn)
        peerBgpAsn = peerBgpAsnDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
