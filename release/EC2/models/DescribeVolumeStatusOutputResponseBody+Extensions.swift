// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVolumeStatusOutputResponseBody: Equatable {
    public let nextToken: String?
    public let volumeStatuses: [VolumeStatusItem]?
}

extension DescribeVolumeStatusOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case volumeStatuses = "volumeStatusSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.volumeStatuses) {
            struct KeyVal0{struct item{}}
            let volumeStatusesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .volumeStatuses)
            if let volumeStatusesWrappedContainer = volumeStatusesWrappedContainer {
                let volumeStatusesContainer = try volumeStatusesWrappedContainer.decodeIfPresent([VolumeStatusItem].self, forKey: .member)
                var volumeStatusesBuffer:[VolumeStatusItem]? = nil
                if let volumeStatusesContainer = volumeStatusesContainer {
                    volumeStatusesBuffer = [VolumeStatusItem]()
                    for structureContainer0 in volumeStatusesContainer {
                        volumeStatusesBuffer?.append(structureContainer0)
                    }
                }
                volumeStatuses = volumeStatusesBuffer
            } else {
                volumeStatuses = []
            }
        } else {
            volumeStatuses = nil
        }
    }
}
