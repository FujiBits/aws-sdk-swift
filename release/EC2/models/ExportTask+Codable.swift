// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExportTask: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "description"
        case exportTaskId = "exportTaskId"
        case exportToS3Task = "exportToS3"
        case instanceExportDetails = "instanceExport"
        case state = "state"
        case statusMessage = "statusMessage"
        case tags = "tagSet"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let exportTaskId = exportTaskId {
            try container.encode(exportTaskId, forKey: Key("ExportTaskId"))
        }
        if let exportToS3Task = exportToS3Task {
            try container.encode(exportToS3Task, forKey: Key("ExportToS3"))
        }
        if let instanceExportDetails = instanceExportDetails {
            try container.encode(instanceExportDetails, forKey: Key("InstanceExport"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: Key("StatusMessage"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let exportTaskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exportTaskId)
        exportTaskId = exportTaskIdDecoded
        let exportToS3TaskDecoded = try containerValues.decodeIfPresent(ExportToS3Task.self, forKey: .exportToS3Task)
        exportToS3Task = exportToS3TaskDecoded
        let instanceExportDetailsDecoded = try containerValues.decodeIfPresent(InstanceExportDetails.self, forKey: .instanceExportDetails)
        instanceExportDetails = instanceExportDetailsDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ExportTaskState.self, forKey: .state)
        state = stateDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
