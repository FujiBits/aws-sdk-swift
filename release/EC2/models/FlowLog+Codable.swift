// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FlowLog: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "creationTime"
        case deliverLogsErrorMessage = "deliverLogsErrorMessage"
        case deliverLogsPermissionArn = "deliverLogsPermissionArn"
        case deliverLogsStatus = "deliverLogsStatus"
        case flowLogId = "flowLogId"
        case flowLogStatus = "flowLogStatus"
        case logDestination = "logDestination"
        case logDestinationType = "logDestinationType"
        case logFormat = "logFormat"
        case logGroupName = "logGroupName"
        case maxAggregationInterval = "maxAggregationInterval"
        case resourceId = "resourceId"
        case tags = "tagSet"
        case trafficType = "trafficType"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let creationTime = creationTime {
            try container.encode(TimestampWrapper(creationTime, format: .dateTime), forKey: Key("CreationTime"))
        }
        if let deliverLogsErrorMessage = deliverLogsErrorMessage {
            try container.encode(deliverLogsErrorMessage, forKey: Key("DeliverLogsErrorMessage"))
        }
        if let deliverLogsPermissionArn = deliverLogsPermissionArn {
            try container.encode(deliverLogsPermissionArn, forKey: Key("DeliverLogsPermissionArn"))
        }
        if let deliverLogsStatus = deliverLogsStatus {
            try container.encode(deliverLogsStatus, forKey: Key("DeliverLogsStatus"))
        }
        if let flowLogId = flowLogId {
            try container.encode(flowLogId, forKey: Key("FlowLogId"))
        }
        if let flowLogStatus = flowLogStatus {
            try container.encode(flowLogStatus, forKey: Key("FlowLogStatus"))
        }
        if let logDestination = logDestination {
            try container.encode(logDestination, forKey: Key("LogDestination"))
        }
        if let logDestinationType = logDestinationType {
            try container.encode(logDestinationType, forKey: Key("LogDestinationType"))
        }
        if let logFormat = logFormat {
            try container.encode(logFormat, forKey: Key("LogFormat"))
        }
        if let logGroupName = logGroupName {
            try container.encode(logGroupName, forKey: Key("LogGroupName"))
        }
        if maxAggregationInterval != 0 {
            try container.encode(maxAggregationInterval, forKey: Key("MaxAggregationInterval"))
        }
        if let resourceId = resourceId {
            try container.encode(resourceId, forKey: Key("ResourceId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
        if let trafficType = trafficType {
            try container.encode(trafficType, forKey: Key("TrafficType"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationTime)
        var creationTimeBuffer:Date? = nil
        if let creationTimeDecoded = creationTimeDecoded {
            creationTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(creationTimeDecoded, format: .dateTime)
        }
        creationTime = creationTimeBuffer
        let deliverLogsErrorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deliverLogsErrorMessage)
        deliverLogsErrorMessage = deliverLogsErrorMessageDecoded
        let deliverLogsPermissionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deliverLogsPermissionArn)
        deliverLogsPermissionArn = deliverLogsPermissionArnDecoded
        let deliverLogsStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deliverLogsStatus)
        deliverLogsStatus = deliverLogsStatusDecoded
        let flowLogIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .flowLogId)
        flowLogId = flowLogIdDecoded
        let flowLogStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .flowLogStatus)
        flowLogStatus = flowLogStatusDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let trafficTypeDecoded = try containerValues.decodeIfPresent(TrafficType.self, forKey: .trafficType)
        trafficType = trafficTypeDecoded
        let logDestinationTypeDecoded = try containerValues.decodeIfPresent(LogDestinationType.self, forKey: .logDestinationType)
        logDestinationType = logDestinationTypeDecoded
        let logDestinationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logDestination)
        logDestination = logDestinationDecoded
        let logFormatDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logFormat)
        logFormat = logFormatDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let maxAggregationIntervalDecoded = try containerValues.decode(Int.self, forKey: .maxAggregationInterval)
        maxAggregationInterval = maxAggregationIntervalDecoded
    }
}
