// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticInferenceAcceleratorAssociation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case elasticInferenceAcceleratorArn = "elasticInferenceAcceleratorArn"
        case elasticInferenceAcceleratorAssociationId = "elasticInferenceAcceleratorAssociationId"
        case elasticInferenceAcceleratorAssociationState = "elasticInferenceAcceleratorAssociationState"
        case elasticInferenceAcceleratorAssociationTime = "elasticInferenceAcceleratorAssociationTime"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let elasticInferenceAcceleratorArn = elasticInferenceAcceleratorArn {
            try container.encode(elasticInferenceAcceleratorArn, forKey: Key("ElasticInferenceAcceleratorArn"))
        }
        if let elasticInferenceAcceleratorAssociationId = elasticInferenceAcceleratorAssociationId {
            try container.encode(elasticInferenceAcceleratorAssociationId, forKey: Key("ElasticInferenceAcceleratorAssociationId"))
        }
        if let elasticInferenceAcceleratorAssociationState = elasticInferenceAcceleratorAssociationState {
            try container.encode(elasticInferenceAcceleratorAssociationState, forKey: Key("ElasticInferenceAcceleratorAssociationState"))
        }
        if let elasticInferenceAcceleratorAssociationTime = elasticInferenceAcceleratorAssociationTime {
            try container.encode(TimestampWrapper(elasticInferenceAcceleratorAssociationTime, format: .dateTime), forKey: Key("ElasticInferenceAcceleratorAssociationTime"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elasticInferenceAcceleratorArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .elasticInferenceAcceleratorArn)
        elasticInferenceAcceleratorArn = elasticInferenceAcceleratorArnDecoded
        let elasticInferenceAcceleratorAssociationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .elasticInferenceAcceleratorAssociationId)
        elasticInferenceAcceleratorAssociationId = elasticInferenceAcceleratorAssociationIdDecoded
        let elasticInferenceAcceleratorAssociationStateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .elasticInferenceAcceleratorAssociationState)
        elasticInferenceAcceleratorAssociationState = elasticInferenceAcceleratorAssociationStateDecoded
        let elasticInferenceAcceleratorAssociationTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .elasticInferenceAcceleratorAssociationTime)
        var elasticInferenceAcceleratorAssociationTimeBuffer:Date? = nil
        if let elasticInferenceAcceleratorAssociationTimeDecoded = elasticInferenceAcceleratorAssociationTimeDecoded {
            elasticInferenceAcceleratorAssociationTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(elasticInferenceAcceleratorAssociationTimeDecoded, format: .dateTime)
        }
        elasticInferenceAcceleratorAssociationTime = elasticInferenceAcceleratorAssociationTimeBuffer
    }
}
