// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ModifyTrafficMirrorSessionInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyTrafficMirrorSessionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyTrafficMirrorSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyTrafficMirrorSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyTrafficMirrorSessionInput>
    public typealias MOutput = OperationOutput<ModifyTrafficMirrorSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyTrafficMirrorSessionOutputError>
}

public struct ModifyTrafficMirrorSessionInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyTrafficMirrorSessionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyTrafficMirrorSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyTrafficMirrorSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyTrafficMirrorSessionInput>
    public typealias MOutput = OperationOutput<ModifyTrafficMirrorSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyTrafficMirrorSessionOutputError>
}

public struct ModifyTrafficMirrorSessionInputBodyMiddleware: Middleware {
    public let id: String = "ModifyTrafficMirrorSessionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyTrafficMirrorSessionInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyTrafficMirrorSessionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyTrafficMirrorSessionInput>
    public typealias MOutput = OperationOutput<ModifyTrafficMirrorSessionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyTrafficMirrorSessionOutputError>
}

extension ModifyTrafficMirrorSessionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if packetLength != 0 {
            try container.encode(packetLength, forKey: Key("PacketLength"))
        }
        if let removeFields = removeFields {
            if !removeFields.isEmpty {
                for (index0, trafficmirrorsessionfield0) in removeFields.enumerated() {
                    var removeFieldsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("RemoveField.\(index0.advanced(by: 1))"))
                    try removeFieldsContainer0.encode(trafficmirrorsessionfield0, forKey: Key(""))
                }
            }
        }
        if sessionNumber != 0 {
            try container.encode(sessionNumber, forKey: Key("SessionNumber"))
        }
        if let trafficMirrorFilterId = trafficMirrorFilterId {
            try container.encode(trafficMirrorFilterId, forKey: Key("TrafficMirrorFilterId"))
        }
        if let trafficMirrorSessionId = trafficMirrorSessionId {
            try container.encode(trafficMirrorSessionId, forKey: Key("TrafficMirrorSessionId"))
        }
        if let trafficMirrorTargetId = trafficMirrorTargetId {
            try container.encode(trafficMirrorTargetId, forKey: Key("TrafficMirrorTargetId"))
        }
        if virtualNetworkId != 0 {
            try container.encode(virtualNetworkId, forKey: Key("VirtualNetworkId"))
        }
        try container.encode("ModifyTrafficMirrorSession", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
