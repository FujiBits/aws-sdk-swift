// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ClientData: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case comment = "Comment"
        case uploadEnd = "UploadEnd"
        case uploadSize = "UploadSize"
        case uploadStart = "UploadStart"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let comment = comment {
            try container.encode(comment, forKey: Key("Comment"))
        }
        if let uploadEnd = uploadEnd {
            try container.encode(TimestampWrapper(uploadEnd, format: .dateTime), forKey: Key("UploadEnd"))
        }
        if uploadSize != 0.0 {
            try container.encode(String(uploadSize), forKey: Key("UploadSize"))
        }
        if let uploadStart = uploadStart {
            try container.encode(TimestampWrapper(uploadStart, format: .dateTime), forKey: Key("UploadStart"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .comment)
        comment = commentDecoded
        let uploadEndDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uploadEnd)
        var uploadEndBuffer:Date? = nil
        if let uploadEndDecoded = uploadEndDecoded {
            uploadEndBuffer = try TimestampWrapperDecoder.parseDateStringValue(uploadEndDecoded, format: .dateTime)
        }
        uploadEnd = uploadEndBuffer
        let uploadSizeDecoded = try containerValues.decode(Double.self, forKey: .uploadSize)
        uploadSize = uploadSizeDecoded
        let uploadStartDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uploadStart)
        var uploadStartBuffer:Date? = nil
        if let uploadStartDecoded = uploadStartDecoded {
            uploadStartBuffer = try TimestampWrapperDecoder.parseDateStringValue(uploadStartDecoded, format: .dateTime)
        }
        uploadStart = uploadStartBuffer
    }
}
