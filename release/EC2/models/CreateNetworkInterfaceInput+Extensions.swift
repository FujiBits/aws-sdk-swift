// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateNetworkInterfaceInputHeadersMiddleware: Middleware {
    public let id: String = "CreateNetworkInterfaceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkInterfaceInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkInterfaceInput>
    public typealias MOutput = OperationOutput<CreateNetworkInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkInterfaceOutputError>
}

public struct CreateNetworkInterfaceInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateNetworkInterfaceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkInterfaceInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkInterfaceInput>
    public typealias MOutput = OperationOutput<CreateNetworkInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkInterfaceOutputError>
}

public struct CreateNetworkInterfaceInputBodyMiddleware: Middleware {
    public let id: String = "CreateNetworkInterfaceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkInterfaceInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkInterfaceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkInterfaceInput>
    public typealias MOutput = OperationOutput<CreateNetworkInterfaceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkInterfaceOutputError>
}

extension CreateNetworkInterfaceInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: Key("ClientToken"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if let groups = groups {
            if !groups.isEmpty {
                for (index0, securitygroupid0) in groups.enumerated() {
                    var groupsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("SecurityGroupId.\(index0.advanced(by: 1))"))
                    try groupsContainer0.encode(securitygroupid0, forKey: Key(""))
                }
            }
        }
        if let interfaceType = interfaceType {
            try container.encode(interfaceType, forKey: Key("InterfaceType"))
        }
        if ipv6AddressCount != 0 {
            try container.encode(ipv6AddressCount, forKey: Key("Ipv6AddressCount"))
        }
        if let ipv6Addresses = ipv6Addresses {
            if !ipv6Addresses.isEmpty {
                for (index0, instanceipv6address0) in ipv6Addresses.enumerated() {
                    var ipv6AddressesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Ipv6Addresses.\(index0.advanced(by: 1))"))
                    try ipv6AddressesContainer0.encode(instanceipv6address0, forKey: Key(""))
                }
            }
        }
        if let privateIpAddress = privateIpAddress {
            try container.encode(privateIpAddress, forKey: Key("PrivateIpAddress"))
        }
        if let privateIpAddresses = privateIpAddresses {
            if !privateIpAddresses.isEmpty {
                for (index0, privateipaddressspecification0) in privateIpAddresses.enumerated() {
                    var privateIpAddressesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("PrivateIpAddresses.\(index0.advanced(by: 1))"))
                    try privateIpAddressesContainer0.encode(privateipaddressspecification0, forKey: Key(""))
                }
            }
        }
        if secondaryPrivateIpAddressCount != 0 {
            try container.encode(secondaryPrivateIpAddressCount, forKey: Key("SecondaryPrivateIpAddressCount"))
        }
        if let subnetId = subnetId {
            try container.encode(subnetId, forKey: Key("SubnetId"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: Key(""))
                }
            }
        }
        try container.encode("CreateNetworkInterface", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
