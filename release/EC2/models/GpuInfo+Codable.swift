// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GpuInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case gpus = "gpus"
        case totalGpuMemoryInMiB = "totalGpuMemoryInMiB"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let gpus = gpus {
            if !gpus.isEmpty {
                for (index0, gpudeviceinfo0) in gpus.enumerated() {
                    var gpusContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Gpus.\(index0.advanced(by: 1))"))
                    try gpusContainer0.encode(gpudeviceinfo0, forKey: Key(""))
                }
            }
        }
        if let totalGpuMemoryInMiB = totalGpuMemoryInMiB {
            try container.encode(totalGpuMemoryInMiB, forKey: Key("TotalGpuMemoryInMiB"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.gpus) {
            struct KeyVal0{struct item{}}
            let gpusWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .gpus)
            if let gpusWrappedContainer = gpusWrappedContainer {
                let gpusContainer = try gpusWrappedContainer.decodeIfPresent([GpuDeviceInfo].self, forKey: .member)
                var gpusBuffer:[GpuDeviceInfo]? = nil
                if let gpusContainer = gpusContainer {
                    gpusBuffer = [GpuDeviceInfo]()
                    for structureContainer0 in gpusContainer {
                        gpusBuffer?.append(structureContainer0)
                    }
                }
                gpus = gpusBuffer
            } else {
                gpus = []
            }
        } else {
            gpus = nil
        }
        let totalGpuMemoryInMiBDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .totalGpuMemoryInMiB)
        totalGpuMemoryInMiB = totalGpuMemoryInMiBDecoded
    }
}
