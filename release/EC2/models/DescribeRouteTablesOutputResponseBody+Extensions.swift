// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeRouteTablesOutputResponseBody: Equatable {
    public let routeTables: [RouteTable]?
    public let nextToken: String?
}

extension DescribeRouteTablesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case routeTables = "routeTableSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.routeTables) {
            struct KeyVal0{struct item{}}
            let routeTablesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .routeTables)
            if let routeTablesWrappedContainer = routeTablesWrappedContainer {
                let routeTablesContainer = try routeTablesWrappedContainer.decodeIfPresent([RouteTable].self, forKey: .member)
                var routeTablesBuffer:[RouteTable]? = nil
                if let routeTablesContainer = routeTablesContainer {
                    routeTablesBuffer = [RouteTable]()
                    for structureContainer0 in routeTablesContainer {
                        routeTablesBuffer?.append(structureContainer0)
                    }
                }
                routeTables = routeTablesBuffer
            } else {
                routeTables = []
            }
        } else {
            routeTables = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
