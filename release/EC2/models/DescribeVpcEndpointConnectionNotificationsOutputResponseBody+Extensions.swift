// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVpcEndpointConnectionNotificationsOutputResponseBody: Equatable {
    public let connectionNotificationSet: [ConnectionNotification]?
    public let nextToken: String?
}

extension DescribeVpcEndpointConnectionNotificationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case connectionNotificationSet = "connectionNotificationSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.connectionNotificationSet) {
            struct KeyVal0{struct item{}}
            let connectionNotificationSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .connectionNotificationSet)
            if let connectionNotificationSetWrappedContainer = connectionNotificationSetWrappedContainer {
                let connectionNotificationSetContainer = try connectionNotificationSetWrappedContainer.decodeIfPresent([ConnectionNotification].self, forKey: .member)
                var connectionNotificationSetBuffer:[ConnectionNotification]? = nil
                if let connectionNotificationSetContainer = connectionNotificationSetContainer {
                    connectionNotificationSetBuffer = [ConnectionNotification]()
                    for structureContainer0 in connectionNotificationSetContainer {
                        connectionNotificationSetBuffer?.append(structureContainer0)
                    }
                }
                connectionNotificationSet = connectionNotificationSetBuffer
            } else {
                connectionNotificationSet = []
            }
        } else {
            connectionNotificationSet = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
