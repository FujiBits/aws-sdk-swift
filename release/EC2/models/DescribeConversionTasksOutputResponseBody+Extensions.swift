// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeConversionTasksOutputResponseBody: Equatable {
    public let conversionTasks: [ConversionTask]?
}

extension DescribeConversionTasksOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case conversionTasks = "conversionTasks"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.conversionTasks) {
            struct KeyVal0{struct item{}}
            let conversionTasksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .conversionTasks)
            if let conversionTasksWrappedContainer = conversionTasksWrappedContainer {
                let conversionTasksContainer = try conversionTasksWrappedContainer.decodeIfPresent([ConversionTask].self, forKey: .member)
                var conversionTasksBuffer:[ConversionTask]? = nil
                if let conversionTasksContainer = conversionTasksContainer {
                    conversionTasksBuffer = [ConversionTask]()
                    for structureContainer0 in conversionTasksContainer {
                        conversionTasksBuffer?.append(structureContainer0)
                    }
                }
                conversionTasks = conversionTasksBuffer
            } else {
                conversionTasks = []
            }
        } else {
            conversionTasks = nil
        }
    }
}
