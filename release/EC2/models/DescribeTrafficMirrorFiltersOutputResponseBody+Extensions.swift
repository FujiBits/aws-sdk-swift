// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTrafficMirrorFiltersOutputResponseBody: Equatable {
    public let trafficMirrorFilters: [TrafficMirrorFilter]?
    public let nextToken: String?
}

extension DescribeTrafficMirrorFiltersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case trafficMirrorFilters = "trafficMirrorFilterSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.trafficMirrorFilters) {
            struct KeyVal0{struct item{}}
            let trafficMirrorFiltersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .trafficMirrorFilters)
            if let trafficMirrorFiltersWrappedContainer = trafficMirrorFiltersWrappedContainer {
                let trafficMirrorFiltersContainer = try trafficMirrorFiltersWrappedContainer.decodeIfPresent([TrafficMirrorFilter].self, forKey: .member)
                var trafficMirrorFiltersBuffer:[TrafficMirrorFilter]? = nil
                if let trafficMirrorFiltersContainer = trafficMirrorFiltersContainer {
                    trafficMirrorFiltersBuffer = [TrafficMirrorFilter]()
                    for structureContainer0 in trafficMirrorFiltersContainer {
                        trafficMirrorFiltersBuffer?.append(structureContainer0)
                    }
                }
                trafficMirrorFilters = trafficMirrorFiltersBuffer
            } else {
                trafficMirrorFilters = []
            }
        } else {
            trafficMirrorFilters = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
