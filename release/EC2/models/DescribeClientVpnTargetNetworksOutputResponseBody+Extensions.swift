// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClientVpnTargetNetworksOutputResponseBody: Equatable {
    public let clientVpnTargetNetworks: [TargetNetwork]?
    public let nextToken: String?
}

extension DescribeClientVpnTargetNetworksOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientVpnTargetNetworks = "clientVpnTargetNetworks"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.clientVpnTargetNetworks) {
            struct KeyVal0{struct item{}}
            let clientVpnTargetNetworksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .clientVpnTargetNetworks)
            if let clientVpnTargetNetworksWrappedContainer = clientVpnTargetNetworksWrappedContainer {
                let clientVpnTargetNetworksContainer = try clientVpnTargetNetworksWrappedContainer.decodeIfPresent([TargetNetwork].self, forKey: .member)
                var clientVpnTargetNetworksBuffer:[TargetNetwork]? = nil
                if let clientVpnTargetNetworksContainer = clientVpnTargetNetworksContainer {
                    clientVpnTargetNetworksBuffer = [TargetNetwork]()
                    for structureContainer0 in clientVpnTargetNetworksContainer {
                        clientVpnTargetNetworksBuffer?.append(structureContainer0)
                    }
                }
                clientVpnTargetNetworks = clientVpnTargetNetworksBuffer
            } else {
                clientVpnTargetNetworks = []
            }
        } else {
            clientVpnTargetNetworks = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
