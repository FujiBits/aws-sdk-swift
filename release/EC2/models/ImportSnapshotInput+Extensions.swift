// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ImportSnapshotInputHeadersMiddleware: Middleware {
    public let id: String = "ImportSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ImportSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<ImportSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ImportSnapshotInput>
    public typealias MOutput = OperationOutput<ImportSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ImportSnapshotOutputError>
}

public struct ImportSnapshotInputQueryItemMiddleware: Middleware {
    public let id: String = "ImportSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ImportSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<ImportSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ImportSnapshotInput>
    public typealias MOutput = OperationOutput<ImportSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ImportSnapshotOutputError>
}

public struct ImportSnapshotInputBodyMiddleware: Middleware {
    public let id: String = "ImportSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ImportSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<ImportSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ImportSnapshotInput>
    public typealias MOutput = OperationOutput<ImportSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ImportSnapshotOutputError>
}

extension ImportSnapshotInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let clientData = clientData {
            try container.encode(clientData, forKey: Key("ClientData"))
        }
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: Key("ClientToken"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let diskContainer = diskContainer {
            try container.encode(diskContainer, forKey: Key("DiskContainer"))
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if encrypted != false {
            try container.encode(encrypted, forKey: Key("Encrypted"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: Key("KmsKeyId"))
        }
        if let roleName = roleName {
            try container.encode(roleName, forKey: Key("RoleName"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: Key(""))
                }
            }
        }
        try container.encode("ImportSnapshot", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
