// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeImageAttributeOutputResponseBody: Equatable {
    public let blockDeviceMappings: [BlockDeviceMapping]?
    public let imageId: String?
    public let launchPermissions: [LaunchPermission]?
    public let productCodes: [ProductCode]?
    public let description: AttributeValue?
    public let kernelId: AttributeValue?
    public let ramdiskId: AttributeValue?
    public let sriovNetSupport: AttributeValue?
    public let bootMode: AttributeValue?
}

extension DescribeImageAttributeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case blockDeviceMappings = "blockDeviceMapping"
        case bootMode = "bootMode"
        case description = "description"
        case imageId = "imageId"
        case kernelId = "kernel"
        case launchPermissions = "launchPermission"
        case productCodes = "productCodes"
        case ramdiskId = "ramdisk"
        case sriovNetSupport = "sriovNetSupport"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.blockDeviceMappings) {
            struct KeyVal0{struct item{}}
            let blockDeviceMappingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .blockDeviceMappings)
            if let blockDeviceMappingsWrappedContainer = blockDeviceMappingsWrappedContainer {
                let blockDeviceMappingsContainer = try blockDeviceMappingsWrappedContainer.decodeIfPresent([BlockDeviceMapping].self, forKey: .member)
                var blockDeviceMappingsBuffer:[BlockDeviceMapping]? = nil
                if let blockDeviceMappingsContainer = blockDeviceMappingsContainer {
                    blockDeviceMappingsBuffer = [BlockDeviceMapping]()
                    for structureContainer0 in blockDeviceMappingsContainer {
                        blockDeviceMappingsBuffer?.append(structureContainer0)
                    }
                }
                blockDeviceMappings = blockDeviceMappingsBuffer
            } else {
                blockDeviceMappings = []
            }
        } else {
            blockDeviceMappings = nil
        }
        let imageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageId)
        imageId = imageIdDecoded
        if containerValues.contains(.launchPermissions) {
            struct KeyVal0{struct item{}}
            let launchPermissionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .launchPermissions)
            if let launchPermissionsWrappedContainer = launchPermissionsWrappedContainer {
                let launchPermissionsContainer = try launchPermissionsWrappedContainer.decodeIfPresent([LaunchPermission].self, forKey: .member)
                var launchPermissionsBuffer:[LaunchPermission]? = nil
                if let launchPermissionsContainer = launchPermissionsContainer {
                    launchPermissionsBuffer = [LaunchPermission]()
                    for structureContainer0 in launchPermissionsContainer {
                        launchPermissionsBuffer?.append(structureContainer0)
                    }
                }
                launchPermissions = launchPermissionsBuffer
            } else {
                launchPermissions = []
            }
        } else {
            launchPermissions = nil
        }
        if containerValues.contains(.productCodes) {
            struct KeyVal0{struct item{}}
            let productCodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .productCodes)
            if let productCodesWrappedContainer = productCodesWrappedContainer {
                let productCodesContainer = try productCodesWrappedContainer.decodeIfPresent([ProductCode].self, forKey: .member)
                var productCodesBuffer:[ProductCode]? = nil
                if let productCodesContainer = productCodesContainer {
                    productCodesBuffer = [ProductCode]()
                    for structureContainer0 in productCodesContainer {
                        productCodesBuffer?.append(structureContainer0)
                    }
                }
                productCodes = productCodesBuffer
            } else {
                productCodes = []
            }
        } else {
            productCodes = nil
        }
        let descriptionDecoded = try containerValues.decodeIfPresent(AttributeValue.self, forKey: .description)
        description = descriptionDecoded
        let kernelIdDecoded = try containerValues.decodeIfPresent(AttributeValue.self, forKey: .kernelId)
        kernelId = kernelIdDecoded
        let ramdiskIdDecoded = try containerValues.decodeIfPresent(AttributeValue.self, forKey: .ramdiskId)
        ramdiskId = ramdiskIdDecoded
        let sriovNetSupportDecoded = try containerValues.decodeIfPresent(AttributeValue.self, forKey: .sriovNetSupport)
        sriovNetSupport = sriovNetSupportDecoded
        let bootModeDecoded = try containerValues.decodeIfPresent(AttributeValue.self, forKey: .bootMode)
        bootMode = bootModeDecoded
    }
}
