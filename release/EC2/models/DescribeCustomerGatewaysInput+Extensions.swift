// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeCustomerGatewaysInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeCustomerGatewaysInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCustomerGatewaysInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCustomerGatewaysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCustomerGatewaysInput>
    public typealias MOutput = OperationOutput<DescribeCustomerGatewaysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCustomerGatewaysOutputError>
}

public struct DescribeCustomerGatewaysInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeCustomerGatewaysInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCustomerGatewaysInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCustomerGatewaysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCustomerGatewaysInput>
    public typealias MOutput = OperationOutput<DescribeCustomerGatewaysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCustomerGatewaysOutputError>
}

public struct DescribeCustomerGatewaysInputBodyMiddleware: Middleware {
    public let id: String = "DescribeCustomerGatewaysInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeCustomerGatewaysInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeCustomerGatewaysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeCustomerGatewaysInput>
    public typealias MOutput = OperationOutput<DescribeCustomerGatewaysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeCustomerGatewaysOutputError>
}

extension DescribeCustomerGatewaysInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let customerGatewayIds = customerGatewayIds {
            if !customerGatewayIds.isEmpty {
                for (index0, customergatewayid0) in customerGatewayIds.enumerated() {
                    var customerGatewayIdsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("CustomerGatewayId.\(index0.advanced(by: 1))"))
                    try customerGatewayIdsContainer0.encode(customergatewayid0, forKey: Key(""))
                }
            }
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                for (index0, filter0) in filters.enumerated() {
                    var filtersContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Filter.\(index0.advanced(by: 1))"))
                    try filtersContainer0.encode(filter0, forKey: Key(""))
                }
            }
        }
        try container.encode("DescribeCustomerGateways", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
