// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateClientVpnEndpointInputHeadersMiddleware: Middleware {
    public let id: String = "CreateClientVpnEndpointInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateClientVpnEndpointInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateClientVpnEndpointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateClientVpnEndpointInput>
    public typealias MOutput = OperationOutput<CreateClientVpnEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateClientVpnEndpointOutputError>
}

public struct CreateClientVpnEndpointInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateClientVpnEndpointInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateClientVpnEndpointInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateClientVpnEndpointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateClientVpnEndpointInput>
    public typealias MOutput = OperationOutput<CreateClientVpnEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateClientVpnEndpointOutputError>
}

public struct CreateClientVpnEndpointInputBodyMiddleware: Middleware {
    public let id: String = "CreateClientVpnEndpointInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateClientVpnEndpointInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateClientVpnEndpointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateClientVpnEndpointInput>
    public typealias MOutput = OperationOutput<CreateClientVpnEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateClientVpnEndpointOutputError>
}

extension CreateClientVpnEndpointInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let authenticationOptions = authenticationOptions {
            if !authenticationOptions.isEmpty {
                for (index0, clientvpnauthenticationrequest0) in authenticationOptions.enumerated() {
                    var authenticationOptionsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Authentication.\(index0.advanced(by: 1))"))
                    try authenticationOptionsContainer0.encode(clientvpnauthenticationrequest0, forKey: Key(""))
                }
            }
        }
        if let clientCidrBlock = clientCidrBlock {
            try container.encode(clientCidrBlock, forKey: Key("ClientCidrBlock"))
        }
        if let clientConnectOptions = clientConnectOptions {
            try container.encode(clientConnectOptions, forKey: Key("ClientConnectOptions"))
        }
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: Key("ClientToken"))
        }
        if let connectionLogOptions = connectionLogOptions {
            try container.encode(connectionLogOptions, forKey: Key("ConnectionLogOptions"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let dnsServers = dnsServers {
            if !dnsServers.isEmpty {
                for (index0, string0) in dnsServers.enumerated() {
                    var dnsServersContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("DnsServers.\(index0.advanced(by: 1))"))
                    try dnsServersContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if let securityGroupIds = securityGroupIds {
            if !securityGroupIds.isEmpty {
                for (index0, securitygroupid0) in securityGroupIds.enumerated() {
                    var securityGroupIdsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("SecurityGroupId.\(index0.advanced(by: 1))"))
                    try securityGroupIdsContainer0.encode(securitygroupid0, forKey: Key(""))
                }
            }
        }
        if let selfServicePortal = selfServicePortal {
            try container.encode(selfServicePortal, forKey: Key("SelfServicePortal"))
        }
        if let serverCertificateArn = serverCertificateArn {
            try container.encode(serverCertificateArn, forKey: Key("ServerCertificateArn"))
        }
        if splitTunnel != false {
            try container.encode(splitTunnel, forKey: Key("SplitTunnel"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: Key(""))
                }
            }
        }
        if let transportProtocol = transportProtocol {
            try container.encode(transportProtocol, forKey: Key("TransportProtocol"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: Key("VpcId"))
        }
        if vpnPort != 0 {
            try container.encode(vpnPort, forKey: Key("VpnPort"))
        }
        try container.encode("CreateClientVpnEndpoint", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
