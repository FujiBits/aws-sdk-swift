// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeFlowLogsOutputResponseBody: Equatable {
    public let flowLogs: [FlowLog]?
    public let nextToken: String?
}

extension DescribeFlowLogsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case flowLogs = "flowLogSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.flowLogs) {
            struct KeyVal0{struct item{}}
            let flowLogsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .flowLogs)
            if let flowLogsWrappedContainer = flowLogsWrappedContainer {
                let flowLogsContainer = try flowLogsWrappedContainer.decodeIfPresent([FlowLog].self, forKey: .member)
                var flowLogsBuffer:[FlowLog]? = nil
                if let flowLogsContainer = flowLogsContainer {
                    flowLogsBuffer = [FlowLog]()
                    for structureContainer0 in flowLogsContainer {
                        flowLogsBuffer?.append(structureContainer0)
                    }
                }
                flowLogs = flowLogsBuffer
            } else {
                flowLogs = []
            }
        } else {
            flowLogs = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
