// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceStateChange: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currentState = "currentState"
        case instanceId = "instanceId"
        case previousState = "previousState"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let currentState = currentState {
            try container.encode(currentState, forKey: Key("CurrentState"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let previousState = previousState {
            try container.encode(previousState, forKey: Key("PreviousState"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let currentStateDecoded = try containerValues.decodeIfPresent(InstanceState.self, forKey: .currentState)
        currentState = currentStateDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let previousStateDecoded = try containerValues.decodeIfPresent(InstanceState.self, forKey: .previousState)
        previousState = previousStateDecoded
    }
}
