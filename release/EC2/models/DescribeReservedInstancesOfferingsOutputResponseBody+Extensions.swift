// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedInstancesOfferingsOutputResponseBody: Equatable {
    public let reservedInstancesOfferings: [ReservedInstancesOffering]?
    public let nextToken: String?
}

extension DescribeReservedInstancesOfferingsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case reservedInstancesOfferings = "reservedInstancesOfferingsSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.reservedInstancesOfferings) {
            struct KeyVal0{struct item{}}
            let reservedInstancesOfferingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .reservedInstancesOfferings)
            if let reservedInstancesOfferingsWrappedContainer = reservedInstancesOfferingsWrappedContainer {
                let reservedInstancesOfferingsContainer = try reservedInstancesOfferingsWrappedContainer.decodeIfPresent([ReservedInstancesOffering].self, forKey: .member)
                var reservedInstancesOfferingsBuffer:[ReservedInstancesOffering]? = nil
                if let reservedInstancesOfferingsContainer = reservedInstancesOfferingsContainer {
                    reservedInstancesOfferingsBuffer = [ReservedInstancesOffering]()
                    for structureContainer0 in reservedInstancesOfferingsContainer {
                        reservedInstancesOfferingsBuffer?.append(structureContainer0)
                    }
                }
                reservedInstancesOfferings = reservedInstancesOfferingsBuffer
            } else {
                reservedInstancesOfferings = []
            }
        } else {
            reservedInstancesOfferings = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
