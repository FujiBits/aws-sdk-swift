// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ModifyFpgaImageAttributeInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyFpgaImageAttributeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyFpgaImageAttributeInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyFpgaImageAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyFpgaImageAttributeInput>
    public typealias MOutput = OperationOutput<ModifyFpgaImageAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyFpgaImageAttributeOutputError>
}

public struct ModifyFpgaImageAttributeInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyFpgaImageAttributeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyFpgaImageAttributeInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyFpgaImageAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyFpgaImageAttributeInput>
    public typealias MOutput = OperationOutput<ModifyFpgaImageAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyFpgaImageAttributeOutputError>
}

public struct ModifyFpgaImageAttributeInputBodyMiddleware: Middleware {
    public let id: String = "ModifyFpgaImageAttributeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyFpgaImageAttributeInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyFpgaImageAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyFpgaImageAttributeInput>
    public typealias MOutput = OperationOutput<ModifyFpgaImageAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyFpgaImageAttributeOutputError>
}

extension ModifyFpgaImageAttributeInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let attribute = attribute {
            try container.encode(attribute, forKey: Key("Attribute"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if let fpgaImageId = fpgaImageId {
            try container.encode(fpgaImageId, forKey: Key("FpgaImageId"))
        }
        if let loadPermission = loadPermission {
            try container.encode(loadPermission, forKey: Key("LoadPermission"))
        }
        if let name = name {
            try container.encode(name, forKey: Key("Name"))
        }
        if let operationType = operationType {
            try container.encode(operationType, forKey: Key("OperationType"))
        }
        if let productCodes = productCodes {
            if !productCodes.isEmpty {
                for (index0, string0) in productCodes.enumerated() {
                    var productCodesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("ProductCode.\(index0.advanced(by: 1))"))
                    try productCodesContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let userGroups = userGroups {
            if !userGroups.isEmpty {
                for (index0, string0) in userGroups.enumerated() {
                    var userGroupsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserGroup.\(index0.advanced(by: 1))"))
                    try userGroupsContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let userIds = userIds {
            if !userIds.isEmpty {
                for (index0, string0) in userIds.enumerated() {
                    var userIdsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("UserId.\(index0.advanced(by: 1))"))
                    try userIdsContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        try container.encode("ModifyFpgaImageAttribute", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
