// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ModifyInstanceAttributeInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyInstanceAttributeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyInstanceAttributeInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyInstanceAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyInstanceAttributeInput>
    public typealias MOutput = OperationOutput<ModifyInstanceAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyInstanceAttributeOutputError>
}

public struct ModifyInstanceAttributeInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyInstanceAttributeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyInstanceAttributeInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyInstanceAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyInstanceAttributeInput>
    public typealias MOutput = OperationOutput<ModifyInstanceAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyInstanceAttributeOutputError>
}

public struct ModifyInstanceAttributeInputBodyMiddleware: Middleware {
    public let id: String = "ModifyInstanceAttributeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyInstanceAttributeInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyInstanceAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyInstanceAttributeInput>
    public typealias MOutput = OperationOutput<ModifyInstanceAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyInstanceAttributeOutputError>
}

extension ModifyInstanceAttributeInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let attribute = attribute {
            try container.encode(attribute, forKey: Key("Attribute"))
        }
        if let blockDeviceMappings = blockDeviceMappings {
            if !blockDeviceMappings.isEmpty {
                for (index0, instanceblockdevicemappingspecification0) in blockDeviceMappings.enumerated() {
                    var blockDeviceMappingsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("BlockDeviceMapping.\(index0.advanced(by: 1))"))
                    try blockDeviceMappingsContainer0.encode(instanceblockdevicemappingspecification0, forKey: Key(""))
                }
            }
        }
        if let disableApiTermination = disableApiTermination {
            try container.encode(disableApiTermination, forKey: Key("DisableApiTermination"))
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if let ebsOptimized = ebsOptimized {
            try container.encode(ebsOptimized, forKey: Key("EbsOptimized"))
        }
        if let enaSupport = enaSupport {
            try container.encode(enaSupport, forKey: Key("EnaSupport"))
        }
        if let groups = groups {
            if !groups.isEmpty {
                for (index0, string0) in groups.enumerated() {
                    var groupsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("GroupId.\(index0.advanced(by: 1))"))
                    try groupsContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior {
            try container.encode(instanceInitiatedShutdownBehavior, forKey: Key("InstanceInitiatedShutdownBehavior"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: Key("InstanceType"))
        }
        if let kernel = kernel {
            try container.encode(kernel, forKey: Key("Kernel"))
        }
        if let ramdisk = ramdisk {
            try container.encode(ramdisk, forKey: Key("Ramdisk"))
        }
        if let sourceDestCheck = sourceDestCheck {
            try container.encode(sourceDestCheck, forKey: Key("SourceDestCheck"))
        }
        if let sriovNetSupport = sriovNetSupport {
            try container.encode(sriovNetSupport, forKey: Key("SriovNetSupport"))
        }
        if let userData = userData {
            try container.encode(userData, forKey: Key("UserData"))
        }
        if let value = value {
            try container.encode(value, forKey: Key("Value"))
        }
        try container.encode("ModifyInstanceAttribute", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
