// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ScheduledInstanceRecurrenceRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case frequency = "Frequency"
        case interval = "Interval"
        case occurrenceDays = "OccurrenceDay"
        case occurrenceRelativeToEnd = "OccurrenceRelativeToEnd"
        case occurrenceUnit = "OccurrenceUnit"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let frequency = frequency {
            try container.encode(frequency, forKey: Key("Frequency"))
        }
        if interval != 0 {
            try container.encode(interval, forKey: Key("Interval"))
        }
        if let occurrenceDays = occurrenceDays {
            if !occurrenceDays.isEmpty {
                for (index0, integer0) in occurrenceDays.enumerated() {
                    var occurrenceDaysContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("OccurrenceDay.\(index0.advanced(by: 1))"))
                    try occurrenceDaysContainer0.encode(integer0, forKey: Key(""))
                }
            }
        }
        if occurrenceRelativeToEnd != false {
            try container.encode(occurrenceRelativeToEnd, forKey: Key("OccurrenceRelativeToEnd"))
        }
        if let occurrenceUnit = occurrenceUnit {
            try container.encode(occurrenceUnit, forKey: Key("OccurrenceUnit"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let frequencyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .frequency)
        frequency = frequencyDecoded
        let intervalDecoded = try containerValues.decode(Int.self, forKey: .interval)
        interval = intervalDecoded
        if containerValues.contains(.occurrenceDays) {
            struct KeyVal0{struct OccurenceDay{}}
            let occurrenceDaysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.OccurenceDay>.CodingKeys.self, forKey: .occurrenceDays)
            if let occurrenceDaysWrappedContainer = occurrenceDaysWrappedContainer {
                let occurrenceDaysContainer = try occurrenceDaysWrappedContainer.decodeIfPresent([Int].self, forKey: .member)
                var occurrenceDaysBuffer:[Int]? = nil
                if let occurrenceDaysContainer = occurrenceDaysContainer {
                    occurrenceDaysBuffer = [Int]()
                    for integerContainer0 in occurrenceDaysContainer {
                        occurrenceDaysBuffer?.append(integerContainer0)
                    }
                }
                occurrenceDays = occurrenceDaysBuffer
            } else {
                occurrenceDays = []
            }
        } else {
            occurrenceDays = nil
        }
        let occurrenceRelativeToEndDecoded = try containerValues.decode(Bool.self, forKey: .occurrenceRelativeToEnd)
        occurrenceRelativeToEnd = occurrenceRelativeToEndDecoded
        let occurrenceUnitDecoded = try containerValues.decodeIfPresent(String.self, forKey: .occurrenceUnit)
        occurrenceUnit = occurrenceUnitDecoded
    }
}
