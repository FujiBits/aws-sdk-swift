// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FpgaInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fpgas = "fpgas"
        case totalFpgaMemoryInMiB = "totalFpgaMemoryInMiB"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let fpgas = fpgas {
            if !fpgas.isEmpty {
                for (index0, fpgadeviceinfo0) in fpgas.enumerated() {
                    var fpgasContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Fpgas.\(index0.advanced(by: 1))"))
                    try fpgasContainer0.encode(fpgadeviceinfo0, forKey: Key(""))
                }
            }
        }
        if let totalFpgaMemoryInMiB = totalFpgaMemoryInMiB {
            try container.encode(totalFpgaMemoryInMiB, forKey: Key("TotalFpgaMemoryInMiB"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.fpgas) {
            struct KeyVal0{struct item{}}
            let fpgasWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .fpgas)
            if let fpgasWrappedContainer = fpgasWrappedContainer {
                let fpgasContainer = try fpgasWrappedContainer.decodeIfPresent([FpgaDeviceInfo].self, forKey: .member)
                var fpgasBuffer:[FpgaDeviceInfo]? = nil
                if let fpgasContainer = fpgasContainer {
                    fpgasBuffer = [FpgaDeviceInfo]()
                    for structureContainer0 in fpgasContainer {
                        fpgasBuffer?.append(structureContainer0)
                    }
                }
                fpgas = fpgasBuffer
            } else {
                fpgas = []
            }
        } else {
            fpgas = nil
        }
        let totalFpgaMemoryInMiBDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .totalFpgaMemoryInMiB)
        totalFpgaMemoryInMiB = totalFpgaMemoryInMiBDecoded
    }
}
