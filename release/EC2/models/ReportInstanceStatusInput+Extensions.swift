// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ReportInstanceStatusInputHeadersMiddleware: Middleware {
    public let id: String = "ReportInstanceStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReportInstanceStatusInput>,
                  next: H) -> Swift.Result<OperationOutput<ReportInstanceStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReportInstanceStatusInput>
    public typealias MOutput = OperationOutput<ReportInstanceStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReportInstanceStatusOutputError>
}

public struct ReportInstanceStatusInputQueryItemMiddleware: Middleware {
    public let id: String = "ReportInstanceStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReportInstanceStatusInput>,
                  next: H) -> Swift.Result<OperationOutput<ReportInstanceStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReportInstanceStatusInput>
    public typealias MOutput = OperationOutput<ReportInstanceStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReportInstanceStatusOutputError>
}

public struct ReportInstanceStatusInputBodyMiddleware: Middleware {
    public let id: String = "ReportInstanceStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReportInstanceStatusInput>,
                  next: H) -> Swift.Result<OperationOutput<ReportInstanceStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReportInstanceStatusInput>
    public typealias MOutput = OperationOutput<ReportInstanceStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReportInstanceStatusOutputError>
}

extension ReportInstanceStatusInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("EndTime"))
        }
        if let instances = instances {
            if !instances.isEmpty {
                for (index0, instanceid0) in instances.enumerated() {
                    var instancesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("InstanceId.\(index0.advanced(by: 1))"))
                    try instancesContainer0.encode(instanceid0, forKey: Key(""))
                }
            }
        }
        if let reasonCodes = reasonCodes {
            if !reasonCodes.isEmpty {
                for (index0, reportinstancereasoncodes0) in reasonCodes.enumerated() {
                    var reasonCodesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReasonCode.\(index0.advanced(by: 1))"))
                    try reasonCodesContainer0.encode(reportinstancereasoncodes0, forKey: Key(""))
                }
            }
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("StartTime"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        try container.encode("ReportInstanceStatus", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
