// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateVolumeInputHeadersMiddleware: Middleware {
    public let id: String = "CreateVolumeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVolumeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVolumeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVolumeInput>
    public typealias MOutput = OperationOutput<CreateVolumeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVolumeOutputError>
}

public struct CreateVolumeInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateVolumeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVolumeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVolumeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVolumeInput>
    public typealias MOutput = OperationOutput<CreateVolumeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVolumeOutputError>
}

public struct CreateVolumeInputBodyMiddleware: Middleware {
    public let id: String = "CreateVolumeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateVolumeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateVolumeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateVolumeInput>
    public typealias MOutput = OperationOutput<CreateVolumeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateVolumeOutputError>
}

extension CreateVolumeInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: Key("AvailabilityZone"))
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if encrypted != false {
            try container.encode(encrypted, forKey: Key("Encrypted"))
        }
        if iops != 0 {
            try container.encode(iops, forKey: Key("Iops"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: Key("KmsKeyId"))
        }
        if multiAttachEnabled != false {
            try container.encode(multiAttachEnabled, forKey: Key("MultiAttachEnabled"))
        }
        if let outpostArn = outpostArn {
            try container.encode(outpostArn, forKey: Key("OutpostArn"))
        }
        if size != 0 {
            try container.encode(size, forKey: Key("Size"))
        }
        if let snapshotId = snapshotId {
            try container.encode(snapshotId, forKey: Key("SnapshotId"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: Key(""))
                }
            }
        }
        if throughput != 0 {
            try container.encode(throughput, forKey: Key("Throughput"))
        }
        if let volumeType = volumeType {
            try container.encode(volumeType, forKey: Key("VolumeType"))
        }
        try container.encode("CreateVolume", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
