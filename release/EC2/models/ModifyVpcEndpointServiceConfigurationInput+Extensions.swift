// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ModifyVpcEndpointServiceConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyVpcEndpointServiceConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyVpcEndpointServiceConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyVpcEndpointServiceConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyVpcEndpointServiceConfigurationInput>
    public typealias MOutput = OperationOutput<ModifyVpcEndpointServiceConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyVpcEndpointServiceConfigurationOutputError>
}

public struct ModifyVpcEndpointServiceConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyVpcEndpointServiceConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyVpcEndpointServiceConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyVpcEndpointServiceConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyVpcEndpointServiceConfigurationInput>
    public typealias MOutput = OperationOutput<ModifyVpcEndpointServiceConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyVpcEndpointServiceConfigurationOutputError>
}

public struct ModifyVpcEndpointServiceConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "ModifyVpcEndpointServiceConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyVpcEndpointServiceConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyVpcEndpointServiceConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyVpcEndpointServiceConfigurationInput>
    public typealias MOutput = OperationOutput<ModifyVpcEndpointServiceConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyVpcEndpointServiceConfigurationOutputError>
}

extension ModifyVpcEndpointServiceConfigurationInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if acceptanceRequired != false {
            try container.encode(acceptanceRequired, forKey: Key("AcceptanceRequired"))
        }
        if let addGatewayLoadBalancerArns = addGatewayLoadBalancerArns {
            if !addGatewayLoadBalancerArns.isEmpty {
                for (index0, string0) in addGatewayLoadBalancerArns.enumerated() {
                    var addGatewayLoadBalancerArnsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("AddGatewayLoadBalancerArn.\(index0.advanced(by: 1))"))
                    try addGatewayLoadBalancerArnsContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let addNetworkLoadBalancerArns = addNetworkLoadBalancerArns {
            if !addNetworkLoadBalancerArns.isEmpty {
                for (index0, string0) in addNetworkLoadBalancerArns.enumerated() {
                    var addNetworkLoadBalancerArnsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("AddNetworkLoadBalancerArn.\(index0.advanced(by: 1))"))
                    try addNetworkLoadBalancerArnsContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if dryRun != false {
            try container.encode(dryRun, forKey: Key("DryRun"))
        }
        if let privateDnsName = privateDnsName {
            try container.encode(privateDnsName, forKey: Key("PrivateDnsName"))
        }
        if let removeGatewayLoadBalancerArns = removeGatewayLoadBalancerArns {
            if !removeGatewayLoadBalancerArns.isEmpty {
                for (index0, string0) in removeGatewayLoadBalancerArns.enumerated() {
                    var removeGatewayLoadBalancerArnsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("RemoveGatewayLoadBalancerArn.\(index0.advanced(by: 1))"))
                    try removeGatewayLoadBalancerArnsContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let removeNetworkLoadBalancerArns = removeNetworkLoadBalancerArns {
            if !removeNetworkLoadBalancerArns.isEmpty {
                for (index0, string0) in removeNetworkLoadBalancerArns.enumerated() {
                    var removeNetworkLoadBalancerArnsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("RemoveNetworkLoadBalancerArn.\(index0.advanced(by: 1))"))
                    try removeNetworkLoadBalancerArnsContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if removePrivateDnsName != false {
            try container.encode(removePrivateDnsName, forKey: Key("RemovePrivateDnsName"))
        }
        if let serviceId = serviceId {
            try container.encode(serviceId, forKey: Key("ServiceId"))
        }
        try container.encode("ModifyVpcEndpointServiceConfiguration", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
