// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KeyPairInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case keyFingerprint = "keyFingerprint"
        case keyName = "keyName"
        case keyPairId = "keyPairId"
        case tags = "tagSet"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let keyFingerprint = keyFingerprint {
            try container.encode(keyFingerprint, forKey: Key("KeyFingerprint"))
        }
        if let keyName = keyName {
            try container.encode(keyName, forKey: Key("KeyName"))
        }
        if let keyPairId = keyPairId {
            try container.encode(keyPairId, forKey: Key("KeyPairId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyPairId)
        keyPairId = keyPairIdDecoded
        let keyFingerprintDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyFingerprint)
        keyFingerprint = keyFingerprintDecoded
        let keyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyName)
        keyName = keyNameDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
