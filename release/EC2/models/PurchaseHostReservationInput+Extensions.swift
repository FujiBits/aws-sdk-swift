// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PurchaseHostReservationInputHeadersMiddleware: Middleware {
    public let id: String = "PurchaseHostReservationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PurchaseHostReservationInput>,
                  next: H) -> Swift.Result<OperationOutput<PurchaseHostReservationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PurchaseHostReservationInput>
    public typealias MOutput = OperationOutput<PurchaseHostReservationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PurchaseHostReservationOutputError>
}

public struct PurchaseHostReservationInputQueryItemMiddleware: Middleware {
    public let id: String = "PurchaseHostReservationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PurchaseHostReservationInput>,
                  next: H) -> Swift.Result<OperationOutput<PurchaseHostReservationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PurchaseHostReservationInput>
    public typealias MOutput = OperationOutput<PurchaseHostReservationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PurchaseHostReservationOutputError>
}

public struct PurchaseHostReservationInputBodyMiddleware: Middleware {
    public let id: String = "PurchaseHostReservationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PurchaseHostReservationInput>,
                  next: H) -> Swift.Result<OperationOutput<PurchaseHostReservationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PurchaseHostReservationInput>
    public typealias MOutput = OperationOutput<PurchaseHostReservationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PurchaseHostReservationOutputError>
}

extension PurchaseHostReservationInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: Key("ClientToken"))
        }
        if let currencyCode = currencyCode {
            try container.encode(currencyCode, forKey: Key("CurrencyCode"))
        }
        if let hostIdSet = hostIdSet {
            if !hostIdSet.isEmpty {
                for (index0, dedicatedhostid0) in hostIdSet.enumerated() {
                    var hostIdSetContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("HostIdSet.\(index0.advanced(by: 1))"))
                    try hostIdSetContainer0.encode(dedicatedhostid0, forKey: Key(""))
                }
            }
        }
        if let limitPrice = limitPrice {
            try container.encode(limitPrice, forKey: Key("LimitPrice"))
        }
        if let offeringId = offeringId {
            try container.encode(offeringId, forKey: Key("OfferingId"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: Key(""))
                }
            }
        }
        try container.encode("PurchaseHostReservation", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
