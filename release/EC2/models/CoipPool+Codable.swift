// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CoipPool: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case localGatewayRouteTableId = "localGatewayRouteTableId"
        case poolArn = "poolArn"
        case poolCidrs = "poolCidrSet"
        case poolId = "poolId"
        case tags = "tagSet"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let localGatewayRouteTableId = localGatewayRouteTableId {
            try container.encode(localGatewayRouteTableId, forKey: Key("LocalGatewayRouteTableId"))
        }
        if let poolArn = poolArn {
            try container.encode(poolArn, forKey: Key("PoolArn"))
        }
        if let poolCidrs = poolCidrs {
            if !poolCidrs.isEmpty {
                for (index0, string0) in poolCidrs.enumerated() {
                    var poolCidrsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("PoolCidrSet.\(index0.advanced(by: 1))"))
                    try poolCidrsContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let poolId = poolId {
            try container.encode(poolId, forKey: Key("PoolId"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, tag0) in tags.enumerated() {
                    var tagsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSet.\(index0.advanced(by: 1))"))
                    try tagsContainer0.encode(tag0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let poolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .poolId)
        poolId = poolIdDecoded
        if containerValues.contains(.poolCidrs) {
            struct KeyVal0{struct item{}}
            let poolCidrsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .poolCidrs)
            if let poolCidrsWrappedContainer = poolCidrsWrappedContainer {
                let poolCidrsContainer = try poolCidrsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var poolCidrsBuffer:[String]? = nil
                if let poolCidrsContainer = poolCidrsContainer {
                    poolCidrsBuffer = [String]()
                    for stringContainer0 in poolCidrsContainer {
                        poolCidrsBuffer?.append(stringContainer0)
                    }
                }
                poolCidrs = poolCidrsBuffer
            } else {
                poolCidrs = []
            }
        } else {
            poolCidrs = nil
        }
        let localGatewayRouteTableIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .localGatewayRouteTableId)
        localGatewayRouteTableId = localGatewayRouteTableIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct item{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let poolArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .poolArn)
        poolArn = poolArnDecoded
    }
}
