// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetAssociatedIpv6PoolCidrsOutputResponseBody: Equatable {
    public let ipv6CidrAssociations: [Ipv6CidrAssociation]?
    public let nextToken: String?
}

extension GetAssociatedIpv6PoolCidrsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case ipv6CidrAssociations = "ipv6CidrAssociationSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.ipv6CidrAssociations) {
            struct KeyVal0{struct item{}}
            let ipv6CidrAssociationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .ipv6CidrAssociations)
            if let ipv6CidrAssociationsWrappedContainer = ipv6CidrAssociationsWrappedContainer {
                let ipv6CidrAssociationsContainer = try ipv6CidrAssociationsWrappedContainer.decodeIfPresent([Ipv6CidrAssociation].self, forKey: .member)
                var ipv6CidrAssociationsBuffer:[Ipv6CidrAssociation]? = nil
                if let ipv6CidrAssociationsContainer = ipv6CidrAssociationsContainer {
                    ipv6CidrAssociationsBuffer = [Ipv6CidrAssociation]()
                    for structureContainer0 in ipv6CidrAssociationsContainer {
                        ipv6CidrAssociationsBuffer?.append(structureContainer0)
                    }
                }
                ipv6CidrAssociations = ipv6CidrAssociationsBuffer
            } else {
                ipv6CidrAssociations = []
            }
        } else {
            ipv6CidrAssociations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
