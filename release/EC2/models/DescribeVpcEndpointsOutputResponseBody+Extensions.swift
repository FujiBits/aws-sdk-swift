// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVpcEndpointsOutputResponseBody: Equatable {
    public let vpcEndpoints: [VpcEndpoint]?
    public let nextToken: String?
}

extension DescribeVpcEndpointsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case vpcEndpoints = "vpcEndpointSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.vpcEndpoints) {
            struct KeyVal0{struct item{}}
            let vpcEndpointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .vpcEndpoints)
            if let vpcEndpointsWrappedContainer = vpcEndpointsWrappedContainer {
                let vpcEndpointsContainer = try vpcEndpointsWrappedContainer.decodeIfPresent([VpcEndpoint].self, forKey: .member)
                var vpcEndpointsBuffer:[VpcEndpoint]? = nil
                if let vpcEndpointsContainer = vpcEndpointsContainer {
                    vpcEndpointsBuffer = [VpcEndpoint]()
                    for structureContainer0 in vpcEndpointsContainer {
                        vpcEndpointsBuffer?.append(structureContainer0)
                    }
                }
                vpcEndpoints = vpcEndpointsBuffer
            } else {
                vpcEndpoints = []
            }
        } else {
            vpcEndpoints = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
