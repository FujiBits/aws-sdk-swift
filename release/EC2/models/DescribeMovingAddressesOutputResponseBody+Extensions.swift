// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeMovingAddressesOutputResponseBody: Equatable {
    public let movingAddressStatuses: [MovingAddressStatus]?
    public let nextToken: String?
}

extension DescribeMovingAddressesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case movingAddressStatuses = "movingAddressStatusSet"
        case nextToken = "nextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.movingAddressStatuses) {
            struct KeyVal0{struct item{}}
            let movingAddressStatusesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .movingAddressStatuses)
            if let movingAddressStatusesWrappedContainer = movingAddressStatusesWrappedContainer {
                let movingAddressStatusesContainer = try movingAddressStatusesWrappedContainer.decodeIfPresent([MovingAddressStatus].self, forKey: .member)
                var movingAddressStatusesBuffer:[MovingAddressStatus]? = nil
                if let movingAddressStatusesContainer = movingAddressStatusesContainer {
                    movingAddressStatusesBuffer = [MovingAddressStatus]()
                    for structureContainer0 in movingAddressStatusesContainer {
                        movingAddressStatusesBuffer?.append(structureContainer0)
                    }
                }
                movingAddressStatuses = movingAddressStatusesBuffer
            } else {
                movingAddressStatuses = []
            }
        } else {
            movingAddressStatuses = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
