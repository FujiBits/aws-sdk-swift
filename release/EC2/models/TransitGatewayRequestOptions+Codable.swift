// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransitGatewayRequestOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case amazonSideAsn = "AmazonSideAsn"
        case autoAcceptSharedAttachments = "AutoAcceptSharedAttachments"
        case defaultRouteTableAssociation = "DefaultRouteTableAssociation"
        case defaultRouteTablePropagation = "DefaultRouteTablePropagation"
        case dnsSupport = "DnsSupport"
        case multicastSupport = "MulticastSupport"
        case transitGatewayCidrBlocks = "TransitGatewayCidrBlocks"
        case vpnEcmpSupport = "VpnEcmpSupport"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if amazonSideAsn != 0 {
            try container.encode(amazonSideAsn, forKey: Key("AmazonSideAsn"))
        }
        if let autoAcceptSharedAttachments = autoAcceptSharedAttachments {
            try container.encode(autoAcceptSharedAttachments, forKey: Key("AutoAcceptSharedAttachments"))
        }
        if let defaultRouteTableAssociation = defaultRouteTableAssociation {
            try container.encode(defaultRouteTableAssociation, forKey: Key("DefaultRouteTableAssociation"))
        }
        if let defaultRouteTablePropagation = defaultRouteTablePropagation {
            try container.encode(defaultRouteTablePropagation, forKey: Key("DefaultRouteTablePropagation"))
        }
        if let dnsSupport = dnsSupport {
            try container.encode(dnsSupport, forKey: Key("DnsSupport"))
        }
        if let multicastSupport = multicastSupport {
            try container.encode(multicastSupport, forKey: Key("MulticastSupport"))
        }
        if let transitGatewayCidrBlocks = transitGatewayCidrBlocks {
            if !transitGatewayCidrBlocks.isEmpty {
                for (index0, string0) in transitGatewayCidrBlocks.enumerated() {
                    var transitGatewayCidrBlocksContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TransitGatewayCidrBlocks.\(index0.advanced(by: 1))"))
                    try transitGatewayCidrBlocksContainer0.encode(string0, forKey: Key(""))
                }
            }
        }
        if let vpnEcmpSupport = vpnEcmpSupport {
            try container.encode(vpnEcmpSupport, forKey: Key("VpnEcmpSupport"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let amazonSideAsnDecoded = try containerValues.decode(Int.self, forKey: .amazonSideAsn)
        amazonSideAsn = amazonSideAsnDecoded
        let autoAcceptSharedAttachmentsDecoded = try containerValues.decodeIfPresent(AutoAcceptSharedAttachmentsValue.self, forKey: .autoAcceptSharedAttachments)
        autoAcceptSharedAttachments = autoAcceptSharedAttachmentsDecoded
        let defaultRouteTableAssociationDecoded = try containerValues.decodeIfPresent(DefaultRouteTableAssociationValue.self, forKey: .defaultRouteTableAssociation)
        defaultRouteTableAssociation = defaultRouteTableAssociationDecoded
        let defaultRouteTablePropagationDecoded = try containerValues.decodeIfPresent(DefaultRouteTablePropagationValue.self, forKey: .defaultRouteTablePropagation)
        defaultRouteTablePropagation = defaultRouteTablePropagationDecoded
        let vpnEcmpSupportDecoded = try containerValues.decodeIfPresent(VpnEcmpSupportValue.self, forKey: .vpnEcmpSupport)
        vpnEcmpSupport = vpnEcmpSupportDecoded
        let dnsSupportDecoded = try containerValues.decodeIfPresent(DnsSupportValue.self, forKey: .dnsSupport)
        dnsSupport = dnsSupportDecoded
        let multicastSupportDecoded = try containerValues.decodeIfPresent(MulticastSupportValue.self, forKey: .multicastSupport)
        multicastSupport = multicastSupportDecoded
        if containerValues.contains(.transitGatewayCidrBlocks) {
            struct KeyVal0{struct item{}}
            let transitGatewayCidrBlocksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .transitGatewayCidrBlocks)
            if let transitGatewayCidrBlocksWrappedContainer = transitGatewayCidrBlocksWrappedContainer {
                let transitGatewayCidrBlocksContainer = try transitGatewayCidrBlocksWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var transitGatewayCidrBlocksBuffer:[String]? = nil
                if let transitGatewayCidrBlocksContainer = transitGatewayCidrBlocksContainer {
                    transitGatewayCidrBlocksBuffer = [String]()
                    for stringContainer0 in transitGatewayCidrBlocksContainer {
                        transitGatewayCidrBlocksBuffer?.append(stringContainer0)
                    }
                }
                transitGatewayCidrBlocks = transitGatewayCidrBlocksBuffer
            } else {
                transitGatewayCidrBlocks = []
            }
        } else {
            transitGatewayCidrBlocks = nil
        }
    }
}
