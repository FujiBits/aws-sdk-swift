// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateInstanceExportTaskInputHeadersMiddleware: Middleware {
    public let id: String = "CreateInstanceExportTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInstanceExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInstanceExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInstanceExportTaskInput>
    public typealias MOutput = OperationOutput<CreateInstanceExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInstanceExportTaskOutputError>
}

public struct CreateInstanceExportTaskInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateInstanceExportTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInstanceExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInstanceExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInstanceExportTaskInput>
    public typealias MOutput = OperationOutput<CreateInstanceExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInstanceExportTaskOutputError>
}

public struct CreateInstanceExportTaskInputBodyMiddleware: Middleware {
    public let id: String = "CreateInstanceExportTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInstanceExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInstanceExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInstanceExportTaskInput>
    public typealias MOutput = OperationOutput<CreateInstanceExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInstanceExportTaskOutputError>
}

extension CreateInstanceExportTaskInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let exportToS3Task = exportToS3Task {
            try container.encode(exportToS3Task, forKey: Key("ExportToS3"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: Key("InstanceId"))
        }
        if let tagSpecifications = tagSpecifications {
            if !tagSpecifications.isEmpty {
                for (index0, tagspecification0) in tagSpecifications.enumerated() {
                    var tagSpecificationsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagSpecification.\(index0.advanced(by: 1))"))
                    try tagSpecificationsContainer0.encode(tagspecification0, forKey: Key(""))
                }
            }
        }
        if let targetEnvironment = targetEnvironment {
            try container.encode(targetEnvironment, forKey: Key("TargetEnvironment"))
        }
        try container.encode("CreateInstanceExportTask", forKey:Key("Action"))
        try container.encode("2016-11-15", forKey:Key("Version"))
    }
}
