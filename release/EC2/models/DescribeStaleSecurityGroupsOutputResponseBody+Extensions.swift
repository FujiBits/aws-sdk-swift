// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeStaleSecurityGroupsOutputResponseBody: Equatable {
    public let nextToken: String?
    public let staleSecurityGroupSet: [StaleSecurityGroup]?
}

extension DescribeStaleSecurityGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case staleSecurityGroupSet = "staleSecurityGroupSet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.staleSecurityGroupSet) {
            struct KeyVal0{struct item{}}
            let staleSecurityGroupSetWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .staleSecurityGroupSet)
            if let staleSecurityGroupSetWrappedContainer = staleSecurityGroupSetWrappedContainer {
                let staleSecurityGroupSetContainer = try staleSecurityGroupSetWrappedContainer.decodeIfPresent([StaleSecurityGroup].self, forKey: .member)
                var staleSecurityGroupSetBuffer:[StaleSecurityGroup]? = nil
                if let staleSecurityGroupSetContainer = staleSecurityGroupSetContainer {
                    staleSecurityGroupSetBuffer = [StaleSecurityGroup]()
                    for structureContainer0 in staleSecurityGroupSetContainer {
                        staleSecurityGroupSetBuffer?.append(structureContainer0)
                    }
                }
                staleSecurityGroupSet = staleSecurityGroupSetBuffer
            } else {
                staleSecurityGroupSet = []
            }
        } else {
            staleSecurityGroupSet = nil
        }
    }
}
