// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension IoTSiteWiseClient {
    /// <p>Associates a child asset with the given parent asset through a hierarchy defined in the
    ///       parent asset's model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/add-associated-assets.html">Associating assets</a> in the
    ///         <i>AWS IoT SiteWise User Guide</i>.</p>
    func associateAssets(input: AssociateAssetsInput) async throws -> AssociateAssetsOutputResponse
    {
        typealias associateAssetsContinuation = CheckedContinuation<AssociateAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateAssetsContinuation) in
            associateAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Associates a group (batch) of assets with an AWS IoT SiteWise Monitor project.</p>
    func batchAssociateProjectAssets(input: BatchAssociateProjectAssetsInput) async throws -> BatchAssociateProjectAssetsOutputResponse
    {
        typealias batchAssociateProjectAssetsContinuation = CheckedContinuation<BatchAssociateProjectAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchAssociateProjectAssetsContinuation) in
            batchAssociateProjectAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates a group (batch) of assets from an AWS IoT SiteWise Monitor project.</p>
    func batchDisassociateProjectAssets(input: BatchDisassociateProjectAssetsInput) async throws -> BatchDisassociateProjectAssetsOutputResponse
    {
        typealias batchDisassociateProjectAssetsContinuation = CheckedContinuation<BatchDisassociateProjectAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDisassociateProjectAssetsContinuation) in
            batchDisassociateProjectAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sends a list of asset property values to AWS IoT SiteWise. Each value is a timestamp-quality-value
    ///       (TQV) data point. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/ingest-api.html">Ingesting data using the API</a> in the
    ///         <i>AWS IoT SiteWise User Guide</i>.</p>
    ///          <p>To identify an asset property, you must specify one of the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>The <code>assetId</code> and <code>propertyId</code> of an asset property.</p>
    ///             </li>
    ///             <li>
    ///                <p>A <code>propertyAlias</code>, which is a data stream alias (for example,
    ///           <code>/company/windfarm/3/turbine/7/temperature</code>). To define an asset property's alias, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html">UpdateAssetProperty</a>.</p>
    ///             </li>
    ///          </ul>
    ///          <important>
    ///             <p>With respect to Unix epoch time, AWS IoT SiteWise accepts only TQVs that have a timestamp of no more
    ///         than 7 days in the past and no more than 10 minutes in the future. AWS IoT SiteWise rejects timestamps
    ///         outside of the inclusive range of [-7 days, +10 minutes] and returns a
    ///           <code>TimestampOutOfRangeException</code> error.</p>
    ///             <p>For each asset property, AWS IoT SiteWise overwrites TQVs with duplicate timestamps unless the newer
    ///         TQV has a different quality. For example, if you store a TQV <code>{T1, GOOD, V1}</code>,
    ///         then storing <code>{T1, GOOD, V2}</code> replaces the existing TQV.</p>
    ///          </important>
    ///          <p>AWS IoT SiteWise authorizes access to each <code>BatchPutAssetPropertyValue</code> entry individually.
    ///       For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-batchputassetpropertyvalue-action">BatchPutAssetPropertyValue authorization</a> in the
    ///       <i>AWS IoT SiteWise User Guide</i>.</p>
    func batchPutAssetPropertyValue(input: BatchPutAssetPropertyValueInput) async throws -> BatchPutAssetPropertyValueOutputResponse
    {
        typealias batchPutAssetPropertyValueContinuation = CheckedContinuation<BatchPutAssetPropertyValueOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchPutAssetPropertyValueContinuation) in
            batchPutAssetPropertyValue(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an access policy that grants the specified identity (AWS SSO user, AWS SSO group, or
    ///       IAM user) access to the specified AWS IoT SiteWise Monitor portal or project resource.</p>
    func createAccessPolicy(input: CreateAccessPolicyInput) async throws -> CreateAccessPolicyOutputResponse
    {
        typealias createAccessPolicyContinuation = CheckedContinuation<CreateAccessPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAccessPolicyContinuation) in
            createAccessPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an asset from an existing asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-assets.html">Creating assets</a> in the
    ///         <i>AWS IoT SiteWise User Guide</i>.</p>
    func createAsset(input: CreateAssetInput) async throws -> CreateAssetOutputResponse
    {
        typealias createAssetContinuation = CheckedContinuation<CreateAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAssetContinuation) in
            createAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an asset model from specified property and hierarchy definitions. You create
    ///       assets from asset models. With asset models, you can easily create assets of the same type
    ///       that have standardized definitions. Each asset created from a model inherits the asset model's
    ///       property and hierarchy definitions. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/define-models.html">Defining asset models</a> in the
    ///         <i>AWS IoT SiteWise User Guide</i>.</p>
    func createAssetModel(input: CreateAssetModelInput) async throws -> CreateAssetModelOutputResponse
    {
        typealias createAssetModelContinuation = CheckedContinuation<CreateAssetModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAssetModelContinuation) in
            createAssetModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a dashboard in an AWS IoT SiteWise Monitor project.</p>
    func createDashboard(input: CreateDashboardInput) async throws -> CreateDashboardOutputResponse
    {
        typealias createDashboardContinuation = CheckedContinuation<CreateDashboardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDashboardContinuation) in
            createDashboard(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a gateway, which is a virtual or edge device that delivers industrial data streams
    ///       from local servers to AWS IoT SiteWise. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/gateway-connector.html">Ingesting data using a gateway</a> in the
    ///         <i>AWS IoT SiteWise User Guide</i>.</p>
    func createGateway(input: CreateGatewayInput) async throws -> CreateGatewayOutputResponse
    {
        typealias createGatewayContinuation = CheckedContinuation<CreateGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createGatewayContinuation) in
            createGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a portal, which can contain projects and dashboards. AWS IoT SiteWise Monitor uses AWS SSO or IAM
    ///       to authenticate portal users and manage user permissions.</p>
    ///          <note>
    ///             <p>Before you can sign in to a new portal, you must add at least one identity to that
    ///         portal. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/administer-portals.html#portal-change-admins">Adding or removing portal
    ///           administrators</a> in the <i>AWS IoT SiteWise User Guide</i>.</p>
    ///          </note>
    func createPortal(input: CreatePortalInput) async throws -> CreatePortalOutputResponse
    {
        typealias createPortalContinuation = CheckedContinuation<CreatePortalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPortalContinuation) in
            createPortal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a project in the specified portal.</p>
    func createProject(input: CreateProjectInput) async throws -> CreateProjectOutputResponse
    {
        typealias createProjectContinuation = CheckedContinuation<CreateProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProjectContinuation) in
            createProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an access policy that grants the specified identity access to the specified
    ///       AWS IoT SiteWise Monitor resource. You can use this operation to revoke access to an AWS IoT SiteWise Monitor
    ///       resource.</p>
    func deleteAccessPolicy(input: DeleteAccessPolicyInput) async throws -> DeleteAccessPolicyOutputResponse
    {
        typealias deleteAccessPolicyContinuation = CheckedContinuation<DeleteAccessPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAccessPolicyContinuation) in
            deleteAccessPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an asset. This action can't be undone. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/delete-assets-and-models.html">Deleting assets and
    ///         models</a> in the <i>AWS IoT SiteWise User Guide</i>.
    ///       </p>
    ///          <note>
    ///             <p>You can't delete an asset that's associated to another asset. For more information, see
    ///           <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DisassociateAssets.html">DisassociateAssets</a>.</p>
    ///          </note>
    func deleteAsset(input: DeleteAssetInput) async throws -> DeleteAssetOutputResponse
    {
        typealias deleteAssetContinuation = CheckedContinuation<DeleteAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAssetContinuation) in
            deleteAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an asset model. This action can't be undone. You must delete all assets created
    ///       from an asset model before you can delete the model. Also, you can't delete an asset model if
    ///       a parent asset model exists that contains a property formula expression that depends on the
    ///       asset model that you want to delete. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/delete-assets-and-models.html">Deleting assets and models</a> in the
    ///         <i>AWS IoT SiteWise User Guide</i>.</p>
    func deleteAssetModel(input: DeleteAssetModelInput) async throws -> DeleteAssetModelOutputResponse
    {
        typealias deleteAssetModelContinuation = CheckedContinuation<DeleteAssetModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAssetModelContinuation) in
            deleteAssetModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a dashboard from AWS IoT SiteWise Monitor.</p>
    func deleteDashboard(input: DeleteDashboardInput) async throws -> DeleteDashboardOutputResponse
    {
        typealias deleteDashboardContinuation = CheckedContinuation<DeleteDashboardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDashboardContinuation) in
            deleteDashboard(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a gateway from AWS IoT SiteWise. When you delete a gateway, some of the gateway's files remain
    ///       in your gateway's file system.</p>
    func deleteGateway(input: DeleteGatewayInput) async throws -> DeleteGatewayOutputResponse
    {
        typealias deleteGatewayContinuation = CheckedContinuation<DeleteGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteGatewayContinuation) in
            deleteGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a portal from AWS IoT SiteWise Monitor.</p>
    func deletePortal(input: DeletePortalInput) async throws -> DeletePortalOutputResponse
    {
        typealias deletePortalContinuation = CheckedContinuation<DeletePortalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePortalContinuation) in
            deletePortal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a project from AWS IoT SiteWise Monitor.</p>
    func deleteProject(input: DeleteProjectInput) async throws -> DeleteProjectOutputResponse
    {
        typealias deleteProjectContinuation = CheckedContinuation<DeleteProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProjectContinuation) in
            deleteProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes an access policy, which specifies an identity's access to an AWS IoT SiteWise Monitor portal or
    ///       project.</p>
    func describeAccessPolicy(input: DescribeAccessPolicyInput) async throws -> DescribeAccessPolicyOutputResponse
    {
        typealias describeAccessPolicyContinuation = CheckedContinuation<DescribeAccessPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccessPolicyContinuation) in
            describeAccessPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about an asset.</p>
    func describeAsset(input: DescribeAssetInput) async throws -> DescribeAssetOutputResponse
    {
        typealias describeAssetContinuation = CheckedContinuation<DescribeAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAssetContinuation) in
            describeAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about an asset model.</p>
    func describeAssetModel(input: DescribeAssetModelInput) async throws -> DescribeAssetModelOutputResponse
    {
        typealias describeAssetModelContinuation = CheckedContinuation<DescribeAssetModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAssetModelContinuation) in
            describeAssetModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about an asset property.</p>
    ///          <note>
    ///             <p>When you call this operation for an attribute property, this response includes the
    ///         default attribute value that you define in the asset model. If you update the default value
    ///         in the model, this operation's response includes the new default value.</p>
    ///          </note>
    ///          <p>This operation doesn't return the value of the asset property. To get the value of an
    ///       asset property, use <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_GetAssetPropertyValue.html">GetAssetPropertyValue</a>.</p>
    func describeAssetProperty(input: DescribeAssetPropertyInput) async throws -> DescribeAssetPropertyOutputResponse
    {
        typealias describeAssetPropertyContinuation = CheckedContinuation<DescribeAssetPropertyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAssetPropertyContinuation) in
            describeAssetProperty(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about a dashboard.</p>
    func describeDashboard(input: DescribeDashboardInput) async throws -> DescribeDashboardOutputResponse
    {
        typealias describeDashboardContinuation = CheckedContinuation<DescribeDashboardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDashboardContinuation) in
            describeDashboard(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the default encryption configuration for the
    ///       AWS account in the default or specified region. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/key-management.html">Key management</a>
    ///       in the <i>AWS IoT SiteWise User Guide</i>.</p>
    func describeDefaultEncryptionConfiguration(input: DescribeDefaultEncryptionConfigurationInput) async throws -> DescribeDefaultEncryptionConfigurationOutputResponse
    {
        typealias describeDefaultEncryptionConfigurationContinuation = CheckedContinuation<DescribeDefaultEncryptionConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDefaultEncryptionConfigurationContinuation) in
            describeDefaultEncryptionConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about a gateway.</p>
    func describeGateway(input: DescribeGatewayInput) async throws -> DescribeGatewayOutputResponse
    {
        typealias describeGatewayContinuation = CheckedContinuation<DescribeGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeGatewayContinuation) in
            describeGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about a gateway capability configuration.
    ///       Each gateway capability defines data sources for a gateway. A capability configuration
    ///       can contain multiple data source configurations. If you define OPC-UA sources for a gateway in
    ///       the AWS IoT SiteWise console, all of your OPC-UA sources are stored in one capability configuration. To
    ///       list all capability configurations for a gateway, use <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeGateway.html">DescribeGateway</a>.</p>
    func describeGatewayCapabilityConfiguration(input: DescribeGatewayCapabilityConfigurationInput) async throws -> DescribeGatewayCapabilityConfigurationOutputResponse
    {
        typealias describeGatewayCapabilityConfigurationContinuation = CheckedContinuation<DescribeGatewayCapabilityConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeGatewayCapabilityConfigurationContinuation) in
            describeGatewayCapabilityConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the current AWS IoT SiteWise logging options.</p>
    func describeLoggingOptions(input: DescribeLoggingOptionsInput) async throws -> DescribeLoggingOptionsOutputResponse
    {
        typealias describeLoggingOptionsContinuation = CheckedContinuation<DescribeLoggingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeLoggingOptionsContinuation) in
            describeLoggingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about a portal.</p>
    func describePortal(input: DescribePortalInput) async throws -> DescribePortalOutputResponse
    {
        typealias describePortalContinuation = CheckedContinuation<DescribePortalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePortalContinuation) in
            describePortal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about a project.</p>
    func describeProject(input: DescribeProjectInput) async throws -> DescribeProjectOutputResponse
    {
        typealias describeProjectContinuation = CheckedContinuation<DescribeProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProjectContinuation) in
            describeProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates a child asset from the given parent asset through a hierarchy defined in the
    ///       parent asset's model.</p>
    func disassociateAssets(input: DisassociateAssetsInput) async throws -> DisassociateAssetsOutputResponse
    {
        typealias disassociateAssetsContinuation = CheckedContinuation<DisassociateAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateAssetsContinuation) in
            disassociateAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets aggregated values for an asset property. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/query-industrial-data.html#aggregates">Querying
    ///         aggregates</a> in the <i>AWS IoT SiteWise User Guide</i>.</p>
    ///          <p>To identify an asset property, you must specify one of the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>The <code>assetId</code> and <code>propertyId</code> of an asset property.</p>
    ///             </li>
    ///             <li>
    ///                <p>A <code>propertyAlias</code>, which is a data stream alias (for example,
    ///           <code>/company/windfarm/3/turbine/7/temperature</code>). To define an asset property's alias, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html">UpdateAssetProperty</a>.</p>
    ///             </li>
    ///          </ul>
    func getAssetPropertyAggregates(input: GetAssetPropertyAggregatesInput) async throws -> GetAssetPropertyAggregatesOutputResponse
    {
        typealias getAssetPropertyAggregatesContinuation = CheckedContinuation<GetAssetPropertyAggregatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAssetPropertyAggregatesContinuation) in
            getAssetPropertyAggregates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets an asset property's current value. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/query-industrial-data.html#current-values">Querying
    ///         current values</a> in the <i>AWS IoT SiteWise User Guide</i>.</p>
    ///          <p>To identify an asset property, you must specify one of the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>The <code>assetId</code> and <code>propertyId</code> of an asset property.</p>
    ///             </li>
    ///             <li>
    ///                <p>A <code>propertyAlias</code>, which is a data stream alias (for example,
    ///           <code>/company/windfarm/3/turbine/7/temperature</code>). To define an asset property's alias, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html">UpdateAssetProperty</a>.</p>
    ///             </li>
    ///          </ul>
    func getAssetPropertyValue(input: GetAssetPropertyValueInput) async throws -> GetAssetPropertyValueOutputResponse
    {
        typealias getAssetPropertyValueContinuation = CheckedContinuation<GetAssetPropertyValueOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAssetPropertyValueContinuation) in
            getAssetPropertyValue(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the history of an asset property's values. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/query-industrial-data.html#historical-values">Querying
    ///         historical values</a> in the <i>AWS IoT SiteWise User Guide</i>.</p>
    ///          <p>To identify an asset property, you must specify one of the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>The <code>assetId</code> and <code>propertyId</code> of an asset property.</p>
    ///             </li>
    ///             <li>
    ///                <p>A <code>propertyAlias</code>, which is a data stream alias (for example,
    ///           <code>/company/windfarm/3/turbine/7/temperature</code>). To define an asset property's alias, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html">UpdateAssetProperty</a>.</p>
    ///             </li>
    ///          </ul>
    func getAssetPropertyValueHistory(input: GetAssetPropertyValueHistoryInput) async throws -> GetAssetPropertyValueHistoryOutputResponse
    {
        typealias getAssetPropertyValueHistoryContinuation = CheckedContinuation<GetAssetPropertyValueHistoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAssetPropertyValueHistoryContinuation) in
            getAssetPropertyValueHistory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Get interpolated values for an asset property for a specified time interval, during a
    ///       period of time. For example, you can use the this operation to return the interpolated temperature values for a wind turbine every 24 hours
    ///       over a duration of 7 days.</p>
    ///          <note>
    ///             <p>This API isn't available in China (Beijing).</p>
    ///          </note>
    ///          <p>To identify an asset property, you must specify one of the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>The <code>assetId</code> and <code>propertyId</code> of an asset property.</p>
    ///             </li>
    ///             <li>
    ///                <p>A <code>propertyAlias</code>, which is a data stream alias (for example,
    ///           <code>/company/windfarm/3/turbine/7/temperature</code>). To define an asset property's alias, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html">UpdateAssetProperty</a>.</p>
    ///             </li>
    ///          </ul>
    func getInterpolatedAssetPropertyValues(input: GetInterpolatedAssetPropertyValuesInput) async throws -> GetInterpolatedAssetPropertyValuesOutputResponse
    {
        typealias getInterpolatedAssetPropertyValuesContinuation = CheckedContinuation<GetInterpolatedAssetPropertyValuesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInterpolatedAssetPropertyValuesContinuation) in
            getInterpolatedAssetPropertyValues(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a paginated list of access policies for an identity (an AWS SSO user, an AWS SSO
    ///       group, or an IAM user) or an AWS IoT SiteWise Monitor resource (a portal or project).</p>
    func listAccessPolicies(input: ListAccessPoliciesInput) async throws -> ListAccessPoliciesOutputResponse
    {
        typealias listAccessPoliciesContinuation = CheckedContinuation<ListAccessPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAccessPoliciesContinuation) in
            listAccessPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a paginated list of summaries of all asset models.</p>
    func listAssetModels(input: ListAssetModelsInput) async throws -> ListAssetModelsOutputResponse
    {
        typealias listAssetModelsContinuation = CheckedContinuation<ListAssetModelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssetModelsContinuation) in
            listAssetModels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a paginated list of asset relationships for an asset. You can use this operation
    ///       to identify an asset's root asset and all associated assets between that asset and its
    ///       root.</p>
    func listAssetRelationships(input: ListAssetRelationshipsInput) async throws -> ListAssetRelationshipsOutputResponse
    {
        typealias listAssetRelationshipsContinuation = CheckedContinuation<ListAssetRelationshipsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssetRelationshipsContinuation) in
            listAssetRelationships(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a paginated list of asset summaries.</p>
    ///          <p>You can use this operation to do the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>List assets based on a specific asset model.</p>
    ///             </li>
    ///             <li>
    ///                <p>List top-level assets.</p>
    ///             </li>
    ///          </ul>
    ///          <p>You can't use this operation to list all assets. To retrieve summaries for all of your
    ///       assets, use <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_ListAssetModels.html">ListAssetModels</a> to get all of your asset model IDs. Then, use ListAssets to get all
    ///       assets for each asset model.</p>
    func listAssets(input: ListAssetsInput) async throws -> ListAssetsOutputResponse
    {
        typealias listAssetsContinuation = CheckedContinuation<ListAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssetsContinuation) in
            listAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a paginated list of associated assets.</p>
    ///          <p>You can use this operation to do the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>List child assets associated to a parent asset by a hierarchy that you specify.</p>
    ///             </li>
    ///             <li>
    ///                <p>List an asset's parent asset.</p>
    ///             </li>
    ///          </ul>
    func listAssociatedAssets(input: ListAssociatedAssetsInput) async throws -> ListAssociatedAssetsOutputResponse
    {
        typealias listAssociatedAssetsContinuation = CheckedContinuation<ListAssociatedAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssociatedAssetsContinuation) in
            listAssociatedAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a paginated list of dashboards for an AWS IoT SiteWise Monitor project.</p>
    func listDashboards(input: ListDashboardsInput) async throws -> ListDashboardsOutputResponse
    {
        typealias listDashboardsContinuation = CheckedContinuation<ListDashboardsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDashboardsContinuation) in
            listDashboards(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a paginated list of gateways.</p>
    func listGateways(input: ListGatewaysInput) async throws -> ListGatewaysOutputResponse
    {
        typealias listGatewaysContinuation = CheckedContinuation<ListGatewaysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listGatewaysContinuation) in
            listGateways(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a paginated list of AWS IoT SiteWise Monitor portals.</p>
    func listPortals(input: ListPortalsInput) async throws -> ListPortalsOutputResponse
    {
        typealias listPortalsContinuation = CheckedContinuation<ListPortalsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPortalsContinuation) in
            listPortals(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a paginated list of assets associated with an AWS IoT SiteWise Monitor project.</p>
    func listProjectAssets(input: ListProjectAssetsInput) async throws -> ListProjectAssetsOutputResponse
    {
        typealias listProjectAssetsContinuation = CheckedContinuation<ListProjectAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProjectAssetsContinuation) in
            listProjectAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a paginated list of projects for an AWS IoT SiteWise Monitor portal.</p>
    func listProjects(input: ListProjectsInput) async throws -> ListProjectsOutputResponse
    {
        typealias listProjectsContinuation = CheckedContinuation<ListProjectsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProjectsContinuation) in
            listProjects(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the list of tags for an AWS IoT SiteWise resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets the default encryption configuration for the AWS
    ///       account. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/key-management.html">Key management</a>
    ///       in the <i>AWS IoT SiteWise User Guide</i>.</p>
    func putDefaultEncryptionConfiguration(input: PutDefaultEncryptionConfigurationInput) async throws -> PutDefaultEncryptionConfigurationOutputResponse
    {
        typealias putDefaultEncryptionConfigurationContinuation = CheckedContinuation<PutDefaultEncryptionConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putDefaultEncryptionConfigurationContinuation) in
            putDefaultEncryptionConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets logging options for AWS IoT SiteWise.</p>
    func putLoggingOptions(input: PutLoggingOptionsInput) async throws -> PutLoggingOptionsOutputResponse
    {
        typealias putLoggingOptionsContinuation = CheckedContinuation<PutLoggingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putLoggingOptionsContinuation) in
            putLoggingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds tags to an AWS IoT SiteWise resource. If a tag already exists for the resource, this operation
    ///       updates the tag's value.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes a tag from an AWS IoT SiteWise resource.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an existing access policy that specifies an identity's access to an AWS IoT SiteWise Monitor
    ///       portal or project resource.</p>
    func updateAccessPolicy(input: UpdateAccessPolicyInput) async throws -> UpdateAccessPolicyOutputResponse
    {
        typealias updateAccessPolicyContinuation = CheckedContinuation<UpdateAccessPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAccessPolicyContinuation) in
            updateAccessPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an asset's name. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-assets-and-models.html">Updating assets and models</a> in the
    ///         <i>AWS IoT SiteWise User Guide</i>.</p>
    func updateAsset(input: UpdateAssetInput) async throws -> UpdateAssetOutputResponse
    {
        typealias updateAssetContinuation = CheckedContinuation<UpdateAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAssetContinuation) in
            updateAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an asset model and all of the assets that were created from the model. Each asset
    ///       created from the model inherits the updated asset model's property and hierarchy definitions.
    ///       For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-assets-and-models.html">Updating assets and models</a> in the
    ///         <i>AWS IoT SiteWise User Guide</i>.</p>
    ///          <important>
    ///             <p>This operation overwrites the existing model with the provided model. To avoid deleting
    ///         your asset model's properties or hierarchies, you must include their IDs and definitions in
    ///         the updated asset model payload. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeAssetModel.html">DescribeAssetModel</a>.</p>
    ///             <p>If you remove a property from an asset model, AWS IoT SiteWise deletes all previous data for that
    ///         property. If you remove a hierarchy definition from an asset model, AWS IoT SiteWise disassociates every
    ///         asset associated with that hierarchy. You can't change the type or data type of an existing
    ///         property.</p>
    ///          </important>
    func updateAssetModel(input: UpdateAssetModelInput) async throws -> UpdateAssetModelOutputResponse
    {
        typealias updateAssetModelContinuation = CheckedContinuation<UpdateAssetModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAssetModelContinuation) in
            updateAssetModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an asset property's alias and notification state.</p>
    ///          <important>
    ///             <p>This operation overwrites the property's existing alias and notification state. To keep
    ///         your existing property's alias or notification state, you must include the existing values
    ///         in the UpdateAssetProperty request. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeAssetProperty.html">DescribeAssetProperty</a>.</p>
    ///          </important>
    func updateAssetProperty(input: UpdateAssetPropertyInput) async throws -> UpdateAssetPropertyOutputResponse
    {
        typealias updateAssetPropertyContinuation = CheckedContinuation<UpdateAssetPropertyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAssetPropertyContinuation) in
            updateAssetProperty(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an AWS IoT SiteWise Monitor dashboard.</p>
    func updateDashboard(input: UpdateDashboardInput) async throws -> UpdateDashboardOutputResponse
    {
        typealias updateDashboardContinuation = CheckedContinuation<UpdateDashboardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDashboardContinuation) in
            updateDashboard(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a gateway's name.</p>
    func updateGateway(input: UpdateGatewayInput) async throws -> UpdateGatewayOutputResponse
    {
        typealias updateGatewayContinuation = CheckedContinuation<UpdateGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGatewayContinuation) in
            updateGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a gateway capability configuration or defines a new capability configuration.
    ///       Each gateway capability defines data sources for a gateway. A capability configuration
    ///       can contain multiple data source configurations. If you define OPC-UA sources for a gateway in
    ///       the AWS IoT SiteWise console, all of your OPC-UA sources are stored in one capability configuration. To
    ///       list all capability configurations for a gateway, use <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeGateway.html">DescribeGateway</a>.</p>
    func updateGatewayCapabilityConfiguration(input: UpdateGatewayCapabilityConfigurationInput) async throws -> UpdateGatewayCapabilityConfigurationOutputResponse
    {
        typealias updateGatewayCapabilityConfigurationContinuation = CheckedContinuation<UpdateGatewayCapabilityConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGatewayCapabilityConfigurationContinuation) in
            updateGatewayCapabilityConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an AWS IoT SiteWise Monitor portal.</p>
    func updatePortal(input: UpdatePortalInput) async throws -> UpdatePortalOutputResponse
    {
        typealias updatePortalContinuation = CheckedContinuation<UpdatePortalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePortalContinuation) in
            updatePortal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an AWS IoT SiteWise Monitor project.</p>
    func updateProject(input: UpdateProjectInput) async throws -> UpdateProjectOutputResponse
    {
        typealias updateProjectContinuation = CheckedContinuation<UpdateProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProjectContinuation) in
            updateProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
