// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdatePortalInputHeadersMiddleware: Middleware {
    public let id: String = "UpdatePortalInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdatePortalInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdatePortalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdatePortalInput>
    public typealias MOutput = OperationOutput<UpdatePortalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdatePortalOutputError>
}

public struct UpdatePortalInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdatePortalInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdatePortalInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdatePortalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdatePortalInput>
    public typealias MOutput = OperationOutput<UpdatePortalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdatePortalOutputError>
}

public struct UpdatePortalInputBodyMiddleware: Middleware {
    public let id: String = "UpdatePortalInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdatePortalInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdatePortalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdatePortalInput>
    public typealias MOutput = OperationOutput<UpdatePortalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdatePortalOutputError>
}

extension UpdatePortalInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarms
        case clientToken
        case notificationSenderEmail
        case portalContactEmail
        case portalDescription
        case portalLogoImage
        case portalName
        case roleArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarms = alarms {
            try encodeContainer.encode(alarms, forKey: .alarms)
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let notificationSenderEmail = notificationSenderEmail {
            try encodeContainer.encode(notificationSenderEmail, forKey: .notificationSenderEmail)
        }
        if let portalContactEmail = portalContactEmail {
            try encodeContainer.encode(portalContactEmail, forKey: .portalContactEmail)
        }
        if let portalDescription = portalDescription {
            try encodeContainer.encode(portalDescription, forKey: .portalDescription)
        }
        if let portalLogoImage = portalLogoImage {
            try encodeContainer.encode(portalLogoImage, forKey: .portalLogoImage)
        }
        if let portalName = portalName {
            try encodeContainer.encode(portalName, forKey: .portalName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}
