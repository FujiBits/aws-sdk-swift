// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateAssetModelInputHeadersMiddleware: Middleware {
    public let id: String = "CreateAssetModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAssetModelInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAssetModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAssetModelInput>
    public typealias MOutput = OperationOutput<CreateAssetModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAssetModelOutputError>
}

public struct CreateAssetModelInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateAssetModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAssetModelInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAssetModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAssetModelInput>
    public typealias MOutput = OperationOutput<CreateAssetModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAssetModelOutputError>
}

public struct CreateAssetModelInputBodyMiddleware: Middleware {
    public let id: String = "CreateAssetModelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAssetModelInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAssetModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAssetModelInput>
    public typealias MOutput = OperationOutput<CreateAssetModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAssetModelOutputError>
}

extension CreateAssetModelInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case assetModelCompositeModels
        case assetModelDescription
        case assetModelHierarchies
        case assetModelName
        case assetModelProperties
        case clientToken
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assetModelCompositeModels = assetModelCompositeModels {
            var assetModelCompositeModelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .assetModelCompositeModels)
            for assetmodelcompositemodeldefinitions0 in assetModelCompositeModels {
                try assetModelCompositeModelsContainer.encode(assetmodelcompositemodeldefinitions0)
            }
        }
        if let assetModelDescription = assetModelDescription {
            try encodeContainer.encode(assetModelDescription, forKey: .assetModelDescription)
        }
        if let assetModelHierarchies = assetModelHierarchies {
            var assetModelHierarchiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .assetModelHierarchies)
            for assetmodelhierarchydefinitions0 in assetModelHierarchies {
                try assetModelHierarchiesContainer.encode(assetmodelhierarchydefinitions0)
            }
        }
        if let assetModelName = assetModelName {
            try encodeContainer.encode(assetModelName, forKey: .assetModelName)
        }
        if let assetModelProperties = assetModelProperties {
            var assetModelPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .assetModelProperties)
            for assetmodelpropertydefinitions0 in assetModelProperties {
                try assetModelPropertiesContainer.encode(assetmodelpropertydefinitions0)
            }
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
