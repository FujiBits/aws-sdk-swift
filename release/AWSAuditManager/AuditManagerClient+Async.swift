// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension AuditManagerClient {
    ///
    ///          Associates an evidence folder to the specified assessment report in Audit Manager.
    ///
    func associateAssessmentReportEvidenceFolder(input: AssociateAssessmentReportEvidenceFolderInput) async throws -> AssociateAssessmentReportEvidenceFolderOutputResponse
    {
        typealias associateAssessmentReportEvidenceFolderContinuation = CheckedContinuation<AssociateAssessmentReportEvidenceFolderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateAssessmentReportEvidenceFolderContinuation) in
            associateAssessmentReportEvidenceFolder(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///          Associates a list of evidence to an assessment report in an Audit Manager assessment.
    ///
    func batchAssociateAssessmentReportEvidence(input: BatchAssociateAssessmentReportEvidenceInput) async throws -> BatchAssociateAssessmentReportEvidenceOutputResponse
    {
        typealias batchAssociateAssessmentReportEvidenceContinuation = CheckedContinuation<BatchAssociateAssessmentReportEvidenceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchAssociateAssessmentReportEvidenceContinuation) in
            batchAssociateAssessmentReportEvidence(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///          Create a batch of delegations for a specified assessment in Audit Manager.
    ///
    func batchCreateDelegationByAssessment(input: BatchCreateDelegationByAssessmentInput) async throws -> BatchCreateDelegationByAssessmentOutputResponse
    {
        typealias batchCreateDelegationByAssessmentContinuation = CheckedContinuation<BatchCreateDelegationByAssessmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchCreateDelegationByAssessmentContinuation) in
            batchCreateDelegationByAssessment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///          Deletes the delegations in the specified Audit Manager assessment.
    ///
    func batchDeleteDelegationByAssessment(input: BatchDeleteDelegationByAssessmentInput) async throws -> BatchDeleteDelegationByAssessmentOutputResponse
    {
        typealias batchDeleteDelegationByAssessmentContinuation = CheckedContinuation<BatchDeleteDelegationByAssessmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDeleteDelegationByAssessmentContinuation) in
            batchDeleteDelegationByAssessment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///          Disassociates a list of evidence from the specified assessment report in Audit Manager.
    ///
    func batchDisassociateAssessmentReportEvidence(input: BatchDisassociateAssessmentReportEvidenceInput) async throws -> BatchDisassociateAssessmentReportEvidenceOutputResponse
    {
        typealias batchDisassociateAssessmentReportEvidenceContinuation = CheckedContinuation<BatchDisassociateAssessmentReportEvidenceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDisassociateAssessmentReportEvidenceContinuation) in
            batchDisassociateAssessmentReportEvidence(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///          Uploads one or more pieces of evidence to the specified control in the assessment in Audit Manager.
    ///
    func batchImportEvidenceToAssessmentControl(input: BatchImportEvidenceToAssessmentControlInput) async throws -> BatchImportEvidenceToAssessmentControlOutputResponse
    {
        typealias batchImportEvidenceToAssessmentControlContinuation = CheckedContinuation<BatchImportEvidenceToAssessmentControlOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchImportEvidenceToAssessmentControlContinuation) in
            batchImportEvidenceToAssessmentControl(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Creates an assessment in Audit Manager.
    ///
    func createAssessment(input: CreateAssessmentInput) async throws -> CreateAssessmentOutputResponse
    {
        typealias createAssessmentContinuation = CheckedContinuation<CreateAssessmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAssessmentContinuation) in
            createAssessment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Creates a custom framework in Audit Manager.
    ///
    func createAssessmentFramework(input: CreateAssessmentFrameworkInput) async throws -> CreateAssessmentFrameworkOutputResponse
    {
        typealias createAssessmentFrameworkContinuation = CheckedContinuation<CreateAssessmentFrameworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAssessmentFrameworkContinuation) in
            createAssessmentFramework(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    /// Creates an assessment report for the specified assessment.
    ///
    func createAssessmentReport(input: CreateAssessmentReportInput) async throws -> CreateAssessmentReportOutputResponse
    {
        typealias createAssessmentReportContinuation = CheckedContinuation<CreateAssessmentReportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAssessmentReportContinuation) in
            createAssessmentReport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Creates a new custom control in Audit Manager.
    ///
    func createControl(input: CreateControlInput) async throws -> CreateControlOutputResponse
    {
        typealias createControlContinuation = CheckedContinuation<CreateControlOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createControlContinuation) in
            createControl(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Deletes an assessment in Audit Manager.
    ///
    func deleteAssessment(input: DeleteAssessmentInput) async throws -> DeleteAssessmentOutputResponse
    {
        typealias deleteAssessmentContinuation = CheckedContinuation<DeleteAssessmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAssessmentContinuation) in
            deleteAssessment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Deletes a custom framework in Audit Manager.
    ///
    func deleteAssessmentFramework(input: DeleteAssessmentFrameworkInput) async throws -> DeleteAssessmentFrameworkOutputResponse
    {
        typealias deleteAssessmentFrameworkContinuation = CheckedContinuation<DeleteAssessmentFrameworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAssessmentFrameworkContinuation) in
            deleteAssessmentFramework(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Deletes an assessment report from an assessment in Audit Manager.
    ///
    func deleteAssessmentReport(input: DeleteAssessmentReportInput) async throws -> DeleteAssessmentReportOutputResponse
    {
        typealias deleteAssessmentReportContinuation = CheckedContinuation<DeleteAssessmentReportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAssessmentReportContinuation) in
            deleteAssessmentReport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Deletes a custom control in Audit Manager.
    ///
    func deleteControl(input: DeleteControlInput) async throws -> DeleteControlOutputResponse
    {
        typealias deleteControlContinuation = CheckedContinuation<DeleteControlOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteControlContinuation) in
            deleteControl(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Deregisters an account in Audit Manager.
    ///
    func deregisterAccount(input: DeregisterAccountInput) async throws -> DeregisterAccountOutputResponse
    {
        typealias deregisterAccountContinuation = CheckedContinuation<DeregisterAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterAccountContinuation) in
            deregisterAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified member account as a delegated administrator for Audit Manager.
    ///
    ///             When you remove a delegated administrator from your Audit Manager settings, or when you
    ///         deregister a delegated administrator from Organizations, you continue to have access
    ///       to the evidence that you previously collected under that account. However, Audit Manager
    ///             will stop collecting and attaching evidence to that delegated administrator account
    ///             moving forward.
    ///
    func deregisterOrganizationAdminAccount(input: DeregisterOrganizationAdminAccountInput) async throws -> DeregisterOrganizationAdminAccountOutputResponse
    {
        typealias deregisterOrganizationAdminAccountContinuation = CheckedContinuation<DeregisterOrganizationAdminAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterOrganizationAdminAccountContinuation) in
            deregisterOrganizationAdminAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Disassociates an evidence folder from the specified assessment report in Audit Manager.
    ///
    func disassociateAssessmentReportEvidenceFolder(input: DisassociateAssessmentReportEvidenceFolderInput) async throws -> DisassociateAssessmentReportEvidenceFolderOutputResponse
    {
        typealias disassociateAssessmentReportEvidenceFolderContinuation = CheckedContinuation<DisassociateAssessmentReportEvidenceFolderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateAssessmentReportEvidenceFolderContinuation) in
            disassociateAssessmentReportEvidenceFolder(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns the registration status of an account in Audit Manager.
    ///
    func getAccountStatus(input: GetAccountStatusInput) async throws -> GetAccountStatusOutputResponse
    {
        typealias getAccountStatusContinuation = CheckedContinuation<GetAccountStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAccountStatusContinuation) in
            getAccountStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns an assessment from Audit Manager.
    ///
    func getAssessment(input: GetAssessmentInput) async throws -> GetAssessmentOutputResponse
    {
        typealias getAssessmentContinuation = CheckedContinuation<GetAssessmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAssessmentContinuation) in
            getAssessment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns a framework from Audit Manager.
    ///
    func getAssessmentFramework(input: GetAssessmentFrameworkInput) async throws -> GetAssessmentFrameworkOutputResponse
    {
        typealias getAssessmentFrameworkContinuation = CheckedContinuation<GetAssessmentFrameworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAssessmentFrameworkContinuation) in
            getAssessmentFramework(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns the URL of a specified assessment report in Audit Manager.
    ///
    func getAssessmentReportUrl(input: GetAssessmentReportUrlInput) async throws -> GetAssessmentReportUrlOutputResponse
    {
        typealias getAssessmentReportUrlContinuation = CheckedContinuation<GetAssessmentReportUrlOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAssessmentReportUrlContinuation) in
            getAssessmentReportUrl(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns a list of changelogs from Audit Manager.
    ///
    func getChangeLogs(input: GetChangeLogsInput) async throws -> GetChangeLogsOutputResponse
    {
        typealias getChangeLogsContinuation = CheckedContinuation<GetChangeLogsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getChangeLogsContinuation) in
            getChangeLogs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns a control from Audit Manager.
    ///
    func getControl(input: GetControlInput) async throws -> GetControlOutputResponse
    {
        typealias getControlContinuation = CheckedContinuation<GetControlOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getControlContinuation) in
            getControl(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns a list of delegations from an audit owner to a delegate.
    ///
    func getDelegations(input: GetDelegationsInput) async throws -> GetDelegationsOutputResponse
    {
        typealias getDelegationsContinuation = CheckedContinuation<GetDelegationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDelegationsContinuation) in
            getDelegations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns evidence from Audit Manager.
    ///
    func getEvidence(input: GetEvidenceInput) async throws -> GetEvidenceOutputResponse
    {
        typealias getEvidenceContinuation = CheckedContinuation<GetEvidenceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEvidenceContinuation) in
            getEvidence(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns all evidence from a specified evidence folder in Audit Manager.
    ///
    func getEvidenceByEvidenceFolder(input: GetEvidenceByEvidenceFolderInput) async throws -> GetEvidenceByEvidenceFolderOutputResponse
    {
        typealias getEvidenceByEvidenceFolderContinuation = CheckedContinuation<GetEvidenceByEvidenceFolderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEvidenceByEvidenceFolderContinuation) in
            getEvidenceByEvidenceFolder(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns an evidence folder from the specified assessment in Audit Manager.
    ///
    func getEvidenceFolder(input: GetEvidenceFolderInput) async throws -> GetEvidenceFolderOutputResponse
    {
        typealias getEvidenceFolderContinuation = CheckedContinuation<GetEvidenceFolderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEvidenceFolderContinuation) in
            getEvidenceFolder(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns the evidence folders from a specified assessment in Audit Manager.
    ///
    func getEvidenceFoldersByAssessment(input: GetEvidenceFoldersByAssessmentInput) async throws -> GetEvidenceFoldersByAssessmentOutputResponse
    {
        typealias getEvidenceFoldersByAssessmentContinuation = CheckedContinuation<GetEvidenceFoldersByAssessmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEvidenceFoldersByAssessmentContinuation) in
            getEvidenceFoldersByAssessment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns a list of evidence folders associated with a specified control of an assessment in Audit Manager.
    ///
    func getEvidenceFoldersByAssessmentControl(input: GetEvidenceFoldersByAssessmentControlInput) async throws -> GetEvidenceFoldersByAssessmentControlOutputResponse
    {
        typealias getEvidenceFoldersByAssessmentControlContinuation = CheckedContinuation<GetEvidenceFoldersByAssessmentControlOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEvidenceFoldersByAssessmentControlContinuation) in
            getEvidenceFoldersByAssessmentControl(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns the name of the delegated Amazon Web Services administrator account for the organization.
    ///
    func getOrganizationAdminAccount(input: GetOrganizationAdminAccountInput) async throws -> GetOrganizationAdminAccountOutputResponse
    {
        typealias getOrganizationAdminAccountContinuation = CheckedContinuation<GetOrganizationAdminAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getOrganizationAdminAccountContinuation) in
            getOrganizationAdminAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns a list of the in-scope Amazon Web Services services for the specified assessment.
    ///
    func getServicesInScope(input: GetServicesInScopeInput) async throws -> GetServicesInScopeOutputResponse
    {
        typealias getServicesInScopeContinuation = CheckedContinuation<GetServicesInScopeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getServicesInScopeContinuation) in
            getServicesInScope(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns the settings for the specified account.
    ///
    func getSettings(input: GetSettingsInput) async throws -> GetSettingsOutputResponse
    {
        typealias getSettingsContinuation = CheckedContinuation<GetSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSettingsContinuation) in
            getSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns a list of the frameworks available in the Audit Manager framework library.
    ///
    func listAssessmentFrameworks(input: ListAssessmentFrameworksInput) async throws -> ListAssessmentFrameworksOutputResponse
    {
        typealias listAssessmentFrameworksContinuation = CheckedContinuation<ListAssessmentFrameworksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssessmentFrameworksContinuation) in
            listAssessmentFrameworks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns a list of assessment reports created in Audit Manager.
    ///
    func listAssessmentReports(input: ListAssessmentReportsInput) async throws -> ListAssessmentReportsOutputResponse
    {
        typealias listAssessmentReportsContinuation = CheckedContinuation<ListAssessmentReportsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssessmentReportsContinuation) in
            listAssessmentReports(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns a list of current and past assessments from Audit Manager.
    ///
    func listAssessments(input: ListAssessmentsInput) async throws -> ListAssessmentsOutputResponse
    {
        typealias listAssessmentsContinuation = CheckedContinuation<ListAssessmentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssessmentsContinuation) in
            listAssessments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns a list of controls from Audit Manager.
    ///
    func listControls(input: ListControlsInput) async throws -> ListControlsOutputResponse
    {
        typealias listControlsContinuation = CheckedContinuation<ListControlsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listControlsContinuation) in
            listControls(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    /// Returns a list of keywords that pre-mapped to the specified control data source.
    ///
    func listKeywordsForDataSource(input: ListKeywordsForDataSourceInput) async throws -> ListKeywordsForDataSourceOutputResponse
    {
        typealias listKeywordsForDataSourceContinuation = CheckedContinuation<ListKeywordsForDataSourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listKeywordsForDataSourceContinuation) in
            listKeywordsForDataSource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns a list of all Audit Manager notifications.
    ///
    func listNotifications(input: ListNotificationsInput) async throws -> ListNotificationsOutputResponse
    {
        typealias listNotificationsContinuation = CheckedContinuation<ListNotificationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listNotificationsContinuation) in
            listNotifications(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Returns a list of tags for the specified resource in Audit Manager.
    ///
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Enables Audit Manager for the specified account.
    ///
    func registerAccount(input: RegisterAccountInput) async throws -> RegisterAccountOutputResponse
    {
        typealias registerAccountContinuation = CheckedContinuation<RegisterAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerAccountContinuation) in
            registerAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Enables an account within the organization as the delegated administrator for Audit Manager.
    ///
    func registerOrganizationAdminAccount(input: RegisterOrganizationAdminAccountInput) async throws -> RegisterOrganizationAdminAccountOutputResponse
    {
        typealias registerOrganizationAdminAccountContinuation = CheckedContinuation<RegisterOrganizationAdminAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerOrganizationAdminAccountContinuation) in
            registerOrganizationAdminAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Tags the specified resource in Audit Manager.
    ///
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Removes a tag from a resource in Audit Manager.
    ///
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Edits an Audit Manager assessment.
    ///
    func updateAssessment(input: UpdateAssessmentInput) async throws -> UpdateAssessmentOutputResponse
    {
        typealias updateAssessmentContinuation = CheckedContinuation<UpdateAssessmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAssessmentContinuation) in
            updateAssessment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Updates a control within an assessment in Audit Manager.
    ///
    func updateAssessmentControl(input: UpdateAssessmentControlInput) async throws -> UpdateAssessmentControlOutputResponse
    {
        typealias updateAssessmentControlContinuation = CheckedContinuation<UpdateAssessmentControlOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAssessmentControlContinuation) in
            updateAssessmentControl(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Updates the status of a control set in an Audit Manager assessment.
    ///
    func updateAssessmentControlSetStatus(input: UpdateAssessmentControlSetStatusInput) async throws -> UpdateAssessmentControlSetStatusOutputResponse
    {
        typealias updateAssessmentControlSetStatusContinuation = CheckedContinuation<UpdateAssessmentControlSetStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAssessmentControlSetStatusContinuation) in
            updateAssessmentControlSetStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Updates a custom framework in Audit Manager.
    ///
    func updateAssessmentFramework(input: UpdateAssessmentFrameworkInput) async throws -> UpdateAssessmentFrameworkOutputResponse
    {
        typealias updateAssessmentFrameworkContinuation = CheckedContinuation<UpdateAssessmentFrameworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAssessmentFrameworkContinuation) in
            updateAssessmentFramework(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Updates the status of an assessment in Audit Manager.
    ///
    func updateAssessmentStatus(input: UpdateAssessmentStatusInput) async throws -> UpdateAssessmentStatusOutputResponse
    {
        typealias updateAssessmentStatusContinuation = CheckedContinuation<UpdateAssessmentStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAssessmentStatusContinuation) in
            updateAssessmentStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Updates a custom control in Audit Manager.
    ///
    func updateControl(input: UpdateControlInput) async throws -> UpdateControlOutputResponse
    {
        typealias updateControlContinuation = CheckedContinuation<UpdateControlOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateControlContinuation) in
            updateControl(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Updates Audit Manager settings for the current user account.
    ///
    func updateSettings(input: UpdateSettingsInput) async throws -> UpdateSettingsOutputResponse
    {
        typealias updateSettingsContinuation = CheckedContinuation<UpdateSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSettingsContinuation) in
            updateSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///    Validates the integrity of an assessment report in Audit Manager.
    ///
    func validateAssessmentReportIntegrity(input: ValidateAssessmentReportIntegrityInput) async throws -> ValidateAssessmentReportIntegrityOutputResponse
    {
        typealias validateAssessmentReportIntegrityContinuation = CheckedContinuation<ValidateAssessmentReportIntegrityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: validateAssessmentReportIntegrityContinuation) in
            validateAssessmentReportIntegrity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
