// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance. Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. Use the following links to get started with the Audit Manager API:
///
/// * [Actions](https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html): An alphabetical list of all Audit Manager API operations.
///
/// * [Data types](https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html): An alphabetical list of all Audit Manager data types.
///
/// * [Common parameters](https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html): Parameters that all Query operations can use.
///
/// * [Common errors](https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html): Client and server errors that all operations can return.
///
///
/// If you're new to Audit Manager, we recommend that you review the [ Audit Manager User Guide](https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html).
public protocol AuditManagerClientProtocol {
    /// Associates an evidence folder to an assessment report in a Audit Manager assessment.
    func associateAssessmentReportEvidenceFolder(input: AssociateAssessmentReportEvidenceFolderInput, completion: @escaping (ClientRuntime.SdkResult<AssociateAssessmentReportEvidenceFolderOutputResponse, AssociateAssessmentReportEvidenceFolderOutputError>) -> Void)
    /// Associates a list of evidence to an assessment report in an Audit Manager assessment.
    func batchAssociateAssessmentReportEvidence(input: BatchAssociateAssessmentReportEvidenceInput, completion: @escaping (ClientRuntime.SdkResult<BatchAssociateAssessmentReportEvidenceOutputResponse, BatchAssociateAssessmentReportEvidenceOutputError>) -> Void)
    /// Creates a batch of delegations for an assessment in Audit Manager.
    func batchCreateDelegationByAssessment(input: BatchCreateDelegationByAssessmentInput, completion: @escaping (ClientRuntime.SdkResult<BatchCreateDelegationByAssessmentOutputResponse, BatchCreateDelegationByAssessmentOutputError>) -> Void)
    /// Deletes a batch of delegations for an assessment in Audit Manager.
    func batchDeleteDelegationByAssessment(input: BatchDeleteDelegationByAssessmentInput, completion: @escaping (ClientRuntime.SdkResult<BatchDeleteDelegationByAssessmentOutputResponse, BatchDeleteDelegationByAssessmentOutputError>) -> Void)
    /// Disassociates a list of evidence from an assessment report in Audit Manager.
    func batchDisassociateAssessmentReportEvidence(input: BatchDisassociateAssessmentReportEvidenceInput, completion: @escaping (ClientRuntime.SdkResult<BatchDisassociateAssessmentReportEvidenceOutputResponse, BatchDisassociateAssessmentReportEvidenceOutputError>) -> Void)
    /// Uploads one or more pieces of evidence to a control in an Audit Manager assessment.
    func batchImportEvidenceToAssessmentControl(input: BatchImportEvidenceToAssessmentControlInput, completion: @escaping (ClientRuntime.SdkResult<BatchImportEvidenceToAssessmentControlOutputResponse, BatchImportEvidenceToAssessmentControlOutputError>) -> Void)
    /// Creates an assessment in Audit Manager.
    func createAssessment(input: CreateAssessmentInput, completion: @escaping (ClientRuntime.SdkResult<CreateAssessmentOutputResponse, CreateAssessmentOutputError>) -> Void)
    /// Creates a custom framework in Audit Manager.
    func createAssessmentFramework(input: CreateAssessmentFrameworkInput, completion: @escaping (ClientRuntime.SdkResult<CreateAssessmentFrameworkOutputResponse, CreateAssessmentFrameworkOutputError>) -> Void)
    /// Creates an assessment report for the specified assessment.
    func createAssessmentReport(input: CreateAssessmentReportInput, completion: @escaping (ClientRuntime.SdkResult<CreateAssessmentReportOutputResponse, CreateAssessmentReportOutputError>) -> Void)
    /// Creates a new custom control in Audit Manager.
    func createControl(input: CreateControlInput, completion: @escaping (ClientRuntime.SdkResult<CreateControlOutputResponse, CreateControlOutputError>) -> Void)
    /// Deletes an assessment in Audit Manager.
    func deleteAssessment(input: DeleteAssessmentInput, completion: @escaping (ClientRuntime.SdkResult<DeleteAssessmentOutputResponse, DeleteAssessmentOutputError>) -> Void)
    /// Deletes a custom framework in Audit Manager.
    func deleteAssessmentFramework(input: DeleteAssessmentFrameworkInput, completion: @escaping (ClientRuntime.SdkResult<DeleteAssessmentFrameworkOutputResponse, DeleteAssessmentFrameworkOutputError>) -> Void)
    /// Deletes a share request for a custom framework in Audit Manager.
    func deleteAssessmentFrameworkShare(input: DeleteAssessmentFrameworkShareInput, completion: @escaping (ClientRuntime.SdkResult<DeleteAssessmentFrameworkShareOutputResponse, DeleteAssessmentFrameworkShareOutputError>) -> Void)
    /// Deletes an assessment report from an assessment in Audit Manager.
    func deleteAssessmentReport(input: DeleteAssessmentReportInput, completion: @escaping (ClientRuntime.SdkResult<DeleteAssessmentReportOutputResponse, DeleteAssessmentReportOutputError>) -> Void)
    /// Deletes a custom control in Audit Manager.
    func deleteControl(input: DeleteControlInput, completion: @escaping (ClientRuntime.SdkResult<DeleteControlOutputResponse, DeleteControlOutputError>) -> Void)
    /// Deregisters an account in Audit Manager.
    func deregisterAccount(input: DeregisterAccountInput, completion: @escaping (ClientRuntime.SdkResult<DeregisterAccountOutputResponse, DeregisterAccountOutputError>) -> Void)
    /// Removes the specified member Amazon Web Services account as a delegated administrator for Audit Manager. When you remove a delegated administrator from your Audit Manager settings, you continue to have access to the evidence that you previously collected under that account. This is also the case when you deregister a delegated administrator from Audit Manager. However, Audit Manager will stop collecting and attaching evidence to that delegated administrator account moving forward.
    func deregisterOrganizationAdminAccount(input: DeregisterOrganizationAdminAccountInput, completion: @escaping (ClientRuntime.SdkResult<DeregisterOrganizationAdminAccountOutputResponse, DeregisterOrganizationAdminAccountOutputError>) -> Void)
    /// Disassociates an evidence folder from the specified assessment report in Audit Manager.
    func disassociateAssessmentReportEvidenceFolder(input: DisassociateAssessmentReportEvidenceFolderInput, completion: @escaping (ClientRuntime.SdkResult<DisassociateAssessmentReportEvidenceFolderOutputResponse, DisassociateAssessmentReportEvidenceFolderOutputError>) -> Void)
    /// Returns the registration status of an account in Audit Manager.
    func getAccountStatus(input: GetAccountStatusInput, completion: @escaping (ClientRuntime.SdkResult<GetAccountStatusOutputResponse, GetAccountStatusOutputError>) -> Void)
    /// Returns an assessment from Audit Manager.
    func getAssessment(input: GetAssessmentInput, completion: @escaping (ClientRuntime.SdkResult<GetAssessmentOutputResponse, GetAssessmentOutputError>) -> Void)
    /// Returns a framework from Audit Manager.
    func getAssessmentFramework(input: GetAssessmentFrameworkInput, completion: @escaping (ClientRuntime.SdkResult<GetAssessmentFrameworkOutputResponse, GetAssessmentFrameworkOutputError>) -> Void)
    /// Returns the URL of an assessment report in Audit Manager.
    func getAssessmentReportUrl(input: GetAssessmentReportUrlInput, completion: @escaping (ClientRuntime.SdkResult<GetAssessmentReportUrlOutputResponse, GetAssessmentReportUrlOutputError>) -> Void)
    /// Returns a list of changelogs from Audit Manager.
    func getChangeLogs(input: GetChangeLogsInput, completion: @escaping (ClientRuntime.SdkResult<GetChangeLogsOutputResponse, GetChangeLogsOutputError>) -> Void)
    /// Returns a control from Audit Manager.
    func getControl(input: GetControlInput, completion: @escaping (ClientRuntime.SdkResult<GetControlOutputResponse, GetControlOutputError>) -> Void)
    /// Returns a list of delegations from an audit owner to a delegate.
    func getDelegations(input: GetDelegationsInput, completion: @escaping (ClientRuntime.SdkResult<GetDelegationsOutputResponse, GetDelegationsOutputError>) -> Void)
    /// Returns evidence from Audit Manager.
    func getEvidence(input: GetEvidenceInput, completion: @escaping (ClientRuntime.SdkResult<GetEvidenceOutputResponse, GetEvidenceOutputError>) -> Void)
    /// Returns all evidence from a specified evidence folder in Audit Manager.
    func getEvidenceByEvidenceFolder(input: GetEvidenceByEvidenceFolderInput, completion: @escaping (ClientRuntime.SdkResult<GetEvidenceByEvidenceFolderOutputResponse, GetEvidenceByEvidenceFolderOutputError>) -> Void)
    /// Returns an evidence folder from the specified assessment in Audit Manager.
    func getEvidenceFolder(input: GetEvidenceFolderInput, completion: @escaping (ClientRuntime.SdkResult<GetEvidenceFolderOutputResponse, GetEvidenceFolderOutputError>) -> Void)
    /// Returns the evidence folders from a specified assessment in Audit Manager.
    func getEvidenceFoldersByAssessment(input: GetEvidenceFoldersByAssessmentInput, completion: @escaping (ClientRuntime.SdkResult<GetEvidenceFoldersByAssessmentOutputResponse, GetEvidenceFoldersByAssessmentOutputError>) -> Void)
    /// Returns a list of evidence folders that are associated with a specified control of an assessment in Audit Manager.
    func getEvidenceFoldersByAssessmentControl(input: GetEvidenceFoldersByAssessmentControlInput, completion: @escaping (ClientRuntime.SdkResult<GetEvidenceFoldersByAssessmentControlOutputResponse, GetEvidenceFoldersByAssessmentControlOutputError>) -> Void)
    /// Gets the latest analytics data for all your current active assessments.
    func getInsights(input: GetInsightsInput, completion: @escaping (ClientRuntime.SdkResult<GetInsightsOutputResponse, GetInsightsOutputError>) -> Void)
    /// Gets the latest analytics data for a specific active assessment.
    func getInsightsByAssessment(input: GetInsightsByAssessmentInput, completion: @escaping (ClientRuntime.SdkResult<GetInsightsByAssessmentOutputResponse, GetInsightsByAssessmentOutputError>) -> Void)
    /// Returns the name of the delegated Amazon Web Services administrator account for the organization.
    func getOrganizationAdminAccount(input: GetOrganizationAdminAccountInput, completion: @escaping (ClientRuntime.SdkResult<GetOrganizationAdminAccountOutputResponse, GetOrganizationAdminAccountOutputError>) -> Void)
    /// Returns a list of the in-scope Amazon Web Services services for the specified assessment.
    func getServicesInScope(input: GetServicesInScopeInput, completion: @escaping (ClientRuntime.SdkResult<GetServicesInScopeOutputResponse, GetServicesInScopeOutputError>) -> Void)
    /// Returns the settings for the specified Amazon Web Services account.
    func getSettings(input: GetSettingsInput, completion: @escaping (ClientRuntime.SdkResult<GetSettingsOutputResponse, GetSettingsOutputError>) -> Void)
    /// Lists the latest analytics data for controls within a specific control domain and a specific active assessment. Control insights are listed only if the control belongs to the control domain and assessment that was specified. Moreover, the control must have collected evidence on the lastUpdated date of controlInsightsByAssessment. If neither of these conditions are met, no data is listed for that control.
    func listAssessmentControlInsightsByControlDomain(input: ListAssessmentControlInsightsByControlDomainInput, completion: @escaping (ClientRuntime.SdkResult<ListAssessmentControlInsightsByControlDomainOutputResponse, ListAssessmentControlInsightsByControlDomainOutputError>) -> Void)
    /// Returns a list of the frameworks that are available in the Audit Manager framework library.
    func listAssessmentFrameworks(input: ListAssessmentFrameworksInput, completion: @escaping (ClientRuntime.SdkResult<ListAssessmentFrameworksOutputResponse, ListAssessmentFrameworksOutputError>) -> Void)
    /// Returns a list of sent or received share requests for custom frameworks in Audit Manager.
    func listAssessmentFrameworkShareRequests(input: ListAssessmentFrameworkShareRequestsInput, completion: @escaping (ClientRuntime.SdkResult<ListAssessmentFrameworkShareRequestsOutputResponse, ListAssessmentFrameworkShareRequestsOutputError>) -> Void)
    /// Returns a list of assessment reports created in Audit Manager.
    func listAssessmentReports(input: ListAssessmentReportsInput, completion: @escaping (ClientRuntime.SdkResult<ListAssessmentReportsOutputResponse, ListAssessmentReportsOutputError>) -> Void)
    /// Returns a list of current and past assessments from Audit Manager.
    func listAssessments(input: ListAssessmentsInput, completion: @escaping (ClientRuntime.SdkResult<ListAssessmentsOutputResponse, ListAssessmentsOutputError>) -> Void)
    /// Lists the latest analytics data for control domains across all of your active assessments. A control domain is listed only if at least one of the controls within that domain collected evidence on the lastUpdated date of controlDomainInsights. If this condition isn’t met, no data is listed for that control domain.
    func listControlDomainInsights(input: ListControlDomainInsightsInput, completion: @escaping (ClientRuntime.SdkResult<ListControlDomainInsightsOutputResponse, ListControlDomainInsightsOutputError>) -> Void)
    /// Lists analytics data for control domains within a specified active assessment. A control domain is listed only if at least one of the controls within that domain collected evidence on the lastUpdated date of controlDomainInsights. If this condition isn’t met, no data is listed for that domain.
    func listControlDomainInsightsByAssessment(input: ListControlDomainInsightsByAssessmentInput, completion: @escaping (ClientRuntime.SdkResult<ListControlDomainInsightsByAssessmentOutputResponse, ListControlDomainInsightsByAssessmentOutputError>) -> Void)
    /// Lists the latest analytics data for controls within a specific control domain across all active assessments. Control insights are listed only if the control belongs to the control domain that was specified and the control collected evidence on the lastUpdated date of controlInsightsMetadata. If neither of these conditions are met, no data is listed for that control.
    func listControlInsightsByControlDomain(input: ListControlInsightsByControlDomainInput, completion: @escaping (ClientRuntime.SdkResult<ListControlInsightsByControlDomainOutputResponse, ListControlInsightsByControlDomainOutputError>) -> Void)
    /// Returns a list of controls from Audit Manager.
    func listControls(input: ListControlsInput, completion: @escaping (ClientRuntime.SdkResult<ListControlsOutputResponse, ListControlsOutputError>) -> Void)
    /// Returns a list of keywords that are pre-mapped to the specified control data source.
    func listKeywordsForDataSource(input: ListKeywordsForDataSourceInput, completion: @escaping (ClientRuntime.SdkResult<ListKeywordsForDataSourceOutputResponse, ListKeywordsForDataSourceOutputError>) -> Void)
    /// Returns a list of all Audit Manager notifications.
    func listNotifications(input: ListNotificationsInput, completion: @escaping (ClientRuntime.SdkResult<ListNotificationsOutputResponse, ListNotificationsOutputError>) -> Void)
    /// Returns a list of tags for the specified resource in Audit Manager.
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (ClientRuntime.SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// Enables Audit Manager for the specified Amazon Web Services account.
    func registerAccount(input: RegisterAccountInput, completion: @escaping (ClientRuntime.SdkResult<RegisterAccountOutputResponse, RegisterAccountOutputError>) -> Void)
    /// Enables an Amazon Web Services account within the organization as the delegated administrator for Audit Manager.
    func registerOrganizationAdminAccount(input: RegisterOrganizationAdminAccountInput, completion: @escaping (ClientRuntime.SdkResult<RegisterOrganizationAdminAccountOutputResponse, RegisterOrganizationAdminAccountOutputError>) -> Void)
    /// Creates a share request for a custom framework in Audit Manager. The share request specifies a recipient and notifies them that a custom framework is available. Recipients have 120 days to accept or decline the request. If no action is taken, the share request expires. When you invoke the StartAssessmentFrameworkShare API, you are about to share a custom framework with another Amazon Web Services account. You may not share a custom framework that is derived from a standard framework if the standard framework is designated as not eligible for sharing by Amazon Web Services, unless you have obtained permission to do so from the owner of the standard framework. To learn more about which standard frameworks are eligible for sharing, see [Framework sharing eligibility](https://docs.aws.amazon.com/audit-manager/latest/userguide/share-custom-framework-concepts-and-terminology.html#eligibility) in the Audit Manager User Guide.
    func startAssessmentFrameworkShare(input: StartAssessmentFrameworkShareInput, completion: @escaping (ClientRuntime.SdkResult<StartAssessmentFrameworkShareOutputResponse, StartAssessmentFrameworkShareOutputError>) -> Void)
    /// Tags the specified resource in Audit Manager.
    func tagResource(input: TagResourceInput, completion: @escaping (ClientRuntime.SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// Removes a tag from a resource in Audit Manager.
    func untagResource(input: UntagResourceInput, completion: @escaping (ClientRuntime.SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// Edits an Audit Manager assessment.
    func updateAssessment(input: UpdateAssessmentInput, completion: @escaping (ClientRuntime.SdkResult<UpdateAssessmentOutputResponse, UpdateAssessmentOutputError>) -> Void)
    /// Updates a control within an assessment in Audit Manager.
    func updateAssessmentControl(input: UpdateAssessmentControlInput, completion: @escaping (ClientRuntime.SdkResult<UpdateAssessmentControlOutputResponse, UpdateAssessmentControlOutputError>) -> Void)
    /// Updates the status of a control set in an Audit Manager assessment.
    func updateAssessmentControlSetStatus(input: UpdateAssessmentControlSetStatusInput, completion: @escaping (ClientRuntime.SdkResult<UpdateAssessmentControlSetStatusOutputResponse, UpdateAssessmentControlSetStatusOutputError>) -> Void)
    /// Updates a custom framework in Audit Manager.
    func updateAssessmentFramework(input: UpdateAssessmentFrameworkInput, completion: @escaping (ClientRuntime.SdkResult<UpdateAssessmentFrameworkOutputResponse, UpdateAssessmentFrameworkOutputError>) -> Void)
    /// Updates a share request for a custom framework in Audit Manager.
    func updateAssessmentFrameworkShare(input: UpdateAssessmentFrameworkShareInput, completion: @escaping (ClientRuntime.SdkResult<UpdateAssessmentFrameworkShareOutputResponse, UpdateAssessmentFrameworkShareOutputError>) -> Void)
    /// Updates the status of an assessment in Audit Manager.
    func updateAssessmentStatus(input: UpdateAssessmentStatusInput, completion: @escaping (ClientRuntime.SdkResult<UpdateAssessmentStatusOutputResponse, UpdateAssessmentStatusOutputError>) -> Void)
    /// Updates a custom control in Audit Manager.
    func updateControl(input: UpdateControlInput, completion: @escaping (ClientRuntime.SdkResult<UpdateControlOutputResponse, UpdateControlOutputError>) -> Void)
    /// Updates Audit Manager settings for the current user account.
    func updateSettings(input: UpdateSettingsInput, completion: @escaping (ClientRuntime.SdkResult<UpdateSettingsOutputResponse, UpdateSettingsOutputError>) -> Void)
    /// Validates the integrity of an assessment report in Audit Manager.
    func validateAssessmentReportIntegrity(input: ValidateAssessmentReportIntegrityInput, completion: @escaping (ClientRuntime.SdkResult<ValidateAssessmentReportIntegrityOutputResponse, ValidateAssessmentReportIntegrityOutputError>) -> Void)
}

public enum AuditManagerClientTypes {}
