// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension IoTAnalyticsClient {
    /// <p>Sends messages to a channel.</p>
    func batchPutMessage(input: BatchPutMessageInput) async throws -> BatchPutMessageOutputResponse
    {
        typealias batchPutMessageContinuation = CheckedContinuation<BatchPutMessageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchPutMessageContinuation) in
            batchPutMessage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Cancels the reprocessing of data through the pipeline.</p>
    func cancelPipelineReprocessing(input: CancelPipelineReprocessingInput) async throws -> CancelPipelineReprocessingOutputResponse
    {
        typealias cancelPipelineReprocessingContinuation = CheckedContinuation<CancelPipelineReprocessingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelPipelineReprocessingContinuation) in
            cancelPipelineReprocessing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a channel. A channel collects data from an MQTT topic and archives the raw,
    ///       unprocessed messages before publishing the data to a pipeline.</p>
    func createChannel(input: CreateChannelInput) async throws -> CreateChannelOutputResponse
    {
        typealias createChannelContinuation = CheckedContinuation<CreateChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createChannelContinuation) in
            createChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a dataset. A dataset stores data retrieved from a data store by applying a
    ///         <code>queryAction</code> (a SQL query) or a <code>containerAction</code> (executing a
    ///       containerized application). This operation creates the skeleton of a dataset. The dataset can
    ///       be populated manually by calling <code>CreateDatasetContent</code> or automatically according
    ///       to a trigger you specify.</p>
    func createDataset(input: CreateDatasetInput) async throws -> CreateDatasetOutputResponse
    {
        typealias createDatasetContinuation = CheckedContinuation<CreateDatasetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDatasetContinuation) in
            createDataset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates the content of a data set by applying a <code>queryAction</code> (a SQL query) or
    ///       a <code>containerAction</code> (executing a containerized application).</p>
    func createDatasetContent(input: CreateDatasetContentInput) async throws -> CreateDatasetContentOutputResponse
    {
        typealias createDatasetContentContinuation = CheckedContinuation<CreateDatasetContentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDatasetContentContinuation) in
            createDatasetContent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a data store, which is a repository for messages.</p>
    func createDatastore(input: CreateDatastoreInput) async throws -> CreateDatastoreOutputResponse
    {
        typealias createDatastoreContinuation = CheckedContinuation<CreateDatastoreOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDatastoreContinuation) in
            createDatastore(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a pipeline. A pipeline consumes messages from a channel and allows you to process
    ///       the messages before storing them in a data store. You must specify both a <code>channel</code>
    ///       and a <code>datastore</code> activity and, optionally, as many as 23 additional activities in
    ///       the <code>pipelineActivities</code> array.</p>
    func createPipeline(input: CreatePipelineInput) async throws -> CreatePipelineOutputResponse
    {
        typealias createPipelineContinuation = CheckedContinuation<CreatePipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPipelineContinuation) in
            createPipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified channel.</p>
    func deleteChannel(input: DeleteChannelInput) async throws -> DeleteChannelOutputResponse
    {
        typealias deleteChannelContinuation = CheckedContinuation<DeleteChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteChannelContinuation) in
            deleteChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified dataset.</p>
    ///          <p>You do not have to delete the content of the dataset before you perform this
    ///       operation.</p>
    func deleteDataset(input: DeleteDatasetInput) async throws -> DeleteDatasetOutputResponse
    {
        typealias deleteDatasetContinuation = CheckedContinuation<DeleteDatasetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDatasetContinuation) in
            deleteDataset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the content of the specified dataset.</p>
    func deleteDatasetContent(input: DeleteDatasetContentInput) async throws -> DeleteDatasetContentOutputResponse
    {
        typealias deleteDatasetContentContinuation = CheckedContinuation<DeleteDatasetContentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDatasetContentContinuation) in
            deleteDatasetContent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified data store.</p>
    func deleteDatastore(input: DeleteDatastoreInput) async throws -> DeleteDatastoreOutputResponse
    {
        typealias deleteDatastoreContinuation = CheckedContinuation<DeleteDatastoreOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDatastoreContinuation) in
            deleteDatastore(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified pipeline.</p>
    func deletePipeline(input: DeletePipelineInput) async throws -> DeletePipelineOutputResponse
    {
        typealias deletePipelineContinuation = CheckedContinuation<DeletePipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePipelineContinuation) in
            deletePipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about a channel.</p>
    func describeChannel(input: DescribeChannelInput) async throws -> DescribeChannelOutputResponse
    {
        typealias describeChannelContinuation = CheckedContinuation<DescribeChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChannelContinuation) in
            describeChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about a dataset.</p>
    func describeDataset(input: DescribeDatasetInput) async throws -> DescribeDatasetOutputResponse
    {
        typealias describeDatasetContinuation = CheckedContinuation<DescribeDatasetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDatasetContinuation) in
            describeDataset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about a data store.</p>
    func describeDatastore(input: DescribeDatastoreInput) async throws -> DescribeDatastoreOutputResponse
    {
        typealias describeDatastoreContinuation = CheckedContinuation<DescribeDatastoreOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDatastoreContinuation) in
            describeDatastore(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the current settings of the AWS IoT Analytics logging options.</p>
    func describeLoggingOptions(input: DescribeLoggingOptionsInput) async throws -> DescribeLoggingOptionsOutputResponse
    {
        typealias describeLoggingOptionsContinuation = CheckedContinuation<DescribeLoggingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeLoggingOptionsContinuation) in
            describeLoggingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about a pipeline.</p>
    func describePipeline(input: DescribePipelineInput) async throws -> DescribePipelineOutputResponse
    {
        typealias describePipelineContinuation = CheckedContinuation<DescribePipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePipelineContinuation) in
            describePipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the contents of a data set as presigned URIs.</p>
    func getDatasetContent(input: GetDatasetContentInput) async throws -> GetDatasetContentOutputResponse
    {
        typealias getDatasetContentContinuation = CheckedContinuation<GetDatasetContentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDatasetContentContinuation) in
            getDatasetContent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list of channels.</p>
    func listChannels(input: ListChannelsInput) async throws -> ListChannelsOutputResponse
    {
        typealias listChannelsContinuation = CheckedContinuation<ListChannelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelsContinuation) in
            listChannels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists information about data set contents that have been created.</p>
    func listDatasetContents(input: ListDatasetContentsInput) async throws -> ListDatasetContentsOutputResponse
    {
        typealias listDatasetContentsContinuation = CheckedContinuation<ListDatasetContentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDatasetContentsContinuation) in
            listDatasetContents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about data sets.</p>
    func listDatasets(input: ListDatasetsInput) async throws -> ListDatasetsOutputResponse
    {
        typealias listDatasetsContinuation = CheckedContinuation<ListDatasetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDatasetsContinuation) in
            listDatasets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list of data stores.</p>
    func listDatastores(input: ListDatastoresInput) async throws -> ListDatastoresOutputResponse
    {
        typealias listDatastoresContinuation = CheckedContinuation<ListDatastoresOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDatastoresContinuation) in
            listDatastores(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list of pipelines.</p>
    func listPipelines(input: ListPipelinesInput) async throws -> ListPipelinesOutputResponse
    {
        typealias listPipelinesContinuation = CheckedContinuation<ListPipelinesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPipelinesContinuation) in
            listPipelines(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the tags (metadata) that you have assigned to the resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets or updates the AWS IoT Analytics logging options.</p>
    ///          <p>If you update the value of any <code>loggingOptions</code> field, it takes up to one
    ///       minute for the change to take effect. Also, if you change the policy attached to the role you
    ///       specified in the <code>roleArn</code> field (for example, to correct an invalid policy), it
    ///       takes up to five minutes for that change to take effect. </p>
    func putLoggingOptions(input: PutLoggingOptionsInput) async throws -> PutLoggingOptionsOutputResponse
    {
        typealias putLoggingOptionsContinuation = CheckedContinuation<PutLoggingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putLoggingOptionsContinuation) in
            putLoggingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Simulates the results of running a pipeline activity on a message payload.</p>
    func runPipelineActivity(input: RunPipelineActivityInput) async throws -> RunPipelineActivityOutputResponse
    {
        typealias runPipelineActivityContinuation = CheckedContinuation<RunPipelineActivityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: runPipelineActivityContinuation) in
            runPipelineActivity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a sample of messages from the specified channel ingested during the specified
    ///       timeframe. Up to 10 messages can be retrieved.</p>
    func sampleChannelData(input: SampleChannelDataInput) async throws -> SampleChannelDataOutputResponse
    {
        typealias sampleChannelDataContinuation = CheckedContinuation<SampleChannelDataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sampleChannelDataContinuation) in
            sampleChannelData(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts the reprocessing of raw message data through the pipeline.</p>
    func startPipelineReprocessing(input: StartPipelineReprocessingInput) async throws -> StartPipelineReprocessingOutputResponse
    {
        typealias startPipelineReprocessingContinuation = CheckedContinuation<StartPipelineReprocessingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startPipelineReprocessingContinuation) in
            startPipelineReprocessing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds to or modifies the tags of the given resource. Tags are metadata that can be used to
    ///       manage a resource.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the given tags (metadata) from the resource.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the settings of a channel.</p>
    func updateChannel(input: UpdateChannelInput) async throws -> UpdateChannelOutputResponse
    {
        typealias updateChannelContinuation = CheckedContinuation<UpdateChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateChannelContinuation) in
            updateChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the settings of a data set.</p>
    func updateDataset(input: UpdateDatasetInput) async throws -> UpdateDatasetOutputResponse
    {
        typealias updateDatasetContinuation = CheckedContinuation<UpdateDatasetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDatasetContinuation) in
            updateDataset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the settings of a data store.</p>
    func updateDatastore(input: UpdateDatastoreInput) async throws -> UpdateDatastoreOutputResponse
    {
        typealias updateDatastoreContinuation = CheckedContinuation<UpdateDatastoreOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDatastoreContinuation) in
            updateDatastore(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the settings of a pipeline. You must specify both a <code>channel</code> and a
    ///         <code>datastore</code> activity and, optionally, as many as 23 additional activities in the
    ///         <code>pipelineActivities</code> array.</p>
    func updatePipeline(input: UpdatePipelineInput) async throws -> UpdatePipelineOutputResponse
    {
        typealias updatePipelineContinuation = CheckedContinuation<UpdatePipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePipelineContinuation) in
            updatePipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
