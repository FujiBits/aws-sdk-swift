// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateDatasetInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateDatasetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateDatasetInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateDatasetInput>
    public typealias MOutput = OperationOutput<UpdateDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateDatasetOutputError>
}

public struct UpdateDatasetInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateDatasetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateDatasetInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateDatasetInput>
    public typealias MOutput = OperationOutput<UpdateDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateDatasetOutputError>
}

public struct UpdateDatasetInputBodyMiddleware: Middleware {
    public let id: String = "UpdateDatasetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateDatasetInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateDatasetInput>
    public typealias MOutput = OperationOutput<UpdateDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateDatasetOutputError>
}

extension UpdateDatasetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions
        case contentDeliveryRules
        case lateDataRules
        case retentionPeriod
        case triggers
        case versioningConfiguration
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for datasetactions0 in actions {
                try actionsContainer.encode(datasetactions0)
            }
        }
        if let contentDeliveryRules = contentDeliveryRules {
            var contentDeliveryRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contentDeliveryRules)
            for datasetcontentdeliveryrules0 in contentDeliveryRules {
                try contentDeliveryRulesContainer.encode(datasetcontentdeliveryrules0)
            }
        }
        if let lateDataRules = lateDataRules {
            var lateDataRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lateDataRules)
            for latedatarules0 in lateDataRules {
                try lateDataRulesContainer.encode(latedatarules0)
            }
        }
        if let retentionPeriod = retentionPeriod {
            try encodeContainer.encode(retentionPeriod, forKey: .retentionPeriod)
        }
        if let triggers = triggers {
            var triggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggers)
            for datasettriggers0 in triggers {
                try triggersContainer.encode(datasettriggers0)
            }
        }
        if let versioningConfiguration = versioningConfiguration {
            try encodeContainer.encode(versioningConfiguration, forKey: .versioningConfiguration)
        }
    }
}
