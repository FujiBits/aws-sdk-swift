// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension LambdaClient {
    /// <p>Adds permissions to the resource-based policy of a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
    ///         layer</a>. Use this action to grant layer
    ///       usage permission to other accounts. You can grant permission to a single account, all AWS accounts, or all
    ///       accounts in an organization.</p>
    ///          <p>To revoke permission, call <a>RemoveLayerVersionPermission</a> with the statement ID that you
    ///       specified when you added it.</p>
    func addLayerVersionPermission(input: AddLayerVersionPermissionInput) async throws -> AddLayerVersionPermissionOutputResponse
    {
        typealias addLayerVersionPermissionContinuation = CheckedContinuation<AddLayerVersionPermissionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addLayerVersionPermissionContinuation) in
            addLayerVersionPermission(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Grants an AWS service or another account permission to use a function. You can apply the policy at the
    ///       function level, or specify a qualifier to restrict access to a single version or alias. If you use a qualifier,
    ///       the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function.</p>
    ///
    ///          <p>To grant permission to another account, specify the account ID as the <code>Principal</code>. For AWS
    ///       services, the principal is a domain-style identifier defined by the service, like <code>s3.amazonaws.com</code> or
    ///         <code>sns.amazonaws.com</code>. For AWS services, you can also specify the ARN of the associated resource as the
    ///         <code>SourceArn</code>. If you grant permission to a service principal without specifying the source, other
    ///       accounts could potentially configure resources in their account to invoke your Lambda function.</p>
    ///
    ///          <p>This action adds a statement to a resource-based permissions policy for the function. For more information
    ///       about function policies, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html">Lambda Function Policies</a>. </p>
    func addPermission(input: AddPermissionInput) async throws -> AddPermissionOutputResponse
    {
        typealias addPermissionContinuation = CheckedContinuation<AddPermissionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addPermissionContinuation) in
            addPermission(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a> for a
    ///       Lambda function version. Use aliases to provide clients with a function identifier that you can update to invoke a
    ///       different version.</p>
    ///          <p>You can also map an alias to split invocation requests between two versions. Use the
    ///         <code>RoutingConfig</code> parameter to specify a second version and the percentage of invocation requests that
    ///       it receives.</p>
    func createAlias(input: CreateAliasInput) async throws -> CreateAliasOutputResponse
    {
        typealias createAliasContinuation = CheckedContinuation<CreateAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAliasContinuation) in
            createAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a code signing configuration. A <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-trustedcode.html">code signing configuration</a> defines a list of
    ///       allowed signing profiles and defines the code-signing validation policy (action to be taken if deployment
    ///       validation checks fail). </p>
    func createCodeSigningConfig(input: CreateCodeSigningConfigInput) async throws -> CreateCodeSigningConfigOutputResponse
    {
        typealias createCodeSigningConfigContinuation = CheckedContinuation<CreateCodeSigningConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCodeSigningConfigContinuation) in
            createCodeSigningConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a mapping between an event source and an AWS Lambda function. Lambda reads items from the event source
    ///       and triggers the function.</p>
    ///          <p>For details about each event source type, see the following topics.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html">Using AWS Lambda with Amazon
    ///           DynamoDB</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html">Using AWS Lambda with Amazon
    ///           Kinesis</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html">Using AWS Lambda with Amazon
    ///           SQS</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html">Using AWS Lambda with Amazon
    ///           MQ</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html">Using AWS Lambda with Amazon MSK</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/lambda/latest/dg/kafka-smaa.html">Using AWS Lambda with Self-Managed Apache Kafka</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>The following error handling options are only available for stream sources (DynamoDB and Kinesis):</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>BisectBatchOnFunctionError</code> - If the function returns an error, split the batch in two and retry.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DestinationConfig</code> - Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MaximumRecordAgeInSeconds</code> - Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MaximumRetryAttempts</code> - Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ParallelizationFactor</code> - Process multiple batches from each shard concurrently.</p>
    ///             </li>
    ///          </ul>
    func createEventSourceMapping(input: CreateEventSourceMappingInput) async throws -> CreateEventSourceMappingOutputResponse
    {
        typealias createEventSourceMappingContinuation = CheckedContinuation<CreateEventSourceMappingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEventSourceMappingContinuation) in
            createEventSourceMapping(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a Lambda function. To create a function, you need a <a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html">deployment package</a> and an <a href="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role">execution role</a>. The
    ///       deployment package is a .zip file  archive or container image that contains your function code. The execution role grants the function permission to use AWS
    ///       services, such as Amazon CloudWatch Logs for log streaming and AWS X-Ray for request tracing.</p>
    ///
    ///          <p>When you create a function, Lambda provisions an instance of the function and its supporting resources. If
    ///       your function connects to a VPC, this process can take a minute or so. During this time, you can't invoke or
    ///       modify the function. The <code>State</code>, <code>StateReason</code>, and <code>StateReasonCode</code> fields in
    ///       the response from <a>GetFunctionConfiguration</a> indicate when the function is ready to invoke. For
    ///       more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html">Function
    ///         States</a>.</p>
    ///
    ///          <p>A function has an unpublished version, and can have published versions and aliases. The unpublished version
    ///       changes when you update your function's code and configuration. A published version is a snapshot of your function
    ///       code and configuration that can't be changed. An alias is a named resource that maps to a version, and can be
    ///       changed to map to a different version. Use the <code>Publish</code> parameter to create version <code>1</code> of
    ///       your function from its initial configuration.</p>
    ///
    ///          <p>The other parameters let you configure version-specific and function-level settings. You can modify
    ///       version-specific settings later with <a>UpdateFunctionConfiguration</a>. Function-level settings apply
    ///       to both the unpublished and published versions of the function, and include tags (<a>TagResource</a>)
    ///       and per-function concurrency limits (<a>PutFunctionConcurrency</a>).</p>
    ///
    ///          <p>You can use code signing if your deployment package is a .zip file archive. To enable code signing for this function,
    ///       specify the ARN of a code-signing configuration. When a user
    ///       attempts to deploy a code package with <a>UpdateFunctionCode</a>, Lambda checks that the code
    ///       package has a valid signature from a trusted publisher. The code-signing configuration
    ///       includes set set of signing profiles, which define the trusted publishers for this function.</p>
    ///
    ///          <p>If another account or an AWS service invokes your function, use <a>AddPermission</a> to grant
    ///       permission by creating a resource-based IAM policy. You can grant permissions at the function level, on a version,
    ///       or on an alias.</p>
    ///
    ///          <p>To invoke your function directly, use <a>Invoke</a>. To invoke your function in response to events
    ///       in other AWS services, create an event source mapping (<a>CreateEventSourceMapping</a>), or configure a
    ///       function trigger in the other service. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-invocation.html">Invoking Functions</a>.</p>
    func createFunction(input: CreateFunctionInput) async throws -> CreateFunctionOutputResponse
    {
        typealias createFunctionContinuation = CheckedContinuation<CreateFunctionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFunctionContinuation) in
            createFunction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.</p>
    func deleteAlias(input: DeleteAliasInput) async throws -> DeleteAliasOutputResponse
    {
        typealias deleteAliasContinuation = CheckedContinuation<DeleteAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAliasContinuation) in
            deleteAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the code signing configuration. You can delete the code signing configuration only if no function is
    ///       using it. </p>
    func deleteCodeSigningConfig(input: DeleteCodeSigningConfigInput) async throws -> DeleteCodeSigningConfigOutputResponse
    {
        typealias deleteCodeSigningConfigContinuation = CheckedContinuation<DeleteCodeSigningConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCodeSigningConfigContinuation) in
            deleteCodeSigningConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an <a href="https://docs.aws.amazon.com/lambda/latest/dg/intro-invocation-modes.html">event source
    ///       mapping</a>. You can get the identifier of a mapping from the output of <a>ListEventSourceMappings</a>.</p>
    ///          <p>When you delete an event source mapping, it enters a <code>Deleting</code> state and might not be completely deleted for several seconds.</p>
    func deleteEventSourceMapping(input: DeleteEventSourceMappingInput) async throws -> DeleteEventSourceMappingOutputResponse
    {
        typealias deleteEventSourceMappingContinuation = CheckedContinuation<DeleteEventSourceMappingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEventSourceMappingContinuation) in
            deleteEventSourceMapping(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a Lambda function. To delete a specific function version, use the <code>Qualifier</code> parameter.
    ///       Otherwise, all versions and aliases are deleted.</p>
    ///
    ///          <p>To delete Lambda event source mappings that invoke a function, use <a>DeleteEventSourceMapping</a>.
    ///       For AWS services and resources that invoke your function directly, delete the trigger in the service where you
    ///       originally configured it.</p>
    func deleteFunction(input: DeleteFunctionInput) async throws -> DeleteFunctionOutputResponse
    {
        typealias deleteFunctionContinuation = CheckedContinuation<DeleteFunctionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFunctionContinuation) in
            deleteFunction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the code signing configuration from the function.</p>
    func deleteFunctionCodeSigningConfig(input: DeleteFunctionCodeSigningConfigInput) async throws -> DeleteFunctionCodeSigningConfigOutputResponse
    {
        typealias deleteFunctionCodeSigningConfigContinuation = CheckedContinuation<DeleteFunctionCodeSigningConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFunctionCodeSigningConfigContinuation) in
            deleteFunctionCodeSigningConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes a concurrent execution limit from a function.</p>
    func deleteFunctionConcurrency(input: DeleteFunctionConcurrencyInput) async throws -> DeleteFunctionConcurrencyOutputResponse
    {
        typealias deleteFunctionConcurrencyContinuation = CheckedContinuation<DeleteFunctionConcurrencyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFunctionConcurrencyContinuation) in
            deleteFunctionConcurrency(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the configuration for asynchronous invocation for a function, version, or alias.</p>
    ///          <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
    func deleteFunctionEventInvokeConfig(input: DeleteFunctionEventInvokeConfigInput) async throws -> DeleteFunctionEventInvokeConfigOutputResponse
    {
        typealias deleteFunctionEventInvokeConfigContinuation = CheckedContinuation<DeleteFunctionEventInvokeConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFunctionEventInvokeConfigContinuation) in
            deleteFunctionEventInvokeConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
    ///         layer</a>. Deleted versions can no longer be viewed or added to functions. To avoid
    ///       breaking functions, a copy of the version remains in Lambda until no functions refer to it.</p>
    func deleteLayerVersion(input: DeleteLayerVersionInput) async throws -> DeleteLayerVersionOutputResponse
    {
        typealias deleteLayerVersionContinuation = CheckedContinuation<DeleteLayerVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteLayerVersionContinuation) in
            deleteLayerVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the provisioned concurrency configuration for a function.</p>
    func deleteProvisionedConcurrencyConfig(input: DeleteProvisionedConcurrencyConfigInput) async throws -> DeleteProvisionedConcurrencyConfigOutputResponse
    {
        typealias deleteProvisionedConcurrencyConfigContinuation = CheckedContinuation<DeleteProvisionedConcurrencyConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProvisionedConcurrencyConfigContinuation) in
            deleteProvisionedConcurrencyConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves details about your account's <a href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">limits</a> and usage in an AWS Region.</p>
    func getAccountSettings(input: GetAccountSettingsInput) async throws -> GetAccountSettingsOutputResponse
    {
        typealias getAccountSettingsContinuation = CheckedContinuation<GetAccountSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAccountSettingsContinuation) in
            getAccountSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns details about a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.</p>
    func getAlias(input: GetAliasInput) async throws -> GetAliasOutputResponse
    {
        typealias getAliasContinuation = CheckedContinuation<GetAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAliasContinuation) in
            getAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the specified code signing configuration.</p>
    func getCodeSigningConfig(input: GetCodeSigningConfigInput) async throws -> GetCodeSigningConfigOutputResponse
    {
        typealias getCodeSigningConfigContinuation = CheckedContinuation<GetCodeSigningConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCodeSigningConfigContinuation) in
            getCodeSigningConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns details about an event source mapping. You can get the identifier of a mapping from the output of <a>ListEventSourceMappings</a>.</p>
    func getEventSourceMapping(input: GetEventSourceMappingInput) async throws -> GetEventSourceMappingOutputResponse
    {
        typealias getEventSourceMappingContinuation = CheckedContinuation<GetEventSourceMappingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEventSourceMappingContinuation) in
            getEventSourceMapping(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the function or function version, with a link to download the deployment package
    ///       that's valid for 10 minutes. If you specify a function version, only details that are specific to that version are
    ///       returned.</p>
    func getFunction(input: GetFunctionInput) async throws -> GetFunctionOutputResponse
    {
        typealias getFunctionContinuation = CheckedContinuation<GetFunctionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFunctionContinuation) in
            getFunction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the code signing configuration for the specified function.</p>
    func getFunctionCodeSigningConfig(input: GetFunctionCodeSigningConfigInput) async throws -> GetFunctionCodeSigningConfigOutputResponse
    {
        typealias getFunctionCodeSigningConfigContinuation = CheckedContinuation<GetFunctionCodeSigningConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFunctionCodeSigningConfigContinuation) in
            getFunctionCodeSigningConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns details about the reserved concurrency configuration for a function. To set a concurrency limit for a
    ///       function, use <a>PutFunctionConcurrency</a>.</p>
    func getFunctionConcurrency(input: GetFunctionConcurrencyInput) async throws -> GetFunctionConcurrencyOutputResponse
    {
        typealias getFunctionConcurrencyContinuation = CheckedContinuation<GetFunctionConcurrencyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFunctionConcurrencyContinuation) in
            getFunctionConcurrency(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the version-specific settings of a Lambda function or version. The output includes only options that
    ///       can vary between versions of a function. To modify these settings, use <a>UpdateFunctionConfiguration</a>.</p>
    ///          <p>To get all of a function's details, including function-level settings, use <a>GetFunction</a>.</p>
    func getFunctionConfiguration(input: GetFunctionConfigurationInput) async throws -> GetFunctionConfigurationOutputResponse
    {
        typealias getFunctionConfigurationContinuation = CheckedContinuation<GetFunctionConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFunctionConfigurationContinuation) in
            getFunctionConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the configuration for asynchronous invocation for a function, version, or alias.</p>
    ///          <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
    func getFunctionEventInvokeConfig(input: GetFunctionEventInvokeConfigInput) async throws -> GetFunctionEventInvokeConfigOutputResponse
    {
        typealias getFunctionEventInvokeConfigContinuation = CheckedContinuation<GetFunctionEventInvokeConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFunctionEventInvokeConfigContinuation) in
            getFunctionEventInvokeConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
    ///         layer</a>, with a link to download the layer archive
    ///         that's valid for 10 minutes.</p>
    func getLayerVersion(input: GetLayerVersionInput) async throws -> GetLayerVersionOutputResponse
    {
        typealias getLayerVersionContinuation = CheckedContinuation<GetLayerVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLayerVersionContinuation) in
            getLayerVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
    ///         layer</a>, with a link to download the layer archive
    ///         that's valid for 10 minutes.</p>
    func getLayerVersionByArn(input: GetLayerVersionByArnInput) async throws -> GetLayerVersionByArnOutputResponse
    {
        typealias getLayerVersionByArnContinuation = CheckedContinuation<GetLayerVersionByArnOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLayerVersionByArnContinuation) in
            getLayerVersionByArn(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the permission policy for a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
    ///         layer</a>. For more information, see <a>AddLayerVersionPermission</a>.</p>
    func getLayerVersionPolicy(input: GetLayerVersionPolicyInput) async throws -> GetLayerVersionPolicyOutputResponse
    {
        typealias getLayerVersionPolicyContinuation = CheckedContinuation<GetLayerVersionPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLayerVersionPolicyContinuation) in
            getLayerVersionPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the <a href="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html">resource-based IAM policy</a> for a function, version, or alias.</p>
    func getPolicy(input: GetPolicyInput) async throws -> GetPolicyOutputResponse
    {
        typealias getPolicyContinuation = CheckedContinuation<GetPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPolicyContinuation) in
            getPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the provisioned concurrency configuration for a function's alias or version.</p>
    func getProvisionedConcurrencyConfig(input: GetProvisionedConcurrencyConfigInput) async throws -> GetProvisionedConcurrencyConfigOutputResponse
    {
        typealias getProvisionedConcurrencyConfigContinuation = CheckedContinuation<GetProvisionedConcurrencyConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getProvisionedConcurrencyConfigContinuation) in
            getProvisionedConcurrencyConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Invokes a Lambda function. You can invoke a function synchronously (and wait for the response), or
    ///       asynchronously. To invoke a function asynchronously, set <code>InvocationType</code> to <code>Event</code>.</p>
    ///
    ///          <p>For <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-sync.html">synchronous invocation</a>,
    ///       details about the function response, including errors, are included in the response body and headers. For either
    ///       invocation type, you can find more information in the <a href="https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions.html">execution log</a> and <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html">trace</a>.</p>
    ///
    ///          <p>When an error occurs, your function may be invoked multiple times. Retry behavior varies by error type,
    ///       client, event source, and invocation type. For example, if you invoke a function asynchronously and it returns an
    ///       error, Lambda executes the function up to two more times. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/retries-on-errors.html">Retry Behavior</a>.</p>
    ///
    ///          <p>For <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html">asynchronous invocation</a>,
    ///       Lambda adds events to a queue before sending them to your function. If your function does not have enough capacity
    ///       to keep up with the queue, events may be lost. Occasionally, your function may receive the same event multiple
    ///       times, even if no error occurs. To retain events that were not processed, configure your function with a <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">dead-letter queue</a>.</p>
    ///
    ///          <p>The status code in the API response doesn't reflect function errors. Error codes are reserved for errors that
    ///       prevent your function from executing, such as permissions errors, <a href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">limit errors</a>, or issues with your function's code and configuration.
    ///       For example, Lambda returns <code>TooManyRequestsException</code> if executing the function would cause you to
    ///       exceed a concurrency limit at either the account level (<code>ConcurrentInvocationLimitExceeded</code>) or
    ///       function level (<code>ReservedFunctionConcurrentInvocationLimitExceeded</code>).</p>
    ///
    ///          <p>For functions with a long timeout, your client might be disconnected during synchronous invocation while it
    ///       waits for a response. Configure your HTTP client, SDK, firewall, proxy, or operating system to allow for long
    ///       connections with timeout or keep-alive settings.</p>
    ///
    ///          <p>This operation requires permission for the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awslambda.html">lambda:InvokeFunction</a> action.</p>
    func invoke(input: InvokeInput) async throws -> InvokeOutputResponse
    {
        typealias invokeContinuation = CheckedContinuation<InvokeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: invokeContinuation) in
            invoke(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <important>
    ///             <p>For asynchronous function invocation, use <a>Invoke</a>.</p>
    ///          </important>
    ///          <p>Invokes a function asynchronously.</p>
    @available(*, deprecated)
    func invokeAsync(input: InvokeAsyncInput) async throws -> InvokeAsyncOutputResponse
    {
        typealias invokeAsyncContinuation = CheckedContinuation<InvokeAsyncOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: invokeAsyncContinuation) in
            invokeAsync(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">aliases</a>
    ///       for a Lambda function.</p>
    func listAliases(input: ListAliasesInput) async throws -> ListAliasesOutputResponse
    {
        typealias listAliasesContinuation = CheckedContinuation<ListAliasesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAliasesContinuation) in
            listAliases(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuring-codesigning.html">code
    ///         signing configurations</a>. A request returns up to 10,000 configurations per
    ///       call. You can use the <code>MaxItems</code> parameter to return fewer configurations per call. </p>
    func listCodeSigningConfigs(input: ListCodeSigningConfigsInput) async throws -> ListCodeSigningConfigsOutputResponse
    {
        typealias listCodeSigningConfigsContinuation = CheckedContinuation<ListCodeSigningConfigsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCodeSigningConfigsContinuation) in
            listCodeSigningConfigs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists event source mappings. Specify an <code>EventSourceArn</code> to only show event source mappings for a
    ///       single event source.</p>
    func listEventSourceMappings(input: ListEventSourceMappingsInput) async throws -> ListEventSourceMappingsOutputResponse
    {
        typealias listEventSourceMappingsContinuation = CheckedContinuation<ListEventSourceMappingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEventSourceMappingsContinuation) in
            listEventSourceMappings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list of configurations for asynchronous invocation for a function.</p>
    ///          <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
    func listFunctionEventInvokeConfigs(input: ListFunctionEventInvokeConfigsInput) async throws -> ListFunctionEventInvokeConfigsOutputResponse
    {
        typealias listFunctionEventInvokeConfigsContinuation = CheckedContinuation<ListFunctionEventInvokeConfigsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFunctionEventInvokeConfigsContinuation) in
            listFunctionEventInvokeConfigs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of Lambda functions, with the version-specific configuration of each. Lambda returns up to 50
    ///       functions per call.</p>
    ///          <p>Set <code>FunctionVersion</code> to <code>ALL</code> to include all published versions of each function in
    ///       addition to the unpublished version. </p>
    ///          <note>
    ///             <p>The <code>ListFunctions</code> action returns a subset of the <a>FunctionConfiguration</a> fields.
    ///       To get the additional fields (State, StateReasonCode, StateReason, LastUpdateStatus, LastUpdateStatusReason, LastUpdateStatusReasonCode)
    ///       for a function or version, use <a>GetFunction</a>.</p>
    ///          </note>
    func listFunctions(input: ListFunctionsInput) async throws -> ListFunctionsOutputResponse
    {
        typealias listFunctionsContinuation = CheckedContinuation<ListFunctionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFunctionsContinuation) in
            listFunctions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List the functions that use the specified code signing configuration. You can use this method prior to deleting a
    ///       code signing configuration, to verify that no functions are using it.</p>
    func listFunctionsByCodeSigningConfig(input: ListFunctionsByCodeSigningConfigInput) async throws -> ListFunctionsByCodeSigningConfigOutputResponse
    {
        typealias listFunctionsByCodeSigningConfigContinuation = CheckedContinuation<ListFunctionsByCodeSigningConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFunctionsByCodeSigningConfigContinuation) in
            listFunctionsByCodeSigningConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the versions of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
    ///         layer</a>. Versions that have been deleted aren't listed. Specify a <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime identifier</a> to list only
    ///       versions that indicate that they're compatible with that runtime.</p>
    func listLayerVersions(input: ListLayerVersionsInput) async throws -> ListLayerVersionsOutputResponse
    {
        typealias listLayerVersionsContinuation = CheckedContinuation<ListLayerVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listLayerVersionsContinuation) in
            listLayerVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
    ///         layers</a> and shows information about the latest version of each. Specify a <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime identifier</a> to list only layers
    ///       that indicate that they're compatible with that runtime.</p>
    func listLayers(input: ListLayersInput) async throws -> ListLayersOutputResponse
    {
        typealias listLayersContinuation = CheckedContinuation<ListLayersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listLayersContinuation) in
            listLayers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list of provisioned concurrency configurations for a function.</p>
    func listProvisionedConcurrencyConfigs(input: ListProvisionedConcurrencyConfigsInput) async throws -> ListProvisionedConcurrencyConfigsOutputResponse
    {
        typealias listProvisionedConcurrencyConfigsContinuation = CheckedContinuation<ListProvisionedConcurrencyConfigsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProvisionedConcurrencyConfigsContinuation) in
            listProvisionedConcurrencyConfigs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a>. You can
    ///       also view tags with <a>GetFunction</a>.</p>
    func listTags(input: ListTagsInput) async throws -> ListTagsOutputResponse
    {
        typealias listTagsContinuation = CheckedContinuation<ListTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsContinuation) in
            listTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">versions</a>,
    ///       with the version-specific configuration of each. Lambda returns up to 50 versions per call.</p>
    func listVersionsByFunction(input: ListVersionsByFunctionInput) async throws -> ListVersionsByFunctionOutputResponse
    {
        typealias listVersionsByFunctionContinuation = CheckedContinuation<ListVersionsByFunctionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listVersionsByFunctionContinuation) in
            listVersionsByFunction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
    ///         layer</a> from a ZIP archive. Each time you call <code>PublishLayerVersion</code> with the same
    ///       layer name, a new version is created.</p>
    ///          <p>Add layers to your function with <a>CreateFunction</a> or <a>UpdateFunctionConfiguration</a>.</p>
    func publishLayerVersion(input: PublishLayerVersionInput) async throws -> PublishLayerVersionOutputResponse
    {
        typealias publishLayerVersionContinuation = CheckedContinuation<PublishLayerVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: publishLayerVersionContinuation) in
            publishLayerVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">version</a> from the
    ///       current code and configuration of a function. Use versions to create a snapshot of your function code and
    ///       configuration that doesn't change.</p>
    ///
    ///          <p>AWS Lambda doesn't publish a version if the function's configuration and code haven't changed since the last
    ///       version. Use <a>UpdateFunctionCode</a> or <a>UpdateFunctionConfiguration</a> to update the
    ///       function before publishing a version.</p>
    ///
    ///          <p>Clients can invoke versions directly or with an alias. To create an alias, use <a>CreateAlias</a>.</p>
    func publishVersion(input: PublishVersionInput) async throws -> PublishVersionOutputResponse
    {
        typealias publishVersionContinuation = CheckedContinuation<PublishVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: publishVersionContinuation) in
            publishVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Update the code signing configuration for the function. Changes to the code signing configuration take effect the
    ///       next time a user tries to deploy a code package to the function. </p>
    func putFunctionCodeSigningConfig(input: PutFunctionCodeSigningConfigInput) async throws -> PutFunctionCodeSigningConfigOutputResponse
    {
        typealias putFunctionCodeSigningConfigContinuation = CheckedContinuation<PutFunctionCodeSigningConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putFunctionCodeSigningConfigContinuation) in
            putFunctionCodeSigningConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets the maximum number of simultaneous executions for a function, and reserves capacity for that concurrency
    ///       level.</p>
    ///          <p>Concurrency settings apply to the function as a whole, including all published versions and the unpublished
    ///       version. Reserving concurrency both ensures that your function has capacity to process the specified number of
    ///       events simultaneously, and prevents it from scaling beyond that level. Use <a>GetFunction</a> to see
    ///       the current setting for a function.</p>
    ///          <p>Use <a>GetAccountSettings</a> to see your Regional concurrency limit. You can reserve concurrency
    ///       for as many functions as you like, as long as you leave at least 100 simultaneous executions unreserved for
    ///       functions that aren't configured with a per-function limit. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html">Managing Concurrency</a>.</p>
    func putFunctionConcurrency(input: PutFunctionConcurrencyInput) async throws -> PutFunctionConcurrencyOutputResponse
    {
        typealias putFunctionConcurrencyContinuation = CheckedContinuation<PutFunctionConcurrencyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putFunctionConcurrencyContinuation) in
            putFunctionConcurrency(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Configures options for <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html">asynchronous
    ///         invocation</a> on a function, version, or alias. If a configuration already exists for a function, version,
    ///       or alias, this operation overwrites it. If you exclude any settings, they are removed. To set one option without
    ///       affecting existing settings for other options, use <a>UpdateFunctionEventInvokeConfig</a>.</p>
    ///          <p>By default, Lambda retries an asynchronous invocation twice if the function returns an error. It retains
    ///       events in a queue for up to six hours. When an event fails all processing attempts or stays in the asynchronous
    ///       invocation queue for too long, Lambda discards it. To retain discarded events, configure a dead-letter queue with
    ///         <a>UpdateFunctionConfiguration</a>.</p>
    ///          <p>To send an invocation record to a queue, topic, function, or event bus, specify a <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations">destination</a>. You can configure separate destinations for successful invocations (on-success) and events
    ///       that fail all processing attempts (on-failure). You can configure destinations in addition to or instead of a
    ///       dead-letter queue.</p>
    func putFunctionEventInvokeConfig(input: PutFunctionEventInvokeConfigInput) async throws -> PutFunctionEventInvokeConfigOutputResponse
    {
        typealias putFunctionEventInvokeConfigContinuation = CheckedContinuation<PutFunctionEventInvokeConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putFunctionEventInvokeConfigContinuation) in
            putFunctionEventInvokeConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds a provisioned concurrency configuration to a function's alias or version.</p>
    func putProvisionedConcurrencyConfig(input: PutProvisionedConcurrencyConfigInput) async throws -> PutProvisionedConcurrencyConfigOutputResponse
    {
        typealias putProvisionedConcurrencyConfigContinuation = CheckedContinuation<PutProvisionedConcurrencyConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putProvisionedConcurrencyConfigContinuation) in
            putProvisionedConcurrencyConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes a statement from the permissions policy for a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda
    ///         layer</a>. For more information, see
    ///         <a>AddLayerVersionPermission</a>.</p>
    func removeLayerVersionPermission(input: RemoveLayerVersionPermissionInput) async throws -> RemoveLayerVersionPermissionOutputResponse
    {
        typealias removeLayerVersionPermissionContinuation = CheckedContinuation<RemoveLayerVersionPermissionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeLayerVersionPermissionContinuation) in
            removeLayerVersionPermission(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Revokes function-use permission from an AWS service or another account. You can get the ID of the statement
    ///       from the output of <a>GetPolicy</a>.</p>
    func removePermission(input: RemovePermissionInput) async throws -> RemovePermissionOutputResponse
    {
        typealias removePermissionContinuation = CheckedContinuation<RemovePermissionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removePermissionContinuation) in
            removePermission(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a> to a function.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a> from a function.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the configuration of a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.</p>
    func updateAlias(input: UpdateAliasInput) async throws -> UpdateAliasOutputResponse
    {
        typealias updateAliasContinuation = CheckedContinuation<UpdateAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAliasContinuation) in
            updateAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Update the code signing configuration. Changes to the code signing configuration take effect the next time a
    ///       user tries to deploy a code package to the function. </p>
    func updateCodeSigningConfig(input: UpdateCodeSigningConfigInput) async throws -> UpdateCodeSigningConfigOutputResponse
    {
        typealias updateCodeSigningConfigContinuation = CheckedContinuation<UpdateCodeSigningConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateCodeSigningConfigContinuation) in
            updateCodeSigningConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an event source mapping. You can change the function that AWS Lambda invokes, or pause invocation and resume later from the same location.</p>
    ///          <p>The following error handling options are only available for stream sources (DynamoDB and Kinesis):</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>BisectBatchOnFunctionError</code> - If the function returns an error, split the batch in two and retry.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DestinationConfig</code> - Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MaximumRecordAgeInSeconds</code> - Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MaximumRetryAttempts</code> - Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ParallelizationFactor</code> - Process multiple batches from each shard concurrently.</p>
    ///             </li>
    ///          </ul>
    func updateEventSourceMapping(input: UpdateEventSourceMappingInput) async throws -> UpdateEventSourceMappingOutputResponse
    {
        typealias updateEventSourceMappingContinuation = CheckedContinuation<UpdateEventSourceMappingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEventSourceMappingContinuation) in
            updateEventSourceMapping(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a Lambda function's code. If code signing is enabled for the function, the code package must be signed
    ///       by a trusted publisher. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-trustedcode.html">Configuring code signing</a>.</p>
    ///
    ///          <p>The function's code is locked when you publish a version. You can't modify the code of a published version,
    ///       only the unpublished version.</p>
    ///          <note>
    ///             <p>For a function defined as a container image, Lambda resolves the image tag to an image digest. In Amazon ECR, if
    ///         you update the image tag to a new image, Lambda does not automatically update the function.</p>
    ///          </note>
    func updateFunctionCode(input: UpdateFunctionCodeInput) async throws -> UpdateFunctionCodeOutputResponse
    {
        typealias updateFunctionCodeContinuation = CheckedContinuation<UpdateFunctionCodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFunctionCodeContinuation) in
            updateFunctionCode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modify the version-specific settings of a Lambda function.</p>
    ///
    ///          <p>When you update a function, Lambda provisions an instance of the function and its supporting resources. If
    ///       your function connects to a VPC, this process can take a minute. During this time, you can't modify the function,
    ///       but you can still invoke it. The <code>LastUpdateStatus</code>, <code>LastUpdateStatusReason</code>, and
    ///         <code>LastUpdateStatusReasonCode</code> fields in the response from <a>GetFunctionConfiguration</a>
    ///       indicate when the update is complete and the function is processing events with the new configuration. For more
    ///       information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html">Function
    ///       States</a>.</p>
    ///
    ///          <p>These settings can vary between versions of a function and are locked when you publish a version. You can't
    ///       modify the configuration of a published version, only the unpublished version.</p>
    ///
    ///          <p>To configure function concurrency, use <a>PutFunctionConcurrency</a>. To grant invoke permissions
    ///       to an account or AWS service, use <a>AddPermission</a>.</p>
    func updateFunctionConfiguration(input: UpdateFunctionConfigurationInput) async throws -> UpdateFunctionConfigurationOutputResponse
    {
        typealias updateFunctionConfigurationContinuation = CheckedContinuation<UpdateFunctionConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFunctionConfigurationContinuation) in
            updateFunctionConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the configuration for asynchronous invocation for a function, version, or alias.</p>
    ///          <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
    func updateFunctionEventInvokeConfig(input: UpdateFunctionEventInvokeConfigInput) async throws -> UpdateFunctionEventInvokeConfigOutputResponse
    {
        typealias updateFunctionEventInvokeConfigContinuation = CheckedContinuation<UpdateFunctionEventInvokeConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFunctionEventInvokeConfigContinuation) in
            updateFunctionEventInvokeConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
