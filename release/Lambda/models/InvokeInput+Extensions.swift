// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct InvokeInputHeadersMiddleware: Middleware {
    public let id: String = "InvokeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<InvokeInput>,
                  next: H) -> Swift.Result<OperationOutput<InvokeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let clientContext = input.operationInput.clientContext {
            input.builder.withHeader(name: "X-Amz-Client-Context", value: String(clientContext))
        }
        if let invocationType = input.operationInput.invocationType {
            input.builder.withHeader(name: "X-Amz-Invocation-Type", value: String(invocationType.rawValue))
        }
        if let logType = input.operationInput.logType {
            input.builder.withHeader(name: "X-Amz-Log-Type", value: String(logType.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<InvokeInput>
    public typealias MOutput = OperationOutput<InvokeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<InvokeOutputError>
}

public struct InvokeInputQueryItemMiddleware: Middleware {
    public let id: String = "InvokeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<InvokeInput>,
                  next: H) -> Swift.Result<OperationOutput<InvokeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let qualifier = input.operationInput.qualifier {
            let qualifierQueryItem = URLQueryItem(name: "Qualifier".urlPercentEncoding(), value: String(qualifier).urlPercentEncoding())
            input.builder.withQueryItem(qualifierQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<InvokeInput>
    public typealias MOutput = OperationOutput<InvokeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<InvokeOutputError>
}

public struct InvokeInputBodyMiddleware: Middleware {
    public let id: String = "InvokeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<InvokeInput>,
                  next: H) -> Swift.Result<OperationOutput<InvokeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let payload = input.operationInput.payload {
            let data = payload
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<InvokeInput>
    public typealias MOutput = OperationOutput<InvokeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<InvokeOutputError>
}

extension InvokeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case payload = "Payload"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let payload = payload {
            try encodeContainer.encode(payload.base64EncodedString(), forKey: .payload)
        }
    }
}
