// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension TransferClient {
    /// Used by administrators to choose which groups in the directory should have access to upload and download files over the enabled protocols using Amazon Web Services Transfer Family. For example, a Microsoft Active Directory might contain 50,000 users, but only a small fraction might need the ability to transfer files to the server. An administrator can use CreateAccess to limit the access to the correct set of users who need this ability.
    func createAccess(input: CreateAccessInput) async throws -> CreateAccessOutputResponse
    {
        typealias createAccessContinuation = CheckedContinuation<CreateAccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAccessContinuation) in
            createAccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Instantiates an auto-scaling virtual server based on the selected file transfer protocol in Amazon Web Services. When you make updates to your file transfer protocol-enabled server or when you work with users, use the service-generated ServerId property that is assigned to the newly created server.
    func createServer(input: CreateServerInput) async throws -> CreateServerOutputResponse
    {
        typealias createServerContinuation = CheckedContinuation<CreateServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createServerContinuation) in
            createServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a user and associates them with an existing file transfer protocol-enabled server. You can only create and associate users with servers that have the IdentityProviderType set to SERVICE_MANAGED. Using parameters for CreateUser, you can specify the user name, set the home directory, store the user's public key, and assign the user's Amazon Web Services Identity and Access Management (IAM) role. You can also optionally add a session policy, and assign metadata with tags that can be used to group and search for users.
    func createUser(input: CreateUserInput) async throws -> CreateUserOutputResponse
    {
        typealias createUserContinuation = CheckedContinuation<CreateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserContinuation) in
            createUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Allows you to create a workflow with specified steps and step details the workflow invokes after file transfer completes. After creating a workflow, you can associate the workflow created with any transfer servers by specifying the workflow-details field in CreateServer and UpdateServer operations.
    func createWorkflow(input: CreateWorkflowInput) async throws -> CreateWorkflowOutputResponse
    {
        typealias createWorkflowContinuation = CheckedContinuation<CreateWorkflowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWorkflowContinuation) in
            createWorkflow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Allows you to delete the access specified in the ServerID and ExternalID parameters.
    func deleteAccess(input: DeleteAccessInput) async throws -> DeleteAccessOutputResponse
    {
        typealias deleteAccessContinuation = CheckedContinuation<DeleteAccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAccessContinuation) in
            deleteAccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the file transfer protocol-enabled server that you specify. No response returns from this operation.
    func deleteServer(input: DeleteServerInput) async throws -> DeleteServerOutputResponse
    {
        typealias deleteServerContinuation = CheckedContinuation<DeleteServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteServerContinuation) in
            deleteServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a user's Secure Shell (SSH) public key.
    func deleteSshPublicKey(input: DeleteSshPublicKeyInput) async throws -> DeleteSshPublicKeyOutputResponse
    {
        typealias deleteSshPublicKeyContinuation = CheckedContinuation<DeleteSshPublicKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSshPublicKeyContinuation) in
            deleteSshPublicKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the user belonging to a file transfer protocol-enabled server you specify. No response returns from this operation. When you delete a user from a server, the user's information is lost.
    func deleteUser(input: DeleteUserInput) async throws -> DeleteUserOutputResponse
    {
        typealias deleteUserContinuation = CheckedContinuation<DeleteUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserContinuation) in
            deleteUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified workflow.
    func deleteWorkflow(input: DeleteWorkflowInput) async throws -> DeleteWorkflowOutputResponse
    {
        typealias deleteWorkflowContinuation = CheckedContinuation<DeleteWorkflowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWorkflowContinuation) in
            deleteWorkflow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the access that is assigned to the specific file transfer protocol-enabled server, as identified by its ServerId property and its ExternalID. The response from this call returns the properties of the access that is associated with the ServerId value that was specified.
    func describeAccess(input: DescribeAccessInput) async throws -> DescribeAccessOutputResponse
    {
        typealias describeAccessContinuation = CheckedContinuation<DescribeAccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccessContinuation) in
            describeAccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// You can use DescribeExecution to check the details of the execution of the specified workflow.
    func describeExecution(input: DescribeExecutionInput) async throws -> DescribeExecutionOutputResponse
    {
        typealias describeExecutionContinuation = CheckedContinuation<DescribeExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeExecutionContinuation) in
            describeExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the security policy that is attached to your file transfer protocol-enabled server. The response contains a description of the security policy's properties. For more information about security policies, see [Working with security policies](https://docs.aws.amazon.com/transfer/latest/userguide/security-policies.html).
    func describeSecurityPolicy(input: DescribeSecurityPolicyInput) async throws -> DescribeSecurityPolicyOutputResponse
    {
        typealias describeSecurityPolicyContinuation = CheckedContinuation<DescribeSecurityPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSecurityPolicyContinuation) in
            describeSecurityPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a file transfer protocol-enabled server that you specify by passing the ServerId parameter. The response contains a description of a server's properties. When you set EndpointType to VPC, the response will contain the EndpointDetails.
    func describeServer(input: DescribeServerInput) async throws -> DescribeServerOutputResponse
    {
        typealias describeServerContinuation = CheckedContinuation<DescribeServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeServerContinuation) in
            describeServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the user assigned to the specific file transfer protocol-enabled server, as identified by its ServerId property. The response from this call returns the properties of the user associated with the ServerId value that was specified.
    func describeUser(input: DescribeUserInput) async throws -> DescribeUserOutputResponse
    {
        typealias describeUserContinuation = CheckedContinuation<DescribeUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUserContinuation) in
            describeUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the specified workflow.
    func describeWorkflow(input: DescribeWorkflowInput) async throws -> DescribeWorkflowOutputResponse
    {
        typealias describeWorkflowContinuation = CheckedContinuation<DescribeWorkflowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeWorkflowContinuation) in
            describeWorkflow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a Secure Shell (SSH) public key to a user account identified by a UserName value assigned to the specific file transfer protocol-enabled server, identified by ServerId. The response returns the UserName value, the ServerId value, and the name of the SshPublicKeyId.
    func importSshPublicKey(input: ImportSshPublicKeyInput) async throws -> ImportSshPublicKeyOutputResponse
    {
        typealias importSshPublicKeyContinuation = CheckedContinuation<ImportSshPublicKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importSshPublicKeyContinuation) in
            importSshPublicKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the details for all the accesses you have on your server.
    func listAccesses(input: ListAccessesInput) async throws -> ListAccessesOutputResponse
    {
        typealias listAccessesContinuation = CheckedContinuation<ListAccessesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAccessesContinuation) in
            listAccesses(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all executions for the specified workflow.
    func listExecutions(input: ListExecutionsInput) async throws -> ListExecutionsOutputResponse
    {
        typealias listExecutionsContinuation = CheckedContinuation<ListExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listExecutionsContinuation) in
            listExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the security policies that are attached to your file transfer protocol-enabled servers.
    func listSecurityPolicies(input: ListSecurityPoliciesInput) async throws -> ListSecurityPoliciesOutputResponse
    {
        typealias listSecurityPoliciesContinuation = CheckedContinuation<ListSecurityPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSecurityPoliciesContinuation) in
            listSecurityPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the file transfer protocol-enabled servers that are associated with your Amazon Web Services account.
    func listServers(input: ListServersInput) async throws -> ListServersOutputResponse
    {
        typealias listServersContinuation = CheckedContinuation<ListServersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listServersContinuation) in
            listServers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all of the tags associated with the Amazon Resource Name (ARN) that you specify. The resource can be a user, server, or role.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the users for a file transfer protocol-enabled server that you specify by passing the ServerId parameter.
    func listUsers(input: ListUsersInput) async throws -> ListUsersOutputResponse
    {
        typealias listUsersContinuation = CheckedContinuation<ListUsersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUsersContinuation) in
            listUsers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all of your workflows.
    func listWorkflows(input: ListWorkflowsInput) async throws -> ListWorkflowsOutputResponse
    {
        typealias listWorkflowsContinuation = CheckedContinuation<ListWorkflowsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWorkflowsContinuation) in
            listWorkflows(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends a callback for asynchronous custom steps. The ExecutionId, WorkflowId, and Token are passed to the target resource during execution of a custom step of a workflow. You must include those with their callback as well as providing a status.
    func sendWorkflowStepState(input: SendWorkflowStepStateInput) async throws -> SendWorkflowStepStateOutputResponse
    {
        typealias sendWorkflowStepStateContinuation = CheckedContinuation<SendWorkflowStepStateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendWorkflowStepStateContinuation) in
            sendWorkflowStepState(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes the state of a file transfer protocol-enabled server from OFFLINE to ONLINE. It has no impact on a server that is already ONLINE. An ONLINE server can accept and process file transfer jobs. The state of STARTING indicates that the server is in an intermediate state, either not fully able to respond, or not fully online. The values of START_FAILED can indicate an error condition. No response is returned from this call.
    func startServer(input: StartServerInput) async throws -> StartServerOutputResponse
    {
        typealias startServerContinuation = CheckedContinuation<StartServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startServerContinuation) in
            startServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes the state of a file transfer protocol-enabled server from ONLINE to OFFLINE. An OFFLINE server cannot accept and process file transfer jobs. Information tied to your server, such as server and user properties, are not affected by stopping your server. Stopping the server will not reduce or impact your file transfer protocol endpoint billing; you must delete the server to stop being billed. The state of STOPPING indicates that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of STOP_FAILED can indicate an error condition. No response is returned from this call.
    func stopServer(input: StopServerInput) async throws -> StopServerOutputResponse
    {
        typealias stopServerContinuation = CheckedContinuation<StopServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopServerContinuation) in
            stopServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Attaches a key-value pair to a resource, as identified by its Amazon Resource Name (ARN). Resources are users, servers, roles, and other entities. There is no response returned from this call.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// If the IdentityProviderType of a file transfer protocol-enabled server is AWS_DIRECTORY_SERVICE or API_Gateway, tests whether your identity provider is set up successfully. We highly recommend that you call this operation to test your authentication method as soon as you create your server. By doing so, you can troubleshoot issues with the identity provider integration to ensure that your users can successfully use the service. The ServerId and UserName parameters are required. The ServerProtocol, SourceIp, and UserPassword are all optional. You cannot use TestIdentityProvider if the IdentityProviderType of your server is SERVICE_MANAGED.
    ///
    /// * If you provide any incorrect values for any parameters, the Response field is empty.
    ///
    /// * If you provide a server ID for a server that uses service-managed users, you get an error:  An error occurred (InvalidRequestException) when calling the TestIdentityProvider operation: s-server-ID not configured for external auth
    ///
    /// * If you enter a Server ID for the --server-id parameter that does not identify an actual Transfer server, you receive the following error: An error occurred (ResourceNotFoundException) when calling the TestIdentityProvider operation: Unknown server
    func testIdentityProvider(input: TestIdentityProviderInput) async throws -> TestIdentityProviderOutputResponse
    {
        typealias testIdentityProviderContinuation = CheckedContinuation<TestIdentityProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testIdentityProviderContinuation) in
            testIdentityProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Detaches a key-value pair from a resource, as identified by its Amazon Resource Name (ARN). Resources are users, servers, roles, and other entities. No response is returned from this call.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Allows you to update parameters for the access specified in the ServerID and ExternalID parameters.
    func updateAccess(input: UpdateAccessInput) async throws -> UpdateAccessOutputResponse
    {
        typealias updateAccessContinuation = CheckedContinuation<UpdateAccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAccessContinuation) in
            updateAccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the file transfer protocol-enabled server's properties after that server has been created. The UpdateServer call returns the ServerId of the server you updated.
    func updateServer(input: UpdateServerInput) async throws -> UpdateServerOutputResponse
    {
        typealias updateServerContinuation = CheckedContinuation<UpdateServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateServerContinuation) in
            updateServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Assigns new properties to a user. Parameters you pass modify any or all of the following: the home directory, role, and policy for the UserName and ServerId you specify. The response returns the ServerId and the UserName for the updated user.
    func updateUser(input: UpdateUserInput) async throws -> UpdateUserOutputResponse
    {
        typealias updateUserContinuation = CheckedContinuation<UpdateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserContinuation) in
            updateUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
