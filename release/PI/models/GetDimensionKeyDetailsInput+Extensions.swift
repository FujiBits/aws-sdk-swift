// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetDimensionKeyDetailsInputHeadersMiddleware: Middleware {
    public let id: String = "GetDimensionKeyDetailsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDimensionKeyDetailsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDimensionKeyDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDimensionKeyDetailsInput>
    public typealias MOutput = OperationOutput<GetDimensionKeyDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDimensionKeyDetailsOutputError>
}

public struct GetDimensionKeyDetailsInputQueryItemMiddleware: Middleware {
    public let id: String = "GetDimensionKeyDetailsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDimensionKeyDetailsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDimensionKeyDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDimensionKeyDetailsInput>
    public typealias MOutput = OperationOutput<GetDimensionKeyDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDimensionKeyDetailsOutputError>
}

public struct GetDimensionKeyDetailsInputBodyMiddleware: Middleware {
    public let id: String = "GetDimensionKeyDetailsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDimensionKeyDetailsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDimensionKeyDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDimensionKeyDetailsInput>
    public typealias MOutput = OperationOutput<GetDimensionKeyDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDimensionKeyDetailsOutputError>
}

extension GetDimensionKeyDetailsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case group = "Group"
        case groupIdentifier = "GroupIdentifier"
        case identifier = "Identifier"
        case requestedDimensions = "RequestedDimensions"
        case serviceType = "ServiceType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let group = group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let groupIdentifier = groupIdentifier {
            try encodeContainer.encode(groupIdentifier, forKey: .groupIdentifier)
        }
        if let identifier = identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if let requestedDimensions = requestedDimensions {
            var requestedDimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requestedDimensions)
            for requesteddimensionlist0 in requestedDimensions {
                try requestedDimensionsContainer.encode(requesteddimensionlist0)
            }
        }
        if let serviceType = serviceType {
            try encodeContainer.encode(serviceType.rawValue, forKey: .serviceType)
        }
    }
}
