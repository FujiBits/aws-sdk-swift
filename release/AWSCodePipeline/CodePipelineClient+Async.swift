// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension CodePipelineClient {
    /// Returns information about a specified job and whether that job has been received by
    ///             the job worker. Used for custom actions only.
    func acknowledgeJob(input: AcknowledgeJobInput) async throws -> AcknowledgeJobOutputResponse
    {
        typealias acknowledgeJobContinuation = CheckedContinuation<AcknowledgeJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acknowledgeJobContinuation) in
            acknowledgeJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Confirms a job worker has received the specified job. Used for partner actions
    ///             only.
    func acknowledgeThirdPartyJob(input: AcknowledgeThirdPartyJobInput) async throws -> AcknowledgeThirdPartyJobOutputResponse
    {
        typealias acknowledgeThirdPartyJobContinuation = CheckedContinuation<AcknowledgeThirdPartyJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acknowledgeThirdPartyJobContinuation) in
            acknowledgeThirdPartyJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new custom action that can be used in all pipelines associated with the
    ///             AWS account. Only used for custom actions.
    func createCustomActionType(input: CreateCustomActionTypeInput) async throws -> CreateCustomActionTypeOutputResponse
    {
        typealias createCustomActionTypeContinuation = CheckedContinuation<CreateCustomActionTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCustomActionTypeContinuation) in
            createCustomActionType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a pipeline.
    ///
    ///             In the pipeline structure, you must include either artifactStore
    ///                 or artifactStores in your pipeline, but you cannot use both. If you
    ///                 create a cross-region action in your pipeline, you must use
    ///                     artifactStores.
    ///
    func createPipeline(input: CreatePipelineInput) async throws -> CreatePipelineOutputResponse
    {
        typealias createPipelineContinuation = CheckedContinuation<CreatePipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPipelineContinuation) in
            createPipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Marks a custom action as deleted. PollForJobs for the custom action
    ///             fails after the action is marked for deletion. Used for custom actions only.
    ///
    ///             To re-create a custom action after it has been deleted you must use a string in
    ///                 the version field that has never been used before. This string can be an incremented
    ///                 version number, for example. To restore a deleted custom action, use a JSON file
    ///                 that is identical to the deleted action, including the original string in the
    ///                 version field.
    ///
    func deleteCustomActionType(input: DeleteCustomActionTypeInput) async throws -> DeleteCustomActionTypeOutputResponse
    {
        typealias deleteCustomActionTypeContinuation = CheckedContinuation<DeleteCustomActionTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCustomActionTypeContinuation) in
            deleteCustomActionType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified pipeline.
    func deletePipeline(input: DeletePipelineInput) async throws -> DeletePipelineOutputResponse
    {
        typealias deletePipelineContinuation = CheckedContinuation<DeletePipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePipelineContinuation) in
            deletePipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a previously created webhook by name. Deleting the webhook stops AWS
    ///             CodePipeline from starting a pipeline every time an external event occurs. The API
    ///             returns successfully when trying to delete a webhook that is already deleted. If a
    ///             deleted webhook is re-created by calling PutWebhook with the same name, it will have a
    ///             different URL.
    func deleteWebhook(input: DeleteWebhookInput) async throws -> DeleteWebhookOutputResponse
    {
        typealias deleteWebhookContinuation = CheckedContinuation<DeleteWebhookOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWebhookContinuation) in
            deleteWebhook(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the connection between the webhook that was created by CodePipeline and the
    ///             external tool with events to be detected. Currently supported only for webhooks that
    ///             target an action type of GitHub.
    func deregisterWebhookWithThirdParty(input: DeregisterWebhookWithThirdPartyInput) async throws -> DeregisterWebhookWithThirdPartyOutputResponse
    {
        typealias deregisterWebhookWithThirdPartyContinuation = CheckedContinuation<DeregisterWebhookWithThirdPartyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterWebhookWithThirdPartyContinuation) in
            deregisterWebhookWithThirdParty(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Prevents artifacts in a pipeline from transitioning to the next stage in the
    ///             pipeline.
    func disableStageTransition(input: DisableStageTransitionInput) async throws -> DisableStageTransitionOutputResponse
    {
        typealias disableStageTransitionContinuation = CheckedContinuation<DisableStageTransitionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableStageTransitionContinuation) in
            disableStageTransition(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables artifacts in a pipeline to transition to a stage in a pipeline.
    func enableStageTransition(input: EnableStageTransitionInput) async throws -> EnableStageTransitionOutputResponse
    {
        typealias enableStageTransitionContinuation = CheckedContinuation<EnableStageTransitionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableStageTransitionContinuation) in
            enableStageTransition(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about an action type created for an external provider, where the
    ///             action is to be used by customers of the external provider. The action can be created
    ///             with any supported integration model.
    func getActionType(input: GetActionTypeInput) async throws -> GetActionTypeOutputResponse
    {
        typealias getActionTypeContinuation = CheckedContinuation<GetActionTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getActionTypeContinuation) in
            getActionType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a job. Used for custom actions only.
    ///
    ///             When this API is called, AWS CodePipeline returns temporary credentials for the
    ///                 S3 bucket used to store artifacts for the pipeline, if the action requires access to
    ///                 that S3 bucket for input or output artifacts. This API also returns any secret
    ///                 values defined for the action.
    ///
    func getJobDetails(input: GetJobDetailsInput) async throws -> GetJobDetailsOutputResponse
    {
        typealias getJobDetailsContinuation = CheckedContinuation<GetJobDetailsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getJobDetailsContinuation) in
            getJobDetails(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the metadata, structure, stages, and actions of a pipeline. Can be used to
    ///             return the entire structure of a pipeline in JSON format, which can then be modified and
    ///             used to update the pipeline structure with UpdatePipeline.
    func getPipeline(input: GetPipelineInput) async throws -> GetPipelineOutputResponse
    {
        typealias getPipelineContinuation = CheckedContinuation<GetPipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPipelineContinuation) in
            getPipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about an execution of a pipeline, including details about
    ///             artifacts, the pipeline execution ID, and the name, version, and status of the
    ///             pipeline.
    func getPipelineExecution(input: GetPipelineExecutionInput) async throws -> GetPipelineExecutionOutputResponse
    {
        typealias getPipelineExecutionContinuation = CheckedContinuation<GetPipelineExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPipelineExecutionContinuation) in
            getPipelineExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the state of a pipeline, including the stages and
    ///             actions.
    ///
    ///             Values returned in the revisionId and revisionUrl
    ///                 fields indicate the source revision information, such as the commit ID, for the
    ///                 current state.
    ///
    func getPipelineState(input: GetPipelineStateInput) async throws -> GetPipelineStateOutputResponse
    {
        typealias getPipelineStateContinuation = CheckedContinuation<GetPipelineStateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPipelineStateContinuation) in
            getPipelineState(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Requests the details of a job for a third party action. Used for partner actions
    ///             only.
    ///
    ///             When this API is called, AWS CodePipeline returns temporary credentials for the
    ///                 S3 bucket used to store artifacts for the pipeline, if the action requires access to
    ///                 that S3 bucket for input or output artifacts. This API also returns any secret
    ///                 values defined for the action.
    ///
    func getThirdPartyJobDetails(input: GetThirdPartyJobDetailsInput) async throws -> GetThirdPartyJobDetailsOutputResponse
    {
        typealias getThirdPartyJobDetailsContinuation = CheckedContinuation<GetThirdPartyJobDetailsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getThirdPartyJobDetailsContinuation) in
            getThirdPartyJobDetails(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the action executions that have occurred in a pipeline.
    func listActionExecutions(input: ListActionExecutionsInput) async throws -> ListActionExecutionsOutputResponse
    {
        typealias listActionExecutionsContinuation = CheckedContinuation<ListActionExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listActionExecutionsContinuation) in
            listActionExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a summary of all AWS CodePipeline action types associated with your
    ///             account.
    func listActionTypes(input: ListActionTypesInput) async throws -> ListActionTypesOutputResponse
    {
        typealias listActionTypesContinuation = CheckedContinuation<ListActionTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listActionTypesContinuation) in
            listActionTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a summary of the most recent executions for a pipeline.
    func listPipelineExecutions(input: ListPipelineExecutionsInput) async throws -> ListPipelineExecutionsOutputResponse
    {
        typealias listPipelineExecutionsContinuation = CheckedContinuation<ListPipelineExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPipelineExecutionsContinuation) in
            listPipelineExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a summary of all of the pipelines associated with your account.
    func listPipelines(input: ListPipelinesInput) async throws -> ListPipelinesOutputResponse
    {
        typealias listPipelinesContinuation = CheckedContinuation<ListPipelinesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPipelinesContinuation) in
            listPipelines(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the set of key-value pairs (metadata) that are used to manage the
    ///             resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a listing of all the webhooks in this AWS Region for this account. The output
    ///             lists all webhooks and includes the webhook URL and ARN and the configuration for each
    ///             webhook.
    func listWebhooks(input: ListWebhooksInput) async throws -> ListWebhooksOutputResponse
    {
        typealias listWebhooksContinuation = CheckedContinuation<ListWebhooksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWebhooksContinuation) in
            listWebhooks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about any jobs for AWS CodePipeline to act on.
    ///                 PollForJobs is valid only for action types with "Custom" in the owner
    ///             field. If the action type contains "AWS" or "ThirdParty" in the owner field, the
    ///                 PollForJobs action returns an error.
    ///
    ///             When this API is called, AWS CodePipeline returns temporary credentials for the
    ///                 S3 bucket used to store artifacts for the pipeline, if the action requires access to
    ///                 that S3 bucket for input or output artifacts. This API also returns any secret
    ///                 values defined for the action.
    ///
    func pollForJobs(input: PollForJobsInput) async throws -> PollForJobsOutputResponse
    {
        typealias pollForJobsContinuation = CheckedContinuation<PollForJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: pollForJobsContinuation) in
            pollForJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Determines whether there are any third party jobs for a job worker to act on. Used
    ///             for partner actions only.
    ///
    ///             When this API is called, AWS CodePipeline returns temporary credentials for the
    ///                 S3 bucket used to store artifacts for the pipeline, if the action requires access to
    ///                 that S3 bucket for input or output artifacts.
    ///
    func pollForThirdPartyJobs(input: PollForThirdPartyJobsInput) async throws -> PollForThirdPartyJobsOutputResponse
    {
        typealias pollForThirdPartyJobsContinuation = CheckedContinuation<PollForThirdPartyJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: pollForThirdPartyJobsContinuation) in
            pollForThirdPartyJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides information to AWS CodePipeline about new revisions to a source.
    func putActionRevision(input: PutActionRevisionInput) async throws -> PutActionRevisionOutputResponse
    {
        typealias putActionRevisionContinuation = CheckedContinuation<PutActionRevisionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putActionRevisionContinuation) in
            putActionRevision(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides the response to a manual approval request to AWS CodePipeline. Valid
    ///             responses include Approved and Rejected.
    func putApprovalResult(input: PutApprovalResultInput) async throws -> PutApprovalResultOutputResponse
    {
        typealias putApprovalResultContinuation = CheckedContinuation<PutApprovalResultOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putApprovalResultContinuation) in
            putApprovalResult(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Represents the failure of a job as returned to the pipeline by a job worker. Used
    ///             for custom actions only.
    func putJobFailureResult(input: PutJobFailureResultInput) async throws -> PutJobFailureResultOutputResponse
    {
        typealias putJobFailureResultContinuation = CheckedContinuation<PutJobFailureResultOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putJobFailureResultContinuation) in
            putJobFailureResult(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Represents the success of a job as returned to the pipeline by a job worker. Used
    ///             for custom actions only.
    func putJobSuccessResult(input: PutJobSuccessResultInput) async throws -> PutJobSuccessResultOutputResponse
    {
        typealias putJobSuccessResultContinuation = CheckedContinuation<PutJobSuccessResultOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putJobSuccessResultContinuation) in
            putJobSuccessResult(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Represents the failure of a third party job as returned to the pipeline by a job
    ///             worker. Used for partner actions only.
    func putThirdPartyJobFailureResult(input: PutThirdPartyJobFailureResultInput) async throws -> PutThirdPartyJobFailureResultOutputResponse
    {
        typealias putThirdPartyJobFailureResultContinuation = CheckedContinuation<PutThirdPartyJobFailureResultOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putThirdPartyJobFailureResultContinuation) in
            putThirdPartyJobFailureResult(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Represents the success of a third party job as returned to the pipeline by a job
    ///             worker. Used for partner actions only.
    func putThirdPartyJobSuccessResult(input: PutThirdPartyJobSuccessResultInput) async throws -> PutThirdPartyJobSuccessResultOutputResponse
    {
        typealias putThirdPartyJobSuccessResultContinuation = CheckedContinuation<PutThirdPartyJobSuccessResultOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putThirdPartyJobSuccessResultContinuation) in
            putThirdPartyJobSuccessResult(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Defines a webhook and returns a unique webhook URL generated by CodePipeline. This
    ///             URL can be supplied to third party source hosting providers to call every time there's a
    ///             code change. When CodePipeline receives a POST request on this URL, the pipeline defined
    ///             in the webhook is started as long as the POST request satisfied the authentication and
    ///             filtering requirements supplied when defining the webhook. RegisterWebhookWithThirdParty
    ///             and DeregisterWebhookWithThirdParty APIs can be used to automatically configure
    ///             supported third parties to call the generated webhook URL.
    func putWebhook(input: PutWebhookInput) async throws -> PutWebhookOutputResponse
    {
        typealias putWebhookContinuation = CheckedContinuation<PutWebhookOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putWebhookContinuation) in
            putWebhook(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Configures a connection between the webhook that was created and the external tool
    ///             with events to be detected.
    func registerWebhookWithThirdParty(input: RegisterWebhookWithThirdPartyInput) async throws -> RegisterWebhookWithThirdPartyOutputResponse
    {
        typealias registerWebhookWithThirdPartyContinuation = CheckedContinuation<RegisterWebhookWithThirdPartyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerWebhookWithThirdPartyContinuation) in
            registerWebhookWithThirdParty(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Resumes the pipeline execution by retrying the last failed actions in a stage. You
    ///             can retry a stage immediately if any of the actions in the stage fail. When you retry,
    ///             all actions that are still in progress continue working, and failed actions are
    ///             triggered again.
    func retryStageExecution(input: RetryStageExecutionInput) async throws -> RetryStageExecutionOutputResponse
    {
        typealias retryStageExecutionContinuation = CheckedContinuation<RetryStageExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: retryStageExecutionContinuation) in
            retryStageExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts the specified pipeline. Specifically, it begins processing the latest commit
    ///             to the source location specified as part of the pipeline.
    func startPipelineExecution(input: StartPipelineExecutionInput) async throws -> StartPipelineExecutionOutputResponse
    {
        typealias startPipelineExecutionContinuation = CheckedContinuation<StartPipelineExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startPipelineExecutionContinuation) in
            startPipelineExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops the specified pipeline execution. You choose to either stop the pipeline
    ///             execution by completing in-progress actions without starting subsequent actions, or by
    ///             abandoning in-progress actions. While completing or abandoning in-progress actions, the
    ///             pipeline execution is in a Stopping state. After all in-progress actions
    ///             are completed or abandoned, the pipeline execution is in a Stopped
    ///             state.
    func stopPipelineExecution(input: StopPipelineExecutionInput) async throws -> StopPipelineExecutionOutputResponse
    {
        typealias stopPipelineExecutionContinuation = CheckedContinuation<StopPipelineExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopPipelineExecutionContinuation) in
            stopPipelineExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds to or modifies the tags of the given resource. Tags are metadata that can be used
    ///             to manage a resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes tags from an AWS resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an action type that was created with any supported integration model, where
    ///             the action type is to be used by customers of the action type provider. Use a JSON file
    ///             with the action definition and UpdateActionType to provide the full
    ///             structure.
    func updateActionType(input: UpdateActionTypeInput) async throws -> UpdateActionTypeOutputResponse
    {
        typealias updateActionTypeContinuation = CheckedContinuation<UpdateActionTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateActionTypeContinuation) in
            updateActionType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a specified pipeline with edits or changes to its structure. Use a JSON
    ///             file with the pipeline structure and UpdatePipeline to provide the full
    ///             structure of the pipeline. Updating the pipeline increases the version number of the
    ///             pipeline by 1.
    func updatePipeline(input: UpdatePipelineInput) async throws -> UpdatePipelineOutputResponse
    {
        typealias updatePipelineContinuation = CheckedContinuation<UpdatePipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePipelineContinuation) in
            updatePipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
