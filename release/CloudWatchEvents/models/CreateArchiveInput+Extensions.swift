// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateArchiveInputHeadersMiddleware: Middleware {
    public let id: String = "CreateArchiveInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateArchiveInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateArchiveOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateArchiveInput>
    public typealias MOutput = OperationOutput<CreateArchiveOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateArchiveOutputError>
}

public struct CreateArchiveInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateArchiveInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateArchiveInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateArchiveOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateArchiveInput>
    public typealias MOutput = OperationOutput<CreateArchiveOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateArchiveOutputError>
}

public struct CreateArchiveInputBodyMiddleware: Middleware {
    public let id: String = "CreateArchiveInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateArchiveInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateArchiveOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateArchiveInput>
    public typealias MOutput = OperationOutput<CreateArchiveOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateArchiveOutputError>
}

extension CreateArchiveInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case archiveName = "ArchiveName"
        case description = "Description"
        case eventPattern = "EventPattern"
        case eventSourceArn = "EventSourceArn"
        case retentionDays = "RetentionDays"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archiveName = archiveName {
            try encodeContainer.encode(archiveName, forKey: .archiveName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eventPattern = eventPattern {
            try encodeContainer.encode(eventPattern, forKey: .eventPattern)
        }
        if let eventSourceArn = eventSourceArn {
            try encodeContainer.encode(eventSourceArn, forKey: .eventSourceArn)
        }
        if let retentionDays = retentionDays {
            try encodeContainer.encode(retentionDays, forKey: .retentionDays)
        }
    }
}
