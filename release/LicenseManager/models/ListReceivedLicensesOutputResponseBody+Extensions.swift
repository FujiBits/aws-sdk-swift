// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListReceivedLicensesOutputResponseBody: Equatable {
    public let licenses: [GrantedLicense]?
    public let nextToken: String?
}

extension ListReceivedLicensesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case licenses = "Licenses"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licensesContainer = try containerValues.decodeIfPresent([GrantedLicense?].self, forKey: .licenses)
        var licensesDecoded0:[GrantedLicense]? = nil
        if let licensesContainer = licensesContainer {
            licensesDecoded0 = [GrantedLicense]()
            for structure0 in licensesContainer {
                if let structure0 = structure0 {
                    licensesDecoded0?.append(structure0)
                }
            }
        }
        licenses = licensesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
