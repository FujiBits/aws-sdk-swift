// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CheckoutLicenseInputHeadersMiddleware: Middleware {
    public let id: String = "CheckoutLicenseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CheckoutLicenseInput>,
                  next: H) -> Swift.Result<OperationOutput<CheckoutLicenseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CheckoutLicenseInput>
    public typealias MOutput = OperationOutput<CheckoutLicenseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CheckoutLicenseOutputError>
}

public struct CheckoutLicenseInputQueryItemMiddleware: Middleware {
    public let id: String = "CheckoutLicenseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CheckoutLicenseInput>,
                  next: H) -> Swift.Result<OperationOutput<CheckoutLicenseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CheckoutLicenseInput>
    public typealias MOutput = OperationOutput<CheckoutLicenseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CheckoutLicenseOutputError>
}

public struct CheckoutLicenseInputBodyMiddleware: Middleware {
    public let id: String = "CheckoutLicenseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CheckoutLicenseInput>,
                  next: H) -> Swift.Result<OperationOutput<CheckoutLicenseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CheckoutLicenseInput>
    public typealias MOutput = OperationOutput<CheckoutLicenseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CheckoutLicenseOutputError>
}

extension CheckoutLicenseInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case beneficiary = "Beneficiary"
        case checkoutType = "CheckoutType"
        case clientToken = "ClientToken"
        case entitlements = "Entitlements"
        case keyFingerprint = "KeyFingerprint"
        case nodeId = "NodeId"
        case productSKU = "ProductSKU"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let beneficiary = beneficiary {
            try encodeContainer.encode(beneficiary, forKey: .beneficiary)
        }
        if let checkoutType = checkoutType {
            try encodeContainer.encode(checkoutType.rawValue, forKey: .checkoutType)
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let entitlements = entitlements {
            var entitlementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entitlements)
            for entitlementdatalist0 in entitlements {
                try entitlementsContainer.encode(entitlementdatalist0)
            }
        }
        if let keyFingerprint = keyFingerprint {
            try encodeContainer.encode(keyFingerprint, forKey: .keyFingerprint)
        }
        if let nodeId = nodeId {
            try encodeContainer.encode(nodeId, forKey: .nodeId)
        }
        if let productSKU = productSKU {
            try encodeContainer.encode(productSKU, forKey: .productSKU)
        }
    }
}
