// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CheckoutBorrowLicenseInputHeadersMiddleware: Middleware {
    public let id: String = "CheckoutBorrowLicenseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CheckoutBorrowLicenseInput>,
                  next: H) -> Swift.Result<OperationOutput<CheckoutBorrowLicenseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CheckoutBorrowLicenseInput>
    public typealias MOutput = OperationOutput<CheckoutBorrowLicenseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CheckoutBorrowLicenseOutputError>
}

public struct CheckoutBorrowLicenseInputQueryItemMiddleware: Middleware {
    public let id: String = "CheckoutBorrowLicenseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CheckoutBorrowLicenseInput>,
                  next: H) -> Swift.Result<OperationOutput<CheckoutBorrowLicenseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CheckoutBorrowLicenseInput>
    public typealias MOutput = OperationOutput<CheckoutBorrowLicenseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CheckoutBorrowLicenseOutputError>
}

public struct CheckoutBorrowLicenseInputBodyMiddleware: Middleware {
    public let id: String = "CheckoutBorrowLicenseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CheckoutBorrowLicenseInput>,
                  next: H) -> Swift.Result<OperationOutput<CheckoutBorrowLicenseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CheckoutBorrowLicenseInput>
    public typealias MOutput = OperationOutput<CheckoutBorrowLicenseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CheckoutBorrowLicenseOutputError>
}

extension CheckoutBorrowLicenseInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case checkoutMetadata = "CheckoutMetadata"
        case clientToken = "ClientToken"
        case digitalSignatureMethod = "DigitalSignatureMethod"
        case entitlements = "Entitlements"
        case licenseArn = "LicenseArn"
        case nodeId = "NodeId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkoutMetadata = checkoutMetadata {
            var checkoutMetadataContainer = encodeContainer.nestedUnkeyedContainer(forKey: .checkoutMetadata)
            for metadatalist0 in checkoutMetadata {
                try checkoutMetadataContainer.encode(metadatalist0)
            }
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let digitalSignatureMethod = digitalSignatureMethod {
            try encodeContainer.encode(digitalSignatureMethod.rawValue, forKey: .digitalSignatureMethod)
        }
        if let entitlements = entitlements {
            var entitlementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entitlements)
            for entitlementdatalist0 in entitlements {
                try entitlementsContainer.encode(entitlementdatalist0)
            }
        }
        if let licenseArn = licenseArn {
            try encodeContainer.encode(licenseArn, forKey: .licenseArn)
        }
        if let nodeId = nodeId {
            try encodeContainer.encode(nodeId, forKey: .nodeId)
        }
    }
}
