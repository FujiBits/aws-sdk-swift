// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateGrantVersionInputHeadersMiddleware: Middleware {
    public let id: String = "CreateGrantVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGrantVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGrantVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGrantVersionInput>
    public typealias MOutput = OperationOutput<CreateGrantVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGrantVersionOutputError>
}

public struct CreateGrantVersionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateGrantVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGrantVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGrantVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGrantVersionInput>
    public typealias MOutput = OperationOutput<CreateGrantVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGrantVersionOutputError>
}

public struct CreateGrantVersionInputBodyMiddleware: Middleware {
    public let id: String = "CreateGrantVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGrantVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGrantVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGrantVersionInput>
    public typealias MOutput = OperationOutput<CreateGrantVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGrantVersionOutputError>
}

extension CreateGrantVersionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedOperations = "AllowedOperations"
        case clientToken = "ClientToken"
        case grantArn = "GrantArn"
        case grantName = "GrantName"
        case sourceVersion = "SourceVersion"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedOperations = allowedOperations {
            var allowedOperationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedOperations)
            for allowedoperationlist0 in allowedOperations {
                try allowedOperationsContainer.encode(allowedoperationlist0.rawValue)
            }
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let grantArn = grantArn {
            try encodeContainer.encode(grantArn, forKey: .grantArn)
        }
        if let grantName = grantName {
            try encodeContainer.encode(grantName, forKey: .grantName)
        }
        if let sourceVersion = sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}
