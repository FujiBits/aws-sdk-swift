// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTokensOutputResponseBody: Equatable {
    public let tokens: [TokenData]?
    public let nextToken: String?
}

extension ListTokensOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case tokens = "Tokens"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokensContainer = try containerValues.decodeIfPresent([TokenData?].self, forKey: .tokens)
        var tokensDecoded0:[TokenData]? = nil
        if let tokensContainer = tokensContainer {
            tokensDecoded0 = [TokenData]()
            for structure0 in tokensContainer {
                if let structure0 = structure0 {
                    tokensDecoded0?.append(structure0)
                }
            }
        }
        tokens = tokensDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
