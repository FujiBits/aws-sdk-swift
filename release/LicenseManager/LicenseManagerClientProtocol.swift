// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname> AWS License Manager </fullname>
///          AWS License Manager makes it easier to manage licenses from software vendors across multiple
///          AWS accounts and on-premises servers.
public protocol LicenseManagerClientProtocol {
    /// Accepts the specified grant.
    func acceptGrant(input: AcceptGrantInput, completion: @escaping (ClientRuntime.SdkResult<AcceptGrantOutputResponse, AcceptGrantOutputError>) -> Void)
    /// Checks in the specified license. Check in a license when it is no longer in use.
    func checkInLicense(input: CheckInLicenseInput, completion: @escaping (ClientRuntime.SdkResult<CheckInLicenseOutputResponse, CheckInLicenseOutputError>) -> Void)
    /// Checks out the specified license for offline use.
    func checkoutBorrowLicense(input: CheckoutBorrowLicenseInput, completion: @escaping (ClientRuntime.SdkResult<CheckoutBorrowLicenseOutputResponse, CheckoutBorrowLicenseOutputError>) -> Void)
    /// Checks out the specified license.
    func checkoutLicense(input: CheckoutLicenseInput, completion: @escaping (ClientRuntime.SdkResult<CheckoutLicenseOutputResponse, CheckoutLicenseOutputError>) -> Void)
    /// Creates a grant for the specified license. A grant shares the use of license entitlements with specific AWS accounts.
    func createGrant(input: CreateGrantInput, completion: @escaping (ClientRuntime.SdkResult<CreateGrantOutputResponse, CreateGrantOutputError>) -> Void)
    /// Creates a new version of the specified grant.
    func createGrantVersion(input: CreateGrantVersionInput, completion: @escaping (ClientRuntime.SdkResult<CreateGrantVersionOutputResponse, CreateGrantVersionOutputError>) -> Void)
    /// Creates a license.
    func createLicense(input: CreateLicenseInput, completion: @escaping (ClientRuntime.SdkResult<CreateLicenseOutputResponse, CreateLicenseOutputError>) -> Void)
    /// Creates a license configuration.
    ///          A license configuration is an abstraction of a customer license agreement that can be
    ///          consumed and enforced by License Manager. Components include specifications for the license
    ///          type (licensing by instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy,
    ///          Dedicated Instance, Dedicated Host, or all of these), license affinity  to host (how long a
    ///          license must be associated with a host), and the number of licenses purchased and used.
    func createLicenseConfiguration(input: CreateLicenseConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<CreateLicenseConfigurationOutputResponse, CreateLicenseConfigurationOutputError>) -> Void)
    /// Creates a new report generator.
    func createLicenseManagerReportGenerator(input: CreateLicenseManagerReportGeneratorInput, completion: @escaping (ClientRuntime.SdkResult<CreateLicenseManagerReportGeneratorOutputResponse, CreateLicenseManagerReportGeneratorOutputError>) -> Void)
    /// Creates a new version of the specified license.
    func createLicenseVersion(input: CreateLicenseVersionInput, completion: @escaping (ClientRuntime.SdkResult<CreateLicenseVersionOutputResponse, CreateLicenseVersionOutputError>) -> Void)
    /// Creates a long-lived token.
    ///          A refresh token is a JWT token used to get an access token. With an access token,
    ///           you can call AssumeRoleWithWebIdentity to get role credentials that you can use to
    ///           call License Manager to manage the specified license.
    func createToken(input: CreateTokenInput, completion: @escaping (ClientRuntime.SdkResult<CreateTokenOutputResponse, CreateTokenOutputError>) -> Void)
    /// Deletes the specified grant.
    func deleteGrant(input: DeleteGrantInput, completion: @escaping (ClientRuntime.SdkResult<DeleteGrantOutputResponse, DeleteGrantOutputError>) -> Void)
    /// Deletes the specified license.
    func deleteLicense(input: DeleteLicenseInput, completion: @escaping (ClientRuntime.SdkResult<DeleteLicenseOutputResponse, DeleteLicenseOutputError>) -> Void)
    /// Deletes the specified license configuration.
    ///          You cannot delete a license configuration that is in use.
    func deleteLicenseConfiguration(input: DeleteLicenseConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<DeleteLicenseConfigurationOutputResponse, DeleteLicenseConfigurationOutputError>) -> Void)
    /// Delete an existing report generator.
    ///          This action deletes the report generator, which stops it from generating future reports and cannot be reversed. However, the previous reports from this generator will remain in your S3 bucket.
    func deleteLicenseManagerReportGenerator(input: DeleteLicenseManagerReportGeneratorInput, completion: @escaping (ClientRuntime.SdkResult<DeleteLicenseManagerReportGeneratorOutputResponse, DeleteLicenseManagerReportGeneratorOutputError>) -> Void)
    /// Deletes the specified token. Must be called in the license home Region.
    func deleteToken(input: DeleteTokenInput, completion: @escaping (ClientRuntime.SdkResult<DeleteTokenOutputResponse, DeleteTokenOutputError>) -> Void)
    /// Extends the expiration date for license consumption.
    func extendLicenseConsumption(input: ExtendLicenseConsumptionInput, completion: @escaping (ClientRuntime.SdkResult<ExtendLicenseConsumptionOutputResponse, ExtendLicenseConsumptionOutputError>) -> Void)
    /// Gets a temporary access token to use with AssumeRoleWithWebIdentity. Access tokens
    ///           are valid for one hour.
    func getAccessToken(input: GetAccessTokenInput, completion: @escaping (ClientRuntime.SdkResult<GetAccessTokenOutputResponse, GetAccessTokenOutputError>) -> Void)
    /// Gets detailed information about the specified grant.
    func getGrant(input: GetGrantInput, completion: @escaping (ClientRuntime.SdkResult<GetGrantOutputResponse, GetGrantOutputError>) -> Void)
    /// Gets detailed information about the specified license.
    func getLicense(input: GetLicenseInput, completion: @escaping (ClientRuntime.SdkResult<GetLicenseOutputResponse, GetLicenseOutputError>) -> Void)
    /// Gets detailed information about the specified license configuration.
    func getLicenseConfiguration(input: GetLicenseConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<GetLicenseConfigurationOutputResponse, GetLicenseConfigurationOutputError>) -> Void)
    /// Gets information on the specified report generator.
    func getLicenseManagerReportGenerator(input: GetLicenseManagerReportGeneratorInput, completion: @escaping (ClientRuntime.SdkResult<GetLicenseManagerReportGeneratorOutputResponse, GetLicenseManagerReportGeneratorOutputError>) -> Void)
    /// Gets detailed information about the usage of the specified license.
    func getLicenseUsage(input: GetLicenseUsageInput, completion: @escaping (ClientRuntime.SdkResult<GetLicenseUsageOutputResponse, GetLicenseUsageOutputError>) -> Void)
    /// Gets the License Manager settings for the current Region.
    func getServiceSettings(input: GetServiceSettingsInput, completion: @escaping (ClientRuntime.SdkResult<GetServiceSettingsOutputResponse, GetServiceSettingsOutputError>) -> Void)
    /// Lists the resource associations for the specified license configuration.
    ///          Resource associations need not consume licenses from a license configuration.
    ///          For example, an AMI or a stopped instance might not consume a license (depending on
    ///          the license rules).
    func listAssociationsForLicenseConfiguration(input: ListAssociationsForLicenseConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<ListAssociationsForLicenseConfigurationOutputResponse, ListAssociationsForLicenseConfigurationOutputError>) -> Void)
    /// Lists the grants distributed for the specified license.
    func listDistributedGrants(input: ListDistributedGrantsInput, completion: @escaping (ClientRuntime.SdkResult<ListDistributedGrantsOutputResponse, ListDistributedGrantsOutputError>) -> Void)
    /// Lists the license configuration operations that failed.
    func listFailuresForLicenseConfigurationOperations(input: ListFailuresForLicenseConfigurationOperationsInput, completion: @escaping (ClientRuntime.SdkResult<ListFailuresForLicenseConfigurationOperationsOutputResponse, ListFailuresForLicenseConfigurationOperationsOutputError>) -> Void)
    /// Lists the license configurations for your account.
    func listLicenseConfigurations(input: ListLicenseConfigurationsInput, completion: @escaping (ClientRuntime.SdkResult<ListLicenseConfigurationsOutputResponse, ListLicenseConfigurationsOutputError>) -> Void)
    /// Lists the report generators for your account.
    func listLicenseManagerReportGenerators(input: ListLicenseManagerReportGeneratorsInput, completion: @escaping (ClientRuntime.SdkResult<ListLicenseManagerReportGeneratorsOutputResponse, ListLicenseManagerReportGeneratorsOutputError>) -> Void)
    /// Lists the licenses for your account.
    func listLicenses(input: ListLicensesInput, completion: @escaping (ClientRuntime.SdkResult<ListLicensesOutputResponse, ListLicensesOutputError>) -> Void)
    /// Describes the license configurations for the specified resource.
    func listLicenseSpecificationsForResource(input: ListLicenseSpecificationsForResourceInput, completion: @escaping (ClientRuntime.SdkResult<ListLicenseSpecificationsForResourceOutputResponse, ListLicenseSpecificationsForResourceOutputError>) -> Void)
    /// Lists all versions of the specified license.
    func listLicenseVersions(input: ListLicenseVersionsInput, completion: @escaping (ClientRuntime.SdkResult<ListLicenseVersionsOutputResponse, ListLicenseVersionsOutputError>) -> Void)
    /// Lists grants that are received but not accepted.
    func listReceivedGrants(input: ListReceivedGrantsInput, completion: @escaping (ClientRuntime.SdkResult<ListReceivedGrantsOutputResponse, ListReceivedGrantsOutputError>) -> Void)
    /// Lists received licenses.
    func listReceivedLicenses(input: ListReceivedLicensesInput, completion: @escaping (ClientRuntime.SdkResult<ListReceivedLicensesOutputResponse, ListReceivedLicensesOutputError>) -> Void)
    /// Lists resources managed using Systems Manager inventory.
    func listResourceInventory(input: ListResourceInventoryInput, completion: @escaping (ClientRuntime.SdkResult<ListResourceInventoryOutputResponse, ListResourceInventoryOutputError>) -> Void)
    /// Lists the tags for the specified license configuration.
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (ClientRuntime.SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// Lists your tokens.
    func listTokens(input: ListTokensInput, completion: @escaping (ClientRuntime.SdkResult<ListTokensOutputResponse, ListTokensOutputError>) -> Void)
    /// Lists all license usage records for a license configuration, displaying license
    ///          consumption details by resource at a selected point in time. Use this action to audit the
    ///          current license consumption for any license inventory and configuration.
    func listUsageForLicenseConfiguration(input: ListUsageForLicenseConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<ListUsageForLicenseConfigurationOutputResponse, ListUsageForLicenseConfigurationOutputError>) -> Void)
    /// Rejects the specified grant.
    func rejectGrant(input: RejectGrantInput, completion: @escaping (ClientRuntime.SdkResult<RejectGrantOutputResponse, RejectGrantOutputError>) -> Void)
    /// Adds the specified tags to the specified license configuration.
    func tagResource(input: TagResourceInput, completion: @escaping (ClientRuntime.SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// Removes the specified tags from the specified license configuration.
    func untagResource(input: UntagResourceInput, completion: @escaping (ClientRuntime.SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// Modifies the attributes of an existing license configuration.
    func updateLicenseConfiguration(input: UpdateLicenseConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<UpdateLicenseConfigurationOutputResponse, UpdateLicenseConfigurationOutputError>) -> Void)
    /// Updates a report generator.
    ///          After you make changes to a report generator, it will start generating new reports within 60 minutes of being updated.
    func updateLicenseManagerReportGenerator(input: UpdateLicenseManagerReportGeneratorInput, completion: @escaping (ClientRuntime.SdkResult<UpdateLicenseManagerReportGeneratorOutputResponse, UpdateLicenseManagerReportGeneratorOutputError>) -> Void)
    /// Adds or removes the specified license configurations for the specified AWS resource.
    ///          You can update the license specifications of AMIs, instances, and hosts.
    ///          You cannot update the license specifications for launch templates and AWS CloudFormation templates,
    ///          as they send license configurations to the operation that creates the resource.
    func updateLicenseSpecificationsForResource(input: UpdateLicenseSpecificationsForResourceInput, completion: @escaping (ClientRuntime.SdkResult<UpdateLicenseSpecificationsForResourceOutputResponse, UpdateLicenseSpecificationsForResourceOutputError>) -> Void)
    /// Updates License Manager settings for the current Region.
    func updateServiceSettings(input: UpdateServiceSettingsInput, completion: @escaping (ClientRuntime.SdkResult<UpdateServiceSettingsOutputResponse, UpdateServiceSettingsOutputError>) -> Void)
}

public enum LicenseManagerClientTypes {}
