// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension MediaStoreDataClient {
    /// Deletes an object at the specified path.
    func deleteObject(input: DeleteObjectInput) async throws -> DeleteObjectOutputResponse
    {
        typealias deleteObjectContinuation = CheckedContinuation<DeleteObjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteObjectContinuation) in
            deleteObject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the headers for an object at the specified path.
    func describeObject(input: DescribeObjectInput) async throws -> DescribeObjectOutputResponse
    {
        typealias describeObjectContinuation = CheckedContinuation<DescribeObjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeObjectContinuation) in
            describeObject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Downloads the object at the specified path. If the object’s upload availability is set to streaming, AWS Elemental MediaStore downloads the object even if it’s still uploading the object.
    func getObject(input: GetObjectInput) async throws -> GetObjectOutputResponse
    {
        typealias getObjectContinuation = CheckedContinuation<GetObjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getObjectContinuation) in
            getObject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides a list of metadata entries about folders and objects in the specified folder.
    func listItems(input: ListItemsInput) async throws -> ListItemsOutputResponse
    {
        typealias listItemsContinuation = CheckedContinuation<ListItemsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listItemsContinuation) in
            listItems(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Uploads an object to the specified path. Object sizes are limited to 25 MB for standard upload availability and 10 MB for streaming upload availability.
    func putObject(input: PutObjectInput) async throws -> PutObjectOutputResponse
    {
        typealias putObjectContinuation = CheckedContinuation<PutObjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putObjectContinuation) in
            putObject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
