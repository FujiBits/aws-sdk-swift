// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartTextTranslationJobInputHeadersMiddleware: Middleware {
    public let id: String = "StartTextTranslationJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartTextTranslationJobInput>,
                  next: H) -> Swift.Result<OperationOutput<StartTextTranslationJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartTextTranslationJobInput>
    public typealias MOutput = OperationOutput<StartTextTranslationJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartTextTranslationJobOutputError>
}

public struct StartTextTranslationJobInputQueryItemMiddleware: Middleware {
    public let id: String = "StartTextTranslationJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartTextTranslationJobInput>,
                  next: H) -> Swift.Result<OperationOutput<StartTextTranslationJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartTextTranslationJobInput>
    public typealias MOutput = OperationOutput<StartTextTranslationJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartTextTranslationJobOutputError>
}

public struct StartTextTranslationJobInputBodyMiddleware: Middleware {
    public let id: String = "StartTextTranslationJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartTextTranslationJobInput>,
                  next: H) -> Swift.Result<OperationOutput<StartTextTranslationJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartTextTranslationJobInput>
    public typealias MOutput = OperationOutput<StartTextTranslationJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartTextTranslationJobOutputError>
}

extension StartTextTranslationJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case outputDataConfig = "OutputDataConfig"
        case parallelDataNames = "ParallelDataNames"
        case sourceLanguageCode = "SourceLanguageCode"
        case targetLanguageCodes = "TargetLanguageCodes"
        case terminologyNames = "TerminologyNames"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let dataAccessRoleArn = dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let inputDataConfig = inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let outputDataConfig = outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let parallelDataNames = parallelDataNames {
            var parallelDataNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parallelDataNames)
            for resourcenamelist0 in parallelDataNames {
                try parallelDataNamesContainer.encode(resourcenamelist0)
            }
        }
        if let sourceLanguageCode = sourceLanguageCode {
            try encodeContainer.encode(sourceLanguageCode, forKey: .sourceLanguageCode)
        }
        if let targetLanguageCodes = targetLanguageCodes {
            var targetLanguageCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetLanguageCodes)
            for targetlanguagecodestringlist0 in targetLanguageCodes {
                try targetLanguageCodesContainer.encode(targetlanguagecodestringlist0)
            }
        }
        if let terminologyNames = terminologyNames {
            var terminologyNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .terminologyNames)
            for resourcenamelist0 in terminologyNames {
                try terminologyNamesContainer.encode(resourcenamelist0)
            }
        }
    }
}
