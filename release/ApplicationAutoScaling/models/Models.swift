// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension ApplicationAutoScalingClientTypes {
    public enum AdjustmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case changeincapacity
        case exactcapacity
        case percentchangeincapacity
        case sdkUnknown(Swift.String)

        public static var allCases: [AdjustmentType] {
            return [
                .changeincapacity,
                .exactcapacity,
                .percentchangeincapacity,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .changeincapacity: return "ChangeInCapacity"
            case .exactcapacity: return "ExactCapacity"
            case .percentchangeincapacity: return "PercentChangeInCapacity"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AdjustmentType(rawValue: rawValue) ?? AdjustmentType.sdkUnknown(rawValue)
        }
    }
}

extension ApplicationAutoScalingClientTypes.Alarm: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmARN = "AlarmARN"
        case alarmName = "AlarmName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmARN = alarmARN {
            try encodeContainer.encode(alarmARN, forKey: .alarmARN)
        }
        if let alarmName = alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let alarmARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmARN)
        alarmARN = alarmARNDecoded
    }
}

extension ApplicationAutoScalingClientTypes.Alarm: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Alarm(alarmARN: \(Swift.String(describing: alarmARN)), alarmName: \(Swift.String(describing: alarmName)))"}
}

extension ApplicationAutoScalingClientTypes {
    /// <p>Represents a CloudWatch alarm associated with a scaling policy.</p>
    public struct Alarm: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the alarm.</p>
        public let alarmARN: Swift.String?
        /// <p>The name of the alarm.</p>
        public let alarmName: Swift.String?

        public init (
            alarmARN: Swift.String? = nil,
            alarmName: Swift.String? = nil
        )
        {
            self.alarmARN = alarmARN
            self.alarmName = alarmName
        }
    }

}

extension ConcurrentUpdateException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConcurrentUpdateException(message: \(Swift.String(describing: message)))"}
}

extension ConcurrentUpdateException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConcurrentUpdateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Concurrent updates caused an exception, for example, if you request an update to an
///          Application Auto Scaling resource that already has a pending update.</p>
public struct ConcurrentUpdateException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentUpdateExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConcurrentUpdateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ApplicationAutoScalingClientTypes.CustomizedMetricSpecification: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case statistic = "Statistic"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for metricdimensions0 in dimensions {
                try dimensionsContainer.encode(metricdimensions0)
            }
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let namespace = namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let statistic = statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if let unit = unit {
            try encodeContainer.encode(unit, forKey: .unit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([ApplicationAutoScalingClientTypes.MetricDimension?].self, forKey: .dimensions)
        var dimensionsDecoded0:[ApplicationAutoScalingClientTypes.MetricDimension]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [ApplicationAutoScalingClientTypes.MetricDimension]()
            for structure0 in dimensionsContainer {
                if let structure0 = structure0 {
                    dimensionsDecoded0?.append(structure0)
                }
            }
        }
        dimensions = dimensionsDecoded0
        let statisticDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.MetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension ApplicationAutoScalingClientTypes.CustomizedMetricSpecification: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomizedMetricSpecification(dimensions: \(Swift.String(describing: dimensions)), metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)), statistic: \(Swift.String(describing: statistic)), unit: \(Swift.String(describing: unit)))"}
}

extension ApplicationAutoScalingClientTypes {
    /// <p>Represents a CloudWatch metric of your choosing for a target tracking scaling policy to use
    ///          with Application Auto Scaling.</p>
    ///          <p>For information about the available metrics for a service, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html">AWS
    ///             Services That Publish CloudWatch Metrics</a> in the <i>Amazon CloudWatch User
    ///             Guide</i>.</p>
    ///          <p>To create your customized metric specification:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Add values for each required parameter from CloudWatch. You can use an existing metric,
    ///                or a new metric that you create. To use your own metric, you must first publish the
    ///                metric to CloudWatch. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publish Custom
    ///                   Metrics</a> in the <i>Amazon CloudWatch User Guide</i>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Choose a metric that changes proportionally with capacity. The value of the metric
    ///                should increase or decrease in inverse proportion to the number of capacity units.
    ///                That is, the value of the metric should decrease when capacity increases, and
    ///                increase when capacity decreases. </p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information about CloudWatch, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch
    ///             Concepts</a>. </p>
    public struct CustomizedMetricSpecification: Swift.Equatable {
        /// <p>The dimensions of the metric. </p>
        ///          <p>Conditional: If you published your metric with dimensions, you must specify the same
        ///          dimensions in your scaling policy.</p>
        public let dimensions: [ApplicationAutoScalingClientTypes.MetricDimension]?
        /// <p>The name of the metric. </p>
        public let metricName: Swift.String?
        /// <p>The namespace of the metric.</p>
        public let namespace: Swift.String?
        /// <p>The statistic of the metric.</p>
        public let statistic: ApplicationAutoScalingClientTypes.MetricStatistic?
        /// <p>The unit of the metric.</p>
        public let unit: Swift.String?

        public init (
            dimensions: [ApplicationAutoScalingClientTypes.MetricDimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            statistic: ApplicationAutoScalingClientTypes.MetricStatistic? = nil,
            unit: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.statistic = statistic
            self.unit = unit
        }
    }

}

public struct DeleteScalingPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScalingPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteScalingPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteScalingPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScalingPolicyOutputError>
}

extension DeleteScalingPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteScalingPolicyInput(policyName: \(Swift.String(describing: policyName)), resourceId: \(Swift.String(describing: resourceId)), scalableDimension: \(Swift.String(describing: scalableDimension)), serviceNamespace: \(Swift.String(describing: serviceNamespace)))"}
}

extension DeleteScalingPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName = "PolicyName"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
    }
}

public struct DeleteScalingPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScalingPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteScalingPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteScalingPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScalingPolicyOutputError>
}

public struct DeleteScalingPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScalingPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteScalingPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteScalingPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScalingPolicyOutputError>
}

public struct DeleteScalingPolicyInput: Swift.Equatable {
    /// <p>The name of the scaling policy.</p>
    public let policyName: Swift.String?
    /// <p>The identifier of the resource associated with the scalable target.
    ///       This string consists of the resource type and unique identifier.</p>
    ///          <ul>
    ///             <li>
    ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
    ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
    ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
    ///                Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
    ///                Example: <code>fleet/sample-fleet</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>table/my-table</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
    ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
    ///                Example: <code>cluster:my-db-cluster</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
    ///                Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
    ///                is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
    ///                   repository</a>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
    ///                Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
    ///                Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
    ///            </li>
    ///          </ul>
    public let resourceId: Swift.String?
    /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an Amazon SageMaker model endpoint variant.</p>
    ///            </li>
    ///             <li>
    ///               <p>
    ///                   <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:WriteCapacityUnits</code> -  The provisioned write capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
    ///            </li>
    ///          </ul>
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    /// <p>The namespace of the AWS service that provides the resource. For a resource provided
    ///          by your own application or service, use <code>custom-resource</code> instead.</p>
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?

    public init (
        policyName: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension? = nil,
        serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace? = nil
    )
    {
        self.policyName = policyName
        self.resourceId = resourceId
        self.scalableDimension = scalableDimension
        self.serviceNamespace = serviceNamespace
    }
}

struct DeleteScalingPolicyInputBody: Swift.Equatable {
    public let policyName: Swift.String?
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    public let resourceId: Swift.String?
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
}

extension DeleteScalingPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName = "PolicyName"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
    }
}

extension DeleteScalingPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteScalingPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ObjectNotFoundException" : self = .objectNotFoundException(try ObjectNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteScalingPolicyOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case internalServiceException(InternalServiceException)
    case objectNotFoundException(ObjectNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteScalingPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteScalingPolicyOutputResponse()"}
}

extension DeleteScalingPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteScalingPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteScalingPolicyOutputResponseBody: Swift.Equatable {
}

extension DeleteScalingPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteScheduledActionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScheduledActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteScheduledActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteScheduledActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScheduledActionOutputError>
}

extension DeleteScheduledActionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteScheduledActionInput(resourceId: \(Swift.String(describing: resourceId)), scalableDimension: \(Swift.String(describing: scalableDimension)), scheduledActionName: \(Swift.String(describing: scheduledActionName)), serviceNamespace: \(Swift.String(describing: serviceNamespace)))"}
}

extension DeleteScheduledActionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scheduledActionName = "ScheduledActionName"
        case serviceNamespace = "ServiceNamespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let scheduledActionName = scheduledActionName {
            try encodeContainer.encode(scheduledActionName, forKey: .scheduledActionName)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
    }
}

public struct DeleteScheduledActionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScheduledActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteScheduledActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteScheduledActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScheduledActionOutputError>
}

public struct DeleteScheduledActionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScheduledActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteScheduledActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteScheduledActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScheduledActionOutputError>
}

public struct DeleteScheduledActionInput: Swift.Equatable {
    /// <p>The identifier of the resource associated with the scheduled action.
    ///       This string consists of the resource type and unique identifier.</p>
    ///          <ul>
    ///             <li>
    ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
    ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
    ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
    ///                Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
    ///                Example: <code>fleet/sample-fleet</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>table/my-table</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
    ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
    ///                Example: <code>cluster:my-db-cluster</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
    ///                Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
    ///                is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
    ///                   repository</a>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
    ///                Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
    ///                Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
    ///            </li>
    ///          </ul>
    public let resourceId: Swift.String?
    /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an Amazon SageMaker model endpoint variant.</p>
    ///            </li>
    ///             <li>
    ///               <p>
    ///                   <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:WriteCapacityUnits</code> -  The provisioned write capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
    ///            </li>
    ///          </ul>
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    /// <p>The name of the scheduled action.</p>
    public let scheduledActionName: Swift.String?
    /// <p>The namespace of the AWS service that provides the resource. For a resource provided
    ///          by your own application or service, use <code>custom-resource</code> instead.</p>
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?

    public init (
        resourceId: Swift.String? = nil,
        scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension? = nil,
        scheduledActionName: Swift.String? = nil,
        serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace? = nil
    )
    {
        self.resourceId = resourceId
        self.scalableDimension = scalableDimension
        self.scheduledActionName = scheduledActionName
        self.serviceNamespace = serviceNamespace
    }
}

struct DeleteScheduledActionInputBody: Swift.Equatable {
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    public let scheduledActionName: Swift.String?
    public let resourceId: Swift.String?
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
}

extension DeleteScheduledActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scheduledActionName = "ScheduledActionName"
        case serviceNamespace = "ServiceNamespace"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
    }
}

extension DeleteScheduledActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteScheduledActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ObjectNotFoundException" : self = .objectNotFoundException(try ObjectNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteScheduledActionOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case internalServiceException(InternalServiceException)
    case objectNotFoundException(ObjectNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteScheduledActionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteScheduledActionOutputResponse()"}
}

extension DeleteScheduledActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteScheduledActionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteScheduledActionOutputResponseBody: Swift.Equatable {
}

extension DeleteScheduledActionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeregisterScalableTargetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterScalableTargetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterScalableTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterScalableTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterScalableTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterScalableTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterScalableTargetOutputError>
}

extension DeregisterScalableTargetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeregisterScalableTargetInput(resourceId: \(Swift.String(describing: resourceId)), scalableDimension: \(Swift.String(describing: scalableDimension)), serviceNamespace: \(Swift.String(describing: serviceNamespace)))"}
}

extension DeregisterScalableTargetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
    }
}

public struct DeregisterScalableTargetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterScalableTargetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterScalableTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterScalableTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterScalableTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterScalableTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterScalableTargetOutputError>
}

public struct DeregisterScalableTargetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterScalableTargetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterScalableTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterScalableTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterScalableTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterScalableTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterScalableTargetOutputError>
}

public struct DeregisterScalableTargetInput: Swift.Equatable {
    /// <p>The identifier of the resource associated with the scalable target.
    ///       This string consists of the resource type and unique identifier.</p>
    ///          <ul>
    ///             <li>
    ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
    ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
    ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
    ///                Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
    ///                Example: <code>fleet/sample-fleet</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>table/my-table</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
    ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
    ///                Example: <code>cluster:my-db-cluster</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
    ///                Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
    ///                is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
    ///                   repository</a>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
    ///                Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
    ///                Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
    ///            </li>
    ///          </ul>
    public let resourceId: Swift.String?
    /// <p>The scalable dimension associated with the scalable target.
    ///       This string consists of the service namespace, resource type, and scaling property.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an Amazon SageMaker model endpoint variant.</p>
    ///            </li>
    ///             <li>
    ///               <p>
    ///                   <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:WriteCapacityUnits</code> -  The provisioned write capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
    ///            </li>
    ///          </ul>
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    /// <p>The namespace of the AWS service that provides the resource. For a resource provided
    ///          by your own application or service, use <code>custom-resource</code> instead.</p>
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?

    public init (
        resourceId: Swift.String? = nil,
        scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension? = nil,
        serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace? = nil
    )
    {
        self.resourceId = resourceId
        self.scalableDimension = scalableDimension
        self.serviceNamespace = serviceNamespace
    }
}

struct DeregisterScalableTargetInputBody: Swift.Equatable {
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    public let resourceId: Swift.String?
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
}

extension DeregisterScalableTargetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
    }
}

extension DeregisterScalableTargetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterScalableTargetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ObjectNotFoundException" : self = .objectNotFoundException(try ObjectNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeregisterScalableTargetOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case internalServiceException(InternalServiceException)
    case objectNotFoundException(ObjectNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterScalableTargetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeregisterScalableTargetOutputResponse()"}
}

extension DeregisterScalableTargetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterScalableTargetOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeregisterScalableTargetOutputResponseBody: Swift.Equatable {
}

extension DeregisterScalableTargetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DescribeScalableTargetsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalableTargetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalableTargetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalableTargetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalableTargetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalableTargetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalableTargetsOutputError>
}

extension DescribeScalableTargetsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScalableTargetsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), resourceIds: \(Swift.String(describing: resourceIds)), scalableDimension: \(Swift.String(describing: scalableDimension)), serviceNamespace: \(Swift.String(describing: serviceNamespace)))"}
}

extension DescribeScalableTargetsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceIds = "ResourceIds"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for resourceidsmaxlen16000 in resourceIds {
                try resourceIdsContainer.encode(resourceidsmaxlen16000)
            }
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
    }
}

public struct DescribeScalableTargetsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalableTargetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalableTargetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalableTargetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalableTargetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalableTargetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalableTargetsOutputError>
}

public struct DescribeScalableTargetsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalableTargetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalableTargetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalableTargetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalableTargetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalableTargetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalableTargetsOutputError>
}

public struct DescribeScalableTargetsInput: Swift.Equatable {
    /// <p>The maximum number of scalable targets. This value can be between 1 and
    ///          50. The default value is 50.</p>
    ///          <p>If this parameter is used, the operation returns up to <code>MaxResults</code> results
    ///          at a time, along with a <code>NextToken</code> value. To get the next set of results,
    ///          include the <code>NextToken</code> value in a subsequent call. If this parameter is not
    ///          used, the operation returns up to 50 results and a
    ///             <code>NextToken</code> value, if applicable.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The identifier of the resource associated with the scalable target.
    ///       This string consists of the resource type and unique identifier.</p>
    ///          <ul>
    ///             <li>
    ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
    ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
    ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
    ///                Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
    ///                Example: <code>fleet/sample-fleet</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>table/my-table</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
    ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
    ///                Example: <code>cluster:my-db-cluster</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
    ///                Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
    ///                is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
    ///                   repository</a>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
    ///                Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
    ///                Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
    ///            </li>
    ///          </ul>
    public let resourceIds: [Swift.String]?
    /// <p>The scalable dimension associated with the scalable target.
    ///       This string consists of the service namespace, resource type, and scaling property. If you specify a scalable dimension, you must also specify a resource ID.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an Amazon SageMaker model endpoint variant.</p>
    ///            </li>
    ///             <li>
    ///               <p>
    ///                   <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:WriteCapacityUnits</code> -  The provisioned write capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
    ///            </li>
    ///          </ul>
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    /// <p>The namespace of the AWS service that provides the resource. For a resource provided
    ///          by your own application or service, use <code>custom-resource</code> instead.</p>
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceIds: [Swift.String]? = nil,
        scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension? = nil,
        serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceIds = resourceIds
        self.scalableDimension = scalableDimension
        self.serviceNamespace = serviceNamespace
    }
}

struct DescribeScalableTargetsInputBody: Swift.Equatable {
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    public let resourceIds: [Swift.String]?
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension DescribeScalableTargetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceIds = "ResourceIds"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[Swift.String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [Swift.String]()
            for string0 in resourceIdsContainer {
                if let string0 = string0 {
                    resourceIdsDecoded0?.append(string0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeScalableTargetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeScalableTargetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScalableTargetsOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case internalServiceException(InternalServiceException)
    case invalidNextTokenException(InvalidNextTokenException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScalableTargetsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScalableTargetsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), scalableTargets: \(Swift.String(describing: scalableTargets)))"}
}

extension DescribeScalableTargetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeScalableTargetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.scalableTargets = output.scalableTargets
        } else {
            self.nextToken = nil
            self.scalableTargets = nil
        }
    }
}

public struct DescribeScalableTargetsOutputResponse: Swift.Equatable {
    /// <p>The token required to get the next set of results. This value is <code>null</code> if
    ///          there are no more results to return.</p>
    public let nextToken: Swift.String?
    /// <p>The scalable targets that match the request parameters.</p>
    public let scalableTargets: [ApplicationAutoScalingClientTypes.ScalableTarget]?

    public init (
        nextToken: Swift.String? = nil,
        scalableTargets: [ApplicationAutoScalingClientTypes.ScalableTarget]? = nil
    )
    {
        self.nextToken = nextToken
        self.scalableTargets = scalableTargets
    }
}

struct DescribeScalableTargetsOutputResponseBody: Swift.Equatable {
    public let scalableTargets: [ApplicationAutoScalingClientTypes.ScalableTarget]?
    public let nextToken: Swift.String?
}

extension DescribeScalableTargetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case scalableTargets = "ScalableTargets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalableTargetsContainer = try containerValues.decodeIfPresent([ApplicationAutoScalingClientTypes.ScalableTarget?].self, forKey: .scalableTargets)
        var scalableTargetsDecoded0:[ApplicationAutoScalingClientTypes.ScalableTarget]? = nil
        if let scalableTargetsContainer = scalableTargetsContainer {
            scalableTargetsDecoded0 = [ApplicationAutoScalingClientTypes.ScalableTarget]()
            for structure0 in scalableTargetsContainer {
                if let structure0 = structure0 {
                    scalableTargetsDecoded0?.append(structure0)
                }
            }
        }
        scalableTargets = scalableTargetsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeScalingActivitiesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingActivitiesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingActivitiesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingActivitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingActivitiesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingActivitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingActivitiesOutputError>
}

extension DescribeScalingActivitiesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScalingActivitiesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), resourceId: \(Swift.String(describing: resourceId)), scalableDimension: \(Swift.String(describing: scalableDimension)), serviceNamespace: \(Swift.String(describing: serviceNamespace)))"}
}

extension DescribeScalingActivitiesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
    }
}

public struct DescribeScalingActivitiesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingActivitiesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingActivitiesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingActivitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingActivitiesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingActivitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingActivitiesOutputError>
}

public struct DescribeScalingActivitiesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingActivitiesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingActivitiesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingActivitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingActivitiesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingActivitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingActivitiesOutputError>
}

public struct DescribeScalingActivitiesInput: Swift.Equatable {
    /// <p>The maximum number of scalable targets. This value can be between 1 and
    ///          50. The default value is 50.</p>
    ///          <p>If this parameter is used, the operation returns up to <code>MaxResults</code> results
    ///          at a time, along with a <code>NextToken</code> value. To get the next set of results,
    ///          include the <code>NextToken</code> value in a subsequent call. If this parameter is not
    ///          used, the operation returns up to 50 results and a
    ///             <code>NextToken</code> value, if applicable.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The identifier of the resource associated with the scaling activity.
    ///       This string consists of the resource type and unique identifier.</p>
    ///          <ul>
    ///             <li>
    ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
    ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
    ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
    ///                Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
    ///                Example: <code>fleet/sample-fleet</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>table/my-table</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
    ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
    ///                Example: <code>cluster:my-db-cluster</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
    ///                Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
    ///                is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
    ///                   repository</a>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
    ///                Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
    ///                Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
    ///            </li>
    ///          </ul>
    public let resourceId: Swift.String?
    /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.
    ///       If you specify a scalable dimension, you must also specify a resource ID.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an Amazon SageMaker model endpoint variant.</p>
    ///            </li>
    ///             <li>
    ///               <p>
    ///                   <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:WriteCapacityUnits</code> -  The provisioned write capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
    ///            </li>
    ///          </ul>
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    /// <p>The namespace of the AWS service that provides the resource. For a resource provided
    ///          by your own application or service, use <code>custom-resource</code> instead.</p>
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension? = nil,
        serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceId = resourceId
        self.scalableDimension = scalableDimension
        self.serviceNamespace = serviceNamespace
    }
}

struct DescribeScalingActivitiesInputBody: Swift.Equatable {
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    public let resourceId: Swift.String?
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension DescribeScalingActivitiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeScalingActivitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeScalingActivitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScalingActivitiesOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case internalServiceException(InternalServiceException)
    case invalidNextTokenException(InvalidNextTokenException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScalingActivitiesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScalingActivitiesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), scalingActivities: \(Swift.String(describing: scalingActivities)))"}
}

extension DescribeScalingActivitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeScalingActivitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.scalingActivities = output.scalingActivities
        } else {
            self.nextToken = nil
            self.scalingActivities = nil
        }
    }
}

public struct DescribeScalingActivitiesOutputResponse: Swift.Equatable {
    /// <p>The token required to get the next set of results. This value is <code>null</code> if
    ///          there are no more results to return.</p>
    public let nextToken: Swift.String?
    /// <p>A list of scaling activity objects.</p>
    public let scalingActivities: [ApplicationAutoScalingClientTypes.ScalingActivity]?

    public init (
        nextToken: Swift.String? = nil,
        scalingActivities: [ApplicationAutoScalingClientTypes.ScalingActivity]? = nil
    )
    {
        self.nextToken = nextToken
        self.scalingActivities = scalingActivities
    }
}

struct DescribeScalingActivitiesOutputResponseBody: Swift.Equatable {
    public let scalingActivities: [ApplicationAutoScalingClientTypes.ScalingActivity]?
    public let nextToken: Swift.String?
}

extension DescribeScalingActivitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case scalingActivities = "ScalingActivities"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingActivitiesContainer = try containerValues.decodeIfPresent([ApplicationAutoScalingClientTypes.ScalingActivity?].self, forKey: .scalingActivities)
        var scalingActivitiesDecoded0:[ApplicationAutoScalingClientTypes.ScalingActivity]? = nil
        if let scalingActivitiesContainer = scalingActivitiesContainer {
            scalingActivitiesDecoded0 = [ApplicationAutoScalingClientTypes.ScalingActivity]()
            for structure0 in scalingActivitiesContainer {
                if let structure0 = structure0 {
                    scalingActivitiesDecoded0?.append(structure0)
                }
            }
        }
        scalingActivities = scalingActivitiesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeScalingPoliciesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingPoliciesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingPoliciesOutputError>
}

extension DescribeScalingPoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScalingPoliciesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), policyNames: \(Swift.String(describing: policyNames)), resourceId: \(Swift.String(describing: resourceId)), scalableDimension: \(Swift.String(describing: scalableDimension)), serviceNamespace: \(Swift.String(describing: serviceNamespace)))"}
}

extension DescribeScalingPoliciesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case policyNames = "PolicyNames"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let policyNames = policyNames {
            var policyNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policyNames)
            for resourceidsmaxlen16000 in policyNames {
                try policyNamesContainer.encode(resourceidsmaxlen16000)
            }
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
    }
}

public struct DescribeScalingPoliciesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingPoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingPoliciesOutputError>
}

public struct DescribeScalingPoliciesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingPoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingPoliciesOutputError>
}

public struct DescribeScalingPoliciesInput: Swift.Equatable {
    /// <p>The maximum number of scalable targets. This value can be between 1 and
    ///          50. The default value is 50.</p>
    ///          <p>If this parameter is used, the operation returns up to <code>MaxResults</code> results
    ///          at a time, along with a <code>NextToken</code> value. To get the next set of results,
    ///          include the <code>NextToken</code> value in a subsequent call. If this parameter is not
    ///          used, the operation returns up to 50 results and a
    ///             <code>NextToken</code> value, if applicable.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The names of the scaling policies to describe.</p>
    public let policyNames: [Swift.String]?
    /// <p>The identifier of the resource associated with the scaling policy.
    ///       This string consists of the resource type and unique identifier.</p>
    ///          <ul>
    ///             <li>
    ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
    ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
    ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
    ///                Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
    ///                Example: <code>fleet/sample-fleet</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>table/my-table</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
    ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
    ///                Example: <code>cluster:my-db-cluster</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
    ///                Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
    ///                is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
    ///                   repository</a>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
    ///                Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
    ///                Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
    ///            </li>
    ///          </ul>
    public let resourceId: Swift.String?
    /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.
    ///       If you specify a scalable dimension, you must also specify a resource ID.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an Amazon SageMaker model endpoint variant.</p>
    ///            </li>
    ///             <li>
    ///               <p>
    ///                   <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:WriteCapacityUnits</code> -  The provisioned write capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
    ///            </li>
    ///          </ul>
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    /// <p>The namespace of the AWS service that provides the resource. For a resource provided
    ///          by your own application or service, use <code>custom-resource</code> instead.</p>
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        policyNames: [Swift.String]? = nil,
        resourceId: Swift.String? = nil,
        scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension? = nil,
        serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.policyNames = policyNames
        self.resourceId = resourceId
        self.scalableDimension = scalableDimension
        self.serviceNamespace = serviceNamespace
    }
}

struct DescribeScalingPoliciesInputBody: Swift.Equatable {
    public let policyNames: [Swift.String]?
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    public let resourceId: Swift.String?
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension DescribeScalingPoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case policyNames = "PolicyNames"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .policyNames)
        var policyNamesDecoded0:[Swift.String]? = nil
        if let policyNamesContainer = policyNamesContainer {
            policyNamesDecoded0 = [Swift.String]()
            for string0 in policyNamesContainer {
                if let string0 = string0 {
                    policyNamesDecoded0?.append(string0)
                }
            }
        }
        policyNames = policyNamesDecoded0
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeScalingPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeScalingPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FailedResourceAccessException" : self = .failedResourceAccessException(try FailedResourceAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScalingPoliciesOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case failedResourceAccessException(FailedResourceAccessException)
    case internalServiceException(InternalServiceException)
    case invalidNextTokenException(InvalidNextTokenException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScalingPoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScalingPoliciesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), scalingPolicies: \(Swift.String(describing: scalingPolicies)))"}
}

extension DescribeScalingPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeScalingPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.scalingPolicies = output.scalingPolicies
        } else {
            self.nextToken = nil
            self.scalingPolicies = nil
        }
    }
}

public struct DescribeScalingPoliciesOutputResponse: Swift.Equatable {
    /// <p>The token required to get the next set of results. This value is <code>null</code> if
    ///          there are no more results to return.</p>
    public let nextToken: Swift.String?
    /// <p>Information about the scaling policies.</p>
    public let scalingPolicies: [ApplicationAutoScalingClientTypes.ScalingPolicy]?

    public init (
        nextToken: Swift.String? = nil,
        scalingPolicies: [ApplicationAutoScalingClientTypes.ScalingPolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.scalingPolicies = scalingPolicies
    }
}

struct DescribeScalingPoliciesOutputResponseBody: Swift.Equatable {
    public let scalingPolicies: [ApplicationAutoScalingClientTypes.ScalingPolicy]?
    public let nextToken: Swift.String?
}

extension DescribeScalingPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case scalingPolicies = "ScalingPolicies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPoliciesContainer = try containerValues.decodeIfPresent([ApplicationAutoScalingClientTypes.ScalingPolicy?].self, forKey: .scalingPolicies)
        var scalingPoliciesDecoded0:[ApplicationAutoScalingClientTypes.ScalingPolicy]? = nil
        if let scalingPoliciesContainer = scalingPoliciesContainer {
            scalingPoliciesDecoded0 = [ApplicationAutoScalingClientTypes.ScalingPolicy]()
            for structure0 in scalingPoliciesContainer {
                if let structure0 = structure0 {
                    scalingPoliciesDecoded0?.append(structure0)
                }
            }
        }
        scalingPolicies = scalingPoliciesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeScheduledActionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScheduledActionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScheduledActionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScheduledActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScheduledActionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScheduledActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScheduledActionsOutputError>
}

extension DescribeScheduledActionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScheduledActionsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), resourceId: \(Swift.String(describing: resourceId)), scalableDimension: \(Swift.String(describing: scalableDimension)), scheduledActionNames: \(Swift.String(describing: scheduledActionNames)), serviceNamespace: \(Swift.String(describing: serviceNamespace)))"}
}

extension DescribeScheduledActionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scheduledActionNames = "ScheduledActionNames"
        case serviceNamespace = "ServiceNamespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let scheduledActionNames = scheduledActionNames {
            var scheduledActionNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scheduledActionNames)
            for resourceidsmaxlen16000 in scheduledActionNames {
                try scheduledActionNamesContainer.encode(resourceidsmaxlen16000)
            }
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
    }
}

public struct DescribeScheduledActionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScheduledActionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScheduledActionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScheduledActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScheduledActionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScheduledActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScheduledActionsOutputError>
}

public struct DescribeScheduledActionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScheduledActionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScheduledActionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScheduledActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScheduledActionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScheduledActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScheduledActionsOutputError>
}

public struct DescribeScheduledActionsInput: Swift.Equatable {
    /// <p>The maximum number of scheduled action results. This value can be between
    ///          1 and 50. The default value is 50.</p>
    ///          <p>If this parameter is used, the operation returns up to <code>MaxResults</code> results
    ///          at a time, along with a <code>NextToken</code> value. To get the next set of results,
    ///          include the <code>NextToken</code> value in a subsequent call. If this parameter is not
    ///          used, the operation returns up to 50 results and a
    ///             <code>NextToken</code> value, if applicable.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The identifier of the resource associated with the scheduled action.
    ///       This string consists of the resource type and unique identifier.</p>
    ///          <ul>
    ///             <li>
    ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
    ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
    ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
    ///                Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
    ///                Example: <code>fleet/sample-fleet</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>table/my-table</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
    ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
    ///                Example: <code>cluster:my-db-cluster</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
    ///                Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
    ///                is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
    ///                   repository</a>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
    ///                Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
    ///                Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
    ///            </li>
    ///          </ul>
    public let resourceId: Swift.String?
    /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.
    ///       If you specify a scalable dimension, you must also specify a resource ID.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an Amazon SageMaker model endpoint variant.</p>
    ///            </li>
    ///             <li>
    ///               <p>
    ///                   <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:WriteCapacityUnits</code> -  The provisioned write capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
    ///            </li>
    ///          </ul>
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    /// <p>The names of the scheduled actions to describe.</p>
    public let scheduledActionNames: [Swift.String]?
    /// <p>The namespace of the AWS service that provides the resource. For a resource provided
    ///          by your own application or service, use <code>custom-resource</code> instead.</p>
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension? = nil,
        scheduledActionNames: [Swift.String]? = nil,
        serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceId = resourceId
        self.scalableDimension = scalableDimension
        self.scheduledActionNames = scheduledActionNames
        self.serviceNamespace = serviceNamespace
    }
}

struct DescribeScheduledActionsInputBody: Swift.Equatable {
    public let scheduledActionNames: [Swift.String]?
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    public let resourceId: Swift.String?
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension DescribeScheduledActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scheduledActionNames = "ScheduledActionNames"
        case serviceNamespace = "ServiceNamespace"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .scheduledActionNames)
        var scheduledActionNamesDecoded0:[Swift.String]? = nil
        if let scheduledActionNamesContainer = scheduledActionNamesContainer {
            scheduledActionNamesDecoded0 = [Swift.String]()
            for string0 in scheduledActionNamesContainer {
                if let string0 = string0 {
                    scheduledActionNamesDecoded0?.append(string0)
                }
            }
        }
        scheduledActionNames = scheduledActionNamesDecoded0
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeScheduledActionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeScheduledActionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScheduledActionsOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case internalServiceException(InternalServiceException)
    case invalidNextTokenException(InvalidNextTokenException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScheduledActionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScheduledActionsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), scheduledActions: \(Swift.String(describing: scheduledActions)))"}
}

extension DescribeScheduledActionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeScheduledActionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.scheduledActions = output.scheduledActions
        } else {
            self.nextToken = nil
            self.scheduledActions = nil
        }
    }
}

public struct DescribeScheduledActionsOutputResponse: Swift.Equatable {
    /// <p>The token required to get the next set of results. This value is <code>null</code> if
    ///          there are no more results to return.</p>
    public let nextToken: Swift.String?
    /// <p>Information about the scheduled actions.</p>
    public let scheduledActions: [ApplicationAutoScalingClientTypes.ScheduledAction]?

    public init (
        nextToken: Swift.String? = nil,
        scheduledActions: [ApplicationAutoScalingClientTypes.ScheduledAction]? = nil
    )
    {
        self.nextToken = nextToken
        self.scheduledActions = scheduledActions
    }
}

struct DescribeScheduledActionsOutputResponseBody: Swift.Equatable {
    public let scheduledActions: [ApplicationAutoScalingClientTypes.ScheduledAction]?
    public let nextToken: Swift.String?
}

extension DescribeScheduledActionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case scheduledActions = "ScheduledActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionsContainer = try containerValues.decodeIfPresent([ApplicationAutoScalingClientTypes.ScheduledAction?].self, forKey: .scheduledActions)
        var scheduledActionsDecoded0:[ApplicationAutoScalingClientTypes.ScheduledAction]? = nil
        if let scheduledActionsContainer = scheduledActionsContainer {
            scheduledActionsDecoded0 = [ApplicationAutoScalingClientTypes.ScheduledAction]()
            for structure0 in scheduledActionsContainer {
                if let structure0 = structure0 {
                    scheduledActionsDecoded0?.append(structure0)
                }
            }
        }
        scheduledActions = scheduledActionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension FailedResourceAccessException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FailedResourceAccessException(message: \(Swift.String(describing: message)))"}
}

extension FailedResourceAccessException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: FailedResourceAccessExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Failed access to resources caused an exception. This exception is thrown when Application Auto Scaling
///          is unable to retrieve the alarms associated with a scaling policy due to a client error,
///          for example, if the role ARN specified for a scalable target does not have permission to
///          call the CloudWatch <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarms.html">DescribeAlarms</a> on your behalf.</p>
public struct FailedResourceAccessException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct FailedResourceAccessExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension FailedResourceAccessExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InternalServiceException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServiceException(message: \(Swift.String(describing: message)))"}
}

extension InternalServiceException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalServiceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The service encountered an internal error.</p>
public struct InternalServiceException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServiceExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalServiceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidNextTokenException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidNextTokenException(message: \(Swift.String(describing: message)))"}
}

extension InvalidNextTokenException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidNextTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The next token supplied was invalid.</p>
public struct InvalidNextTokenException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNextTokenExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidNextTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A per-account resource limit is exceeded. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-limits.html">Application Auto Scaling service quotas</a>.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ApplicationAutoScalingClientTypes {
    public enum MetricAggregationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricAggregationType] {
            return [
                .average,
                .maximum,
                .minimum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricAggregationType(rawValue: rawValue) ?? MetricAggregationType.sdkUnknown(rawValue)
        }
    }
}

extension ApplicationAutoScalingClientTypes.MetricDimension: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension ApplicationAutoScalingClientTypes.MetricDimension: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricDimension(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension ApplicationAutoScalingClientTypes {
    /// <p>Describes the dimension names and values associated with a metric.</p>
    public struct MetricDimension: Swift.Equatable {
        /// <p>The name of the dimension.</p>
        public let name: Swift.String?
        /// <p>The value of the dimension.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension ApplicationAutoScalingClientTypes {
    public enum MetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case samplecount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStatistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .samplecount,
                .sum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .samplecount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricStatistic(rawValue: rawValue) ?? MetricStatistic.sdkUnknown(rawValue)
        }
    }
}

extension ApplicationAutoScalingClientTypes {
    public enum MetricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case albrequestcountpertarget
        case appstreamaveragecapacityutilization
        case cassandrareadcapacityutilization
        case cassandrawritecapacityutilization
        case comprehendinferenceutilization
        case dynamodbreadcapacityutilization
        case dynamodbwritecapacityutilization
        case ec2spotfleetrequestaveragecpuutilization
        case ec2spotfleetrequestaveragenetworkin
        case ec2spotfleetrequestaveragenetworkout
        case ecsserviceaveragecpuutilization
        case ecsserviceaveragememoryutilization
        case kafkabrokerstorageutilization
        case lambdaprovisionedconcurrencyutilization
        case rdsreaderaveragecpuutilization
        case rdsreaderaveragedatabaseconnections
        case sagemakervariantinvocationsperinstance
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricType] {
            return [
                .albrequestcountpertarget,
                .appstreamaveragecapacityutilization,
                .cassandrareadcapacityutilization,
                .cassandrawritecapacityutilization,
                .comprehendinferenceutilization,
                .dynamodbreadcapacityutilization,
                .dynamodbwritecapacityutilization,
                .ec2spotfleetrequestaveragecpuutilization,
                .ec2spotfleetrequestaveragenetworkin,
                .ec2spotfleetrequestaveragenetworkout,
                .ecsserviceaveragecpuutilization,
                .ecsserviceaveragememoryutilization,
                .kafkabrokerstorageutilization,
                .lambdaprovisionedconcurrencyutilization,
                .rdsreaderaveragecpuutilization,
                .rdsreaderaveragedatabaseconnections,
                .sagemakervariantinvocationsperinstance,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .albrequestcountpertarget: return "ALBRequestCountPerTarget"
            case .appstreamaveragecapacityutilization: return "AppStreamAverageCapacityUtilization"
            case .cassandrareadcapacityutilization: return "CassandraReadCapacityUtilization"
            case .cassandrawritecapacityutilization: return "CassandraWriteCapacityUtilization"
            case .comprehendinferenceutilization: return "ComprehendInferenceUtilization"
            case .dynamodbreadcapacityutilization: return "DynamoDBReadCapacityUtilization"
            case .dynamodbwritecapacityutilization: return "DynamoDBWriteCapacityUtilization"
            case .ec2spotfleetrequestaveragecpuutilization: return "EC2SpotFleetRequestAverageCPUUtilization"
            case .ec2spotfleetrequestaveragenetworkin: return "EC2SpotFleetRequestAverageNetworkIn"
            case .ec2spotfleetrequestaveragenetworkout: return "EC2SpotFleetRequestAverageNetworkOut"
            case .ecsserviceaveragecpuutilization: return "ECSServiceAverageCPUUtilization"
            case .ecsserviceaveragememoryutilization: return "ECSServiceAverageMemoryUtilization"
            case .kafkabrokerstorageutilization: return "KafkaBrokerStorageUtilization"
            case .lambdaprovisionedconcurrencyutilization: return "LambdaProvisionedConcurrencyUtilization"
            case .rdsreaderaveragecpuutilization: return "RDSReaderAverageCPUUtilization"
            case .rdsreaderaveragedatabaseconnections: return "RDSReaderAverageDatabaseConnections"
            case .sagemakervariantinvocationsperinstance: return "SageMakerVariantInvocationsPerInstance"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricType(rawValue: rawValue) ?? MetricType.sdkUnknown(rawValue)
        }
    }
}

extension ObjectNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ObjectNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ObjectNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ObjectNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified object could not be found. For any operation that depends on the existence
///          of a scalable target, this exception is thrown if the scalable target with the specified
///          service namespace, resource ID, and scalable dimension does not exist. For any operation
///          that deletes or deregisters a resource, this exception is thrown if the resource cannot be
///          found.</p>
public struct ObjectNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ObjectNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ObjectNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ApplicationAutoScalingClientTypes {
    public enum PolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case stepscaling
        case targettrackingscaling
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyType] {
            return [
                .stepscaling,
                .targettrackingscaling,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .stepscaling: return "StepScaling"
            case .targettrackingscaling: return "TargetTrackingScaling"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PolicyType(rawValue: rawValue) ?? PolicyType.sdkUnknown(rawValue)
        }
    }
}

extension ApplicationAutoScalingClientTypes.PredefinedMetricSpecification: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case predefinedMetricType = "PredefinedMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let predefinedMetricType = predefinedMetricType {
            try encodeContainer.encode(predefinedMetricType.rawValue, forKey: .predefinedMetricType)
        }
        if let resourceLabel = resourceLabel {
            try encodeContainer.encode(resourceLabel, forKey: .resourceLabel)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricTypeDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.MetricType.self, forKey: .predefinedMetricType)
        predefinedMetricType = predefinedMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension ApplicationAutoScalingClientTypes.PredefinedMetricSpecification: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PredefinedMetricSpecification(predefinedMetricType: \(Swift.String(describing: predefinedMetricType)), resourceLabel: \(Swift.String(describing: resourceLabel)))"}
}

extension ApplicationAutoScalingClientTypes {
    /// <p>Represents a predefined metric for a target tracking scaling policy to use with
    ///          Application Auto Scaling.</p>
    ///          <p>Only the AWS services that you're using send metrics to Amazon CloudWatch. To determine whether a
    ///          desired metric already exists by looking up its namespace and dimension using the CloudWatch
    ///          metrics dashboard in the console, follow the procedure in <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/monitoring-cloudwatch.html">Building dashboards
    ///             with CloudWatch</a> in the <i>Application Auto Scaling User Guide</i>.</p>
    public struct PredefinedMetricSpecification: Swift.Equatable {
        /// <p>The metric type. The <code>ALBRequestCountPerTarget</code> metric type applies only to
        ///          Spot Fleet requests and ECS services.</p>
        public let predefinedMetricType: ApplicationAutoScalingClientTypes.MetricType?
        /// <p>Identifies the resource associated with the metric type. You can't specify a resource
        ///          label unless the metric type is <code>ALBRequestCountPerTarget</code> and there is a target
        ///          group attached to the Spot Fleet request or ECS service.</p>
        ///          <p>You create the resource label by appending the final portion of the load balancer ARN
        ///          and the final portion of the target group ARN into a single value, separated by a forward
        ///          slash (/). The format is
        ///          app/<load-balancer-name>/<load-balancer-id>/targetgroup/<target-group-name>/<target-group-id>,
        ///          where:</p>
        ///          <ul>
        ///             <li>
        ///                <p>app/<load-balancer-name>/<load-balancer-id> is the final portion of
        ///                the load balancer ARN</p>
        ///             </li>
        ///             <li>
        ///                <p>targetgroup/<target-group-name>/<target-group-id> is the final portion
        ///                of the target group ARN.</p>
        ///             </li>
        ///          </ul>
        ///          <p>This is an example:
        ///          app/EC2Co-EcsEl-1TKLTMITMM0EO/f37c06a68c1748aa/targetgroup/EC2Co-Defau-LDNM7Q3ZH1ZN/6d4ea56ca2d6a18d.</p>
        ///          <p>To find the ARN for an Application Load Balancer, use the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a> API operation. To find the ARN for the target group, use
        ///          the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html">DescribeTargetGroups</a> API operation.</p>
        public let resourceLabel: Swift.String?

        public init (
            predefinedMetricType: ApplicationAutoScalingClientTypes.MetricType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }
    }

}

public struct PutScalingPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutScalingPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutScalingPolicyOutputError>
}

extension PutScalingPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutScalingPolicyInput(policyName: \(Swift.String(describing: policyName)), policyType: \(Swift.String(describing: policyType)), resourceId: \(Swift.String(describing: resourceId)), scalableDimension: \(Swift.String(describing: scalableDimension)), serviceNamespace: \(Swift.String(describing: serviceNamespace)), stepScalingPolicyConfiguration: \(Swift.String(describing: stepScalingPolicyConfiguration)), targetTrackingScalingPolicyConfiguration: \(Swift.String(describing: targetTrackingScalingPolicyConfiguration)))"}
}

extension PutScalingPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName = "PolicyName"
        case policyType = "PolicyType"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case stepScalingPolicyConfiguration = "StepScalingPolicyConfiguration"
        case targetTrackingScalingPolicyConfiguration = "TargetTrackingScalingPolicyConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyType = policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let stepScalingPolicyConfiguration = stepScalingPolicyConfiguration {
            try encodeContainer.encode(stepScalingPolicyConfiguration, forKey: .stepScalingPolicyConfiguration)
        }
        if let targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration {
            try encodeContainer.encode(targetTrackingScalingPolicyConfiguration, forKey: .targetTrackingScalingPolicyConfiguration)
        }
    }
}

public struct PutScalingPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutScalingPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutScalingPolicyOutputError>
}

public struct PutScalingPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutScalingPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutScalingPolicyOutputError>
}

public struct PutScalingPolicyInput: Swift.Equatable {
    /// <p>The name of the scaling policy.</p>
    public let policyName: Swift.String?
    /// <p>The policy type. This parameter is required if you are creating a scaling policy.</p>
    ///          <p>The following policy types are supported: </p>
    ///          <p>
    ///             <code>TargetTrackingScaling</code>—Not supported for Amazon EMR</p>
    ///          <p>
    ///             <code>StepScaling</code>—Not supported for DynamoDB, Amazon Comprehend, Lambda, Amazon Keyspaces (for
    ///       Apache Cassandra), or Amazon MSK.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html">Target
    ///         tracking scaling policies</a> and <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html">Step scaling policies</a> in the <i>Application Auto Scaling User Guide</i>.</p>
    public let policyType: ApplicationAutoScalingClientTypes.PolicyType?
    /// <p>The identifier of the resource associated with the scaling policy.
    ///       This string consists of the resource type and unique identifier.</p>
    ///          <ul>
    ///             <li>
    ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
    ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
    ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
    ///                Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
    ///                Example: <code>fleet/sample-fleet</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>table/my-table</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
    ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
    ///                Example: <code>cluster:my-db-cluster</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
    ///                Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
    ///                is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
    ///                   repository</a>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
    ///                Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
    ///                Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
    ///            </li>
    ///          </ul>
    public let resourceId: Swift.String?
    /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an Amazon SageMaker model endpoint variant.</p>
    ///            </li>
    ///             <li>
    ///               <p>
    ///                   <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:WriteCapacityUnits</code> -  The provisioned write capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
    ///            </li>
    ///          </ul>
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    /// <p>The namespace of the AWS service that provides the resource. For a resource provided
    ///          by your own application or service, use <code>custom-resource</code> instead.</p>
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    /// <p>A step scaling policy.</p>
    ///          <p>This parameter is required if you are creating a policy and the policy type is
    ///             <code>StepScaling</code>.</p>
    public let stepScalingPolicyConfiguration: ApplicationAutoScalingClientTypes.StepScalingPolicyConfiguration?
    /// <p>A target tracking scaling policy. Includes support for predefined or customized
    ///          metrics.</p>
    ///          <p>This parameter is required if you are creating a policy and the policy type is
    ///             <code>TargetTrackingScaling</code>.</p>
    public let targetTrackingScalingPolicyConfiguration: ApplicationAutoScalingClientTypes.TargetTrackingScalingPolicyConfiguration?

    public init (
        policyName: Swift.String? = nil,
        policyType: ApplicationAutoScalingClientTypes.PolicyType? = nil,
        resourceId: Swift.String? = nil,
        scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension? = nil,
        serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace? = nil,
        stepScalingPolicyConfiguration: ApplicationAutoScalingClientTypes.StepScalingPolicyConfiguration? = nil,
        targetTrackingScalingPolicyConfiguration: ApplicationAutoScalingClientTypes.TargetTrackingScalingPolicyConfiguration? = nil
    )
    {
        self.policyName = policyName
        self.policyType = policyType
        self.resourceId = resourceId
        self.scalableDimension = scalableDimension
        self.serviceNamespace = serviceNamespace
        self.stepScalingPolicyConfiguration = stepScalingPolicyConfiguration
        self.targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration
    }
}

struct PutScalingPolicyInputBody: Swift.Equatable {
    public let policyName: Swift.String?
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    public let resourceId: Swift.String?
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    public let policyType: ApplicationAutoScalingClientTypes.PolicyType?
    public let stepScalingPolicyConfiguration: ApplicationAutoScalingClientTypes.StepScalingPolicyConfiguration?
    public let targetTrackingScalingPolicyConfiguration: ApplicationAutoScalingClientTypes.TargetTrackingScalingPolicyConfiguration?
}

extension PutScalingPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName = "PolicyName"
        case policyType = "PolicyType"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case stepScalingPolicyConfiguration = "StepScalingPolicyConfiguration"
        case targetTrackingScalingPolicyConfiguration = "TargetTrackingScalingPolicyConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let stepScalingPolicyConfigurationDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.StepScalingPolicyConfiguration.self, forKey: .stepScalingPolicyConfiguration)
        stepScalingPolicyConfiguration = stepScalingPolicyConfigurationDecoded
        let targetTrackingScalingPolicyConfigurationDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.TargetTrackingScalingPolicyConfiguration.self, forKey: .targetTrackingScalingPolicyConfiguration)
        targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfigurationDecoded
    }
}

extension PutScalingPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutScalingPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FailedResourceAccessException" : self = .failedResourceAccessException(try FailedResourceAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ObjectNotFoundException" : self = .objectNotFoundException(try ObjectNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutScalingPolicyOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case failedResourceAccessException(FailedResourceAccessException)
    case internalServiceException(InternalServiceException)
    case limitExceededException(LimitExceededException)
    case objectNotFoundException(ObjectNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutScalingPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutScalingPolicyOutputResponse(alarms: \(Swift.String(describing: alarms)), policyARN: \(Swift.String(describing: policyARN)))"}
}

extension PutScalingPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutScalingPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alarms = output.alarms
            self.policyARN = output.policyARN
        } else {
            self.alarms = nil
            self.policyARN = nil
        }
    }
}

public struct PutScalingPolicyOutputResponse: Swift.Equatable {
    /// <p>The CloudWatch alarms created for the target tracking scaling policy.</p>
    public let alarms: [ApplicationAutoScalingClientTypes.Alarm]?
    /// <p>The Amazon Resource Name (ARN) of the resulting scaling policy.</p>
    public let policyARN: Swift.String?

    public init (
        alarms: [ApplicationAutoScalingClientTypes.Alarm]? = nil,
        policyARN: Swift.String? = nil
    )
    {
        self.alarms = alarms
        self.policyARN = policyARN
    }
}

struct PutScalingPolicyOutputResponseBody: Swift.Equatable {
    public let policyARN: Swift.String?
    public let alarms: [ApplicationAutoScalingClientTypes.Alarm]?
}

extension PutScalingPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarms = "Alarms"
        case policyARN = "PolicyARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyARN)
        policyARN = policyARNDecoded
        let alarmsContainer = try containerValues.decodeIfPresent([ApplicationAutoScalingClientTypes.Alarm?].self, forKey: .alarms)
        var alarmsDecoded0:[ApplicationAutoScalingClientTypes.Alarm]? = nil
        if let alarmsContainer = alarmsContainer {
            alarmsDecoded0 = [ApplicationAutoScalingClientTypes.Alarm]()
            for structure0 in alarmsContainer {
                if let structure0 = structure0 {
                    alarmsDecoded0?.append(structure0)
                }
            }
        }
        alarms = alarmsDecoded0
    }
}

public struct PutScheduledActionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutScheduledActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutScheduledActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutScheduledActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutScheduledActionOutputError>
}

extension PutScheduledActionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutScheduledActionInput(endTime: \(Swift.String(describing: endTime)), resourceId: \(Swift.String(describing: resourceId)), scalableDimension: \(Swift.String(describing: scalableDimension)), scalableTargetAction: \(Swift.String(describing: scalableTargetAction)), schedule: \(Swift.String(describing: schedule)), scheduledActionName: \(Swift.String(describing: scheduledActionName)), serviceNamespace: \(Swift.String(describing: serviceNamespace)), startTime: \(Swift.String(describing: startTime)), timezone: \(Swift.String(describing: timezone)))"}
}

extension PutScheduledActionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scalableTargetAction = "ScalableTargetAction"
        case schedule = "Schedule"
        case scheduledActionName = "ScheduledActionName"
        case serviceNamespace = "ServiceNamespace"
        case startTime = "StartTime"
        case timezone = "Timezone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let scalableTargetAction = scalableTargetAction {
            try encodeContainer.encode(scalableTargetAction, forKey: .scalableTargetAction)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let scheduledActionName = scheduledActionName {
            try encodeContainer.encode(scheduledActionName, forKey: .scheduledActionName)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let timezone = timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
    }
}

public struct PutScheduledActionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutScheduledActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutScheduledActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutScheduledActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutScheduledActionOutputError>
}

public struct PutScheduledActionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutScheduledActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutScheduledActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutScheduledActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutScheduledActionOutputError>
}

public struct PutScheduledActionInput: Swift.Equatable {
    /// <p>The date and time for the recurring schedule to end, in UTC.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>The identifier of the resource associated with the scheduled action.
    ///       This string consists of the resource type and unique identifier.</p>
    ///          <ul>
    ///             <li>
    ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
    ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
    ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
    ///                Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
    ///                Example: <code>fleet/sample-fleet</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>table/my-table</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
    ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
    ///                Example: <code>cluster:my-db-cluster</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
    ///                Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
    ///                is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
    ///                   repository</a>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
    ///                Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
    ///                Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
    ///            </li>
    ///          </ul>
    public let resourceId: Swift.String?
    /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an Amazon SageMaker model endpoint variant.</p>
    ///            </li>
    ///             <li>
    ///               <p>
    ///                   <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:WriteCapacityUnits</code> -  The provisioned write capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
    ///            </li>
    ///          </ul>
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    /// <p>The new minimum and maximum capacity. You can set both values or just one. At the
    ///          scheduled time, if the current capacity is below the minimum capacity, Application Auto Scaling scales out
    ///          to the minimum capacity. If the current capacity is above the maximum capacity, Application Auto Scaling
    ///          scales in to the maximum capacity.</p>
    public let scalableTargetAction: ApplicationAutoScalingClientTypes.ScalableTargetAction?
    /// <p>The schedule for this action. The following formats are supported:</p>
    ///          <ul>
    ///             <li>
    ///                <p>At expressions - "<code>at(<i>yyyy</i>-<i>mm</i>-<i>dd</i>T<i>hh</i>:<i>mm</i>:<i>ss</i>)</code>"</p>
    ///             </li>
    ///             <li>
    ///                <p>Rate expressions - "<code>rate(<i>value</i>
    ///                      <i>unit</i>)</code>"</p>
    ///             </li>
    ///             <li>
    ///                <p>Cron expressions - "<code>cron(<i>fields</i>)</code>"</p>
    ///             </li>
    ///          </ul>
    ///          <p>At expressions are useful for one-time schedules. Cron expressions are useful for
    ///          scheduled actions that run periodically at a specified date and time, and rate expressions
    ///          are useful for scheduled actions that run at a regular interval.</p>
    ///          <p>At and cron expressions use Universal Coordinated Time (UTC) by
    ///          default.</p>
    ///          <p>The cron format consists of six fields separated by white spaces: [Minutes] [Hours] [Day_of_Month] [Month] [Day_of_Week] [Year].</p>
    ///          <p>For rate expressions, <i>value</i> is a positive integer and <i>unit</i> is
    ///          <code>minute</code> | <code>minutes</code> | <code>hour</code> | <code>hours</code> | <code>day</code> | <code>days</code>.</p>
    ///            <p>For more information and examples, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/examples-scheduled-actions.html">Example scheduled actions for Application Auto Scaling</a> in the <i>Application Auto Scaling User Guide</i>.</p>
    public let schedule: Swift.String?
    /// <p>The name of the scheduled action. This name must be unique among all other scheduled
    ///          actions on the specified scalable target. </p>
    public let scheduledActionName: Swift.String?
    /// <p>The namespace of the AWS service that provides the resource. For a resource provided
    ///          by your own application or service, use <code>custom-resource</code> instead.</p>
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    /// <p>The date and time for this scheduled action to start, in UTC.</p>
    public let startTime: ClientRuntime.Date?
    /// <p>Specifies the time zone used when setting a scheduled action by using an at or cron
    ///          expression. If a time zone is not provided, UTC is used by default.</p>
    ///          <p>Valid values are the canonical names of the IANA time zones supported by Joda-Time (such
    ///          as <code>Etc/GMT+9</code> or <code>Pacific/Tahiti</code>). For more information, see <a href="https://www.joda.org/joda-time/timezones.html">https://www.joda.org/joda-time/timezones.html</a>.</p>
    public let timezone: Swift.String?

    public init (
        endTime: ClientRuntime.Date? = nil,
        resourceId: Swift.String? = nil,
        scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension? = nil,
        scalableTargetAction: ApplicationAutoScalingClientTypes.ScalableTargetAction? = nil,
        schedule: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace? = nil,
        startTime: ClientRuntime.Date? = nil,
        timezone: Swift.String? = nil
    )
    {
        self.endTime = endTime
        self.resourceId = resourceId
        self.scalableDimension = scalableDimension
        self.scalableTargetAction = scalableTargetAction
        self.schedule = schedule
        self.scheduledActionName = scheduledActionName
        self.serviceNamespace = serviceNamespace
        self.startTime = startTime
        self.timezone = timezone
    }
}

struct PutScheduledActionInputBody: Swift.Equatable {
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    public let schedule: Swift.String?
    public let timezone: Swift.String?
    public let scheduledActionName: Swift.String?
    public let resourceId: Swift.String?
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    public let startTime: ClientRuntime.Date?
    public let endTime: ClientRuntime.Date?
    public let scalableTargetAction: ApplicationAutoScalingClientTypes.ScalableTargetAction?
}

extension PutScheduledActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scalableTargetAction = "ScalableTargetAction"
        case schedule = "Schedule"
        case scheduledActionName = "ScheduledActionName"
        case serviceNamespace = "ServiceNamespace"
        case startTime = "StartTime"
        case timezone = "Timezone"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let scalableTargetActionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableTargetAction.self, forKey: .scalableTargetAction)
        scalableTargetAction = scalableTargetActionDecoded
    }
}

extension PutScheduledActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutScheduledActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ObjectNotFoundException" : self = .objectNotFoundException(try ObjectNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutScheduledActionOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case internalServiceException(InternalServiceException)
    case limitExceededException(LimitExceededException)
    case objectNotFoundException(ObjectNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutScheduledActionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutScheduledActionOutputResponse()"}
}

extension PutScheduledActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutScheduledActionOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutScheduledActionOutputResponseBody: Swift.Equatable {
}

extension PutScheduledActionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct RegisterScalableTargetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterScalableTargetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterScalableTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterScalableTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterScalableTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterScalableTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterScalableTargetOutputError>
}

extension RegisterScalableTargetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterScalableTargetInput(maxCapacity: \(Swift.String(describing: maxCapacity)), minCapacity: \(Swift.String(describing: minCapacity)), resourceId: \(Swift.String(describing: resourceId)), roleARN: \(Swift.String(describing: roleARN)), scalableDimension: \(Swift.String(describing: scalableDimension)), serviceNamespace: \(Swift.String(describing: serviceNamespace)), suspendedState: \(Swift.String(describing: suspendedState)))"}
}

extension RegisterScalableTargetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
        case resourceId = "ResourceId"
        case roleARN = "RoleARN"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case suspendedState = "SuspendedState"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let minCapacity = minCapacity {
            try encodeContainer.encode(minCapacity, forKey: .minCapacity)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let roleARN = roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let suspendedState = suspendedState {
            try encodeContainer.encode(suspendedState, forKey: .suspendedState)
        }
    }
}

public struct RegisterScalableTargetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterScalableTargetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterScalableTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterScalableTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterScalableTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterScalableTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterScalableTargetOutputError>
}

public struct RegisterScalableTargetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterScalableTargetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterScalableTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterScalableTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterScalableTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterScalableTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterScalableTargetOutputError>
}

public struct RegisterScalableTargetInput: Swift.Equatable {
    /// <p>The maximum value that you plan to scale out to. When a scaling policy is in effect,
    ///          Application Auto Scaling can scale out (expand) as needed to the maximum capacity limit in response to
    ///          changing demand. This property is required when registering a new scalable target.</p>
    ///          <p>Although you can specify a large maximum capacity, note that service quotas may impose
    ///          lower limits. Each service has its own default quotas for the maximum capacity of the
    ///          resource. If you want to specify a higher limit, you can request an increase. For more
    ///          information, consult the documentation for that service. For information about the default
    ///          quotas for each service, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-service-information.html">Service Endpoints and
    ///             Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
    public let maxCapacity: Swift.Int?
    /// <p>The minimum value that you plan to scale in to. When a scaling policy is in effect,
    ///       Application Auto Scaling can scale in (contract) as needed to the minimum capacity limit in response to
    ///       changing demand. This property is required when registering a new scalable target.</p>
    ///          <p>For certain resources, the minimum value allowed is 0. This includes Lambda provisioned
    ///       concurrency, Spot Fleet, ECS services, Aurora DB clusters, EMR clusters, and custom resources.
    ///       For all other resources, the minimum value allowed is 1.</p>
    public let minCapacity: Swift.Int?
    /// <p>The identifier of the resource that is associated with the scalable target.
    ///       This string consists of the resource type and unique identifier.</p>
    ///          <ul>
    ///             <li>
    ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
    ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
    ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
    ///                Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
    ///                Example: <code>fleet/sample-fleet</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>table/my-table</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
    ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
    ///                Example: <code>cluster:my-db-cluster</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
    ///                Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
    ///                is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
    ///                   repository</a>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
    ///                Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
    ///                Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
    ///            </li>
    ///             <li>
    ///                <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
    ///                Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
    ///            </li>
    ///          </ul>
    public let resourceId: Swift.String?
    /// <p>This parameter is required for services that do not support service-linked roles (such as
    ///       Amazon EMR), and it must specify the ARN of an IAM role that allows Application Auto Scaling to modify the scalable
    ///       target on your behalf. </p>
    ///          <p>If the service supports service-linked roles, Application Auto Scaling uses a service-linked role, which
    ///       it creates if it does not yet exist. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/security_iam_service-with-iam.html#security_iam_service-with-iam-roles">Application Auto Scaling IAM roles</a>.</p>
    public let roleARN: Swift.String?
    /// <p>The scalable dimension associated with the scalable target.
    ///       This string consists of the service namespace, resource type, and scaling property.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an Amazon SageMaker model endpoint variant.</p>
    ///            </li>
    ///             <li>
    ///               <p>
    ///                   <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>cassandra:table:WriteCapacityUnits</code> -  The provisioned write capacity for an Amazon Keyspaces table.</p>
    ///            </li>
    ///             <li>
    ///                <p>
    ///                   <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
    ///            </li>
    ///          </ul>
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    /// <p>The namespace of the AWS service that provides the resource. For a resource provided
    ///          by your own application or service, use <code>custom-resource</code> instead.</p>
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    /// <p>An embedded object that contains attributes and attribute values that are used to
    ///          suspend and resume automatic scaling. Setting the value of an attribute to
    ///             <code>true</code> suspends the specified scaling activities. Setting it to
    ///             <code>false</code> (default) resumes the specified scaling activities. </p>
    ///          <p>
    ///             <b>Suspension Outcomes</b>
    ///          </p>
    ///          <ul>
    ///             <li>
    ///                <p>For <code>DynamicScalingInSuspended</code>, while a suspension is in effect, all
    ///                scale-in activities that are triggered by a scaling policy are suspended.</p>
    ///             </li>
    ///             <li>
    ///                <p>For <code>DynamicScalingOutSuspended</code>, while a suspension is in effect, all
    ///                scale-out activities that are triggered by a scaling policy are suspended.</p>
    ///             </li>
    ///             <li>
    ///                <p>For <code>ScheduledScalingSuspended</code>, while a suspension is in effect, all
    ///                scaling activities that involve scheduled actions are suspended. </p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-suspend-resume-scaling.html">Suspending and resuming scaling</a> in the <i>Application Auto Scaling User
    ///          Guide</i>.</p>
    public let suspendedState: ApplicationAutoScalingClientTypes.SuspendedState?

    public init (
        maxCapacity: Swift.Int? = nil,
        minCapacity: Swift.Int? = nil,
        resourceId: Swift.String? = nil,
        roleARN: Swift.String? = nil,
        scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension? = nil,
        serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace? = nil,
        suspendedState: ApplicationAutoScalingClientTypes.SuspendedState? = nil
    )
    {
        self.maxCapacity = maxCapacity
        self.minCapacity = minCapacity
        self.resourceId = resourceId
        self.roleARN = roleARN
        self.scalableDimension = scalableDimension
        self.serviceNamespace = serviceNamespace
        self.suspendedState = suspendedState
    }
}

struct RegisterScalableTargetInputBody: Swift.Equatable {
    public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    public let resourceId: Swift.String?
    public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    public let minCapacity: Swift.Int?
    public let maxCapacity: Swift.Int?
    public let roleARN: Swift.String?
    public let suspendedState: ApplicationAutoScalingClientTypes.SuspendedState?
}

extension RegisterScalableTargetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
        case resourceId = "ResourceId"
        case roleARN = "RoleARN"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case suspendedState = "SuspendedState"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let minCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minCapacity)
        minCapacity = minCapacityDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let suspendedStateDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.SuspendedState.self, forKey: .suspendedState)
        suspendedState = suspendedStateDecoded
    }
}

extension RegisterScalableTargetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterScalableTargetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterScalableTargetOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case internalServiceException(InternalServiceException)
    case limitExceededException(LimitExceededException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterScalableTargetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterScalableTargetOutputResponse()"}
}

extension RegisterScalableTargetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RegisterScalableTargetOutputResponse: Swift.Equatable {

    public init() {}
}

struct RegisterScalableTargetOutputResponseBody: Swift.Equatable {
}

extension RegisterScalableTargetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ApplicationAutoScalingClientTypes {
    public enum ScalableDimension: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case appstreamfleetdesiredcapacity
        case cassandratablereadcapacityunits
        case cassandratablewritecapacityunits
        case comprehenddocclassifierendpointinferenceunits
        case comprehendentityrecognizerendpointinferenceunits
        case customresourcescalabledimension
        case dynamodbindexreadcapacityunits
        case dynamodbindexwritecapacityunits
        case dynamodbtablereadcapacityunits
        case dynamodbtablewritecapacityunits
        case ec2spotfleetrequesttargetcapacity
        case ecsservicedesiredcount
        case emrinstancegroupinstancecount
        case kafkabrokerstoragevolumesize
        case lambdafunctionprovisionedconcurrency
        case rdsclusterreadreplicacount
        case sagemakervariantdesiredinstancecount
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalableDimension] {
            return [
                .appstreamfleetdesiredcapacity,
                .cassandratablereadcapacityunits,
                .cassandratablewritecapacityunits,
                .comprehenddocclassifierendpointinferenceunits,
                .comprehendentityrecognizerendpointinferenceunits,
                .customresourcescalabledimension,
                .dynamodbindexreadcapacityunits,
                .dynamodbindexwritecapacityunits,
                .dynamodbtablereadcapacityunits,
                .dynamodbtablewritecapacityunits,
                .ec2spotfleetrequesttargetcapacity,
                .ecsservicedesiredcount,
                .emrinstancegroupinstancecount,
                .kafkabrokerstoragevolumesize,
                .lambdafunctionprovisionedconcurrency,
                .rdsclusterreadreplicacount,
                .sagemakervariantdesiredinstancecount,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .appstreamfleetdesiredcapacity: return "appstream:fleet:DesiredCapacity"
            case .cassandratablereadcapacityunits: return "cassandra:table:ReadCapacityUnits"
            case .cassandratablewritecapacityunits: return "cassandra:table:WriteCapacityUnits"
            case .comprehenddocclassifierendpointinferenceunits: return "comprehend:document-classifier-endpoint:DesiredInferenceUnits"
            case .comprehendentityrecognizerendpointinferenceunits: return "comprehend:entity-recognizer-endpoint:DesiredInferenceUnits"
            case .customresourcescalabledimension: return "custom-resource:ResourceType:Property"
            case .dynamodbindexreadcapacityunits: return "dynamodb:index:ReadCapacityUnits"
            case .dynamodbindexwritecapacityunits: return "dynamodb:index:WriteCapacityUnits"
            case .dynamodbtablereadcapacityunits: return "dynamodb:table:ReadCapacityUnits"
            case .dynamodbtablewritecapacityunits: return "dynamodb:table:WriteCapacityUnits"
            case .ec2spotfleetrequesttargetcapacity: return "ec2:spot-fleet-request:TargetCapacity"
            case .ecsservicedesiredcount: return "ecs:service:DesiredCount"
            case .emrinstancegroupinstancecount: return "elasticmapreduce:instancegroup:InstanceCount"
            case .kafkabrokerstoragevolumesize: return "kafka:broker-storage:VolumeSize"
            case .lambdafunctionprovisionedconcurrency: return "lambda:function:ProvisionedConcurrency"
            case .rdsclusterreadreplicacount: return "rds:cluster:ReadReplicaCount"
            case .sagemakervariantdesiredinstancecount: return "sagemaker:variant:DesiredInstanceCount"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalableDimension(rawValue: rawValue) ?? ScalableDimension.sdkUnknown(rawValue)
        }
    }
}

extension ApplicationAutoScalingClientTypes.ScalableTarget: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
        case resourceId = "ResourceId"
        case roleARN = "RoleARN"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case suspendedState = "SuspendedState"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let minCapacity = minCapacity {
            try encodeContainer.encode(minCapacity, forKey: .minCapacity)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let roleARN = roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let suspendedState = suspendedState {
            try encodeContainer.encode(suspendedState, forKey: .suspendedState)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let minCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minCapacity)
        minCapacity = minCapacityDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let suspendedStateDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.SuspendedState.self, forKey: .suspendedState)
        suspendedState = suspendedStateDecoded
    }
}

extension ApplicationAutoScalingClientTypes.ScalableTarget: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScalableTarget(creationTime: \(Swift.String(describing: creationTime)), maxCapacity: \(Swift.String(describing: maxCapacity)), minCapacity: \(Swift.String(describing: minCapacity)), resourceId: \(Swift.String(describing: resourceId)), roleARN: \(Swift.String(describing: roleARN)), scalableDimension: \(Swift.String(describing: scalableDimension)), serviceNamespace: \(Swift.String(describing: serviceNamespace)), suspendedState: \(Swift.String(describing: suspendedState)))"}
}

extension ApplicationAutoScalingClientTypes {
    /// <p>Represents a scalable target.</p>
    public struct ScalableTarget: Swift.Equatable {
        /// <p>The Unix timestamp for when the scalable target was created.</p>
        public let creationTime: ClientRuntime.Date?
        /// <p>The maximum value to scale to in response to a scale-out activity.</p>
        public let maxCapacity: Swift.Int?
        /// <p>The minimum value to scale to in response to a scale-in activity.</p>
        public let minCapacity: Swift.Int?
        /// <p>The identifier of the resource associated with the scalable target.
        ///       This string consists of the resource type and unique identifier.</p>
        ///          <ul>
        ///             <li>
        ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
        ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        ///                Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        ///                Example: <code>fleet/sample-fleet</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        ///                Example: <code>table/my-table</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        ///                Example: <code>cluster:my-db-cluster</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        ///                Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        ///                is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        ///                   repository</a>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        ///                Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        ///                Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        ///                Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        ///            </li>
        ///          </ul>
        public let resourceId: Swift.String?
        /// <p>The ARN of an IAM role that allows Application Auto Scaling to modify the scalable target on your
        ///          behalf.</p>
        public let roleARN: Swift.String?
        /// <p>The scalable dimension associated with the scalable target.
        ///       This string consists of the service namespace, resource type, and scaling property.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an Amazon SageMaker model endpoint variant.</p>
        ///            </li>
        ///             <li>
        ///               <p>
        ///                   <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>cassandra:table:WriteCapacityUnits</code> -  The provisioned write capacity for an Amazon Keyspaces table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        ///            </li>
        ///          </ul>
        public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
        /// <p>The namespace of the AWS service that provides the resource, or a
        ///             <code>custom-resource</code>.</p>
        public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
        /// <p>Specifies whether the scaling activities for a scalable target are in a suspended state.
        ///       </p>
        public let suspendedState: ApplicationAutoScalingClientTypes.SuspendedState?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            maxCapacity: Swift.Int? = nil,
            minCapacity: Swift.Int? = nil,
            resourceId: Swift.String? = nil,
            roleARN: Swift.String? = nil,
            scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension? = nil,
            serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace? = nil,
            suspendedState: ApplicationAutoScalingClientTypes.SuspendedState? = nil
        )
        {
            self.creationTime = creationTime
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
            self.resourceId = resourceId
            self.roleARN = roleARN
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
            self.suspendedState = suspendedState
        }
    }

}

extension ApplicationAutoScalingClientTypes.ScalableTargetAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let minCapacity = minCapacity {
            try encodeContainer.encode(minCapacity, forKey: .minCapacity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minCapacity)
        minCapacity = minCapacityDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
    }
}

extension ApplicationAutoScalingClientTypes.ScalableTargetAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScalableTargetAction(maxCapacity: \(Swift.String(describing: maxCapacity)), minCapacity: \(Swift.String(describing: minCapacity)))"}
}

extension ApplicationAutoScalingClientTypes {
    /// <p>Represents the minimum and maximum capacity for a scheduled action.</p>
    public struct ScalableTargetAction: Swift.Equatable {
        /// <p>The maximum capacity.</p>
        ///          <p>Although you can specify a large maximum capacity, note that service quotas may impose
        ///          lower limits. Each service has its own default quotas for the maximum capacity of the
        ///          resource. If you want to specify a higher limit, you can request an increase. For more
        ///          information, consult the documentation for that service. For information about the default
        ///          quotas for each service, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-service-information.html">Service Endpoints and
        ///             Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
        public let maxCapacity: Swift.Int?
        /// <p>The minimum capacity.</p>
        ///          <p>For certain resources, the minimum value allowed is 0. This includes Lambda provisioned
        ///       concurrency, Spot Fleet, ECS services, Aurora DB clusters, EMR clusters, and custom resources.
        ///       For all other resources, the minimum value allowed is 1.</p>
        public let minCapacity: Swift.Int?

        public init (
            maxCapacity: Swift.Int? = nil,
            minCapacity: Swift.Int? = nil
        )
        {
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
        }
    }

}

extension ApplicationAutoScalingClientTypes.ScalingActivity: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityId = "ActivityId"
        case cause = "Cause"
        case description = "Description"
        case details = "Details"
        case endTime = "EndTime"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case startTime = "StartTime"
        case statusCode = "StatusCode"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
        if let cause = cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let statusCode = statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalingActivityStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension ApplicationAutoScalingClientTypes.ScalingActivity: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScalingActivity(activityId: \(Swift.String(describing: activityId)), cause: \(Swift.String(describing: cause)), description: \(Swift.String(describing: description)), details: \(Swift.String(describing: details)), endTime: \(Swift.String(describing: endTime)), resourceId: \(Swift.String(describing: resourceId)), scalableDimension: \(Swift.String(describing: scalableDimension)), serviceNamespace: \(Swift.String(describing: serviceNamespace)), startTime: \(Swift.String(describing: startTime)), statusCode: \(Swift.String(describing: statusCode)), statusMessage: \(Swift.String(describing: statusMessage)))"}
}

extension ApplicationAutoScalingClientTypes {
    /// <p>Represents a scaling activity.</p>
    public struct ScalingActivity: Swift.Equatable {
        /// <p>The unique identifier of the scaling activity.</p>
        public let activityId: Swift.String?
        /// <p>A simple description of what caused the scaling activity to happen.</p>
        public let cause: Swift.String?
        /// <p>A simple description of what action the scaling activity intends to accomplish.</p>
        public let description: Swift.String?
        /// <p>The details about the scaling activity.</p>
        public let details: Swift.String?
        /// <p>The Unix timestamp for when the scaling activity ended.</p>
        public let endTime: ClientRuntime.Date?
        /// <p>The identifier of the resource associated with the scaling activity.
        ///       This string consists of the resource type and unique identifier.</p>
        ///          <ul>
        ///             <li>
        ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
        ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        ///                Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        ///                Example: <code>fleet/sample-fleet</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        ///                Example: <code>table/my-table</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        ///                Example: <code>cluster:my-db-cluster</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        ///                Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        ///                is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        ///                   repository</a>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        ///                Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        ///                Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        ///                Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        ///            </li>
        ///          </ul>
        public let resourceId: Swift.String?
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an Amazon SageMaker model endpoint variant.</p>
        ///            </li>
        ///             <li>
        ///               <p>
        ///                   <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>cassandra:table:WriteCapacityUnits</code> -  The provisioned write capacity for an Amazon Keyspaces table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        ///            </li>
        ///          </ul>
        public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
        /// <p>The namespace of the AWS service that provides the resource, or a
        ///             <code>custom-resource</code>.</p>
        public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
        /// <p>The Unix timestamp for when the scaling activity began.</p>
        public let startTime: ClientRuntime.Date?
        /// <p>Indicates the status of the scaling activity.</p>
        public let statusCode: ApplicationAutoScalingClientTypes.ScalingActivityStatusCode?
        /// <p>A simple message about the current status of the scaling activity.</p>
        public let statusMessage: Swift.String?

        public init (
            activityId: Swift.String? = nil,
            cause: Swift.String? = nil,
            description: Swift.String? = nil,
            details: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            resourceId: Swift.String? = nil,
            scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension? = nil,
            serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace? = nil,
            startTime: ClientRuntime.Date? = nil,
            statusCode: ApplicationAutoScalingClientTypes.ScalingActivityStatusCode? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.activityId = activityId
            self.cause = cause
            self.description = description
            self.details = details
            self.endTime = endTime
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
            self.startTime = startTime
            self.statusCode = statusCode
            self.statusMessage = statusMessage
        }
    }

}

extension ApplicationAutoScalingClientTypes {
    public enum ScalingActivityStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inprogress
        case overridden
        case pending
        case successful
        case unfulfilled
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingActivityStatusCode] {
            return [
                .failed,
                .inprogress,
                .overridden,
                .pending,
                .successful,
                .unfulfilled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .overridden: return "Overridden"
            case .pending: return "Pending"
            case .successful: return "Successful"
            case .unfulfilled: return "Unfulfilled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalingActivityStatusCode(rawValue: rawValue) ?? ScalingActivityStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension ApplicationAutoScalingClientTypes.ScalingPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarms = "Alarms"
        case creationTime = "CreationTime"
        case policyARN = "PolicyARN"
        case policyName = "PolicyName"
        case policyType = "PolicyType"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case stepScalingPolicyConfiguration = "StepScalingPolicyConfiguration"
        case targetTrackingScalingPolicyConfiguration = "TargetTrackingScalingPolicyConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarms = alarms {
            var alarmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alarms)
            for alarms0 in alarms {
                try alarmsContainer.encode(alarms0)
            }
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let policyARN = policyARN {
            try encodeContainer.encode(policyARN, forKey: .policyARN)
        }
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyType = policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let stepScalingPolicyConfiguration = stepScalingPolicyConfiguration {
            try encodeContainer.encode(stepScalingPolicyConfiguration, forKey: .stepScalingPolicyConfiguration)
        }
        if let targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration {
            try encodeContainer.encode(targetTrackingScalingPolicyConfiguration, forKey: .targetTrackingScalingPolicyConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyARN)
        policyARN = policyARNDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let stepScalingPolicyConfigurationDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.StepScalingPolicyConfiguration.self, forKey: .stepScalingPolicyConfiguration)
        stepScalingPolicyConfiguration = stepScalingPolicyConfigurationDecoded
        let targetTrackingScalingPolicyConfigurationDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.TargetTrackingScalingPolicyConfiguration.self, forKey: .targetTrackingScalingPolicyConfiguration)
        targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfigurationDecoded
        let alarmsContainer = try containerValues.decodeIfPresent([ApplicationAutoScalingClientTypes.Alarm?].self, forKey: .alarms)
        var alarmsDecoded0:[ApplicationAutoScalingClientTypes.Alarm]? = nil
        if let alarmsContainer = alarmsContainer {
            alarmsDecoded0 = [ApplicationAutoScalingClientTypes.Alarm]()
            for structure0 in alarmsContainer {
                if let structure0 = structure0 {
                    alarmsDecoded0?.append(structure0)
                }
            }
        }
        alarms = alarmsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension ApplicationAutoScalingClientTypes.ScalingPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScalingPolicy(alarms: \(Swift.String(describing: alarms)), creationTime: \(Swift.String(describing: creationTime)), policyARN: \(Swift.String(describing: policyARN)), policyName: \(Swift.String(describing: policyName)), policyType: \(Swift.String(describing: policyType)), resourceId: \(Swift.String(describing: resourceId)), scalableDimension: \(Swift.String(describing: scalableDimension)), serviceNamespace: \(Swift.String(describing: serviceNamespace)), stepScalingPolicyConfiguration: \(Swift.String(describing: stepScalingPolicyConfiguration)), targetTrackingScalingPolicyConfiguration: \(Swift.String(describing: targetTrackingScalingPolicyConfiguration)))"}
}

extension ApplicationAutoScalingClientTypes {
    /// <p>Represents a scaling policy to use with Application Auto Scaling.</p>
    ///          <p>For more information about configuring scaling policies for a specific service, see
    ///             <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/getting-started.html">Getting started with Application Auto Scaling</a> in the
    ///          <i>Application Auto Scaling User Guide</i>.</p>
    public struct ScalingPolicy: Swift.Equatable {
        /// <p>The CloudWatch alarms associated with the scaling policy.</p>
        public let alarms: [ApplicationAutoScalingClientTypes.Alarm]?
        /// <p>The Unix timestamp for when the scaling policy was created.</p>
        public let creationTime: ClientRuntime.Date?
        /// <p>The Amazon Resource Name (ARN) of the scaling policy.</p>
        public let policyARN: Swift.String?
        /// <p>The name of the scaling policy.</p>
        public let policyName: Swift.String?
        /// <p>The scaling policy type.</p>
        public let policyType: ApplicationAutoScalingClientTypes.PolicyType?
        /// <p>The identifier of the resource associated with the scaling policy.
        ///       This string consists of the resource type and unique identifier.</p>
        ///          <ul>
        ///             <li>
        ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
        ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        ///                Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        ///                Example: <code>fleet/sample-fleet</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        ///                Example: <code>table/my-table</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        ///                Example: <code>cluster:my-db-cluster</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        ///                Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        ///                is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        ///                   repository</a>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        ///                Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        ///                Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        ///                Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        ///            </li>
        ///          </ul>
        public let resourceId: Swift.String?
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an Amazon SageMaker model endpoint variant.</p>
        ///            </li>
        ///             <li>
        ///               <p>
        ///                   <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>cassandra:table:WriteCapacityUnits</code> -  The provisioned write capacity for an Amazon Keyspaces table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        ///            </li>
        ///          </ul>
        public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
        /// <p>The namespace of the AWS service that provides the resource, or a
        ///             <code>custom-resource</code>.</p>
        public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
        /// <p>A step scaling policy.</p>
        public let stepScalingPolicyConfiguration: ApplicationAutoScalingClientTypes.StepScalingPolicyConfiguration?
        /// <p>A target tracking scaling policy.</p>
        public let targetTrackingScalingPolicyConfiguration: ApplicationAutoScalingClientTypes.TargetTrackingScalingPolicyConfiguration?

        public init (
            alarms: [ApplicationAutoScalingClientTypes.Alarm]? = nil,
            creationTime: ClientRuntime.Date? = nil,
            policyARN: Swift.String? = nil,
            policyName: Swift.String? = nil,
            policyType: ApplicationAutoScalingClientTypes.PolicyType? = nil,
            resourceId: Swift.String? = nil,
            scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension? = nil,
            serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace? = nil,
            stepScalingPolicyConfiguration: ApplicationAutoScalingClientTypes.StepScalingPolicyConfiguration? = nil,
            targetTrackingScalingPolicyConfiguration: ApplicationAutoScalingClientTypes.TargetTrackingScalingPolicyConfiguration? = nil
        )
        {
            self.alarms = alarms
            self.creationTime = creationTime
            self.policyARN = policyARN
            self.policyName = policyName
            self.policyType = policyType
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
            self.stepScalingPolicyConfiguration = stepScalingPolicyConfiguration
            self.targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration
        }
    }

}

extension ApplicationAutoScalingClientTypes.ScheduledAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case endTime = "EndTime"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scalableTargetAction = "ScalableTargetAction"
        case schedule = "Schedule"
        case scheduledActionARN = "ScheduledActionARN"
        case scheduledActionName = "ScheduledActionName"
        case serviceNamespace = "ServiceNamespace"
        case startTime = "StartTime"
        case timezone = "Timezone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let scalableTargetAction = scalableTargetAction {
            try encodeContainer.encode(scalableTargetAction, forKey: .scalableTargetAction)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let scheduledActionARN = scheduledActionARN {
            try encodeContainer.encode(scheduledActionARN, forKey: .scheduledActionARN)
        }
        if let scheduledActionName = scheduledActionName {
            try encodeContainer.encode(scheduledActionName, forKey: .scheduledActionName)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let timezone = timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let scheduledActionARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionARN)
        scheduledActionARN = scheduledActionARNDecoded
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let scalableTargetActionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableTargetAction.self, forKey: .scalableTargetAction)
        scalableTargetAction = scalableTargetActionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension ApplicationAutoScalingClientTypes.ScheduledAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScheduledAction(creationTime: \(Swift.String(describing: creationTime)), endTime: \(Swift.String(describing: endTime)), resourceId: \(Swift.String(describing: resourceId)), scalableDimension: \(Swift.String(describing: scalableDimension)), scalableTargetAction: \(Swift.String(describing: scalableTargetAction)), schedule: \(Swift.String(describing: schedule)), scheduledActionARN: \(Swift.String(describing: scheduledActionARN)), scheduledActionName: \(Swift.String(describing: scheduledActionName)), serviceNamespace: \(Swift.String(describing: serviceNamespace)), startTime: \(Swift.String(describing: startTime)), timezone: \(Swift.String(describing: timezone)))"}
}

extension ApplicationAutoScalingClientTypes {
    /// <p>Represents a scheduled action.</p>
    public struct ScheduledAction: Swift.Equatable {
        /// <p>The date and time that the scheduled action was created.</p>
        public let creationTime: ClientRuntime.Date?
        /// <p>The date and time that the action is scheduled to end, in UTC.</p>
        public let endTime: ClientRuntime.Date?
        /// <p>The identifier of the resource associated with the scaling policy.
        ///       This string consists of the resource type and unique identifier.</p>
        ///          <ul>
        ///             <li>
        ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
        ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>EMR cluster - The resource type is <code>instancegroup</code> and the unique identifier is the cluster ID and instance group ID.
        ///                Example: <code>instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>AppStream 2.0 fleet - The resource type is <code>fleet</code> and the unique identifier is the fleet name.
        ///                Example: <code>fleet/sample-fleet</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the table name.
        ///                Example: <code>table/my-table</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the index name.
        ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        ///                Example: <code>cluster:my-db-cluster</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon SageMaker endpoint variant - The resource type is <code>variant</code> and the unique identifier is the resource ID.
        ///                Example: <code>endpoint/my-end-point/variant/KMeansClustering</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Custom resources are not supported with a resource type. This parameter must specify the <code>OutputValue</code> from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information
        ///                is available in our <a href="https://github.com/aws/aws-auto-scaling-custom-resource">GitHub
        ///                   repository</a>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: <code>arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Lambda provisioned concurrency - The resource type is <code>function</code> and the unique identifier is the function name with a function version or alias name suffix that is not <code>$LATEST</code>.
        ///                Example: <code>function:my-function:prod</code> or <code>function:my-function:1</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Keyspaces table - The resource type is <code>table</code> and the unique identifier is the table name.
        ///                Example: <code>keyspace/mykeyspace/table/mytable</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN.
        ///                Example: <code>arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5</code>.</p>
        ///            </li>
        ///          </ul>
        public let resourceId: Swift.String?
        /// <p>The scalable dimension. This string consists of the service namespace, resource type, and scaling property.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>elasticmapreduce:instancegroup:InstanceCount</code> - The instance count of an EMR Instance Group.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>appstream:fleet:DesiredCapacity</code> - The desired capacity of an AppStream 2.0 fleet.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>sagemaker:variant:DesiredInstanceCount</code> - The number of EC2 instances for an Amazon SageMaker model endpoint variant.</p>
        ///            </li>
        ///             <li>
        ///               <p>
        ///                   <code>custom-resource:ResourceType:Property</code> - The scalable dimension for a custom resource provided by your own application or service.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>comprehend:document-classifier-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend document classification endpoint.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>comprehend:entity-recognizer-endpoint:DesiredInferenceUnits</code> - The number of inference units for an Amazon Comprehend entity recognizer endpoint.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>lambda:function:ProvisionedConcurrency</code> - The provisioned concurrency for a Lambda function.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>cassandra:table:ReadCapacityUnits</code> - The provisioned read capacity for an Amazon Keyspaces table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>cassandra:table:WriteCapacityUnits</code> -  The provisioned write capacity for an Amazon Keyspaces table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>kafka:broker-storage:VolumeSize</code> - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.</p>
        ///            </li>
        ///          </ul>
        public let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
        /// <p>The new minimum and maximum capacity. You can set both values or just one. At the
        ///          scheduled time, if the current capacity is below the minimum capacity, Application Auto Scaling scales out
        ///          to the minimum capacity. If the current capacity is above the maximum capacity, Application Auto Scaling
        ///          scales in to the maximum capacity.</p>
        public let scalableTargetAction: ApplicationAutoScalingClientTypes.ScalableTargetAction?
        /// <p>The schedule for this action. The following formats are supported:</p>
        ///          <ul>
        ///             <li>
        ///                <p>At expressions - "<code>at(<i>yyyy</i>-<i>mm</i>-<i>dd</i>T<i>hh</i>:<i>mm</i>:<i>ss</i>)</code>"</p>
        ///             </li>
        ///             <li>
        ///                <p>Rate expressions - "<code>rate(<i>value</i>
        ///                      <i>unit</i>)</code>"</p>
        ///             </li>
        ///             <li>
        ///                <p>Cron expressions - "<code>cron(<i>fields</i>)</code>"</p>
        ///             </li>
        ///          </ul>
        ///          <p>At expressions are useful for one-time schedules. Cron expressions are useful for
        ///          scheduled actions that run periodically at a specified date and time, and rate expressions
        ///          are useful for scheduled actions that run at a regular interval.</p>
        ///          <p>At and cron expressions use Universal Coordinated Time (UTC) by
        ///          default.</p>
        ///          <p>The cron format consists of six fields separated by white spaces: [Minutes] [Hours] [Day_of_Month] [Month] [Day_of_Week] [Year].</p>
        ///          <p>For rate expressions, <i>value</i> is a positive integer and <i>unit</i> is
        ///          <code>minute</code> | <code>minutes</code> | <code>hour</code> | <code>hours</code> | <code>day</code> | <code>days</code>.</p>
        ///            <p>For more information and examples, see <a href="https://docs.aws.amazon.com/autoscaling/application/userguide/examples-scheduled-actions.html">Example scheduled actions for Application Auto Scaling</a> in the <i>Application Auto Scaling User Guide</i>.</p>
        public let schedule: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the scheduled action.</p>
        public let scheduledActionARN: Swift.String?
        /// <p>The name of the scheduled action.</p>
        public let scheduledActionName: Swift.String?
        /// <p>The namespace of the AWS service that provides the resource, or a
        ///             <code>custom-resource</code>.</p>
        public let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
        /// <p>The date and time that the action is scheduled to begin, in UTC.</p>
        public let startTime: ClientRuntime.Date?
        /// <p>The time zone used when referring to the date and time of a scheduled action, when the
        ///          scheduled action uses an at or cron expression.</p>
        public let timezone: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            endTime: ClientRuntime.Date? = nil,
            resourceId: Swift.String? = nil,
            scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension? = nil,
            scalableTargetAction: ApplicationAutoScalingClientTypes.ScalableTargetAction? = nil,
            schedule: Swift.String? = nil,
            scheduledActionARN: Swift.String? = nil,
            scheduledActionName: Swift.String? = nil,
            serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace? = nil,
            startTime: ClientRuntime.Date? = nil,
            timezone: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.endTime = endTime
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.scalableTargetAction = scalableTargetAction
            self.schedule = schedule
            self.scheduledActionARN = scheduledActionARN
            self.scheduledActionName = scheduledActionName
            self.serviceNamespace = serviceNamespace
            self.startTime = startTime
            self.timezone = timezone
        }
    }

}

extension ApplicationAutoScalingClientTypes {
    public enum ServiceNamespace: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case appstream
        case cassandra
        case comprehend
        case customResource
        case dynamodb
        case ec2
        case ecs
        case emr
        case kafka
        case lambda
        case rds
        case sagemaker
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceNamespace] {
            return [
                .appstream,
                .cassandra,
                .comprehend,
                .customResource,
                .dynamodb,
                .ec2,
                .ecs,
                .emr,
                .kafka,
                .lambda,
                .rds,
                .sagemaker,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .appstream: return "appstream"
            case .cassandra: return "cassandra"
            case .comprehend: return "comprehend"
            case .customResource: return "custom-resource"
            case .dynamodb: return "dynamodb"
            case .ec2: return "ec2"
            case .ecs: return "ecs"
            case .emr: return "elasticmapreduce"
            case .kafka: return "kafka"
            case .lambda: return "lambda"
            case .rds: return "rds"
            case .sagemaker: return "sagemaker"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServiceNamespace(rawValue: rawValue) ?? ServiceNamespace.sdkUnknown(rawValue)
        }
    }
}

extension ApplicationAutoScalingClientTypes.StepAdjustment: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricIntervalLowerBound = "MetricIntervalLowerBound"
        case metricIntervalUpperBound = "MetricIntervalUpperBound"
        case scalingAdjustment = "ScalingAdjustment"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricIntervalLowerBound = metricIntervalLowerBound {
            try encodeContainer.encode(metricIntervalLowerBound, forKey: .metricIntervalLowerBound)
        }
        if let metricIntervalUpperBound = metricIntervalUpperBound {
            try encodeContainer.encode(metricIntervalUpperBound, forKey: .metricIntervalUpperBound)
        }
        if let scalingAdjustment = scalingAdjustment {
            try encodeContainer.encode(scalingAdjustment, forKey: .scalingAdjustment)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricIntervalLowerBoundDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .metricIntervalLowerBound)
        metricIntervalLowerBound = metricIntervalLowerBoundDecoded
        let metricIntervalUpperBoundDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .metricIntervalUpperBound)
        metricIntervalUpperBound = metricIntervalUpperBoundDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
    }
}

extension ApplicationAutoScalingClientTypes.StepAdjustment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StepAdjustment(metricIntervalLowerBound: \(Swift.String(describing: metricIntervalLowerBound)), metricIntervalUpperBound: \(Swift.String(describing: metricIntervalUpperBound)), scalingAdjustment: \(Swift.String(describing: scalingAdjustment)))"}
}

extension ApplicationAutoScalingClientTypes {
    /// <p>Represents a step adjustment for a <a href="https://docs.aws.amazon.com/autoscaling/application/APIReference/API_StepScalingPolicyConfiguration.html">StepScalingPolicyConfiguration</a>. Describes an adjustment based on the difference
    ///          between the value of the aggregated CloudWatch metric and the breach threshold that you've
    ///          defined for the alarm. </p>
    ///          <p>For the following examples, suppose that you have an alarm with a breach threshold of
    ///          50:</p>
    ///          <ul>
    ///             <li>
    ///                <p>To trigger the adjustment when the metric is greater than or equal to 50 and less
    ///                than 60, specify a lower bound of 0 and an upper bound of 10.</p>
    ///             </li>
    ///             <li>
    ///                <p>To trigger the adjustment when the metric is greater than 40 and less than or
    ///                equal to 50, specify a lower bound of -10 and an upper bound of 0.</p>
    ///             </li>
    ///          </ul>
    ///          <p>There are a few rules for the step adjustments for your step policy:</p>
    ///          <ul>
    ///             <li>
    ///                <p>The ranges of your step adjustments can't overlap or have a gap.</p>
    ///             </li>
    ///             <li>
    ///                <p>At most one step adjustment can have a null lower bound. If one step adjustment
    ///                has a negative lower bound, then there must be a step adjustment with a null lower
    ///                bound.</p>
    ///             </li>
    ///             <li>
    ///                <p>At most one step adjustment can have a null upper bound. If one step adjustment
    ///                has a positive upper bound, then there must be a step adjustment with a null upper
    ///                bound.</p>
    ///             </li>
    ///             <li>
    ///                <p>The upper and lower bound can't be null in the same step adjustment.</p>
    ///             </li>
    ///          </ul>
    public struct StepAdjustment: Swift.Equatable {
        /// <p>The lower bound for the difference between the alarm threshold and the CloudWatch metric. If
        ///          the metric value is above the breach threshold, the lower bound is inclusive (the metric
        ///          must be greater than or equal to the threshold plus the lower bound). Otherwise, it is
        ///          exclusive (the metric must be greater than the threshold plus the lower bound). A null
        ///          value indicates negative infinity.</p>
        public let metricIntervalLowerBound: Swift.Double?
        /// <p>The upper bound for the difference between the alarm threshold and the CloudWatch metric. If
        ///          the metric value is above the breach threshold, the upper bound is exclusive (the metric
        ///          must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the
        ///          metric must be less than or equal to the threshold plus the upper bound). A null value
        ///          indicates positive infinity.</p>
        ///          <p>The upper bound must be greater than the lower bound.</p>
        public let metricIntervalUpperBound: Swift.Double?
        /// <p>The amount by which to scale, based on the specified adjustment type. A positive value
        ///          adds to the current capacity while a negative number removes from the current capacity. For
        ///          exact capacity, you must specify a positive value.</p>
        public let scalingAdjustment: Swift.Int?

        public init (
            metricIntervalLowerBound: Swift.Double? = nil,
            metricIntervalUpperBound: Swift.Double? = nil,
            scalingAdjustment: Swift.Int? = nil
        )
        {
            self.metricIntervalLowerBound = metricIntervalLowerBound
            self.metricIntervalUpperBound = metricIntervalUpperBound
            self.scalingAdjustment = scalingAdjustment
        }
    }

}

extension ApplicationAutoScalingClientTypes.StepScalingPolicyConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjustmentType = "AdjustmentType"
        case cooldown = "Cooldown"
        case metricAggregationType = "MetricAggregationType"
        case minAdjustmentMagnitude = "MinAdjustmentMagnitude"
        case stepAdjustments = "StepAdjustments"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adjustmentType = adjustmentType {
            try encodeContainer.encode(adjustmentType.rawValue, forKey: .adjustmentType)
        }
        if let cooldown = cooldown {
            try encodeContainer.encode(cooldown, forKey: .cooldown)
        }
        if let metricAggregationType = metricAggregationType {
            try encodeContainer.encode(metricAggregationType.rawValue, forKey: .metricAggregationType)
        }
        if let minAdjustmentMagnitude = minAdjustmentMagnitude {
            try encodeContainer.encode(minAdjustmentMagnitude, forKey: .minAdjustmentMagnitude)
        }
        if let stepAdjustments = stepAdjustments {
            var stepAdjustmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stepAdjustments)
            for stepadjustments0 in stepAdjustments {
                try stepAdjustmentsContainer.encode(stepadjustments0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adjustmentTypeDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.AdjustmentType.self, forKey: .adjustmentType)
        adjustmentType = adjustmentTypeDecoded
        let stepAdjustmentsContainer = try containerValues.decodeIfPresent([ApplicationAutoScalingClientTypes.StepAdjustment?].self, forKey: .stepAdjustments)
        var stepAdjustmentsDecoded0:[ApplicationAutoScalingClientTypes.StepAdjustment]? = nil
        if let stepAdjustmentsContainer = stepAdjustmentsContainer {
            stepAdjustmentsDecoded0 = [ApplicationAutoScalingClientTypes.StepAdjustment]()
            for structure0 in stepAdjustmentsContainer {
                if let structure0 = structure0 {
                    stepAdjustmentsDecoded0?.append(structure0)
                }
            }
        }
        stepAdjustments = stepAdjustmentsDecoded0
        let minAdjustmentMagnitudeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minAdjustmentMagnitude)
        minAdjustmentMagnitude = minAdjustmentMagnitudeDecoded
        let cooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cooldown)
        cooldown = cooldownDecoded
        let metricAggregationTypeDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.MetricAggregationType.self, forKey: .metricAggregationType)
        metricAggregationType = metricAggregationTypeDecoded
    }
}

extension ApplicationAutoScalingClientTypes.StepScalingPolicyConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StepScalingPolicyConfiguration(adjustmentType: \(Swift.String(describing: adjustmentType)), cooldown: \(Swift.String(describing: cooldown)), metricAggregationType: \(Swift.String(describing: metricAggregationType)), minAdjustmentMagnitude: \(Swift.String(describing: minAdjustmentMagnitude)), stepAdjustments: \(Swift.String(describing: stepAdjustments)))"}
}

extension ApplicationAutoScalingClientTypes {
    /// <p>Represents a step scaling policy configuration to use with Application Auto Scaling.</p>
    public struct StepScalingPolicyConfiguration: Swift.Equatable {
        /// <p>Specifies how the <code>ScalingAdjustment</code> value in a <a href="https://docs.aws.amazon.com/autoscaling/application/APIReference/API_StepAdjustment.html">StepAdjustment</a> is interpreted (for example, an absolute number or a
        ///          percentage). The valid values are <code>ChangeInCapacity</code>,
        ///          <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>. </p>
        ///          <p>
        ///             <code>AdjustmentType</code> is required if you are adding a new step scaling policy
        ///          configuration.</p>
        public let adjustmentType: ApplicationAutoScalingClientTypes.AdjustmentType?
        /// <p>The amount of time, in seconds, to wait for a previous scaling activity to take effect. </p>
        ///          <p>With scale-out policies, the intention is to continuously (but not excessively) scale out.
        ///       After Application Auto Scaling successfully scales out using a step scaling policy, it starts to calculate the
        ///       cooldown time. The scaling policy won't increase the desired capacity again unless either a
        ///       larger scale out is triggered or the cooldown period ends. While the cooldown period is in
        ///       effect, capacity added by the initiating scale-out activity is calculated as part of the
        ///       desired capacity for the next scale-out activity. For example, when an alarm triggers a step
        ///       scaling policy to increase the capacity by 2, the scaling activity completes successfully, and
        ///       a cooldown period starts. If the alarm triggers again during the cooldown period but at a more
        ///       aggressive step adjustment of 3, the previous increase of 2 is considered part of the current
        ///       capacity. Therefore, only 1 is added to the capacity.</p>
        ///          <p>With scale-in policies, the intention is to scale in conservatively to protect your
        ///       application’s availability, so scale-in activities are blocked until the cooldown period has
        ///       expired. However, if another alarm triggers a scale-out activity during the cooldown period
        ///       after a scale-in activity, Application Auto Scaling scales out the target immediately. In this case, the
        ///       cooldown period for the scale-in activity stops and doesn't complete.</p>
        ///          <p>Application Auto Scaling provides a default value of 300 for the following scalable targets:</p>
        ///          <ul>
        ///             <li>
        ///                <p>ECS services</p>
        ///            </li>
        ///             <li>
        ///                <p>Spot Fleet requests</p>
        ///            </li>
        ///             <li>
        ///                <p>EMR clusters</p>
        ///            </li>
        ///             <li>
        ///                <p>AppStream 2.0 fleets</p>
        ///            </li>
        ///             <li>
        ///                <p>Aurora DB clusters</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon SageMaker endpoint variants</p>
        ///            </li>
        ///             <li>
        ///                <p>Custom resources</p>
        ///            </li>
        ///          </ul>
        ///          <p>For all other scalable targets, the default value is 0:</p>
        ///          <ul>
        ///             <li>
        ///                <p>DynamoDB tables</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB global secondary indexes</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Comprehend document classification and entity recognizer endpoints</p>
        ///            </li>
        ///             <li>
        ///                <p>Lambda provisioned concurrency</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Keyspaces tables</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon MSK broker storage</p>
        ///            </li>
        ///          </ul>
        public let cooldown: Swift.Int?
        /// <p>The aggregation type for the CloudWatch metrics. Valid values are <code>Minimum</code>,
        ///             <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the
        ///          value is treated as <code>Average</code>.</p>
        public let metricAggregationType: ApplicationAutoScalingClientTypes.MetricAggregationType?
        /// <p>The minimum value to scale by when the adjustment type is
        ///             <code>PercentChangeInCapacity</code>. For example, suppose that you create a step
        ///          scaling policy to scale out an Amazon ECS service by 25 percent and you specify a
        ///             <code>MinAdjustmentMagnitude</code> of 2. If the service has 4 tasks and the scaling
        ///          policy is performed, 25 percent of 4 is 1. However, because you specified a
        ///             <code>MinAdjustmentMagnitude</code> of 2, Application Auto Scaling scales out the service by 2
        ///          tasks.</p>
        public let minAdjustmentMagnitude: Swift.Int?
        /// <p>A set of adjustments that enable you to scale based on the size of the alarm
        ///          breach.</p>
        ///          <p>At least one step adjustment is required if you are adding a new step scaling policy
        ///          configuration.</p>
        public let stepAdjustments: [ApplicationAutoScalingClientTypes.StepAdjustment]?

        public init (
            adjustmentType: ApplicationAutoScalingClientTypes.AdjustmentType? = nil,
            cooldown: Swift.Int? = nil,
            metricAggregationType: ApplicationAutoScalingClientTypes.MetricAggregationType? = nil,
            minAdjustmentMagnitude: Swift.Int? = nil,
            stepAdjustments: [ApplicationAutoScalingClientTypes.StepAdjustment]? = nil
        )
        {
            self.adjustmentType = adjustmentType
            self.cooldown = cooldown
            self.metricAggregationType = metricAggregationType
            self.minAdjustmentMagnitude = minAdjustmentMagnitude
            self.stepAdjustments = stepAdjustments
        }
    }

}

extension ApplicationAutoScalingClientTypes.SuspendedState: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dynamicScalingInSuspended = "DynamicScalingInSuspended"
        case dynamicScalingOutSuspended = "DynamicScalingOutSuspended"
        case scheduledScalingSuspended = "ScheduledScalingSuspended"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dynamicScalingInSuspended = dynamicScalingInSuspended {
            try encodeContainer.encode(dynamicScalingInSuspended, forKey: .dynamicScalingInSuspended)
        }
        if let dynamicScalingOutSuspended = dynamicScalingOutSuspended {
            try encodeContainer.encode(dynamicScalingOutSuspended, forKey: .dynamicScalingOutSuspended)
        }
        if let scheduledScalingSuspended = scheduledScalingSuspended {
            try encodeContainer.encode(scheduledScalingSuspended, forKey: .scheduledScalingSuspended)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dynamicScalingInSuspendedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dynamicScalingInSuspended)
        dynamicScalingInSuspended = dynamicScalingInSuspendedDecoded
        let dynamicScalingOutSuspendedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dynamicScalingOutSuspended)
        dynamicScalingOutSuspended = dynamicScalingOutSuspendedDecoded
        let scheduledScalingSuspendedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .scheduledScalingSuspended)
        scheduledScalingSuspended = scheduledScalingSuspendedDecoded
    }
}

extension ApplicationAutoScalingClientTypes.SuspendedState: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SuspendedState(dynamicScalingInSuspended: \(Swift.String(describing: dynamicScalingInSuspended)), dynamicScalingOutSuspended: \(Swift.String(describing: dynamicScalingOutSuspended)), scheduledScalingSuspended: \(Swift.String(describing: scheduledScalingSuspended)))"}
}

extension ApplicationAutoScalingClientTypes {
    /// <p>Specifies whether the scaling activities for a scalable target are in a suspended state.
    ///       </p>
    public struct SuspendedState: Swift.Equatable {
        /// <p>Whether scale in by a target tracking scaling policy or a step scaling policy is
        ///          suspended. Set the value to <code>true</code> if you don't want Application Auto Scaling to remove capacity
        ///          when a scaling policy is triggered. The default is <code>false</code>. </p>
        public let dynamicScalingInSuspended: Swift.Bool?
        /// <p>Whether scale out by a target tracking scaling policy or a step scaling policy is
        ///          suspended. Set the value to <code>true</code> if you don't want Application Auto Scaling to add capacity
        ///          when a scaling policy is triggered. The default is <code>false</code>. </p>
        public let dynamicScalingOutSuspended: Swift.Bool?
        /// <p>Whether scheduled scaling is suspended. Set the value to <code>true</code> if you don't
        ///          want Application Auto Scaling to add or remove capacity by initiating scheduled actions. The default is
        ///             <code>false</code>. </p>
        public let scheduledScalingSuspended: Swift.Bool?

        public init (
            dynamicScalingInSuspended: Swift.Bool? = nil,
            dynamicScalingOutSuspended: Swift.Bool? = nil,
            scheduledScalingSuspended: Swift.Bool? = nil
        )
        {
            self.dynamicScalingInSuspended = dynamicScalingInSuspended
            self.dynamicScalingOutSuspended = dynamicScalingOutSuspended
            self.scheduledScalingSuspended = scheduledScalingSuspended
        }
    }

}

extension ApplicationAutoScalingClientTypes.TargetTrackingScalingPolicyConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customizedMetricSpecification = "CustomizedMetricSpecification"
        case disableScaleIn = "DisableScaleIn"
        case predefinedMetricSpecification = "PredefinedMetricSpecification"
        case scaleInCooldown = "ScaleInCooldown"
        case scaleOutCooldown = "ScaleOutCooldown"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customizedMetricSpecification = customizedMetricSpecification {
            try encodeContainer.encode(customizedMetricSpecification, forKey: .customizedMetricSpecification)
        }
        if let disableScaleIn = disableScaleIn {
            try encodeContainer.encode(disableScaleIn, forKey: .disableScaleIn)
        }
        if let predefinedMetricSpecification = predefinedMetricSpecification {
            try encodeContainer.encode(predefinedMetricSpecification, forKey: .predefinedMetricSpecification)
        }
        if let scaleInCooldown = scaleInCooldown {
            try encodeContainer.encode(scaleInCooldown, forKey: .scaleInCooldown)
        }
        if let scaleOutCooldown = scaleOutCooldown {
            try encodeContainer.encode(scaleOutCooldown, forKey: .scaleOutCooldown)
        }
        if let targetValue = targetValue {
            try encodeContainer.encode(targetValue, forKey: .targetValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
        let predefinedMetricSpecificationDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.PredefinedMetricSpecification.self, forKey: .predefinedMetricSpecification)
        predefinedMetricSpecification = predefinedMetricSpecificationDecoded
        let customizedMetricSpecificationDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.CustomizedMetricSpecification.self, forKey: .customizedMetricSpecification)
        customizedMetricSpecification = customizedMetricSpecificationDecoded
        let scaleOutCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scaleOutCooldown)
        scaleOutCooldown = scaleOutCooldownDecoded
        let scaleInCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scaleInCooldown)
        scaleInCooldown = scaleInCooldownDecoded
        let disableScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableScaleIn)
        disableScaleIn = disableScaleInDecoded
    }
}

extension ApplicationAutoScalingClientTypes.TargetTrackingScalingPolicyConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TargetTrackingScalingPolicyConfiguration(customizedMetricSpecification: \(Swift.String(describing: customizedMetricSpecification)), disableScaleIn: \(Swift.String(describing: disableScaleIn)), predefinedMetricSpecification: \(Swift.String(describing: predefinedMetricSpecification)), scaleInCooldown: \(Swift.String(describing: scaleInCooldown)), scaleOutCooldown: \(Swift.String(describing: scaleOutCooldown)), targetValue: \(Swift.String(describing: targetValue)))"}
}

extension ApplicationAutoScalingClientTypes {
    /// <p>Represents a target tracking scaling policy configuration to use with Application Auto Scaling.</p>
    public struct TargetTrackingScalingPolicyConfiguration: Swift.Equatable {
        /// <p>A customized metric. You can specify either a predefined metric or a customized
        ///          metric.</p>
        public let customizedMetricSpecification: ApplicationAutoScalingClientTypes.CustomizedMetricSpecification?
        /// <p>Indicates whether scale in by the target tracking scaling policy is disabled. If the
        ///          value is <code>true</code>, scale in is disabled and the target tracking scaling policy
        ///          won't remove capacity from the scalable target. Otherwise, scale in is enabled and the
        ///          target tracking scaling policy can remove capacity from the scalable target. The default
        ///          value is <code>false</code>.</p>
        public let disableScaleIn: Swift.Bool?
        /// <p>A predefined metric. You can specify either a predefined metric or a customized
        ///          metric.</p>
        public let predefinedMetricSpecification: ApplicationAutoScalingClientTypes.PredefinedMetricSpecification?
        /// <p>The amount of time, in seconds, after a scale-in activity completes before another
        ///       scale-in activity can start.</p>
        ///          <p>With the <i>scale-in cooldown period</i>, the intention is to scale in
        ///       conservatively to protect your application’s availability, so scale-in activities are blocked
        ///       until the cooldown period has expired. However, if another alarm triggers a scale-out activity
        ///       during the scale-in cooldown period, Application Auto Scaling scales out the target immediately. In this case,
        ///       the scale-in cooldown period stops and doesn't complete.</p>
        ///          <p>Application Auto Scaling provides a default value of 300 for the following scalable targets:</p>
        ///          <ul>
        ///             <li>
        ///                <p>ECS services</p>
        ///            </li>
        ///             <li>
        ///                <p>Spot Fleet requests</p>
        ///            </li>
        ///             <li>
        ///                <p>EMR clusters</p>
        ///            </li>
        ///             <li>
        ///                <p>AppStream 2.0 fleets</p>
        ///            </li>
        ///             <li>
        ///                <p>Aurora DB clusters</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon SageMaker endpoint variants</p>
        ///            </li>
        ///             <li>
        ///                <p>Custom resources</p>
        ///            </li>
        ///          </ul>
        ///          <p>For all other scalable targets, the default value is 0:</p>
        ///          <ul>
        ///             <li>
        ///                <p>DynamoDB tables</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB global secondary indexes</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Comprehend document classification and entity recognizer endpoints</p>
        ///            </li>
        ///             <li>
        ///                <p>Lambda provisioned concurrency</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Keyspaces tables</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon MSK broker storage</p>
        ///            </li>
        ///          </ul>
        public let scaleInCooldown: Swift.Int?
        /// <p>The amount of time, in seconds, to wait for a previous scale-out activity to take
        ///       effect.</p>
        ///          <p>With the <i>scale-out cooldown period</i>, the intention is to continuously
        ///       (but not excessively) scale out. After Application Auto Scaling successfully scales out using a target
        ///       tracking scaling policy, it starts to calculate the cooldown time. The scaling policy won't
        ///       increase the desired capacity again unless either a larger scale out is triggered or the
        ///       cooldown period ends. While the cooldown period is in effect, the capacity added by the
        ///       initiating scale-out activity is calculated as part of the desired capacity for the next
        ///       scale-out activity.</p>
        ///          <p>Application Auto Scaling provides a default value of 300 for the following scalable targets:</p>
        ///          <ul>
        ///             <li>
        ///                <p>ECS services</p>
        ///            </li>
        ///             <li>
        ///                <p>Spot Fleet requests</p>
        ///            </li>
        ///             <li>
        ///                <p>EMR clusters</p>
        ///            </li>
        ///             <li>
        ///                <p>AppStream 2.0 fleets</p>
        ///            </li>
        ///             <li>
        ///                <p>Aurora DB clusters</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon SageMaker endpoint variants</p>
        ///            </li>
        ///             <li>
        ///                <p>Custom resources</p>
        ///            </li>
        ///          </ul>
        ///          <p>For all other scalable targets, the default value is 0:</p>
        ///          <ul>
        ///             <li>
        ///                <p>DynamoDB tables</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB global secondary indexes</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Comprehend document classification and entity recognizer endpoints</p>
        ///            </li>
        ///             <li>
        ///                <p>Lambda provisioned concurrency</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon Keyspaces tables</p>
        ///            </li>
        ///             <li>
        ///                <p>Amazon MSK broker storage</p>
        ///            </li>
        ///          </ul>
        public let scaleOutCooldown: Swift.Int?
        /// <p>The target value for the metric. Although this property accepts numbers of type Double,
        ///          it won't accept values that are either too small or too large. Values must be in the range
        ///          of -2^360 to 2^360. The value must be a valid number based on the choice of metric. For
        ///          example, if the metric is CPU utilization, then the target value is a percent value that
        ///          represents how much of the CPU can be used before scaling out. </p>
        public let targetValue: Swift.Double?

        public init (
            customizedMetricSpecification: ApplicationAutoScalingClientTypes.CustomizedMetricSpecification? = nil,
            disableScaleIn: Swift.Bool? = nil,
            predefinedMetricSpecification: ApplicationAutoScalingClientTypes.PredefinedMetricSpecification? = nil,
            scaleInCooldown: Swift.Int? = nil,
            scaleOutCooldown: Swift.Int? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.customizedMetricSpecification = customizedMetricSpecification
            self.disableScaleIn = disableScaleIn
            self.predefinedMetricSpecification = predefinedMetricSpecification
            self.scaleInCooldown = scaleInCooldown
            self.scaleOutCooldown = scaleOutCooldown
            self.targetValue = targetValue
        }
    }

}

extension ValidationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationException(message: \(Swift.String(describing: message)))"}
}

extension ValidationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An exception was thrown for a validation issue. Review the available parameters for the
///          API request.</p>
public struct ValidationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
