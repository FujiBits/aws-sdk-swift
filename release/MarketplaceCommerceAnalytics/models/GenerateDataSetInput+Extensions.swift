// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GenerateDataSetInputHeadersMiddleware: Middleware {
    public let id: String = "GenerateDataSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GenerateDataSetInput>,
                  next: H) -> Swift.Result<OperationOutput<GenerateDataSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GenerateDataSetInput>
    public typealias MOutput = OperationOutput<GenerateDataSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GenerateDataSetOutputError>
}

public struct GenerateDataSetInputQueryItemMiddleware: Middleware {
    public let id: String = "GenerateDataSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GenerateDataSetInput>,
                  next: H) -> Swift.Result<OperationOutput<GenerateDataSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GenerateDataSetInput>
    public typealias MOutput = OperationOutput<GenerateDataSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GenerateDataSetOutputError>
}

public struct GenerateDataSetInputBodyMiddleware: Middleware {
    public let id: String = "GenerateDataSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GenerateDataSetInput>,
                  next: H) -> Swift.Result<OperationOutput<GenerateDataSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GenerateDataSetInput>
    public typealias MOutput = OperationOutput<GenerateDataSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GenerateDataSetOutputError>
}

extension GenerateDataSetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customerDefinedValues
        case dataSetPublicationDate
        case dataSetType
        case destinationS3BucketName
        case destinationS3Prefix
        case roleNameArn
        case snsTopicArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerDefinedValues = customerDefinedValues {
            var customerDefinedValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .customerDefinedValues)
            for (dictKey0, customerdefinedvalues0) in customerDefinedValues {
                try customerDefinedValuesContainer.encode(customerdefinedvalues0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let dataSetPublicationDate = dataSetPublicationDate {
            try encodeContainer.encode(dataSetPublicationDate.timeIntervalSince1970, forKey: .dataSetPublicationDate)
        }
        if let dataSetType = dataSetType {
            try encodeContainer.encode(dataSetType.rawValue, forKey: .dataSetType)
        }
        if let destinationS3BucketName = destinationS3BucketName {
            try encodeContainer.encode(destinationS3BucketName, forKey: .destinationS3BucketName)
        }
        if let destinationS3Prefix = destinationS3Prefix {
            try encodeContainer.encode(destinationS3Prefix, forKey: .destinationS3Prefix)
        }
        if let roleNameArn = roleNameArn {
            try encodeContainer.encode(roleNameArn, forKey: .roleNameArn)
        }
        if let snsTopicArn = snsTopicArn {
            try encodeContainer.encode(snsTopicArn, forKey: .snsTopicArn)
        }
    }
}
