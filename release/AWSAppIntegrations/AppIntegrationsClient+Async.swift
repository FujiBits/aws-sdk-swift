// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension AppIntegrationsClient {
    /// Creates an EventIntegration, given a specified name, description, and a reference to an
    ///       Amazon EventBridge bus in your account and a partner event source that pushes events to that bus. No
    ///       objects are created in the your account, only metadata that is persisted on the EventIntegration
    ///       control plane.
    func createEventIntegration(input: CreateEventIntegrationInput) async throws -> CreateEventIntegrationOutputResponse
    {
        typealias createEventIntegrationContinuation = CheckedContinuation<CreateEventIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEventIntegrationContinuation) in
            createEventIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified existing event integration. If the event integration is associated
    ///       with clients, the request is rejected.
    func deleteEventIntegration(input: DeleteEventIntegrationInput) async throws -> DeleteEventIntegrationOutputResponse
    {
        typealias deleteEventIntegrationContinuation = CheckedContinuation<DeleteEventIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEventIntegrationContinuation) in
            deleteEventIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Return information about the event integration.
    func getEventIntegration(input: GetEventIntegrationInput) async throws -> GetEventIntegrationOutputResponse
    {
        typealias getEventIntegrationContinuation = CheckedContinuation<GetEventIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEventIntegrationContinuation) in
            getEventIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a paginated list of event integration associations in the account.
    func listEventIntegrationAssociations(input: ListEventIntegrationAssociationsInput) async throws -> ListEventIntegrationAssociationsOutputResponse
    {
        typealias listEventIntegrationAssociationsContinuation = CheckedContinuation<ListEventIntegrationAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEventIntegrationAssociationsContinuation) in
            listEventIntegrationAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a paginated list of event integrations in the account.
    func listEventIntegrations(input: ListEventIntegrationsInput) async throws -> ListEventIntegrationsOutputResponse
    {
        typealias listEventIntegrationsContinuation = CheckedContinuation<ListEventIntegrationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEventIntegrationsContinuation) in
            listEventIntegrations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags for the specified resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds the specified tags to the specified resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified tags from the specified resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the description of an event integration.
    func updateEventIntegration(input: UpdateEventIntegrationInput) async throws -> UpdateEventIntegrationOutputResponse
    {
        typealias updateEventIntegrationContinuation = CheckedContinuation<UpdateEventIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEventIntegrationContinuation) in
            updateEventIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
