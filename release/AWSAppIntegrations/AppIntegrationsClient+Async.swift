// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension AppIntegrationsClient {
    /// Creates and persists a DataIntegration resource.
    ///
    ///             You cannot create a DataIntegration association for a DataIntegration that has been previously associated.
    ///       Use a different DataIntegration, or recreate the DataIntegration using the
    ///       CreateDataIntegration API.
    ///
    func createDataIntegration(input: CreateDataIntegrationInput) async throws -> CreateDataIntegrationOutputResponse
    {
        typealias createDataIntegrationContinuation = CheckedContinuation<CreateDataIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDataIntegrationContinuation) in
            createDataIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an EventIntegration, given a specified name, description, and a reference to an
    ///       Amazon EventBridge bus in your account and a partner event source that pushes events to that bus. No
    ///       objects are created in the your account, only metadata that is persisted on the
    ///       EventIntegration control plane.
    func createEventIntegration(input: CreateEventIntegrationInput) async throws -> CreateEventIntegrationOutputResponse
    {
        typealias createEventIntegrationContinuation = CheckedContinuation<CreateEventIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEventIntegrationContinuation) in
            createEventIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the DataIntegration. Only DataIntegrations that don't have any
    ///       DataIntegrationAssociations can be deleted. Deleting a DataIntegration also deletes the
    ///       underlying Amazon AppFlow flow and service linked role.
    ///
    ///             You cannot create a DataIntegration association for a DataIntegration that has been previously associated.
    /// Use a different DataIntegration, or recreate the DataIntegration using the
    /// <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html">CreateDataIntegration API.
    ///
    func deleteDataIntegration(input: DeleteDataIntegrationInput) async throws -> DeleteDataIntegrationOutputResponse
    {
        typealias deleteDataIntegrationContinuation = CheckedContinuation<DeleteDataIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDataIntegrationContinuation) in
            deleteDataIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified existing event integration. If the event integration is associated
    ///       with clients, the request is rejected.
    func deleteEventIntegration(input: DeleteEventIntegrationInput) async throws -> DeleteEventIntegrationOutputResponse
    {
        typealias deleteEventIntegrationContinuation = CheckedContinuation<DeleteEventIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEventIntegrationContinuation) in
            deleteEventIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the DataIntegration.
    ///
    ///             You cannot create a DataIntegration association for a DataIntegration that has been previously associated.
    /// Use a different DataIntegration, or recreate the DataIntegration using the
    /// <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html">CreateDataIntegration API.
    ///
    func getDataIntegration(input: GetDataIntegrationInput) async throws -> GetDataIntegrationOutputResponse
    {
        typealias getDataIntegrationContinuation = CheckedContinuation<GetDataIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDataIntegrationContinuation) in
            getDataIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the event integration.
    func getEventIntegration(input: GetEventIntegrationInput) async throws -> GetEventIntegrationOutputResponse
    {
        typealias getEventIntegrationContinuation = CheckedContinuation<GetEventIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEventIntegrationContinuation) in
            getEventIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a paginated list of DataIntegration associations in the account.
    ///
    ///             You cannot create a DataIntegration association for a DataIntegration that has been previously associated.
    /// Use a different DataIntegration, or recreate the DataIntegration using the
    /// <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html">CreateDataIntegration API.
    ///
    func listDataIntegrationAssociations(input: ListDataIntegrationAssociationsInput) async throws -> ListDataIntegrationAssociationsOutputResponse
    {
        typealias listDataIntegrationAssociationsContinuation = CheckedContinuation<ListDataIntegrationAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDataIntegrationAssociationsContinuation) in
            listDataIntegrationAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a paginated list of DataIntegrations in the account.
    ///
    ///             You cannot create a DataIntegration association for a DataIntegration that has been previously associated.
    /// Use a different DataIntegration, or recreate the DataIntegration using the
    /// <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html">CreateDataIntegration API.
    ///
    func listDataIntegrations(input: ListDataIntegrationsInput) async throws -> ListDataIntegrationsOutputResponse
    {
        typealias listDataIntegrationsContinuation = CheckedContinuation<ListDataIntegrationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDataIntegrationsContinuation) in
            listDataIntegrations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a paginated list of event integration associations in the account.
    func listEventIntegrationAssociations(input: ListEventIntegrationAssociationsInput) async throws -> ListEventIntegrationAssociationsOutputResponse
    {
        typealias listEventIntegrationAssociationsContinuation = CheckedContinuation<ListEventIntegrationAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEventIntegrationAssociationsContinuation) in
            listEventIntegrationAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a paginated list of event integrations in the account.
    func listEventIntegrations(input: ListEventIntegrationsInput) async throws -> ListEventIntegrationsOutputResponse
    {
        typealias listEventIntegrationsContinuation = CheckedContinuation<ListEventIntegrationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEventIntegrationsContinuation) in
            listEventIntegrations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags for the specified resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds the specified tags to the specified resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified tags from the specified resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the description of a DataIntegration.
    ///
    ///             You cannot create a DataIntegration association for a DataIntegration that has been previously associated.
    /// Use a different DataIntegration, or recreate the DataIntegration using the
    /// <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html">CreateDataIntegration API.
    ///
    func updateDataIntegration(input: UpdateDataIntegrationInput) async throws -> UpdateDataIntegrationOutputResponse
    {
        typealias updateDataIntegrationContinuation = CheckedContinuation<UpdateDataIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDataIntegrationContinuation) in
            updateDataIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the description of an event integration.
    func updateEventIntegration(input: UpdateEventIntegrationInput) async throws -> UpdateEventIntegrationOutputResponse
    {
        typealias updateEventIntegrationContinuation = CheckedContinuation<UpdateEventIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEventIntegrationContinuation) in
            updateEventIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
