// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateQuerySuggestionsConfigInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateQuerySuggestionsConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateQuerySuggestionsConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateQuerySuggestionsConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateQuerySuggestionsConfigInput>
    public typealias MOutput = OperationOutput<UpdateQuerySuggestionsConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateQuerySuggestionsConfigOutputError>
}

public struct UpdateQuerySuggestionsConfigInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateQuerySuggestionsConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateQuerySuggestionsConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateQuerySuggestionsConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateQuerySuggestionsConfigInput>
    public typealias MOutput = OperationOutput<UpdateQuerySuggestionsConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateQuerySuggestionsConfigOutputError>
}

public struct UpdateQuerySuggestionsConfigInputBodyMiddleware: Middleware {
    public let id: String = "UpdateQuerySuggestionsConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateQuerySuggestionsConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateQuerySuggestionsConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateQuerySuggestionsConfigInput>
    public typealias MOutput = OperationOutput<UpdateQuerySuggestionsConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateQuerySuggestionsConfigOutputError>
}

extension UpdateQuerySuggestionsConfigInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case includeQueriesWithoutUserInformation = "IncludeQueriesWithoutUserInformation"
        case indexId = "IndexId"
        case minimumNumberOfQueryingUsers = "MinimumNumberOfQueryingUsers"
        case minimumQueryCount = "MinimumQueryCount"
        case mode = "Mode"
        case queryLogLookBackWindowInDays = "QueryLogLookBackWindowInDays"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeQueriesWithoutUserInformation = includeQueriesWithoutUserInformation {
            try encodeContainer.encode(includeQueriesWithoutUserInformation, forKey: .includeQueriesWithoutUserInformation)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let minimumNumberOfQueryingUsers = minimumNumberOfQueryingUsers {
            try encodeContainer.encode(minimumNumberOfQueryingUsers, forKey: .minimumNumberOfQueryingUsers)
        }
        if let minimumQueryCount = minimumQueryCount {
            try encodeContainer.encode(minimumQueryCount, forKey: .minimumQueryCount)
        }
        if let mode = mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let queryLogLookBackWindowInDays = queryLogLookBackWindowInDays {
            try encodeContainer.encode(queryLogLookBackWindowInDays, forKey: .queryLogLookBackWindowInDays)
        }
    }
}
