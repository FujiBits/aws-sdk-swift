// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutAccountDetailsInputHeadersMiddleware: Middleware {
    public let id: String = "PutAccountDetailsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutAccountDetailsInput>,
                  next: H) -> Swift.Result<OperationOutput<PutAccountDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutAccountDetailsInput>
    public typealias MOutput = OperationOutput<PutAccountDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutAccountDetailsOutputError>
}

public struct PutAccountDetailsInputQueryItemMiddleware: Middleware {
    public let id: String = "PutAccountDetailsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutAccountDetailsInput>,
                  next: H) -> Swift.Result<OperationOutput<PutAccountDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutAccountDetailsInput>
    public typealias MOutput = OperationOutput<PutAccountDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutAccountDetailsOutputError>
}

public struct PutAccountDetailsInputBodyMiddleware: Middleware {
    public let id: String = "PutAccountDetailsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutAccountDetailsInput>,
                  next: H) -> Swift.Result<OperationOutput<PutAccountDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutAccountDetailsInput>
    public typealias MOutput = OperationOutput<PutAccountDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutAccountDetailsOutputError>
}

extension PutAccountDetailsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalContactEmailAddresses = "AdditionalContactEmailAddresses"
        case contactLanguage = "ContactLanguage"
        case mailType = "MailType"
        case productionAccessEnabled = "ProductionAccessEnabled"
        case useCaseDescription = "UseCaseDescription"
        case websiteURL = "WebsiteURL"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalContactEmailAddresses = additionalContactEmailAddresses {
            var additionalContactEmailAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalContactEmailAddresses)
            for additionalcontactemailaddresses0 in additionalContactEmailAddresses {
                try additionalContactEmailAddressesContainer.encode(additionalcontactemailaddresses0)
            }
        }
        if let contactLanguage = contactLanguage {
            try encodeContainer.encode(contactLanguage.rawValue, forKey: .contactLanguage)
        }
        if let mailType = mailType {
            try encodeContainer.encode(mailType.rawValue, forKey: .mailType)
        }
        if let productionAccessEnabled = productionAccessEnabled {
            try encodeContainer.encode(productionAccessEnabled, forKey: .productionAccessEnabled)
        }
        if let useCaseDescription = useCaseDescription {
            try encodeContainer.encode(useCaseDescription, forKey: .useCaseDescription)
        }
        if let websiteURL = websiteURL {
            try encodeContainer.encode(websiteURL, forKey: .websiteURL)
        }
    }
}
