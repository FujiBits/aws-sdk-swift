// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEmailTemplatesOutputResponseBody: Equatable {
    public let templatesMetadata: [EmailTemplateMetadata]?
    public let nextToken: String?
}

extension ListEmailTemplatesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case templatesMetadata = "TemplatesMetadata"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templatesMetadataContainer = try containerValues.decodeIfPresent([EmailTemplateMetadata?].self, forKey: .templatesMetadata)
        var templatesMetadataDecoded0:[EmailTemplateMetadata]? = nil
        if let templatesMetadataContainer = templatesMetadataContainer {
            templatesMetadataDecoded0 = [EmailTemplateMetadata]()
            for structure0 in templatesMetadataContainer {
                if let structure0 = structure0 {
                    templatesMetadataDecoded0?.append(structure0)
                }
            }
        }
        templatesMetadata = templatesMetadataDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
