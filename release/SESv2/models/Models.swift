// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension SesV2ClientTypes.AccountDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalContactEmailAddresses = "AdditionalContactEmailAddresses"
        case contactLanguage = "ContactLanguage"
        case mailType = "MailType"
        case reviewDetails = "ReviewDetails"
        case useCaseDescription = "UseCaseDescription"
        case websiteURL = "WebsiteURL"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalContactEmailAddresses = additionalContactEmailAddresses {
            var additionalContactEmailAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalContactEmailAddresses)
            for additionalcontactemailaddresses0 in additionalContactEmailAddresses {
                try additionalContactEmailAddressesContainer.encode(additionalcontactemailaddresses0)
            }
        }
        if let contactLanguage = contactLanguage {
            try encodeContainer.encode(contactLanguage.rawValue, forKey: .contactLanguage)
        }
        if let mailType = mailType {
            try encodeContainer.encode(mailType.rawValue, forKey: .mailType)
        }
        if let reviewDetails = reviewDetails {
            try encodeContainer.encode(reviewDetails, forKey: .reviewDetails)
        }
        if let useCaseDescription = useCaseDescription {
            try encodeContainer.encode(useCaseDescription, forKey: .useCaseDescription)
        }
        if let websiteURL = websiteURL {
            try encodeContainer.encode(websiteURL, forKey: .websiteURL)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailTypeDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.MailType.self, forKey: .mailType)
        mailType = mailTypeDecoded
        let websiteURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .websiteURL)
        websiteURL = websiteURLDecoded
        let contactLanguageDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ContactLanguage.self, forKey: .contactLanguage)
        contactLanguage = contactLanguageDecoded
        let useCaseDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .useCaseDescription)
        useCaseDescription = useCaseDescriptionDecoded
        let additionalContactEmailAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalContactEmailAddresses)
        var additionalContactEmailAddressesDecoded0:[Swift.String]? = nil
        if let additionalContactEmailAddressesContainer = additionalContactEmailAddressesContainer {
            additionalContactEmailAddressesDecoded0 = [Swift.String]()
            for string0 in additionalContactEmailAddressesContainer {
                if let string0 = string0 {
                    additionalContactEmailAddressesDecoded0?.append(string0)
                }
            }
        }
        additionalContactEmailAddresses = additionalContactEmailAddressesDecoded0
        let reviewDetailsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ReviewDetails.self, forKey: .reviewDetails)
        reviewDetails = reviewDetailsDecoded
    }
}

extension SesV2ClientTypes.AccountDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccountDetails(additionalContactEmailAddresses: \(Swift.String(describing: additionalContactEmailAddresses)), contactLanguage: \(Swift.String(describing: contactLanguage)), mailType: \(Swift.String(describing: mailType)), reviewDetails: \(Swift.String(describing: reviewDetails)), useCaseDescription: \(Swift.String(describing: useCaseDescription)), websiteURL: \(Swift.String(describing: websiteURL)))"}
}

extension SesV2ClientTypes {
    /// An object that contains information about your account details.
    public struct AccountDetails: Swift.Equatable {
        /// Additional email addresses where updates are sent about your account review
        ///             process.
        public let additionalContactEmailAddresses: [Swift.String]?
        /// The language you would prefer for the case. The contact language can be one of
        ///                 ENGLISH or JAPANESE.
        public let contactLanguage: SesV2ClientTypes.ContactLanguage?
        /// The type of email your account is sending. The mail type can be one of the
        ///             following:
        ///
        ///
        ///
        ///                   MARKETING – Most of your sending traffic is to keep your
        ///                     customers informed of your latest offering.
        ///
        ///
        ///
        ///                   TRANSACTIONAL – Most of your sending traffic is to
        ///                     communicate during a transaction with a customer.
        ///
        ///
        public let mailType: SesV2ClientTypes.MailType?
        /// Information about the review of the latest details you submitted.
        public let reviewDetails: SesV2ClientTypes.ReviewDetails?
        /// A description of the types of email that you plan to send.
        public let useCaseDescription: Swift.String?
        /// The URL of your website. This information helps us better understand the type of
        ///             content that you plan to send.
        public let websiteURL: Swift.String?

        public init (
            additionalContactEmailAddresses: [Swift.String]? = nil,
            contactLanguage: SesV2ClientTypes.ContactLanguage? = nil,
            mailType: SesV2ClientTypes.MailType? = nil,
            reviewDetails: SesV2ClientTypes.ReviewDetails? = nil,
            useCaseDescription: Swift.String? = nil,
            websiteURL: Swift.String? = nil
        )
        {
            self.additionalContactEmailAddresses = additionalContactEmailAddresses
            self.contactLanguage = contactLanguage
            self.mailType = mailType
            self.reviewDetails = reviewDetails
            self.useCaseDescription = useCaseDescription
            self.websiteURL = websiteURL
        }
    }

}

extension AccountSuspendedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccountSuspendedException(message: \(Swift.String(describing: message)))"}
}

extension AccountSuspendedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccountSuspendedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The message can't be sent because the account's ability to send email has been
///             permanently restricted.
public struct AccountSuspendedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccountSuspendedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AccountSuspendedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AlreadyExistsException(message: \(Swift.String(describing: message)))"}
}

extension AlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource specified in your request already exists.
public struct AlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AlreadyExistsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BadRequestException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BadRequestException(message: \(Swift.String(describing: message)))"}
}

extension BadRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BadRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The input you provided is invalid.
public struct BadRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BadRequestExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension BadRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesV2ClientTypes {
    /// The action that you want to take if the required MX record can't be found when you
    ///             send an email. When you set this value to UseDefaultValue, the mail is sent
    ///             using amazonses.com as the MAIL FROM domain. When you set this
    ///             value to RejectMessage, the Amazon SES API v2 returns a
    ///                 MailFromDomainNotVerified error, and doesn't attempt to deliver the
    ///             email.
    ///         These behaviors are taken when the custom MAIL FROM domain configuration is in the
    ///                 Pending, Failed, and TemporaryFailure
    ///             states.
    public enum BehaviorOnMxFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rejectMessage
        case useDefaultValue
        case sdkUnknown(Swift.String)

        public static var allCases: [BehaviorOnMxFailure] {
            return [
                .rejectMessage,
                .useDefaultValue,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rejectMessage: return "REJECT_MESSAGE"
            case .useDefaultValue: return "USE_DEFAULT_VALUE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BehaviorOnMxFailure(rawValue: rawValue) ?? BehaviorOnMxFailure.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.BlacklistEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case listingTime = "ListingTime"
        case rblName = "RblName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let listingTime = listingTime {
            try encodeContainer.encode(listingTime.timeIntervalSince1970, forKey: .listingTime)
        }
        if let rblName = rblName {
            try encodeContainer.encode(rblName, forKey: .rblName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rblNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rblName)
        rblName = rblNameDecoded
        let listingTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .listingTime)
        listingTime = listingTimeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension SesV2ClientTypes.BlacklistEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BlacklistEntry(description: \(Swift.String(describing: description)), listingTime: \(Swift.String(describing: listingTime)), rblName: \(Swift.String(describing: rblName)))"}
}

extension SesV2ClientTypes {
    /// An object that contains information about a blacklisting event that impacts one of the
    ///             dedicated IP addresses that is associated with your account.
    public struct BlacklistEntry: Swift.Equatable {
        /// Additional information about the blacklisting event, as provided by the blacklist
        ///             maintainer.
        public let description: Swift.String?
        /// The time when the blacklisting event occurred, shown in Unix time format.
        public let listingTime: ClientRuntime.Date?
        /// The name of the blacklist that the IP address appears on.
        public let rblName: Swift.String?

        public init (
            description: Swift.String? = nil,
            listingTime: ClientRuntime.Date? = nil,
            rblName: Swift.String? = nil
        )
        {
            self.description = description
            self.listingTime = listingTime
            self.rblName = rblName
        }
    }

}

extension SesV2ClientTypes.Body: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case html = "Html"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let html = html {
            try encodeContainer.encode(html, forKey: .html)
        }
        if let text = text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.Content.self, forKey: .text)
        text = textDecoded
        let htmlDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.Content.self, forKey: .html)
        html = htmlDecoded
    }
}

extension SesV2ClientTypes.Body: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Body(html: \(Swift.String(describing: html)), text: \(Swift.String(describing: text)))"}
}

extension SesV2ClientTypes {
    /// Represents the body of the email message.
    public struct Body: Swift.Equatable {
        /// An object that represents the version of the message that is displayed in email
        ///             clients that support HTML. HTML messages can include formatted text, hyperlinks, images,
        ///             and more.
        public let html: SesV2ClientTypes.Content?
        /// An object that represents the version of the message that is displayed in email
        ///             clients that don't support HTML, or clients where the recipient has disabled HTML
        ///             rendering.
        public let text: SesV2ClientTypes.Content?

        public init (
            html: SesV2ClientTypes.Content? = nil,
            text: SesV2ClientTypes.Content? = nil
        )
        {
            self.html = html
            self.text = text
        }
    }

}

extension SesV2ClientTypes.BulkEmailContent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case template = "Template"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let template = template {
            try encodeContainer.encode(template, forKey: .template)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.Template.self, forKey: .template)
        template = templateDecoded
    }
}

extension SesV2ClientTypes.BulkEmailContent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BulkEmailContent(template: \(Swift.String(describing: template)))"}
}

extension SesV2ClientTypes {
    /// An object that contains the body of the message. You can specify a template
    ///             message.
    public struct BulkEmailContent: Swift.Equatable {
        /// The template to use for the bulk email message.
        public let template: SesV2ClientTypes.Template?

        public init (
            template: SesV2ClientTypes.Template? = nil
        )
        {
            self.template = template
        }
    }

}

extension SesV2ClientTypes.BulkEmailEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case replacementEmailContent = "ReplacementEmailContent"
        case replacementTags = "ReplacementTags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let replacementEmailContent = replacementEmailContent {
            try encodeContainer.encode(replacementEmailContent, forKey: .replacementEmailContent)
        }
        if let replacementTags = replacementTags {
            var replacementTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replacementTags)
            for messagetaglist0 in replacementTags {
                try replacementTagsContainer.encode(messagetaglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
        let replacementTagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.MessageTag?].self, forKey: .replacementTags)
        var replacementTagsDecoded0:[SesV2ClientTypes.MessageTag]? = nil
        if let replacementTagsContainer = replacementTagsContainer {
            replacementTagsDecoded0 = [SesV2ClientTypes.MessageTag]()
            for structure0 in replacementTagsContainer {
                if let structure0 = structure0 {
                    replacementTagsDecoded0?.append(structure0)
                }
            }
        }
        replacementTags = replacementTagsDecoded0
        let replacementEmailContentDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ReplacementEmailContent.self, forKey: .replacementEmailContent)
        replacementEmailContent = replacementEmailContentDecoded
    }
}

extension SesV2ClientTypes.BulkEmailEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BulkEmailEntry(destination: \(Swift.String(describing: destination)), replacementEmailContent: \(Swift.String(describing: replacementEmailContent)), replacementTags: \(Swift.String(describing: replacementTags)))"}
}

extension SesV2ClientTypes {
    public struct BulkEmailEntry: Swift.Equatable {
        /// Represents the destination of the message, consisting of To:, CC:, and BCC:
        ///             fields.
        ///
        ///             Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531. For this reason, the
        ///                 local part of a destination email address (the part of the email address that
        ///                 precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII
        ///                     characters. If the domain part of an address (the part after the @ sign)
        ///                 contains non-ASCII characters, they must be encoded using Punycode, as described in
        ///                     <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492.
        ///
        /// This member is required.
        public let destination: SesV2ClientTypes.Destination?
        /// The ReplacementEmailContent associated with a
        ///             BulkEmailEntry.
        public let replacementEmailContent: SesV2ClientTypes.ReplacementEmailContent?
        /// A list of tags, in the form of name/value pairs, to apply to an email that you send
        ///             using the SendBulkTemplatedEmail operation. Tags correspond to
        ///             characteristics of the email that you define, so that you can publish email sending
        ///             events.
        public let replacementTags: [SesV2ClientTypes.MessageTag]?

        public init (
            destination: SesV2ClientTypes.Destination? = nil,
            replacementEmailContent: SesV2ClientTypes.ReplacementEmailContent? = nil,
            replacementTags: [SesV2ClientTypes.MessageTag]? = nil
        )
        {
            self.destination = destination
            self.replacementEmailContent = replacementEmailContent
            self.replacementTags = replacementTags
        }
    }

}

extension SesV2ClientTypes.BulkEmailEntryResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case error = "Error"
        case messageId = "MessageId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let error = error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let messageId = messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.BulkEmailStatus.self, forKey: .status)
        status = statusDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

extension SesV2ClientTypes.BulkEmailEntryResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BulkEmailEntryResult(error: \(Swift.String(describing: error)), messageId: \(Swift.String(describing: messageId)), status: \(Swift.String(describing: status)))"}
}

extension SesV2ClientTypes {
    /// The result of the SendBulkEmail operation of each specified
    ///                 BulkEmailEntry.
    public struct BulkEmailEntryResult: Swift.Equatable {
        /// A description of an error that prevented a message being sent using the
        ///                 SendBulkTemplatedEmail operation.
        public let error: Swift.String?
        /// The unique message identifier returned from the SendBulkTemplatedEmail
        ///             operation.
        public let messageId: Swift.String?
        /// The status of a message sent using the SendBulkTemplatedEmail
        ///             operation.
        ///         Possible values for this parameter include:
        ///
        ///
        ///                 SUCCESS: Amazon SES accepted the message, and will attempt to deliver it to
        ///                     the recipients.
        ///
        ///
        ///                 MESSAGE_REJECTED: The message was rejected because it contained a
        ///                     virus.
        ///
        ///
        ///                 MAIL_FROM_DOMAIN_NOT_VERIFIED: The sender's email address or domain was not
        ///                     verified.
        ///
        ///
        ///                 CONFIGURATION_SET_DOES_NOT_EXIST: The configuration set you specified does not
        ///                     exist.
        ///
        ///
        ///                 TEMPLATE_DOES_NOT_EXIST: The template you specified does not exist.
        ///
        ///
        ///                 ACCOUNT_SUSPENDED: Your account has been shut down because of issues related
        ///                     to your email sending practices.
        ///
        ///
        ///                 ACCOUNT_THROTTLED: The number of emails you can send has been reduced because
        ///                     your account has exceeded its allocated sending limit.
        ///
        ///
        ///                 ACCOUNT_DAILY_QUOTA_EXCEEDED: You have reached or exceeded the maximum number
        ///                     of emails you can send from your account in a 24-hour period.
        ///
        ///
        ///                 INVALID_SENDING_POOL_NAME: The configuration set you specified refers to an IP
        ///                     pool that does not exist.
        ///
        ///
        ///                 ACCOUNT_SENDING_PAUSED: Email sending for the Amazon SES account was disabled
        ///                     using the <a href="https://docs.aws.amazon.com/ses/latest/APIReference/API_UpdateAccountSendingEnabled.html">UpdateAccountSendingEnabled operation.
        ///
        ///
        ///                 CONFIGURATION_SET_SENDING_PAUSED: Email sending for this configuration set was
        ///                     disabled using the <a href="https://docs.aws.amazon.com/ses/latest/APIReference/API_UpdateConfigurationSetSendingEnabled.html">UpdateConfigurationSetSendingEnabled operation.
        ///
        ///
        ///                 INVALID_PARAMETER_VALUE: One or more of the parameters you specified when
        ///                     calling this operation was invalid. See the error message for additional
        ///                     information.
        ///
        ///
        ///                 TRANSIENT_FAILURE: Amazon SES was unable to process your request because of a
        ///                     temporary issue.
        ///
        ///
        ///                 FAILED: Amazon SES was unable to process your request. See the error message
        ///                     for additional information.
        ///
        ///
        public let status: SesV2ClientTypes.BulkEmailStatus?

        public init (
            error: Swift.String? = nil,
            messageId: Swift.String? = nil,
            status: SesV2ClientTypes.BulkEmailStatus? = nil
        )
        {
            self.error = error
            self.messageId = messageId
            self.status = status
        }
    }

}

extension SesV2ClientTypes {
    public enum BulkEmailStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountDailyQuotaExceeded
        case accountSendingPaused
        case accountSuspended
        case accountThrottled
        case configurationSetNotFound
        case configurationSetSendingPaused
        case failed
        case invalidParameter
        case invalidSendingPoolName
        case mailFromDomainNotVerified
        case messageRejected
        case success
        case templateNotFound
        case transientFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [BulkEmailStatus] {
            return [
                .accountDailyQuotaExceeded,
                .accountSendingPaused,
                .accountSuspended,
                .accountThrottled,
                .configurationSetNotFound,
                .configurationSetSendingPaused,
                .failed,
                .invalidParameter,
                .invalidSendingPoolName,
                .mailFromDomainNotVerified,
                .messageRejected,
                .success,
                .templateNotFound,
                .transientFailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountDailyQuotaExceeded: return "ACCOUNT_DAILY_QUOTA_EXCEEDED"
            case .accountSendingPaused: return "ACCOUNT_SENDING_PAUSED"
            case .accountSuspended: return "ACCOUNT_SUSPENDED"
            case .accountThrottled: return "ACCOUNT_THROTTLED"
            case .configurationSetNotFound: return "CONFIGURATION_SET_NOT_FOUND"
            case .configurationSetSendingPaused: return "CONFIGURATION_SET_SENDING_PAUSED"
            case .failed: return "FAILED"
            case .invalidParameter: return "INVALID_PARAMETER"
            case .invalidSendingPoolName: return "INVALID_SENDING_POOL_NAME"
            case .mailFromDomainNotVerified: return "MAIL_FROM_DOMAIN_NOT_VERIFIED"
            case .messageRejected: return "MESSAGE_REJECTED"
            case .success: return "SUCCESS"
            case .templateNotFound: return "TEMPLATE_NOT_FOUND"
            case .transientFailure: return "TRANSIENT_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BulkEmailStatus(rawValue: rawValue) ?? BulkEmailStatus.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.CloudWatchDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionConfigurations = "DimensionConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensionConfigurations = dimensionConfigurations {
            var dimensionConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensionConfigurations)
            for cloudwatchdimensionconfigurations0 in dimensionConfigurations {
                try dimensionConfigurationsContainer.encode(cloudwatchdimensionconfigurations0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionConfigurationsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.CloudWatchDimensionConfiguration?].self, forKey: .dimensionConfigurations)
        var dimensionConfigurationsDecoded0:[SesV2ClientTypes.CloudWatchDimensionConfiguration]? = nil
        if let dimensionConfigurationsContainer = dimensionConfigurationsContainer {
            dimensionConfigurationsDecoded0 = [SesV2ClientTypes.CloudWatchDimensionConfiguration]()
            for structure0 in dimensionConfigurationsContainer {
                if let structure0 = structure0 {
                    dimensionConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        dimensionConfigurations = dimensionConfigurationsDecoded0
    }
}

extension SesV2ClientTypes.CloudWatchDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudWatchDestination(dimensionConfigurations: \(Swift.String(describing: dimensionConfigurations)))"}
}

extension SesV2ClientTypes {
    /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to
    ///             monitor and gain insights on your email sending metrics.
    public struct CloudWatchDestination: Swift.Equatable {
        /// An array of objects that define the dimensions to use when you send email events to
        ///             Amazon CloudWatch.
        /// This member is required.
        public let dimensionConfigurations: [SesV2ClientTypes.CloudWatchDimensionConfiguration]?

        public init (
            dimensionConfigurations: [SesV2ClientTypes.CloudWatchDimensionConfiguration]? = nil
        )
        {
            self.dimensionConfigurations = dimensionConfigurations
        }
    }

}

extension SesV2ClientTypes.CloudWatchDimensionConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultDimensionValue = "DefaultDimensionValue"
        case dimensionName = "DimensionName"
        case dimensionValueSource = "DimensionValueSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultDimensionValue = defaultDimensionValue {
            try encodeContainer.encode(defaultDimensionValue, forKey: .defaultDimensionValue)
        }
        if let dimensionName = dimensionName {
            try encodeContainer.encode(dimensionName, forKey: .dimensionName)
        }
        if let dimensionValueSource = dimensionValueSource {
            try encodeContainer.encode(dimensionValueSource.rawValue, forKey: .dimensionValueSource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dimensionName)
        dimensionName = dimensionNameDecoded
        let dimensionValueSourceDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DimensionValueSource.self, forKey: .dimensionValueSource)
        dimensionValueSource = dimensionValueSourceDecoded
        let defaultDimensionValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultDimensionValue)
        defaultDimensionValue = defaultDimensionValueDecoded
    }
}

extension SesV2ClientTypes.CloudWatchDimensionConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudWatchDimensionConfiguration(defaultDimensionValue: \(Swift.String(describing: defaultDimensionValue)), dimensionName: \(Swift.String(describing: dimensionName)), dimensionValueSource: \(Swift.String(describing: dimensionValueSource)))"}
}

extension SesV2ClientTypes {
    /// An object that defines the dimension configuration to use when you send email events
    ///             to Amazon CloudWatch.
    public struct CloudWatchDimensionConfiguration: Swift.Equatable {
        /// The default value of the dimension that is published to Amazon CloudWatch if you don't provide the
        ///             value of the dimension when you send an email. This value has to meet the following
        ///             criteria:
        ///
        ///
        ///                 It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
        ///                     underscores (_), or dashes (-).
        ///
        ///
        ///                 It can contain no more than 256 characters.
        ///
        ///
        /// This member is required.
        public let defaultDimensionValue: Swift.String?
        /// The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to
        ///             meet the following criteria:
        ///
        ///
        ///                 It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
        ///                     underscores (_), or dashes (-).
        ///
        ///
        ///                 It can contain no more than 256 characters.
        ///
        ///
        /// This member is required.
        public let dimensionName: Swift.String?
        /// The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. If
        ///             you want to use the message tags that you specify using an
        ///                 X-SES-MESSAGE-TAGS header or a parameter to the SendEmail
        ///             or SendRawEmail API, choose messageTag. If you want to use
        ///             your own email headers, choose emailHeader. If you want to use link tags,
        ///             choose linkTags.
        /// This member is required.
        public let dimensionValueSource: SesV2ClientTypes.DimensionValueSource?

        public init (
            defaultDimensionValue: Swift.String? = nil,
            dimensionName: Swift.String? = nil,
            dimensionValueSource: SesV2ClientTypes.DimensionValueSource? = nil
        )
        {
            self.defaultDimensionValue = defaultDimensionValue
            self.dimensionName = dimensionName
            self.dimensionValueSource = dimensionValueSource
        }
    }

}

extension ConcurrentModificationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConcurrentModificationException(message: \(Swift.String(describing: message)))"}
}

extension ConcurrentModificationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConcurrentModificationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource is being modified by another operation or thread.
public struct ConcurrentModificationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConcurrentModificationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConflictException(message: \(Swift.String(describing: message)))"}
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// If there is already an ongoing account details update under review.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesV2ClientTypes.Contact: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailAddress = "EmailAddress"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case topicDefaultPreferences = "TopicDefaultPreferences"
        case topicPreferences = "TopicPreferences"
        case unsubscribeAll = "UnsubscribeAll"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailAddress = emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let lastUpdatedTimestamp = lastUpdatedTimestamp {
            try encodeContainer.encode(lastUpdatedTimestamp.timeIntervalSince1970, forKey: .lastUpdatedTimestamp)
        }
        if let topicDefaultPreferences = topicDefaultPreferences {
            var topicDefaultPreferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topicDefaultPreferences)
            for topicpreferencelist0 in topicDefaultPreferences {
                try topicDefaultPreferencesContainer.encode(topicpreferencelist0)
            }
        }
        if let topicPreferences = topicPreferences {
            var topicPreferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topicPreferences)
            for topicpreferencelist0 in topicPreferences {
                try topicPreferencesContainer.encode(topicpreferencelist0)
            }
        }
        if unsubscribeAll != false {
            try encodeContainer.encode(unsubscribeAll, forKey: .unsubscribeAll)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let topicPreferencesContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.TopicPreference?].self, forKey: .topicPreferences)
        var topicPreferencesDecoded0:[SesV2ClientTypes.TopicPreference]? = nil
        if let topicPreferencesContainer = topicPreferencesContainer {
            topicPreferencesDecoded0 = [SesV2ClientTypes.TopicPreference]()
            for structure0 in topicPreferencesContainer {
                if let structure0 = structure0 {
                    topicPreferencesDecoded0?.append(structure0)
                }
            }
        }
        topicPreferences = topicPreferencesDecoded0
        let topicDefaultPreferencesContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.TopicPreference?].self, forKey: .topicDefaultPreferences)
        var topicDefaultPreferencesDecoded0:[SesV2ClientTypes.TopicPreference]? = nil
        if let topicDefaultPreferencesContainer = topicDefaultPreferencesContainer {
            topicDefaultPreferencesDecoded0 = [SesV2ClientTypes.TopicPreference]()
            for structure0 in topicDefaultPreferencesContainer {
                if let structure0 = structure0 {
                    topicDefaultPreferencesDecoded0?.append(structure0)
                }
            }
        }
        topicDefaultPreferences = topicDefaultPreferencesDecoded0
        let unsubscribeAllDecoded = try containerValues.decode(Swift.Bool.self, forKey: .unsubscribeAll)
        unsubscribeAll = unsubscribeAllDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
    }
}

extension SesV2ClientTypes.Contact: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Contact(emailAddress: \(Swift.String(describing: emailAddress)), lastUpdatedTimestamp: \(Swift.String(describing: lastUpdatedTimestamp)), topicDefaultPreferences: \(Swift.String(describing: topicDefaultPreferences)), topicPreferences: \(Swift.String(describing: topicPreferences)), unsubscribeAll: \(Swift.String(describing: unsubscribeAll)))"}
}

extension SesV2ClientTypes {
    /// A contact is the end-user who is receiving the email.
    public struct Contact: Swift.Equatable {
        /// The contact's email address.
        public let emailAddress: Swift.String?
        /// A timestamp noting the last time the contact's information was updated.
        public let lastUpdatedTimestamp: ClientRuntime.Date?
        /// The default topic preferences applied to the contact.
        public let topicDefaultPreferences: [SesV2ClientTypes.TopicPreference]?
        /// The contact's preference for being opted-in to or opted-out of a topic.
        public let topicPreferences: [SesV2ClientTypes.TopicPreference]?
        /// A boolean value status noting if the contact is unsubscribed from all contact list
        ///             topics.
        public let unsubscribeAll: Swift.Bool

        public init (
            emailAddress: Swift.String? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            topicDefaultPreferences: [SesV2ClientTypes.TopicPreference]? = nil,
            topicPreferences: [SesV2ClientTypes.TopicPreference]? = nil,
            unsubscribeAll: Swift.Bool = false
        )
        {
            self.emailAddress = emailAddress
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.topicDefaultPreferences = topicDefaultPreferences
            self.topicPreferences = topicPreferences
            self.unsubscribeAll = unsubscribeAll
        }
    }

}

extension SesV2ClientTypes {
    public enum ContactLanguage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case en
        case ja
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactLanguage] {
            return [
                .en,
                .ja,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .en: return "EN"
            case .ja: return "JA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContactLanguage(rawValue: rawValue) ?? ContactLanguage.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.ContactList: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactListName = "ContactListName"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactListName = contactListName {
            try encodeContainer.encode(contactListName, forKey: .contactListName)
        }
        if let lastUpdatedTimestamp = lastUpdatedTimestamp {
            try encodeContainer.encode(lastUpdatedTimestamp.timeIntervalSince1970, forKey: .lastUpdatedTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactListName)
        contactListName = contactListNameDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
    }
}

extension SesV2ClientTypes.ContactList: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContactList(contactListName: \(Swift.String(describing: contactListName)), lastUpdatedTimestamp: \(Swift.String(describing: lastUpdatedTimestamp)))"}
}

extension SesV2ClientTypes {
    /// A list that contains contacts that have subscribed to a particular topic or
    ///             topics.
    public struct ContactList: Swift.Equatable {
        /// The name of the contact list.
        public let contactListName: Swift.String?
        /// A timestamp noting the last time the contact list was updated.
        public let lastUpdatedTimestamp: ClientRuntime.Date?

        public init (
            contactListName: Swift.String? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil
        )
        {
            self.contactListName = contactListName
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
        }
    }

}

extension SesV2ClientTypes.ContactListDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactListImportAction = "ContactListImportAction"
        case contactListName = "ContactListName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactListImportAction = contactListImportAction {
            try encodeContainer.encode(contactListImportAction.rawValue, forKey: .contactListImportAction)
        }
        if let contactListName = contactListName {
            try encodeContainer.encode(contactListName, forKey: .contactListName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactListName)
        contactListName = contactListNameDecoded
        let contactListImportActionDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ContactListImportAction.self, forKey: .contactListImportAction)
        contactListImportAction = contactListImportActionDecoded
    }
}

extension SesV2ClientTypes.ContactListDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContactListDestination(contactListImportAction: \(Swift.String(describing: contactListImportAction)), contactListName: \(Swift.String(describing: contactListName)))"}
}

extension SesV2ClientTypes {
    /// An object that contains details about the action of a contact list.
    public struct ContactListDestination: Swift.Equatable {
        /// >The type of action that you want to perform on the addresses. Acceptable
        ///             values:
        ///
        ///
        ///                 PUT: add the addresses to the contact list. If the record already exists, it
        ///                     will override it with the new value.
        ///
        ///
        ///                 DELETE: remove the addresses from the contact list.
        ///
        ///
        /// This member is required.
        public let contactListImportAction: SesV2ClientTypes.ContactListImportAction?
        /// The name of the contact list.
        /// This member is required.
        public let contactListName: Swift.String?

        public init (
            contactListImportAction: SesV2ClientTypes.ContactListImportAction? = nil,
            contactListName: Swift.String? = nil
        )
        {
            self.contactListImportAction = contactListImportAction
            self.contactListName = contactListName
        }
    }

}

extension SesV2ClientTypes {
    public enum ContactListImportAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactListImportAction] {
            return [
                .delete,
                .put,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContactListImportAction(rawValue: rawValue) ?? ContactListImportAction.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.Content: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case charset = "Charset"
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let charset = charset {
            try encodeContainer.encode(charset, forKey: .charset)
        }
        if let data = data {
            try encodeContainer.encode(data, forKey: .data)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .data)
        data = dataDecoded
        let charsetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .charset)
        charset = charsetDecoded
    }
}

extension SesV2ClientTypes.Content: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Content(charset: \(Swift.String(describing: charset)), data: \(Swift.String(describing: data)))"}
}

extension SesV2ClientTypes {
    /// An object that represents the content of the email, and optionally a character set
    ///             specification.
    public struct Content: Swift.Equatable {
        /// The character set for the content. Because of the constraints of the SMTP protocol,
        ///             Amazon SES uses 7-bit ASCII by default. If the text includes characters outside of the ASCII
        ///             range, you have to specify a character set. For example, you could specify
        ///                 UTF-8, ISO-8859-1, or Shift_JIS.
        public let charset: Swift.String?
        /// The content of the message itself.
        /// This member is required.
        public let data: Swift.String?

        public init (
            charset: Swift.String? = nil,
            data: Swift.String? = nil
        )
        {
            self.charset = charset
            self.data = data
        }
    }

}

public struct CreateConfigurationSetEventDestinationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetEventDestinationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetEventDestinationOutputError>
}

extension CreateConfigurationSetEventDestinationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConfigurationSetEventDestinationInput(configurationSetName: \(Swift.String(describing: configurationSetName)), eventDestination: \(Swift.String(describing: eventDestination)), eventDestinationName: \(Swift.String(describing: eventDestinationName)))"}
}

extension CreateConfigurationSetEventDestinationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestination = "EventDestination"
        case eventDestinationName = "EventDestinationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventDestination = eventDestination {
            try encodeContainer.encode(eventDestination, forKey: .eventDestination)
        }
        if let eventDestinationName = eventDestinationName {
            try encodeContainer.encode(eventDestinationName, forKey: .eventDestinationName)
        }
    }
}

public struct CreateConfigurationSetEventDestinationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetEventDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetEventDestinationOutputError>
}

public struct CreateConfigurationSetEventDestinationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetEventDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetEventDestinationOutputError>
}

/// A request to add an event destination to a configuration set.
public struct CreateConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set that you want to add an event destination to.
    /// This member is required.
    public let configurationSetName: Swift.String?
    /// An object that defines the event destination.
    /// This member is required.
    public let eventDestination: SesV2ClientTypes.EventDestinationDefinition?
    /// A name that identifies the event destination within the configuration set.
    /// This member is required.
    public let eventDestinationName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestination: SesV2ClientTypes.EventDestinationDefinition? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
        self.eventDestinationName = eventDestinationName
    }
}

struct CreateConfigurationSetEventDestinationInputBody: Swift.Equatable {
    public let eventDestinationName: Swift.String?
    public let eventDestination: SesV2ClientTypes.EventDestinationDefinition?
}

extension CreateConfigurationSetEventDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestination = "EventDestination"
        case eventDestinationName = "EventDestinationName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
        let eventDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.EventDestinationDefinition.self, forKey: .eventDestination)
        eventDestination = eventDestinationDecoded
    }
}

extension CreateConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfigurationSetEventDestinationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConfigurationSetEventDestinationOutputResponse()"}
}

extension CreateConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct CreateConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateConfigurationSetEventDestinationOutputResponseBody: Swift.Equatable {
}

extension CreateConfigurationSetEventDestinationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateConfigurationSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetOutputError>
}

extension CreateConfigurationSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConfigurationSetInput(configurationSetName: \(Swift.String(describing: configurationSetName)), deliveryOptions: \(Swift.String(describing: deliveryOptions)), reputationOptions: \(Swift.String(describing: reputationOptions)), sendingOptions: \(Swift.String(describing: sendingOptions)), suppressionOptions: \(Swift.String(describing: suppressionOptions)), tags: \(Swift.String(describing: tags)), trackingOptions: \(Swift.String(describing: trackingOptions)))"}
}

extension CreateConfigurationSetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case deliveryOptions = "DeliveryOptions"
        case reputationOptions = "ReputationOptions"
        case sendingOptions = "SendingOptions"
        case suppressionOptions = "SuppressionOptions"
        case tags = "Tags"
        case trackingOptions = "TrackingOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSetName = configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let deliveryOptions = deliveryOptions {
            try encodeContainer.encode(deliveryOptions, forKey: .deliveryOptions)
        }
        if let reputationOptions = reputationOptions {
            try encodeContainer.encode(reputationOptions, forKey: .reputationOptions)
        }
        if let sendingOptions = sendingOptions {
            try encodeContainer.encode(sendingOptions, forKey: .sendingOptions)
        }
        if let suppressionOptions = suppressionOptions {
            try encodeContainer.encode(suppressionOptions, forKey: .suppressionOptions)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trackingOptions = trackingOptions {
            try encodeContainer.encode(trackingOptions, forKey: .trackingOptions)
        }
    }
}

public struct CreateConfigurationSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetOutputError>
}

public struct CreateConfigurationSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConfigurationSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConfigurationSetOutputError>
}

/// A request to create a configuration set.
public struct CreateConfigurationSetInput: Swift.Equatable {
    /// The name of the configuration set.
    /// This member is required.
    public let configurationSetName: Swift.String?
    /// An object that defines the dedicated IP pool that is used to send emails that you send
    ///             using the configuration set.
    public let deliveryOptions: SesV2ClientTypes.DeliveryOptions?
    /// An object that defines whether or not Amazon SES collects reputation metrics for the emails
    ///             that you send that use the configuration set.
    public let reputationOptions: SesV2ClientTypes.ReputationOptions?
    /// An object that defines whether or not Amazon SES can send email that you send using the
    ///             configuration set.
    public let sendingOptions: SesV2ClientTypes.SendingOptions?
    /// An object that contains information about the suppression list preferences for your
    ///             account.
    public let suppressionOptions: SesV2ClientTypes.SuppressionOptions?
    /// An array of objects that define the tags (keys and values) that you want to associate
    ///             with the configuration set.
    public let tags: [SesV2ClientTypes.Tag]?
    /// An object that defines the open and click tracking options for emails that you send
    ///             using the configuration set.
    public let trackingOptions: SesV2ClientTypes.TrackingOptions?

    public init (
        configurationSetName: Swift.String? = nil,
        deliveryOptions: SesV2ClientTypes.DeliveryOptions? = nil,
        reputationOptions: SesV2ClientTypes.ReputationOptions? = nil,
        sendingOptions: SesV2ClientTypes.SendingOptions? = nil,
        suppressionOptions: SesV2ClientTypes.SuppressionOptions? = nil,
        tags: [SesV2ClientTypes.Tag]? = nil,
        trackingOptions: SesV2ClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.deliveryOptions = deliveryOptions
        self.reputationOptions = reputationOptions
        self.sendingOptions = sendingOptions
        self.suppressionOptions = suppressionOptions
        self.tags = tags
        self.trackingOptions = trackingOptions
    }
}

struct CreateConfigurationSetInputBody: Swift.Equatable {
    public let configurationSetName: Swift.String?
    public let trackingOptions: SesV2ClientTypes.TrackingOptions?
    public let deliveryOptions: SesV2ClientTypes.DeliveryOptions?
    public let reputationOptions: SesV2ClientTypes.ReputationOptions?
    public let sendingOptions: SesV2ClientTypes.SendingOptions?
    public let tags: [SesV2ClientTypes.Tag]?
    public let suppressionOptions: SesV2ClientTypes.SuppressionOptions?
}

extension CreateConfigurationSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case deliveryOptions = "DeliveryOptions"
        case reputationOptions = "ReputationOptions"
        case sendingOptions = "SendingOptions"
        case suppressionOptions = "SuppressionOptions"
        case tags = "Tags"
        case trackingOptions = "TrackingOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let trackingOptionsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.TrackingOptions.self, forKey: .trackingOptions)
        trackingOptions = trackingOptionsDecoded
        let deliveryOptionsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DeliveryOptions.self, forKey: .deliveryOptions)
        deliveryOptions = deliveryOptionsDecoded
        let reputationOptionsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ReputationOptions.self, forKey: .reputationOptions)
        reputationOptions = reputationOptionsDecoded
        let sendingOptionsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SendingOptions.self, forKey: .sendingOptions)
        sendingOptions = sendingOptionsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SesV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SesV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let suppressionOptionsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SuppressionOptions.self, forKey: .suppressionOptions)
        suppressionOptions = suppressionOptionsDecoded
    }
}

extension CreateConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConfigurationSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConfigurationSetOutputResponse()"}
}

extension CreateConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct CreateConfigurationSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateConfigurationSetOutputResponseBody: Swift.Equatable {
}

extension CreateConfigurationSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateContactInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContactInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContactOutputError>
}

extension CreateContactInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContactInput(attributesData: \(Swift.String(describing: attributesData)), contactListName: \(Swift.String(describing: contactListName)), emailAddress: \(Swift.String(describing: emailAddress)), topicPreferences: \(Swift.String(describing: topicPreferences)), unsubscribeAll: \(Swift.String(describing: unsubscribeAll)))"}
}

extension CreateContactInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesData = "AttributesData"
        case emailAddress = "EmailAddress"
        case topicPreferences = "TopicPreferences"
        case unsubscribeAll = "UnsubscribeAll"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesData = attributesData {
            try encodeContainer.encode(attributesData, forKey: .attributesData)
        }
        if let emailAddress = emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let topicPreferences = topicPreferences {
            var topicPreferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topicPreferences)
            for topicpreferencelist0 in topicPreferences {
                try topicPreferencesContainer.encode(topicpreferencelist0)
            }
        }
        if unsubscribeAll != false {
            try encodeContainer.encode(unsubscribeAll, forKey: .unsubscribeAll)
        }
    }
}

public struct CreateContactInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContactInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContactOutputError>
}

public struct CreateContactInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContactInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContactOutputError>
}

public struct CreateContactInput: Swift.Equatable {
    /// The attribute data attached to a contact.
    public let attributesData: Swift.String?
    /// The name of the contact list to which the contact should be added.
    /// This member is required.
    public let contactListName: Swift.String?
    /// The contact's email address.
    /// This member is required.
    public let emailAddress: Swift.String?
    /// The contact's preferences for being opted-in to or opted-out of topics.
    public let topicPreferences: [SesV2ClientTypes.TopicPreference]?
    /// A boolean value status noting if the contact is unsubscribed from all contact list
    ///             topics.
    public let unsubscribeAll: Swift.Bool

    public init (
        attributesData: Swift.String? = nil,
        contactListName: Swift.String? = nil,
        emailAddress: Swift.String? = nil,
        topicPreferences: [SesV2ClientTypes.TopicPreference]? = nil,
        unsubscribeAll: Swift.Bool = false
    )
    {
        self.attributesData = attributesData
        self.contactListName = contactListName
        self.emailAddress = emailAddress
        self.topicPreferences = topicPreferences
        self.unsubscribeAll = unsubscribeAll
    }
}

struct CreateContactInputBody: Swift.Equatable {
    public let emailAddress: Swift.String?
    public let topicPreferences: [SesV2ClientTypes.TopicPreference]?
    public let unsubscribeAll: Swift.Bool
    public let attributesData: Swift.String?
}

extension CreateContactInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesData = "AttributesData"
        case emailAddress = "EmailAddress"
        case topicPreferences = "TopicPreferences"
        case unsubscribeAll = "UnsubscribeAll"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let topicPreferencesContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.TopicPreference?].self, forKey: .topicPreferences)
        var topicPreferencesDecoded0:[SesV2ClientTypes.TopicPreference]? = nil
        if let topicPreferencesContainer = topicPreferencesContainer {
            topicPreferencesDecoded0 = [SesV2ClientTypes.TopicPreference]()
            for structure0 in topicPreferencesContainer {
                if let structure0 = structure0 {
                    topicPreferencesDecoded0?.append(structure0)
                }
            }
        }
        topicPreferences = topicPreferencesDecoded0
        let unsubscribeAllDecoded = try containerValues.decode(Swift.Bool.self, forKey: .unsubscribeAll)
        unsubscribeAll = unsubscribeAllDecoded
        let attributesDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributesData)
        attributesData = attributesDataDecoded
    }
}

public struct CreateContactListInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContactListInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContactListInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContactListOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContactListInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContactListOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContactListOutputError>
}

extension CreateContactListInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContactListInput(contactListName: \(Swift.String(describing: contactListName)), description: \(Swift.String(describing: description)), tags: \(Swift.String(describing: tags)), topics: \(Swift.String(describing: topics)))"}
}

extension CreateContactListInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactListName = "ContactListName"
        case description = "Description"
        case tags = "Tags"
        case topics = "Topics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactListName = contactListName {
            try encodeContainer.encode(contactListName, forKey: .contactListName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let topics = topics {
            var topicsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topics)
            for topics0 in topics {
                try topicsContainer.encode(topics0)
            }
        }
    }
}

public struct CreateContactListInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContactListInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContactListInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContactListOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContactListInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContactListOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContactListOutputError>
}

public struct CreateContactListInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContactListInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContactListInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContactListOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContactListInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContactListOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContactListOutputError>
}

public struct CreateContactListInput: Swift.Equatable {
    /// The name of the contact list.
    /// This member is required.
    public let contactListName: Swift.String?
    /// A description of what the contact list is about.
    public let description: Swift.String?
    /// The tags associated with a contact list.
    public let tags: [SesV2ClientTypes.Tag]?
    /// An interest group, theme, or label within a list. A contact list can have multiple
    ///             topics.
    public let topics: [SesV2ClientTypes.Topic]?

    public init (
        contactListName: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [SesV2ClientTypes.Tag]? = nil,
        topics: [SesV2ClientTypes.Topic]? = nil
    )
    {
        self.contactListName = contactListName
        self.description = description
        self.tags = tags
        self.topics = topics
    }
}

struct CreateContactListInputBody: Swift.Equatable {
    public let contactListName: Swift.String?
    public let topics: [SesV2ClientTypes.Topic]?
    public let description: Swift.String?
    public let tags: [SesV2ClientTypes.Tag]?
}

extension CreateContactListInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactListName = "ContactListName"
        case description = "Description"
        case tags = "Tags"
        case topics = "Topics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactListName)
        contactListName = contactListNameDecoded
        let topicsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Topic?].self, forKey: .topics)
        var topicsDecoded0:[SesV2ClientTypes.Topic]? = nil
        if let topicsContainer = topicsContainer {
            topicsDecoded0 = [SesV2ClientTypes.Topic]()
            for structure0 in topicsContainer {
                if let structure0 = structure0 {
                    topicsDecoded0?.append(structure0)
                }
            }
        }
        topics = topicsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SesV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SesV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateContactListOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContactListOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateContactListOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContactListOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContactListOutputResponse()"}
}

extension CreateContactListOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateContactListOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateContactListOutputResponseBody: Swift.Equatable {
}

extension CreateContactListOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CreateContactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateContactOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContactOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContactOutputResponse()"}
}

extension CreateContactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateContactOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateContactOutputResponseBody: Swift.Equatable {
}

extension CreateContactOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateCustomVerificationEmailTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCustomVerificationEmailTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCustomVerificationEmailTemplateOutputError>
}

extension CreateCustomVerificationEmailTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCustomVerificationEmailTemplateInput(failureRedirectionURL: \(Swift.String(describing: failureRedirectionURL)), fromEmailAddress: \(Swift.String(describing: fromEmailAddress)), successRedirectionURL: \(Swift.String(describing: successRedirectionURL)), templateContent: \(Swift.String(describing: templateContent)), templateName: \(Swift.String(describing: templateName)), templateSubject: \(Swift.String(describing: templateSubject)))"}
}

extension CreateCustomVerificationEmailTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureRedirectionURL = failureRedirectionURL {
            try encodeContainer.encode(failureRedirectionURL, forKey: .failureRedirectionURL)
        }
        if let fromEmailAddress = fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let successRedirectionURL = successRedirectionURL {
            try encodeContainer.encode(successRedirectionURL, forKey: .successRedirectionURL)
        }
        if let templateContent = templateContent {
            try encodeContainer.encode(templateContent, forKey: .templateContent)
        }
        if let templateName = templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateSubject = templateSubject {
            try encodeContainer.encode(templateSubject, forKey: .templateSubject)
        }
    }
}

public struct CreateCustomVerificationEmailTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCustomVerificationEmailTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCustomVerificationEmailTemplateOutputError>
}

public struct CreateCustomVerificationEmailTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCustomVerificationEmailTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCustomVerificationEmailTemplateOutputError>
}

/// Represents a request to create a custom verification email template.
public struct CreateCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The URL that the recipient of the verification email is sent to if his or her address
    ///             is not successfully verified.
    /// This member is required.
    public let failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    /// This member is required.
    public let fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address
    ///             is successfully verified.
    /// This member is required.
    public let successRedirectionURL: Swift.String?
    /// The content of the custom verification email. The total size of the email must be less
    ///             than 10 MB. The message body may contain HTML, with some limitations. For more
    ///             information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions in the Amazon SES
    ///                 Developer Guide.
    /// This member is required.
    public let templateContent: Swift.String?
    /// The name of the custom verification email template.
    /// This member is required.
    public let templateName: Swift.String?
    /// The subject line of the custom verification email.
    /// This member is required.
    public let templateSubject: Swift.String?

    public init (
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

struct CreateCustomVerificationEmailTemplateInputBody: Swift.Equatable {
    public let templateName: Swift.String?
    public let fromEmailAddress: Swift.String?
    public let templateSubject: Swift.String?
    public let templateContent: Swift.String?
    public let successRedirectionURL: Swift.String?
    public let failureRedirectionURL: Swift.String?
}

extension CreateCustomVerificationEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let templateSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSubject)
        templateSubject = templateSubjectDecoded
        let templateContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateContent)
        templateContent = templateContentDecoded
        let successRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successRedirectionURL)
        successRedirectionURL = successRedirectionURLDecoded
        let failureRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureRedirectionURL)
        failureRedirectionURL = failureRedirectionURLDecoded
    }
}

extension CreateCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCustomVerificationEmailTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCustomVerificationEmailTemplateOutputResponse()"}
}

extension CreateCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty
///             HTTP body.
public struct CreateCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateCustomVerificationEmailTemplateOutputResponseBody: Swift.Equatable {
}

extension CreateCustomVerificationEmailTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateDedicatedIpPoolInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDedicatedIpPoolInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDedicatedIpPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDedicatedIpPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDedicatedIpPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDedicatedIpPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDedicatedIpPoolOutputError>
}

extension CreateDedicatedIpPoolInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDedicatedIpPoolInput(poolName: \(Swift.String(describing: poolName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateDedicatedIpPoolInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case poolName = "PoolName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let poolName = poolName {
            try encodeContainer.encode(poolName, forKey: .poolName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateDedicatedIpPoolInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDedicatedIpPoolInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDedicatedIpPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDedicatedIpPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDedicatedIpPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDedicatedIpPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDedicatedIpPoolOutputError>
}

public struct CreateDedicatedIpPoolInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDedicatedIpPoolInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDedicatedIpPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDedicatedIpPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDedicatedIpPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDedicatedIpPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDedicatedIpPoolOutputError>
}

/// A request to create a new dedicated IP pool.
public struct CreateDedicatedIpPoolInput: Swift.Equatable {
    /// The name of the dedicated IP pool.
    /// This member is required.
    public let poolName: Swift.String?
    /// An object that defines the tags (keys and values) that you want to associate with the
    ///             pool.
    public let tags: [SesV2ClientTypes.Tag]?

    public init (
        poolName: Swift.String? = nil,
        tags: [SesV2ClientTypes.Tag]? = nil
    )
    {
        self.poolName = poolName
        self.tags = tags
    }
}

struct CreateDedicatedIpPoolInputBody: Swift.Equatable {
    public let poolName: Swift.String?
    public let tags: [SesV2ClientTypes.Tag]?
}

extension CreateDedicatedIpPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case poolName = "PoolName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let poolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolName)
        poolName = poolNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SesV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SesV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDedicatedIpPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDedicatedIpPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDedicatedIpPoolOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case limitExceededException(LimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDedicatedIpPoolOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDedicatedIpPoolOutputResponse()"}
}

extension CreateDedicatedIpPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct CreateDedicatedIpPoolOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateDedicatedIpPoolOutputResponseBody: Swift.Equatable {
}

extension CreateDedicatedIpPoolOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateDeliverabilityTestReportInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDeliverabilityTestReportInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDeliverabilityTestReportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDeliverabilityTestReportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDeliverabilityTestReportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDeliverabilityTestReportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDeliverabilityTestReportOutputError>
}

extension CreateDeliverabilityTestReportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDeliverabilityTestReportInput(content: \(Swift.String(describing: content)), fromEmailAddress: \(Swift.String(describing: fromEmailAddress)), reportName: \(Swift.String(describing: reportName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateDeliverabilityTestReportInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case fromEmailAddress = "FromEmailAddress"
        case reportName = "ReportName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let fromEmailAddress = fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let reportName = reportName {
            try encodeContainer.encode(reportName, forKey: .reportName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateDeliverabilityTestReportInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDeliverabilityTestReportInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDeliverabilityTestReportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDeliverabilityTestReportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDeliverabilityTestReportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDeliverabilityTestReportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDeliverabilityTestReportOutputError>
}

public struct CreateDeliverabilityTestReportInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDeliverabilityTestReportInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDeliverabilityTestReportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDeliverabilityTestReportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDeliverabilityTestReportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDeliverabilityTestReportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDeliverabilityTestReportOutputError>
}

/// A request to perform a predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will
///             be handled by various email providers around the world. When you perform a predictive inbox placement test, you
///             provide a sample message that contains the content that you plan to send to your
///             customers. We send that message to special email addresses spread across several major
///             email providers around the world. The test takes about 24 hours to complete. When the
///             test is complete, you can use the GetDeliverabilityTestReport operation to
///             view the results of the test.
public struct CreateDeliverabilityTestReportInput: Swift.Equatable {
    /// The HTML body of the message that you sent when you performed the predictive inbox placement test.
    /// This member is required.
    public let content: SesV2ClientTypes.EmailContent?
    /// The email address that the predictive inbox placement test email was sent from.
    /// This member is required.
    public let fromEmailAddress: Swift.String?
    /// A unique name that helps you to identify the predictive inbox placement test when you retrieve the
    ///             results.
    public let reportName: Swift.String?
    /// An array of objects that define the tags (keys and values) that you want to associate
    ///             with the predictive inbox placement test.
    public let tags: [SesV2ClientTypes.Tag]?

    public init (
        content: SesV2ClientTypes.EmailContent? = nil,
        fromEmailAddress: Swift.String? = nil,
        reportName: Swift.String? = nil,
        tags: [SesV2ClientTypes.Tag]? = nil
    )
    {
        self.content = content
        self.fromEmailAddress = fromEmailAddress
        self.reportName = reportName
        self.tags = tags
    }
}

struct CreateDeliverabilityTestReportInputBody: Swift.Equatable {
    public let reportName: Swift.String?
    public let fromEmailAddress: Swift.String?
    public let content: SesV2ClientTypes.EmailContent?
    public let tags: [SesV2ClientTypes.Tag]?
}

extension CreateDeliverabilityTestReportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case fromEmailAddress = "FromEmailAddress"
        case reportName = "ReportName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportName)
        reportName = reportNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let contentDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.EmailContent.self, forKey: .content)
        content = contentDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SesV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SesV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDeliverabilityTestReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDeliverabilityTestReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSuspendedException" : self = .accountSuspendedException(try AccountSuspendedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SendingPausedException" : self = .sendingPausedException(try SendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDeliverabilityTestReportOutputError: Swift.Error, Swift.Equatable {
    case accountSuspendedException(AccountSuspendedException)
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case limitExceededException(LimitExceededException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case notFoundException(NotFoundException)
    case sendingPausedException(SendingPausedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDeliverabilityTestReportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDeliverabilityTestReportOutputResponse(deliverabilityTestStatus: \(Swift.String(describing: deliverabilityTestStatus)), reportId: \(Swift.String(describing: reportId)))"}
}

extension CreateDeliverabilityTestReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDeliverabilityTestReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deliverabilityTestStatus = output.deliverabilityTestStatus
            self.reportId = output.reportId
        } else {
            self.deliverabilityTestStatus = nil
            self.reportId = nil
        }
    }
}

/// Information about the predictive inbox placement test that you created.
public struct CreateDeliverabilityTestReportOutputResponse: Swift.Equatable {
    /// The status of the predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test
    ///             is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the
    ///             test. If the status is COMPLETE, then the test is finished, and you can use
    ///             the GetDeliverabilityTestReport to view the results of the test.
    /// This member is required.
    public let deliverabilityTestStatus: SesV2ClientTypes.DeliverabilityTestStatus?
    /// A unique string that identifies the predictive inbox placement test.
    /// This member is required.
    public let reportId: Swift.String?

    public init (
        deliverabilityTestStatus: SesV2ClientTypes.DeliverabilityTestStatus? = nil,
        reportId: Swift.String? = nil
    )
    {
        self.deliverabilityTestStatus = deliverabilityTestStatus
        self.reportId = reportId
    }
}

struct CreateDeliverabilityTestReportOutputResponseBody: Swift.Equatable {
    public let reportId: Swift.String?
    public let deliverabilityTestStatus: SesV2ClientTypes.DeliverabilityTestStatus?
}

extension CreateDeliverabilityTestReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliverabilityTestStatus = "DeliverabilityTestStatus"
        case reportId = "ReportId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportId)
        reportId = reportIdDecoded
        let deliverabilityTestStatusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DeliverabilityTestStatus.self, forKey: .deliverabilityTestStatus)
        deliverabilityTestStatus = deliverabilityTestStatusDecoded
    }
}

public struct CreateEmailIdentityInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateEmailIdentityInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateEmailIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateEmailIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateEmailIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateEmailIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateEmailIdentityOutputError>
}

extension CreateEmailIdentityInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEmailIdentityInput(configurationSetName: \(Swift.String(describing: configurationSetName)), dkimSigningAttributes: \(Swift.String(describing: dkimSigningAttributes)), emailIdentity: \(Swift.String(describing: emailIdentity)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateEmailIdentityInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case dkimSigningAttributes = "DkimSigningAttributes"
        case emailIdentity = "EmailIdentity"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSetName = configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let dkimSigningAttributes = dkimSigningAttributes {
            try encodeContainer.encode(dkimSigningAttributes, forKey: .dkimSigningAttributes)
        }
        if let emailIdentity = emailIdentity {
            try encodeContainer.encode(emailIdentity, forKey: .emailIdentity)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateEmailIdentityInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateEmailIdentityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateEmailIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateEmailIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateEmailIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateEmailIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateEmailIdentityOutputError>
}

public struct CreateEmailIdentityInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateEmailIdentityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateEmailIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateEmailIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateEmailIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateEmailIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateEmailIdentityOutputError>
}

/// A request to begin the verification process for an email identity (an email address or
///             domain).
public struct CreateEmailIdentityInput: Swift.Equatable {
    /// The configuration set to use by default when sending from this identity.
    ///             Note that any configuration set defined in the email sending request takes precedence.
    ///
    public let configurationSetName: Swift.String?
    /// If your request includes this object, Amazon SES configures the identity to use Bring Your
    ///             Own DKIM (BYODKIM) for DKIM authentication purposes, as opposed to the default method,
    ///                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy
    ///                 DKIM.
    ///         You can only specify this object if the email identity is a domain, as opposed to an
    ///             address.
    public let dkimSigningAttributes: SesV2ClientTypes.DkimSigningAttributes?
    /// The email address or domain that you want to verify.
    /// This member is required.
    public let emailIdentity: Swift.String?
    /// An array of objects that define the tags (keys and values) that you want to associate
    ///             with the email identity.
    public let tags: [SesV2ClientTypes.Tag]?

    public init (
        configurationSetName: Swift.String? = nil,
        dkimSigningAttributes: SesV2ClientTypes.DkimSigningAttributes? = nil,
        emailIdentity: Swift.String? = nil,
        tags: [SesV2ClientTypes.Tag]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.dkimSigningAttributes = dkimSigningAttributes
        self.emailIdentity = emailIdentity
        self.tags = tags
    }
}

struct CreateEmailIdentityInputBody: Swift.Equatable {
    public let emailIdentity: Swift.String?
    public let tags: [SesV2ClientTypes.Tag]?
    public let dkimSigningAttributes: SesV2ClientTypes.DkimSigningAttributes?
    public let configurationSetName: Swift.String?
}

extension CreateEmailIdentityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case dkimSigningAttributes = "DkimSigningAttributes"
        case emailIdentity = "EmailIdentity"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailIdentity)
        emailIdentity = emailIdentityDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SesV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SesV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let dkimSigningAttributesDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DkimSigningAttributes.self, forKey: .dkimSigningAttributes)
        dkimSigningAttributes = dkimSigningAttributesDecoded
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension CreateEmailIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEmailIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateEmailIdentityOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEmailIdentityOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEmailIdentityOutputResponse(dkimAttributes: \(Swift.String(describing: dkimAttributes)), identityType: \(Swift.String(describing: identityType)), verifiedForSendingStatus: \(Swift.String(describing: verifiedForSendingStatus)))"}
}

extension CreateEmailIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateEmailIdentityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dkimAttributes = output.dkimAttributes
            self.identityType = output.identityType
            self.verifiedForSendingStatus = output.verifiedForSendingStatus
        } else {
            self.dkimAttributes = nil
            self.identityType = nil
            self.verifiedForSendingStatus = false
        }
    }
}

/// If the email identity is a domain, this object contains information about the DKIM
///             verification status for the domain.
///         If the email identity is an email address, this object is empty.
public struct CreateEmailIdentityOutputResponse: Swift.Equatable {
    /// An object that contains information about the DKIM attributes for the identity.
    public let dkimAttributes: SesV2ClientTypes.DkimAttributes?
    /// The email identity type.
    public let identityType: SesV2ClientTypes.IdentityType?
    /// Specifies whether or not the identity is verified. You can only send email from
    ///             verified email addresses or domains. For more information about verifying identities,
    ///             see the <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html">Amazon Pinpoint User Guide.
    public let verifiedForSendingStatus: Swift.Bool

    public init (
        dkimAttributes: SesV2ClientTypes.DkimAttributes? = nil,
        identityType: SesV2ClientTypes.IdentityType? = nil,
        verifiedForSendingStatus: Swift.Bool = false
    )
    {
        self.dkimAttributes = dkimAttributes
        self.identityType = identityType
        self.verifiedForSendingStatus = verifiedForSendingStatus
    }
}

struct CreateEmailIdentityOutputResponseBody: Swift.Equatable {
    public let identityType: SesV2ClientTypes.IdentityType?
    public let verifiedForSendingStatus: Swift.Bool
    public let dkimAttributes: SesV2ClientTypes.DkimAttributes?
}

extension CreateEmailIdentityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimAttributes = "DkimAttributes"
        case identityType = "IdentityType"
        case verifiedForSendingStatus = "VerifiedForSendingStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityTypeDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let verifiedForSendingStatusDecoded = try containerValues.decode(Swift.Bool.self, forKey: .verifiedForSendingStatus)
        verifiedForSendingStatus = verifiedForSendingStatusDecoded
        let dkimAttributesDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DkimAttributes.self, forKey: .dkimAttributes)
        dkimAttributes = dkimAttributesDecoded
    }
}

public struct CreateEmailIdentityPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateEmailIdentityPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateEmailIdentityPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateEmailIdentityPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateEmailIdentityPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateEmailIdentityPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateEmailIdentityPolicyOutputError>
}

extension CreateEmailIdentityPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEmailIdentityPolicyInput(emailIdentity: \(Swift.String(describing: emailIdentity)), policy: \(Swift.String(describing: policy)), policyName: \(Swift.String(describing: policyName)))"}
}

extension CreateEmailIdentityPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policy = policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
    }
}

public struct CreateEmailIdentityPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateEmailIdentityPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateEmailIdentityPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateEmailIdentityPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateEmailIdentityPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateEmailIdentityPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateEmailIdentityPolicyOutputError>
}

public struct CreateEmailIdentityPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateEmailIdentityPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateEmailIdentityPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateEmailIdentityPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateEmailIdentityPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateEmailIdentityPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateEmailIdentityPolicyOutputError>
}

/// Represents a request to create a sending authorization policy for an identity. Sending
///             authorization is an Amazon SES feature that enables you to authorize other senders to use
///             your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html">Amazon SES Developer Guide.
public struct CreateEmailIdentityPolicyInput: Swift.Equatable {
    /// The email identity for which you want to create a policy.
    /// This member is required.
    public let emailIdentity: Swift.String?
    /// The text of the policy in JSON format. The policy cannot exceed 4 KB.
    ///         For information about the syntax of sending authorization policies, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer
    ///                 Guide.
    /// This member is required.
    public let policy: Swift.String?
    /// The name of the policy.
    ///
    ///         The policy name cannot exceed 64 characters and can only include alphanumeric
    ///             characters, dashes, and underscores.
    /// This member is required.
    public let policyName: Swift.String?

    public init (
        emailIdentity: Swift.String? = nil,
        policy: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
        self.policy = policy
        self.policyName = policyName
    }
}

struct CreateEmailIdentityPolicyInputBody: Swift.Equatable {
    public let policy: Swift.String?
}

extension CreateEmailIdentityPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension CreateEmailIdentityPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEmailIdentityPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateEmailIdentityPolicyOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEmailIdentityPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEmailIdentityPolicyOutputResponse()"}
}

extension CreateEmailIdentityPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct CreateEmailIdentityPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateEmailIdentityPolicyOutputResponseBody: Swift.Equatable {
}

extension CreateEmailIdentityPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateEmailTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateEmailTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateEmailTemplateOutputError>
}

extension CreateEmailTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEmailTemplateInput(templateContent: \(Swift.String(describing: templateContent)), templateName: \(Swift.String(describing: templateName)))"}
}

extension CreateEmailTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let templateContent = templateContent {
            try encodeContainer.encode(templateContent, forKey: .templateContent)
        }
        if let templateName = templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
    }
}

public struct CreateEmailTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateEmailTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateEmailTemplateOutputError>
}

public struct CreateEmailTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateEmailTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateEmailTemplateOutputError>
}

/// Represents a request to create an email template. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES
///                 Developer Guide.
public struct CreateEmailTemplateInput: Swift.Equatable {
    /// The content of the email template, composed of a subject line, an HTML part, and a
    ///             text-only part.
    /// This member is required.
    public let templateContent: SesV2ClientTypes.EmailTemplateContent?
    /// The name of the template you want to create.
    /// This member is required.
    public let templateName: Swift.String?

    public init (
        templateContent: SesV2ClientTypes.EmailTemplateContent? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateContent = templateContent
        self.templateName = templateName
    }
}

struct CreateEmailTemplateInputBody: Swift.Equatable {
    public let templateName: Swift.String?
    public let templateContent: SesV2ClientTypes.EmailTemplateContent?
}

extension CreateEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateContentDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.EmailTemplateContent.self, forKey: .templateContent)
        templateContent = templateContentDecoded
    }
}

extension CreateEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEmailTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEmailTemplateOutputResponse()"}
}

extension CreateEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty
///             HTTP body.
public struct CreateEmailTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateEmailTemplateOutputResponseBody: Swift.Equatable {
}

extension CreateEmailTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateImportJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateImportJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateImportJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateImportJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateImportJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateImportJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateImportJobOutputError>
}

extension CreateImportJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateImportJobInput(importDataSource: \(Swift.String(describing: importDataSource)), importDestination: \(Swift.String(describing: importDestination)))"}
}

extension CreateImportJobInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importDataSource = "ImportDataSource"
        case importDestination = "ImportDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let importDataSource = importDataSource {
            try encodeContainer.encode(importDataSource, forKey: .importDataSource)
        }
        if let importDestination = importDestination {
            try encodeContainer.encode(importDestination, forKey: .importDestination)
        }
    }
}

public struct CreateImportJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateImportJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateImportJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateImportJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateImportJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateImportJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateImportJobOutputError>
}

public struct CreateImportJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateImportJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateImportJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateImportJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateImportJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateImportJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateImportJobOutputError>
}

/// Represents a request to create an import job from a data source for a data
///             destination.
public struct CreateImportJobInput: Swift.Equatable {
    /// The data source for the import job.
    /// This member is required.
    public let importDataSource: SesV2ClientTypes.ImportDataSource?
    /// The destination for the import job.
    /// This member is required.
    public let importDestination: SesV2ClientTypes.ImportDestination?

    public init (
        importDataSource: SesV2ClientTypes.ImportDataSource? = nil,
        importDestination: SesV2ClientTypes.ImportDestination? = nil
    )
    {
        self.importDataSource = importDataSource
        self.importDestination = importDestination
    }
}

struct CreateImportJobInputBody: Swift.Equatable {
    public let importDestination: SesV2ClientTypes.ImportDestination?
    public let importDataSource: SesV2ClientTypes.ImportDataSource?
}

extension CreateImportJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importDataSource = "ImportDataSource"
        case importDestination = "ImportDestination"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ImportDestination.self, forKey: .importDestination)
        importDestination = importDestinationDecoded
        let importDataSourceDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ImportDataSource.self, forKey: .importDataSource)
        importDataSource = importDataSourceDecoded
    }
}

extension CreateImportJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateImportJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateImportJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateImportJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateImportJobOutputResponse(jobId: \(Swift.String(describing: jobId)))"}
}

extension CreateImportJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateImportJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
        } else {
            self.jobId = nil
        }
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct CreateImportJobOutputResponse: Swift.Equatable {
    /// A string that represents the import job ID.
    public let jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct CreateImportJobOutputResponseBody: Swift.Equatable {
    public let jobId: Swift.String?
}

extension CreateImportJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension SesV2ClientTypes.CustomVerificationEmailTemplateMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureRedirectionURL = failureRedirectionURL {
            try encodeContainer.encode(failureRedirectionURL, forKey: .failureRedirectionURL)
        }
        if let fromEmailAddress = fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let successRedirectionURL = successRedirectionURL {
            try encodeContainer.encode(successRedirectionURL, forKey: .successRedirectionURL)
        }
        if let templateName = templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateSubject = templateSubject {
            try encodeContainer.encode(templateSubject, forKey: .templateSubject)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let templateSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSubject)
        templateSubject = templateSubjectDecoded
        let successRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successRedirectionURL)
        successRedirectionURL = successRedirectionURLDecoded
        let failureRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureRedirectionURL)
        failureRedirectionURL = failureRedirectionURLDecoded
    }
}

extension SesV2ClientTypes.CustomVerificationEmailTemplateMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomVerificationEmailTemplateMetadata(failureRedirectionURL: \(Swift.String(describing: failureRedirectionURL)), fromEmailAddress: \(Swift.String(describing: fromEmailAddress)), successRedirectionURL: \(Swift.String(describing: successRedirectionURL)), templateName: \(Swift.String(describing: templateName)), templateSubject: \(Swift.String(describing: templateSubject)))"}
}

extension SesV2ClientTypes {
    /// Contains information about a custom verification email template.
    public struct CustomVerificationEmailTemplateMetadata: Swift.Equatable {
        /// The URL that the recipient of the verification email is sent to if his or her address
        ///             is not successfully verified.
        public let failureRedirectionURL: Swift.String?
        /// The email address that the custom verification email is sent from.
        public let fromEmailAddress: Swift.String?
        /// The URL that the recipient of the verification email is sent to if his or her address
        ///             is successfully verified.
        public let successRedirectionURL: Swift.String?
        /// The name of the custom verification email template.
        public let templateName: Swift.String?
        /// The subject line of the custom verification email.
        public let templateSubject: Swift.String?

        public init (
            failureRedirectionURL: Swift.String? = nil,
            fromEmailAddress: Swift.String? = nil,
            successRedirectionURL: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateSubject: Swift.String? = nil
        )
        {
            self.failureRedirectionURL = failureRedirectionURL
            self.fromEmailAddress = fromEmailAddress
            self.successRedirectionURL = successRedirectionURL
            self.templateName = templateName
            self.templateSubject = templateSubject
        }
    }

}

extension SesV2ClientTypes.DailyVolume: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainIspPlacements = "DomainIspPlacements"
        case startDate = "StartDate"
        case volumeStatistics = "VolumeStatistics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainIspPlacements = domainIspPlacements {
            var domainIspPlacementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainIspPlacements)
            for domainispplacements0 in domainIspPlacements {
                try domainIspPlacementsContainer.encode(domainispplacements0)
            }
        }
        if let startDate = startDate {
            try encodeContainer.encode(startDate.timeIntervalSince1970, forKey: .startDate)
        }
        if let volumeStatistics = volumeStatistics {
            try encodeContainer.encode(volumeStatistics, forKey: .volumeStatistics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startDate)
        startDate = startDateDecoded
        let volumeStatisticsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.VolumeStatistics.self, forKey: .volumeStatistics)
        volumeStatistics = volumeStatisticsDecoded
        let domainIspPlacementsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.DomainIspPlacement?].self, forKey: .domainIspPlacements)
        var domainIspPlacementsDecoded0:[SesV2ClientTypes.DomainIspPlacement]? = nil
        if let domainIspPlacementsContainer = domainIspPlacementsContainer {
            domainIspPlacementsDecoded0 = [SesV2ClientTypes.DomainIspPlacement]()
            for structure0 in domainIspPlacementsContainer {
                if let structure0 = structure0 {
                    domainIspPlacementsDecoded0?.append(structure0)
                }
            }
        }
        domainIspPlacements = domainIspPlacementsDecoded0
    }
}

extension SesV2ClientTypes.DailyVolume: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DailyVolume(domainIspPlacements: \(Swift.String(describing: domainIspPlacements)), startDate: \(Swift.String(describing: startDate)), volumeStatistics: \(Swift.String(describing: volumeStatistics)))"}
}

extension SesV2ClientTypes {
    /// An object that contains information about the volume of email sent on each day of the
    ///             analysis period.
    public struct DailyVolume: Swift.Equatable {
        /// An object that contains inbox placement metrics for a specified day in the analysis
        ///             period, broken out by the recipient's email provider.
        public let domainIspPlacements: [SesV2ClientTypes.DomainIspPlacement]?
        /// The date that the DailyVolume metrics apply to, in Unix time.
        public let startDate: ClientRuntime.Date?
        /// An object that contains inbox placement metrics for a specific day in the analysis
        ///             period.
        public let volumeStatistics: SesV2ClientTypes.VolumeStatistics?

        public init (
            domainIspPlacements: [SesV2ClientTypes.DomainIspPlacement]? = nil,
            startDate: ClientRuntime.Date? = nil,
            volumeStatistics: SesV2ClientTypes.VolumeStatistics? = nil
        )
        {
            self.domainIspPlacements = domainIspPlacements
            self.startDate = startDate
            self.volumeStatistics = volumeStatistics
        }
    }

}

extension SesV2ClientTypes {
    /// The data format of the import job's data source.
    public enum DataFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case csv
        case json
        case sdkUnknown(Swift.String)

        public static var allCases: [DataFormat] {
            return [
                .csv,
                .json,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .json: return "JSON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataFormat(rawValue: rawValue) ?? DataFormat.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.DedicatedIp: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ip = "Ip"
        case poolName = "PoolName"
        case warmupPercentage = "WarmupPercentage"
        case warmupStatus = "WarmupStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ip = ip {
            try encodeContainer.encode(ip, forKey: .ip)
        }
        if let poolName = poolName {
            try encodeContainer.encode(poolName, forKey: .poolName)
        }
        if let warmupPercentage = warmupPercentage {
            try encodeContainer.encode(warmupPercentage, forKey: .warmupPercentage)
        }
        if let warmupStatus = warmupStatus {
            try encodeContainer.encode(warmupStatus.rawValue, forKey: .warmupStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ip)
        ip = ipDecoded
        let warmupStatusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.WarmupStatus.self, forKey: .warmupStatus)
        warmupStatus = warmupStatusDecoded
        let warmupPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .warmupPercentage)
        warmupPercentage = warmupPercentageDecoded
        let poolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolName)
        poolName = poolNameDecoded
    }
}

extension SesV2ClientTypes.DedicatedIp: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DedicatedIp(ip: \(Swift.String(describing: ip)), poolName: \(Swift.String(describing: poolName)), warmupPercentage: \(Swift.String(describing: warmupPercentage)), warmupStatus: \(Swift.String(describing: warmupStatus)))"}
}

extension SesV2ClientTypes {
    /// Contains information about a dedicated IP address that is associated with your Amazon SES
    ///             account.
    ///         To learn more about requesting dedicated IP addresses, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/dedicated-ip-case.html">Requesting and Relinquishing
    ///                 Dedicated IP Addresses in the Amazon SES Developer
    ///             Guide.
    public struct DedicatedIp: Swift.Equatable {
        /// An IPv4 address.
        /// This member is required.
        public let ip: Swift.String?
        /// The name of the dedicated IP pool that the IP address is associated with.
        public let poolName: Swift.String?
        /// Indicates how complete the dedicated IP warm-up process is. When this value equals 1,
        ///             the address has completed the warm-up process and is ready for use.
        /// This member is required.
        public let warmupPercentage: Swift.Int?
        /// The warm-up status of a dedicated IP address. The status can have one of the following
        ///             values:
        ///
        ///
        ///
        ///                   IN_PROGRESS – The IP address isn't ready to use because the
        ///                     dedicated IP warm-up process is ongoing.
        ///
        ///
        ///
        ///                   DONE – The dedicated IP warm-up process is complete, and
        ///                     the IP address is ready to use.
        ///
        ///
        /// This member is required.
        public let warmupStatus: SesV2ClientTypes.WarmupStatus?

        public init (
            ip: Swift.String? = nil,
            poolName: Swift.String? = nil,
            warmupPercentage: Swift.Int? = nil,
            warmupStatus: SesV2ClientTypes.WarmupStatus? = nil
        )
        {
            self.ip = ip
            self.poolName = poolName
            self.warmupPercentage = warmupPercentage
            self.warmupStatus = warmupStatus
        }
    }

}

extension DeleteConfigurationSetEventDestinationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigurationSetEventDestinationInput(configurationSetName: \(Swift.String(describing: configurationSetName)), eventDestinationName: \(Swift.String(describing: eventDestinationName)))"}
}

extension DeleteConfigurationSetEventDestinationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteConfigurationSetEventDestinationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationSetEventDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationSetEventDestinationOutputError>
}

public struct DeleteConfigurationSetEventDestinationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationSetEventDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationSetEventDestinationOutputError>
}

/// A request to delete an event destination from a configuration set.
public struct DeleteConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set that contains the event destination that you want to
    ///             delete.
    /// This member is required.
    public let configurationSetName: Swift.String?
    /// The name of the event destination that you want to delete.
    /// This member is required.
    public let eventDestinationName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestinationName = eventDestinationName
    }
}

struct DeleteConfigurationSetEventDestinationInputBody: Swift.Equatable {
}

extension DeleteConfigurationSetEventDestinationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationSetEventDestinationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigurationSetEventDestinationOutputResponse()"}
}

extension DeleteConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct DeleteConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteConfigurationSetEventDestinationOutputResponseBody: Swift.Equatable {
}

extension DeleteConfigurationSetEventDestinationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteConfigurationSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigurationSetInput(configurationSetName: \(Swift.String(describing: configurationSetName)))"}
}

extension DeleteConfigurationSetInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteConfigurationSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationSetOutputError>
}

public struct DeleteConfigurationSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationSetOutputError>
}

/// A request to delete a configuration set.
public struct DeleteConfigurationSetInput: Swift.Equatable {
    /// The name of the configuration set that you want to delete.
    /// This member is required.
    public let configurationSetName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

struct DeleteConfigurationSetInputBody: Swift.Equatable {
}

extension DeleteConfigurationSetInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigurationSetOutputResponse()"}
}

extension DeleteConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct DeleteConfigurationSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteConfigurationSetOutputResponseBody: Swift.Equatable {
}

extension DeleteConfigurationSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteContactInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteContactInput(contactListName: \(Swift.String(describing: contactListName)), emailAddress: \(Swift.String(describing: emailAddress)))"}
}

extension DeleteContactInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteContactInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContactInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContactOutputError>
}

public struct DeleteContactInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContactInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContactOutputError>
}

public struct DeleteContactInput: Swift.Equatable {
    /// The name of the contact list from which the contact should be removed.
    /// This member is required.
    public let contactListName: Swift.String?
    /// The contact's email address.
    /// This member is required.
    public let emailAddress: Swift.String?

    public init (
        contactListName: Swift.String? = nil,
        emailAddress: Swift.String? = nil
    )
    {
        self.contactListName = contactListName
        self.emailAddress = emailAddress
    }
}

struct DeleteContactInputBody: Swift.Equatable {
}

extension DeleteContactInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteContactListInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteContactListInput(contactListName: \(Swift.String(describing: contactListName)))"}
}

extension DeleteContactListInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteContactListInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContactListInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContactListInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContactListOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContactListInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContactListOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContactListOutputError>
}

public struct DeleteContactListInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContactListInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContactListInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContactListOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContactListInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContactListOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContactListOutputError>
}

public struct DeleteContactListInput: Swift.Equatable {
    /// The name of the contact list.
    /// This member is required.
    public let contactListName: Swift.String?

    public init (
        contactListName: Swift.String? = nil
    )
    {
        self.contactListName = contactListName
    }
}

struct DeleteContactListInputBody: Swift.Equatable {
}

extension DeleteContactListInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteContactListOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteContactListOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteContactListOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteContactListOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteContactListOutputResponse()"}
}

extension DeleteContactListOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteContactListOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteContactListOutputResponseBody: Swift.Equatable {
}

extension DeleteContactListOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteContactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteContactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteContactOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteContactOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteContactOutputResponse()"}
}

extension DeleteContactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteContactOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteContactOutputResponseBody: Swift.Equatable {
}

extension DeleteContactOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteCustomVerificationEmailTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCustomVerificationEmailTemplateInput(templateName: \(Swift.String(describing: templateName)))"}
}

extension DeleteCustomVerificationEmailTemplateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteCustomVerificationEmailTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCustomVerificationEmailTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCustomVerificationEmailTemplateOutputError>
}

public struct DeleteCustomVerificationEmailTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCustomVerificationEmailTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCustomVerificationEmailTemplateOutputError>
}

/// Represents a request to delete an existing custom verification email template.
public struct DeleteCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The name of the custom verification email template that you want to delete.
    /// This member is required.
    public let templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct DeleteCustomVerificationEmailTemplateInputBody: Swift.Equatable {
}

extension DeleteCustomVerificationEmailTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCustomVerificationEmailTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCustomVerificationEmailTemplateOutputResponse()"}
}

extension DeleteCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty
///             HTTP body.
public struct DeleteCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteCustomVerificationEmailTemplateOutputResponseBody: Swift.Equatable {
}

extension DeleteCustomVerificationEmailTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteDedicatedIpPoolInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDedicatedIpPoolInput(poolName: \(Swift.String(describing: poolName)))"}
}

extension DeleteDedicatedIpPoolInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteDedicatedIpPoolInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDedicatedIpPoolInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDedicatedIpPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDedicatedIpPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDedicatedIpPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDedicatedIpPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDedicatedIpPoolOutputError>
}

public struct DeleteDedicatedIpPoolInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDedicatedIpPoolInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDedicatedIpPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDedicatedIpPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDedicatedIpPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDedicatedIpPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDedicatedIpPoolOutputError>
}

/// A request to delete a dedicated IP pool.
public struct DeleteDedicatedIpPoolInput: Swift.Equatable {
    /// The name of the dedicated IP pool that you want to delete.
    /// This member is required.
    public let poolName: Swift.String?

    public init (
        poolName: Swift.String? = nil
    )
    {
        self.poolName = poolName
    }
}

struct DeleteDedicatedIpPoolInputBody: Swift.Equatable {
}

extension DeleteDedicatedIpPoolInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteDedicatedIpPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDedicatedIpPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDedicatedIpPoolOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDedicatedIpPoolOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDedicatedIpPoolOutputResponse()"}
}

extension DeleteDedicatedIpPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct DeleteDedicatedIpPoolOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteDedicatedIpPoolOutputResponseBody: Swift.Equatable {
}

extension DeleteDedicatedIpPoolOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteEmailIdentityInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteEmailIdentityInput(emailIdentity: \(Swift.String(describing: emailIdentity)))"}
}

extension DeleteEmailIdentityInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteEmailIdentityInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteEmailIdentityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteEmailIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteEmailIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteEmailIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteEmailIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteEmailIdentityOutputError>
}

public struct DeleteEmailIdentityInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteEmailIdentityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteEmailIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteEmailIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteEmailIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteEmailIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteEmailIdentityOutputError>
}

/// A request to delete an existing email identity. When you delete an identity, you lose
///             the ability to send email from that identity. You can restore your ability to send email
///             by completing the verification process for the identity again.
public struct DeleteEmailIdentityInput: Swift.Equatable {
    /// The identity (that is, the email address or domain) that you want to delete.
    /// This member is required.
    public let emailIdentity: Swift.String?

    public init (
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
    }
}

struct DeleteEmailIdentityInputBody: Swift.Equatable {
}

extension DeleteEmailIdentityInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteEmailIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEmailIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteEmailIdentityOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEmailIdentityOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteEmailIdentityOutputResponse()"}
}

extension DeleteEmailIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct DeleteEmailIdentityOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteEmailIdentityOutputResponseBody: Swift.Equatable {
}

extension DeleteEmailIdentityOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteEmailIdentityPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteEmailIdentityPolicyInput(emailIdentity: \(Swift.String(describing: emailIdentity)), policyName: \(Swift.String(describing: policyName)))"}
}

extension DeleteEmailIdentityPolicyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteEmailIdentityPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteEmailIdentityPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteEmailIdentityPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteEmailIdentityPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteEmailIdentityPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteEmailIdentityPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteEmailIdentityPolicyOutputError>
}

public struct DeleteEmailIdentityPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteEmailIdentityPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteEmailIdentityPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteEmailIdentityPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteEmailIdentityPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteEmailIdentityPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteEmailIdentityPolicyOutputError>
}

/// Represents a request to delete a sending authorization policy for an identity. Sending
///             authorization is an Amazon SES feature that enables you to authorize other senders to
///             use your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html">Amazon SES Developer Guide.
public struct DeleteEmailIdentityPolicyInput: Swift.Equatable {
    /// The email identity for which you want to delete a policy.
    /// This member is required.
    public let emailIdentity: Swift.String?
    /// The name of the policy.
    ///
    ///         The policy name cannot exceed 64 characters and can only include alphanumeric
    ///             characters, dashes, and underscores.
    /// This member is required.
    public let policyName: Swift.String?

    public init (
        emailIdentity: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
        self.policyName = policyName
    }
}

struct DeleteEmailIdentityPolicyInputBody: Swift.Equatable {
}

extension DeleteEmailIdentityPolicyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteEmailIdentityPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEmailIdentityPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteEmailIdentityPolicyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEmailIdentityPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteEmailIdentityPolicyOutputResponse()"}
}

extension DeleteEmailIdentityPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct DeleteEmailIdentityPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteEmailIdentityPolicyOutputResponseBody: Swift.Equatable {
}

extension DeleteEmailIdentityPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteEmailTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteEmailTemplateInput(templateName: \(Swift.String(describing: templateName)))"}
}

extension DeleteEmailTemplateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteEmailTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteEmailTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteEmailTemplateOutputError>
}

public struct DeleteEmailTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteEmailTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteEmailTemplateOutputError>
}

/// Represents a request to delete an email template. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
///                 Guide.
public struct DeleteEmailTemplateInput: Swift.Equatable {
    /// The name of the template to be deleted.
    /// This member is required.
    public let templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct DeleteEmailTemplateInputBody: Swift.Equatable {
}

extension DeleteEmailTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEmailTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteEmailTemplateOutputResponse()"}
}

extension DeleteEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty
///             HTTP body.
public struct DeleteEmailTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteEmailTemplateOutputResponseBody: Swift.Equatable {
}

extension DeleteEmailTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSuppressedDestinationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSuppressedDestinationInput(emailAddress: \(Swift.String(describing: emailAddress)))"}
}

extension DeleteSuppressedDestinationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteSuppressedDestinationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSuppressedDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSuppressedDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSuppressedDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSuppressedDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSuppressedDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSuppressedDestinationOutputError>
}

public struct DeleteSuppressedDestinationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSuppressedDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSuppressedDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSuppressedDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSuppressedDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSuppressedDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSuppressedDestinationOutputError>
}

/// A request to remove an email address from the suppression list for your
///             account.
public struct DeleteSuppressedDestinationInput: Swift.Equatable {
    /// The suppressed email destination to remove from the account suppression list.
    /// This member is required.
    public let emailAddress: Swift.String?

    public init (
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

struct DeleteSuppressedDestinationInputBody: Swift.Equatable {
}

extension DeleteSuppressedDestinationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSuppressedDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSuppressedDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSuppressedDestinationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSuppressedDestinationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSuppressedDestinationOutputResponse()"}
}

extension DeleteSuppressedDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct DeleteSuppressedDestinationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteSuppressedDestinationOutputResponseBody: Swift.Equatable {
}

extension DeleteSuppressedDestinationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SesV2ClientTypes {
    /// The current status of your Deliverability dashboard subscription. If this value is
    ///                 PENDING_EXPIRATION, your subscription is scheduled to expire at the end
    ///             of the current calendar month.
    public enum DeliverabilityDashboardAccountStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case disabled
        case pendingExpiration
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliverabilityDashboardAccountStatus] {
            return [
                .active,
                .disabled,
                .pendingExpiration,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .disabled: return "DISABLED"
            case .pendingExpiration: return "PENDING_EXPIRATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeliverabilityDashboardAccountStatus(rawValue: rawValue) ?? DeliverabilityDashboardAccountStatus.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.DeliverabilityTestReport: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createDate = "CreateDate"
        case deliverabilityTestStatus = "DeliverabilityTestStatus"
        case fromEmailAddress = "FromEmailAddress"
        case reportId = "ReportId"
        case reportName = "ReportName"
        case subject = "Subject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createDate = createDate {
            try encodeContainer.encode(createDate.timeIntervalSince1970, forKey: .createDate)
        }
        if let deliverabilityTestStatus = deliverabilityTestStatus {
            try encodeContainer.encode(deliverabilityTestStatus.rawValue, forKey: .deliverabilityTestStatus)
        }
        if let fromEmailAddress = fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let reportId = reportId {
            try encodeContainer.encode(reportId, forKey: .reportId)
        }
        if let reportName = reportName {
            try encodeContainer.encode(reportName, forKey: .reportName)
        }
        if let subject = subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportId)
        reportId = reportIdDecoded
        let reportNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportName)
        reportName = reportNameDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createDate)
        createDate = createDateDecoded
        let deliverabilityTestStatusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DeliverabilityTestStatus.self, forKey: .deliverabilityTestStatus)
        deliverabilityTestStatus = deliverabilityTestStatusDecoded
    }
}

extension SesV2ClientTypes.DeliverabilityTestReport: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeliverabilityTestReport(createDate: \(Swift.String(describing: createDate)), deliverabilityTestStatus: \(Swift.String(describing: deliverabilityTestStatus)), fromEmailAddress: \(Swift.String(describing: fromEmailAddress)), reportId: \(Swift.String(describing: reportId)), reportName: \(Swift.String(describing: reportName)), subject: \(Swift.String(describing: subject)))"}
}

extension SesV2ClientTypes {
    /// An object that contains metadata related to a predictive inbox placement test.
    public struct DeliverabilityTestReport: Swift.Equatable {
        /// The date and time when the predictive inbox placement test was created, in Unix time format.
        public let createDate: ClientRuntime.Date?
        /// The status of the predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test
        ///             is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the
        ///             test. If the status is COMPLETE, then the test is finished, and you can use
        ///             the GetDeliverabilityTestReport to view the results of the test.
        public let deliverabilityTestStatus: SesV2ClientTypes.DeliverabilityTestStatus?
        /// The sender address that you specified for the predictive inbox placement test.
        public let fromEmailAddress: Swift.String?
        /// A unique string that identifies the predictive inbox placement test.
        public let reportId: Swift.String?
        /// A name that helps you identify a predictive inbox placement test report.
        public let reportName: Swift.String?
        /// The subject line for an email that you submitted in a predictive inbox placement test.
        public let subject: Swift.String?

        public init (
            createDate: ClientRuntime.Date? = nil,
            deliverabilityTestStatus: SesV2ClientTypes.DeliverabilityTestStatus? = nil,
            fromEmailAddress: Swift.String? = nil,
            reportId: Swift.String? = nil,
            reportName: Swift.String? = nil,
            subject: Swift.String? = nil
        )
        {
            self.createDate = createDate
            self.deliverabilityTestStatus = deliverabilityTestStatus
            self.fromEmailAddress = fromEmailAddress
            self.reportId = reportId
            self.reportName = reportName
            self.subject = subject
        }
    }

}

extension SesV2ClientTypes {
    /// The status of a predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is
    ///             currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test.
    ///             If the status is COMPLETE, then the test is finished, and you can use the
    ///                 GetDeliverabilityTestReport operation to view the results of the
    ///             test.
    public enum DeliverabilityTestStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliverabilityTestStatus] {
            return [
                .completed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeliverabilityTestStatus(rawValue: rawValue) ?? DeliverabilityTestStatus.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.DeliveryOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingPoolName = "SendingPoolName"
        case tlsPolicy = "TlsPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sendingPoolName = sendingPoolName {
            try encodeContainer.encode(sendingPoolName, forKey: .sendingPoolName)
        }
        if let tlsPolicy = tlsPolicy {
            try encodeContainer.encode(tlsPolicy.rawValue, forKey: .tlsPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tlsPolicyDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.TlsPolicy.self, forKey: .tlsPolicy)
        tlsPolicy = tlsPolicyDecoded
        let sendingPoolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sendingPoolName)
        sendingPoolName = sendingPoolNameDecoded
    }
}

extension SesV2ClientTypes.DeliveryOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeliveryOptions(sendingPoolName: \(Swift.String(describing: sendingPoolName)), tlsPolicy: \(Swift.String(describing: tlsPolicy)))"}
}

extension SesV2ClientTypes {
    /// Used to associate a configuration set with a dedicated IP pool.
    public struct DeliveryOptions: Swift.Equatable {
        /// The name of the dedicated IP pool that you want to associate with the configuration
        ///             set.
        public let sendingPoolName: Swift.String?
        /// Specifies whether messages that use the configuration set are required to use
        ///             Transport Layer Security (TLS). If the value is Require, messages are only
        ///             delivered if a TLS connection can be established. If the value is Optional,
        ///             messages can be delivered in plain text if a TLS connection can't be established.
        public let tlsPolicy: SesV2ClientTypes.TlsPolicy?

        public init (
            sendingPoolName: Swift.String? = nil,
            tlsPolicy: SesV2ClientTypes.TlsPolicy? = nil
        )
        {
            self.sendingPoolName = sendingPoolName
            self.tlsPolicy = tlsPolicy
        }
    }

}

extension SesV2ClientTypes.Destination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bccAddresses = "BccAddresses"
        case ccAddresses = "CcAddresses"
        case toAddresses = "ToAddresses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bccAddresses = bccAddresses {
            var bccAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bccAddresses)
            for emailaddresslist0 in bccAddresses {
                try bccAddressesContainer.encode(emailaddresslist0)
            }
        }
        if let ccAddresses = ccAddresses {
            var ccAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ccAddresses)
            for emailaddresslist0 in ccAddresses {
                try ccAddressesContainer.encode(emailaddresslist0)
            }
        }
        if let toAddresses = toAddresses {
            var toAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .toAddresses)
            for emailaddresslist0 in toAddresses {
                try toAddressesContainer.encode(emailaddresslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let toAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .toAddresses)
        var toAddressesDecoded0:[Swift.String]? = nil
        if let toAddressesContainer = toAddressesContainer {
            toAddressesDecoded0 = [Swift.String]()
            for string0 in toAddressesContainer {
                if let string0 = string0 {
                    toAddressesDecoded0?.append(string0)
                }
            }
        }
        toAddresses = toAddressesDecoded0
        let ccAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ccAddresses)
        var ccAddressesDecoded0:[Swift.String]? = nil
        if let ccAddressesContainer = ccAddressesContainer {
            ccAddressesDecoded0 = [Swift.String]()
            for string0 in ccAddressesContainer {
                if let string0 = string0 {
                    ccAddressesDecoded0?.append(string0)
                }
            }
        }
        ccAddresses = ccAddressesDecoded0
        let bccAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .bccAddresses)
        var bccAddressesDecoded0:[Swift.String]? = nil
        if let bccAddressesContainer = bccAddressesContainer {
            bccAddressesDecoded0 = [Swift.String]()
            for string0 in bccAddressesContainer {
                if let string0 = string0 {
                    bccAddressesDecoded0?.append(string0)
                }
            }
        }
        bccAddresses = bccAddressesDecoded0
    }
}

extension SesV2ClientTypes.Destination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Destination(bccAddresses: \(Swift.String(describing: bccAddresses)), ccAddresses: \(Swift.String(describing: ccAddresses)), toAddresses: \(Swift.String(describing: toAddresses)))"}
}

extension SesV2ClientTypes {
    /// An object that describes the recipients for an email.
    public struct Destination: Swift.Equatable {
        /// An array that contains the email addresses of the "BCC" (blind carbon copy) recipients
        ///             for the email.
        public let bccAddresses: [Swift.String]?
        /// An array that contains the email addresses of the "CC" (carbon copy) recipients for
        ///             the email.
        public let ccAddresses: [Swift.String]?
        /// An array that contains the email addresses of the "To" recipients for the
        ///             email.
        public let toAddresses: [Swift.String]?

        public init (
            bccAddresses: [Swift.String]? = nil,
            ccAddresses: [Swift.String]? = nil,
            toAddresses: [Swift.String]? = nil
        )
        {
            self.bccAddresses = bccAddresses
            self.ccAddresses = ccAddresses
            self.toAddresses = toAddresses
        }
    }

}

extension SesV2ClientTypes {
    /// The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. If
    ///             you want to use the message tags that you specify using an
    ///                 X-SES-MESSAGE-TAGS header or a parameter to the SendEmail
    ///             or SendRawEmail API, choose messageTag. If you want to use
    ///             your own email headers, choose emailHeader. If you want to use link tags,
    ///             choose linkTags.
    public enum DimensionValueSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case emailHeader
        case linkTag
        case messageTag
        case sdkUnknown(Swift.String)

        public static var allCases: [DimensionValueSource] {
            return [
                .emailHeader,
                .linkTag,
                .messageTag,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .emailHeader: return "EMAIL_HEADER"
            case .linkTag: return "LINK_TAG"
            case .messageTag: return "MESSAGE_TAG"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DimensionValueSource(rawValue: rawValue) ?? DimensionValueSource.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.DkimAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signingAttributesOrigin = "SigningAttributesOrigin"
        case signingEnabled = "SigningEnabled"
        case status = "Status"
        case tokens = "Tokens"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let signingAttributesOrigin = signingAttributesOrigin {
            try encodeContainer.encode(signingAttributesOrigin.rawValue, forKey: .signingAttributesOrigin)
        }
        if signingEnabled != false {
            try encodeContainer.encode(signingEnabled, forKey: .signingEnabled)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tokens = tokens {
            var tokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tokens)
            for dnstokenlist0 in tokens {
                try tokensContainer.encode(dnstokenlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .signingEnabled)
        signingEnabled = signingEnabledDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DkimStatus.self, forKey: .status)
        status = statusDecoded
        let tokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tokens)
        var tokensDecoded0:[Swift.String]? = nil
        if let tokensContainer = tokensContainer {
            tokensDecoded0 = [Swift.String]()
            for string0 in tokensContainer {
                if let string0 = string0 {
                    tokensDecoded0?.append(string0)
                }
            }
        }
        tokens = tokensDecoded0
        let signingAttributesOriginDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DkimSigningAttributesOrigin.self, forKey: .signingAttributesOrigin)
        signingAttributesOrigin = signingAttributesOriginDecoded
    }
}

extension SesV2ClientTypes.DkimAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DkimAttributes(signingAttributesOrigin: \(Swift.String(describing: signingAttributesOrigin)), signingEnabled: \(Swift.String(describing: signingEnabled)), status: \(Swift.String(describing: status)), tokens: \(Swift.String(describing: tokens)))"}
}

extension SesV2ClientTypes {
    /// An object that contains information about the DKIM authentication status for an email
    ///             identity.
    ///         Amazon SES determines the authentication status by searching for specific records in the
    ///             DNS configuration for the domain. If you used <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM to set up DKIM
    ///             authentication, Amazon SES tries to find three unique CNAME records in the DNS configuration
    ///             for your domain. If you provided a public key to perform DKIM authentication, Amazon SES
    ///             tries to find a TXT record that uses the selector that you specified. The value of the
    ///             TXT record must be a public key that's paired with the private key that you specified in
    ///             the process of creating the identity
    public struct DkimAttributes: Swift.Equatable {
        /// A string that indicates how DKIM was configured for the identity. There are two
        ///             possible values:
        ///
        ///
        ///
        ///                   AWS_SES – Indicates that DKIM was configured for the
        ///                     identity by using <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM.
        ///
        ///
        ///
        ///                   EXTERNAL – Indicates that DKIM was configured for the
        ///                     identity by using Bring Your Own DKIM (BYODKIM).
        ///
        ///
        public let signingAttributesOrigin: SesV2ClientTypes.DkimSigningAttributesOrigin?
        /// If the value is true, then the messages that you send from the identity
        ///             are signed using DKIM. If the value is false, then the messages that you
        ///             send from the identity aren't DKIM-signed.
        public let signingEnabled: Swift.Bool
        /// Describes whether or not Amazon SES has successfully located the DKIM records in the DNS
        ///             records for the domain. The status can be one of the following:
        ///
        ///
        ///
        ///                   PENDING – The verification process was initiated, but Amazon SES
        ///                     hasn't yet detected the DKIM records in the DNS configuration for the
        ///                     domain.
        ///
        ///
        ///
        ///                   SUCCESS – The verification process completed
        ///                     successfully.
        ///
        ///
        ///
        ///                   FAILED – The verification process failed. This typically
        ///                     occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the
        ///                     domain.
        ///
        ///
        ///
        ///                   TEMPORARY_FAILURE – A temporary issue is preventing Amazon SES
        ///                     from determining the DKIM authentication status of the domain.
        ///
        ///
        ///
        ///                   NOT_STARTED – The DKIM verification process hasn't been
        ///                     initiated for the domain.
        ///
        ///
        public let status: SesV2ClientTypes.DkimStatus?
        /// If you used <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM to configure DKIM authentication for the domain, then this object
        ///             contains a set of unique strings that you use to create a set of CNAME records that you
        ///             add to the DNS configuration for your domain. When Amazon SES detects these records in the
        ///             DNS configuration for your domain, the DKIM authentication process is complete.
        ///         If you configured DKIM authentication for the domain by providing your own
        ///             public-private key pair, then this object contains the selector for the public
        ///             key.
        ///         Regardless of the DKIM authentication method you use, Amazon SES searches for the
        ///             appropriate records in the DNS configuration of the domain for up to 72 hours.
        public let tokens: [Swift.String]?

        public init (
            signingAttributesOrigin: SesV2ClientTypes.DkimSigningAttributesOrigin? = nil,
            signingEnabled: Swift.Bool = false,
            status: SesV2ClientTypes.DkimStatus? = nil,
            tokens: [Swift.String]? = nil
        )
        {
            self.signingAttributesOrigin = signingAttributesOrigin
            self.signingEnabled = signingEnabled
            self.status = status
            self.tokens = tokens
        }
    }

}

extension SesV2ClientTypes.DkimSigningAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainSigningPrivateKey = "DomainSigningPrivateKey"
        case domainSigningSelector = "DomainSigningSelector"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainSigningPrivateKey = domainSigningPrivateKey {
            try encodeContainer.encode(domainSigningPrivateKey, forKey: .domainSigningPrivateKey)
        }
        if let domainSigningSelector = domainSigningSelector {
            try encodeContainer.encode(domainSigningSelector, forKey: .domainSigningSelector)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainSigningSelectorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainSigningSelector)
        domainSigningSelector = domainSigningSelectorDecoded
        let domainSigningPrivateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainSigningPrivateKey)
        domainSigningPrivateKey = domainSigningPrivateKeyDecoded
    }
}

extension SesV2ClientTypes.DkimSigningAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DkimSigningAttributes(domainSigningPrivateKey: \(Swift.String(describing: domainSigningPrivateKey)), domainSigningSelector: \(Swift.String(describing: domainSigningSelector)))"}
}

extension SesV2ClientTypes {
    /// An object that contains information about the tokens used for setting up Bring Your
    ///             Own DKIM (BYODKIM).
    public struct DkimSigningAttributes: Swift.Equatable {
        /// A private key that's used to generate a DKIM signature.
        ///         The private key must use 1024-bit RSA encryption, and must be encoded using base64
        ///             encoding.
        /// This member is required.
        public let domainSigningPrivateKey: Swift.String?
        /// A string that's used to identify a public key in the DNS configuration for a
        ///             domain.
        /// This member is required.
        public let domainSigningSelector: Swift.String?

        public init (
            domainSigningPrivateKey: Swift.String? = nil,
            domainSigningSelector: Swift.String? = nil
        )
        {
            self.domainSigningPrivateKey = domainSigningPrivateKey
            self.domainSigningSelector = domainSigningSelector
        }
    }

}

extension SesV2ClientTypes {
    public enum DkimSigningAttributesOrigin: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsSes
        case external
        case sdkUnknown(Swift.String)

        public static var allCases: [DkimSigningAttributesOrigin] {
            return [
                .awsSes,
                .external,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsSes: return "AWS_SES"
            case .external: return "EXTERNAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DkimSigningAttributesOrigin(rawValue: rawValue) ?? DkimSigningAttributesOrigin.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes {
    /// The DKIM authentication status of the identity. The status can be one of the
    ///             following:
    ///
    ///
    ///
    ///                   PENDING – The verification process was initiated, but Amazon SES
    ///                     hasn't yet detected the DKIM records in the DNS configuration for the
    ///                     domain.
    ///
    ///
    ///
    ///                   SUCCESS – The verification process completed
    ///                     successfully.
    ///
    ///
    ///
    ///                   FAILED – The verification process failed. This typically
    ///                     occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the
    ///                     domain.
    ///
    ///
    ///
    ///                   TEMPORARY_FAILURE – A temporary issue is preventing Amazon SES
    ///                     from determining the DKIM authentication status of the domain.
    ///
    ///
    ///
    ///                   NOT_STARTED – The DKIM verification process hasn't been
    ///                     initiated for the domain.
    ///
    ///
    public enum DkimStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case notStarted
        case pending
        case success
        case temporaryFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [DkimStatus] {
            return [
                .failed,
                .notStarted,
                .pending,
                .success,
                .temporaryFailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .notStarted: return "NOT_STARTED"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case .temporaryFailure: return "TEMPORARY_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DkimStatus(rawValue: rawValue) ?? DkimStatus.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.DomainDeliverabilityCampaign: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignId = "CampaignId"
        case deleteRate = "DeleteRate"
        case esps = "Esps"
        case firstSeenDateTime = "FirstSeenDateTime"
        case fromAddress = "FromAddress"
        case imageUrl = "ImageUrl"
        case inboxCount = "InboxCount"
        case lastSeenDateTime = "LastSeenDateTime"
        case projectedVolume = "ProjectedVolume"
        case readDeleteRate = "ReadDeleteRate"
        case readRate = "ReadRate"
        case sendingIps = "SendingIps"
        case spamCount = "SpamCount"
        case subject = "Subject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let campaignId = campaignId {
            try encodeContainer.encode(campaignId, forKey: .campaignId)
        }
        if let deleteRate = deleteRate {
            try encodeContainer.encode(deleteRate, forKey: .deleteRate)
        }
        if let esps = esps {
            var espsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .esps)
            for esps0 in esps {
                try espsContainer.encode(esps0)
            }
        }
        if let firstSeenDateTime = firstSeenDateTime {
            try encodeContainer.encode(firstSeenDateTime.timeIntervalSince1970, forKey: .firstSeenDateTime)
        }
        if let fromAddress = fromAddress {
            try encodeContainer.encode(fromAddress, forKey: .fromAddress)
        }
        if let imageUrl = imageUrl {
            try encodeContainer.encode(imageUrl, forKey: .imageUrl)
        }
        if let inboxCount = inboxCount {
            try encodeContainer.encode(inboxCount, forKey: .inboxCount)
        }
        if let lastSeenDateTime = lastSeenDateTime {
            try encodeContainer.encode(lastSeenDateTime.timeIntervalSince1970, forKey: .lastSeenDateTime)
        }
        if let projectedVolume = projectedVolume {
            try encodeContainer.encode(projectedVolume, forKey: .projectedVolume)
        }
        if let readDeleteRate = readDeleteRate {
            try encodeContainer.encode(readDeleteRate, forKey: .readDeleteRate)
        }
        if let readRate = readRate {
            try encodeContainer.encode(readRate, forKey: .readRate)
        }
        if let sendingIps = sendingIps {
            var sendingIpsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sendingIps)
            for iplist0 in sendingIps {
                try sendingIpsContainer.encode(iplist0)
            }
        }
        if let spamCount = spamCount {
            try encodeContainer.encode(spamCount, forKey: .spamCount)
        }
        if let subject = subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .campaignId)
        campaignId = campaignIdDecoded
        let imageUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUrl)
        imageUrl = imageUrlDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let fromAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromAddress)
        fromAddress = fromAddressDecoded
        let sendingIpsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sendingIps)
        var sendingIpsDecoded0:[Swift.String]? = nil
        if let sendingIpsContainer = sendingIpsContainer {
            sendingIpsDecoded0 = [Swift.String]()
            for string0 in sendingIpsContainer {
                if let string0 = string0 {
                    sendingIpsDecoded0?.append(string0)
                }
            }
        }
        sendingIps = sendingIpsDecoded0
        let firstSeenDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .firstSeenDateTime)
        firstSeenDateTime = firstSeenDateTimeDecoded
        let lastSeenDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastSeenDateTime)
        lastSeenDateTime = lastSeenDateTimeDecoded
        let inboxCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inboxCount)
        inboxCount = inboxCountDecoded
        let spamCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spamCount)
        spamCount = spamCountDecoded
        let readRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .readRate)
        readRate = readRateDecoded
        let deleteRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .deleteRate)
        deleteRate = deleteRateDecoded
        let readDeleteRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .readDeleteRate)
        readDeleteRate = readDeleteRateDecoded
        let projectedVolumeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .projectedVolume)
        projectedVolume = projectedVolumeDecoded
        let espsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .esps)
        var espsDecoded0:[Swift.String]? = nil
        if let espsContainer = espsContainer {
            espsDecoded0 = [Swift.String]()
            for string0 in espsContainer {
                if let string0 = string0 {
                    espsDecoded0?.append(string0)
                }
            }
        }
        esps = espsDecoded0
    }
}

extension SesV2ClientTypes.DomainDeliverabilityCampaign: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainDeliverabilityCampaign(campaignId: \(Swift.String(describing: campaignId)), deleteRate: \(Swift.String(describing: deleteRate)), esps: \(Swift.String(describing: esps)), firstSeenDateTime: \(Swift.String(describing: firstSeenDateTime)), fromAddress: \(Swift.String(describing: fromAddress)), imageUrl: \(Swift.String(describing: imageUrl)), inboxCount: \(Swift.String(describing: inboxCount)), lastSeenDateTime: \(Swift.String(describing: lastSeenDateTime)), projectedVolume: \(Swift.String(describing: projectedVolume)), readDeleteRate: \(Swift.String(describing: readDeleteRate)), readRate: \(Swift.String(describing: readRate)), sendingIps: \(Swift.String(describing: sendingIps)), spamCount: \(Swift.String(describing: spamCount)), subject: \(Swift.String(describing: subject)))"}
}

extension SesV2ClientTypes {
    /// An object that contains the deliverability data for a specific campaign. This data is
    ///             available for a campaign only if the campaign sent email by using a domain that the
    ///             Deliverability dashboard is enabled for (PutDeliverabilityDashboardOption
    ///             operation).
    public struct DomainDeliverabilityCampaign: Swift.Equatable {
        /// The unique identifier for the campaign. The Deliverability dashboard automatically generates
        ///             and assigns this identifier to a campaign.
        public let campaignId: Swift.String?
        /// The percentage of email messages that were deleted by recipients, without being opened
        ///             first. Due to technical limitations, this value only includes recipients who opened the
        ///             message by using an email client that supports images.
        public let deleteRate: Swift.Double?
        /// The major email providers who handled the email message.
        public let esps: [Swift.String]?
        /// The first time, in Unix time format, when the email message was delivered to any
        ///             recipient's inbox. This value can help you determine how long it took for a campaign to
        ///             deliver an email message.
        public let firstSeenDateTime: ClientRuntime.Date?
        /// The verified email address that the email message was sent from.
        public let fromAddress: Swift.String?
        /// The URL of an image that contains a snapshot of the email message that was
        ///             sent.
        public let imageUrl: Swift.String?
        /// The number of email messages that were delivered to recipients’ inboxes.
        public let inboxCount: Swift.Int?
        /// The last time, in Unix time format, when the email message was delivered to any
        ///             recipient's inbox. This value can help you determine how long it took for a campaign to
        ///             deliver an email message.
        public let lastSeenDateTime: ClientRuntime.Date?
        /// The projected number of recipients that the email message was sent to.
        public let projectedVolume: Swift.Int?
        /// The percentage of email messages that were opened and then deleted by recipients. Due
        ///             to technical limitations, this value only includes recipients who opened the message by
        ///             using an email client that supports images.
        public let readDeleteRate: Swift.Double?
        /// The percentage of email messages that were opened by recipients. Due to technical
        ///             limitations, this value only includes recipients who opened the message by using an
        ///             email client that supports images.
        public let readRate: Swift.Double?
        /// The IP addresses that were used to send the email message.
        public let sendingIps: [Swift.String]?
        /// The number of email messages that were delivered to recipients' spam or junk mail
        ///             folders.
        public let spamCount: Swift.Int?
        /// The subject line, or title, of the email message.
        public let subject: Swift.String?

        public init (
            campaignId: Swift.String? = nil,
            deleteRate: Swift.Double? = nil,
            esps: [Swift.String]? = nil,
            firstSeenDateTime: ClientRuntime.Date? = nil,
            fromAddress: Swift.String? = nil,
            imageUrl: Swift.String? = nil,
            inboxCount: Swift.Int? = nil,
            lastSeenDateTime: ClientRuntime.Date? = nil,
            projectedVolume: Swift.Int? = nil,
            readDeleteRate: Swift.Double? = nil,
            readRate: Swift.Double? = nil,
            sendingIps: [Swift.String]? = nil,
            spamCount: Swift.Int? = nil,
            subject: Swift.String? = nil
        )
        {
            self.campaignId = campaignId
            self.deleteRate = deleteRate
            self.esps = esps
            self.firstSeenDateTime = firstSeenDateTime
            self.fromAddress = fromAddress
            self.imageUrl = imageUrl
            self.inboxCount = inboxCount
            self.lastSeenDateTime = lastSeenDateTime
            self.projectedVolume = projectedVolume
            self.readDeleteRate = readDeleteRate
            self.readRate = readRate
            self.sendingIps = sendingIps
            self.spamCount = spamCount
            self.subject = subject
        }
    }

}

extension SesV2ClientTypes.DomainDeliverabilityTrackingOption: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
        case inboxPlacementTrackingOption = "InboxPlacementTrackingOption"
        case subscriptionStartDate = "SubscriptionStartDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let inboxPlacementTrackingOption = inboxPlacementTrackingOption {
            try encodeContainer.encode(inboxPlacementTrackingOption, forKey: .inboxPlacementTrackingOption)
        }
        if let subscriptionStartDate = subscriptionStartDate {
            try encodeContainer.encode(subscriptionStartDate.timeIntervalSince1970, forKey: .subscriptionStartDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let subscriptionStartDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .subscriptionStartDate)
        subscriptionStartDate = subscriptionStartDateDecoded
        let inboxPlacementTrackingOptionDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.InboxPlacementTrackingOption.self, forKey: .inboxPlacementTrackingOption)
        inboxPlacementTrackingOption = inboxPlacementTrackingOptionDecoded
    }
}

extension SesV2ClientTypes.DomainDeliverabilityTrackingOption: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainDeliverabilityTrackingOption(domain: \(Swift.String(describing: domain)), inboxPlacementTrackingOption: \(Swift.String(describing: inboxPlacementTrackingOption)), subscriptionStartDate: \(Swift.String(describing: subscriptionStartDate)))"}
}

extension SesV2ClientTypes {
    /// An object that contains information about the Deliverability dashboard subscription for a
    ///             verified domain that you use to send email and currently has an active Deliverability dashboard
    ///             subscription. If a Deliverability dashboard subscription is active for a domain, you gain access
    ///             to reputation, inbox placement, and other metrics for the domain.
    public struct DomainDeliverabilityTrackingOption: Swift.Equatable {
        /// A verified domain that’s associated with your AWS account and currently has an
        ///             active Deliverability dashboard subscription.
        public let domain: Swift.String?
        /// An object that contains information about the inbox placement data settings for the
        ///             domain.
        public let inboxPlacementTrackingOption: SesV2ClientTypes.InboxPlacementTrackingOption?
        /// The date, in Unix time format, when you enabled the Deliverability dashboard for the
        ///             domain.
        public let subscriptionStartDate: ClientRuntime.Date?

        public init (
            domain: Swift.String? = nil,
            inboxPlacementTrackingOption: SesV2ClientTypes.InboxPlacementTrackingOption? = nil,
            subscriptionStartDate: ClientRuntime.Date? = nil
        )
        {
            self.domain = domain
            self.inboxPlacementTrackingOption = inboxPlacementTrackingOption
            self.subscriptionStartDate = subscriptionStartDate
        }
    }

}

extension SesV2ClientTypes.DomainIspPlacement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inboxPercentage = "InboxPercentage"
        case inboxRawCount = "InboxRawCount"
        case ispName = "IspName"
        case spamPercentage = "SpamPercentage"
        case spamRawCount = "SpamRawCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inboxPercentage = inboxPercentage {
            try encodeContainer.encode(inboxPercentage, forKey: .inboxPercentage)
        }
        if let inboxRawCount = inboxRawCount {
            try encodeContainer.encode(inboxRawCount, forKey: .inboxRawCount)
        }
        if let ispName = ispName {
            try encodeContainer.encode(ispName, forKey: .ispName)
        }
        if let spamPercentage = spamPercentage {
            try encodeContainer.encode(spamPercentage, forKey: .spamPercentage)
        }
        if let spamRawCount = spamRawCount {
            try encodeContainer.encode(spamRawCount, forKey: .spamRawCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ispNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ispName)
        ispName = ispNameDecoded
        let inboxRawCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inboxRawCount)
        inboxRawCount = inboxRawCountDecoded
        let spamRawCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spamRawCount)
        spamRawCount = spamRawCountDecoded
        let inboxPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .inboxPercentage)
        inboxPercentage = inboxPercentageDecoded
        let spamPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .spamPercentage)
        spamPercentage = spamPercentageDecoded
    }
}

extension SesV2ClientTypes.DomainIspPlacement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainIspPlacement(inboxPercentage: \(Swift.String(describing: inboxPercentage)), inboxRawCount: \(Swift.String(describing: inboxRawCount)), ispName: \(Swift.String(describing: ispName)), spamPercentage: \(Swift.String(describing: spamPercentage)), spamRawCount: \(Swift.String(describing: spamRawCount)))"}
}

extension SesV2ClientTypes {
    /// An object that contains inbox placement data for email sent from one of your email
    ///             domains to a specific email provider.
    public struct DomainIspPlacement: Swift.Equatable {
        /// The percentage of messages that were sent from the selected domain to the specified
        ///             email provider that arrived in recipients' inboxes.
        public let inboxPercentage: Swift.Double?
        /// The total number of messages that were sent from the selected domain to the specified
        ///             email provider that arrived in recipients' inboxes.
        public let inboxRawCount: Swift.Int?
        /// The name of the email provider that the inbox placement data applies to.
        public let ispName: Swift.String?
        /// The percentage of messages that were sent from the selected domain to the specified
        ///             email provider that arrived in recipients' spam or junk mail folders.
        public let spamPercentage: Swift.Double?
        /// The total number of messages that were sent from the selected domain to the specified
        ///             email provider that arrived in recipients' spam or junk mail folders.
        public let spamRawCount: Swift.Int?

        public init (
            inboxPercentage: Swift.Double? = nil,
            inboxRawCount: Swift.Int? = nil,
            ispName: Swift.String? = nil,
            spamPercentage: Swift.Double? = nil,
            spamRawCount: Swift.Int? = nil
        )
        {
            self.inboxPercentage = inboxPercentage
            self.inboxRawCount = inboxRawCount
            self.ispName = ispName
            self.spamPercentage = spamPercentage
            self.spamRawCount = spamRawCount
        }
    }

}

extension SesV2ClientTypes.EmailContent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case raw = "Raw"
        case simple = "Simple"
        case template = "Template"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let raw = raw {
            try encodeContainer.encode(raw, forKey: .raw)
        }
        if let simple = simple {
            try encodeContainer.encode(simple, forKey: .simple)
        }
        if let template = template {
            try encodeContainer.encode(template, forKey: .template)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let simpleDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.Message.self, forKey: .simple)
        simple = simpleDecoded
        let rawDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.RawMessage.self, forKey: .raw)
        raw = rawDecoded
        let templateDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.Template.self, forKey: .template)
        template = templateDecoded
    }
}

extension SesV2ClientTypes.EmailContent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EmailContent(raw: \(Swift.String(describing: raw)), simple: \(Swift.String(describing: simple)), template: \(Swift.String(describing: template)))"}
}

extension SesV2ClientTypes {
    /// An object that defines the entire content of the email, including the message headers
    ///             and the body content. You can create a simple email message, in which you specify the
    ///             subject and the text and HTML versions of the message body. You can also create raw
    ///             messages, in which you specify a complete MIME-formatted message. Raw messages can
    ///             include attachments and custom headers.
    public struct EmailContent: Swift.Equatable {
        /// The raw email message. The message has to meet the following criteria:
        ///
        ///
        ///                 The message has to contain a header and a body, separated by one blank
        ///                     line.
        ///
        ///
        ///                 All of the required header fields must be present in the message.
        ///
        ///
        ///                 Each part of a multipart MIME message must be formatted properly.
        ///
        ///
        ///                 If you include attachments, they must be in a file format that the Amazon SES API v2
        ///                     supports.
        ///
        ///
        ///
        ///                 The entire message must be Base64 encoded.
        ///
        ///
        ///                 If any of the MIME parts in your message contain content that is outside of
        ///                     the 7-bit ASCII character range, you should encode that content to ensure that
        ///                     recipients' email clients render the message properly.
        ///
        ///
        ///                 The length of any single line of text in the message can't exceed 1,000
        ///                     characters. This restriction is defined in <a href="https://tools.ietf.org/html/rfc5321">RFC 5321.
        ///
        ///
        public let raw: SesV2ClientTypes.RawMessage?
        /// The simple email message. The message consists of a subject and a message body.
        public let simple: SesV2ClientTypes.Message?
        /// The template to use for the email message.
        public let template: SesV2ClientTypes.Template?

        public init (
            raw: SesV2ClientTypes.RawMessage? = nil,
            simple: SesV2ClientTypes.Message? = nil,
            template: SesV2ClientTypes.Template? = nil
        )
        {
            self.raw = raw
            self.simple = simple
            self.template = template
        }
    }

}

extension SesV2ClientTypes.EmailTemplateContent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case html = "Html"
        case subject = "Subject"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let html = html {
            try encodeContainer.encode(html, forKey: .html)
        }
        if let subject = subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let text = text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let htmlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .html)
        html = htmlDecoded
    }
}

extension SesV2ClientTypes.EmailTemplateContent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EmailTemplateContent(html: \(Swift.String(describing: html)), subject: \(Swift.String(describing: subject)), text: \(Swift.String(describing: text)))"}
}

extension SesV2ClientTypes {
    /// The content of the email, composed of a subject line, an HTML part, and a text-only
    ///             part.
    public struct EmailTemplateContent: Swift.Equatable {
        /// The HTML body of the email.
        public let html: Swift.String?
        /// The subject line of the email.
        public let subject: Swift.String?
        /// The email body that will be visible to recipients whose email clients do not display
        ///             HTML.
        public let text: Swift.String?

        public init (
            html: Swift.String? = nil,
            subject: Swift.String? = nil,
            text: Swift.String? = nil
        )
        {
            self.html = html
            self.subject = subject
            self.text = text
        }
    }

}

extension SesV2ClientTypes.EmailTemplateMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTimestamp = createdTimestamp {
            try encodeContainer.encode(createdTimestamp.timeIntervalSince1970, forKey: .createdTimestamp)
        }
        if let templateName = templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
    }
}

extension SesV2ClientTypes.EmailTemplateMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EmailTemplateMetadata(createdTimestamp: \(Swift.String(describing: createdTimestamp)), templateName: \(Swift.String(describing: templateName)))"}
}

extension SesV2ClientTypes {
    /// Contains information about an email template.
    public struct EmailTemplateMetadata: Swift.Equatable {
        /// The time and date the template was created.
        public let createdTimestamp: ClientRuntime.Date?
        /// The name of the template.
        public let templateName: Swift.String?

        public init (
            createdTimestamp: ClientRuntime.Date? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.templateName = templateName
        }
    }

}

extension SesV2ClientTypes.EventDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchDestination = "CloudWatchDestination"
        case enabled = "Enabled"
        case kinesisFirehoseDestination = "KinesisFirehoseDestination"
        case matchingEventTypes = "MatchingEventTypes"
        case name = "Name"
        case pinpointDestination = "PinpointDestination"
        case snsDestination = "SnsDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchDestination = cloudWatchDestination {
            try encodeContainer.encode(cloudWatchDestination, forKey: .cloudWatchDestination)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let kinesisFirehoseDestination = kinesisFirehoseDestination {
            try encodeContainer.encode(kinesisFirehoseDestination, forKey: .kinesisFirehoseDestination)
        }
        if let matchingEventTypes = matchingEventTypes {
            var matchingEventTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .matchingEventTypes)
            for eventtypes0 in matchingEventTypes {
                try matchingEventTypesContainer.encode(eventtypes0.rawValue)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pinpointDestination = pinpointDestination {
            try encodeContainer.encode(pinpointDestination, forKey: .pinpointDestination)
        }
        if let snsDestination = snsDestination {
            try encodeContainer.encode(snsDestination, forKey: .snsDestination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let matchingEventTypesContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.EventType?].self, forKey: .matchingEventTypes)
        var matchingEventTypesDecoded0:[SesV2ClientTypes.EventType]? = nil
        if let matchingEventTypesContainer = matchingEventTypesContainer {
            matchingEventTypesDecoded0 = [SesV2ClientTypes.EventType]()
            for string0 in matchingEventTypesContainer {
                if let string0 = string0 {
                    matchingEventTypesDecoded0?.append(string0)
                }
            }
        }
        matchingEventTypes = matchingEventTypesDecoded0
        let kinesisFirehoseDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.KinesisFirehoseDestination.self, forKey: .kinesisFirehoseDestination)
        kinesisFirehoseDestination = kinesisFirehoseDestinationDecoded
        let cloudWatchDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.CloudWatchDestination.self, forKey: .cloudWatchDestination)
        cloudWatchDestination = cloudWatchDestinationDecoded
        let snsDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SnsDestination.self, forKey: .snsDestination)
        snsDestination = snsDestinationDecoded
        let pinpointDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.PinpointDestination.self, forKey: .pinpointDestination)
        pinpointDestination = pinpointDestinationDecoded
    }
}

extension SesV2ClientTypes.EventDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EventDestination(cloudWatchDestination: \(Swift.String(describing: cloudWatchDestination)), enabled: \(Swift.String(describing: enabled)), kinesisFirehoseDestination: \(Swift.String(describing: kinesisFirehoseDestination)), matchingEventTypes: \(Swift.String(describing: matchingEventTypes)), name: \(Swift.String(describing: name)), pinpointDestination: \(Swift.String(describing: pinpointDestination)), snsDestination: \(Swift.String(describing: snsDestination)))"}
}

extension SesV2ClientTypes {
    /// In the Amazon SES API v2, events include message sends, deliveries, opens,
    ///             clicks, bounces, complaints and delivery delays. Event destinations are places that
    ///             you can send information about these events to. For example, you can send event data to
    ///             Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
    ///             Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.
    public struct EventDestination: Swift.Equatable {
        /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to
        ///             monitor and gain insights on your email sending metrics.
        public let cloudWatchDestination: SesV2ClientTypes.CloudWatchDestination?
        /// If true, the event destination is enabled. When the event destination is
        ///             enabled, the specified event types are sent to the destinations in this
        ///                 EventDestinationDefinition.
        ///         If false, the event destination is disabled. When the event destination
        ///             is disabled, events aren't sent to the specified destinations.
        public let enabled: Swift.Bool
        /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to
        ///             stream data to other services, such as Amazon S3 and Amazon Redshift.
        public let kinesisFirehoseDestination: SesV2ClientTypes.KinesisFirehoseDestination?
        /// The types of events that Amazon SES sends to the specified event destinations.
        /// This member is required.
        public let matchingEventTypes: [SesV2ClientTypes.EventType]?
        /// A name that identifies the event destination.
        /// This member is required.
        public let name: Swift.String?
        /// An object that defines an Amazon Pinpoint project destination for email events. You can send
        ///             email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging
        ///             dashboards that are built in to Amazon Pinpoint. For more information, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html">Transactional
        ///                 Messaging Charts in the Amazon Pinpoint User Guide.
        public let pinpointDestination: SesV2ClientTypes.PinpointDestination?
        /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to
        ///             send notification when certain email events occur.
        public let snsDestination: SesV2ClientTypes.SnsDestination?

        public init (
            cloudWatchDestination: SesV2ClientTypes.CloudWatchDestination? = nil,
            enabled: Swift.Bool = false,
            kinesisFirehoseDestination: SesV2ClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [SesV2ClientTypes.EventType]? = nil,
            name: Swift.String? = nil,
            pinpointDestination: SesV2ClientTypes.PinpointDestination? = nil,
            snsDestination: SesV2ClientTypes.SnsDestination? = nil
        )
        {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.name = name
            self.pinpointDestination = pinpointDestination
            self.snsDestination = snsDestination
        }
    }

}

extension SesV2ClientTypes.EventDestinationDefinition: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchDestination = "CloudWatchDestination"
        case enabled = "Enabled"
        case kinesisFirehoseDestination = "KinesisFirehoseDestination"
        case matchingEventTypes = "MatchingEventTypes"
        case pinpointDestination = "PinpointDestination"
        case snsDestination = "SnsDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchDestination = cloudWatchDestination {
            try encodeContainer.encode(cloudWatchDestination, forKey: .cloudWatchDestination)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let kinesisFirehoseDestination = kinesisFirehoseDestination {
            try encodeContainer.encode(kinesisFirehoseDestination, forKey: .kinesisFirehoseDestination)
        }
        if let matchingEventTypes = matchingEventTypes {
            var matchingEventTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .matchingEventTypes)
            for eventtypes0 in matchingEventTypes {
                try matchingEventTypesContainer.encode(eventtypes0.rawValue)
            }
        }
        if let pinpointDestination = pinpointDestination {
            try encodeContainer.encode(pinpointDestination, forKey: .pinpointDestination)
        }
        if let snsDestination = snsDestination {
            try encodeContainer.encode(snsDestination, forKey: .snsDestination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let matchingEventTypesContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.EventType?].self, forKey: .matchingEventTypes)
        var matchingEventTypesDecoded0:[SesV2ClientTypes.EventType]? = nil
        if let matchingEventTypesContainer = matchingEventTypesContainer {
            matchingEventTypesDecoded0 = [SesV2ClientTypes.EventType]()
            for string0 in matchingEventTypesContainer {
                if let string0 = string0 {
                    matchingEventTypesDecoded0?.append(string0)
                }
            }
        }
        matchingEventTypes = matchingEventTypesDecoded0
        let kinesisFirehoseDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.KinesisFirehoseDestination.self, forKey: .kinesisFirehoseDestination)
        kinesisFirehoseDestination = kinesisFirehoseDestinationDecoded
        let cloudWatchDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.CloudWatchDestination.self, forKey: .cloudWatchDestination)
        cloudWatchDestination = cloudWatchDestinationDecoded
        let snsDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SnsDestination.self, forKey: .snsDestination)
        snsDestination = snsDestinationDecoded
        let pinpointDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.PinpointDestination.self, forKey: .pinpointDestination)
        pinpointDestination = pinpointDestinationDecoded
    }
}

extension SesV2ClientTypes.EventDestinationDefinition: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EventDestinationDefinition(cloudWatchDestination: \(Swift.String(describing: cloudWatchDestination)), enabled: \(Swift.String(describing: enabled)), kinesisFirehoseDestination: \(Swift.String(describing: kinesisFirehoseDestination)), matchingEventTypes: \(Swift.String(describing: matchingEventTypes)), pinpointDestination: \(Swift.String(describing: pinpointDestination)), snsDestination: \(Swift.String(describing: snsDestination)))"}
}

extension SesV2ClientTypes {
    /// An object that defines the event destination. Specifically, it defines which services
    ///             receive events from emails sent using the configuration set that the event destination
    ///             is associated with. Also defines the types of events that are sent to the event
    ///             destination.
    public struct EventDestinationDefinition: Swift.Equatable {
        /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to
        ///             monitor and gain insights on your email sending metrics.
        public let cloudWatchDestination: SesV2ClientTypes.CloudWatchDestination?
        /// If true, the event destination is enabled. When the event destination is
        ///             enabled, the specified event types are sent to the destinations in this
        ///                 EventDestinationDefinition.
        ///         If false, the event destination is disabled. When the event destination
        ///             is disabled, events aren't sent to the specified destinations.
        public let enabled: Swift.Bool
        /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to
        ///             stream data to other services, such as Amazon S3 and Amazon Redshift.
        public let kinesisFirehoseDestination: SesV2ClientTypes.KinesisFirehoseDestination?
        /// An array that specifies which events the Amazon SES API v2 should send to the destinations in
        ///             this EventDestinationDefinition.
        public let matchingEventTypes: [SesV2ClientTypes.EventType]?
        /// An object that defines an Amazon Pinpoint project destination for email events. You can send
        ///             email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging
        ///             dashboards that are built in to Amazon Pinpoint. For more information, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html">Transactional
        ///                 Messaging Charts in the Amazon Pinpoint User Guide.
        public let pinpointDestination: SesV2ClientTypes.PinpointDestination?
        /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to
        ///             send notification when certain email events occur.
        public let snsDestination: SesV2ClientTypes.SnsDestination?

        public init (
            cloudWatchDestination: SesV2ClientTypes.CloudWatchDestination? = nil,
            enabled: Swift.Bool = false,
            kinesisFirehoseDestination: SesV2ClientTypes.KinesisFirehoseDestination? = nil,
            matchingEventTypes: [SesV2ClientTypes.EventType]? = nil,
            pinpointDestination: SesV2ClientTypes.PinpointDestination? = nil,
            snsDestination: SesV2ClientTypes.SnsDestination? = nil
        )
        {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.pinpointDestination = pinpointDestination
            self.snsDestination = snsDestination
        }
    }

}

extension SesV2ClientTypes {
    /// An email sending event type. For example, email sends, opens, and bounces are all
    ///             email events.
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bounce
        case click
        case complaint
        case delivery
        case deliveryDelay
        case `open`
        case reject
        case renderingFailure
        case send
        case subscription
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .bounce,
                .click,
                .complaint,
                .delivery,
                .deliveryDelay,
                .open,
                .reject,
                .renderingFailure,
                .send,
                .subscription,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bounce: return "BOUNCE"
            case .click: return "CLICK"
            case .complaint: return "COMPLAINT"
            case .delivery: return "DELIVERY"
            case .deliveryDelay: return "DELIVERY_DELAY"
            case .open: return "OPEN"
            case .reject: return "REJECT"
            case .renderingFailure: return "RENDERING_FAILURE"
            case .send: return "SEND"
            case .subscription: return "SUBSCRIPTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.FailureInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorMessage = "ErrorMessage"
        case failedRecordsS3Url = "FailedRecordsS3Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let failedRecordsS3Url = failedRecordsS3Url {
            try encodeContainer.encode(failedRecordsS3Url, forKey: .failedRecordsS3Url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedRecordsS3UrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failedRecordsS3Url)
        failedRecordsS3Url = failedRecordsS3UrlDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension SesV2ClientTypes.FailureInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FailureInfo(errorMessage: \(Swift.String(describing: errorMessage)), failedRecordsS3Url: \(Swift.String(describing: failedRecordsS3Url)))"}
}

extension SesV2ClientTypes {
    /// An object that contains the failure details about an import job.
    public struct FailureInfo: Swift.Equatable {
        /// A message about why the import job failed.
        public let errorMessage: Swift.String?
        /// An Amazon S3 presigned URL that contains all the failed records and related
        ///             information.
        public let failedRecordsS3Url: Swift.String?

        public init (
            errorMessage: Swift.String? = nil,
            failedRecordsS3Url: Swift.String? = nil
        )
        {
            self.errorMessage = errorMessage
            self.failedRecordsS3Url = failedRecordsS3Url
        }
    }

}

extension GetAccountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccountInput()"}
}

extension GetAccountInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetAccountInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAccountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAccountOutputError>
}

public struct GetAccountInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAccountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAccountOutputError>
}

/// A request to obtain information about the email-sending capabilities of your Amazon SES
///             account.
public struct GetAccountInput: Swift.Equatable {

    public init() {}
}

struct GetAccountInputBody: Swift.Equatable {
}

extension GetAccountInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAccountOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAccountOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccountOutputResponse(dedicatedIpAutoWarmupEnabled: \(Swift.String(describing: dedicatedIpAutoWarmupEnabled)), details: \(Swift.String(describing: details)), enforcementStatus: \(Swift.String(describing: enforcementStatus)), productionAccessEnabled: \(Swift.String(describing: productionAccessEnabled)), sendQuota: \(Swift.String(describing: sendQuota)), sendingEnabled: \(Swift.String(describing: sendingEnabled)), suppressionAttributes: \(Swift.String(describing: suppressionAttributes)))"}
}

extension GetAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAccountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dedicatedIpAutoWarmupEnabled = output.dedicatedIpAutoWarmupEnabled
            self.details = output.details
            self.enforcementStatus = output.enforcementStatus
            self.productionAccessEnabled = output.productionAccessEnabled
            self.sendQuota = output.sendQuota
            self.sendingEnabled = output.sendingEnabled
            self.suppressionAttributes = output.suppressionAttributes
        } else {
            self.dedicatedIpAutoWarmupEnabled = false
            self.details = nil
            self.enforcementStatus = nil
            self.productionAccessEnabled = false
            self.sendQuota = nil
            self.sendingEnabled = false
            self.suppressionAttributes = nil
        }
    }
}

/// A list of details about the email-sending capabilities of your Amazon SES account in the
///             current AWS Region.
public struct GetAccountOutputResponse: Swift.Equatable {
    /// Indicates whether or not the automatic warm-up feature is enabled for dedicated IP
    ///             addresses that are associated with your account.
    public let dedicatedIpAutoWarmupEnabled: Swift.Bool
    /// An object that defines your account details.
    public let details: SesV2ClientTypes.AccountDetails?
    /// The reputation status of your Amazon SES account. The status can be one of the
    ///             following:
    ///
    ///
    ///
    ///                   HEALTHY – There are no reputation-related issues that
    ///                     currently impact your account.
    ///
    ///
    ///
    ///                   PROBATION – We've identified potential issues with your
    ///                     Amazon SES account. We're placing your account under review while you work on
    ///                     correcting these issues.
    ///
    ///
    ///
    ///                   SHUTDOWN – Your account's ability to send email is
    ///                     currently paused because of an issue with the email sent from your account. When
    ///                     you correct the issue, you can contact us and request that your account's
    ///                     ability to send email is resumed.
    ///
    ///
    public let enforcementStatus: Swift.String?
    /// Indicates whether or not your account has production access in the current AWS
    ///             Region.
    ///         If the value is false, then your account is in the
    ///                 sandbox. When your account is in the sandbox, you can only send
    ///             email to verified identities. Additionally, the maximum number of emails you can send in
    ///             a 24-hour period (your sending quota) is 200, and the maximum number of emails you can
    ///             send per second (your maximum sending rate) is 1.
    ///         If the value is true, then your account has production access. When your
    ///             account has production access, you can send email to any address. The sending quota and
    ///             maximum sending rate for your account vary based on your specific use case.
    public let productionAccessEnabled: Swift.Bool
    /// An object that contains information about the per-day and per-second sending limits
    ///             for your Amazon SES account in the current AWS Region.
    public let sendQuota: SesV2ClientTypes.SendQuota?
    /// Indicates whether or not email sending is enabled for your Amazon SES account in the
    ///             current AWS Region.
    public let sendingEnabled: Swift.Bool
    /// An object that contains information about the email address suppression preferences
    ///             for your account in the current AWS Region.
    public let suppressionAttributes: SesV2ClientTypes.SuppressionAttributes?

    public init (
        dedicatedIpAutoWarmupEnabled: Swift.Bool = false,
        details: SesV2ClientTypes.AccountDetails? = nil,
        enforcementStatus: Swift.String? = nil,
        productionAccessEnabled: Swift.Bool = false,
        sendQuota: SesV2ClientTypes.SendQuota? = nil,
        sendingEnabled: Swift.Bool = false,
        suppressionAttributes: SesV2ClientTypes.SuppressionAttributes? = nil
    )
    {
        self.dedicatedIpAutoWarmupEnabled = dedicatedIpAutoWarmupEnabled
        self.details = details
        self.enforcementStatus = enforcementStatus
        self.productionAccessEnabled = productionAccessEnabled
        self.sendQuota = sendQuota
        self.sendingEnabled = sendingEnabled
        self.suppressionAttributes = suppressionAttributes
    }
}

struct GetAccountOutputResponseBody: Swift.Equatable {
    public let dedicatedIpAutoWarmupEnabled: Swift.Bool
    public let enforcementStatus: Swift.String?
    public let productionAccessEnabled: Swift.Bool
    public let sendQuota: SesV2ClientTypes.SendQuota?
    public let sendingEnabled: Swift.Bool
    public let suppressionAttributes: SesV2ClientTypes.SuppressionAttributes?
    public let details: SesV2ClientTypes.AccountDetails?
}

extension GetAccountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedIpAutoWarmupEnabled = "DedicatedIpAutoWarmupEnabled"
        case details = "Details"
        case enforcementStatus = "EnforcementStatus"
        case productionAccessEnabled = "ProductionAccessEnabled"
        case sendQuota = "SendQuota"
        case sendingEnabled = "SendingEnabled"
        case suppressionAttributes = "SuppressionAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dedicatedIpAutoWarmupEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .dedicatedIpAutoWarmupEnabled)
        dedicatedIpAutoWarmupEnabled = dedicatedIpAutoWarmupEnabledDecoded
        let enforcementStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enforcementStatus)
        enforcementStatus = enforcementStatusDecoded
        let productionAccessEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .productionAccessEnabled)
        productionAccessEnabled = productionAccessEnabledDecoded
        let sendQuotaDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SendQuota.self, forKey: .sendQuota)
        sendQuota = sendQuotaDecoded
        let sendingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .sendingEnabled)
        sendingEnabled = sendingEnabledDecoded
        let suppressionAttributesDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SuppressionAttributes.self, forKey: .suppressionAttributes)
        suppressionAttributes = suppressionAttributesDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.AccountDetails.self, forKey: .details)
        details = detailsDecoded
    }
}

extension GetBlacklistReportsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBlacklistReportsInput(blacklistItemNames: \(Swift.String(describing: blacklistItemNames)))"}
}

extension GetBlacklistReportsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBlacklistReportsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBlacklistReportsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBlacklistReportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBlacklistReportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBlacklistReportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBlacklistReportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBlacklistReportsOutputError>
}

public struct GetBlacklistReportsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBlacklistReportsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBlacklistReportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBlacklistReportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let blacklistItemNames = input.operationInput.blacklistItemNames {
            blacklistItemNames.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "BlacklistItemNames".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBlacklistReportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBlacklistReportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBlacklistReportsOutputError>
}

/// A request to retrieve a list of the blacklists that your dedicated IP addresses appear
///             on.
public struct GetBlacklistReportsInput: Swift.Equatable {
    /// A list of IP addresses that you want to retrieve blacklist information about. You can
    ///             only specify the dedicated IP addresses that you use to send email using Amazon SES or
    ///             Amazon Pinpoint.
    /// This member is required.
    public let blacklistItemNames: [Swift.String]?

    public init (
        blacklistItemNames: [Swift.String]? = nil
    )
    {
        self.blacklistItemNames = blacklistItemNames
    }
}

struct GetBlacklistReportsInputBody: Swift.Equatable {
}

extension GetBlacklistReportsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBlacklistReportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBlacklistReportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBlacklistReportsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBlacklistReportsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBlacklistReportsOutputResponse(blacklistReport: \(Swift.String(describing: blacklistReport)))"}
}

extension GetBlacklistReportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBlacklistReportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blacklistReport = output.blacklistReport
        } else {
            self.blacklistReport = nil
        }
    }
}

/// An object that contains information about blacklist events.
public struct GetBlacklistReportsOutputResponse: Swift.Equatable {
    /// An object that contains information about a blacklist that one of your dedicated IP
    ///             addresses appears on.
    /// This member is required.
    public let blacklistReport: [Swift.String:[SesV2ClientTypes.BlacklistEntry]]?

    public init (
        blacklistReport: [Swift.String:[SesV2ClientTypes.BlacklistEntry]]? = nil
    )
    {
        self.blacklistReport = blacklistReport
    }
}

struct GetBlacklistReportsOutputResponseBody: Swift.Equatable {
    public let blacklistReport: [Swift.String:[SesV2ClientTypes.BlacklistEntry]]?
}

extension GetBlacklistReportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blacklistReport = "BlacklistReport"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blacklistReportContainer = try containerValues.decodeIfPresent([Swift.String: [SesV2ClientTypes.BlacklistEntry?]?].self, forKey: .blacklistReport)
        var blacklistReportDecoded0: [Swift.String:[SesV2ClientTypes.BlacklistEntry]]? = nil
        if let blacklistReportContainer = blacklistReportContainer {
            blacklistReportDecoded0 = [Swift.String:[SesV2ClientTypes.BlacklistEntry]]()
            for (key0, blacklistentries0) in blacklistReportContainer {
                var blacklistentries0Decoded0: [SesV2ClientTypes.BlacklistEntry]? = nil
                if let blacklistentries0 = blacklistentries0 {
                    blacklistentries0Decoded0 = [SesV2ClientTypes.BlacklistEntry]()
                    for structure1 in blacklistentries0 {
                        if let structure1 = structure1 {
                            blacklistentries0Decoded0?.append(structure1)
                        }
                    }
                }
                blacklistReportDecoded0?[key0] = blacklistentries0Decoded0
            }
        }
        blacklistReport = blacklistReportDecoded0
    }
}

extension GetConfigurationSetEventDestinationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetConfigurationSetEventDestinationsInput(configurationSetName: \(Swift.String(describing: configurationSetName)))"}
}

extension GetConfigurationSetEventDestinationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetConfigurationSetEventDestinationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetConfigurationSetEventDestinationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetConfigurationSetEventDestinationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetConfigurationSetEventDestinationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetConfigurationSetEventDestinationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetConfigurationSetEventDestinationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetConfigurationSetEventDestinationsOutputError>
}

public struct GetConfigurationSetEventDestinationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetConfigurationSetEventDestinationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetConfigurationSetEventDestinationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetConfigurationSetEventDestinationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetConfigurationSetEventDestinationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetConfigurationSetEventDestinationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetConfigurationSetEventDestinationsOutputError>
}

/// A request to obtain information about the event destinations for a configuration
///             set.
public struct GetConfigurationSetEventDestinationsInput: Swift.Equatable {
    /// The name of the configuration set that contains the event destination.
    /// This member is required.
    public let configurationSetName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

struct GetConfigurationSetEventDestinationsInputBody: Swift.Equatable {
}

extension GetConfigurationSetEventDestinationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetConfigurationSetEventDestinationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetConfigurationSetEventDestinationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetConfigurationSetEventDestinationsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetConfigurationSetEventDestinationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetConfigurationSetEventDestinationsOutputResponse(eventDestinations: \(Swift.String(describing: eventDestinations)))"}
}

extension GetConfigurationSetEventDestinationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetConfigurationSetEventDestinationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.eventDestinations = output.eventDestinations
        } else {
            self.eventDestinations = nil
        }
    }
}

/// Information about an event destination for a configuration set.
public struct GetConfigurationSetEventDestinationsOutputResponse: Swift.Equatable {
    /// An array that includes all of the events destinations that have been configured for
    ///             the configuration set.
    public let eventDestinations: [SesV2ClientTypes.EventDestination]?

    public init (
        eventDestinations: [SesV2ClientTypes.EventDestination]? = nil
    )
    {
        self.eventDestinations = eventDestinations
    }
}

struct GetConfigurationSetEventDestinationsOutputResponseBody: Swift.Equatable {
    public let eventDestinations: [SesV2ClientTypes.EventDestination]?
}

extension GetConfigurationSetEventDestinationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestinations = "EventDestinations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventDestinationsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.EventDestination?].self, forKey: .eventDestinations)
        var eventDestinationsDecoded0:[SesV2ClientTypes.EventDestination]? = nil
        if let eventDestinationsContainer = eventDestinationsContainer {
            eventDestinationsDecoded0 = [SesV2ClientTypes.EventDestination]()
            for structure0 in eventDestinationsContainer {
                if let structure0 = structure0 {
                    eventDestinationsDecoded0?.append(structure0)
                }
            }
        }
        eventDestinations = eventDestinationsDecoded0
    }
}

extension GetConfigurationSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetConfigurationSetInput(configurationSetName: \(Swift.String(describing: configurationSetName)))"}
}

extension GetConfigurationSetInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetConfigurationSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetConfigurationSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetConfigurationSetOutputError>
}

public struct GetConfigurationSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetConfigurationSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetConfigurationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetConfigurationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetConfigurationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetConfigurationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetConfigurationSetOutputError>
}

/// A request to obtain information about a configuration set.
public struct GetConfigurationSetInput: Swift.Equatable {
    /// The name of the configuration set that you want to obtain more information
    ///             about.
    /// This member is required.
    public let configurationSetName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
    }
}

struct GetConfigurationSetInputBody: Swift.Equatable {
}

extension GetConfigurationSetInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetConfigurationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetConfigurationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetConfigurationSetOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetConfigurationSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetConfigurationSetOutputResponse(configurationSetName: \(Swift.String(describing: configurationSetName)), deliveryOptions: \(Swift.String(describing: deliveryOptions)), reputationOptions: \(Swift.String(describing: reputationOptions)), sendingOptions: \(Swift.String(describing: sendingOptions)), suppressionOptions: \(Swift.String(describing: suppressionOptions)), tags: \(Swift.String(describing: tags)), trackingOptions: \(Swift.String(describing: trackingOptions)))"}
}

extension GetConfigurationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetConfigurationSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.configurationSetName
            self.deliveryOptions = output.deliveryOptions
            self.reputationOptions = output.reputationOptions
            self.sendingOptions = output.sendingOptions
            self.suppressionOptions = output.suppressionOptions
            self.tags = output.tags
            self.trackingOptions = output.trackingOptions
        } else {
            self.configurationSetName = nil
            self.deliveryOptions = nil
            self.reputationOptions = nil
            self.sendingOptions = nil
            self.suppressionOptions = nil
            self.tags = nil
            self.trackingOptions = nil
        }
    }
}

/// Information about a configuration set.
public struct GetConfigurationSetOutputResponse: Swift.Equatable {
    /// The name of the configuration set.
    public let configurationSetName: Swift.String?
    /// An object that defines the dedicated IP pool that is used to send emails that you send
    ///             using the configuration set.
    public let deliveryOptions: SesV2ClientTypes.DeliveryOptions?
    /// An object that defines whether or not Amazon SES collects reputation metrics for the emails
    ///             that you send that use the configuration set.
    public let reputationOptions: SesV2ClientTypes.ReputationOptions?
    /// An object that defines whether or not Amazon SES can send email that you send using the
    ///             configuration set.
    public let sendingOptions: SesV2ClientTypes.SendingOptions?
    /// An object that contains information about the suppression list preferences for your
    ///             account.
    public let suppressionOptions: SesV2ClientTypes.SuppressionOptions?
    /// An array of objects that define the tags (keys and values) that are associated with
    ///             the configuration set.
    public let tags: [SesV2ClientTypes.Tag]?
    /// An object that defines the open and click tracking options for emails that you send
    ///             using the configuration set.
    public let trackingOptions: SesV2ClientTypes.TrackingOptions?

    public init (
        configurationSetName: Swift.String? = nil,
        deliveryOptions: SesV2ClientTypes.DeliveryOptions? = nil,
        reputationOptions: SesV2ClientTypes.ReputationOptions? = nil,
        sendingOptions: SesV2ClientTypes.SendingOptions? = nil,
        suppressionOptions: SesV2ClientTypes.SuppressionOptions? = nil,
        tags: [SesV2ClientTypes.Tag]? = nil,
        trackingOptions: SesV2ClientTypes.TrackingOptions? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.deliveryOptions = deliveryOptions
        self.reputationOptions = reputationOptions
        self.sendingOptions = sendingOptions
        self.suppressionOptions = suppressionOptions
        self.tags = tags
        self.trackingOptions = trackingOptions
    }
}

struct GetConfigurationSetOutputResponseBody: Swift.Equatable {
    public let configurationSetName: Swift.String?
    public let trackingOptions: SesV2ClientTypes.TrackingOptions?
    public let deliveryOptions: SesV2ClientTypes.DeliveryOptions?
    public let reputationOptions: SesV2ClientTypes.ReputationOptions?
    public let sendingOptions: SesV2ClientTypes.SendingOptions?
    public let tags: [SesV2ClientTypes.Tag]?
    public let suppressionOptions: SesV2ClientTypes.SuppressionOptions?
}

extension GetConfigurationSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case deliveryOptions = "DeliveryOptions"
        case reputationOptions = "ReputationOptions"
        case sendingOptions = "SendingOptions"
        case suppressionOptions = "SuppressionOptions"
        case tags = "Tags"
        case trackingOptions = "TrackingOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let trackingOptionsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.TrackingOptions.self, forKey: .trackingOptions)
        trackingOptions = trackingOptionsDecoded
        let deliveryOptionsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DeliveryOptions.self, forKey: .deliveryOptions)
        deliveryOptions = deliveryOptionsDecoded
        let reputationOptionsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ReputationOptions.self, forKey: .reputationOptions)
        reputationOptions = reputationOptionsDecoded
        let sendingOptionsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SendingOptions.self, forKey: .sendingOptions)
        sendingOptions = sendingOptionsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SesV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SesV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let suppressionOptionsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SuppressionOptions.self, forKey: .suppressionOptions)
        suppressionOptions = suppressionOptionsDecoded
    }
}

extension GetContactInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContactInput(contactListName: \(Swift.String(describing: contactListName)), emailAddress: \(Swift.String(describing: emailAddress)))"}
}

extension GetContactInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetContactInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContactInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContactOutputError>
}

public struct GetContactInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContactInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContactOutputError>
}

public struct GetContactInput: Swift.Equatable {
    /// The name of the contact list to which the contact belongs.
    /// This member is required.
    public let contactListName: Swift.String?
    /// The contact's email addres.
    /// This member is required.
    public let emailAddress: Swift.String?

    public init (
        contactListName: Swift.String? = nil,
        emailAddress: Swift.String? = nil
    )
    {
        self.contactListName = contactListName
        self.emailAddress = emailAddress
    }
}

struct GetContactInputBody: Swift.Equatable {
}

extension GetContactInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContactListInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContactListInput(contactListName: \(Swift.String(describing: contactListName)))"}
}

extension GetContactListInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetContactListInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContactListInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContactListInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContactListOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContactListInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContactListOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContactListOutputError>
}

public struct GetContactListInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContactListInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContactListInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContactListOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContactListInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContactListOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContactListOutputError>
}

public struct GetContactListInput: Swift.Equatable {
    /// The name of the contact list.
    /// This member is required.
    public let contactListName: Swift.String?

    public init (
        contactListName: Swift.String? = nil
    )
    {
        self.contactListName = contactListName
    }
}

struct GetContactListInputBody: Swift.Equatable {
}

extension GetContactListInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContactListOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContactListOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetContactListOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContactListOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContactListOutputResponse(contactListName: \(Swift.String(describing: contactListName)), createdTimestamp: \(Swift.String(describing: createdTimestamp)), description: \(Swift.String(describing: description)), lastUpdatedTimestamp: \(Swift.String(describing: lastUpdatedTimestamp)), tags: \(Swift.String(describing: tags)), topics: \(Swift.String(describing: topics)))"}
}

extension GetContactListOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetContactListOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contactListName = output.contactListName
            self.createdTimestamp = output.createdTimestamp
            self.description = output.description
            self.lastUpdatedTimestamp = output.lastUpdatedTimestamp
            self.tags = output.tags
            self.topics = output.topics
        } else {
            self.contactListName = nil
            self.createdTimestamp = nil
            self.description = nil
            self.lastUpdatedTimestamp = nil
            self.tags = nil
            self.topics = nil
        }
    }
}

public struct GetContactListOutputResponse: Swift.Equatable {
    /// The name of the contact list.
    public let contactListName: Swift.String?
    /// A timestamp noting when the contact list was created.
    public let createdTimestamp: ClientRuntime.Date?
    /// A description of what the contact list is about.
    public let description: Swift.String?
    /// A timestamp noting the last time the contact list was updated.
    public let lastUpdatedTimestamp: ClientRuntime.Date?
    /// The tags associated with a contact list.
    public let tags: [SesV2ClientTypes.Tag]?
    /// An interest group, theme, or label within a list. A contact list can have multiple
    ///             topics.
    public let topics: [SesV2ClientTypes.Topic]?

    public init (
        contactListName: Swift.String? = nil,
        createdTimestamp: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        lastUpdatedTimestamp: ClientRuntime.Date? = nil,
        tags: [SesV2ClientTypes.Tag]? = nil,
        topics: [SesV2ClientTypes.Topic]? = nil
    )
    {
        self.contactListName = contactListName
        self.createdTimestamp = createdTimestamp
        self.description = description
        self.lastUpdatedTimestamp = lastUpdatedTimestamp
        self.tags = tags
        self.topics = topics
    }
}

struct GetContactListOutputResponseBody: Swift.Equatable {
    public let contactListName: Swift.String?
    public let topics: [SesV2ClientTypes.Topic]?
    public let description: Swift.String?
    public let createdTimestamp: ClientRuntime.Date?
    public let lastUpdatedTimestamp: ClientRuntime.Date?
    public let tags: [SesV2ClientTypes.Tag]?
}

extension GetContactListOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactListName = "ContactListName"
        case createdTimestamp = "CreatedTimestamp"
        case description = "Description"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case tags = "Tags"
        case topics = "Topics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactListName)
        contactListName = contactListNameDecoded
        let topicsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Topic?].self, forKey: .topics)
        var topicsDecoded0:[SesV2ClientTypes.Topic]? = nil
        if let topicsContainer = topicsContainer {
            topicsDecoded0 = [SesV2ClientTypes.Topic]()
            for structure0 in topicsContainer {
                if let structure0 = structure0 {
                    topicsDecoded0?.append(structure0)
                }
            }
        }
        topics = topicsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SesV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SesV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension GetContactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetContactOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContactOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContactOutputResponse(attributesData: \(Swift.String(describing: attributesData)), contactListName: \(Swift.String(describing: contactListName)), createdTimestamp: \(Swift.String(describing: createdTimestamp)), emailAddress: \(Swift.String(describing: emailAddress)), lastUpdatedTimestamp: \(Swift.String(describing: lastUpdatedTimestamp)), topicDefaultPreferences: \(Swift.String(describing: topicDefaultPreferences)), topicPreferences: \(Swift.String(describing: topicPreferences)), unsubscribeAll: \(Swift.String(describing: unsubscribeAll)))"}
}

extension GetContactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetContactOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.attributesData = output.attributesData
            self.contactListName = output.contactListName
            self.createdTimestamp = output.createdTimestamp
            self.emailAddress = output.emailAddress
            self.lastUpdatedTimestamp = output.lastUpdatedTimestamp
            self.topicDefaultPreferences = output.topicDefaultPreferences
            self.topicPreferences = output.topicPreferences
            self.unsubscribeAll = output.unsubscribeAll
        } else {
            self.attributesData = nil
            self.contactListName = nil
            self.createdTimestamp = nil
            self.emailAddress = nil
            self.lastUpdatedTimestamp = nil
            self.topicDefaultPreferences = nil
            self.topicPreferences = nil
            self.unsubscribeAll = false
        }
    }
}

public struct GetContactOutputResponse: Swift.Equatable {
    /// The attribute data attached to a contact.
    public let attributesData: Swift.String?
    /// The name of the contact list to which the contact belongs.
    public let contactListName: Swift.String?
    /// A timestamp noting when the contact was created.
    public let createdTimestamp: ClientRuntime.Date?
    /// The contact's email addres.
    public let emailAddress: Swift.String?
    /// A timestamp noting the last time the contact's information was updated.
    public let lastUpdatedTimestamp: ClientRuntime.Date?
    /// The default topic preferences applied to the contact.
    public let topicDefaultPreferences: [SesV2ClientTypes.TopicPreference]?
    /// The contact's preference for being opted-in to or opted-out of a topic.>
    public let topicPreferences: [SesV2ClientTypes.TopicPreference]?
    /// A boolean value status noting if the contact is unsubscribed from all contact list
    ///             topics.
    public let unsubscribeAll: Swift.Bool

    public init (
        attributesData: Swift.String? = nil,
        contactListName: Swift.String? = nil,
        createdTimestamp: ClientRuntime.Date? = nil,
        emailAddress: Swift.String? = nil,
        lastUpdatedTimestamp: ClientRuntime.Date? = nil,
        topicDefaultPreferences: [SesV2ClientTypes.TopicPreference]? = nil,
        topicPreferences: [SesV2ClientTypes.TopicPreference]? = nil,
        unsubscribeAll: Swift.Bool = false
    )
    {
        self.attributesData = attributesData
        self.contactListName = contactListName
        self.createdTimestamp = createdTimestamp
        self.emailAddress = emailAddress
        self.lastUpdatedTimestamp = lastUpdatedTimestamp
        self.topicDefaultPreferences = topicDefaultPreferences
        self.topicPreferences = topicPreferences
        self.unsubscribeAll = unsubscribeAll
    }
}

struct GetContactOutputResponseBody: Swift.Equatable {
    public let contactListName: Swift.String?
    public let emailAddress: Swift.String?
    public let topicPreferences: [SesV2ClientTypes.TopicPreference]?
    public let topicDefaultPreferences: [SesV2ClientTypes.TopicPreference]?
    public let unsubscribeAll: Swift.Bool
    public let attributesData: Swift.String?
    public let createdTimestamp: ClientRuntime.Date?
    public let lastUpdatedTimestamp: ClientRuntime.Date?
}

extension GetContactOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesData = "AttributesData"
        case contactListName = "ContactListName"
        case createdTimestamp = "CreatedTimestamp"
        case emailAddress = "EmailAddress"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case topicDefaultPreferences = "TopicDefaultPreferences"
        case topicPreferences = "TopicPreferences"
        case unsubscribeAll = "UnsubscribeAll"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactListName)
        contactListName = contactListNameDecoded
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let topicPreferencesContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.TopicPreference?].self, forKey: .topicPreferences)
        var topicPreferencesDecoded0:[SesV2ClientTypes.TopicPreference]? = nil
        if let topicPreferencesContainer = topicPreferencesContainer {
            topicPreferencesDecoded0 = [SesV2ClientTypes.TopicPreference]()
            for structure0 in topicPreferencesContainer {
                if let structure0 = structure0 {
                    topicPreferencesDecoded0?.append(structure0)
                }
            }
        }
        topicPreferences = topicPreferencesDecoded0
        let topicDefaultPreferencesContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.TopicPreference?].self, forKey: .topicDefaultPreferences)
        var topicDefaultPreferencesDecoded0:[SesV2ClientTypes.TopicPreference]? = nil
        if let topicDefaultPreferencesContainer = topicDefaultPreferencesContainer {
            topicDefaultPreferencesDecoded0 = [SesV2ClientTypes.TopicPreference]()
            for structure0 in topicDefaultPreferencesContainer {
                if let structure0 = structure0 {
                    topicDefaultPreferencesDecoded0?.append(structure0)
                }
            }
        }
        topicDefaultPreferences = topicDefaultPreferencesDecoded0
        let unsubscribeAllDecoded = try containerValues.decode(Swift.Bool.self, forKey: .unsubscribeAll)
        unsubscribeAll = unsubscribeAllDecoded
        let attributesDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributesData)
        attributesData = attributesDataDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
    }
}

extension GetCustomVerificationEmailTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCustomVerificationEmailTemplateInput(templateName: \(Swift.String(describing: templateName)))"}
}

extension GetCustomVerificationEmailTemplateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetCustomVerificationEmailTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCustomVerificationEmailTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCustomVerificationEmailTemplateOutputError>
}

public struct GetCustomVerificationEmailTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCustomVerificationEmailTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCustomVerificationEmailTemplateOutputError>
}

/// Represents a request to retrieve an existing custom verification email
///             template.
public struct GetCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The name of the custom verification email template that you want to retrieve.
    /// This member is required.
    public let templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct GetCustomVerificationEmailTemplateInputBody: Swift.Equatable {
}

extension GetCustomVerificationEmailTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCustomVerificationEmailTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCustomVerificationEmailTemplateOutputResponse(failureRedirectionURL: \(Swift.String(describing: failureRedirectionURL)), fromEmailAddress: \(Swift.String(describing: fromEmailAddress)), successRedirectionURL: \(Swift.String(describing: successRedirectionURL)), templateContent: \(Swift.String(describing: templateContent)), templateName: \(Swift.String(describing: templateName)), templateSubject: \(Swift.String(describing: templateSubject)))"}
}

extension GetCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCustomVerificationEmailTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failureRedirectionURL = output.failureRedirectionURL
            self.fromEmailAddress = output.fromEmailAddress
            self.successRedirectionURL = output.successRedirectionURL
            self.templateContent = output.templateContent
            self.templateName = output.templateName
            self.templateSubject = output.templateSubject
        } else {
            self.failureRedirectionURL = nil
            self.fromEmailAddress = nil
            self.successRedirectionURL = nil
            self.templateContent = nil
            self.templateName = nil
            self.templateSubject = nil
        }
    }
}

/// The following elements are returned by the service.
public struct GetCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {
    /// The URL that the recipient of the verification email is sent to if his or her address
    ///             is not successfully verified.
    public let failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    public let fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address
    ///             is successfully verified.
    public let successRedirectionURL: Swift.String?
    /// The content of the custom verification email.
    public let templateContent: Swift.String?
    /// The name of the custom verification email template.
    public let templateName: Swift.String?
    /// The subject line of the custom verification email.
    public let templateSubject: Swift.String?

    public init (
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

struct GetCustomVerificationEmailTemplateOutputResponseBody: Swift.Equatable {
    public let templateName: Swift.String?
    public let fromEmailAddress: Swift.String?
    public let templateSubject: Swift.String?
    public let templateContent: Swift.String?
    public let successRedirectionURL: Swift.String?
    public let failureRedirectionURL: Swift.String?
}

extension GetCustomVerificationEmailTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
        case templateSubject = "TemplateSubject"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let templateSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSubject)
        templateSubject = templateSubjectDecoded
        let templateContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateContent)
        templateContent = templateContentDecoded
        let successRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successRedirectionURL)
        successRedirectionURL = successRedirectionURLDecoded
        let failureRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureRedirectionURL)
        failureRedirectionURL = failureRedirectionURLDecoded
    }
}

extension GetDedicatedIpInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDedicatedIpInput(ip: \(Swift.String(describing: ip)))"}
}

extension GetDedicatedIpInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetDedicatedIpInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDedicatedIpInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDedicatedIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDedicatedIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDedicatedIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDedicatedIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDedicatedIpOutputError>
}

public struct GetDedicatedIpInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDedicatedIpInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDedicatedIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDedicatedIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDedicatedIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDedicatedIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDedicatedIpOutputError>
}

/// A request to obtain more information about a dedicated IP address.
public struct GetDedicatedIpInput: Swift.Equatable {
    /// The IP address that you want to obtain more information about. The value you specify
    ///             has to be a dedicated IP address that's assocaited with your AWS account.
    /// This member is required.
    public let ip: Swift.String?

    public init (
        ip: Swift.String? = nil
    )
    {
        self.ip = ip
    }
}

struct GetDedicatedIpInputBody: Swift.Equatable {
}

extension GetDedicatedIpInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDedicatedIpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDedicatedIpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDedicatedIpOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDedicatedIpOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDedicatedIpOutputResponse(dedicatedIp: \(Swift.String(describing: dedicatedIp)))"}
}

extension GetDedicatedIpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDedicatedIpOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dedicatedIp = output.dedicatedIp
        } else {
            self.dedicatedIp = nil
        }
    }
}

/// Information about a dedicated IP address.
public struct GetDedicatedIpOutputResponse: Swift.Equatable {
    /// An object that contains information about a dedicated IP address.
    public let dedicatedIp: SesV2ClientTypes.DedicatedIp?

    public init (
        dedicatedIp: SesV2ClientTypes.DedicatedIp? = nil
    )
    {
        self.dedicatedIp = dedicatedIp
    }
}

struct GetDedicatedIpOutputResponseBody: Swift.Equatable {
    public let dedicatedIp: SesV2ClientTypes.DedicatedIp?
}

extension GetDedicatedIpOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedIp = "DedicatedIp"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dedicatedIpDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DedicatedIp.self, forKey: .dedicatedIp)
        dedicatedIp = dedicatedIpDecoded
    }
}

extension GetDedicatedIpsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDedicatedIpsInput(nextToken: \(Swift.String(describing: nextToken)), pageSize: \(Swift.String(describing: pageSize)), poolName: \(Swift.String(describing: poolName)))"}
}

extension GetDedicatedIpsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetDedicatedIpsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDedicatedIpsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDedicatedIpsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDedicatedIpsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDedicatedIpsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDedicatedIpsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDedicatedIpsOutputError>
}

public struct GetDedicatedIpsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDedicatedIpsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDedicatedIpsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDedicatedIpsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        if let poolName = input.operationInput.poolName {
            let poolNameQueryItem = ClientRuntime.URLQueryItem(name: "PoolName".urlPercentEncoding(), value: Swift.String(poolName).urlPercentEncoding())
            input.builder.withQueryItem(poolNameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDedicatedIpsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDedicatedIpsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDedicatedIpsOutputError>
}

/// A request to obtain more information about dedicated IP pools.
public struct GetDedicatedIpsInput: Swift.Equatable {
    /// A token returned from a previous call to GetDedicatedIps to indicate the
    ///             position of the dedicated IP pool in the list of IP pools.
    public let nextToken: Swift.String?
    /// The number of results to show in a single call to GetDedicatedIpsRequest.
    ///             If the number of results is larger than the number you specified in this parameter, then
    ///             the response includes a NextToken element, which you can use to obtain
    ///             additional results.
    public let pageSize: Swift.Int?
    /// The name of the IP pool that the dedicated IP address is associated with.
    public let poolName: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        poolName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.poolName = poolName
    }
}

struct GetDedicatedIpsInputBody: Swift.Equatable {
}

extension GetDedicatedIpsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDedicatedIpsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDedicatedIpsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDedicatedIpsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDedicatedIpsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDedicatedIpsOutputResponse(dedicatedIps: \(Swift.String(describing: dedicatedIps)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetDedicatedIpsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDedicatedIpsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dedicatedIps = output.dedicatedIps
            self.nextToken = output.nextToken
        } else {
            self.dedicatedIps = nil
            self.nextToken = nil
        }
    }
}

/// Information about the dedicated IP addresses that are associated with your AWS
///             account.
public struct GetDedicatedIpsOutputResponse: Swift.Equatable {
    /// A list of dedicated IP addresses that are associated with your AWS account.
    public let dedicatedIps: [SesV2ClientTypes.DedicatedIp]?
    /// A token that indicates that there are additional dedicated IP addresses to list. To
    ///             view additional addresses, issue another request to GetDedicatedIps,
    ///             passing this token in the NextToken parameter.
    public let nextToken: Swift.String?

    public init (
        dedicatedIps: [SesV2ClientTypes.DedicatedIp]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dedicatedIps = dedicatedIps
        self.nextToken = nextToken
    }
}

struct GetDedicatedIpsOutputResponseBody: Swift.Equatable {
    public let dedicatedIps: [SesV2ClientTypes.DedicatedIp]?
    public let nextToken: Swift.String?
}

extension GetDedicatedIpsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedIps = "DedicatedIps"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dedicatedIpsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.DedicatedIp?].self, forKey: .dedicatedIps)
        var dedicatedIpsDecoded0:[SesV2ClientTypes.DedicatedIp]? = nil
        if let dedicatedIpsContainer = dedicatedIpsContainer {
            dedicatedIpsDecoded0 = [SesV2ClientTypes.DedicatedIp]()
            for structure0 in dedicatedIpsContainer {
                if let structure0 = structure0 {
                    dedicatedIpsDecoded0?.append(structure0)
                }
            }
        }
        dedicatedIps = dedicatedIpsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetDeliverabilityDashboardOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDeliverabilityDashboardOptionsInput()"}
}

extension GetDeliverabilityDashboardOptionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetDeliverabilityDashboardOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDeliverabilityDashboardOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDeliverabilityDashboardOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDeliverabilityDashboardOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDeliverabilityDashboardOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDeliverabilityDashboardOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDeliverabilityDashboardOptionsOutputError>
}

public struct GetDeliverabilityDashboardOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDeliverabilityDashboardOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDeliverabilityDashboardOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDeliverabilityDashboardOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDeliverabilityDashboardOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDeliverabilityDashboardOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDeliverabilityDashboardOptionsOutputError>
}

/// Retrieve information about the status of the Deliverability dashboard for your AWS account.
///             When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and
///             other metrics for your domains. You also gain the ability to perform predictive inbox placement tests.
///
///         When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
///             to any other fees that you accrue by using Amazon SES and other AWS services. For more
///             information about the features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing.
public struct GetDeliverabilityDashboardOptionsInput: Swift.Equatable {

    public init() {}
}

struct GetDeliverabilityDashboardOptionsInputBody: Swift.Equatable {
}

extension GetDeliverabilityDashboardOptionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDeliverabilityDashboardOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeliverabilityDashboardOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDeliverabilityDashboardOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeliverabilityDashboardOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDeliverabilityDashboardOptionsOutputResponse(accountStatus: \(Swift.String(describing: accountStatus)), activeSubscribedDomains: \(Swift.String(describing: activeSubscribedDomains)), dashboardEnabled: \(Swift.String(describing: dashboardEnabled)), pendingExpirationSubscribedDomains: \(Swift.String(describing: pendingExpirationSubscribedDomains)), subscriptionExpiryDate: \(Swift.String(describing: subscriptionExpiryDate)))"}
}

extension GetDeliverabilityDashboardOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDeliverabilityDashboardOptionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accountStatus = output.accountStatus
            self.activeSubscribedDomains = output.activeSubscribedDomains
            self.dashboardEnabled = output.dashboardEnabled
            self.pendingExpirationSubscribedDomains = output.pendingExpirationSubscribedDomains
            self.subscriptionExpiryDate = output.subscriptionExpiryDate
        } else {
            self.accountStatus = nil
            self.activeSubscribedDomains = nil
            self.dashboardEnabled = false
            self.pendingExpirationSubscribedDomains = nil
            self.subscriptionExpiryDate = nil
        }
    }
}

/// An object that shows the status of the Deliverability dashboard.
public struct GetDeliverabilityDashboardOptionsOutputResponse: Swift.Equatable {
    /// The current status of your Deliverability dashboard subscription. If this value is
    ///                 PENDING_EXPIRATION, your subscription is scheduled to expire at the end
    ///             of the current calendar month.
    public let accountStatus: SesV2ClientTypes.DeliverabilityDashboardAccountStatus?
    /// An array of objects, one for each verified domain that you use to send email and
    ///             currently has an active Deliverability dashboard subscription that isn’t scheduled to expire at
    ///             the end of the current calendar month.
    public let activeSubscribedDomains: [SesV2ClientTypes.DomainDeliverabilityTrackingOption]?
    /// Specifies whether the Deliverability dashboard is enabled. If this value is true,
    ///             the dashboard is enabled.
    /// This member is required.
    public let dashboardEnabled: Swift.Bool
    /// An array of objects, one for each verified domain that you use to send email and
    ///             currently has an active Deliverability dashboard subscription that's scheduled to expire at the
    ///             end of the current calendar month.
    public let pendingExpirationSubscribedDomains: [SesV2ClientTypes.DomainDeliverabilityTrackingOption]?
    /// The date, in Unix time format, when your current subscription to the Deliverability dashboard
    ///             is scheduled to expire, if your subscription is scheduled to expire at the end of the
    ///             current calendar month. This value is null if you have an active subscription that isn’t
    ///             due to expire at the end of the month.
    public let subscriptionExpiryDate: ClientRuntime.Date?

    public init (
        accountStatus: SesV2ClientTypes.DeliverabilityDashboardAccountStatus? = nil,
        activeSubscribedDomains: [SesV2ClientTypes.DomainDeliverabilityTrackingOption]? = nil,
        dashboardEnabled: Swift.Bool = false,
        pendingExpirationSubscribedDomains: [SesV2ClientTypes.DomainDeliverabilityTrackingOption]? = nil,
        subscriptionExpiryDate: ClientRuntime.Date? = nil
    )
    {
        self.accountStatus = accountStatus
        self.activeSubscribedDomains = activeSubscribedDomains
        self.dashboardEnabled = dashboardEnabled
        self.pendingExpirationSubscribedDomains = pendingExpirationSubscribedDomains
        self.subscriptionExpiryDate = subscriptionExpiryDate
    }
}

struct GetDeliverabilityDashboardOptionsOutputResponseBody: Swift.Equatable {
    public let dashboardEnabled: Swift.Bool
    public let subscriptionExpiryDate: ClientRuntime.Date?
    public let accountStatus: SesV2ClientTypes.DeliverabilityDashboardAccountStatus?
    public let activeSubscribedDomains: [SesV2ClientTypes.DomainDeliverabilityTrackingOption]?
    public let pendingExpirationSubscribedDomains: [SesV2ClientTypes.DomainDeliverabilityTrackingOption]?
}

extension GetDeliverabilityDashboardOptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountStatus = "AccountStatus"
        case activeSubscribedDomains = "ActiveSubscribedDomains"
        case dashboardEnabled = "DashboardEnabled"
        case pendingExpirationSubscribedDomains = "PendingExpirationSubscribedDomains"
        case subscriptionExpiryDate = "SubscriptionExpiryDate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .dashboardEnabled)
        dashboardEnabled = dashboardEnabledDecoded
        let subscriptionExpiryDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .subscriptionExpiryDate)
        subscriptionExpiryDate = subscriptionExpiryDateDecoded
        let accountStatusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DeliverabilityDashboardAccountStatus.self, forKey: .accountStatus)
        accountStatus = accountStatusDecoded
        let activeSubscribedDomainsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.DomainDeliverabilityTrackingOption?].self, forKey: .activeSubscribedDomains)
        var activeSubscribedDomainsDecoded0:[SesV2ClientTypes.DomainDeliverabilityTrackingOption]? = nil
        if let activeSubscribedDomainsContainer = activeSubscribedDomainsContainer {
            activeSubscribedDomainsDecoded0 = [SesV2ClientTypes.DomainDeliverabilityTrackingOption]()
            for structure0 in activeSubscribedDomainsContainer {
                if let structure0 = structure0 {
                    activeSubscribedDomainsDecoded0?.append(structure0)
                }
            }
        }
        activeSubscribedDomains = activeSubscribedDomainsDecoded0
        let pendingExpirationSubscribedDomainsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.DomainDeliverabilityTrackingOption?].self, forKey: .pendingExpirationSubscribedDomains)
        var pendingExpirationSubscribedDomainsDecoded0:[SesV2ClientTypes.DomainDeliverabilityTrackingOption]? = nil
        if let pendingExpirationSubscribedDomainsContainer = pendingExpirationSubscribedDomainsContainer {
            pendingExpirationSubscribedDomainsDecoded0 = [SesV2ClientTypes.DomainDeliverabilityTrackingOption]()
            for structure0 in pendingExpirationSubscribedDomainsContainer {
                if let structure0 = structure0 {
                    pendingExpirationSubscribedDomainsDecoded0?.append(structure0)
                }
            }
        }
        pendingExpirationSubscribedDomains = pendingExpirationSubscribedDomainsDecoded0
    }
}

extension GetDeliverabilityTestReportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDeliverabilityTestReportInput(reportId: \(Swift.String(describing: reportId)))"}
}

extension GetDeliverabilityTestReportInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetDeliverabilityTestReportInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDeliverabilityTestReportInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDeliverabilityTestReportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDeliverabilityTestReportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDeliverabilityTestReportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDeliverabilityTestReportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDeliverabilityTestReportOutputError>
}

public struct GetDeliverabilityTestReportInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDeliverabilityTestReportInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDeliverabilityTestReportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDeliverabilityTestReportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDeliverabilityTestReportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDeliverabilityTestReportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDeliverabilityTestReportOutputError>
}

/// A request to retrieve the results of a predictive inbox placement test.
public struct GetDeliverabilityTestReportInput: Swift.Equatable {
    /// A unique string that identifies the predictive inbox placement test.
    /// This member is required.
    public let reportId: Swift.String?

    public init (
        reportId: Swift.String? = nil
    )
    {
        self.reportId = reportId
    }
}

struct GetDeliverabilityTestReportInputBody: Swift.Equatable {
}

extension GetDeliverabilityTestReportInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDeliverabilityTestReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeliverabilityTestReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDeliverabilityTestReportOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeliverabilityTestReportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDeliverabilityTestReportOutputResponse(deliverabilityTestReport: \(Swift.String(describing: deliverabilityTestReport)), ispPlacements: \(Swift.String(describing: ispPlacements)), message: \(Swift.String(describing: message)), overallPlacement: \(Swift.String(describing: overallPlacement)), tags: \(Swift.String(describing: tags)))"}
}

extension GetDeliverabilityTestReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDeliverabilityTestReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deliverabilityTestReport = output.deliverabilityTestReport
            self.ispPlacements = output.ispPlacements
            self.message = output.message
            self.overallPlacement = output.overallPlacement
            self.tags = output.tags
        } else {
            self.deliverabilityTestReport = nil
            self.ispPlacements = nil
            self.message = nil
            self.overallPlacement = nil
            self.tags = nil
        }
    }
}

/// The results of the predictive inbox placement test.
public struct GetDeliverabilityTestReportOutputResponse: Swift.Equatable {
    /// An object that contains the results of the predictive inbox placement test.
    /// This member is required.
    public let deliverabilityTestReport: SesV2ClientTypes.DeliverabilityTestReport?
    /// An object that describes how the test email was handled by several email providers,
    ///             including Gmail, Hotmail, Yahoo, AOL, and others.
    /// This member is required.
    public let ispPlacements: [SesV2ClientTypes.IspPlacement]?
    /// An object that contains the message that you sent when you performed this
    ///             predictive inbox placement test.
    public let message: Swift.String?
    /// An object that specifies how many test messages that were sent during the predictive inbox placement test were
    ///             delivered to recipients' inboxes, how many were sent to recipients' spam folders, and
    ///             how many weren't delivered.
    /// This member is required.
    public let overallPlacement: SesV2ClientTypes.PlacementStatistics?
    /// An array of objects that define the tags (keys and values) that are associated with
    ///             the predictive inbox placement test.
    public let tags: [SesV2ClientTypes.Tag]?

    public init (
        deliverabilityTestReport: SesV2ClientTypes.DeliverabilityTestReport? = nil,
        ispPlacements: [SesV2ClientTypes.IspPlacement]? = nil,
        message: Swift.String? = nil,
        overallPlacement: SesV2ClientTypes.PlacementStatistics? = nil,
        tags: [SesV2ClientTypes.Tag]? = nil
    )
    {
        self.deliverabilityTestReport = deliverabilityTestReport
        self.ispPlacements = ispPlacements
        self.message = message
        self.overallPlacement = overallPlacement
        self.tags = tags
    }
}

struct GetDeliverabilityTestReportOutputResponseBody: Swift.Equatable {
    public let deliverabilityTestReport: SesV2ClientTypes.DeliverabilityTestReport?
    public let overallPlacement: SesV2ClientTypes.PlacementStatistics?
    public let ispPlacements: [SesV2ClientTypes.IspPlacement]?
    public let message: Swift.String?
    public let tags: [SesV2ClientTypes.Tag]?
}

extension GetDeliverabilityTestReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliverabilityTestReport = "DeliverabilityTestReport"
        case ispPlacements = "IspPlacements"
        case message = "Message"
        case overallPlacement = "OverallPlacement"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliverabilityTestReportDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DeliverabilityTestReport.self, forKey: .deliverabilityTestReport)
        deliverabilityTestReport = deliverabilityTestReportDecoded
        let overallPlacementDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.PlacementStatistics.self, forKey: .overallPlacement)
        overallPlacement = overallPlacementDecoded
        let ispPlacementsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.IspPlacement?].self, forKey: .ispPlacements)
        var ispPlacementsDecoded0:[SesV2ClientTypes.IspPlacement]? = nil
        if let ispPlacementsContainer = ispPlacementsContainer {
            ispPlacementsDecoded0 = [SesV2ClientTypes.IspPlacement]()
            for structure0 in ispPlacementsContainer {
                if let structure0 = structure0 {
                    ispPlacementsDecoded0?.append(structure0)
                }
            }
        }
        ispPlacements = ispPlacementsDecoded0
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SesV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SesV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension GetDomainDeliverabilityCampaignInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDomainDeliverabilityCampaignInput(campaignId: \(Swift.String(describing: campaignId)))"}
}

extension GetDomainDeliverabilityCampaignInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetDomainDeliverabilityCampaignInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDomainDeliverabilityCampaignInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDomainDeliverabilityCampaignInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDomainDeliverabilityCampaignOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDomainDeliverabilityCampaignInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDomainDeliverabilityCampaignOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDomainDeliverabilityCampaignOutputError>
}

public struct GetDomainDeliverabilityCampaignInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDomainDeliverabilityCampaignInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDomainDeliverabilityCampaignInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDomainDeliverabilityCampaignOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDomainDeliverabilityCampaignInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDomainDeliverabilityCampaignOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDomainDeliverabilityCampaignOutputError>
}

/// Retrieve all the deliverability data for a specific campaign. This data is available
///             for a campaign only if the campaign sent email by using a domain that the
///             Deliverability dashboard is enabled for (PutDeliverabilityDashboardOption
///             operation).
public struct GetDomainDeliverabilityCampaignInput: Swift.Equatable {
    /// The unique identifier for the campaign. The Deliverability dashboard automatically generates
    ///             and assigns this identifier to a campaign.
    /// This member is required.
    public let campaignId: Swift.String?

    public init (
        campaignId: Swift.String? = nil
    )
    {
        self.campaignId = campaignId
    }
}

struct GetDomainDeliverabilityCampaignInputBody: Swift.Equatable {
}

extension GetDomainDeliverabilityCampaignInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDomainDeliverabilityCampaignOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDomainDeliverabilityCampaignOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDomainDeliverabilityCampaignOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDomainDeliverabilityCampaignOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDomainDeliverabilityCampaignOutputResponse(domainDeliverabilityCampaign: \(Swift.String(describing: domainDeliverabilityCampaign)))"}
}

extension GetDomainDeliverabilityCampaignOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDomainDeliverabilityCampaignOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainDeliverabilityCampaign = output.domainDeliverabilityCampaign
        } else {
            self.domainDeliverabilityCampaign = nil
        }
    }
}

/// An object that contains all the deliverability data for a specific campaign. This data
///             is available for a campaign only if the campaign sent email by using a domain that the
///             Deliverability dashboard is enabled for.
public struct GetDomainDeliverabilityCampaignOutputResponse: Swift.Equatable {
    /// An object that contains the deliverability data for the campaign.
    /// This member is required.
    public let domainDeliverabilityCampaign: SesV2ClientTypes.DomainDeliverabilityCampaign?

    public init (
        domainDeliverabilityCampaign: SesV2ClientTypes.DomainDeliverabilityCampaign? = nil
    )
    {
        self.domainDeliverabilityCampaign = domainDeliverabilityCampaign
    }
}

struct GetDomainDeliverabilityCampaignOutputResponseBody: Swift.Equatable {
    public let domainDeliverabilityCampaign: SesV2ClientTypes.DomainDeliverabilityCampaign?
}

extension GetDomainDeliverabilityCampaignOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainDeliverabilityCampaign = "DomainDeliverabilityCampaign"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDeliverabilityCampaignDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DomainDeliverabilityCampaign.self, forKey: .domainDeliverabilityCampaign)
        domainDeliverabilityCampaign = domainDeliverabilityCampaignDecoded
    }
}

extension GetDomainStatisticsReportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDomainStatisticsReportInput(domain: \(Swift.String(describing: domain)), endDate: \(Swift.String(describing: endDate)), startDate: \(Swift.String(describing: startDate)))"}
}

extension GetDomainStatisticsReportInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetDomainStatisticsReportInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDomainStatisticsReportInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDomainStatisticsReportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDomainStatisticsReportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDomainStatisticsReportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDomainStatisticsReportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDomainStatisticsReportOutputError>
}

public struct GetDomainStatisticsReportInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDomainStatisticsReportInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDomainStatisticsReportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDomainStatisticsReportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let startDate = input.operationInput.startDate {
            let startDateQueryItem = ClientRuntime.URLQueryItem(name: "StartDate".urlPercentEncoding(), value: Swift.String(startDate.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(startDateQueryItem)
        }
        if let endDate = input.operationInput.endDate {
            let endDateQueryItem = ClientRuntime.URLQueryItem(name: "EndDate".urlPercentEncoding(), value: Swift.String(endDate.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(endDateQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDomainStatisticsReportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDomainStatisticsReportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDomainStatisticsReportOutputError>
}

/// A request to obtain deliverability metrics for a domain.
public struct GetDomainStatisticsReportInput: Swift.Equatable {
    /// The domain that you want to obtain deliverability metrics for.
    /// This member is required.
    public let domain: Swift.String?
    /// The last day (in Unix time) that you want to obtain domain deliverability metrics for.
    ///             The EndDate that you specify has to be less than or equal to 30 days after
    ///             the StartDate.
    /// This member is required.
    public let endDate: ClientRuntime.Date?
    /// The first day (in Unix time) that you want to obtain domain deliverability metrics
    ///             for.
    /// This member is required.
    public let startDate: ClientRuntime.Date?

    public init (
        domain: Swift.String? = nil,
        endDate: ClientRuntime.Date? = nil,
        startDate: ClientRuntime.Date? = nil
    )
    {
        self.domain = domain
        self.endDate = endDate
        self.startDate = startDate
    }
}

struct GetDomainStatisticsReportInputBody: Swift.Equatable {
}

extension GetDomainStatisticsReportInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDomainStatisticsReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDomainStatisticsReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDomainStatisticsReportOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDomainStatisticsReportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDomainStatisticsReportOutputResponse(dailyVolumes: \(Swift.String(describing: dailyVolumes)), overallVolume: \(Swift.String(describing: overallVolume)))"}
}

extension GetDomainStatisticsReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDomainStatisticsReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dailyVolumes = output.dailyVolumes
            self.overallVolume = output.overallVolume
        } else {
            self.dailyVolumes = nil
            self.overallVolume = nil
        }
    }
}

/// An object that includes statistics that are related to the domain that you
///             specified.
public struct GetDomainStatisticsReportOutputResponse: Swift.Equatable {
    /// An object that contains deliverability metrics for the domain that you specified. This
    ///             object contains data for each day, starting on the StartDate and ending on
    ///             the EndDate.
    /// This member is required.
    public let dailyVolumes: [SesV2ClientTypes.DailyVolume]?
    /// An object that contains deliverability metrics for the domain that you specified. The
    ///             data in this object is a summary of all of the data that was collected from the
    ///                 StartDate to the EndDate.
    /// This member is required.
    public let overallVolume: SesV2ClientTypes.OverallVolume?

    public init (
        dailyVolumes: [SesV2ClientTypes.DailyVolume]? = nil,
        overallVolume: SesV2ClientTypes.OverallVolume? = nil
    )
    {
        self.dailyVolumes = dailyVolumes
        self.overallVolume = overallVolume
    }
}

struct GetDomainStatisticsReportOutputResponseBody: Swift.Equatable {
    public let overallVolume: SesV2ClientTypes.OverallVolume?
    public let dailyVolumes: [SesV2ClientTypes.DailyVolume]?
}

extension GetDomainStatisticsReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dailyVolumes = "DailyVolumes"
        case overallVolume = "OverallVolume"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let overallVolumeDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.OverallVolume.self, forKey: .overallVolume)
        overallVolume = overallVolumeDecoded
        let dailyVolumesContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.DailyVolume?].self, forKey: .dailyVolumes)
        var dailyVolumesDecoded0:[SesV2ClientTypes.DailyVolume]? = nil
        if let dailyVolumesContainer = dailyVolumesContainer {
            dailyVolumesDecoded0 = [SesV2ClientTypes.DailyVolume]()
            for structure0 in dailyVolumesContainer {
                if let structure0 = structure0 {
                    dailyVolumesDecoded0?.append(structure0)
                }
            }
        }
        dailyVolumes = dailyVolumesDecoded0
    }
}

extension GetEmailIdentityInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEmailIdentityInput(emailIdentity: \(Swift.String(describing: emailIdentity)))"}
}

extension GetEmailIdentityInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetEmailIdentityInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEmailIdentityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEmailIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEmailIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEmailIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEmailIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEmailIdentityOutputError>
}

public struct GetEmailIdentityInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEmailIdentityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEmailIdentityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEmailIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEmailIdentityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEmailIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEmailIdentityOutputError>
}

/// A request to return details about an email identity.
public struct GetEmailIdentityInput: Swift.Equatable {
    /// The email identity that you want to retrieve details for.
    /// This member is required.
    public let emailIdentity: Swift.String?

    public init (
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
    }
}

struct GetEmailIdentityInputBody: Swift.Equatable {
}

extension GetEmailIdentityInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetEmailIdentityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEmailIdentityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetEmailIdentityOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEmailIdentityOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEmailIdentityOutputResponse(configurationSetName: \(Swift.String(describing: configurationSetName)), dkimAttributes: \(Swift.String(describing: dkimAttributes)), feedbackForwardingStatus: \(Swift.String(describing: feedbackForwardingStatus)), identityType: \(Swift.String(describing: identityType)), mailFromAttributes: \(Swift.String(describing: mailFromAttributes)), policies: \(Swift.String(describing: policies)), tags: \(Swift.String(describing: tags)), verifiedForSendingStatus: \(Swift.String(describing: verifiedForSendingStatus)))"}
}

extension GetEmailIdentityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetEmailIdentityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationSetName = output.configurationSetName
            self.dkimAttributes = output.dkimAttributes
            self.feedbackForwardingStatus = output.feedbackForwardingStatus
            self.identityType = output.identityType
            self.mailFromAttributes = output.mailFromAttributes
            self.policies = output.policies
            self.tags = output.tags
            self.verifiedForSendingStatus = output.verifiedForSendingStatus
        } else {
            self.configurationSetName = nil
            self.dkimAttributes = nil
            self.feedbackForwardingStatus = false
            self.identityType = nil
            self.mailFromAttributes = nil
            self.policies = nil
            self.tags = nil
            self.verifiedForSendingStatus = false
        }
    }
}

/// Details about an email identity.
public struct GetEmailIdentityOutputResponse: Swift.Equatable {
    /// The configuration set used by default when sending from this identity.
    public let configurationSetName: Swift.String?
    /// An object that contains information about the DKIM attributes for the identity.
    public let dkimAttributes: SesV2ClientTypes.DkimAttributes?
    /// The feedback forwarding configuration for the identity.
    ///         If the value is true, you receive email notifications when bounce or
    ///             complaint events occur. These notifications are sent to the address that you specified
    ///             in the Return-Path header of the original email.
    ///         You're required to have a method of tracking bounces and complaints. If you haven't
    ///             set up another mechanism for receiving bounce or complaint notifications (for example,
    ///             by setting up an event destination), you receive an email notification when these events
    ///             occur (even if this setting is disabled).
    public let feedbackForwardingStatus: Swift.Bool
    /// The email identity type.
    public let identityType: SesV2ClientTypes.IdentityType?
    /// An object that contains information about the Mail-From attributes for the email
    ///             identity.
    public let mailFromAttributes: SesV2ClientTypes.MailFromAttributes?
    /// A map of policy names to policies.
    public let policies: [Swift.String:Swift.String]?
    /// An array of objects that define the tags (keys and values) that are associated with
    ///             the email identity.
    public let tags: [SesV2ClientTypes.Tag]?
    /// Specifies whether or not the identity is verified. You can only send email from
    ///             verified email addresses or domains. For more information about verifying identities,
    ///             see the <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html">Amazon Pinpoint User Guide.
    public let verifiedForSendingStatus: Swift.Bool

    public init (
        configurationSetName: Swift.String? = nil,
        dkimAttributes: SesV2ClientTypes.DkimAttributes? = nil,
        feedbackForwardingStatus: Swift.Bool = false,
        identityType: SesV2ClientTypes.IdentityType? = nil,
        mailFromAttributes: SesV2ClientTypes.MailFromAttributes? = nil,
        policies: [Swift.String:Swift.String]? = nil,
        tags: [SesV2ClientTypes.Tag]? = nil,
        verifiedForSendingStatus: Swift.Bool = false
    )
    {
        self.configurationSetName = configurationSetName
        self.dkimAttributes = dkimAttributes
        self.feedbackForwardingStatus = feedbackForwardingStatus
        self.identityType = identityType
        self.mailFromAttributes = mailFromAttributes
        self.policies = policies
        self.tags = tags
        self.verifiedForSendingStatus = verifiedForSendingStatus
    }
}

struct GetEmailIdentityOutputResponseBody: Swift.Equatable {
    public let identityType: SesV2ClientTypes.IdentityType?
    public let feedbackForwardingStatus: Swift.Bool
    public let verifiedForSendingStatus: Swift.Bool
    public let dkimAttributes: SesV2ClientTypes.DkimAttributes?
    public let mailFromAttributes: SesV2ClientTypes.MailFromAttributes?
    public let policies: [Swift.String:Swift.String]?
    public let tags: [SesV2ClientTypes.Tag]?
    public let configurationSetName: Swift.String?
}

extension GetEmailIdentityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case dkimAttributes = "DkimAttributes"
        case feedbackForwardingStatus = "FeedbackForwardingStatus"
        case identityType = "IdentityType"
        case mailFromAttributes = "MailFromAttributes"
        case policies = "Policies"
        case tags = "Tags"
        case verifiedForSendingStatus = "VerifiedForSendingStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityTypeDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let feedbackForwardingStatusDecoded = try containerValues.decode(Swift.Bool.self, forKey: .feedbackForwardingStatus)
        feedbackForwardingStatus = feedbackForwardingStatusDecoded
        let verifiedForSendingStatusDecoded = try containerValues.decode(Swift.Bool.self, forKey: .verifiedForSendingStatus)
        verifiedForSendingStatus = verifiedForSendingStatusDecoded
        let dkimAttributesDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DkimAttributes.self, forKey: .dkimAttributes)
        dkimAttributes = dkimAttributesDecoded
        let mailFromAttributesDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.MailFromAttributes.self, forKey: .mailFromAttributes)
        mailFromAttributes = mailFromAttributesDecoded
        let policiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .policies)
        var policiesDecoded0: [Swift.String:Swift.String]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, policy0) in policiesContainer {
                if let policy0 = policy0 {
                    policiesDecoded0?[key0] = policy0
                }
            }
        }
        policies = policiesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SesV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SesV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension GetEmailIdentityPoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEmailIdentityPoliciesInput(emailIdentity: \(Swift.String(describing: emailIdentity)))"}
}

extension GetEmailIdentityPoliciesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetEmailIdentityPoliciesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEmailIdentityPoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEmailIdentityPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEmailIdentityPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEmailIdentityPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEmailIdentityPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEmailIdentityPoliciesOutputError>
}

public struct GetEmailIdentityPoliciesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEmailIdentityPoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEmailIdentityPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEmailIdentityPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEmailIdentityPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEmailIdentityPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEmailIdentityPoliciesOutputError>
}

/// A request to return the policies of an email identity.
public struct GetEmailIdentityPoliciesInput: Swift.Equatable {
    /// The email identity that you want to retrieve policies for.
    /// This member is required.
    public let emailIdentity: Swift.String?

    public init (
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
    }
}

struct GetEmailIdentityPoliciesInputBody: Swift.Equatable {
}

extension GetEmailIdentityPoliciesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetEmailIdentityPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEmailIdentityPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetEmailIdentityPoliciesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEmailIdentityPoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEmailIdentityPoliciesOutputResponse(policies: \(Swift.String(describing: policies)))"}
}

extension GetEmailIdentityPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetEmailIdentityPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policies = output.policies
        } else {
            self.policies = nil
        }
    }
}

/// Identity policies associated with email identity.
public struct GetEmailIdentityPoliciesOutputResponse: Swift.Equatable {
    /// A map of policy names to policies.
    public let policies: [Swift.String:Swift.String]?

    public init (
        policies: [Swift.String:Swift.String]? = nil
    )
    {
        self.policies = policies
    }
}

struct GetEmailIdentityPoliciesOutputResponseBody: Swift.Equatable {
    public let policies: [Swift.String:Swift.String]?
}

extension GetEmailIdentityPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policies = "Policies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .policies)
        var policiesDecoded0: [Swift.String:Swift.String]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, policy0) in policiesContainer {
                if let policy0 = policy0 {
                    policiesDecoded0?[key0] = policy0
                }
            }
        }
        policies = policiesDecoded0
    }
}

extension GetEmailTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEmailTemplateInput(templateName: \(Swift.String(describing: templateName)))"}
}

extension GetEmailTemplateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetEmailTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEmailTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEmailTemplateOutputError>
}

public struct GetEmailTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEmailTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEmailTemplateOutputError>
}

/// Represents a request to display the template object (which includes the subject line,
///             HTML part and text part) for the template you specify.
public struct GetEmailTemplateInput: Swift.Equatable {
    /// The name of the template you want to retrieve.
    /// This member is required.
    public let templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct GetEmailTemplateInputBody: Swift.Equatable {
}

extension GetEmailTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEmailTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEmailTemplateOutputResponse(templateContent: \(Swift.String(describing: templateContent)), templateName: \(Swift.String(describing: templateName)))"}
}

extension GetEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetEmailTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.templateContent = output.templateContent
            self.templateName = output.templateName
        } else {
            self.templateContent = nil
            self.templateName = nil
        }
    }
}

/// The following element is returned by the service.
public struct GetEmailTemplateOutputResponse: Swift.Equatable {
    /// The content of the email template, composed of a subject line, an HTML part, and a
    ///             text-only part.
    /// This member is required.
    public let templateContent: SesV2ClientTypes.EmailTemplateContent?
    /// The name of the template you want to retrieve.
    /// This member is required.
    public let templateName: Swift.String?

    public init (
        templateContent: SesV2ClientTypes.EmailTemplateContent? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateContent = templateContent
        self.templateName = templateName
    }
}

struct GetEmailTemplateOutputResponseBody: Swift.Equatable {
    public let templateName: Swift.String?
    public let templateContent: SesV2ClientTypes.EmailTemplateContent?
}

extension GetEmailTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateContent = "TemplateContent"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateContentDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.EmailTemplateContent.self, forKey: .templateContent)
        templateContent = templateContentDecoded
    }
}

extension GetImportJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetImportJobInput(jobId: \(Swift.String(describing: jobId)))"}
}

extension GetImportJobInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetImportJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetImportJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetImportJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetImportJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetImportJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetImportJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetImportJobOutputError>
}

public struct GetImportJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetImportJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetImportJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetImportJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetImportJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetImportJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetImportJobOutputError>
}

/// Represents a request for information about an import job using the import job
///             ID.
public struct GetImportJobInput: Swift.Equatable {
    /// The ID of the import job.
    /// This member is required.
    public let jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct GetImportJobInputBody: Swift.Equatable {
}

extension GetImportJobInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetImportJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetImportJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetImportJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetImportJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetImportJobOutputResponse(completedTimestamp: \(Swift.String(describing: completedTimestamp)), createdTimestamp: \(Swift.String(describing: createdTimestamp)), failedRecordsCount: \(Swift.String(describing: failedRecordsCount)), failureInfo: \(Swift.String(describing: failureInfo)), importDataSource: \(Swift.String(describing: importDataSource)), importDestination: \(Swift.String(describing: importDestination)), jobId: \(Swift.String(describing: jobId)), jobStatus: \(Swift.String(describing: jobStatus)), processedRecordsCount: \(Swift.String(describing: processedRecordsCount)))"}
}

extension GetImportJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetImportJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.completedTimestamp = output.completedTimestamp
            self.createdTimestamp = output.createdTimestamp
            self.failedRecordsCount = output.failedRecordsCount
            self.failureInfo = output.failureInfo
            self.importDataSource = output.importDataSource
            self.importDestination = output.importDestination
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
            self.processedRecordsCount = output.processedRecordsCount
        } else {
            self.completedTimestamp = nil
            self.createdTimestamp = nil
            self.failedRecordsCount = nil
            self.failureInfo = nil
            self.importDataSource = nil
            self.importDestination = nil
            self.jobId = nil
            self.jobStatus = nil
            self.processedRecordsCount = nil
        }
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct GetImportJobOutputResponse: Swift.Equatable {
    /// The time stamp of when the import job was completed.
    public let completedTimestamp: ClientRuntime.Date?
    /// The time stamp of when the import job was created.
    public let createdTimestamp: ClientRuntime.Date?
    /// The number of records that failed processing because of invalid input or other
    ///             reasons.
    public let failedRecordsCount: Swift.Int?
    /// The failure details about an import job.
    public let failureInfo: SesV2ClientTypes.FailureInfo?
    /// The data source of the import job.
    public let importDataSource: SesV2ClientTypes.ImportDataSource?
    /// The destination of the import job.
    public let importDestination: SesV2ClientTypes.ImportDestination?
    /// A string that represents the import job ID.
    public let jobId: Swift.String?
    /// The status of the import job.
    public let jobStatus: SesV2ClientTypes.JobStatus?
    /// The current number of records processed.
    public let processedRecordsCount: Swift.Int?

    public init (
        completedTimestamp: ClientRuntime.Date? = nil,
        createdTimestamp: ClientRuntime.Date? = nil,
        failedRecordsCount: Swift.Int? = nil,
        failureInfo: SesV2ClientTypes.FailureInfo? = nil,
        importDataSource: SesV2ClientTypes.ImportDataSource? = nil,
        importDestination: SesV2ClientTypes.ImportDestination? = nil,
        jobId: Swift.String? = nil,
        jobStatus: SesV2ClientTypes.JobStatus? = nil,
        processedRecordsCount: Swift.Int? = nil
    )
    {
        self.completedTimestamp = completedTimestamp
        self.createdTimestamp = createdTimestamp
        self.failedRecordsCount = failedRecordsCount
        self.failureInfo = failureInfo
        self.importDataSource = importDataSource
        self.importDestination = importDestination
        self.jobId = jobId
        self.jobStatus = jobStatus
        self.processedRecordsCount = processedRecordsCount
    }
}

struct GetImportJobOutputResponseBody: Swift.Equatable {
    public let jobId: Swift.String?
    public let importDestination: SesV2ClientTypes.ImportDestination?
    public let importDataSource: SesV2ClientTypes.ImportDataSource?
    public let failureInfo: SesV2ClientTypes.FailureInfo?
    public let jobStatus: SesV2ClientTypes.JobStatus?
    public let createdTimestamp: ClientRuntime.Date?
    public let completedTimestamp: ClientRuntime.Date?
    public let processedRecordsCount: Swift.Int?
    public let failedRecordsCount: Swift.Int?
}

extension GetImportJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completedTimestamp = "CompletedTimestamp"
        case createdTimestamp = "CreatedTimestamp"
        case failedRecordsCount = "FailedRecordsCount"
        case failureInfo = "FailureInfo"
        case importDataSource = "ImportDataSource"
        case importDestination = "ImportDestination"
        case jobId = "JobId"
        case jobStatus = "JobStatus"
        case processedRecordsCount = "ProcessedRecordsCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let importDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ImportDestination.self, forKey: .importDestination)
        importDestination = importDestinationDecoded
        let importDataSourceDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ImportDataSource.self, forKey: .importDataSource)
        importDataSource = importDataSourceDecoded
        let failureInfoDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.FailureInfo.self, forKey: .failureInfo)
        failureInfo = failureInfoDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let completedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completedTimestamp)
        completedTimestamp = completedTimestampDecoded
        let processedRecordsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .processedRecordsCount)
        processedRecordsCount = processedRecordsCountDecoded
        let failedRecordsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedRecordsCount)
        failedRecordsCount = failedRecordsCountDecoded
    }
}

extension GetSuppressedDestinationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSuppressedDestinationInput(emailAddress: \(Swift.String(describing: emailAddress)))"}
}

extension GetSuppressedDestinationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetSuppressedDestinationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSuppressedDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSuppressedDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSuppressedDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSuppressedDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSuppressedDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSuppressedDestinationOutputError>
}

public struct GetSuppressedDestinationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSuppressedDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSuppressedDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSuppressedDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSuppressedDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSuppressedDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSuppressedDestinationOutputError>
}

/// A request to retrieve information about an email address that's on the suppression
///             list for your account.
public struct GetSuppressedDestinationInput: Swift.Equatable {
    /// The email address that's on the account suppression list.
    /// This member is required.
    public let emailAddress: Swift.String?

    public init (
        emailAddress: Swift.String? = nil
    )
    {
        self.emailAddress = emailAddress
    }
}

struct GetSuppressedDestinationInputBody: Swift.Equatable {
}

extension GetSuppressedDestinationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSuppressedDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSuppressedDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSuppressedDestinationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSuppressedDestinationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSuppressedDestinationOutputResponse(suppressedDestination: \(Swift.String(describing: suppressedDestination)))"}
}

extension GetSuppressedDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSuppressedDestinationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.suppressedDestination = output.suppressedDestination
        } else {
            self.suppressedDestination = nil
        }
    }
}

/// Information about the suppressed email address.
public struct GetSuppressedDestinationOutputResponse: Swift.Equatable {
    /// An object containing information about the suppressed email address.
    /// This member is required.
    public let suppressedDestination: SesV2ClientTypes.SuppressedDestination?

    public init (
        suppressedDestination: SesV2ClientTypes.SuppressedDestination? = nil
    )
    {
        self.suppressedDestination = suppressedDestination
    }
}

struct GetSuppressedDestinationOutputResponseBody: Swift.Equatable {
    public let suppressedDestination: SesV2ClientTypes.SuppressedDestination?
}

extension GetSuppressedDestinationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressedDestination = "SuppressedDestination"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressedDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SuppressedDestination.self, forKey: .suppressedDestination)
        suppressedDestination = suppressedDestinationDecoded
    }
}

extension SesV2ClientTypes.IdentityInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityName = identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if sendingEnabled != false {
            try encodeContainer.encode(sendingEnabled, forKey: .sendingEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityTypeDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let sendingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .sendingEnabled)
        sendingEnabled = sendingEnabledDecoded
    }
}

extension SesV2ClientTypes.IdentityInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IdentityInfo(identityName: \(Swift.String(describing: identityName)), identityType: \(Swift.String(describing: identityType)), sendingEnabled: \(Swift.String(describing: sendingEnabled)))"}
}

extension SesV2ClientTypes {
    /// Information about an email identity.
    public struct IdentityInfo: Swift.Equatable {
        /// The address or domain of the identity.
        public let identityName: Swift.String?
        /// The email identity type. The identity type can be one of the following:
        ///
        ///
        ///
        ///                   EMAIL_ADDRESS – The identity is an email address.
        ///
        ///
        ///
        ///                   DOMAIN – The identity is a domain.
        ///
        ///
        ///
        ///                   MANAGED_DOMAIN – The identity is a domain that is managed
        ///                     by AWS.
        ///
        ///
        public let identityType: SesV2ClientTypes.IdentityType?
        /// Indicates whether or not you can send email from the identity.
        ///         An identity is an email address or domain that you send email
        ///             from. Before you can send email from an identity, you have to demostrate that you own
        ///             the identity, and that you authorize Amazon SES to send email from that identity.
        public let sendingEnabled: Swift.Bool

        public init (
            identityName: Swift.String? = nil,
            identityType: SesV2ClientTypes.IdentityType? = nil,
            sendingEnabled: Swift.Bool = false
        )
        {
            self.identityName = identityName
            self.identityType = identityType
            self.sendingEnabled = sendingEnabled
        }
    }

}

extension SesV2ClientTypes {
    /// The email identity type. The identity type can be one of the following:
    ///
    ///
    ///
    ///                   EMAIL_ADDRESS – The identity is an email address.
    ///
    ///
    ///
    ///                   DOMAIN – The identity is a domain.
    ///
    ///
    public enum IdentityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case domain
        case emailAddress
        case managedDomain
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentityType] {
            return [
                .domain,
                .emailAddress,
                .managedDomain,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .domain: return "DOMAIN"
            case .emailAddress: return "EMAIL_ADDRESS"
            case .managedDomain: return "MANAGED_DOMAIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IdentityType(rawValue: rawValue) ?? IdentityType.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.ImportDataSource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataFormat = "DataFormat"
        case s3Url = "S3Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataFormat = dataFormat {
            try encodeContainer.encode(dataFormat.rawValue, forKey: .dataFormat)
        }
        if let s3Url = s3Url {
            try encodeContainer.encode(s3Url, forKey: .s3Url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Url)
        s3Url = s3UrlDecoded
        let dataFormatDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DataFormat.self, forKey: .dataFormat)
        dataFormat = dataFormatDecoded
    }
}

extension SesV2ClientTypes.ImportDataSource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportDataSource(dataFormat: \(Swift.String(describing: dataFormat)), s3Url: \(Swift.String(describing: s3Url)))"}
}

extension SesV2ClientTypes {
    /// An object that contains details about the data source of the import job.
    public struct ImportDataSource: Swift.Equatable {
        /// The data format of the import job's data source.
        /// This member is required.
        public let dataFormat: SesV2ClientTypes.DataFormat?
        /// An Amazon S3 URL in the format
        ///                 s3://<bucket_name>/<object>.
        /// This member is required.
        public let s3Url: Swift.String?

        public init (
            dataFormat: SesV2ClientTypes.DataFormat? = nil,
            s3Url: Swift.String? = nil
        )
        {
            self.dataFormat = dataFormat
            self.s3Url = s3Url
        }
    }

}

extension SesV2ClientTypes.ImportDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactListDestination = "ContactListDestination"
        case suppressionListDestination = "SuppressionListDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactListDestination = contactListDestination {
            try encodeContainer.encode(contactListDestination, forKey: .contactListDestination)
        }
        if let suppressionListDestination = suppressionListDestination {
            try encodeContainer.encode(suppressionListDestination, forKey: .suppressionListDestination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressionListDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SuppressionListDestination.self, forKey: .suppressionListDestination)
        suppressionListDestination = suppressionListDestinationDecoded
        let contactListDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ContactListDestination.self, forKey: .contactListDestination)
        contactListDestination = contactListDestinationDecoded
    }
}

extension SesV2ClientTypes.ImportDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportDestination(contactListDestination: \(Swift.String(describing: contactListDestination)), suppressionListDestination: \(Swift.String(describing: suppressionListDestination)))"}
}

extension SesV2ClientTypes {
    /// An object that contains details about the resource destination the import job is going
    ///             to target.
    public struct ImportDestination: Swift.Equatable {
        /// An object that contains the action of the import job towards a contact list.
        public let contactListDestination: SesV2ClientTypes.ContactListDestination?
        /// An object that contains the action of the import job towards suppression list.
        public let suppressionListDestination: SesV2ClientTypes.SuppressionListDestination?

        public init (
            contactListDestination: SesV2ClientTypes.ContactListDestination? = nil,
            suppressionListDestination: SesV2ClientTypes.SuppressionListDestination? = nil
        )
        {
            self.contactListDestination = contactListDestination
            self.suppressionListDestination = suppressionListDestination
        }
    }

}

extension SesV2ClientTypes {
    /// The destination of the import job, which can be used to list import jobs that have a
    ///             certain ImportDestinationType.
    public enum ImportDestinationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case contactList
        case suppressionList
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportDestinationType] {
            return [
                .contactList,
                .suppressionList,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .contactList: return "CONTACT_LIST"
            case .suppressionList: return "SUPPRESSION_LIST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ImportDestinationType(rawValue: rawValue) ?? ImportDestinationType.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.ImportJobSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case importDestination = "ImportDestination"
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTimestamp = createdTimestamp {
            try encodeContainer.encode(createdTimestamp.timeIntervalSince1970, forKey: .createdTimestamp)
        }
        if let importDestination = importDestination {
            try encodeContainer.encode(importDestination, forKey: .importDestination)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobStatus = jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let importDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ImportDestination.self, forKey: .importDestination)
        importDestination = importDestinationDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
    }
}

extension SesV2ClientTypes.ImportJobSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportJobSummary(createdTimestamp: \(Swift.String(describing: createdTimestamp)), importDestination: \(Swift.String(describing: importDestination)), jobId: \(Swift.String(describing: jobId)), jobStatus: \(Swift.String(describing: jobStatus)))"}
}

extension SesV2ClientTypes {
    /// A summary of the import job.
    public struct ImportJobSummary: Swift.Equatable {
        /// The date and time when the import job was created.
        public let createdTimestamp: ClientRuntime.Date?
        /// An object that contains details about the resource destination the import job is going
        ///             to target.
        public let importDestination: SesV2ClientTypes.ImportDestination?
        /// A string that represents the import job ID.
        public let jobId: Swift.String?
        /// The status of the import job.
        public let jobStatus: SesV2ClientTypes.JobStatus?

        public init (
            createdTimestamp: ClientRuntime.Date? = nil,
            importDestination: SesV2ClientTypes.ImportDestination? = nil,
            jobId: Swift.String? = nil,
            jobStatus: SesV2ClientTypes.JobStatus? = nil
        )
        {
            self.createdTimestamp = createdTimestamp
            self.importDestination = importDestination
            self.jobId = jobId
            self.jobStatus = jobStatus
        }
    }

}

extension SesV2ClientTypes.InboxPlacementTrackingOption: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case global = "Global"
        case trackedIsps = "TrackedIsps"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if global != false {
            try encodeContainer.encode(global, forKey: .global)
        }
        if let trackedIsps = trackedIsps {
            var trackedIspsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trackedIsps)
            for ispnamelist0 in trackedIsps {
                try trackedIspsContainer.encode(ispnamelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalDecoded = try containerValues.decode(Swift.Bool.self, forKey: .global)
        global = globalDecoded
        let trackedIspsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .trackedIsps)
        var trackedIspsDecoded0:[Swift.String]? = nil
        if let trackedIspsContainer = trackedIspsContainer {
            trackedIspsDecoded0 = [Swift.String]()
            for string0 in trackedIspsContainer {
                if let string0 = string0 {
                    trackedIspsDecoded0?.append(string0)
                }
            }
        }
        trackedIsps = trackedIspsDecoded0
    }
}

extension SesV2ClientTypes.InboxPlacementTrackingOption: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InboxPlacementTrackingOption(global: \(Swift.String(describing: global)), trackedIsps: \(Swift.String(describing: trackedIsps)))"}
}

extension SesV2ClientTypes {
    /// An object that contains information about the inbox placement data settings for a
    ///             verified domain that’s associated with your AWS account. This data is available only
    ///             if you enabled the Deliverability dashboard for the domain.
    public struct InboxPlacementTrackingOption: Swift.Equatable {
        /// Specifies whether inbox placement data is being tracked for the domain.
        public let global: Swift.Bool
        /// An array of strings, one for each major email provider that the inbox placement data
        ///             applies to.
        public let trackedIsps: [Swift.String]?

        public init (
            global: Swift.Bool = false,
            trackedIsps: [Swift.String]? = nil
        )
        {
            self.global = global
            self.trackedIsps = trackedIsps
        }
    }

}

extension InvalidNextTokenException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidNextTokenException(message: \(Swift.String(describing: message)))"}
}

extension InvalidNextTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidNextTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified request includes an invalid or expired token.
public struct InvalidNextTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNextTokenExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidNextTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesV2ClientTypes.IspPlacement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ispName = "IspName"
        case placementStatistics = "PlacementStatistics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ispName = ispName {
            try encodeContainer.encode(ispName, forKey: .ispName)
        }
        if let placementStatistics = placementStatistics {
            try encodeContainer.encode(placementStatistics, forKey: .placementStatistics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ispNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ispName)
        ispName = ispNameDecoded
        let placementStatisticsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.PlacementStatistics.self, forKey: .placementStatistics)
        placementStatistics = placementStatisticsDecoded
    }
}

extension SesV2ClientTypes.IspPlacement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IspPlacement(ispName: \(Swift.String(describing: ispName)), placementStatistics: \(Swift.String(describing: placementStatistics)))"}
}

extension SesV2ClientTypes {
    /// An object that describes how email sent during the predictive inbox placement test was handled by a certain
    ///             email provider.
    public struct IspPlacement: Swift.Equatable {
        /// The name of the email provider that the inbox placement data applies to.
        public let ispName: Swift.String?
        /// An object that contains inbox placement metrics for a specific email provider.
        public let placementStatistics: SesV2ClientTypes.PlacementStatistics?

        public init (
            ispName: Swift.String? = nil,
            placementStatistics: SesV2ClientTypes.PlacementStatistics? = nil
        )
        {
            self.ispName = ispName
            self.placementStatistics = placementStatistics
        }
    }

}

extension SesV2ClientTypes {
    /// The status of the import job.
    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case created
        case failed
        case processing
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .completed,
                .created,
                .failed,
                .processing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .created: return "CREATED"
            case .failed: return "FAILED"
            case .processing: return "PROCESSING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobStatus(rawValue: rawValue) ?? JobStatus.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.KinesisFirehoseDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStreamArn = "DeliveryStreamArn"
        case iamRoleArn = "IamRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryStreamArn = deliveryStreamArn {
            try encodeContainer.encode(deliveryStreamArn, forKey: .deliveryStreamArn)
        }
        if let iamRoleArn = iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let deliveryStreamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamArn)
        deliveryStreamArn = deliveryStreamArnDecoded
    }
}

extension SesV2ClientTypes.KinesisFirehoseDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KinesisFirehoseDestination(deliveryStreamArn: \(Swift.String(describing: deliveryStreamArn)), iamRoleArn: \(Swift.String(describing: iamRoleArn)))"}
}

extension SesV2ClientTypes {
    /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to
    ///             stream data to other services, such as Amazon S3 and Amazon Redshift.
    public struct KinesisFirehoseDestination: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that the Amazon SES API v2 sends email
        ///             events to.
        /// This member is required.
        public let deliveryStreamArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that the Amazon SES API v2 uses to send email
        ///             events to the Amazon Kinesis Data Firehose stream.
        /// This member is required.
        public let iamRoleArn: Swift.String?

        public init (
            deliveryStreamArn: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil
        )
        {
            self.deliveryStreamArn = deliveryStreamArn
            self.iamRoleArn = iamRoleArn
        }
    }

}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There are too many instances of the specified resource type.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListConfigurationSetsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListConfigurationSetsInput(nextToken: \(Swift.String(describing: nextToken)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListConfigurationSetsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListConfigurationSetsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListConfigurationSetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListConfigurationSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListConfigurationSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListConfigurationSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListConfigurationSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListConfigurationSetsOutputError>
}

public struct ListConfigurationSetsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListConfigurationSetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListConfigurationSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListConfigurationSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListConfigurationSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListConfigurationSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListConfigurationSetsOutputError>
}

/// A request to obtain a list of configuration sets for your Amazon SES account in the current
///             AWS Region.
public struct ListConfigurationSetsInput: Swift.Equatable {
    /// A token returned from a previous call to ListConfigurationSets to
    ///             indicate the position in the list of configuration sets.
    public let nextToken: Swift.String?
    /// The number of results to show in a single call to ListConfigurationSets.
    ///             If the number of results is larger than the number you specified in this parameter, then
    ///             the response includes a NextToken element, which you can use to obtain
    ///             additional results.
    public let pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListConfigurationSetsInputBody: Swift.Equatable {
}

extension ListConfigurationSetsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListConfigurationSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListConfigurationSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListConfigurationSetsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListConfigurationSetsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListConfigurationSetsOutputResponse(configurationSets: \(Swift.String(describing: configurationSets)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListConfigurationSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListConfigurationSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationSets = output.configurationSets
            self.nextToken = output.nextToken
        } else {
            self.configurationSets = nil
            self.nextToken = nil
        }
    }
}

/// A list of configuration sets in your Amazon SES account in the current AWS Region.
public struct ListConfigurationSetsOutputResponse: Swift.Equatable {
    /// An array that contains all of the configuration sets in your Amazon SES account in the
    ///             current AWS Region.
    public let configurationSets: [Swift.String]?
    /// A token that indicates that there are additional configuration sets to list. To view
    ///             additional configuration sets, issue another request to
    ///                 ListConfigurationSets, and pass this token in the
    ///                 NextToken parameter.
    public let nextToken: Swift.String?

    public init (
        configurationSets: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationSets = configurationSets
        self.nextToken = nextToken
    }
}

struct ListConfigurationSetsOutputResponseBody: Swift.Equatable {
    public let configurationSets: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListConfigurationSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSets = "ConfigurationSets"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configurationSets)
        var configurationSetsDecoded0:[Swift.String]? = nil
        if let configurationSetsContainer = configurationSetsContainer {
            configurationSetsDecoded0 = [Swift.String]()
            for string0 in configurationSetsContainer {
                if let string0 = string0 {
                    configurationSetsDecoded0?.append(string0)
                }
            }
        }
        configurationSets = configurationSetsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListContactListsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListContactListsInput(nextToken: \(Swift.String(describing: nextToken)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListContactListsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListContactListsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListContactListsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListContactListsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListContactListsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListContactListsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListContactListsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListContactListsOutputError>
}

public struct ListContactListsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListContactListsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListContactListsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListContactListsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListContactListsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListContactListsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListContactListsOutputError>
}

public struct ListContactListsInput: Swift.Equatable {
    /// A string token indicating that there might be additional contact lists available to be
    ///             listed. Use the token provided in the Response to use in the subsequent call to
    ///             ListContactLists with the same parameters to retrieve the next page of contact
    ///             lists.
    public let nextToken: Swift.String?
    /// Maximum number of contact lists to return at once. Use this parameter to paginate
    ///             results. If additional contact lists exist beyond the specified limit, the
    ///                 NextToken element is sent in the response. Use the
    ///                 NextToken value in subsequent requests to retrieve additional
    ///             lists.
    public let pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListContactListsInputBody: Swift.Equatable {
}

extension ListContactListsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListContactListsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListContactListsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListContactListsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListContactListsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListContactListsOutputResponse(contactLists: \(Swift.String(describing: contactLists)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListContactListsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListContactListsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contactLists = output.contactLists
            self.nextToken = output.nextToken
        } else {
            self.contactLists = nil
            self.nextToken = nil
        }
    }
}

public struct ListContactListsOutputResponse: Swift.Equatable {
    /// The available contact lists.
    public let contactLists: [SesV2ClientTypes.ContactList]?
    /// A string token indicating that there might be additional contact lists available to be
    ///             listed. Copy this token to a subsequent call to ListContactLists with the
    ///             same parameters to retrieve the next page of contact lists.
    public let nextToken: Swift.String?

    public init (
        contactLists: [SesV2ClientTypes.ContactList]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.contactLists = contactLists
        self.nextToken = nextToken
    }
}

struct ListContactListsOutputResponseBody: Swift.Equatable {
    public let contactLists: [SesV2ClientTypes.ContactList]?
    public let nextToken: Swift.String?
}

extension ListContactListsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactLists = "ContactLists"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactListsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.ContactList?].self, forKey: .contactLists)
        var contactListsDecoded0:[SesV2ClientTypes.ContactList]? = nil
        if let contactListsContainer = contactListsContainer {
            contactListsDecoded0 = [SesV2ClientTypes.ContactList]()
            for structure0 in contactListsContainer {
                if let structure0 = structure0 {
                    contactListsDecoded0?.append(structure0)
                }
            }
        }
        contactLists = contactListsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SesV2ClientTypes.ListContactsFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filteredStatus = "FilteredStatus"
        case topicFilter = "TopicFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filteredStatus = filteredStatus {
            try encodeContainer.encode(filteredStatus.rawValue, forKey: .filteredStatus)
        }
        if let topicFilter = topicFilter {
            try encodeContainer.encode(topicFilter, forKey: .topicFilter)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filteredStatusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SubscriptionStatus.self, forKey: .filteredStatus)
        filteredStatus = filteredStatusDecoded
        let topicFilterDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.TopicFilter.self, forKey: .topicFilter)
        topicFilter = topicFilterDecoded
    }
}

extension SesV2ClientTypes.ListContactsFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListContactsFilter(filteredStatus: \(Swift.String(describing: filteredStatus)), topicFilter: \(Swift.String(describing: topicFilter)))"}
}

extension SesV2ClientTypes {
    /// A filter that can be applied to a list of contacts.
    public struct ListContactsFilter: Swift.Equatable {
        /// The status by which you are filtering: OPT_IN or
        ///             OPT_OUT.
        public let filteredStatus: SesV2ClientTypes.SubscriptionStatus?
        /// Used for filtering by a specific topic preference.
        public let topicFilter: SesV2ClientTypes.TopicFilter?

        public init (
            filteredStatus: SesV2ClientTypes.SubscriptionStatus? = nil,
            topicFilter: SesV2ClientTypes.TopicFilter? = nil
        )
        {
            self.filteredStatus = filteredStatus
            self.topicFilter = topicFilter
        }
    }

}

public struct ListContactsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListContactsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListContactsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListContactsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListContactsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListContactsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListContactsOutputError>
}

extension ListContactsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListContactsInput(contactListName: \(Swift.String(describing: contactListName)), filter: \(Swift.String(describing: filter)), nextToken: \(Swift.String(describing: nextToken)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListContactsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
    }
}

public struct ListContactsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListContactsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListContactsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListContactsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListContactsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListContactsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListContactsOutputError>
}

public struct ListContactsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListContactsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListContactsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListContactsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListContactsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListContactsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListContactsOutputError>
}

public struct ListContactsInput: Swift.Equatable {
    /// The name of the contact list.
    /// This member is required.
    public let contactListName: Swift.String?
    /// A filter that can be applied to a list of contacts.
    public let filter: SesV2ClientTypes.ListContactsFilter?
    /// A string token indicating that there might be additional contacts available to be
    ///             listed. Use the token provided in the Response to use in the subsequent call to
    ///             ListContacts with the same parameters to retrieve the next page of contacts.
    public let nextToken: Swift.String?
    /// The number of contacts that may be returned at once, which is dependent on if there
    ///             are more or less contacts than the value of the PageSize. Use this parameter to
    ///             paginate results. If additional contacts exist beyond the specified limit, the
    ///                 NextToken element is sent in the response. Use the
    ///                 NextToken value in subsequent requests to retrieve additional
    ///             contacts.
    public let pageSize: Swift.Int?

    public init (
        contactListName: Swift.String? = nil,
        filter: SesV2ClientTypes.ListContactsFilter? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.contactListName = contactListName
        self.filter = filter
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListContactsInputBody: Swift.Equatable {
    public let filter: SesV2ClientTypes.ListContactsFilter?
}

extension ListContactsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ListContactsFilter.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension ListContactsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListContactsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListContactsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListContactsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListContactsOutputResponse(contacts: \(Swift.String(describing: contacts)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListContactsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListContactsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contacts = output.contacts
            self.nextToken = output.nextToken
        } else {
            self.contacts = nil
            self.nextToken = nil
        }
    }
}

public struct ListContactsOutputResponse: Swift.Equatable {
    /// The contacts present in a specific contact list.
    public let contacts: [SesV2ClientTypes.Contact]?
    /// A string token indicating that there might be additional contacts available to be
    ///             listed. Copy this token to a subsequent call to ListContacts with the same
    ///             parameters to retrieve the next page of contacts.
    public let nextToken: Swift.String?

    public init (
        contacts: [SesV2ClientTypes.Contact]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.contacts = contacts
        self.nextToken = nextToken
    }
}

struct ListContactsOutputResponseBody: Swift.Equatable {
    public let contacts: [SesV2ClientTypes.Contact]?
    public let nextToken: Swift.String?
}

extension ListContactsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contacts = "Contacts"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Contact?].self, forKey: .contacts)
        var contactsDecoded0:[SesV2ClientTypes.Contact]? = nil
        if let contactsContainer = contactsContainer {
            contactsDecoded0 = [SesV2ClientTypes.Contact]()
            for structure0 in contactsContainer {
                if let structure0 = structure0 {
                    contactsDecoded0?.append(structure0)
                }
            }
        }
        contacts = contactsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListCustomVerificationEmailTemplatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCustomVerificationEmailTemplatesInput(nextToken: \(Swift.String(describing: nextToken)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListCustomVerificationEmailTemplatesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListCustomVerificationEmailTemplatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCustomVerificationEmailTemplatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCustomVerificationEmailTemplatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCustomVerificationEmailTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCustomVerificationEmailTemplatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCustomVerificationEmailTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCustomVerificationEmailTemplatesOutputError>
}

public struct ListCustomVerificationEmailTemplatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCustomVerificationEmailTemplatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCustomVerificationEmailTemplatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCustomVerificationEmailTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCustomVerificationEmailTemplatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCustomVerificationEmailTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCustomVerificationEmailTemplatesOutputError>
}

/// Represents a request to list the existing custom verification email templates for your
///             account.
public struct ListCustomVerificationEmailTemplatesInput: Swift.Equatable {
    /// A token returned from a previous call to
    ///                 ListCustomVerificationEmailTemplates to indicate the position in the
    ///             list of custom verification email templates.
    public let nextToken: Swift.String?
    /// The number of results to show in a single call to
    ///                 ListCustomVerificationEmailTemplates. If the number of results is
    ///             larger than the number you specified in this parameter, then the response includes a
    ///                 NextToken element, which you can use to obtain additional
    ///             results.
    ///         The value you specify has to be at least 1, and can be no more than 50.
    public let pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListCustomVerificationEmailTemplatesInputBody: Swift.Equatable {
}

extension ListCustomVerificationEmailTemplatesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListCustomVerificationEmailTemplatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCustomVerificationEmailTemplatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCustomVerificationEmailTemplatesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCustomVerificationEmailTemplatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCustomVerificationEmailTemplatesOutputResponse(customVerificationEmailTemplates: \(Swift.String(describing: customVerificationEmailTemplates)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListCustomVerificationEmailTemplatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCustomVerificationEmailTemplatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.customVerificationEmailTemplates = output.customVerificationEmailTemplates
            self.nextToken = output.nextToken
        } else {
            self.customVerificationEmailTemplates = nil
            self.nextToken = nil
        }
    }
}

/// The following elements are returned by the service.
public struct ListCustomVerificationEmailTemplatesOutputResponse: Swift.Equatable {
    /// A list of the custom verification email templates that exist in your account.
    public let customVerificationEmailTemplates: [SesV2ClientTypes.CustomVerificationEmailTemplateMetadata]?
    /// A token indicating that there are additional custom verification email templates
    ///             available to be listed. Pass this token to a subsequent call to
    ///                 ListCustomVerificationEmailTemplates to retrieve the next 50 custom
    ///             verification email templates.
    public let nextToken: Swift.String?

    public init (
        customVerificationEmailTemplates: [SesV2ClientTypes.CustomVerificationEmailTemplateMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.customVerificationEmailTemplates = customVerificationEmailTemplates
        self.nextToken = nextToken
    }
}

struct ListCustomVerificationEmailTemplatesOutputResponseBody: Swift.Equatable {
    public let customVerificationEmailTemplates: [SesV2ClientTypes.CustomVerificationEmailTemplateMetadata]?
    public let nextToken: Swift.String?
}

extension ListCustomVerificationEmailTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customVerificationEmailTemplates = "CustomVerificationEmailTemplates"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customVerificationEmailTemplatesContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.CustomVerificationEmailTemplateMetadata?].self, forKey: .customVerificationEmailTemplates)
        var customVerificationEmailTemplatesDecoded0:[SesV2ClientTypes.CustomVerificationEmailTemplateMetadata]? = nil
        if let customVerificationEmailTemplatesContainer = customVerificationEmailTemplatesContainer {
            customVerificationEmailTemplatesDecoded0 = [SesV2ClientTypes.CustomVerificationEmailTemplateMetadata]()
            for structure0 in customVerificationEmailTemplatesContainer {
                if let structure0 = structure0 {
                    customVerificationEmailTemplatesDecoded0?.append(structure0)
                }
            }
        }
        customVerificationEmailTemplates = customVerificationEmailTemplatesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDedicatedIpPoolsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDedicatedIpPoolsInput(nextToken: \(Swift.String(describing: nextToken)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListDedicatedIpPoolsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListDedicatedIpPoolsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDedicatedIpPoolsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDedicatedIpPoolsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDedicatedIpPoolsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDedicatedIpPoolsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDedicatedIpPoolsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDedicatedIpPoolsOutputError>
}

public struct ListDedicatedIpPoolsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDedicatedIpPoolsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDedicatedIpPoolsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDedicatedIpPoolsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDedicatedIpPoolsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDedicatedIpPoolsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDedicatedIpPoolsOutputError>
}

/// A request to obtain a list of dedicated IP pools.
public struct ListDedicatedIpPoolsInput: Swift.Equatable {
    /// A token returned from a previous call to ListDedicatedIpPools to indicate
    ///             the position in the list of dedicated IP pools.
    public let nextToken: Swift.String?
    /// The number of results to show in a single call to ListDedicatedIpPools.
    ///             If the number of results is larger than the number you specified in this parameter, then
    ///             the response includes a NextToken element, which you can use to obtain
    ///             additional results.
    public let pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListDedicatedIpPoolsInputBody: Swift.Equatable {
}

extension ListDedicatedIpPoolsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDedicatedIpPoolsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDedicatedIpPoolsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDedicatedIpPoolsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDedicatedIpPoolsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDedicatedIpPoolsOutputResponse(dedicatedIpPools: \(Swift.String(describing: dedicatedIpPools)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListDedicatedIpPoolsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDedicatedIpPoolsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dedicatedIpPools = output.dedicatedIpPools
            self.nextToken = output.nextToken
        } else {
            self.dedicatedIpPools = nil
            self.nextToken = nil
        }
    }
}

/// A list of dedicated IP pools.
public struct ListDedicatedIpPoolsOutputResponse: Swift.Equatable {
    /// A list of all of the dedicated IP pools that are associated with your AWS account in
    ///             the current Region.
    public let dedicatedIpPools: [Swift.String]?
    /// A token that indicates that there are additional IP pools to list. To view additional
    ///             IP pools, issue another request to ListDedicatedIpPools, passing this token
    ///             in the NextToken parameter.
    public let nextToken: Swift.String?

    public init (
        dedicatedIpPools: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dedicatedIpPools = dedicatedIpPools
        self.nextToken = nextToken
    }
}

struct ListDedicatedIpPoolsOutputResponseBody: Swift.Equatable {
    public let dedicatedIpPools: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListDedicatedIpPoolsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedIpPools = "DedicatedIpPools"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dedicatedIpPoolsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dedicatedIpPools)
        var dedicatedIpPoolsDecoded0:[Swift.String]? = nil
        if let dedicatedIpPoolsContainer = dedicatedIpPoolsContainer {
            dedicatedIpPoolsDecoded0 = [Swift.String]()
            for string0 in dedicatedIpPoolsContainer {
                if let string0 = string0 {
                    dedicatedIpPoolsDecoded0?.append(string0)
                }
            }
        }
        dedicatedIpPools = dedicatedIpPoolsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeliverabilityTestReportsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDeliverabilityTestReportsInput(nextToken: \(Swift.String(describing: nextToken)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListDeliverabilityTestReportsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListDeliverabilityTestReportsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDeliverabilityTestReportsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDeliverabilityTestReportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDeliverabilityTestReportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDeliverabilityTestReportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDeliverabilityTestReportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDeliverabilityTestReportsOutputError>
}

public struct ListDeliverabilityTestReportsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDeliverabilityTestReportsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDeliverabilityTestReportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDeliverabilityTestReportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDeliverabilityTestReportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDeliverabilityTestReportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDeliverabilityTestReportsOutputError>
}

/// A request to list all of the predictive inbox placement tests that you've performed.
public struct ListDeliverabilityTestReportsInput: Swift.Equatable {
    /// A token returned from a previous call to ListDeliverabilityTestReports to
    ///             indicate the position in the list of predictive inbox placement tests.
    public let nextToken: Swift.String?
    /// The number of results to show in a single call to
    ///                 ListDeliverabilityTestReports. If the number of results is larger than
    ///             the number you specified in this parameter, then the response includes a
    ///                 NextToken element, which you can use to obtain additional
    ///             results.
    ///         The value you specify has to be at least 0, and can be no more than 1000.
    public let pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListDeliverabilityTestReportsInputBody: Swift.Equatable {
}

extension ListDeliverabilityTestReportsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDeliverabilityTestReportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeliverabilityTestReportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDeliverabilityTestReportsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeliverabilityTestReportsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDeliverabilityTestReportsOutputResponse(deliverabilityTestReports: \(Swift.String(describing: deliverabilityTestReports)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListDeliverabilityTestReportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDeliverabilityTestReportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deliverabilityTestReports = output.deliverabilityTestReports
            self.nextToken = output.nextToken
        } else {
            self.deliverabilityTestReports = nil
            self.nextToken = nil
        }
    }
}

/// A list of the predictive inbox placement test reports that are available for your account, regardless of
///             whether or not those tests are complete.
public struct ListDeliverabilityTestReportsOutputResponse: Swift.Equatable {
    /// An object that contains a lists of predictive inbox placement tests that you've performed.
    /// This member is required.
    public let deliverabilityTestReports: [SesV2ClientTypes.DeliverabilityTestReport]?
    /// A token that indicates that there are additional predictive inbox placement tests to list. To view additional
    ///             predictive inbox placement tests, issue another request to ListDeliverabilityTestReports, and pass
    ///             this token in the NextToken parameter.
    public let nextToken: Swift.String?

    public init (
        deliverabilityTestReports: [SesV2ClientTypes.DeliverabilityTestReport]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deliverabilityTestReports = deliverabilityTestReports
        self.nextToken = nextToken
    }
}

struct ListDeliverabilityTestReportsOutputResponseBody: Swift.Equatable {
    public let deliverabilityTestReports: [SesV2ClientTypes.DeliverabilityTestReport]?
    public let nextToken: Swift.String?
}

extension ListDeliverabilityTestReportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliverabilityTestReports = "DeliverabilityTestReports"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliverabilityTestReportsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.DeliverabilityTestReport?].self, forKey: .deliverabilityTestReports)
        var deliverabilityTestReportsDecoded0:[SesV2ClientTypes.DeliverabilityTestReport]? = nil
        if let deliverabilityTestReportsContainer = deliverabilityTestReportsContainer {
            deliverabilityTestReportsDecoded0 = [SesV2ClientTypes.DeliverabilityTestReport]()
            for structure0 in deliverabilityTestReportsContainer {
                if let structure0 = structure0 {
                    deliverabilityTestReportsDecoded0?.append(structure0)
                }
            }
        }
        deliverabilityTestReports = deliverabilityTestReportsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDomainDeliverabilityCampaignsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDomainDeliverabilityCampaignsInput(endDate: \(Swift.String(describing: endDate)), nextToken: \(Swift.String(describing: nextToken)), pageSize: \(Swift.String(describing: pageSize)), startDate: \(Swift.String(describing: startDate)), subscribedDomain: \(Swift.String(describing: subscribedDomain)))"}
}

extension ListDomainDeliverabilityCampaignsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListDomainDeliverabilityCampaignsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDomainDeliverabilityCampaignsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDomainDeliverabilityCampaignsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDomainDeliverabilityCampaignsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDomainDeliverabilityCampaignsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDomainDeliverabilityCampaignsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDomainDeliverabilityCampaignsOutputError>
}

public struct ListDomainDeliverabilityCampaignsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDomainDeliverabilityCampaignsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDomainDeliverabilityCampaignsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDomainDeliverabilityCampaignsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let startDate = input.operationInput.startDate {
            let startDateQueryItem = ClientRuntime.URLQueryItem(name: "StartDate".urlPercentEncoding(), value: Swift.String(startDate.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(startDateQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        if let endDate = input.operationInput.endDate {
            let endDateQueryItem = ClientRuntime.URLQueryItem(name: "EndDate".urlPercentEncoding(), value: Swift.String(endDate.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(endDateQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDomainDeliverabilityCampaignsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDomainDeliverabilityCampaignsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDomainDeliverabilityCampaignsOutputError>
}

/// Retrieve deliverability data for all the campaigns that used a specific domain to send
///             email during a specified time range. This data is available for a domain only if you
///             enabled the Deliverability dashboard.
public struct ListDomainDeliverabilityCampaignsInput: Swift.Equatable {
    /// The last day, in Unix time format, that you want to obtain deliverability data for.
    ///             This value has to be less than or equal to 30 days after the value of the
    ///                 StartDate parameter.
    /// This member is required.
    public let endDate: ClientRuntime.Date?
    /// A token that’s returned from a previous call to the
    ///                 ListDomainDeliverabilityCampaigns operation. This token indicates the
    ///             position of a campaign in the list of campaigns.
    public let nextToken: Swift.String?
    /// The maximum number of results to include in response to a single call to the
    ///                 ListDomainDeliverabilityCampaigns operation. If the number of results
    ///             is larger than the number that you specify in this parameter, the response includes a
    ///                 NextToken element, which you can use to obtain additional
    ///             results.
    public let pageSize: Swift.Int?
    /// The first day, in Unix time format, that you want to obtain deliverability data
    ///             for.
    /// This member is required.
    public let startDate: ClientRuntime.Date?
    /// The domain to obtain deliverability data for.
    /// This member is required.
    public let subscribedDomain: Swift.String?

    public init (
        endDate: ClientRuntime.Date? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        startDate: ClientRuntime.Date? = nil,
        subscribedDomain: Swift.String? = nil
    )
    {
        self.endDate = endDate
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.startDate = startDate
        self.subscribedDomain = subscribedDomain
    }
}

struct ListDomainDeliverabilityCampaignsInputBody: Swift.Equatable {
}

extension ListDomainDeliverabilityCampaignsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDomainDeliverabilityCampaignsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDomainDeliverabilityCampaignsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDomainDeliverabilityCampaignsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDomainDeliverabilityCampaignsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDomainDeliverabilityCampaignsOutputResponse(domainDeliverabilityCampaigns: \(Swift.String(describing: domainDeliverabilityCampaigns)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListDomainDeliverabilityCampaignsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDomainDeliverabilityCampaignsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainDeliverabilityCampaigns = output.domainDeliverabilityCampaigns
            self.nextToken = output.nextToken
        } else {
            self.domainDeliverabilityCampaigns = nil
            self.nextToken = nil
        }
    }
}

/// An array of objects that provide deliverability data for all the campaigns that used a
///             specific domain to send email during a specified time range. This data is available for
///             a domain only if you enabled the Deliverability dashboard for the domain.
public struct ListDomainDeliverabilityCampaignsOutputResponse: Swift.Equatable {
    /// An array of responses, one for each campaign that used the domain to send email during
    ///             the specified time range.
    /// This member is required.
    public let domainDeliverabilityCampaigns: [SesV2ClientTypes.DomainDeliverabilityCampaign]?
    /// A token that’s returned from a previous call to the
    ///                 ListDomainDeliverabilityCampaigns operation. This token indicates the
    ///             position of the campaign in the list of campaigns.
    public let nextToken: Swift.String?

    public init (
        domainDeliverabilityCampaigns: [SesV2ClientTypes.DomainDeliverabilityCampaign]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainDeliverabilityCampaigns = domainDeliverabilityCampaigns
        self.nextToken = nextToken
    }
}

struct ListDomainDeliverabilityCampaignsOutputResponseBody: Swift.Equatable {
    public let domainDeliverabilityCampaigns: [SesV2ClientTypes.DomainDeliverabilityCampaign]?
    public let nextToken: Swift.String?
}

extension ListDomainDeliverabilityCampaignsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainDeliverabilityCampaigns = "DomainDeliverabilityCampaigns"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDeliverabilityCampaignsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.DomainDeliverabilityCampaign?].self, forKey: .domainDeliverabilityCampaigns)
        var domainDeliverabilityCampaignsDecoded0:[SesV2ClientTypes.DomainDeliverabilityCampaign]? = nil
        if let domainDeliverabilityCampaignsContainer = domainDeliverabilityCampaignsContainer {
            domainDeliverabilityCampaignsDecoded0 = [SesV2ClientTypes.DomainDeliverabilityCampaign]()
            for structure0 in domainDeliverabilityCampaignsContainer {
                if let structure0 = structure0 {
                    domainDeliverabilityCampaignsDecoded0?.append(structure0)
                }
            }
        }
        domainDeliverabilityCampaigns = domainDeliverabilityCampaignsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListEmailIdentitiesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListEmailIdentitiesInput(nextToken: \(Swift.String(describing: nextToken)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListEmailIdentitiesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListEmailIdentitiesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListEmailIdentitiesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListEmailIdentitiesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListEmailIdentitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListEmailIdentitiesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListEmailIdentitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListEmailIdentitiesOutputError>
}

public struct ListEmailIdentitiesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListEmailIdentitiesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListEmailIdentitiesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListEmailIdentitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListEmailIdentitiesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListEmailIdentitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListEmailIdentitiesOutputError>
}

/// A request to list all of the email identities associated with your AWS account. This
///             list includes identities that you've already verified, identities that are unverified,
///             and identities that were verified in the past, but are no longer verified.
public struct ListEmailIdentitiesInput: Swift.Equatable {
    /// A token returned from a previous call to ListEmailIdentities to indicate
    ///             the position in the list of identities.
    public let nextToken: Swift.String?
    /// The number of results to show in a single call to ListEmailIdentities. If
    ///             the number of results is larger than the number you specified in this parameter, then
    ///             the response includes a NextToken element, which you can use to obtain
    ///             additional results.
    ///         The value you specify has to be at least 0, and can be no more than 1000.
    public let pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListEmailIdentitiesInputBody: Swift.Equatable {
}

extension ListEmailIdentitiesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListEmailIdentitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEmailIdentitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListEmailIdentitiesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEmailIdentitiesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListEmailIdentitiesOutputResponse(emailIdentities: \(Swift.String(describing: emailIdentities)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListEmailIdentitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListEmailIdentitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.emailIdentities = output.emailIdentities
            self.nextToken = output.nextToken
        } else {
            self.emailIdentities = nil
            self.nextToken = nil
        }
    }
}

/// A list of all of the identities that you've attempted to verify, regardless of whether
///             or not those identities were successfully verified.
public struct ListEmailIdentitiesOutputResponse: Swift.Equatable {
    /// An array that includes all of the email identities associated with your AWS
    ///             account.
    public let emailIdentities: [SesV2ClientTypes.IdentityInfo]?
    /// A token that indicates that there are additional configuration sets to list. To view
    ///             additional configuration sets, issue another request to
    ///             ListEmailIdentities, and pass this token in the NextToken
    ///             parameter.
    public let nextToken: Swift.String?

    public init (
        emailIdentities: [SesV2ClientTypes.IdentityInfo]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.emailIdentities = emailIdentities
        self.nextToken = nextToken
    }
}

struct ListEmailIdentitiesOutputResponseBody: Swift.Equatable {
    public let emailIdentities: [SesV2ClientTypes.IdentityInfo]?
    public let nextToken: Swift.String?
}

extension ListEmailIdentitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailIdentities = "EmailIdentities"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailIdentitiesContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.IdentityInfo?].self, forKey: .emailIdentities)
        var emailIdentitiesDecoded0:[SesV2ClientTypes.IdentityInfo]? = nil
        if let emailIdentitiesContainer = emailIdentitiesContainer {
            emailIdentitiesDecoded0 = [SesV2ClientTypes.IdentityInfo]()
            for structure0 in emailIdentitiesContainer {
                if let structure0 = structure0 {
                    emailIdentitiesDecoded0?.append(structure0)
                }
            }
        }
        emailIdentities = emailIdentitiesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListEmailTemplatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListEmailTemplatesInput(nextToken: \(Swift.String(describing: nextToken)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListEmailTemplatesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListEmailTemplatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListEmailTemplatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListEmailTemplatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListEmailTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListEmailTemplatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListEmailTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListEmailTemplatesOutputError>
}

public struct ListEmailTemplatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListEmailTemplatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListEmailTemplatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListEmailTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListEmailTemplatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListEmailTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListEmailTemplatesOutputError>
}

/// Represents a request to list the email templates present in your Amazon SES account in the
///             current AWS Region. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
///                 Guide.
public struct ListEmailTemplatesInput: Swift.Equatable {
    /// A token returned from a previous call to ListEmailTemplates to indicate
    ///             the position in the list of email templates.
    public let nextToken: Swift.String?
    /// The number of results to show in a single call to ListEmailTemplates. If the number of
    ///             results is larger than the number you specified in this parameter, then the response
    ///             includes a NextToken element, which you can use to obtain additional results.
    ///         The value you specify has to be at least 1, and can be no more than 10.
    public let pageSize: Swift.Int?

    public init (
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListEmailTemplatesInputBody: Swift.Equatable {
}

extension ListEmailTemplatesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListEmailTemplatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEmailTemplatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListEmailTemplatesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEmailTemplatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListEmailTemplatesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), templatesMetadata: \(Swift.String(describing: templatesMetadata)))"}
}

extension ListEmailTemplatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListEmailTemplatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.templatesMetadata = output.templatesMetadata
        } else {
            self.nextToken = nil
            self.templatesMetadata = nil
        }
    }
}

/// The following elements are returned by the service.
public struct ListEmailTemplatesOutputResponse: Swift.Equatable {
    /// A token indicating that there are additional email templates available to be listed.
    ///             Pass this token to a subsequent ListEmailTemplates call to retrieve the
    ///             next 10 email templates.
    public let nextToken: Swift.String?
    /// An array the contains the name and creation time stamp for each template in your Amazon SES
    ///             account.
    public let templatesMetadata: [SesV2ClientTypes.EmailTemplateMetadata]?

    public init (
        nextToken: Swift.String? = nil,
        templatesMetadata: [SesV2ClientTypes.EmailTemplateMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.templatesMetadata = templatesMetadata
    }
}

struct ListEmailTemplatesOutputResponseBody: Swift.Equatable {
    public let templatesMetadata: [SesV2ClientTypes.EmailTemplateMetadata]?
    public let nextToken: Swift.String?
}

extension ListEmailTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case templatesMetadata = "TemplatesMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templatesMetadataContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.EmailTemplateMetadata?].self, forKey: .templatesMetadata)
        var templatesMetadataDecoded0:[SesV2ClientTypes.EmailTemplateMetadata]? = nil
        if let templatesMetadataContainer = templatesMetadataContainer {
            templatesMetadataDecoded0 = [SesV2ClientTypes.EmailTemplateMetadata]()
            for structure0 in templatesMetadataContainer {
                if let structure0 = structure0 {
                    templatesMetadataDecoded0?.append(structure0)
                }
            }
        }
        templatesMetadata = templatesMetadataDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListImportJobsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListImportJobsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListImportJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListImportJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListImportJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListImportJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListImportJobsOutputError>
}

extension ListImportJobsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListImportJobsInput(importDestinationType: \(Swift.String(describing: importDestinationType)), nextToken: \(Swift.String(describing: nextToken)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListImportJobsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importDestinationType = "ImportDestinationType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let importDestinationType = importDestinationType {
            try encodeContainer.encode(importDestinationType.rawValue, forKey: .importDestinationType)
        }
    }
}

public struct ListImportJobsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListImportJobsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListImportJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListImportJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListImportJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListImportJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListImportJobsOutputError>
}

public struct ListImportJobsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListImportJobsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListImportJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListImportJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListImportJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListImportJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListImportJobsOutputError>
}

/// Represents a request to list all of the import jobs for a data destination within the
///             specified maximum number of import jobs.
public struct ListImportJobsInput: Swift.Equatable {
    /// The destination of the import job, which can be used to list import jobs that have a
    ///             certain ImportDestinationType.
    public let importDestinationType: SesV2ClientTypes.ImportDestinationType?
    /// A string token indicating that there might be additional import jobs available to be
    ///             listed. Copy this token to a subsequent call to ListImportJobs with the
    ///             same parameters to retrieve the next page of import jobs.
    public let nextToken: Swift.String?
    /// Maximum number of import jobs to return at once. Use this parameter to paginate
    ///             results. If additional import jobs exist beyond the specified limit, the
    ///                 NextToken element is sent in the response. Use the
    ///                 NextToken value in subsequent requests to retrieve additional
    ///             addresses.
    public let pageSize: Swift.Int?

    public init (
        importDestinationType: SesV2ClientTypes.ImportDestinationType? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.importDestinationType = importDestinationType
        self.nextToken = nextToken
        self.pageSize = pageSize
    }
}

struct ListImportJobsInputBody: Swift.Equatable {
    public let importDestinationType: SesV2ClientTypes.ImportDestinationType?
}

extension ListImportJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importDestinationType = "ImportDestinationType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importDestinationTypeDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ImportDestinationType.self, forKey: .importDestinationType)
        importDestinationType = importDestinationTypeDecoded
    }
}

extension ListImportJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListImportJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListImportJobsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListImportJobsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListImportJobsOutputResponse(importJobs: \(Swift.String(describing: importJobs)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListImportJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListImportJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.importJobs = output.importJobs
            self.nextToken = output.nextToken
        } else {
            self.importJobs = nil
            self.nextToken = nil
        }
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct ListImportJobsOutputResponse: Swift.Equatable {
    /// A list of the import job summaries.
    public let importJobs: [SesV2ClientTypes.ImportJobSummary]?
    /// A string token indicating that there might be additional import jobs available to be
    ///             listed. Copy this token to a subsequent call to ListImportJobs with the
    ///             same parameters to retrieve the next page of import jobs.
    public let nextToken: Swift.String?

    public init (
        importJobs: [SesV2ClientTypes.ImportJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.importJobs = importJobs
        self.nextToken = nextToken
    }
}

struct ListImportJobsOutputResponseBody: Swift.Equatable {
    public let importJobs: [SesV2ClientTypes.ImportJobSummary]?
    public let nextToken: Swift.String?
}

extension ListImportJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case importJobs = "ImportJobs"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importJobsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.ImportJobSummary?].self, forKey: .importJobs)
        var importJobsDecoded0:[SesV2ClientTypes.ImportJobSummary]? = nil
        if let importJobsContainer = importJobsContainer {
            importJobsDecoded0 = [SesV2ClientTypes.ImportJobSummary]()
            for structure0 in importJobsContainer {
                if let structure0 = structure0 {
                    importJobsDecoded0?.append(structure0)
                }
            }
        }
        importJobs = importJobsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SesV2ClientTypes.ListManagementOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactListName = "ContactListName"
        case topicName = "TopicName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactListName = contactListName {
            try encodeContainer.encode(contactListName, forKey: .contactListName)
        }
        if let topicName = topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactListName)
        contactListName = contactListNameDecoded
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
    }
}

extension SesV2ClientTypes.ListManagementOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListManagementOptions(contactListName: \(Swift.String(describing: contactListName)), topicName: \(Swift.String(describing: topicName)))"}
}

extension SesV2ClientTypes {
    /// An object used to specify a list or topic to which an email belongs, which will be
    ///             used when a contact chooses to unsubscribe.
    public struct ListManagementOptions: Swift.Equatable {
        /// The name of the contact list.
        /// This member is required.
        public let contactListName: Swift.String?
        /// The name of the topic.
        public let topicName: Swift.String?

        public init (
            contactListName: Swift.String? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.contactListName = contactListName
            self.topicName = topicName
        }
    }

}

extension ListSuppressedDestinationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSuppressedDestinationsInput(endDate: \(Swift.String(describing: endDate)), nextToken: \(Swift.String(describing: nextToken)), pageSize: \(Swift.String(describing: pageSize)), reasons: \(Swift.String(describing: reasons)), startDate: \(Swift.String(describing: startDate)))"}
}

extension ListSuppressedDestinationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListSuppressedDestinationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSuppressedDestinationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSuppressedDestinationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSuppressedDestinationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSuppressedDestinationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSuppressedDestinationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSuppressedDestinationsOutputError>
}

public struct ListSuppressedDestinationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSuppressedDestinationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSuppressedDestinationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSuppressedDestinationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let startDate = input.operationInput.startDate {
            let startDateQueryItem = ClientRuntime.URLQueryItem(name: "StartDate".urlPercentEncoding(), value: Swift.String(startDate.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(startDateQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "PageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        if let reasons = input.operationInput.reasons {
            reasons.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "Reason".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        if let endDate = input.operationInput.endDate {
            let endDateQueryItem = ClientRuntime.URLQueryItem(name: "EndDate".urlPercentEncoding(), value: Swift.String(endDate.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(endDateQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSuppressedDestinationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSuppressedDestinationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSuppressedDestinationsOutputError>
}

/// A request to obtain a list of email destinations that are on the suppression list for
///             your account.
public struct ListSuppressedDestinationsInput: Swift.Equatable {
    /// Used to filter the list of suppressed email destinations so that it only includes
    ///             addresses that were added to the list before a specific date. The date that you specify
    ///             should be in Unix time format.
    public let endDate: ClientRuntime.Date?
    /// A token returned from a previous call to ListSuppressedDestinations to
    ///             indicate the position in the list of suppressed email addresses.
    public let nextToken: Swift.String?
    /// The number of results to show in a single call to
    ///                 ListSuppressedDestinations. If the number of results is larger than the
    ///             number you specified in this parameter, then the response includes a
    ///                 NextToken element, which you can use to obtain additional
    ///             results.
    public let pageSize: Swift.Int?
    /// The factors that caused the email address to be added to .
    public let reasons: [SesV2ClientTypes.SuppressionListReason]?
    /// Used to filter the list of suppressed email destinations so that it only includes
    ///             addresses that were added to the list after a specific date. The date that you specify
    ///             should be in Unix time format.
    public let startDate: ClientRuntime.Date?

    public init (
        endDate: ClientRuntime.Date? = nil,
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        reasons: [SesV2ClientTypes.SuppressionListReason]? = nil,
        startDate: ClientRuntime.Date? = nil
    )
    {
        self.endDate = endDate
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.reasons = reasons
        self.startDate = startDate
    }
}

struct ListSuppressedDestinationsInputBody: Swift.Equatable {
}

extension ListSuppressedDestinationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListSuppressedDestinationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSuppressedDestinationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSuppressedDestinationsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case invalidNextTokenException(InvalidNextTokenException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSuppressedDestinationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSuppressedDestinationsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), suppressedDestinationSummaries: \(Swift.String(describing: suppressedDestinationSummaries)))"}
}

extension ListSuppressedDestinationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSuppressedDestinationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.suppressedDestinationSummaries = output.suppressedDestinationSummaries
        } else {
            self.nextToken = nil
            self.suppressedDestinationSummaries = nil
        }
    }
}

/// A list of suppressed email addresses.
public struct ListSuppressedDestinationsOutputResponse: Swift.Equatable {
    /// A token that indicates that there are additional email addresses on the suppression
    ///             list for your account. To view additional suppressed addresses, issue another request to
    ///                 ListSuppressedDestinations, and pass this token in the
    ///                 NextToken parameter.
    public let nextToken: Swift.String?
    /// A list of summaries, each containing a summary for a suppressed email
    ///             destination.
    public let suppressedDestinationSummaries: [SesV2ClientTypes.SuppressedDestinationSummary]?

    public init (
        nextToken: Swift.String? = nil,
        suppressedDestinationSummaries: [SesV2ClientTypes.SuppressedDestinationSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.suppressedDestinationSummaries = suppressedDestinationSummaries
    }
}

struct ListSuppressedDestinationsOutputResponseBody: Swift.Equatable {
    public let suppressedDestinationSummaries: [SesV2ClientTypes.SuppressedDestinationSummary]?
    public let nextToken: Swift.String?
}

extension ListSuppressedDestinationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case suppressedDestinationSummaries = "SuppressedDestinationSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressedDestinationSummariesContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.SuppressedDestinationSummary?].self, forKey: .suppressedDestinationSummaries)
        var suppressedDestinationSummariesDecoded0:[SesV2ClientTypes.SuppressedDestinationSummary]? = nil
        if let suppressedDestinationSummariesContainer = suppressedDestinationSummariesContainer {
            suppressedDestinationSummariesDecoded0 = [SesV2ClientTypes.SuppressedDestinationSummary]()
            for structure0 in suppressedDestinationSummariesContainer {
                if let structure0 = structure0 {
                    suppressedDestinationSummariesDecoded0?.append(structure0)
                }
            }
        }
        suppressedDestinationSummaries = suppressedDestinationSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let resourceArn = input.operationInput.resourceArn {
            let resourceArnQueryItem = ClientRuntime.URLQueryItem(name: "ResourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
            input.builder.withQueryItem(resourceArnQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource that you want to retrieve tag
    ///             information for.
    /// This member is required.
    public let resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// An array that lists all the tags that are associated with the resource. Each tag
    ///             consists of a required tag key (Key) and an associated tag value
    ///                 (Value)
    /// This member is required.
    public let tags: [SesV2ClientTypes.Tag]?

    public init (
        tags: [SesV2ClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let tags: [SesV2ClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SesV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SesV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SesV2ClientTypes.MailFromAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorOnMxFailure = "BehaviorOnMxFailure"
        case mailFromDomain = "MailFromDomain"
        case mailFromDomainStatus = "MailFromDomainStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behaviorOnMxFailure = behaviorOnMxFailure {
            try encodeContainer.encode(behaviorOnMxFailure.rawValue, forKey: .behaviorOnMxFailure)
        }
        if let mailFromDomain = mailFromDomain {
            try encodeContainer.encode(mailFromDomain, forKey: .mailFromDomain)
        }
        if let mailFromDomainStatus = mailFromDomainStatus {
            try encodeContainer.encode(mailFromDomainStatus.rawValue, forKey: .mailFromDomainStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailFromDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mailFromDomain)
        mailFromDomain = mailFromDomainDecoded
        let mailFromDomainStatusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.MailFromDomainStatus.self, forKey: .mailFromDomainStatus)
        mailFromDomainStatus = mailFromDomainStatusDecoded
        let behaviorOnMxFailureDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.BehaviorOnMxFailure.self, forKey: .behaviorOnMxFailure)
        behaviorOnMxFailure = behaviorOnMxFailureDecoded
    }
}

extension SesV2ClientTypes.MailFromAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MailFromAttributes(behaviorOnMxFailure: \(Swift.String(describing: behaviorOnMxFailure)), mailFromDomain: \(Swift.String(describing: mailFromDomain)), mailFromDomainStatus: \(Swift.String(describing: mailFromDomainStatus)))"}
}

extension SesV2ClientTypes {
    /// A list of attributes that are associated with a MAIL FROM domain.
    public struct MailFromAttributes: Swift.Equatable {
        /// The action that you want to take if the required MX record can't be found when you
        ///             send an email. When you set this value to UseDefaultValue, the mail is sent
        ///             using amazonses.com as the MAIL FROM domain. When you set this
        ///             value to RejectMessage, the Amazon SES API v2 returns a
        ///                 MailFromDomainNotVerified error, and doesn't attempt to deliver the
        ///             email.
        ///         These behaviors are taken when the custom MAIL FROM domain configuration is in the
        ///                 Pending, Failed, and TemporaryFailure
        ///             states.
        /// This member is required.
        public let behaviorOnMxFailure: SesV2ClientTypes.BehaviorOnMxFailure?
        /// The name of a domain that an email identity uses as a custom MAIL FROM domain.
        /// This member is required.
        public let mailFromDomain: Swift.String?
        /// The status of the MAIL FROM domain. This status can have the following values:
        ///
        ///
        ///
        ///                   PENDING – Amazon SES hasn't started searching for the MX record
        ///                     yet.
        ///
        ///
        ///
        ///                   SUCCESS – Amazon SES detected the required MX record for the
        ///                     MAIL FROM domain.
        ///
        ///
        ///
        ///                   FAILED – Amazon SES can't find the required MX record, or the
        ///                     record no longer exists.
        ///
        ///
        ///
        ///                   TEMPORARY_FAILURE – A temporary issue occurred, which
        ///                     prevented Amazon SES from determining the status of the MAIL FROM domain.
        ///
        ///
        /// This member is required.
        public let mailFromDomainStatus: SesV2ClientTypes.MailFromDomainStatus?

        public init (
            behaviorOnMxFailure: SesV2ClientTypes.BehaviorOnMxFailure? = nil,
            mailFromDomain: Swift.String? = nil,
            mailFromDomainStatus: SesV2ClientTypes.MailFromDomainStatus? = nil
        )
        {
            self.behaviorOnMxFailure = behaviorOnMxFailure
            self.mailFromDomain = mailFromDomain
            self.mailFromDomainStatus = mailFromDomainStatus
        }
    }

}

extension MailFromDomainNotVerifiedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MailFromDomainNotVerifiedException(message: \(Swift.String(describing: message)))"}
}

extension MailFromDomainNotVerifiedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MailFromDomainNotVerifiedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The message can't be sent because the sending domain isn't verified.
public struct MailFromDomainNotVerifiedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MailFromDomainNotVerifiedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MailFromDomainNotVerifiedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesV2ClientTypes {
    /// The status of the MAIL FROM domain. This status can have the following values:
    ///
    ///
    ///
    ///                   PENDING – Amazon SES hasn't started searching for the MX record
    ///                     yet.
    ///
    ///
    ///
    ///                   SUCCESS – Amazon SES detected the required MX record for the
    ///                     MAIL FROM domain.
    ///
    ///
    ///
    ///                   FAILED – Amazon SES can't find the required MX record, or the
    ///                     record no longer exists.
    ///
    ///
    ///
    ///                   TEMPORARY_FAILURE – A temporary issue occurred, which
    ///                     prevented Amazon SES from determining the status of the MAIL FROM domain.
    ///
    ///
    public enum MailFromDomainStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pending
        case success
        case temporaryFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [MailFromDomainStatus] {
            return [
                .failed,
                .pending,
                .success,
                .temporaryFailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case .temporaryFailure: return "TEMPORARY_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MailFromDomainStatus(rawValue: rawValue) ?? MailFromDomainStatus.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes {
    public enum MailType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case marketing
        case transactional
        case sdkUnknown(Swift.String)

        public static var allCases: [MailType] {
            return [
                .marketing,
                .transactional,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .marketing: return "MARKETING"
            case .transactional: return "TRANSACTIONAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MailType(rawValue: rawValue) ?? MailType.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.Message: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case subject = "Subject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let subject = subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subjectDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.Content.self, forKey: .subject)
        subject = subjectDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.Body.self, forKey: .body)
        body = bodyDecoded
    }
}

extension SesV2ClientTypes.Message: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Message(body: \(Swift.String(describing: body)), subject: \(Swift.String(describing: subject)))"}
}

extension SesV2ClientTypes {
    /// Represents the email message that you're sending. The Message object
    ///             consists of a subject line and a message body.
    public struct Message: Swift.Equatable {
        /// The body of the message. You can specify an HTML version of the message, a text-only
        ///             version of the message, or both.
        /// This member is required.
        public let body: SesV2ClientTypes.Body?
        /// The subject line of the email. The subject line can only contain 7-bit ASCII
        ///             characters. However, you can specify non-ASCII characters in the subject line by using
        ///             encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047.
        /// This member is required.
        public let subject: SesV2ClientTypes.Content?

        public init (
            body: SesV2ClientTypes.Body? = nil,
            subject: SesV2ClientTypes.Content? = nil
        )
        {
            self.body = body
            self.subject = subject
        }
    }

}

extension MessageRejected: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MessageRejected(message: \(Swift.String(describing: message)))"}
}

extension MessageRejected {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MessageRejectedBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The message can't be sent because it contains invalid content.
public struct MessageRejected: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MessageRejectedBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MessageRejectedBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesV2ClientTypes.MessageTag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SesV2ClientTypes.MessageTag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MessageTag(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension SesV2ClientTypes {
    /// Contains the name and value of a tag that you apply to an email. You can use message
    ///             tags when you publish email sending events.
    ///
    public struct MessageTag: Swift.Equatable {
        /// The name of the message tag. The message tag name has to meet the following
        ///             criteria:
        ///
        ///
        ///                 It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
        ///                     underscores (_), or dashes (-).
        ///
        ///
        ///                 It can contain no more than 256 characters.
        ///
        ///
        /// This member is required.
        public let name: Swift.String?
        /// The value of the message tag. The message tag value has to meet the following
        ///             criteria:
        ///
        ///
        ///                 It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
        ///                     underscores (_), or dashes (-).
        ///
        ///
        ///                 It can contain no more than 256 characters.
        ///
        ///
        /// This member is required.
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension NotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotFoundException(message: \(Swift.String(describing: message)))"}
}

extension NotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource you attempted to access doesn't exist.
public struct NotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesV2ClientTypes.OverallVolume: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainIspPlacements = "DomainIspPlacements"
        case readRatePercent = "ReadRatePercent"
        case volumeStatistics = "VolumeStatistics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainIspPlacements = domainIspPlacements {
            var domainIspPlacementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainIspPlacements)
            for domainispplacements0 in domainIspPlacements {
                try domainIspPlacementsContainer.encode(domainispplacements0)
            }
        }
        if let readRatePercent = readRatePercent {
            try encodeContainer.encode(readRatePercent, forKey: .readRatePercent)
        }
        if let volumeStatistics = volumeStatistics {
            try encodeContainer.encode(volumeStatistics, forKey: .volumeStatistics)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeStatisticsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.VolumeStatistics.self, forKey: .volumeStatistics)
        volumeStatistics = volumeStatisticsDecoded
        let readRatePercentDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .readRatePercent)
        readRatePercent = readRatePercentDecoded
        let domainIspPlacementsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.DomainIspPlacement?].self, forKey: .domainIspPlacements)
        var domainIspPlacementsDecoded0:[SesV2ClientTypes.DomainIspPlacement]? = nil
        if let domainIspPlacementsContainer = domainIspPlacementsContainer {
            domainIspPlacementsDecoded0 = [SesV2ClientTypes.DomainIspPlacement]()
            for structure0 in domainIspPlacementsContainer {
                if let structure0 = structure0 {
                    domainIspPlacementsDecoded0?.append(structure0)
                }
            }
        }
        domainIspPlacements = domainIspPlacementsDecoded0
    }
}

extension SesV2ClientTypes.OverallVolume: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OverallVolume(domainIspPlacements: \(Swift.String(describing: domainIspPlacements)), readRatePercent: \(Swift.String(describing: readRatePercent)), volumeStatistics: \(Swift.String(describing: volumeStatistics)))"}
}

extension SesV2ClientTypes {
    /// An object that contains information about email that was sent from the selected
    ///             domain.
    public struct OverallVolume: Swift.Equatable {
        /// An object that contains inbox and junk mail placement metrics for individual email
        ///             providers.
        public let domainIspPlacements: [SesV2ClientTypes.DomainIspPlacement]?
        /// The percentage of emails that were sent from the domain that were read by their
        ///             recipients.
        public let readRatePercent: Swift.Double?
        /// An object that contains information about the numbers of messages that arrived in
        ///             recipients' inboxes and junk mail folders.
        public let volumeStatistics: SesV2ClientTypes.VolumeStatistics?

        public init (
            domainIspPlacements: [SesV2ClientTypes.DomainIspPlacement]? = nil,
            readRatePercent: Swift.Double? = nil,
            volumeStatistics: SesV2ClientTypes.VolumeStatistics? = nil
        )
        {
            self.domainIspPlacements = domainIspPlacements
            self.readRatePercent = readRatePercent
            self.volumeStatistics = volumeStatistics
        }
    }

}

extension SesV2ClientTypes.PinpointDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationArn = "ApplicationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationArn = applicationArn {
            try encodeContainer.encode(applicationArn, forKey: .applicationArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationArn)
        applicationArn = applicationArnDecoded
    }
}

extension SesV2ClientTypes.PinpointDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PinpointDestination(applicationArn: \(Swift.String(describing: applicationArn)))"}
}

extension SesV2ClientTypes {
    /// An object that defines an Amazon Pinpoint project destination for email events. You can send
    ///             email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging
    ///             dashboards that are built in to Amazon Pinpoint. For more information, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html">Transactional
    ///                 Messaging Charts in the Amazon Pinpoint User Guide.
    public struct PinpointDestination: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon Pinpoint project that you want to send email
        ///             events to.
        public let applicationArn: Swift.String?

        public init (
            applicationArn: Swift.String? = nil
        )
        {
            self.applicationArn = applicationArn
        }
    }

}

extension SesV2ClientTypes.PlacementStatistics: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimPercentage = "DkimPercentage"
        case inboxPercentage = "InboxPercentage"
        case missingPercentage = "MissingPercentage"
        case spamPercentage = "SpamPercentage"
        case spfPercentage = "SpfPercentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dkimPercentage = dkimPercentage {
            try encodeContainer.encode(dkimPercentage, forKey: .dkimPercentage)
        }
        if let inboxPercentage = inboxPercentage {
            try encodeContainer.encode(inboxPercentage, forKey: .inboxPercentage)
        }
        if let missingPercentage = missingPercentage {
            try encodeContainer.encode(missingPercentage, forKey: .missingPercentage)
        }
        if let spamPercentage = spamPercentage {
            try encodeContainer.encode(spamPercentage, forKey: .spamPercentage)
        }
        if let spfPercentage = spfPercentage {
            try encodeContainer.encode(spfPercentage, forKey: .spfPercentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inboxPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .inboxPercentage)
        inboxPercentage = inboxPercentageDecoded
        let spamPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .spamPercentage)
        spamPercentage = spamPercentageDecoded
        let missingPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .missingPercentage)
        missingPercentage = missingPercentageDecoded
        let spfPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .spfPercentage)
        spfPercentage = spfPercentageDecoded
        let dkimPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .dkimPercentage)
        dkimPercentage = dkimPercentageDecoded
    }
}

extension SesV2ClientTypes.PlacementStatistics: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PlacementStatistics(dkimPercentage: \(Swift.String(describing: dkimPercentage)), inboxPercentage: \(Swift.String(describing: inboxPercentage)), missingPercentage: \(Swift.String(describing: missingPercentage)), spamPercentage: \(Swift.String(describing: spamPercentage)), spfPercentage: \(Swift.String(describing: spfPercentage)))"}
}

extension SesV2ClientTypes {
    /// An object that contains inbox placement data for an email provider.
    public struct PlacementStatistics: Swift.Equatable {
        /// The percentage of emails that were authenticated by using DomainKeys Identified Mail
        ///             (DKIM) during the predictive inbox placement test.
        public let dkimPercentage: Swift.Double?
        /// The percentage of emails that arrived in recipients' inboxes during the predictive inbox placement test.
        public let inboxPercentage: Swift.Double?
        /// The percentage of emails that didn't arrive in recipients' inboxes at all during the
        ///             predictive inbox placement test.
        public let missingPercentage: Swift.Double?
        /// The percentage of emails that arrived in recipients' spam or junk mail folders during
        ///             the predictive inbox placement test.
        public let spamPercentage: Swift.Double?
        /// The percentage of emails that were authenticated by using Sender Policy Framework
        ///             (SPF) during the predictive inbox placement test.
        public let spfPercentage: Swift.Double?

        public init (
            dkimPercentage: Swift.Double? = nil,
            inboxPercentage: Swift.Double? = nil,
            missingPercentage: Swift.Double? = nil,
            spamPercentage: Swift.Double? = nil,
            spfPercentage: Swift.Double? = nil
        )
        {
            self.dkimPercentage = dkimPercentage
            self.inboxPercentage = inboxPercentage
            self.missingPercentage = missingPercentage
            self.spamPercentage = spamPercentage
            self.spfPercentage = spfPercentage
        }
    }

}

public struct PutAccountDedicatedIpWarmupAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountDedicatedIpWarmupAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountDedicatedIpWarmupAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountDedicatedIpWarmupAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountDedicatedIpWarmupAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountDedicatedIpWarmupAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountDedicatedIpWarmupAttributesOutputError>
}

extension PutAccountDedicatedIpWarmupAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAccountDedicatedIpWarmupAttributesInput(autoWarmupEnabled: \(Swift.String(describing: autoWarmupEnabled)))"}
}

extension PutAccountDedicatedIpWarmupAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoWarmupEnabled = "AutoWarmupEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if autoWarmupEnabled != false {
            try encodeContainer.encode(autoWarmupEnabled, forKey: .autoWarmupEnabled)
        }
    }
}

public struct PutAccountDedicatedIpWarmupAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountDedicatedIpWarmupAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountDedicatedIpWarmupAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountDedicatedIpWarmupAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountDedicatedIpWarmupAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountDedicatedIpWarmupAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountDedicatedIpWarmupAttributesOutputError>
}

public struct PutAccountDedicatedIpWarmupAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountDedicatedIpWarmupAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountDedicatedIpWarmupAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountDedicatedIpWarmupAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountDedicatedIpWarmupAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountDedicatedIpWarmupAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountDedicatedIpWarmupAttributesOutputError>
}

/// A request to enable or disable the automatic IP address warm-up feature.
public struct PutAccountDedicatedIpWarmupAttributesInput: Swift.Equatable {
    /// Enables or disables the automatic warm-up feature for dedicated IP addresses that are
    ///             associated with your Amazon SES account in the current AWS Region. Set to true
    ///             to enable the automatic warm-up feature, or set to false to disable
    ///             it.
    public let autoWarmupEnabled: Swift.Bool

    public init (
        autoWarmupEnabled: Swift.Bool = false
    )
    {
        self.autoWarmupEnabled = autoWarmupEnabled
    }
}

struct PutAccountDedicatedIpWarmupAttributesInputBody: Swift.Equatable {
    public let autoWarmupEnabled: Swift.Bool
}

extension PutAccountDedicatedIpWarmupAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoWarmupEnabled = "AutoWarmupEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoWarmupEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoWarmupEnabled)
        autoWarmupEnabled = autoWarmupEnabledDecoded
    }
}

extension PutAccountDedicatedIpWarmupAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAccountDedicatedIpWarmupAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutAccountDedicatedIpWarmupAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAccountDedicatedIpWarmupAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAccountDedicatedIpWarmupAttributesOutputResponse()"}
}

extension PutAccountDedicatedIpWarmupAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutAccountDedicatedIpWarmupAttributesOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutAccountDedicatedIpWarmupAttributesOutputResponseBody: Swift.Equatable {
}

extension PutAccountDedicatedIpWarmupAttributesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutAccountDetailsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountDetailsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountDetailsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountDetailsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountDetailsOutputError>
}

extension PutAccountDetailsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAccountDetailsInput(additionalContactEmailAddresses: \(Swift.String(describing: additionalContactEmailAddresses)), contactLanguage: \(Swift.String(describing: contactLanguage)), mailType: \(Swift.String(describing: mailType)), productionAccessEnabled: \(Swift.String(describing: productionAccessEnabled)), useCaseDescription: \(Swift.String(describing: useCaseDescription)), websiteURL: \(Swift.String(describing: websiteURL)))"}
}

extension PutAccountDetailsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalContactEmailAddresses = "AdditionalContactEmailAddresses"
        case contactLanguage = "ContactLanguage"
        case mailType = "MailType"
        case productionAccessEnabled = "ProductionAccessEnabled"
        case useCaseDescription = "UseCaseDescription"
        case websiteURL = "WebsiteURL"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalContactEmailAddresses = additionalContactEmailAddresses {
            var additionalContactEmailAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalContactEmailAddresses)
            for additionalcontactemailaddresses0 in additionalContactEmailAddresses {
                try additionalContactEmailAddressesContainer.encode(additionalcontactemailaddresses0)
            }
        }
        if let contactLanguage = contactLanguage {
            try encodeContainer.encode(contactLanguage.rawValue, forKey: .contactLanguage)
        }
        if let mailType = mailType {
            try encodeContainer.encode(mailType.rawValue, forKey: .mailType)
        }
        if let productionAccessEnabled = productionAccessEnabled {
            try encodeContainer.encode(productionAccessEnabled, forKey: .productionAccessEnabled)
        }
        if let useCaseDescription = useCaseDescription {
            try encodeContainer.encode(useCaseDescription, forKey: .useCaseDescription)
        }
        if let websiteURL = websiteURL {
            try encodeContainer.encode(websiteURL, forKey: .websiteURL)
        }
    }
}

public struct PutAccountDetailsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountDetailsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountDetailsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountDetailsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountDetailsOutputError>
}

public struct PutAccountDetailsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountDetailsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountDetailsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountDetailsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountDetailsOutputError>
}

/// A request to submit new account details.
public struct PutAccountDetailsInput: Swift.Equatable {
    /// Additional email addresses that you would like to be notified regarding Amazon SES
    ///             matters.
    public let additionalContactEmailAddresses: [Swift.String]?
    /// The language you would prefer to be contacted with.
    public let contactLanguage: SesV2ClientTypes.ContactLanguage?
    /// The type of email your account will send.
    /// This member is required.
    public let mailType: SesV2ClientTypes.MailType?
    /// Indicates whether or not your account should have production access in the current
    ///             AWS Region.
    ///         If the value is false, then your account is in the
    ///                 sandbox. When your account is in the sandbox, you can only send
    ///             email to verified identities. Additionally, the maximum number of emails you can send in
    ///             a 24-hour period (your sending quota) is 200, and the maximum number of emails you can
    ///             send per second (your maximum sending rate) is 1.
    ///         If the value is true, then your account has production access. When your
    ///             account has production access, you can send email to any address. The sending quota and
    ///             maximum sending rate for your account vary based on your specific use case.
    public let productionAccessEnabled: Swift.Bool?
    /// A description of the types of email that you plan to send.
    /// This member is required.
    public let useCaseDescription: Swift.String?
    /// The URL of your website. This information helps us better understand the type of
    ///             content that you plan to send.
    /// This member is required.
    public let websiteURL: Swift.String?

    public init (
        additionalContactEmailAddresses: [Swift.String]? = nil,
        contactLanguage: SesV2ClientTypes.ContactLanguage? = nil,
        mailType: SesV2ClientTypes.MailType? = nil,
        productionAccessEnabled: Swift.Bool? = nil,
        useCaseDescription: Swift.String? = nil,
        websiteURL: Swift.String? = nil
    )
    {
        self.additionalContactEmailAddresses = additionalContactEmailAddresses
        self.contactLanguage = contactLanguage
        self.mailType = mailType
        self.productionAccessEnabled = productionAccessEnabled
        self.useCaseDescription = useCaseDescription
        self.websiteURL = websiteURL
    }
}

struct PutAccountDetailsInputBody: Swift.Equatable {
    public let mailType: SesV2ClientTypes.MailType?
    public let websiteURL: Swift.String?
    public let contactLanguage: SesV2ClientTypes.ContactLanguage?
    public let useCaseDescription: Swift.String?
    public let additionalContactEmailAddresses: [Swift.String]?
    public let productionAccessEnabled: Swift.Bool?
}

extension PutAccountDetailsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalContactEmailAddresses = "AdditionalContactEmailAddresses"
        case contactLanguage = "ContactLanguage"
        case mailType = "MailType"
        case productionAccessEnabled = "ProductionAccessEnabled"
        case useCaseDescription = "UseCaseDescription"
        case websiteURL = "WebsiteURL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailTypeDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.MailType.self, forKey: .mailType)
        mailType = mailTypeDecoded
        let websiteURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .websiteURL)
        websiteURL = websiteURLDecoded
        let contactLanguageDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ContactLanguage.self, forKey: .contactLanguage)
        contactLanguage = contactLanguageDecoded
        let useCaseDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .useCaseDescription)
        useCaseDescription = useCaseDescriptionDecoded
        let additionalContactEmailAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalContactEmailAddresses)
        var additionalContactEmailAddressesDecoded0:[Swift.String]? = nil
        if let additionalContactEmailAddressesContainer = additionalContactEmailAddressesContainer {
            additionalContactEmailAddressesDecoded0 = [Swift.String]()
            for string0 in additionalContactEmailAddressesContainer {
                if let string0 = string0 {
                    additionalContactEmailAddressesDecoded0?.append(string0)
                }
            }
        }
        additionalContactEmailAddresses = additionalContactEmailAddressesDecoded0
        let productionAccessEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .productionAccessEnabled)
        productionAccessEnabled = productionAccessEnabledDecoded
    }
}

extension PutAccountDetailsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAccountDetailsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutAccountDetailsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAccountDetailsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAccountDetailsOutputResponse()"}
}

extension PutAccountDetailsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutAccountDetailsOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutAccountDetailsOutputResponseBody: Swift.Equatable {
}

extension PutAccountDetailsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutAccountSendingAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountSendingAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountSendingAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountSendingAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountSendingAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountSendingAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountSendingAttributesOutputError>
}

extension PutAccountSendingAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAccountSendingAttributesInput(sendingEnabled: \(Swift.String(describing: sendingEnabled)))"}
}

extension PutAccountSendingAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if sendingEnabled != false {
            try encodeContainer.encode(sendingEnabled, forKey: .sendingEnabled)
        }
    }
}

public struct PutAccountSendingAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountSendingAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountSendingAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountSendingAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountSendingAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountSendingAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountSendingAttributesOutputError>
}

public struct PutAccountSendingAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountSendingAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountSendingAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountSendingAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountSendingAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountSendingAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountSendingAttributesOutputError>
}

/// A request to change the ability of your account to send email.
public struct PutAccountSendingAttributesInput: Swift.Equatable {
    /// Enables or disables your account's ability to send email. Set to true to
    ///             enable email sending, or set to false to disable email sending.
    ///
    ///             If AWS paused your account's ability to send email, you can't use this operation
    ///                 to resume your account's ability to send email.
    ///
    public let sendingEnabled: Swift.Bool

    public init (
        sendingEnabled: Swift.Bool = false
    )
    {
        self.sendingEnabled = sendingEnabled
    }
}

struct PutAccountSendingAttributesInputBody: Swift.Equatable {
    public let sendingEnabled: Swift.Bool
}

extension PutAccountSendingAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .sendingEnabled)
        sendingEnabled = sendingEnabledDecoded
    }
}

extension PutAccountSendingAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAccountSendingAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutAccountSendingAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAccountSendingAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAccountSendingAttributesOutputResponse()"}
}

extension PutAccountSendingAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutAccountSendingAttributesOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutAccountSendingAttributesOutputResponseBody: Swift.Equatable {
}

extension PutAccountSendingAttributesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutAccountSuppressionAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountSuppressionAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountSuppressionAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountSuppressionAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountSuppressionAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountSuppressionAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountSuppressionAttributesOutputError>
}

extension PutAccountSuppressionAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAccountSuppressionAttributesInput(suppressedReasons: \(Swift.String(describing: suppressedReasons)))"}
}

extension PutAccountSuppressionAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressedReasons = "SuppressedReasons"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let suppressedReasons = suppressedReasons {
            var suppressedReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suppressedReasons)
            for suppressionlistreasons0 in suppressedReasons {
                try suppressedReasonsContainer.encode(suppressionlistreasons0.rawValue)
            }
        }
    }
}

public struct PutAccountSuppressionAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountSuppressionAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountSuppressionAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountSuppressionAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountSuppressionAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountSuppressionAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountSuppressionAttributesOutputError>
}

public struct PutAccountSuppressionAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountSuppressionAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountSuppressionAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountSuppressionAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountSuppressionAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountSuppressionAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountSuppressionAttributesOutputError>
}

/// A request to change your account's suppression preferences.
public struct PutAccountSuppressionAttributesInput: Swift.Equatable {
    /// A list that contains the reasons that email addresses will be automatically added to
    ///             the suppression list for your account. This list can contain any or all of the
    ///             following:
    ///
    ///
    ///
    ///                   COMPLAINT – Amazon SES adds an email address to the suppression
    ///                     list for your account when a message sent to that address results in a
    ///                     complaint.
    ///
    ///
    ///
    ///                   BOUNCE – Amazon SES adds an email address to the suppression
    ///                     list for your account when a message sent to that address results in a hard
    ///                     bounce.
    ///
    ///
    public let suppressedReasons: [SesV2ClientTypes.SuppressionListReason]?

    public init (
        suppressedReasons: [SesV2ClientTypes.SuppressionListReason]? = nil
    )
    {
        self.suppressedReasons = suppressedReasons
    }
}

struct PutAccountSuppressionAttributesInputBody: Swift.Equatable {
    public let suppressedReasons: [SesV2ClientTypes.SuppressionListReason]?
}

extension PutAccountSuppressionAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressedReasons = "SuppressedReasons"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressedReasonsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.SuppressionListReason?].self, forKey: .suppressedReasons)
        var suppressedReasonsDecoded0:[SesV2ClientTypes.SuppressionListReason]? = nil
        if let suppressedReasonsContainer = suppressedReasonsContainer {
            suppressedReasonsDecoded0 = [SesV2ClientTypes.SuppressionListReason]()
            for string0 in suppressedReasonsContainer {
                if let string0 = string0 {
                    suppressedReasonsDecoded0?.append(string0)
                }
            }
        }
        suppressedReasons = suppressedReasonsDecoded0
    }
}

extension PutAccountSuppressionAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAccountSuppressionAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutAccountSuppressionAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAccountSuppressionAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAccountSuppressionAttributesOutputResponse()"}
}

extension PutAccountSuppressionAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutAccountSuppressionAttributesOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutAccountSuppressionAttributesOutputResponseBody: Swift.Equatable {
}

extension PutAccountSuppressionAttributesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutConfigurationSetDeliveryOptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetDeliveryOptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetDeliveryOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetDeliveryOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetDeliveryOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetDeliveryOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetDeliveryOptionsOutputError>
}

extension PutConfigurationSetDeliveryOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationSetDeliveryOptionsInput(configurationSetName: \(Swift.String(describing: configurationSetName)), sendingPoolName: \(Swift.String(describing: sendingPoolName)), tlsPolicy: \(Swift.String(describing: tlsPolicy)))"}
}

extension PutConfigurationSetDeliveryOptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingPoolName = "SendingPoolName"
        case tlsPolicy = "TlsPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sendingPoolName = sendingPoolName {
            try encodeContainer.encode(sendingPoolName, forKey: .sendingPoolName)
        }
        if let tlsPolicy = tlsPolicy {
            try encodeContainer.encode(tlsPolicy.rawValue, forKey: .tlsPolicy)
        }
    }
}

public struct PutConfigurationSetDeliveryOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetDeliveryOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetDeliveryOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetDeliveryOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetDeliveryOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetDeliveryOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetDeliveryOptionsOutputError>
}

public struct PutConfigurationSetDeliveryOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetDeliveryOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetDeliveryOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetDeliveryOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetDeliveryOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetDeliveryOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetDeliveryOptionsOutputError>
}

/// A request to associate a configuration set with a dedicated IP pool.
public struct PutConfigurationSetDeliveryOptionsInput: Swift.Equatable {
    /// The name of the configuration set that you want to associate with a dedicated IP
    ///             pool.
    /// This member is required.
    public let configurationSetName: Swift.String?
    /// The name of the dedicated IP pool that you want to associate with the configuration
    ///             set.
    public let sendingPoolName: Swift.String?
    /// Specifies whether messages that use the configuration set are required to use
    ///             Transport Layer Security (TLS). If the value is Require, messages are only
    ///             delivered if a TLS connection can be established. If the value is Optional,
    ///             messages can be delivered in plain text if a TLS connection can't be established.
    public let tlsPolicy: SesV2ClientTypes.TlsPolicy?

    public init (
        configurationSetName: Swift.String? = nil,
        sendingPoolName: Swift.String? = nil,
        tlsPolicy: SesV2ClientTypes.TlsPolicy? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.sendingPoolName = sendingPoolName
        self.tlsPolicy = tlsPolicy
    }
}

struct PutConfigurationSetDeliveryOptionsInputBody: Swift.Equatable {
    public let tlsPolicy: SesV2ClientTypes.TlsPolicy?
    public let sendingPoolName: Swift.String?
}

extension PutConfigurationSetDeliveryOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingPoolName = "SendingPoolName"
        case tlsPolicy = "TlsPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tlsPolicyDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.TlsPolicy.self, forKey: .tlsPolicy)
        tlsPolicy = tlsPolicyDecoded
        let sendingPoolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sendingPoolName)
        sendingPoolName = sendingPoolNameDecoded
    }
}

extension PutConfigurationSetDeliveryOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetDeliveryOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutConfigurationSetDeliveryOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetDeliveryOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationSetDeliveryOptionsOutputResponse()"}
}

extension PutConfigurationSetDeliveryOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutConfigurationSetDeliveryOptionsOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutConfigurationSetDeliveryOptionsOutputResponseBody: Swift.Equatable {
}

extension PutConfigurationSetDeliveryOptionsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutConfigurationSetReputationOptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetReputationOptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetReputationOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetReputationOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetReputationOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetReputationOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetReputationOptionsOutputError>
}

extension PutConfigurationSetReputationOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationSetReputationOptionsInput(configurationSetName: \(Swift.String(describing: configurationSetName)), reputationMetricsEnabled: \(Swift.String(describing: reputationMetricsEnabled)))"}
}

extension PutConfigurationSetReputationOptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reputationMetricsEnabled = "ReputationMetricsEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if reputationMetricsEnabled != false {
            try encodeContainer.encode(reputationMetricsEnabled, forKey: .reputationMetricsEnabled)
        }
    }
}

public struct PutConfigurationSetReputationOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetReputationOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetReputationOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetReputationOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetReputationOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetReputationOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetReputationOptionsOutputError>
}

public struct PutConfigurationSetReputationOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetReputationOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetReputationOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetReputationOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetReputationOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetReputationOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetReputationOptionsOutputError>
}

/// A request to enable or disable tracking of reputation metrics for a configuration
///             set.
public struct PutConfigurationSetReputationOptionsInput: Swift.Equatable {
    /// The name of the configuration set that you want to enable or disable reputation metric
    ///             tracking for.
    /// This member is required.
    public let configurationSetName: Swift.String?
    /// If true, tracking of reputation metrics is enabled for the configuration
    ///             set. If false, tracking of reputation metrics is disabled for the
    ///             configuration set.
    public let reputationMetricsEnabled: Swift.Bool

    public init (
        configurationSetName: Swift.String? = nil,
        reputationMetricsEnabled: Swift.Bool = false
    )
    {
        self.configurationSetName = configurationSetName
        self.reputationMetricsEnabled = reputationMetricsEnabled
    }
}

struct PutConfigurationSetReputationOptionsInputBody: Swift.Equatable {
    public let reputationMetricsEnabled: Swift.Bool
}

extension PutConfigurationSetReputationOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reputationMetricsEnabled = "ReputationMetricsEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reputationMetricsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .reputationMetricsEnabled)
        reputationMetricsEnabled = reputationMetricsEnabledDecoded
    }
}

extension PutConfigurationSetReputationOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetReputationOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutConfigurationSetReputationOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetReputationOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationSetReputationOptionsOutputResponse()"}
}

extension PutConfigurationSetReputationOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutConfigurationSetReputationOptionsOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutConfigurationSetReputationOptionsOutputResponseBody: Swift.Equatable {
}

extension PutConfigurationSetReputationOptionsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutConfigurationSetSendingOptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetSendingOptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetSendingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetSendingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetSendingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetSendingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetSendingOptionsOutputError>
}

extension PutConfigurationSetSendingOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationSetSendingOptionsInput(configurationSetName: \(Swift.String(describing: configurationSetName)), sendingEnabled: \(Swift.String(describing: sendingEnabled)))"}
}

extension PutConfigurationSetSendingOptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if sendingEnabled != false {
            try encodeContainer.encode(sendingEnabled, forKey: .sendingEnabled)
        }
    }
}

public struct PutConfigurationSetSendingOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetSendingOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetSendingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetSendingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetSendingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetSendingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetSendingOptionsOutputError>
}

public struct PutConfigurationSetSendingOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetSendingOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetSendingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetSendingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetSendingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetSendingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetSendingOptionsOutputError>
}

/// A request to enable or disable the ability of Amazon SES to send emails that use a specific
///             configuration set.
public struct PutConfigurationSetSendingOptionsInput: Swift.Equatable {
    /// The name of the configuration set that you want to enable or disable email sending
    ///             for.
    /// This member is required.
    public let configurationSetName: Swift.String?
    /// If true, email sending is enabled for the configuration set. If
    ///                 false, email sending is disabled for the configuration set.
    public let sendingEnabled: Swift.Bool

    public init (
        configurationSetName: Swift.String? = nil,
        sendingEnabled: Swift.Bool = false
    )
    {
        self.configurationSetName = configurationSetName
        self.sendingEnabled = sendingEnabled
    }
}

struct PutConfigurationSetSendingOptionsInputBody: Swift.Equatable {
    public let sendingEnabled: Swift.Bool
}

extension PutConfigurationSetSendingOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .sendingEnabled)
        sendingEnabled = sendingEnabledDecoded
    }
}

extension PutConfigurationSetSendingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetSendingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutConfigurationSetSendingOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetSendingOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationSetSendingOptionsOutputResponse()"}
}

extension PutConfigurationSetSendingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutConfigurationSetSendingOptionsOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutConfigurationSetSendingOptionsOutputResponseBody: Swift.Equatable {
}

extension PutConfigurationSetSendingOptionsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutConfigurationSetSuppressionOptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetSuppressionOptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetSuppressionOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetSuppressionOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetSuppressionOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetSuppressionOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetSuppressionOptionsOutputError>
}

extension PutConfigurationSetSuppressionOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationSetSuppressionOptionsInput(configurationSetName: \(Swift.String(describing: configurationSetName)), suppressedReasons: \(Swift.String(describing: suppressedReasons)))"}
}

extension PutConfigurationSetSuppressionOptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressedReasons = "SuppressedReasons"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let suppressedReasons = suppressedReasons {
            var suppressedReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suppressedReasons)
            for suppressionlistreasons0 in suppressedReasons {
                try suppressedReasonsContainer.encode(suppressionlistreasons0.rawValue)
            }
        }
    }
}

public struct PutConfigurationSetSuppressionOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetSuppressionOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetSuppressionOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetSuppressionOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetSuppressionOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetSuppressionOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetSuppressionOptionsOutputError>
}

public struct PutConfigurationSetSuppressionOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetSuppressionOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetSuppressionOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetSuppressionOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetSuppressionOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetSuppressionOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetSuppressionOptionsOutputError>
}

/// A request to change the account suppression list preferences for a specific
///             configuration set.
public struct PutConfigurationSetSuppressionOptionsInput: Swift.Equatable {
    /// The name of the configuration set that you want to change the suppression list
    ///             preferences for.
    /// This member is required.
    public let configurationSetName: Swift.String?
    /// A list that contains the reasons that email addresses are automatically added to the
    ///             suppression list for your account. This list can contain any or all of the
    ///             following:
    ///
    ///
    ///
    ///                   COMPLAINT – Amazon SES adds an email address to the suppression
    ///                     list for your account when a message sent to that address results in a
    ///                     complaint.
    ///
    ///
    ///
    ///                   BOUNCE – Amazon SES adds an email address to the suppression
    ///                     list for your account when a message sent to that address results in a
    ///                     hard bounce.
    ///
    ///
    public let suppressedReasons: [SesV2ClientTypes.SuppressionListReason]?

    public init (
        configurationSetName: Swift.String? = nil,
        suppressedReasons: [SesV2ClientTypes.SuppressionListReason]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.suppressedReasons = suppressedReasons
    }
}

struct PutConfigurationSetSuppressionOptionsInputBody: Swift.Equatable {
    public let suppressedReasons: [SesV2ClientTypes.SuppressionListReason]?
}

extension PutConfigurationSetSuppressionOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressedReasons = "SuppressedReasons"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressedReasonsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.SuppressionListReason?].self, forKey: .suppressedReasons)
        var suppressedReasonsDecoded0:[SesV2ClientTypes.SuppressionListReason]? = nil
        if let suppressedReasonsContainer = suppressedReasonsContainer {
            suppressedReasonsDecoded0 = [SesV2ClientTypes.SuppressionListReason]()
            for string0 in suppressedReasonsContainer {
                if let string0 = string0 {
                    suppressedReasonsDecoded0?.append(string0)
                }
            }
        }
        suppressedReasons = suppressedReasonsDecoded0
    }
}

extension PutConfigurationSetSuppressionOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetSuppressionOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutConfigurationSetSuppressionOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetSuppressionOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationSetSuppressionOptionsOutputResponse()"}
}

extension PutConfigurationSetSuppressionOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutConfigurationSetSuppressionOptionsOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutConfigurationSetSuppressionOptionsOutputResponseBody: Swift.Equatable {
}

extension PutConfigurationSetSuppressionOptionsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutConfigurationSetTrackingOptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetTrackingOptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetTrackingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetTrackingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetTrackingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetTrackingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetTrackingOptionsOutputError>
}

extension PutConfigurationSetTrackingOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationSetTrackingOptionsInput(configurationSetName: \(Swift.String(describing: configurationSetName)), customRedirectDomain: \(Swift.String(describing: customRedirectDomain)))"}
}

extension PutConfigurationSetTrackingOptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRedirectDomain = "CustomRedirectDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customRedirectDomain = customRedirectDomain {
            try encodeContainer.encode(customRedirectDomain, forKey: .customRedirectDomain)
        }
    }
}

public struct PutConfigurationSetTrackingOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetTrackingOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetTrackingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetTrackingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetTrackingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetTrackingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetTrackingOptionsOutputError>
}

public struct PutConfigurationSetTrackingOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationSetTrackingOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationSetTrackingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationSetTrackingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationSetTrackingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationSetTrackingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationSetTrackingOptionsOutputError>
}

/// A request to add a custom domain for tracking open and click events to a configuration
///             set.
public struct PutConfigurationSetTrackingOptionsInput: Swift.Equatable {
    /// The name of the configuration set that you want to add a custom tracking domain
    ///             to.
    /// This member is required.
    public let configurationSetName: Swift.String?
    /// The domain that you want to use to track open and click events.
    public let customRedirectDomain: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        customRedirectDomain: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.customRedirectDomain = customRedirectDomain
    }
}

struct PutConfigurationSetTrackingOptionsInputBody: Swift.Equatable {
    public let customRedirectDomain: Swift.String?
}

extension PutConfigurationSetTrackingOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRedirectDomain = "CustomRedirectDomain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customRedirectDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customRedirectDomain)
        customRedirectDomain = customRedirectDomainDecoded
    }
}

extension PutConfigurationSetTrackingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationSetTrackingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutConfigurationSetTrackingOptionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationSetTrackingOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationSetTrackingOptionsOutputResponse()"}
}

extension PutConfigurationSetTrackingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutConfigurationSetTrackingOptionsOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutConfigurationSetTrackingOptionsOutputResponseBody: Swift.Equatable {
}

extension PutConfigurationSetTrackingOptionsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutDedicatedIpInPoolInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDedicatedIpInPoolInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDedicatedIpInPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDedicatedIpInPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDedicatedIpInPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDedicatedIpInPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDedicatedIpInPoolOutputError>
}

extension PutDedicatedIpInPoolInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutDedicatedIpInPoolInput(destinationPoolName: \(Swift.String(describing: destinationPoolName)), ip: \(Swift.String(describing: ip)))"}
}

extension PutDedicatedIpInPoolInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationPoolName = "DestinationPoolName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationPoolName = destinationPoolName {
            try encodeContainer.encode(destinationPoolName, forKey: .destinationPoolName)
        }
    }
}

public struct PutDedicatedIpInPoolInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDedicatedIpInPoolInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDedicatedIpInPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDedicatedIpInPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDedicatedIpInPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDedicatedIpInPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDedicatedIpInPoolOutputError>
}

public struct PutDedicatedIpInPoolInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDedicatedIpInPoolInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDedicatedIpInPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDedicatedIpInPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDedicatedIpInPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDedicatedIpInPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDedicatedIpInPoolOutputError>
}

/// A request to move a dedicated IP address to a dedicated IP pool.
public struct PutDedicatedIpInPoolInput: Swift.Equatable {
    /// The name of the IP pool that you want to add the dedicated IP address to. You have to
    ///             specify an IP pool that already exists.
    /// This member is required.
    public let destinationPoolName: Swift.String?
    /// The IP address that you want to move to the dedicated IP pool. The value you specify
    ///             has to be a dedicated IP address that's associated with your AWS account.
    /// This member is required.
    public let ip: Swift.String?

    public init (
        destinationPoolName: Swift.String? = nil,
        ip: Swift.String? = nil
    )
    {
        self.destinationPoolName = destinationPoolName
        self.ip = ip
    }
}

struct PutDedicatedIpInPoolInputBody: Swift.Equatable {
    public let destinationPoolName: Swift.String?
}

extension PutDedicatedIpInPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationPoolName = "DestinationPoolName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationPoolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPoolName)
        destinationPoolName = destinationPoolNameDecoded
    }
}

extension PutDedicatedIpInPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDedicatedIpInPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutDedicatedIpInPoolOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDedicatedIpInPoolOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutDedicatedIpInPoolOutputResponse()"}
}

extension PutDedicatedIpInPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutDedicatedIpInPoolOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutDedicatedIpInPoolOutputResponseBody: Swift.Equatable {
}

extension PutDedicatedIpInPoolOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutDedicatedIpWarmupAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDedicatedIpWarmupAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDedicatedIpWarmupAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDedicatedIpWarmupAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDedicatedIpWarmupAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDedicatedIpWarmupAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDedicatedIpWarmupAttributesOutputError>
}

extension PutDedicatedIpWarmupAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutDedicatedIpWarmupAttributesInput(ip: \(Swift.String(describing: ip)), warmupPercentage: \(Swift.String(describing: warmupPercentage)))"}
}

extension PutDedicatedIpWarmupAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case warmupPercentage = "WarmupPercentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let warmupPercentage = warmupPercentage {
            try encodeContainer.encode(warmupPercentage, forKey: .warmupPercentage)
        }
    }
}

public struct PutDedicatedIpWarmupAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDedicatedIpWarmupAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDedicatedIpWarmupAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDedicatedIpWarmupAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDedicatedIpWarmupAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDedicatedIpWarmupAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDedicatedIpWarmupAttributesOutputError>
}

public struct PutDedicatedIpWarmupAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDedicatedIpWarmupAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDedicatedIpWarmupAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDedicatedIpWarmupAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDedicatedIpWarmupAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDedicatedIpWarmupAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDedicatedIpWarmupAttributesOutputError>
}

/// A request to change the warm-up attributes for a dedicated IP address. This operation
///             is useful when you want to resume the warm-up process for an existing IP address.
public struct PutDedicatedIpWarmupAttributesInput: Swift.Equatable {
    /// The dedicated IP address that you want to update the warm-up attributes for.
    /// This member is required.
    public let ip: Swift.String?
    /// The warm-up percentage that you want to associate with the dedicated IP
    ///             address.
    /// This member is required.
    public let warmupPercentage: Swift.Int?

    public init (
        ip: Swift.String? = nil,
        warmupPercentage: Swift.Int? = nil
    )
    {
        self.ip = ip
        self.warmupPercentage = warmupPercentage
    }
}

struct PutDedicatedIpWarmupAttributesInputBody: Swift.Equatable {
    public let warmupPercentage: Swift.Int?
}

extension PutDedicatedIpWarmupAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case warmupPercentage = "WarmupPercentage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let warmupPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .warmupPercentage)
        warmupPercentage = warmupPercentageDecoded
    }
}

extension PutDedicatedIpWarmupAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDedicatedIpWarmupAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutDedicatedIpWarmupAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDedicatedIpWarmupAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutDedicatedIpWarmupAttributesOutputResponse()"}
}

extension PutDedicatedIpWarmupAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutDedicatedIpWarmupAttributesOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutDedicatedIpWarmupAttributesOutputResponseBody: Swift.Equatable {
}

extension PutDedicatedIpWarmupAttributesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutDeliverabilityDashboardOptionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDeliverabilityDashboardOptionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDeliverabilityDashboardOptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDeliverabilityDashboardOptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDeliverabilityDashboardOptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDeliverabilityDashboardOptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDeliverabilityDashboardOptionOutputError>
}

extension PutDeliverabilityDashboardOptionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutDeliverabilityDashboardOptionInput(dashboardEnabled: \(Swift.String(describing: dashboardEnabled)), subscribedDomains: \(Swift.String(describing: subscribedDomains)))"}
}

extension PutDeliverabilityDashboardOptionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardEnabled = "DashboardEnabled"
        case subscribedDomains = "SubscribedDomains"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if dashboardEnabled != false {
            try encodeContainer.encode(dashboardEnabled, forKey: .dashboardEnabled)
        }
        if let subscribedDomains = subscribedDomains {
            var subscribedDomainsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subscribedDomains)
            for domaindeliverabilitytrackingoptions0 in subscribedDomains {
                try subscribedDomainsContainer.encode(domaindeliverabilitytrackingoptions0)
            }
        }
    }
}

public struct PutDeliverabilityDashboardOptionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDeliverabilityDashboardOptionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDeliverabilityDashboardOptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDeliverabilityDashboardOptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDeliverabilityDashboardOptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDeliverabilityDashboardOptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDeliverabilityDashboardOptionOutputError>
}

public struct PutDeliverabilityDashboardOptionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDeliverabilityDashboardOptionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDeliverabilityDashboardOptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDeliverabilityDashboardOptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDeliverabilityDashboardOptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDeliverabilityDashboardOptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDeliverabilityDashboardOptionOutputError>
}

/// Enable or disable the Deliverability dashboard. When you enable the Deliverability dashboard, you gain
///             access to reputation, deliverability, and other metrics for the domains that you use to
///             send email using Amazon SES API v2. You also gain the ability to perform predictive inbox placement tests.
///         When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
///             to any other fees that you accrue by using Amazon SES and other AWS services. For more
///             information about the features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing.
public struct PutDeliverabilityDashboardOptionInput: Swift.Equatable {
    /// Specifies whether to enable the Deliverability dashboard. To enable the dashboard, set this
    ///             value to true.
    /// This member is required.
    public let dashboardEnabled: Swift.Bool
    /// An array of objects, one for each verified domain that you use to send email and
    ///             enabled the Deliverability dashboard for.
    public let subscribedDomains: [SesV2ClientTypes.DomainDeliverabilityTrackingOption]?

    public init (
        dashboardEnabled: Swift.Bool = false,
        subscribedDomains: [SesV2ClientTypes.DomainDeliverabilityTrackingOption]? = nil
    )
    {
        self.dashboardEnabled = dashboardEnabled
        self.subscribedDomains = subscribedDomains
    }
}

struct PutDeliverabilityDashboardOptionInputBody: Swift.Equatable {
    public let dashboardEnabled: Swift.Bool
    public let subscribedDomains: [SesV2ClientTypes.DomainDeliverabilityTrackingOption]?
}

extension PutDeliverabilityDashboardOptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardEnabled = "DashboardEnabled"
        case subscribedDomains = "SubscribedDomains"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .dashboardEnabled)
        dashboardEnabled = dashboardEnabledDecoded
        let subscribedDomainsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.DomainDeliverabilityTrackingOption?].self, forKey: .subscribedDomains)
        var subscribedDomainsDecoded0:[SesV2ClientTypes.DomainDeliverabilityTrackingOption]? = nil
        if let subscribedDomainsContainer = subscribedDomainsContainer {
            subscribedDomainsDecoded0 = [SesV2ClientTypes.DomainDeliverabilityTrackingOption]()
            for structure0 in subscribedDomainsContainer {
                if let structure0 = structure0 {
                    subscribedDomainsDecoded0?.append(structure0)
                }
            }
        }
        subscribedDomains = subscribedDomainsDecoded0
    }
}

extension PutDeliverabilityDashboardOptionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDeliverabilityDashboardOptionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutDeliverabilityDashboardOptionOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDeliverabilityDashboardOptionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutDeliverabilityDashboardOptionOutputResponse()"}
}

extension PutDeliverabilityDashboardOptionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// A response that indicates whether the Deliverability dashboard is enabled.
public struct PutDeliverabilityDashboardOptionOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutDeliverabilityDashboardOptionOutputResponseBody: Swift.Equatable {
}

extension PutDeliverabilityDashboardOptionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutEmailIdentityConfigurationSetAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityConfigurationSetAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityConfigurationSetAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityConfigurationSetAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityConfigurationSetAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityConfigurationSetAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityConfigurationSetAttributesOutputError>
}

extension PutEmailIdentityConfigurationSetAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutEmailIdentityConfigurationSetAttributesInput(configurationSetName: \(Swift.String(describing: configurationSetName)), emailIdentity: \(Swift.String(describing: emailIdentity)))"}
}

extension PutEmailIdentityConfigurationSetAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSetName = configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
    }
}

public struct PutEmailIdentityConfigurationSetAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityConfigurationSetAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityConfigurationSetAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityConfigurationSetAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityConfigurationSetAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityConfigurationSetAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityConfigurationSetAttributesOutputError>
}

public struct PutEmailIdentityConfigurationSetAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityConfigurationSetAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityConfigurationSetAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityConfigurationSetAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityConfigurationSetAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityConfigurationSetAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityConfigurationSetAttributesOutputError>
}

/// A request to associate a configuration set with an email identity.
public struct PutEmailIdentityConfigurationSetAttributesInput: Swift.Equatable {
    /// The configuration set that you want to associate with an email identity.
    public let configurationSetName: Swift.String?
    /// The email address or domain that you want to associate with a configuration set.
    /// This member is required.
    public let emailIdentity: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        emailIdentity: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.emailIdentity = emailIdentity
    }
}

struct PutEmailIdentityConfigurationSetAttributesInputBody: Swift.Equatable {
    public let configurationSetName: Swift.String?
}

extension PutEmailIdentityConfigurationSetAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension PutEmailIdentityConfigurationSetAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEmailIdentityConfigurationSetAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutEmailIdentityConfigurationSetAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEmailIdentityConfigurationSetAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutEmailIdentityConfigurationSetAttributesOutputResponse()"}
}

extension PutEmailIdentityConfigurationSetAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
public struct PutEmailIdentityConfigurationSetAttributesOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutEmailIdentityConfigurationSetAttributesOutputResponseBody: Swift.Equatable {
}

extension PutEmailIdentityConfigurationSetAttributesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutEmailIdentityDkimAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityDkimAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityDkimAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityDkimAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityDkimAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityDkimAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityDkimAttributesOutputError>
}

extension PutEmailIdentityDkimAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutEmailIdentityDkimAttributesInput(emailIdentity: \(Swift.String(describing: emailIdentity)), signingEnabled: \(Swift.String(describing: signingEnabled)))"}
}

extension PutEmailIdentityDkimAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signingEnabled = "SigningEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if signingEnabled != false {
            try encodeContainer.encode(signingEnabled, forKey: .signingEnabled)
        }
    }
}

public struct PutEmailIdentityDkimAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityDkimAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityDkimAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityDkimAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityDkimAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityDkimAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityDkimAttributesOutputError>
}

public struct PutEmailIdentityDkimAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityDkimAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityDkimAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityDkimAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityDkimAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityDkimAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityDkimAttributesOutputError>
}

/// A request to enable or disable DKIM signing of email that you send from an email
///             identity.
public struct PutEmailIdentityDkimAttributesInput: Swift.Equatable {
    /// The email identity that you want to change the DKIM settings for.
    /// This member is required.
    public let emailIdentity: Swift.String?
    /// Sets the DKIM signing configuration for the identity.
    ///         When you set this value true, then the messages that are sent from the
    ///             identity are signed using DKIM. If you set this value to false, your
    ///             messages are sent without DKIM signing.
    public let signingEnabled: Swift.Bool

    public init (
        emailIdentity: Swift.String? = nil,
        signingEnabled: Swift.Bool = false
    )
    {
        self.emailIdentity = emailIdentity
        self.signingEnabled = signingEnabled
    }
}

struct PutEmailIdentityDkimAttributesInputBody: Swift.Equatable {
    public let signingEnabled: Swift.Bool
}

extension PutEmailIdentityDkimAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signingEnabled = "SigningEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .signingEnabled)
        signingEnabled = signingEnabledDecoded
    }
}

extension PutEmailIdentityDkimAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEmailIdentityDkimAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutEmailIdentityDkimAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEmailIdentityDkimAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutEmailIdentityDkimAttributesOutputResponse()"}
}

extension PutEmailIdentityDkimAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutEmailIdentityDkimAttributesOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutEmailIdentityDkimAttributesOutputResponseBody: Swift.Equatable {
}

extension PutEmailIdentityDkimAttributesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutEmailIdentityDkimSigningAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityDkimSigningAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityDkimSigningAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityDkimSigningAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityDkimSigningAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityDkimSigningAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityDkimSigningAttributesOutputError>
}

extension PutEmailIdentityDkimSigningAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutEmailIdentityDkimSigningAttributesInput(emailIdentity: \(Swift.String(describing: emailIdentity)), signingAttributes: \(Swift.String(describing: signingAttributes)), signingAttributesOrigin: \(Swift.String(describing: signingAttributesOrigin)))"}
}

extension PutEmailIdentityDkimSigningAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signingAttributes = "SigningAttributes"
        case signingAttributesOrigin = "SigningAttributesOrigin"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let signingAttributes = signingAttributes {
            try encodeContainer.encode(signingAttributes, forKey: .signingAttributes)
        }
        if let signingAttributesOrigin = signingAttributesOrigin {
            try encodeContainer.encode(signingAttributesOrigin.rawValue, forKey: .signingAttributesOrigin)
        }
    }
}

public struct PutEmailIdentityDkimSigningAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityDkimSigningAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityDkimSigningAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityDkimSigningAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityDkimSigningAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityDkimSigningAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityDkimSigningAttributesOutputError>
}

public struct PutEmailIdentityDkimSigningAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityDkimSigningAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityDkimSigningAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityDkimSigningAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityDkimSigningAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityDkimSigningAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityDkimSigningAttributesOutputError>
}

/// A request to change the DKIM attributes for an email identity.
public struct PutEmailIdentityDkimSigningAttributesInput: Swift.Equatable {
    /// The email identity that you want to configure DKIM for.
    /// This member is required.
    public let emailIdentity: Swift.String?
    /// An object that contains information about the private key and selector that you want
    ///             to use to configure DKIM for the identity. This object is only required if you want to
    ///             configure Bring Your Own DKIM (BYODKIM) for the identity.
    public let signingAttributes: SesV2ClientTypes.DkimSigningAttributes?
    /// The method that you want to use to configure DKIM for the identity. There are two
    ///             possible values:
    ///
    ///
    ///
    ///                   AWS_SES – Configure DKIM for the identity by using <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy
    ///                         DKIM.
    ///
    ///
    ///
    ///                   EXTERNAL – Configure DKIM for the identity by using Bring
    ///                     Your Own DKIM (BYODKIM).
    ///
    ///
    /// This member is required.
    public let signingAttributesOrigin: SesV2ClientTypes.DkimSigningAttributesOrigin?

    public init (
        emailIdentity: Swift.String? = nil,
        signingAttributes: SesV2ClientTypes.DkimSigningAttributes? = nil,
        signingAttributesOrigin: SesV2ClientTypes.DkimSigningAttributesOrigin? = nil
    )
    {
        self.emailIdentity = emailIdentity
        self.signingAttributes = signingAttributes
        self.signingAttributesOrigin = signingAttributesOrigin
    }
}

struct PutEmailIdentityDkimSigningAttributesInputBody: Swift.Equatable {
    public let signingAttributesOrigin: SesV2ClientTypes.DkimSigningAttributesOrigin?
    public let signingAttributes: SesV2ClientTypes.DkimSigningAttributes?
}

extension PutEmailIdentityDkimSigningAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signingAttributes = "SigningAttributes"
        case signingAttributesOrigin = "SigningAttributesOrigin"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingAttributesOriginDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DkimSigningAttributesOrigin.self, forKey: .signingAttributesOrigin)
        signingAttributesOrigin = signingAttributesOriginDecoded
        let signingAttributesDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DkimSigningAttributes.self, forKey: .signingAttributes)
        signingAttributes = signingAttributesDecoded
    }
}

extension PutEmailIdentityDkimSigningAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEmailIdentityDkimSigningAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutEmailIdentityDkimSigningAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEmailIdentityDkimSigningAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutEmailIdentityDkimSigningAttributesOutputResponse(dkimStatus: \(Swift.String(describing: dkimStatus)), dkimTokens: \(Swift.String(describing: dkimTokens)))"}
}

extension PutEmailIdentityDkimSigningAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutEmailIdentityDkimSigningAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dkimStatus = output.dkimStatus
            self.dkimTokens = output.dkimTokens
        } else {
            self.dkimStatus = nil
            self.dkimTokens = nil
        }
    }
}

/// If the action is successful, the service sends back an HTTP 200 response.
///         The following data is returned in JSON format by the service.
public struct PutEmailIdentityDkimSigningAttributesOutputResponse: Swift.Equatable {
    /// The DKIM authentication status of the identity. Amazon SES determines the authentication
    ///             status by searching for specific records in the DNS configuration for your domain. If
    ///             you used <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy
    ///                 DKIM to set up DKIM authentication, Amazon SES tries to find three unique CNAME
    ///             records in the DNS configuration for your domain.
    ///         If you provided a public key to perform DKIM authentication, Amazon SES tries to find a TXT
    ///             record that uses the selector that you specified. The value of the TXT record must be a
    ///             public key that's paired with the private key that you specified in the process of
    ///             creating the identity.
    ///         The status can be one of the following:
    ///
    ///
    ///
    ///                   PENDING – The verification process was initiated, but Amazon SES
    ///                     hasn't yet detected the DKIM records in the DNS configuration for the
    ///                     domain.
    ///
    ///
    ///
    ///                   SUCCESS – The verification process completed
    ///                     successfully.
    ///
    ///
    ///
    ///                   FAILED – The verification process failed. This typically
    ///                     occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the
    ///                     domain.
    ///
    ///
    ///
    ///                   TEMPORARY_FAILURE – A temporary issue is preventing Amazon SES
    ///                     from determining the DKIM authentication status of the domain.
    ///
    ///
    ///
    ///                   NOT_STARTED – The DKIM verification process hasn't been
    ///                     initiated for the domain.
    ///
    ///
    public let dkimStatus: SesV2ClientTypes.DkimStatus?
    /// If you used <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM to configure DKIM authentication for the domain, then this object
    ///             contains a set of unique strings that you use to create a set of CNAME records that you
    ///             add to the DNS configuration for your domain. When Amazon SES detects these records in the
    ///             DNS configuration for your domain, the DKIM authentication process is complete.
    ///         If you configured DKIM authentication for the domain by providing your own
    ///             public-private key pair, then this object contains the selector that's associated with
    ///             your public key.
    ///         Regardless of the DKIM authentication method you use, Amazon SES searches for the
    ///             appropriate records in the DNS configuration of the domain for up to 72 hours.
    public let dkimTokens: [Swift.String]?

    public init (
        dkimStatus: SesV2ClientTypes.DkimStatus? = nil,
        dkimTokens: [Swift.String]? = nil
    )
    {
        self.dkimStatus = dkimStatus
        self.dkimTokens = dkimTokens
    }
}

struct PutEmailIdentityDkimSigningAttributesOutputResponseBody: Swift.Equatable {
    public let dkimStatus: SesV2ClientTypes.DkimStatus?
    public let dkimTokens: [Swift.String]?
}

extension PutEmailIdentityDkimSigningAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimStatus = "DkimStatus"
        case dkimTokens = "DkimTokens"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dkimStatusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DkimStatus.self, forKey: .dkimStatus)
        dkimStatus = dkimStatusDecoded
        let dkimTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dkimTokens)
        var dkimTokensDecoded0:[Swift.String]? = nil
        if let dkimTokensContainer = dkimTokensContainer {
            dkimTokensDecoded0 = [Swift.String]()
            for string0 in dkimTokensContainer {
                if let string0 = string0 {
                    dkimTokensDecoded0?.append(string0)
                }
            }
        }
        dkimTokens = dkimTokensDecoded0
    }
}

public struct PutEmailIdentityFeedbackAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityFeedbackAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityFeedbackAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityFeedbackAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityFeedbackAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityFeedbackAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityFeedbackAttributesOutputError>
}

extension PutEmailIdentityFeedbackAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutEmailIdentityFeedbackAttributesInput(emailForwardingEnabled: \(Swift.String(describing: emailForwardingEnabled)), emailIdentity: \(Swift.String(describing: emailIdentity)))"}
}

extension PutEmailIdentityFeedbackAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailForwardingEnabled = "EmailForwardingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if emailForwardingEnabled != false {
            try encodeContainer.encode(emailForwardingEnabled, forKey: .emailForwardingEnabled)
        }
    }
}

public struct PutEmailIdentityFeedbackAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityFeedbackAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityFeedbackAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityFeedbackAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityFeedbackAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityFeedbackAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityFeedbackAttributesOutputError>
}

public struct PutEmailIdentityFeedbackAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityFeedbackAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityFeedbackAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityFeedbackAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityFeedbackAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityFeedbackAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityFeedbackAttributesOutputError>
}

/// A request to set the attributes that control how bounce and complaint events are
///             processed.
public struct PutEmailIdentityFeedbackAttributesInput: Swift.Equatable {
    /// Sets the feedback forwarding configuration for the identity.
    ///         If the value is true, you receive email notifications when bounce or
    ///             complaint events occur. These notifications are sent to the address that you specified
    ///             in the Return-Path header of the original email.
    ///         You're required to have a method of tracking bounces and complaints. If you haven't
    ///             set up another mechanism for receiving bounce or complaint notifications (for example,
    ///             by setting up an event destination), you receive an email notification when these events
    ///             occur (even if this setting is disabled).
    public let emailForwardingEnabled: Swift.Bool
    /// The email identity that you want to configure bounce and complaint feedback forwarding
    ///             for.
    /// This member is required.
    public let emailIdentity: Swift.String?

    public init (
        emailForwardingEnabled: Swift.Bool = false,
        emailIdentity: Swift.String? = nil
    )
    {
        self.emailForwardingEnabled = emailForwardingEnabled
        self.emailIdentity = emailIdentity
    }
}

struct PutEmailIdentityFeedbackAttributesInputBody: Swift.Equatable {
    public let emailForwardingEnabled: Swift.Bool
}

extension PutEmailIdentityFeedbackAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailForwardingEnabled = "EmailForwardingEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailForwardingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .emailForwardingEnabled)
        emailForwardingEnabled = emailForwardingEnabledDecoded
    }
}

extension PutEmailIdentityFeedbackAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEmailIdentityFeedbackAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutEmailIdentityFeedbackAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEmailIdentityFeedbackAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutEmailIdentityFeedbackAttributesOutputResponse()"}
}

extension PutEmailIdentityFeedbackAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutEmailIdentityFeedbackAttributesOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutEmailIdentityFeedbackAttributesOutputResponseBody: Swift.Equatable {
}

extension PutEmailIdentityFeedbackAttributesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutEmailIdentityMailFromAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityMailFromAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityMailFromAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityMailFromAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityMailFromAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityMailFromAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityMailFromAttributesOutputError>
}

extension PutEmailIdentityMailFromAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutEmailIdentityMailFromAttributesInput(behaviorOnMxFailure: \(Swift.String(describing: behaviorOnMxFailure)), emailIdentity: \(Swift.String(describing: emailIdentity)), mailFromDomain: \(Swift.String(describing: mailFromDomain)))"}
}

extension PutEmailIdentityMailFromAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorOnMxFailure = "BehaviorOnMxFailure"
        case mailFromDomain = "MailFromDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behaviorOnMxFailure = behaviorOnMxFailure {
            try encodeContainer.encode(behaviorOnMxFailure.rawValue, forKey: .behaviorOnMxFailure)
        }
        if let mailFromDomain = mailFromDomain {
            try encodeContainer.encode(mailFromDomain, forKey: .mailFromDomain)
        }
    }
}

public struct PutEmailIdentityMailFromAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityMailFromAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityMailFromAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityMailFromAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityMailFromAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityMailFromAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityMailFromAttributesOutputError>
}

public struct PutEmailIdentityMailFromAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEmailIdentityMailFromAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEmailIdentityMailFromAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEmailIdentityMailFromAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEmailIdentityMailFromAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEmailIdentityMailFromAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEmailIdentityMailFromAttributesOutputError>
}

/// A request to configure the custom MAIL FROM domain for a verified identity.
public struct PutEmailIdentityMailFromAttributesInput: Swift.Equatable {
    /// The action that you want to take if the required MX record isn't found when you send
    ///             an email. When you set this value to UseDefaultValue, the mail is sent
    ///             using amazonses.com as the MAIL FROM domain. When you set this
    ///             value to RejectMessage, the Amazon SES API v2 returns a
    ///                 MailFromDomainNotVerified error, and doesn't attempt to deliver the
    ///             email.
    ///         These behaviors are taken when the custom MAIL FROM domain configuration is in the
    ///                 Pending, Failed, and TemporaryFailure
    ///             states.
    public let behaviorOnMxFailure: SesV2ClientTypes.BehaviorOnMxFailure?
    /// The verified email identity that you want to set up the custom MAIL FROM domain
    ///             for.
    /// This member is required.
    public let emailIdentity: Swift.String?
    ///  The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM
    ///             domain must meet the following criteria:
    ///
    ///
    ///                 It has to be a subdomain of the verified identity.
    ///
    ///
    ///                 It can't be used to receive email.
    ///
    ///
    ///                 It can't be used in a "From" address if the MAIL FROM domain is a destination
    ///                     for feedback forwarding emails.
    ///
    ///
    public let mailFromDomain: Swift.String?

    public init (
        behaviorOnMxFailure: SesV2ClientTypes.BehaviorOnMxFailure? = nil,
        emailIdentity: Swift.String? = nil,
        mailFromDomain: Swift.String? = nil
    )
    {
        self.behaviorOnMxFailure = behaviorOnMxFailure
        self.emailIdentity = emailIdentity
        self.mailFromDomain = mailFromDomain
    }
}

struct PutEmailIdentityMailFromAttributesInputBody: Swift.Equatable {
    public let mailFromDomain: Swift.String?
    public let behaviorOnMxFailure: SesV2ClientTypes.BehaviorOnMxFailure?
}

extension PutEmailIdentityMailFromAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorOnMxFailure = "BehaviorOnMxFailure"
        case mailFromDomain = "MailFromDomain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailFromDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mailFromDomain)
        mailFromDomain = mailFromDomainDecoded
        let behaviorOnMxFailureDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.BehaviorOnMxFailure.self, forKey: .behaviorOnMxFailure)
        behaviorOnMxFailure = behaviorOnMxFailureDecoded
    }
}

extension PutEmailIdentityMailFromAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEmailIdentityMailFromAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutEmailIdentityMailFromAttributesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEmailIdentityMailFromAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutEmailIdentityMailFromAttributesOutputResponse()"}
}

extension PutEmailIdentityMailFromAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutEmailIdentityMailFromAttributesOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutEmailIdentityMailFromAttributesOutputResponseBody: Swift.Equatable {
}

extension PutEmailIdentityMailFromAttributesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutSuppressedDestinationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutSuppressedDestinationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutSuppressedDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutSuppressedDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutSuppressedDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutSuppressedDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutSuppressedDestinationOutputError>
}

extension PutSuppressedDestinationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutSuppressedDestinationInput(emailAddress: \(Swift.String(describing: emailAddress)), reason: \(Swift.String(describing: reason)))"}
}

extension PutSuppressedDestinationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailAddress = "EmailAddress"
        case reason = "Reason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailAddress = emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let reason = reason {
            try encodeContainer.encode(reason.rawValue, forKey: .reason)
        }
    }
}

public struct PutSuppressedDestinationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutSuppressedDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutSuppressedDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutSuppressedDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutSuppressedDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutSuppressedDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutSuppressedDestinationOutputError>
}

public struct PutSuppressedDestinationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutSuppressedDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutSuppressedDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutSuppressedDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutSuppressedDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutSuppressedDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutSuppressedDestinationOutputError>
}

/// A request to add an email destination to the suppression list for your account.
public struct PutSuppressedDestinationInput: Swift.Equatable {
    /// The email address that should be added to the suppression list for your
    ///             account.
    /// This member is required.
    public let emailAddress: Swift.String?
    /// The factors that should cause the email address to be added to the suppression list
    ///             for your account.
    /// This member is required.
    public let reason: SesV2ClientTypes.SuppressionListReason?

    public init (
        emailAddress: Swift.String? = nil,
        reason: SesV2ClientTypes.SuppressionListReason? = nil
    )
    {
        self.emailAddress = emailAddress
        self.reason = reason
    }
}

struct PutSuppressedDestinationInputBody: Swift.Equatable {
    public let emailAddress: Swift.String?
    public let reason: SesV2ClientTypes.SuppressionListReason?
}

extension PutSuppressedDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailAddress = "EmailAddress"
        case reason = "Reason"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SuppressionListReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension PutSuppressedDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutSuppressedDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutSuppressedDestinationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutSuppressedDestinationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutSuppressedDestinationOutputResponse()"}
}

extension PutSuppressedDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct PutSuppressedDestinationOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutSuppressedDestinationOutputResponseBody: Swift.Equatable {
}

extension PutSuppressedDestinationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SesV2ClientTypes.RawMessage: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = data {
            try encodeContainer.encode(data.base64EncodedString(), forKey: .data)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .data)
        data = dataDecoded
    }
}

extension SesV2ClientTypes.RawMessage: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RawMessage(data: \(Swift.String(describing: data)))"}
}

extension SesV2ClientTypes {
    /// Represents the raw content of an email message.
    public struct RawMessage: Swift.Equatable {
        /// The raw email message. The message has to meet the following criteria:
        ///
        ///
        ///                 The message has to contain a header and a body, separated by one blank
        ///                     line.
        ///
        ///
        ///                 All of the required header fields must be present in the message.
        ///
        ///
        ///                 Each part of a multipart MIME message must be formatted properly.
        ///
        ///
        ///                 Attachments must be in a file format that the Amazon SES supports.
        ///
        ///
        ///                 The entire message must be Base64 encoded.
        ///
        ///
        ///                 If any of the MIME parts in your message contain content that is outside of
        ///                     the 7-bit ASCII character range, you should encode that content to ensure that
        ///                     recipients' email clients render the message properly.
        ///
        ///
        ///                 The length of any single line of text in the message can't exceed 1,000
        ///                     characters. This restriction is defined in <a href="https://tools.ietf.org/html/rfc5321">RFC 5321.
        ///
        ///
        /// This member is required.
        public let data: ClientRuntime.Data?

        public init (
            data: ClientRuntime.Data? = nil
        )
        {
            self.data = data
        }
    }

}

extension SesV2ClientTypes.ReplacementEmailContent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replacementTemplate = "ReplacementTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let replacementTemplate = replacementTemplate {
            try encodeContainer.encode(replacementTemplate, forKey: .replacementTemplate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replacementTemplateDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ReplacementTemplate.self, forKey: .replacementTemplate)
        replacementTemplate = replacementTemplateDecoded
    }
}

extension SesV2ClientTypes.ReplacementEmailContent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReplacementEmailContent(replacementTemplate: \(Swift.String(describing: replacementTemplate)))"}
}

extension SesV2ClientTypes {
    /// The ReplaceEmailContent object to be used for a specific
    ///                 BulkEmailEntry. The ReplacementTemplate can be specified
    ///             within this object.
    public struct ReplacementEmailContent: Swift.Equatable {
        /// The ReplacementTemplate associated with
        ///                 ReplacementEmailContent.
        public let replacementTemplate: SesV2ClientTypes.ReplacementTemplate?

        public init (
            replacementTemplate: SesV2ClientTypes.ReplacementTemplate? = nil
        )
        {
            self.replacementTemplate = replacementTemplate
        }
    }

}

extension SesV2ClientTypes.ReplacementTemplate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replacementTemplateData = "ReplacementTemplateData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let replacementTemplateData = replacementTemplateData {
            try encodeContainer.encode(replacementTemplateData, forKey: .replacementTemplateData)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replacementTemplateDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replacementTemplateData)
        replacementTemplateData = replacementTemplateDataDecoded
    }
}

extension SesV2ClientTypes.ReplacementTemplate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReplacementTemplate(replacementTemplateData: \(Swift.String(describing: replacementTemplateData)))"}
}

extension SesV2ClientTypes {
    /// An object which contains ReplacementTemplateData to be used for a
    ///             specific BulkEmailEntry.
    public struct ReplacementTemplate: Swift.Equatable {
        /// A list of replacement values to apply to the template. This parameter is a JSON
        ///             object, typically consisting of key-value pairs in which the keys correspond to
        ///             replacement tags in the email template.
        public let replacementTemplateData: Swift.String?

        public init (
            replacementTemplateData: Swift.String? = nil
        )
        {
            self.replacementTemplateData = replacementTemplateData
        }
    }

}

extension SesV2ClientTypes.ReputationOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastFreshStart = "LastFreshStart"
        case reputationMetricsEnabled = "ReputationMetricsEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastFreshStart = lastFreshStart {
            try encodeContainer.encode(lastFreshStart.timeIntervalSince1970, forKey: .lastFreshStart)
        }
        if reputationMetricsEnabled != false {
            try encodeContainer.encode(reputationMetricsEnabled, forKey: .reputationMetricsEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reputationMetricsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .reputationMetricsEnabled)
        reputationMetricsEnabled = reputationMetricsEnabledDecoded
        let lastFreshStartDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastFreshStart)
        lastFreshStart = lastFreshStartDecoded
    }
}

extension SesV2ClientTypes.ReputationOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReputationOptions(lastFreshStart: \(Swift.String(describing: lastFreshStart)), reputationMetricsEnabled: \(Swift.String(describing: reputationMetricsEnabled)))"}
}

extension SesV2ClientTypes {
    /// Enable or disable collection of reputation metrics for emails that you send using this
    ///             configuration set in the current AWS Region.
    public struct ReputationOptions: Swift.Equatable {
        /// The date and time (in Unix time) when the reputation metrics were last given a fresh
        ///             start. When your account is given a fresh start, your reputation metrics are calculated
        ///             starting from the date of the fresh start.
        public let lastFreshStart: ClientRuntime.Date?
        /// If true, tracking of reputation metrics is enabled for the configuration
        ///             set. If false, tracking of reputation metrics is disabled for the
        ///             configuration set.
        public let reputationMetricsEnabled: Swift.Bool

        public init (
            lastFreshStart: ClientRuntime.Date? = nil,
            reputationMetricsEnabled: Swift.Bool = false
        )
        {
            self.lastFreshStart = lastFreshStart
            self.reputationMetricsEnabled = reputationMetricsEnabled
        }
    }

}

extension SesV2ClientTypes.ReviewDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caseId = "CaseId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let caseId = caseId {
            try encodeContainer.encode(caseId, forKey: .caseId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ReviewStatus.self, forKey: .status)
        status = statusDecoded
        let caseIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caseId)
        caseId = caseIdDecoded
    }
}

extension SesV2ClientTypes.ReviewDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReviewDetails(caseId: \(Swift.String(describing: caseId)), status: \(Swift.String(describing: status)))"}
}

extension SesV2ClientTypes {
    /// An object that contains information about your account details review.
    public struct ReviewDetails: Swift.Equatable {
        /// The associated support center case ID (if any).
        public let caseId: Swift.String?
        /// The status of the latest review of your account. The status can be one of the
        ///             following:
        ///
        ///
        ///
        ///                   PENDING – We have received your appeal and are in the
        ///                     process of reviewing it.
        ///
        ///
        ///
        ///                   GRANTED – Your appeal has been reviewed and your production
        ///                     access has been granted.
        ///
        ///
        ///
        ///                   DENIED – Your appeal has been reviewed and your production
        ///                     access has been denied.
        ///
        ///
        ///
        ///                   FAILED – An internal error occurred and we didn't receive
        ///                     your appeal. You can submit your appeal again.
        ///
        ///
        public let status: SesV2ClientTypes.ReviewStatus?

        public init (
            caseId: Swift.String? = nil,
            status: SesV2ClientTypes.ReviewStatus? = nil
        )
        {
            self.caseId = caseId
            self.status = status
        }
    }

}

extension SesV2ClientTypes {
    public enum ReviewStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case denied
        case failed
        case granted
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [ReviewStatus] {
            return [
                .denied,
                .failed,
                .granted,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .denied: return "DENIED"
            case .failed: return "FAILED"
            case .granted: return "GRANTED"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReviewStatus(rawValue: rawValue) ?? ReviewStatus.sdkUnknown(rawValue)
        }
    }
}

public struct SendBulkEmailInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendBulkEmailInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendBulkEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendBulkEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendBulkEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendBulkEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendBulkEmailOutputError>
}

extension SendBulkEmailInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendBulkEmailInput(bulkEmailEntries: \(Swift.String(describing: bulkEmailEntries)), configurationSetName: \(Swift.String(describing: configurationSetName)), defaultContent: \(Swift.String(describing: defaultContent)), defaultEmailTags: \(Swift.String(describing: defaultEmailTags)), feedbackForwardingEmailAddress: \(Swift.String(describing: feedbackForwardingEmailAddress)), feedbackForwardingEmailAddressIdentityArn: \(Swift.String(describing: feedbackForwardingEmailAddressIdentityArn)), fromEmailAddress: \(Swift.String(describing: fromEmailAddress)), fromEmailAddressIdentityArn: \(Swift.String(describing: fromEmailAddressIdentityArn)), replyToAddresses: \(Swift.String(describing: replyToAddresses)))"}
}

extension SendBulkEmailInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bulkEmailEntries = "BulkEmailEntries"
        case configurationSetName = "ConfigurationSetName"
        case defaultContent = "DefaultContent"
        case defaultEmailTags = "DefaultEmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case feedbackForwardingEmailAddressIdentityArn = "FeedbackForwardingEmailAddressIdentityArn"
        case fromEmailAddress = "FromEmailAddress"
        case fromEmailAddressIdentityArn = "FromEmailAddressIdentityArn"
        case replyToAddresses = "ReplyToAddresses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bulkEmailEntries = bulkEmailEntries {
            var bulkEmailEntriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bulkEmailEntries)
            for bulkemailentrylist0 in bulkEmailEntries {
                try bulkEmailEntriesContainer.encode(bulkemailentrylist0)
            }
        }
        if let configurationSetName = configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let defaultContent = defaultContent {
            try encodeContainer.encode(defaultContent, forKey: .defaultContent)
        }
        if let defaultEmailTags = defaultEmailTags {
            var defaultEmailTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .defaultEmailTags)
            for messagetaglist0 in defaultEmailTags {
                try defaultEmailTagsContainer.encode(messagetaglist0)
            }
        }
        if let feedbackForwardingEmailAddress = feedbackForwardingEmailAddress {
            try encodeContainer.encode(feedbackForwardingEmailAddress, forKey: .feedbackForwardingEmailAddress)
        }
        if let feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArn {
            try encodeContainer.encode(feedbackForwardingEmailAddressIdentityArn, forKey: .feedbackForwardingEmailAddressIdentityArn)
        }
        if let fromEmailAddress = fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let fromEmailAddressIdentityArn = fromEmailAddressIdentityArn {
            try encodeContainer.encode(fromEmailAddressIdentityArn, forKey: .fromEmailAddressIdentityArn)
        }
        if let replyToAddresses = replyToAddresses {
            var replyToAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replyToAddresses)
            for emailaddresslist0 in replyToAddresses {
                try replyToAddressesContainer.encode(emailaddresslist0)
            }
        }
    }
}

public struct SendBulkEmailInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendBulkEmailInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendBulkEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendBulkEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendBulkEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendBulkEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendBulkEmailOutputError>
}

public struct SendBulkEmailInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendBulkEmailInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendBulkEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendBulkEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendBulkEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendBulkEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendBulkEmailOutputError>
}

/// Represents a request to send email messages to multiple destinations using Amazon SES. For
///             more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
///                 Guide.
public struct SendBulkEmailInput: Swift.Equatable {
    /// The list of bulk email entry objects.
    /// This member is required.
    public let bulkEmailEntries: [SesV2ClientTypes.BulkEmailEntry]?
    /// The name of the configuration set that you want to use when sending the email.
    public let configurationSetName: Swift.String?
    /// An object that contains the body of the message. You can specify a template
    ///             message.
    /// This member is required.
    public let defaultContent: SesV2ClientTypes.BulkEmailContent?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send
    ///             using the SendEmail operation. Tags correspond to characteristics of the
    ///             email that you define, so that you can publish email sending events.
    public let defaultEmailTags: [SesV2ClientTypes.MessageTag]?
    /// The address that you want bounce and complaint notifications to be sent to.
    public let feedbackForwardingEmailAddress: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to use the
    ///             email address specified in the FeedbackForwardingEmailAddress
    ///             parameter.
    ///         For example, if the owner of example.com (which has ARN
    ///             arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that
    ///             authorizes you to use feedback@example.com, then you would specify the
    ///                 FeedbackForwardingEmailAddressIdentityArn to be
    ///             arn:aws:ses:us-east-1:123456789012:identity/example.com, and the
    ///                 FeedbackForwardingEmailAddress to be feedback@example.com.
    ///         For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide.
    public let feedbackForwardingEmailAddressIdentityArn: Swift.String?
    /// The email address that you want to use as the "From" address for the email. The
    ///             address that you specify has to be verified.
    public let fromEmailAddress: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to use the
    ///             email address specified in the FromEmailAddress parameter.
    ///         For example, if the owner of example.com (which has ARN
    ///             arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that
    ///             authorizes you to use sender@example.com, then you would specify the
    ///                 FromEmailAddressIdentityArn to be
    ///             arn:aws:ses:us-east-1:123456789012:identity/example.com, and the
    ///                 FromEmailAddress to be sender@example.com.
    ///         For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide.
    public let fromEmailAddressIdentityArn: Swift.String?
    /// The "Reply-to" email addresses for the message. When the recipient replies to the
    ///             message, each Reply-to address receives the reply.
    public let replyToAddresses: [Swift.String]?

    public init (
        bulkEmailEntries: [SesV2ClientTypes.BulkEmailEntry]? = nil,
        configurationSetName: Swift.String? = nil,
        defaultContent: SesV2ClientTypes.BulkEmailContent? = nil,
        defaultEmailTags: [SesV2ClientTypes.MessageTag]? = nil,
        feedbackForwardingEmailAddress: Swift.String? = nil,
        feedbackForwardingEmailAddressIdentityArn: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        fromEmailAddressIdentityArn: Swift.String? = nil,
        replyToAddresses: [Swift.String]? = nil
    )
    {
        self.bulkEmailEntries = bulkEmailEntries
        self.configurationSetName = configurationSetName
        self.defaultContent = defaultContent
        self.defaultEmailTags = defaultEmailTags
        self.feedbackForwardingEmailAddress = feedbackForwardingEmailAddress
        self.feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArn
        self.fromEmailAddress = fromEmailAddress
        self.fromEmailAddressIdentityArn = fromEmailAddressIdentityArn
        self.replyToAddresses = replyToAddresses
    }
}

struct SendBulkEmailInputBody: Swift.Equatable {
    public let fromEmailAddress: Swift.String?
    public let fromEmailAddressIdentityArn: Swift.String?
    public let replyToAddresses: [Swift.String]?
    public let feedbackForwardingEmailAddress: Swift.String?
    public let feedbackForwardingEmailAddressIdentityArn: Swift.String?
    public let defaultEmailTags: [SesV2ClientTypes.MessageTag]?
    public let defaultContent: SesV2ClientTypes.BulkEmailContent?
    public let bulkEmailEntries: [SesV2ClientTypes.BulkEmailEntry]?
    public let configurationSetName: Swift.String?
}

extension SendBulkEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bulkEmailEntries = "BulkEmailEntries"
        case configurationSetName = "ConfigurationSetName"
        case defaultContent = "DefaultContent"
        case defaultEmailTags = "DefaultEmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case feedbackForwardingEmailAddressIdentityArn = "FeedbackForwardingEmailAddressIdentityArn"
        case fromEmailAddress = "FromEmailAddress"
        case fromEmailAddressIdentityArn = "FromEmailAddressIdentityArn"
        case replyToAddresses = "ReplyToAddresses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let fromEmailAddressIdentityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddressIdentityArn)
        fromEmailAddressIdentityArn = fromEmailAddressIdentityArnDecoded
        let replyToAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .replyToAddresses)
        var replyToAddressesDecoded0:[Swift.String]? = nil
        if let replyToAddressesContainer = replyToAddressesContainer {
            replyToAddressesDecoded0 = [Swift.String]()
            for string0 in replyToAddressesContainer {
                if let string0 = string0 {
                    replyToAddressesDecoded0?.append(string0)
                }
            }
        }
        replyToAddresses = replyToAddressesDecoded0
        let feedbackForwardingEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackForwardingEmailAddress)
        feedbackForwardingEmailAddress = feedbackForwardingEmailAddressDecoded
        let feedbackForwardingEmailAddressIdentityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackForwardingEmailAddressIdentityArn)
        feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArnDecoded
        let defaultEmailTagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.MessageTag?].self, forKey: .defaultEmailTags)
        var defaultEmailTagsDecoded0:[SesV2ClientTypes.MessageTag]? = nil
        if let defaultEmailTagsContainer = defaultEmailTagsContainer {
            defaultEmailTagsDecoded0 = [SesV2ClientTypes.MessageTag]()
            for structure0 in defaultEmailTagsContainer {
                if let structure0 = structure0 {
                    defaultEmailTagsDecoded0?.append(structure0)
                }
            }
        }
        defaultEmailTags = defaultEmailTagsDecoded0
        let defaultContentDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.BulkEmailContent.self, forKey: .defaultContent)
        defaultContent = defaultContentDecoded
        let bulkEmailEntriesContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.BulkEmailEntry?].self, forKey: .bulkEmailEntries)
        var bulkEmailEntriesDecoded0:[SesV2ClientTypes.BulkEmailEntry]? = nil
        if let bulkEmailEntriesContainer = bulkEmailEntriesContainer {
            bulkEmailEntriesDecoded0 = [SesV2ClientTypes.BulkEmailEntry]()
            for structure0 in bulkEmailEntriesContainer {
                if let structure0 = structure0 {
                    bulkEmailEntriesDecoded0?.append(structure0)
                }
            }
        }
        bulkEmailEntries = bulkEmailEntriesDecoded0
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension SendBulkEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendBulkEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSuspendedException" : self = .accountSuspendedException(try AccountSuspendedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SendingPausedException" : self = .sendingPausedException(try SendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendBulkEmailOutputError: Swift.Error, Swift.Equatable {
    case accountSuspendedException(AccountSuspendedException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case notFoundException(NotFoundException)
    case sendingPausedException(SendingPausedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendBulkEmailOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendBulkEmailOutputResponse(bulkEmailEntryResults: \(Swift.String(describing: bulkEmailEntryResults)))"}
}

extension SendBulkEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendBulkEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bulkEmailEntryResults = output.bulkEmailEntryResults
        } else {
            self.bulkEmailEntryResults = nil
        }
    }
}

/// The following data is returned in JSON format by the service.
public struct SendBulkEmailOutputResponse: Swift.Equatable {
    /// A list of BulkMailEntry objects.
    /// This member is required.
    public let bulkEmailEntryResults: [SesV2ClientTypes.BulkEmailEntryResult]?

    public init (
        bulkEmailEntryResults: [SesV2ClientTypes.BulkEmailEntryResult]? = nil
    )
    {
        self.bulkEmailEntryResults = bulkEmailEntryResults
    }
}

struct SendBulkEmailOutputResponseBody: Swift.Equatable {
    public let bulkEmailEntryResults: [SesV2ClientTypes.BulkEmailEntryResult]?
}

extension SendBulkEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bulkEmailEntryResults = "BulkEmailEntryResults"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bulkEmailEntryResultsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.BulkEmailEntryResult?].self, forKey: .bulkEmailEntryResults)
        var bulkEmailEntryResultsDecoded0:[SesV2ClientTypes.BulkEmailEntryResult]? = nil
        if let bulkEmailEntryResultsContainer = bulkEmailEntryResultsContainer {
            bulkEmailEntryResultsDecoded0 = [SesV2ClientTypes.BulkEmailEntryResult]()
            for structure0 in bulkEmailEntryResultsContainer {
                if let structure0 = structure0 {
                    bulkEmailEntryResultsDecoded0?.append(structure0)
                }
            }
        }
        bulkEmailEntryResults = bulkEmailEntryResultsDecoded0
    }
}

public struct SendCustomVerificationEmailInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendCustomVerificationEmailInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendCustomVerificationEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendCustomVerificationEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendCustomVerificationEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendCustomVerificationEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendCustomVerificationEmailOutputError>
}

extension SendCustomVerificationEmailInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendCustomVerificationEmailInput(configurationSetName: \(Swift.String(describing: configurationSetName)), emailAddress: \(Swift.String(describing: emailAddress)), templateName: \(Swift.String(describing: templateName)))"}
}

extension SendCustomVerificationEmailInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case emailAddress = "EmailAddress"
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSetName = configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let emailAddress = emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let templateName = templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
    }
}

public struct SendCustomVerificationEmailInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendCustomVerificationEmailInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendCustomVerificationEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendCustomVerificationEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendCustomVerificationEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendCustomVerificationEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendCustomVerificationEmailOutputError>
}

public struct SendCustomVerificationEmailInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendCustomVerificationEmailInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendCustomVerificationEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendCustomVerificationEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendCustomVerificationEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendCustomVerificationEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendCustomVerificationEmailOutputError>
}

/// Represents a request to send a custom verification email to a specified
///             recipient.
public struct SendCustomVerificationEmailInput: Swift.Equatable {
    /// Name of a configuration set to use when sending the verification email.
    public let configurationSetName: Swift.String?
    /// The email address to verify.
    /// This member is required.
    public let emailAddress: Swift.String?
    /// The name of the custom verification email template to use when sending the
    ///             verification email.
    /// This member is required.
    public let templateName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        emailAddress: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.emailAddress = emailAddress
        self.templateName = templateName
    }
}

struct SendCustomVerificationEmailInputBody: Swift.Equatable {
    public let emailAddress: Swift.String?
    public let templateName: Swift.String?
    public let configurationSetName: Swift.String?
}

extension SendCustomVerificationEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case emailAddress = "EmailAddress"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}

extension SendCustomVerificationEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendCustomVerificationEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SendingPausedException" : self = .sendingPausedException(try SendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendCustomVerificationEmailOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case notFoundException(NotFoundException)
    case sendingPausedException(SendingPausedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendCustomVerificationEmailOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendCustomVerificationEmailOutputResponse(messageId: \(Swift.String(describing: messageId)))"}
}

extension SendCustomVerificationEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendCustomVerificationEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

/// The following element is returned by the service.
public struct SendCustomVerificationEmailOutputResponse: Swift.Equatable {
    /// The unique message identifier returned from the
    ///                 SendCustomVerificationEmail operation.
    public let messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendCustomVerificationEmailOutputResponseBody: Swift.Equatable {
    public let messageId: Swift.String?
}

extension SendCustomVerificationEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

public struct SendEmailInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendEmailInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendEmailOutputError>
}

extension SendEmailInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendEmailInput(configurationSetName: \(Swift.String(describing: configurationSetName)), content: \(Swift.String(describing: content)), destination: \(Swift.String(describing: destination)), emailTags: \(Swift.String(describing: emailTags)), feedbackForwardingEmailAddress: \(Swift.String(describing: feedbackForwardingEmailAddress)), feedbackForwardingEmailAddressIdentityArn: \(Swift.String(describing: feedbackForwardingEmailAddressIdentityArn)), fromEmailAddress: \(Swift.String(describing: fromEmailAddress)), fromEmailAddressIdentityArn: \(Swift.String(describing: fromEmailAddressIdentityArn)), listManagementOptions: \(Swift.String(describing: listManagementOptions)), replyToAddresses: \(Swift.String(describing: replyToAddresses)))"}
}

extension SendEmailInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case content = "Content"
        case destination = "Destination"
        case emailTags = "EmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case feedbackForwardingEmailAddressIdentityArn = "FeedbackForwardingEmailAddressIdentityArn"
        case fromEmailAddress = "FromEmailAddress"
        case fromEmailAddressIdentityArn = "FromEmailAddressIdentityArn"
        case listManagementOptions = "ListManagementOptions"
        case replyToAddresses = "ReplyToAddresses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSetName = configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let emailTags = emailTags {
            var emailTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .emailTags)
            for messagetaglist0 in emailTags {
                try emailTagsContainer.encode(messagetaglist0)
            }
        }
        if let feedbackForwardingEmailAddress = feedbackForwardingEmailAddress {
            try encodeContainer.encode(feedbackForwardingEmailAddress, forKey: .feedbackForwardingEmailAddress)
        }
        if let feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArn {
            try encodeContainer.encode(feedbackForwardingEmailAddressIdentityArn, forKey: .feedbackForwardingEmailAddressIdentityArn)
        }
        if let fromEmailAddress = fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let fromEmailAddressIdentityArn = fromEmailAddressIdentityArn {
            try encodeContainer.encode(fromEmailAddressIdentityArn, forKey: .fromEmailAddressIdentityArn)
        }
        if let listManagementOptions = listManagementOptions {
            try encodeContainer.encode(listManagementOptions, forKey: .listManagementOptions)
        }
        if let replyToAddresses = replyToAddresses {
            var replyToAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replyToAddresses)
            for emailaddresslist0 in replyToAddresses {
                try replyToAddressesContainer.encode(emailaddresslist0)
            }
        }
    }
}

public struct SendEmailInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendEmailInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendEmailOutputError>
}

public struct SendEmailInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendEmailInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendEmailOutputError>
}

/// Represents a request to send a single formatted email using Amazon SES. For more
///             information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-formatted.html">Amazon SES Developer
///                 Guide.
public struct SendEmailInput: Swift.Equatable {
    /// The name of the configuration set that you want to use when sending the email.
    public let configurationSetName: Swift.String?
    /// An object that contains the body of the message. You can send either a Simple message
    ///             Raw message or a template Message.
    /// This member is required.
    public let content: SesV2ClientTypes.EmailContent?
    /// An object that contains the recipients of the email message.
    public let destination: SesV2ClientTypes.Destination?
    /// A list of tags, in the form of name/value pairs, to apply to an email that you send
    ///             using the SendEmail operation. Tags correspond to characteristics of the
    ///             email that you define, so that you can publish email sending events.
    public let emailTags: [SesV2ClientTypes.MessageTag]?
    /// The address that you want bounce and complaint notifications to be sent to.
    public let feedbackForwardingEmailAddress: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to use the
    ///             email address specified in the FeedbackForwardingEmailAddress
    ///             parameter.
    ///         For example, if the owner of example.com (which has ARN
    ///             arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that
    ///             authorizes you to use feedback@example.com, then you would specify the
    ///                 FeedbackForwardingEmailAddressIdentityArn to be
    ///             arn:aws:ses:us-east-1:123456789012:identity/example.com, and the
    ///                 FeedbackForwardingEmailAddress to be feedback@example.com.
    ///         For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide.
    public let feedbackForwardingEmailAddressIdentityArn: Swift.String?
    /// The email address that you want to use as the "From" address for the email. The
    ///             address that you specify has to be verified.
    ///
    public let fromEmailAddress: Swift.String?
    /// This parameter is used only for sending authorization. It is the ARN of the identity
    ///             that is associated with the sending authorization policy that permits you to use the
    ///             email address specified in the FromEmailAddress parameter.
    ///         For example, if the owner of example.com (which has ARN
    ///             arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that
    ///             authorizes you to use sender@example.com, then you would specify the
    ///                 FromEmailAddressIdentityArn to be
    ///             arn:aws:ses:us-east-1:123456789012:identity/example.com, and the
    ///                 FromEmailAddress to be sender@example.com.
    ///         For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide.
    ///         For Raw emails, the FromEmailAddressIdentityArn value overrides the
    ///             X-SES-SOURCE-ARN and X-SES-FROM-ARN headers specified in raw email message
    ///             content.
    public let fromEmailAddressIdentityArn: Swift.String?
    /// An object used to specify a list or topic to which an email belongs, which will be
    ///             used when a contact chooses to unsubscribe.
    public let listManagementOptions: SesV2ClientTypes.ListManagementOptions?
    /// The "Reply-to" email addresses for the message. When the recipient replies to the
    ///             message, each Reply-to address receives the reply.
    public let replyToAddresses: [Swift.String]?

    public init (
        configurationSetName: Swift.String? = nil,
        content: SesV2ClientTypes.EmailContent? = nil,
        destination: SesV2ClientTypes.Destination? = nil,
        emailTags: [SesV2ClientTypes.MessageTag]? = nil,
        feedbackForwardingEmailAddress: Swift.String? = nil,
        feedbackForwardingEmailAddressIdentityArn: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        fromEmailAddressIdentityArn: Swift.String? = nil,
        listManagementOptions: SesV2ClientTypes.ListManagementOptions? = nil,
        replyToAddresses: [Swift.String]? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.content = content
        self.destination = destination
        self.emailTags = emailTags
        self.feedbackForwardingEmailAddress = feedbackForwardingEmailAddress
        self.feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArn
        self.fromEmailAddress = fromEmailAddress
        self.fromEmailAddressIdentityArn = fromEmailAddressIdentityArn
        self.listManagementOptions = listManagementOptions
        self.replyToAddresses = replyToAddresses
    }
}

struct SendEmailInputBody: Swift.Equatable {
    public let fromEmailAddress: Swift.String?
    public let fromEmailAddressIdentityArn: Swift.String?
    public let destination: SesV2ClientTypes.Destination?
    public let replyToAddresses: [Swift.String]?
    public let feedbackForwardingEmailAddress: Swift.String?
    public let feedbackForwardingEmailAddressIdentityArn: Swift.String?
    public let content: SesV2ClientTypes.EmailContent?
    public let emailTags: [SesV2ClientTypes.MessageTag]?
    public let configurationSetName: Swift.String?
    public let listManagementOptions: SesV2ClientTypes.ListManagementOptions?
}

extension SendEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case content = "Content"
        case destination = "Destination"
        case emailTags = "EmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case feedbackForwardingEmailAddressIdentityArn = "FeedbackForwardingEmailAddressIdentityArn"
        case fromEmailAddress = "FromEmailAddress"
        case fromEmailAddressIdentityArn = "FromEmailAddressIdentityArn"
        case listManagementOptions = "ListManagementOptions"
        case replyToAddresses = "ReplyToAddresses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let fromEmailAddressIdentityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddressIdentityArn)
        fromEmailAddressIdentityArn = fromEmailAddressIdentityArnDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
        let replyToAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .replyToAddresses)
        var replyToAddressesDecoded0:[Swift.String]? = nil
        if let replyToAddressesContainer = replyToAddressesContainer {
            replyToAddressesDecoded0 = [Swift.String]()
            for string0 in replyToAddressesContainer {
                if let string0 = string0 {
                    replyToAddressesDecoded0?.append(string0)
                }
            }
        }
        replyToAddresses = replyToAddressesDecoded0
        let feedbackForwardingEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackForwardingEmailAddress)
        feedbackForwardingEmailAddress = feedbackForwardingEmailAddressDecoded
        let feedbackForwardingEmailAddressIdentityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackForwardingEmailAddressIdentityArn)
        feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArnDecoded
        let contentDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.EmailContent.self, forKey: .content)
        content = contentDecoded
        let emailTagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.MessageTag?].self, forKey: .emailTags)
        var emailTagsDecoded0:[SesV2ClientTypes.MessageTag]? = nil
        if let emailTagsContainer = emailTagsContainer {
            emailTagsDecoded0 = [SesV2ClientTypes.MessageTag]()
            for structure0 in emailTagsContainer {
                if let structure0 = structure0 {
                    emailTagsDecoded0?.append(structure0)
                }
            }
        }
        emailTags = emailTagsDecoded0
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let listManagementOptionsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ListManagementOptions.self, forKey: .listManagementOptions)
        listManagementOptions = listManagementOptionsDecoded
    }
}

extension SendEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountSuspendedException" : self = .accountSuspendedException(try AccountSuspendedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MailFromDomainNotVerifiedException" : self = .mailFromDomainNotVerifiedException(try MailFromDomainNotVerifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MessageRejected" : self = .messageRejected(try MessageRejected(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SendingPausedException" : self = .sendingPausedException(try SendingPausedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendEmailOutputError: Swift.Error, Swift.Equatable {
    case accountSuspendedException(AccountSuspendedException)
    case badRequestException(BadRequestException)
    case limitExceededException(LimitExceededException)
    case mailFromDomainNotVerifiedException(MailFromDomainNotVerifiedException)
    case messageRejected(MessageRejected)
    case notFoundException(NotFoundException)
    case sendingPausedException(SendingPausedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendEmailOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendEmailOutputResponse(messageId: \(Swift.String(describing: messageId)))"}
}

extension SendEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendEmailOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messageId = output.messageId
        } else {
            self.messageId = nil
        }
    }
}

/// A unique message ID that you receive when an email is accepted for sending.
public struct SendEmailOutputResponse: Swift.Equatable {
    /// A unique identifier for the message that is generated when the message is
    ///             accepted.
    ///
    ///             It's possible for Amazon SES to accept a message without sending it. This can happen
    ///                 when the message that you're trying to send has an attachment contains a virus, or
    ///                 when you send a templated email that contains invalid personalization content, for
    ///                 example.
    ///
    public let messageId: Swift.String?

    public init (
        messageId: Swift.String? = nil
    )
    {
        self.messageId = messageId
    }
}

struct SendEmailOutputResponseBody: Swift.Equatable {
    public let messageId: Swift.String?
}

extension SendEmailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId = "MessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
    }
}

extension SesV2ClientTypes.SendQuota: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max24HourSend = "Max24HourSend"
        case maxSendRate = "MaxSendRate"
        case sentLast24Hours = "SentLast24Hours"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if max24HourSend != 0.0 {
            try encodeContainer.encode(max24HourSend, forKey: .max24HourSend)
        }
        if maxSendRate != 0.0 {
            try encodeContainer.encode(maxSendRate, forKey: .maxSendRate)
        }
        if sentLast24Hours != 0.0 {
            try encodeContainer.encode(sentLast24Hours, forKey: .sentLast24Hours)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let max24HourSendDecoded = try containerValues.decode(Swift.Double.self, forKey: .max24HourSend)
        max24HourSend = max24HourSendDecoded
        let maxSendRateDecoded = try containerValues.decode(Swift.Double.self, forKey: .maxSendRate)
        maxSendRate = maxSendRateDecoded
        let sentLast24HoursDecoded = try containerValues.decode(Swift.Double.self, forKey: .sentLast24Hours)
        sentLast24Hours = sentLast24HoursDecoded
    }
}

extension SesV2ClientTypes.SendQuota: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendQuota(max24HourSend: \(Swift.String(describing: max24HourSend)), maxSendRate: \(Swift.String(describing: maxSendRate)), sentLast24Hours: \(Swift.String(describing: sentLast24Hours)))"}
}

extension SesV2ClientTypes {
    /// An object that contains information about the per-day and per-second sending limits
    ///             for your Amazon SES account in the current AWS Region.
    public struct SendQuota: Swift.Equatable {
        /// The maximum number of emails that you can send in the current AWS Region over a
        ///             24-hour period. This value is also called your sending
        ///             quota.
        public let max24HourSend: Swift.Double
        /// The maximum number of emails that you can send per second in the current AWS Region.
        ///             This value is also called your maximum sending rate or your
        ///                 maximum TPS (transactions per second) rate.
        public let maxSendRate: Swift.Double
        /// The number of emails sent from your Amazon SES account in the current AWS Region over the
        ///             past 24 hours.
        public let sentLast24Hours: Swift.Double

        public init (
            max24HourSend: Swift.Double = 0.0,
            maxSendRate: Swift.Double = 0.0,
            sentLast24Hours: Swift.Double = 0.0
        )
        {
            self.max24HourSend = max24HourSend
            self.maxSendRate = maxSendRate
            self.sentLast24Hours = sentLast24Hours
        }
    }

}

extension SesV2ClientTypes.SendingOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendingEnabled = "SendingEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if sendingEnabled != false {
            try encodeContainer.encode(sendingEnabled, forKey: .sendingEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sendingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .sendingEnabled)
        sendingEnabled = sendingEnabledDecoded
    }
}

extension SesV2ClientTypes.SendingOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendingOptions(sendingEnabled: \(Swift.String(describing: sendingEnabled)))"}
}

extension SesV2ClientTypes {
    /// Used to enable or disable email sending for messages that use this configuration set
    ///             in the current AWS Region.
    public struct SendingOptions: Swift.Equatable {
        /// If true, email sending is enabled for the configuration set. If
        ///                 false, email sending is disabled for the configuration set.
        public let sendingEnabled: Swift.Bool

        public init (
            sendingEnabled: Swift.Bool = false
        )
        {
            self.sendingEnabled = sendingEnabled
        }
    }

}

extension SendingPausedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendingPausedException(message: \(Swift.String(describing: message)))"}
}

extension SendingPausedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendingPausedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The message can't be sent because the account's ability to send email is currently
///             paused.
public struct SendingPausedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SendingPausedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension SendingPausedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesV2ClientTypes.SnsDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let topicArn = topicArn {
            try encodeContainer.encode(topicArn, forKey: .topicArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
    }
}

extension SesV2ClientTypes.SnsDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SnsDestination(topicArn: \(Swift.String(describing: topicArn)))"}
}

extension SesV2ClientTypes {
    /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to
    ///             send notification when certain email events occur.
    public struct SnsDestination: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic that you want to publish email
        ///             events to. For more information about Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer
        ///                 Guide.
        /// This member is required.
        public let topicArn: Swift.String?

        public init (
            topicArn: Swift.String? = nil
        )
        {
            self.topicArn = topicArn
        }
    }

}

extension SesV2ClientTypes {
    public enum SubscriptionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case optIn
        case optOut
        case sdkUnknown(Swift.String)

        public static var allCases: [SubscriptionStatus] {
            return [
                .optIn,
                .optOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .optIn: return "OPT_IN"
            case .optOut: return "OPT_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SubscriptionStatus(rawValue: rawValue) ?? SubscriptionStatus.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.SuppressedDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case emailAddress = "EmailAddress"
        case lastUpdateTime = "LastUpdateTime"
        case reason = "Reason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            try encodeContainer.encode(attributes, forKey: .attributes)
        }
        if let emailAddress = emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let reason = reason {
            try encodeContainer.encode(reason.rawValue, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SuppressionListReason.self, forKey: .reason)
        reason = reasonDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let attributesDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SuppressedDestinationAttributes.self, forKey: .attributes)
        attributes = attributesDecoded
    }
}

extension SesV2ClientTypes.SuppressedDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SuppressedDestination(attributes: \(Swift.String(describing: attributes)), emailAddress: \(Swift.String(describing: emailAddress)), lastUpdateTime: \(Swift.String(describing: lastUpdateTime)), reason: \(Swift.String(describing: reason)))"}
}

extension SesV2ClientTypes {
    /// An object that contains information about an email address that is on the suppression
    ///             list for your account.
    public struct SuppressedDestination: Swift.Equatable {
        /// An optional value that can contain additional information about the reasons that the
        ///             address was added to the suppression list for your account.
        public let attributes: SesV2ClientTypes.SuppressedDestinationAttributes?
        /// The email address that is on the suppression list for your account.
        /// This member is required.
        public let emailAddress: Swift.String?
        /// The date and time when the suppressed destination was last updated, shown in Unix time
        ///             format.
        /// This member is required.
        public let lastUpdateTime: ClientRuntime.Date?
        /// The reason that the address was added to the suppression list for your account.
        /// This member is required.
        public let reason: SesV2ClientTypes.SuppressionListReason?

        public init (
            attributes: SesV2ClientTypes.SuppressedDestinationAttributes? = nil,
            emailAddress: Swift.String? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            reason: SesV2ClientTypes.SuppressionListReason? = nil
        )
        {
            self.attributes = attributes
            self.emailAddress = emailAddress
            self.lastUpdateTime = lastUpdateTime
            self.reason = reason
        }
    }

}

extension SesV2ClientTypes.SuppressedDestinationAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case feedbackId = "FeedbackId"
        case messageId = "MessageId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let feedbackId = feedbackId {
            try encodeContainer.encode(feedbackId, forKey: .feedbackId)
        }
        if let messageId = messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let feedbackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackId)
        feedbackId = feedbackIdDecoded
    }
}

extension SesV2ClientTypes.SuppressedDestinationAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SuppressedDestinationAttributes(feedbackId: \(Swift.String(describing: feedbackId)), messageId: \(Swift.String(describing: messageId)))"}
}

extension SesV2ClientTypes {
    /// An object that contains additional attributes that are related an email address that
    ///             is on the suppression list for your account.
    public struct SuppressedDestinationAttributes: Swift.Equatable {
        /// A unique identifier that's generated when an email address is added to the suppression
        ///             list for your account.
        public let feedbackId: Swift.String?
        /// The unique identifier of the email message that caused the email address to be added
        ///             to the suppression list for your account.
        public let messageId: Swift.String?

        public init (
            feedbackId: Swift.String? = nil,
            messageId: Swift.String? = nil
        )
        {
            self.feedbackId = feedbackId
            self.messageId = messageId
        }
    }

}

extension SesV2ClientTypes.SuppressedDestinationSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emailAddress = "EmailAddress"
        case lastUpdateTime = "LastUpdateTime"
        case reason = "Reason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailAddress = emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let reason = reason {
            try encodeContainer.encode(reason.rawValue, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SuppressionListReason.self, forKey: .reason)
        reason = reasonDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension SesV2ClientTypes.SuppressedDestinationSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SuppressedDestinationSummary(emailAddress: \(Swift.String(describing: emailAddress)), lastUpdateTime: \(Swift.String(describing: lastUpdateTime)), reason: \(Swift.String(describing: reason)))"}
}

extension SesV2ClientTypes {
    /// A summary that describes the suppressed email address.
    public struct SuppressedDestinationSummary: Swift.Equatable {
        /// The email address that's on the suppression list for your account.
        /// This member is required.
        public let emailAddress: Swift.String?
        /// The date and time when the suppressed destination was last updated, shown in Unix time
        ///             format.
        /// This member is required.
        public let lastUpdateTime: ClientRuntime.Date?
        /// The reason that the address was added to the suppression list for your account.
        /// This member is required.
        public let reason: SesV2ClientTypes.SuppressionListReason?

        public init (
            emailAddress: Swift.String? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            reason: SesV2ClientTypes.SuppressionListReason? = nil
        )
        {
            self.emailAddress = emailAddress
            self.lastUpdateTime = lastUpdateTime
            self.reason = reason
        }
    }

}

extension SesV2ClientTypes.SuppressionAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressedReasons = "SuppressedReasons"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let suppressedReasons = suppressedReasons {
            var suppressedReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suppressedReasons)
            for suppressionlistreasons0 in suppressedReasons {
                try suppressedReasonsContainer.encode(suppressionlistreasons0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressedReasonsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.SuppressionListReason?].self, forKey: .suppressedReasons)
        var suppressedReasonsDecoded0:[SesV2ClientTypes.SuppressionListReason]? = nil
        if let suppressedReasonsContainer = suppressedReasonsContainer {
            suppressedReasonsDecoded0 = [SesV2ClientTypes.SuppressionListReason]()
            for string0 in suppressedReasonsContainer {
                if let string0 = string0 {
                    suppressedReasonsDecoded0?.append(string0)
                }
            }
        }
        suppressedReasons = suppressedReasonsDecoded0
    }
}

extension SesV2ClientTypes.SuppressionAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SuppressionAttributes(suppressedReasons: \(Swift.String(describing: suppressedReasons)))"}
}

extension SesV2ClientTypes {
    /// An object that contains information about the email address suppression preferences
    ///             for your account in the current AWS Region.
    public struct SuppressionAttributes: Swift.Equatable {
        /// A list that contains the reasons that email addresses will be automatically added to
        ///             the suppression list for your account. This list can contain any or all of the
        ///             following:
        ///
        ///
        ///
        ///                   COMPLAINT – Amazon SES adds an email address to the suppression
        ///                     list for your account when a message sent to that address results in a
        ///                     complaint.
        ///
        ///
        ///
        ///                   BOUNCE – Amazon SES adds an email address to the suppression
        ///                     list for your account when a message sent to that address results in a hard
        ///                     bounce.
        ///
        ///
        public let suppressedReasons: [SesV2ClientTypes.SuppressionListReason]?

        public init (
            suppressedReasons: [SesV2ClientTypes.SuppressionListReason]? = nil
        )
        {
            self.suppressedReasons = suppressedReasons
        }
    }

}

extension SesV2ClientTypes.SuppressionListDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressionListImportAction = "SuppressionListImportAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let suppressionListImportAction = suppressionListImportAction {
            try encodeContainer.encode(suppressionListImportAction.rawValue, forKey: .suppressionListImportAction)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressionListImportActionDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SuppressionListImportAction.self, forKey: .suppressionListImportAction)
        suppressionListImportAction = suppressionListImportActionDecoded
    }
}

extension SesV2ClientTypes.SuppressionListDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SuppressionListDestination(suppressionListImportAction: \(Swift.String(describing: suppressionListImportAction)))"}
}

extension SesV2ClientTypes {
    /// An object that contains details about the action of suppression list.
    public struct SuppressionListDestination: Swift.Equatable {
        /// The type of action that you want to perform on the address. Acceptable values:
        ///
        ///
        ///                 PUT: add the addresses to the suppression list. If the record already exists,
        ///                     it will override it with the new value.
        ///
        ///
        ///                 DELETE: remove the addresses from the suppression list.
        ///
        ///
        /// This member is required.
        public let suppressionListImportAction: SesV2ClientTypes.SuppressionListImportAction?

        public init (
            suppressionListImportAction: SesV2ClientTypes.SuppressionListImportAction? = nil
        )
        {
            self.suppressionListImportAction = suppressionListImportAction
        }
    }

}

extension SesV2ClientTypes {
    /// The type of action that you want to perform on the address. Acceptable values:
    ///
    ///
    ///                 PUT: add the addresses to the suppression list.
    ///
    ///
    ///                 DELETE: remove the address from the suppression list.
    ///
    ///
    public enum SuppressionListImportAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [SuppressionListImportAction] {
            return [
                .delete,
                .put,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SuppressionListImportAction(rawValue: rawValue) ?? SuppressionListImportAction.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes {
    /// The reason that the address was added to the suppression list for your account. The
    ///             value can be one of the following:
    ///
    ///
    ///
    ///                   COMPLAINT – Amazon SES added an email address to the suppression
    ///                     list for your account because a message sent to that address results in a
    ///                     complaint.
    ///
    ///
    ///
    ///                   BOUNCE – Amazon SES added an email address to the suppression
    ///                     list for your account because a message sent to that address results in a hard
    ///                     bounce.
    ///
    ///
    public enum SuppressionListReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bounce
        case complaint
        case sdkUnknown(Swift.String)

        public static var allCases: [SuppressionListReason] {
            return [
                .bounce,
                .complaint,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bounce: return "BOUNCE"
            case .complaint: return "COMPLAINT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SuppressionListReason(rawValue: rawValue) ?? SuppressionListReason.sdkUnknown(rawValue)
        }
    }
}

extension SesV2ClientTypes.SuppressionOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressedReasons = "SuppressedReasons"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let suppressedReasons = suppressedReasons {
            var suppressedReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suppressedReasons)
            for suppressionlistreasons0 in suppressedReasons {
                try suppressedReasonsContainer.encode(suppressionlistreasons0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressedReasonsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.SuppressionListReason?].self, forKey: .suppressedReasons)
        var suppressedReasonsDecoded0:[SesV2ClientTypes.SuppressionListReason]? = nil
        if let suppressedReasonsContainer = suppressedReasonsContainer {
            suppressedReasonsDecoded0 = [SesV2ClientTypes.SuppressionListReason]()
            for string0 in suppressedReasonsContainer {
                if let string0 = string0 {
                    suppressedReasonsDecoded0?.append(string0)
                }
            }
        }
        suppressedReasons = suppressedReasonsDecoded0
    }
}

extension SesV2ClientTypes.SuppressionOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SuppressionOptions(suppressedReasons: \(Swift.String(describing: suppressedReasons)))"}
}

extension SesV2ClientTypes {
    /// An object that contains information about the suppression list preferences for your
    ///             account.
    public struct SuppressionOptions: Swift.Equatable {
        /// A list that contains the reasons that email addresses are automatically added to the
        ///             suppression list for your account. This list can contain any or all of the
        ///             following:
        ///
        ///
        ///
        ///                   COMPLAINT – Amazon SES adds an email address to the suppression
        ///                     list for your account when a message sent to that address results in a
        ///                     complaint.
        ///
        ///
        ///
        ///                   BOUNCE – Amazon SES adds an email address to the suppression
        ///                     list for your account when a message sent to that address results in a hard
        ///                     bounce.
        ///
        ///
        public let suppressedReasons: [SesV2ClientTypes.SuppressionListReason]?

        public init (
            suppressedReasons: [SesV2ClientTypes.SuppressionListReason]? = nil
        )
        {
            self.suppressedReasons = suppressedReasons
        }
    }

}

extension SesV2ClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SesV2ClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension SesV2ClientTypes {
    /// An object that defines the tags that are associated with a resource.
    ///                 A tag is a label that you optionally define and associate with
    ///             a resource. Tags can help you categorize and manage resources in different ways, such as
    ///             by purpose, owner, environment, or other criteria. A resource can have as many as 50
    ///             tags.
    ///         Each tag consists of a required tag key and an
    ///                 associated tag value, both of which you define. A tag key is a
    ///             general label that acts as a category for a more specific tag value. A tag value acts as
    ///             a descriptor within a tag key. A tag key can contain as many as 128 characters. A tag
    ///             value can contain as many as 256 characters. The characters can be Unicode letters,
    ///             digits, white space, or one of the following symbols: _ . : / = + -. The following
    ///             additional restrictions apply to tags:
    ///
    ///
    ///                 Tag keys and values are case sensitive.
    ///
    ///
    ///                 For each associated resource, each tag key must be unique and it can have only
    ///                     one value.
    ///
    ///
    ///                 The aws: prefix is reserved for use by AWS; you can’t use it in
    ///                     any tag keys or values that you define. In addition, you can't edit or remove
    ///                     tag keys or values that use this prefix. Tags that use this prefix don’t count
    ///                     against the limit of 50 tags per resource.
    ///
    ///
    ///                 You can associate tags with public or shared resources, but the tags are
    ///                     available only for your AWS account, not any other accounts that share the
    ///                     resource. In addition, the tags are available only for resources that are
    ///                     located in the specified AWS Region for your AWS account.
    ///
    ///
    public struct Tag: Swift.Equatable {
        /// One part of a key-value pair that defines a tag. The maximum length of a tag key is
        ///             128 characters. The minimum length is 1 character.
        /// This member is required.
        public let key: Swift.String?
        /// The optional part of a key-value pair that defines a tag. The maximum length of a tag
        ///             value is 256 characters. The minimum length is 0 characters. If you don't want a
        ///             resource to have a specific tag value, don't specify a value for this parameter. If you
        ///             don't specify a value, Amazon SES sets the value to an empty string.
        /// This member is required.
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource that you want to add one or more tags
    ///             to.
    /// This member is required.
    public let resourceArn: Swift.String?
    /// A list of the tags that you want to add to the resource. A tag consists of a required
    ///             tag key (Key) and an associated tag value (Value). The maximum
    ///             length of a tag key is 128 characters. The maximum length of a tag value is 256
    ///             characters.
    /// This member is required.
    public let tags: [SesV2ClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [SesV2ClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let tags: [SesV2ClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SesV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SesV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SesV2ClientTypes.Template: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateArn = "TemplateArn"
        case templateData = "TemplateData"
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let templateArn = templateArn {
            try encodeContainer.encode(templateArn, forKey: .templateArn)
        }
        if let templateData = templateData {
            try encodeContainer.encode(templateData, forKey: .templateData)
        }
        if let templateName = templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
        let templateDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateData)
        templateData = templateDataDecoded
    }
}

extension SesV2ClientTypes.Template: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Template(templateArn: \(Swift.String(describing: templateArn)), templateData: \(Swift.String(describing: templateData)), templateName: \(Swift.String(describing: templateName)))"}
}

extension SesV2ClientTypes {
    /// An object that defines the email template to use for an email message, and the values
    ///             to use for any message variables in that template. An email
    ///                 template is a type of message template that contains content that you
    ///             want to define, save, and reuse in email messages that you send.
    public struct Template: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the template.
        public let templateArn: Swift.String?
        /// An object that defines the values to use for message variables in the template. This
        ///             object is a set of key-value pairs. Each key defines a message variable in the template.
        ///             The corresponding value defines the value to use for that variable.
        public let templateData: Swift.String?
        /// The name of the template. You will refer to this name when you send email using the
        ///                 SendTemplatedEmail or SendBulkTemplatedEmail operations.
        ///
        public let templateName: Swift.String?

        public init (
            templateArn: Swift.String? = nil,
            templateData: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.templateArn = templateArn
            self.templateData = templateData
            self.templateName = templateName
        }
    }

}

public struct TestRenderEmailTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestRenderEmailTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestRenderEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestRenderEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestRenderEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestRenderEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestRenderEmailTemplateOutputError>
}

extension TestRenderEmailTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestRenderEmailTemplateInput(templateData: \(Swift.String(describing: templateData)), templateName: \(Swift.String(describing: templateName)))"}
}

extension TestRenderEmailTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateData = "TemplateData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let templateData = templateData {
            try encodeContainer.encode(templateData, forKey: .templateData)
        }
    }
}

public struct TestRenderEmailTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestRenderEmailTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestRenderEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestRenderEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestRenderEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestRenderEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestRenderEmailTemplateOutputError>
}

public struct TestRenderEmailTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestRenderEmailTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestRenderEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestRenderEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestRenderEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestRenderEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestRenderEmailTemplateOutputError>
}

/// >Represents a request to create a preview of the MIME content of an email when
///             provided with a template and a set of replacement data.
public struct TestRenderEmailTemplateInput: Swift.Equatable {
    /// A list of replacement values to apply to the template. This parameter is a JSON
    ///             object, typically consisting of key-value pairs in which the keys correspond to
    ///             replacement tags in the email template.
    /// This member is required.
    public let templateData: Swift.String?
    /// The name of the template that you want to render.
    /// This member is required.
    public let templateName: Swift.String?

    public init (
        templateData: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateData = templateData
        self.templateName = templateName
    }
}

struct TestRenderEmailTemplateInputBody: Swift.Equatable {
    public let templateData: Swift.String?
}

extension TestRenderEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateData = "TemplateData"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateData)
        templateData = templateDataDecoded
    }
}

extension TestRenderEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TestRenderEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TestRenderEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TestRenderEmailTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestRenderEmailTemplateOutputResponse(renderedTemplate: \(Swift.String(describing: renderedTemplate)))"}
}

extension TestRenderEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TestRenderEmailTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.renderedTemplate = output.renderedTemplate
        } else {
            self.renderedTemplate = nil
        }
    }
}

/// The following element is returned by the service.
public struct TestRenderEmailTemplateOutputResponse: Swift.Equatable {
    /// The complete MIME message rendered by applying the data in the
    ///                 TemplateData parameter to the template specified in the TemplateName
    ///             parameter.
    /// This member is required.
    public let renderedTemplate: Swift.String?

    public init (
        renderedTemplate: Swift.String? = nil
    )
    {
        self.renderedTemplate = renderedTemplate
    }
}

struct TestRenderEmailTemplateOutputResponseBody: Swift.Equatable {
    public let renderedTemplate: Swift.String?
}

extension TestRenderEmailTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case renderedTemplate = "RenderedTemplate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let renderedTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .renderedTemplate)
        renderedTemplate = renderedTemplateDecoded
    }
}

extension SesV2ClientTypes {
    /// Specifies whether messages that use the configuration set are required to use
    ///             Transport Layer Security (TLS). If the value is Require, messages are only
    ///             delivered if a TLS connection can be established. If the value is Optional,
    ///             messages can be delivered in plain text if a TLS connection can't be established.
    public enum TlsPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `optional`
        case require
        case sdkUnknown(Swift.String)

        public static var allCases: [TlsPolicy] {
            return [
                .optional,
                .require,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .optional: return "OPTIONAL"
            case .require: return "REQUIRE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TlsPolicy(rawValue: rawValue) ?? TlsPolicy.sdkUnknown(rawValue)
        }
    }
}

extension TooManyRequestsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TooManyRequestsException(message: \(Swift.String(describing: message)))"}
}

extension TooManyRequestsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TooManyRequestsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Too many requests have been made to the operation.
public struct TooManyRequestsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyRequestsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TooManyRequestsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SesV2ClientTypes.Topic: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultSubscriptionStatus = "DefaultSubscriptionStatus"
        case description = "Description"
        case displayName = "DisplayName"
        case topicName = "TopicName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultSubscriptionStatus = defaultSubscriptionStatus {
            try encodeContainer.encode(defaultSubscriptionStatus.rawValue, forKey: .defaultSubscriptionStatus)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let topicName = topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let defaultSubscriptionStatusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SubscriptionStatus.self, forKey: .defaultSubscriptionStatus)
        defaultSubscriptionStatus = defaultSubscriptionStatusDecoded
    }
}

extension SesV2ClientTypes.Topic: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Topic(defaultSubscriptionStatus: \(Swift.String(describing: defaultSubscriptionStatus)), description: \(Swift.String(describing: description)), displayName: \(Swift.String(describing: displayName)), topicName: \(Swift.String(describing: topicName)))"}
}

extension SesV2ClientTypes {
    /// An interest group, theme, or label within a list. Lists can have multiple
    ///             topics.
    public struct Topic: Swift.Equatable {
        /// The default subscription status to be applied to a contact if the contact has not
        ///             noted their preference for subscribing to a topic.
        /// This member is required.
        public let defaultSubscriptionStatus: SesV2ClientTypes.SubscriptionStatus?
        /// A description of what the topic is about, which the contact will see.
        public let description: Swift.String?
        /// The name of the topic the contact will see.
        /// This member is required.
        public let displayName: Swift.String?
        /// The name of the topic.
        /// This member is required.
        public let topicName: Swift.String?

        public init (
            defaultSubscriptionStatus: SesV2ClientTypes.SubscriptionStatus? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.defaultSubscriptionStatus = defaultSubscriptionStatus
            self.description = description
            self.displayName = displayName
            self.topicName = topicName
        }
    }

}

extension SesV2ClientTypes.TopicFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicName = "TopicName"
        case useDefaultIfPreferenceUnavailable = "UseDefaultIfPreferenceUnavailable"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let topicName = topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
        if useDefaultIfPreferenceUnavailable != false {
            try encodeContainer.encode(useDefaultIfPreferenceUnavailable, forKey: .useDefaultIfPreferenceUnavailable)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
        let useDefaultIfPreferenceUnavailableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .useDefaultIfPreferenceUnavailable)
        useDefaultIfPreferenceUnavailable = useDefaultIfPreferenceUnavailableDecoded
    }
}

extension SesV2ClientTypes.TopicFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TopicFilter(topicName: \(Swift.String(describing: topicName)), useDefaultIfPreferenceUnavailable: \(Swift.String(describing: useDefaultIfPreferenceUnavailable)))"}
}

extension SesV2ClientTypes {
    /// Used for filtering by a specific topic preference.
    public struct TopicFilter: Swift.Equatable {
        /// The name of a topic on which you wish to apply the filter.
        public let topicName: Swift.String?
        /// Notes that the default subscription status should be applied to a contact because the
        ///             contact has not noted their preference for subscribing to a topic.
        public let useDefaultIfPreferenceUnavailable: Swift.Bool

        public init (
            topicName: Swift.String? = nil,
            useDefaultIfPreferenceUnavailable: Swift.Bool = false
        )
        {
            self.topicName = topicName
            self.useDefaultIfPreferenceUnavailable = useDefaultIfPreferenceUnavailable
        }
    }

}

extension SesV2ClientTypes.TopicPreference: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subscriptionStatus = "SubscriptionStatus"
        case topicName = "TopicName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let subscriptionStatus = subscriptionStatus {
            try encodeContainer.encode(subscriptionStatus.rawValue, forKey: .subscriptionStatus)
        }
        if let topicName = topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
        let subscriptionStatusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.SubscriptionStatus.self, forKey: .subscriptionStatus)
        subscriptionStatus = subscriptionStatusDecoded
    }
}

extension SesV2ClientTypes.TopicPreference: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TopicPreference(subscriptionStatus: \(Swift.String(describing: subscriptionStatus)), topicName: \(Swift.String(describing: topicName)))"}
}

extension SesV2ClientTypes {
    /// The contact's preference for being opted-in to or opted-out of a topic.
    public struct TopicPreference: Swift.Equatable {
        /// The contact's subscription status to a topic which is either OPT_IN or
        ///                 OPT_OUT.
        /// This member is required.
        public let subscriptionStatus: SesV2ClientTypes.SubscriptionStatus?
        /// The name of the topic.
        /// This member is required.
        public let topicName: Swift.String?

        public init (
            subscriptionStatus: SesV2ClientTypes.SubscriptionStatus? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.subscriptionStatus = subscriptionStatus
            self.topicName = topicName
        }
    }

}

extension SesV2ClientTypes.TrackingOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRedirectDomain = "CustomRedirectDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customRedirectDomain = customRedirectDomain {
            try encodeContainer.encode(customRedirectDomain, forKey: .customRedirectDomain)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customRedirectDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customRedirectDomain)
        customRedirectDomain = customRedirectDomainDecoded
    }
}

extension SesV2ClientTypes.TrackingOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrackingOptions(customRedirectDomain: \(Swift.String(describing: customRedirectDomain)))"}
}

extension SesV2ClientTypes {
    /// An object that defines the tracking options for a configuration set. When you use the
    ///             Amazon SES API v2 to send an email, it contains an invisible image that's used to track when
    ///             recipients open your email. If your email contains links, those links are changed
    ///             slightly in order to track when recipients click them.
    ///         These images and links include references to a domain operated by AWS. You can
    ///             optionally configure the Amazon SES to use a domain that you operate for these images and
    ///             links.
    public struct TrackingOptions: Swift.Equatable {
        /// The domain that you want to use for tracking open and click events.
        /// This member is required.
        public let customRedirectDomain: Swift.String?

        public init (
            customRedirectDomain: Swift.String? = nil
        )
        {
            self.customRedirectDomain = customRedirectDomain
        }
    }

}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let resourceArn = input.operationInput.resourceArn {
            let resourceArnQueryItem = ClientRuntime.URLQueryItem(name: "ResourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
            input.builder.withQueryItem(resourceArnQueryItem)
        }
        if let tagKeys = input.operationInput.tagKeys {
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "TagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource that you want to remove one or more
    ///             tags from.
    /// This member is required.
    public let resourceArn: Swift.String?
    /// The tags (tag keys) that you want to remove from the resource. When you specify a tag
    ///             key, the action removes both that key and its associated tag value.
    ///         To remove more than one tag from the resource, append the TagKeys
    ///             parameter and argument for each additional tag to remove, separated by an ampersand. For
    ///             example:
    ///                 /v2/email/tags?ResourceArn=ResourceArn&TagKeys=Key1&TagKeys=Key2
    ///
    /// This member is required.
    public let tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateConfigurationSetEventDestinationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetEventDestinationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetEventDestinationOutputError>
}

extension UpdateConfigurationSetEventDestinationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConfigurationSetEventDestinationInput(configurationSetName: \(Swift.String(describing: configurationSetName)), eventDestination: \(Swift.String(describing: eventDestination)), eventDestinationName: \(Swift.String(describing: eventDestinationName)))"}
}

extension UpdateConfigurationSetEventDestinationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestination = "EventDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventDestination = eventDestination {
            try encodeContainer.encode(eventDestination, forKey: .eventDestination)
        }
    }
}

public struct UpdateConfigurationSetEventDestinationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetEventDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetEventDestinationOutputError>
}

public struct UpdateConfigurationSetEventDestinationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConfigurationSetEventDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConfigurationSetEventDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConfigurationSetEventDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConfigurationSetEventDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConfigurationSetEventDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConfigurationSetEventDestinationOutputError>
}

/// A request to change the settings for an event destination for a configuration
///             set.
public struct UpdateConfigurationSetEventDestinationInput: Swift.Equatable {
    /// The name of the configuration set that contains the event destination that you want to
    ///             modify.
    /// This member is required.
    public let configurationSetName: Swift.String?
    /// An object that defines the event destination.
    /// This member is required.
    public let eventDestination: SesV2ClientTypes.EventDestinationDefinition?
    /// The name of the event destination that you want to modify.
    /// This member is required.
    public let eventDestinationName: Swift.String?

    public init (
        configurationSetName: Swift.String? = nil,
        eventDestination: SesV2ClientTypes.EventDestinationDefinition? = nil,
        eventDestinationName: Swift.String? = nil
    )
    {
        self.configurationSetName = configurationSetName
        self.eventDestination = eventDestination
        self.eventDestinationName = eventDestinationName
    }
}

struct UpdateConfigurationSetEventDestinationInputBody: Swift.Equatable {
    public let eventDestination: SesV2ClientTypes.EventDestinationDefinition?
}

extension UpdateConfigurationSetEventDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventDestination = "EventDestination"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventDestinationDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.EventDestinationDefinition.self, forKey: .eventDestination)
        eventDestination = eventDestinationDecoded
    }
}

extension UpdateConfigurationSetEventDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateConfigurationSetEventDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateConfigurationSetEventDestinationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConfigurationSetEventDestinationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConfigurationSetEventDestinationOutputResponse()"}
}

extension UpdateConfigurationSetEventDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct UpdateConfigurationSetEventDestinationOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateConfigurationSetEventDestinationOutputResponseBody: Swift.Equatable {
}

extension UpdateConfigurationSetEventDestinationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateContactInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactOutputError>
}

extension UpdateContactInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateContactInput(attributesData: \(Swift.String(describing: attributesData)), contactListName: \(Swift.String(describing: contactListName)), emailAddress: \(Swift.String(describing: emailAddress)), topicPreferences: \(Swift.String(describing: topicPreferences)), unsubscribeAll: \(Swift.String(describing: unsubscribeAll)))"}
}

extension UpdateContactInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesData = "AttributesData"
        case topicPreferences = "TopicPreferences"
        case unsubscribeAll = "UnsubscribeAll"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesData = attributesData {
            try encodeContainer.encode(attributesData, forKey: .attributesData)
        }
        if let topicPreferences = topicPreferences {
            var topicPreferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topicPreferences)
            for topicpreferencelist0 in topicPreferences {
                try topicPreferencesContainer.encode(topicpreferencelist0)
            }
        }
        if unsubscribeAll != false {
            try encodeContainer.encode(unsubscribeAll, forKey: .unsubscribeAll)
        }
    }
}

public struct UpdateContactInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactOutputError>
}

public struct UpdateContactInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactOutputError>
}

public struct UpdateContactInput: Swift.Equatable {
    /// The attribute data attached to a contact.
    public let attributesData: Swift.String?
    /// The name of the contact list.
    /// This member is required.
    public let contactListName: Swift.String?
    /// The contact's email addres.
    /// This member is required.
    public let emailAddress: Swift.String?
    /// The contact's preference for being opted-in to or opted-out of a topic.
    public let topicPreferences: [SesV2ClientTypes.TopicPreference]?
    /// A boolean value status noting if the contact is unsubscribed from all contact list
    ///             topics.
    public let unsubscribeAll: Swift.Bool

    public init (
        attributesData: Swift.String? = nil,
        contactListName: Swift.String? = nil,
        emailAddress: Swift.String? = nil,
        topicPreferences: [SesV2ClientTypes.TopicPreference]? = nil,
        unsubscribeAll: Swift.Bool = false
    )
    {
        self.attributesData = attributesData
        self.contactListName = contactListName
        self.emailAddress = emailAddress
        self.topicPreferences = topicPreferences
        self.unsubscribeAll = unsubscribeAll
    }
}

struct UpdateContactInputBody: Swift.Equatable {
    public let topicPreferences: [SesV2ClientTypes.TopicPreference]?
    public let unsubscribeAll: Swift.Bool
    public let attributesData: Swift.String?
}

extension UpdateContactInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesData = "AttributesData"
        case topicPreferences = "TopicPreferences"
        case unsubscribeAll = "UnsubscribeAll"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicPreferencesContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.TopicPreference?].self, forKey: .topicPreferences)
        var topicPreferencesDecoded0:[SesV2ClientTypes.TopicPreference]? = nil
        if let topicPreferencesContainer = topicPreferencesContainer {
            topicPreferencesDecoded0 = [SesV2ClientTypes.TopicPreference]()
            for structure0 in topicPreferencesContainer {
                if let structure0 = structure0 {
                    topicPreferencesDecoded0?.append(structure0)
                }
            }
        }
        topicPreferences = topicPreferencesDecoded0
        let unsubscribeAllDecoded = try containerValues.decode(Swift.Bool.self, forKey: .unsubscribeAll)
        unsubscribeAll = unsubscribeAllDecoded
        let attributesDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributesData)
        attributesData = attributesDataDecoded
    }
}

public struct UpdateContactListInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactListInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactListInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactListOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactListInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactListOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactListOutputError>
}

extension UpdateContactListInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateContactListInput(contactListName: \(Swift.String(describing: contactListName)), description: \(Swift.String(describing: description)), topics: \(Swift.String(describing: topics)))"}
}

extension UpdateContactListInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case topics = "Topics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let topics = topics {
            var topicsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topics)
            for topics0 in topics {
                try topicsContainer.encode(topics0)
            }
        }
    }
}

public struct UpdateContactListInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactListInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactListInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactListOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactListInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactListOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactListOutputError>
}

public struct UpdateContactListInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactListInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactListInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactListOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactListInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactListOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactListOutputError>
}

public struct UpdateContactListInput: Swift.Equatable {
    /// The name of the contact list.
    /// This member is required.
    public let contactListName: Swift.String?
    /// A description of what the contact list is about.
    public let description: Swift.String?
    /// An interest group, theme, or label within a list. A contact list can have multiple
    ///             topics.
    public let topics: [SesV2ClientTypes.Topic]?

    public init (
        contactListName: Swift.String? = nil,
        description: Swift.String? = nil,
        topics: [SesV2ClientTypes.Topic]? = nil
    )
    {
        self.contactListName = contactListName
        self.description = description
        self.topics = topics
    }
}

struct UpdateContactListInputBody: Swift.Equatable {
    public let topics: [SesV2ClientTypes.Topic]?
    public let description: Swift.String?
}

extension UpdateContactListInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case topics = "Topics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Topic?].self, forKey: .topics)
        var topicsDecoded0:[SesV2ClientTypes.Topic]? = nil
        if let topicsContainer = topicsContainer {
            topicsDecoded0 = [SesV2ClientTypes.Topic]()
            for structure0 in topicsContainer {
                if let structure0 = structure0 {
                    topicsDecoded0?.append(structure0)
                }
            }
        }
        topics = topicsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateContactListOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateContactListOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateContactListOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateContactListOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateContactListOutputResponse()"}
}

extension UpdateContactListOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateContactListOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateContactListOutputResponseBody: Swift.Equatable {
}

extension UpdateContactListOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UpdateContactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateContactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateContactOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case concurrentModificationException(ConcurrentModificationException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateContactOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateContactOutputResponse()"}
}

extension UpdateContactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateContactOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateContactOutputResponseBody: Swift.Equatable {
}

extension UpdateContactOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateCustomVerificationEmailTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCustomVerificationEmailTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCustomVerificationEmailTemplateOutputError>
}

extension UpdateCustomVerificationEmailTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCustomVerificationEmailTemplateInput(failureRedirectionURL: \(Swift.String(describing: failureRedirectionURL)), fromEmailAddress: \(Swift.String(describing: fromEmailAddress)), successRedirectionURL: \(Swift.String(describing: successRedirectionURL)), templateContent: \(Swift.String(describing: templateContent)), templateName: \(Swift.String(describing: templateName)), templateSubject: \(Swift.String(describing: templateSubject)))"}
}

extension UpdateCustomVerificationEmailTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateSubject = "TemplateSubject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureRedirectionURL = failureRedirectionURL {
            try encodeContainer.encode(failureRedirectionURL, forKey: .failureRedirectionURL)
        }
        if let fromEmailAddress = fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let successRedirectionURL = successRedirectionURL {
            try encodeContainer.encode(successRedirectionURL, forKey: .successRedirectionURL)
        }
        if let templateContent = templateContent {
            try encodeContainer.encode(templateContent, forKey: .templateContent)
        }
        if let templateSubject = templateSubject {
            try encodeContainer.encode(templateSubject, forKey: .templateSubject)
        }
    }
}

public struct UpdateCustomVerificationEmailTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCustomVerificationEmailTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCustomVerificationEmailTemplateOutputError>
}

public struct UpdateCustomVerificationEmailTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCustomVerificationEmailTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCustomVerificationEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCustomVerificationEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCustomVerificationEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCustomVerificationEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCustomVerificationEmailTemplateOutputError>
}

/// Represents a request to update an existing custom verification email template.
public struct UpdateCustomVerificationEmailTemplateInput: Swift.Equatable {
    /// The URL that the recipient of the verification email is sent to if his or her address
    ///             is not successfully verified.
    /// This member is required.
    public let failureRedirectionURL: Swift.String?
    /// The email address that the custom verification email is sent from.
    /// This member is required.
    public let fromEmailAddress: Swift.String?
    /// The URL that the recipient of the verification email is sent to if his or her address
    ///             is successfully verified.
    /// This member is required.
    public let successRedirectionURL: Swift.String?
    /// The content of the custom verification email. The total size of the email must be less
    ///             than 10 MB. The message body may contain HTML, with some limitations. For more
    ///             information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions in the Amazon SES
    ///                 Developer Guide.
    /// This member is required.
    public let templateContent: Swift.String?
    /// The name of the custom verification email template that you want to update.
    /// This member is required.
    public let templateName: Swift.String?
    /// The subject line of the custom verification email.
    /// This member is required.
    public let templateSubject: Swift.String?

    public init (
        failureRedirectionURL: Swift.String? = nil,
        fromEmailAddress: Swift.String? = nil,
        successRedirectionURL: Swift.String? = nil,
        templateContent: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSubject: Swift.String? = nil
    )
    {
        self.failureRedirectionURL = failureRedirectionURL
        self.fromEmailAddress = fromEmailAddress
        self.successRedirectionURL = successRedirectionURL
        self.templateContent = templateContent
        self.templateName = templateName
        self.templateSubject = templateSubject
    }
}

struct UpdateCustomVerificationEmailTemplateInputBody: Swift.Equatable {
    public let fromEmailAddress: Swift.String?
    public let templateSubject: Swift.String?
    public let templateContent: Swift.String?
    public let successRedirectionURL: Swift.String?
    public let failureRedirectionURL: Swift.String?
}

extension UpdateCustomVerificationEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureRedirectionURL = "FailureRedirectionURL"
        case fromEmailAddress = "FromEmailAddress"
        case successRedirectionURL = "SuccessRedirectionURL"
        case templateContent = "TemplateContent"
        case templateSubject = "TemplateSubject"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let templateSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSubject)
        templateSubject = templateSubjectDecoded
        let templateContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateContent)
        templateContent = templateContentDecoded
        let successRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successRedirectionURL)
        successRedirectionURL = successRedirectionURLDecoded
        let failureRedirectionURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureRedirectionURL)
        failureRedirectionURL = failureRedirectionURLDecoded
    }
}

extension UpdateCustomVerificationEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateCustomVerificationEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateCustomVerificationEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCustomVerificationEmailTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCustomVerificationEmailTemplateOutputResponse()"}
}

extension UpdateCustomVerificationEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty
///             HTTP body.
public struct UpdateCustomVerificationEmailTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateCustomVerificationEmailTemplateOutputResponseBody: Swift.Equatable {
}

extension UpdateCustomVerificationEmailTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateEmailIdentityPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEmailIdentityPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEmailIdentityPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEmailIdentityPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEmailIdentityPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEmailIdentityPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEmailIdentityPolicyOutputError>
}

extension UpdateEmailIdentityPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEmailIdentityPolicyInput(emailIdentity: \(Swift.String(describing: emailIdentity)), policy: \(Swift.String(describing: policy)), policyName: \(Swift.String(describing: policyName)))"}
}

extension UpdateEmailIdentityPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policy = policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
    }
}

public struct UpdateEmailIdentityPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEmailIdentityPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEmailIdentityPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEmailIdentityPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEmailIdentityPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEmailIdentityPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEmailIdentityPolicyOutputError>
}

public struct UpdateEmailIdentityPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEmailIdentityPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEmailIdentityPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEmailIdentityPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEmailIdentityPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEmailIdentityPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEmailIdentityPolicyOutputError>
}

/// Represents a request to update a sending authorization policy for an identity. Sending
///             authorization is an Amazon SES feature that enables you to authorize other senders to use
///             your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html">Amazon SES Developer Guide.
public struct UpdateEmailIdentityPolicyInput: Swift.Equatable {
    /// The email identity for which you want to update policy.
    /// This member is required.
    public let emailIdentity: Swift.String?
    /// The text of the policy in JSON format. The policy cannot exceed 4 KB.
    ///          For information about the syntax of sending authorization policies, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer
    ///                 Guide.
    /// This member is required.
    public let policy: Swift.String?
    /// The name of the policy.
    ///
    ///         The policy name cannot exceed 64 characters and can only include alphanumeric
    ///             characters, dashes, and underscores.
    /// This member is required.
    public let policyName: Swift.String?

    public init (
        emailIdentity: Swift.String? = nil,
        policy: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.emailIdentity = emailIdentity
        self.policy = policy
        self.policyName = policyName
    }
}

struct UpdateEmailIdentityPolicyInputBody: Swift.Equatable {
    public let policy: Swift.String?
}

extension UpdateEmailIdentityPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension UpdateEmailIdentityPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEmailIdentityPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateEmailIdentityPolicyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEmailIdentityPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEmailIdentityPolicyOutputResponse()"}
}

extension UpdateEmailIdentityPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// An HTTP 200 response if the request succeeds, or an error message if the request
///             fails.
public struct UpdateEmailIdentityPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateEmailIdentityPolicyOutputResponseBody: Swift.Equatable {
}

extension UpdateEmailIdentityPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateEmailTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEmailTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEmailTemplateOutputError>
}

extension UpdateEmailTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEmailTemplateInput(templateContent: \(Swift.String(describing: templateContent)), templateName: \(Swift.String(describing: templateName)))"}
}

extension UpdateEmailTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateContent = "TemplateContent"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let templateContent = templateContent {
            try encodeContainer.encode(templateContent, forKey: .templateContent)
        }
    }
}

public struct UpdateEmailTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEmailTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEmailTemplateOutputError>
}

public struct UpdateEmailTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEmailTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEmailTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEmailTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEmailTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEmailTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEmailTemplateOutputError>
}

/// Represents a request to update an email template. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES
///                 Developer Guide.
public struct UpdateEmailTemplateInput: Swift.Equatable {
    /// The content of the email template, composed of a subject line, an HTML part, and a
    ///             text-only part.
    /// This member is required.
    public let templateContent: SesV2ClientTypes.EmailTemplateContent?
    /// The name of the template you want to update.
    /// This member is required.
    public let templateName: Swift.String?

    public init (
        templateContent: SesV2ClientTypes.EmailTemplateContent? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.templateContent = templateContent
        self.templateName = templateName
    }
}

struct UpdateEmailTemplateInputBody: Swift.Equatable {
    public let templateContent: SesV2ClientTypes.EmailTemplateContent?
}

extension UpdateEmailTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateContent = "TemplateContent"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateContentDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.EmailTemplateContent.self, forKey: .templateContent)
        templateContent = templateContentDecoded
    }
}

extension UpdateEmailTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEmailTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateEmailTemplateOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEmailTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEmailTemplateOutputResponse()"}
}

extension UpdateEmailTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// If the action is successful, the service sends back an HTTP 200 response with an empty
///             HTTP body.
public struct UpdateEmailTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateEmailTemplateOutputResponseBody: Swift.Equatable {
}

extension UpdateEmailTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SesV2ClientTypes.VolumeStatistics: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inboxRawCount = "InboxRawCount"
        case projectedInbox = "ProjectedInbox"
        case projectedSpam = "ProjectedSpam"
        case spamRawCount = "SpamRawCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inboxRawCount = inboxRawCount {
            try encodeContainer.encode(inboxRawCount, forKey: .inboxRawCount)
        }
        if let projectedInbox = projectedInbox {
            try encodeContainer.encode(projectedInbox, forKey: .projectedInbox)
        }
        if let projectedSpam = projectedSpam {
            try encodeContainer.encode(projectedSpam, forKey: .projectedSpam)
        }
        if let spamRawCount = spamRawCount {
            try encodeContainer.encode(spamRawCount, forKey: .spamRawCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inboxRawCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inboxRawCount)
        inboxRawCount = inboxRawCountDecoded
        let spamRawCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spamRawCount)
        spamRawCount = spamRawCountDecoded
        let projectedInboxDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .projectedInbox)
        projectedInbox = projectedInboxDecoded
        let projectedSpamDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .projectedSpam)
        projectedSpam = projectedSpamDecoded
    }
}

extension SesV2ClientTypes.VolumeStatistics: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VolumeStatistics(inboxRawCount: \(Swift.String(describing: inboxRawCount)), projectedInbox: \(Swift.String(describing: projectedInbox)), projectedSpam: \(Swift.String(describing: projectedSpam)), spamRawCount: \(Swift.String(describing: spamRawCount)))"}
}

extension SesV2ClientTypes {
    /// An object that contains information about the amount of email that was delivered to
    ///             recipients.
    public struct VolumeStatistics: Swift.Equatable {
        /// The total number of emails that arrived in recipients' inboxes.
        public let inboxRawCount: Swift.Int?
        /// An estimate of the percentage of emails sent from the current domain that will arrive
        ///             in recipients' inboxes.
        public let projectedInbox: Swift.Int?
        /// An estimate of the percentage of emails sent from the current domain that will arrive
        ///             in recipients' spam or junk mail folders.
        public let projectedSpam: Swift.Int?
        /// The total number of emails that arrived in recipients' spam or junk mail
        ///             folders.
        public let spamRawCount: Swift.Int?

        public init (
            inboxRawCount: Swift.Int? = nil,
            projectedInbox: Swift.Int? = nil,
            projectedSpam: Swift.Int? = nil,
            spamRawCount: Swift.Int? = nil
        )
        {
            self.inboxRawCount = inboxRawCount
            self.projectedInbox = projectedInbox
            self.projectedSpam = projectedSpam
            self.spamRawCount = spamRawCount
        }
    }

}

extension SesV2ClientTypes {
    /// The warmup status of a dedicated IP.
    public enum WarmupStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case done
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [WarmupStatus] {
            return [
                .done,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .done: return "DONE"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WarmupStatus(rawValue: rawValue) ?? WarmupStatus.sdkUnknown(rawValue)
        }
    }
}
