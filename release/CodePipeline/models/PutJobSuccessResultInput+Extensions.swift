// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutJobSuccessResultInputHeadersMiddleware: Middleware {
    public let id: String = "PutJobSuccessResultInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutJobSuccessResultInput>,
                  next: H) -> Swift.Result<OperationOutput<PutJobSuccessResultOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutJobSuccessResultInput>
    public typealias MOutput = OperationOutput<PutJobSuccessResultOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutJobSuccessResultOutputError>
}

public struct PutJobSuccessResultInputQueryItemMiddleware: Middleware {
    public let id: String = "PutJobSuccessResultInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutJobSuccessResultInput>,
                  next: H) -> Swift.Result<OperationOutput<PutJobSuccessResultOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutJobSuccessResultInput>
    public typealias MOutput = OperationOutput<PutJobSuccessResultOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutJobSuccessResultOutputError>
}

public struct PutJobSuccessResultInputBodyMiddleware: Middleware {
    public let id: String = "PutJobSuccessResultInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutJobSuccessResultInput>,
                  next: H) -> Swift.Result<OperationOutput<PutJobSuccessResultOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutJobSuccessResultInput>
    public typealias MOutput = OperationOutput<PutJobSuccessResultOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutJobSuccessResultOutputError>
}

extension PutJobSuccessResultInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case continuationToken
        case currentRevision
        case executionDetails
        case jobId
        case outputVariables
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let continuationToken = continuationToken {
            try encodeContainer.encode(continuationToken, forKey: .continuationToken)
        }
        if let currentRevision = currentRevision {
            try encodeContainer.encode(currentRevision, forKey: .currentRevision)
        }
        if let executionDetails = executionDetails {
            try encodeContainer.encode(executionDetails, forKey: .executionDetails)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let outputVariables = outputVariables {
            var outputVariablesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .outputVariables)
            for (dictKey0, outputvariablesmap0) in outputVariables {
                try outputVariablesContainer.encode(outputvariablesmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
