// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension SageMakerFeatureStoreRuntimeClient {
    /// Retrieves a batch of Records from a FeatureGroup.
    func batchGetRecord(input: BatchGetRecordInput) async throws -> BatchGetRecordOutputResponse
    {
        typealias batchGetRecordContinuation = CheckedContinuation<BatchGetRecordOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchGetRecordContinuation) in
            batchGetRecord(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a Record from a FeatureGroup. A new record will show
    ///          up in the OfflineStore when the DeleteRecord API is called. This
    ///          record will have a value of True in the is_deleted column.
    func deleteRecord(input: DeleteRecordInput) async throws -> DeleteRecordOutputResponse
    {
        typealias deleteRecordContinuation = CheckedContinuation<DeleteRecordOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRecordContinuation) in
            deleteRecord(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Use for OnlineStore serving from a FeatureStore. Only the
    ///          latest records stored in the OnlineStore can be retrieved. If no Record with
    ///             RecordIdentifierValue is found, then an empty result is returned.
    func getRecord(input: GetRecordInput) async throws -> GetRecordOutputResponse
    {
        typealias getRecordContinuation = CheckedContinuation<GetRecordOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRecordContinuation) in
            getRecord(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used for data ingestion into the FeatureStore. The PutRecord
    ///          API writes to both the OnlineStore and OfflineStore. If the
    ///          record is the latest record for the recordIdentifier, the record is written to
    ///          both the OnlineStore and OfflineStore. If the record is a
    ///          historic record, it is written only to the OfflineStore.
    func putRecord(input: PutRecordInput) async throws -> PutRecordOutputResponse
    {
        typealias putRecordContinuation = CheckedContinuation<PutRecordOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putRecordContinuation) in
            putRecord(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
