// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateMLModelInputHeadersMiddleware: Middleware {
    public let id: String = "CreateMLModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMLModelInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMLModelInput>
    public typealias MOutput = OperationOutput<CreateMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMLModelOutputError>
}

public struct CreateMLModelInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateMLModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMLModelInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMLModelInput>
    public typealias MOutput = OperationOutput<CreateMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMLModelOutputError>
}

public struct CreateMLModelInputBodyMiddleware: Middleware {
    public let id: String = "CreateMLModelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMLModelInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMLModelInput>
    public typealias MOutput = OperationOutput<CreateMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMLModelOutputError>
}

extension CreateMLModelInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case mLModelId = "MLModelId"
        case mLModelName = "MLModelName"
        case mLModelType = "MLModelType"
        case parameters = "Parameters"
        case recipe = "Recipe"
        case recipeUri = "RecipeUri"
        case trainingDataSourceId = "TrainingDataSourceId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
        if let mLModelName = mLModelName {
            try encodeContainer.encode(mLModelName, forKey: .mLModelName)
        }
        if let mLModelType = mLModelType {
            try encodeContainer.encode(mLModelType.rawValue, forKey: .mLModelType)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .parameters)
            for (dictKey0, trainingparameters0) in parameters {
                try parametersContainer.encode(trainingparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let recipe = recipe {
            try encodeContainer.encode(recipe, forKey: .recipe)
        }
        if let recipeUri = recipeUri {
            try encodeContainer.encode(recipeUri, forKey: .recipeUri)
        }
        if let trainingDataSourceId = trainingDataSourceId {
            try encodeContainer.encode(trainingDataSourceId, forKey: .trainingDataSourceId)
        }
    }
}
