// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateDataSourceFromRedshiftInputHeadersMiddleware: Middleware {
    public let id: String = "CreateDataSourceFromRedshiftInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDataSourceFromRedshiftInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDataSourceFromRedshiftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDataSourceFromRedshiftInput>
    public typealias MOutput = OperationOutput<CreateDataSourceFromRedshiftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDataSourceFromRedshiftOutputError>
}

public struct CreateDataSourceFromRedshiftInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateDataSourceFromRedshiftInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDataSourceFromRedshiftInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDataSourceFromRedshiftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDataSourceFromRedshiftInput>
    public typealias MOutput = OperationOutput<CreateDataSourceFromRedshiftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDataSourceFromRedshiftOutputError>
}

public struct CreateDataSourceFromRedshiftInputBodyMiddleware: Middleware {
    public let id: String = "CreateDataSourceFromRedshiftInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDataSourceFromRedshiftInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDataSourceFromRedshiftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDataSourceFromRedshiftInput>
    public typealias MOutput = OperationOutput<CreateDataSourceFromRedshiftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDataSourceFromRedshiftOutputError>
}

extension CreateDataSourceFromRedshiftInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case computeStatistics = "ComputeStatistics"
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
        case dataSpec = "DataSpec"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if computeStatistics != false {
            try encodeContainer.encode(computeStatistics, forKey: .computeStatistics)
        }
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let dataSourceName = dataSourceName {
            try encodeContainer.encode(dataSourceName, forKey: .dataSourceName)
        }
        if let dataSpec = dataSpec {
            try encodeContainer.encode(dataSpec, forKey: .dataSpec)
        }
        if let roleARN = roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
    }
}
