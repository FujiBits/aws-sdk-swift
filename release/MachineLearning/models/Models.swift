// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

public struct AddTagsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsOutputError>
}

extension AddTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddTagsInput(resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)), tags: \(Swift.String(describing: tags)))"}
}

extension AddTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct AddTagsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsOutputError>
}

public struct AddTagsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsOutputError>
}

public struct AddTagsInput: Swift.Equatable {
    /// <p>The ID of the ML object to tag. For example, <code>exampleModelId</code>.</p>
    public let resourceId: Swift.String?
    /// <p>The type of the ML object to tag.</p>
    public let resourceType: MachineLearningClientTypes.TaggableResourceType?
    /// <p>The key-value pairs to use to create tags. If you specify a key without specifying a value, Amazon ML creates a tag with the specified key and a value of null.</p>
    public let tags: [MachineLearningClientTypes.Tag]?

    public init (
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil,
        tags: [MachineLearningClientTypes.Tag]? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.tags = tags
    }
}

struct AddTagsInputBody: Swift.Equatable {
    public let tags: [MachineLearningClientTypes.Tag]?
    public let resourceId: Swift.String?
    public let resourceType: MachineLearningClientTypes.TaggableResourceType?
}

extension AddTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([MachineLearningClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[MachineLearningClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [MachineLearningClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.TaggableResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension AddTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagLimitExceededException" : self = .tagLimitExceededException(try TagLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddTagsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case invalidTagException(InvalidTagException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tagLimitExceededException(TagLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddTagsOutputResponse(resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension AddTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AddTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceId = output.resourceId
            self.resourceType = output.resourceType
        } else {
            self.resourceId = nil
            self.resourceType = nil
        }
    }
}

/// <p>Amazon ML returns the following elements.</p>
public struct AddTagsOutputResponse: Swift.Equatable {
    /// <p>The ID of the ML object that was tagged.</p>
    public let resourceId: Swift.String?
    /// <p>The type of the ML object that was tagged.</p>
    public let resourceType: MachineLearningClientTypes.TaggableResourceType?

    public init (
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct AddTagsOutputResponseBody: Swift.Equatable {
    public let resourceId: Swift.String?
    public let resourceType: MachineLearningClientTypes.TaggableResourceType?
}

extension AddTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.TaggableResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension MachineLearningClientTypes {
    /// <p>The function used to train an <code>MLModel</code>. Training choices supported by Amazon ML include the following:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>SGD</code> - Stochastic Gradient Descent.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RandomForest</code> - Random forest of decision trees.</p>
    ///             </li>
    ///          </ul>
    public enum Algorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sgd
        case sdkUnknown(Swift.String)

        public static var allCases: [Algorithm] {
            return [
                .sgd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sgd: return "sgd"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Algorithm(rawValue: rawValue) ?? Algorithm.sdkUnknown(rawValue)
        }
    }
}

extension MachineLearningClientTypes.BatchPrediction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionDataSourceId = "BatchPredictionDataSourceId"
        case batchPredictionId = "BatchPredictionId"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case invalidRecordCount = "InvalidRecordCount"
        case lastUpdatedAt = "LastUpdatedAt"
        case mLModelId = "MLModelId"
        case message = "Message"
        case name = "Name"
        case outputUri = "OutputUri"
        case startedAt = "StartedAt"
        case status = "Status"
        case totalRecordCount = "TotalRecordCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchPredictionDataSourceId = batchPredictionDataSourceId {
            try encodeContainer.encode(batchPredictionDataSourceId, forKey: .batchPredictionDataSourceId)
        }
        if let batchPredictionId = batchPredictionId {
            try encodeContainer.encode(batchPredictionId, forKey: .batchPredictionId)
        }
        if let computeTime = computeTime {
            try encodeContainer.encode(computeTime, forKey: .computeTime)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let createdByIamUser = createdByIamUser {
            try encodeContainer.encode(createdByIamUser, forKey: .createdByIamUser)
        }
        if let finishedAt = finishedAt {
            try encodeContainer.encode(finishedAt.timeIntervalSince1970, forKey: .finishedAt)
        }
        if let inputDataLocationS3 = inputDataLocationS3 {
            try encodeContainer.encode(inputDataLocationS3, forKey: .inputDataLocationS3)
        }
        if let invalidRecordCount = invalidRecordCount {
            try encodeContainer.encode(invalidRecordCount, forKey: .invalidRecordCount)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputUri = outputUri {
            try encodeContainer.encode(outputUri, forKey: .outputUri)
        }
        if let startedAt = startedAt {
            try encodeContainer.encode(startedAt.timeIntervalSince1970, forKey: .startedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let totalRecordCount = totalRecordCount {
            try encodeContainer.encode(totalRecordCount, forKey: .totalRecordCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let batchPredictionDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionDataSourceId)
        batchPredictionDataSourceId = batchPredictionDataSourceIdDecoded
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let outputUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputUri)
        outputUri = outputUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let totalRecordCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalRecordCount)
        totalRecordCount = totalRecordCountDecoded
        let invalidRecordCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .invalidRecordCount)
        invalidRecordCount = invalidRecordCountDecoded
    }
}

extension MachineLearningClientTypes.BatchPrediction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchPrediction(batchPredictionDataSourceId: \(Swift.String(describing: batchPredictionDataSourceId)), batchPredictionId: \(Swift.String(describing: batchPredictionId)), computeTime: \(Swift.String(describing: computeTime)), createdAt: \(Swift.String(describing: createdAt)), createdByIamUser: \(Swift.String(describing: createdByIamUser)), finishedAt: \(Swift.String(describing: finishedAt)), inputDataLocationS3: \(Swift.String(describing: inputDataLocationS3)), invalidRecordCount: \(Swift.String(describing: invalidRecordCount)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), mLModelId: \(Swift.String(describing: mLModelId)), message: \(Swift.String(describing: message)), name: \(Swift.String(describing: name)), outputUri: \(Swift.String(describing: outputUri)), startedAt: \(Swift.String(describing: startedAt)), status: \(Swift.String(describing: status)), totalRecordCount: \(Swift.String(describing: totalRecordCount)))"}
}

extension MachineLearningClientTypes {
    /// <p> Represents the output of a <code>GetBatchPrediction</code> operation.</p>
    ///         <p> The content consists of the detailed metadata, the status, and the data file information of a
    ///             <code>Batch Prediction</code>.</p>
    public struct BatchPrediction: Swift.Equatable {
        /// <p>The ID of the <code>DataSource</code> that points to the group of observations to predict.</p>
        public let batchPredictionDataSourceId: Swift.String?
        /// <p>The ID assigned to the <code>BatchPrediction</code> at creation. This value should be identical to the value of the <code>BatchPredictionID</code>
        ///             in the request.
        ///         </p>
        public let batchPredictionId: Swift.String?
        /// <p>Long integer type that is a 64-bit signed number.</p>
        public let computeTime: Swift.Int?
        /// <p>The time that the <code>BatchPrediction</code> was created. The time is expressed in epoch time.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The AWS user account that invoked the <code>BatchPrediction</code>. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.</p>
        public let createdByIamUser: Swift.String?
        /// <p>A timestamp represented in epoch time.</p>
        public let finishedAt: ClientRuntime.Date?
        /// <p>The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).</p>
        public let inputDataLocationS3: Swift.String?
        /// <p>Long integer type that is a 64-bit signed number.</p>
        public let invalidRecordCount: Swift.Int?
        /// <p>The time of the most recent edit to the <code>BatchPrediction</code>. The time is expressed in epoch time.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The ID of the <code>MLModel</code> that generated predictions for the <code>BatchPrediction</code> request.</p>
        public let mLModelId: Swift.String?
        /// <p>A description of the most recent details about processing the batch prediction request.</p>
        public let message: Swift.String?
        /// <p>A user-supplied name or description of the <code>BatchPrediction</code>.</p>
        public let name: Swift.String?
        /// <p>The location of an Amazon S3 bucket or directory to receive the operation results. The following substrings are not allowed in the <code>s3 key</code> portion of the <code>outputURI</code> field: ':', '//', '/./', '/../'.</p>
        public let outputUri: Swift.String?
        /// <p>A timestamp represented in epoch time.</p>
        public let startedAt: ClientRuntime.Date?
        /// <p>The status of the <code>BatchPrediction</code>. This element can have one of the following values:</p>
        ///         <ul>
        ///             <li>
        ///                <p>
        ///                   <code>PENDING</code> - Amazon Machine Learning (Amazon ML) submitted a request to generate predictions for a batch of observations.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>INPROGRESS</code> - The process is underway.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>FAILED</code> - The request to perform a batch prediction did not run to completion. It is not usable.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>COMPLETED</code> - The batch prediction process completed successfully.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>DELETED</code> - The <code>BatchPrediction</code> is marked as deleted. It is not usable.</p>
        ///             </li>
        ///          </ul>
        public let status: MachineLearningClientTypes.EntityStatus?
        /// <p>Long integer type that is a 64-bit signed number.</p>
        public let totalRecordCount: Swift.Int?

        public init (
            batchPredictionDataSourceId: Swift.String? = nil,
            batchPredictionId: Swift.String? = nil,
            computeTime: Swift.Int? = nil,
            createdAt: ClientRuntime.Date? = nil,
            createdByIamUser: Swift.String? = nil,
            finishedAt: ClientRuntime.Date? = nil,
            inputDataLocationS3: Swift.String? = nil,
            invalidRecordCount: Swift.Int? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            mLModelId: Swift.String? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil,
            outputUri: Swift.String? = nil,
            startedAt: ClientRuntime.Date? = nil,
            status: MachineLearningClientTypes.EntityStatus? = nil,
            totalRecordCount: Swift.Int? = nil
        )
        {
            self.batchPredictionDataSourceId = batchPredictionDataSourceId
            self.batchPredictionId = batchPredictionId
            self.computeTime = computeTime
            self.createdAt = createdAt
            self.createdByIamUser = createdByIamUser
            self.finishedAt = finishedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.invalidRecordCount = invalidRecordCount
            self.lastUpdatedAt = lastUpdatedAt
            self.mLModelId = mLModelId
            self.message = message
            self.name = name
            self.outputUri = outputUri
            self.startedAt = startedAt
            self.status = status
            self.totalRecordCount = totalRecordCount
        }
    }

}

extension MachineLearningClientTypes {
    /// <p>A list of the variables to use in searching or filtering <code>BatchPrediction</code>.</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreatedAt</code> - Sets the search criteria to <code>BatchPrediction</code> creation date.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code> - Sets the search criteria to <code>BatchPrediction</code> status.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Name</code> - Sets the search criteria to the contents of <code>BatchPrediction</code>
    ///                   <code>Name</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>BatchPrediction</code> creation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MLModelId</code> - Sets the search criteria to the <code>MLModel</code> used in the <code>BatchPrediction</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in the <code>BatchPrediction</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DataURI</code> - Sets the search criteria to the data file(s) used in the <code>BatchPrediction</code>. The URL can
    ///                 identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</p>
    ///             </li>
    ///          </ul>
    public enum BatchPredictionFilterVariable: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createdAt
        case datasourceId
        case dataUri
        case iamUser
        case lastUpdatedAt
        case mlModelId
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [BatchPredictionFilterVariable] {
            return [
                .createdAt,
                .datasourceId,
                .dataUri,
                .iamUser,
                .lastUpdatedAt,
                .mlModelId,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createdAt: return "CreatedAt"
            case .datasourceId: return "DataSourceId"
            case .dataUri: return "DataURI"
            case .iamUser: return "IAMUser"
            case .lastUpdatedAt: return "LastUpdatedAt"
            case .mlModelId: return "MLModelId"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BatchPredictionFilterVariable(rawValue: rawValue) ?? BatchPredictionFilterVariable.sdkUnknown(rawValue)
        }
    }
}

public struct CreateBatchPredictionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBatchPredictionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBatchPredictionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBatchPredictionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBatchPredictionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBatchPredictionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBatchPredictionOutputError>
}

extension CreateBatchPredictionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBatchPredictionInput(batchPredictionDataSourceId: \(Swift.String(describing: batchPredictionDataSourceId)), batchPredictionId: \(Swift.String(describing: batchPredictionId)), batchPredictionName: \(Swift.String(describing: batchPredictionName)), mLModelId: \(Swift.String(describing: mLModelId)), outputUri: \(Swift.String(describing: outputUri)))"}
}

extension CreateBatchPredictionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionDataSourceId = "BatchPredictionDataSourceId"
        case batchPredictionId = "BatchPredictionId"
        case batchPredictionName = "BatchPredictionName"
        case mLModelId = "MLModelId"
        case outputUri = "OutputUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchPredictionDataSourceId = batchPredictionDataSourceId {
            try encodeContainer.encode(batchPredictionDataSourceId, forKey: .batchPredictionDataSourceId)
        }
        if let batchPredictionId = batchPredictionId {
            try encodeContainer.encode(batchPredictionId, forKey: .batchPredictionId)
        }
        if let batchPredictionName = batchPredictionName {
            try encodeContainer.encode(batchPredictionName, forKey: .batchPredictionName)
        }
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
        if let outputUri = outputUri {
            try encodeContainer.encode(outputUri, forKey: .outputUri)
        }
    }
}

public struct CreateBatchPredictionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBatchPredictionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBatchPredictionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBatchPredictionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBatchPredictionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBatchPredictionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBatchPredictionOutputError>
}

public struct CreateBatchPredictionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBatchPredictionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBatchPredictionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBatchPredictionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBatchPredictionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBatchPredictionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBatchPredictionOutputError>
}

public struct CreateBatchPredictionInput: Swift.Equatable {
    /// <p>The ID of the <code>DataSource</code> that points to the group of observations to predict.</p>
    public let batchPredictionDataSourceId: Swift.String?
    /// <p>A user-supplied ID that uniquely identifies the
    ///                 <code>BatchPrediction</code>.</p>
    public let batchPredictionId: Swift.String?
    /// <p>A user-supplied name or description of the <code>BatchPrediction</code>. <code>BatchPredictionName</code> can only use the UTF-8 character set.</p>
    public let batchPredictionName: Swift.String?
    /// <p>The ID of the <code>MLModel</code> that will generate predictions for the group of observations. </p>
    public let mLModelId: Swift.String?
    /// <p>The location of an Amazon Simple Storage Service (Amazon S3) bucket or directory to store the batch prediction results. The following substrings are not allowed in the <code>s3 key</code> portion of the <code>outputURI</code> field: ':', '//', '/./', '/../'.</p>
    ///         <p>Amazon ML needs permissions to store and retrieve the logs on your behalf. For information about how to set permissions, see the <a href="https://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>.</p>
    public let outputUri: Swift.String?

    public init (
        batchPredictionDataSourceId: Swift.String? = nil,
        batchPredictionId: Swift.String? = nil,
        batchPredictionName: Swift.String? = nil,
        mLModelId: Swift.String? = nil,
        outputUri: Swift.String? = nil
    )
    {
        self.batchPredictionDataSourceId = batchPredictionDataSourceId
        self.batchPredictionId = batchPredictionId
        self.batchPredictionName = batchPredictionName
        self.mLModelId = mLModelId
        self.outputUri = outputUri
    }
}

struct CreateBatchPredictionInputBody: Swift.Equatable {
    public let batchPredictionId: Swift.String?
    public let batchPredictionName: Swift.String?
    public let mLModelId: Swift.String?
    public let batchPredictionDataSourceId: Swift.String?
    public let outputUri: Swift.String?
}

extension CreateBatchPredictionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionDataSourceId = "BatchPredictionDataSourceId"
        case batchPredictionId = "BatchPredictionId"
        case batchPredictionName = "BatchPredictionName"
        case mLModelId = "MLModelId"
        case outputUri = "OutputUri"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
        let batchPredictionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionName)
        batchPredictionName = batchPredictionNameDecoded
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let batchPredictionDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionDataSourceId)
        batchPredictionDataSourceId = batchPredictionDataSourceIdDecoded
        let outputUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputUri)
        outputUri = outputUriDecoded
    }
}

extension CreateBatchPredictionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateBatchPredictionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateBatchPredictionOutputError: Swift.Error, Swift.Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateBatchPredictionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBatchPredictionOutputResponse(batchPredictionId: \(Swift.String(describing: batchPredictionId)))"}
}

extension CreateBatchPredictionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateBatchPredictionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.batchPredictionId = output.batchPredictionId
        } else {
            self.batchPredictionId = nil
        }
    }
}

/// <p> Represents the output of a <code>CreateBatchPrediction</code> operation, and is an acknowledgement that Amazon ML received the request.</p>
///          <p>The <code>CreateBatchPrediction</code> operation is asynchronous. You can poll for status updates by using the <code>>GetBatchPrediction</code>
///             operation and checking the <code>Status</code> parameter of the result.
///         </p>
public struct CreateBatchPredictionOutputResponse: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>BatchPrediction</code>. This value is identical to the value of the
    ///             <code>BatchPredictionId</code> in the request.</p>
    public let batchPredictionId: Swift.String?

    public init (
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

struct CreateBatchPredictionOutputResponseBody: Swift.Equatable {
    public let batchPredictionId: Swift.String?
}

extension CreateBatchPredictionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
    }
}

public struct CreateDataSourceFromRDSInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDataSourceFromRDSInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDataSourceFromRDSInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDataSourceFromRDSOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDataSourceFromRDSInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDataSourceFromRDSOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDataSourceFromRDSOutputError>
}

extension CreateDataSourceFromRDSInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDataSourceFromRDSInput(computeStatistics: \(Swift.String(describing: computeStatistics)), dataSourceId: \(Swift.String(describing: dataSourceId)), dataSourceName: \(Swift.String(describing: dataSourceName)), rDSData: \(Swift.String(describing: rDSData)), roleARN: \(Swift.String(describing: roleARN)))"}
}

extension CreateDataSourceFromRDSInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
        case rDSData = "RDSData"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if computeStatistics != false {
            try encodeContainer.encode(computeStatistics, forKey: .computeStatistics)
        }
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let dataSourceName = dataSourceName {
            try encodeContainer.encode(dataSourceName, forKey: .dataSourceName)
        }
        if let rDSData = rDSData {
            try encodeContainer.encode(rDSData, forKey: .rDSData)
        }
        if let roleARN = roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
    }
}

public struct CreateDataSourceFromRDSInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDataSourceFromRDSInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDataSourceFromRDSInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDataSourceFromRDSOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDataSourceFromRDSInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDataSourceFromRDSOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDataSourceFromRDSOutputError>
}

public struct CreateDataSourceFromRDSInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDataSourceFromRDSInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDataSourceFromRDSInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDataSourceFromRDSOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDataSourceFromRDSInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDataSourceFromRDSOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDataSourceFromRDSOutputError>
}

public struct CreateDataSourceFromRDSInput: Swift.Equatable {
    /// <p>The compute statistics for a <code>DataSource</code>. The statistics are generated from the observation data referenced by
    ///             a <code>DataSource</code>. Amazon ML uses the statistics internally during <code>MLModel</code> training.
    ///             This parameter must be set to <code>true</code> if the <code></code>DataSource<code></code> needs to be used for <code>MLModel</code> training.
    ///             </p>
    public let computeStatistics: Swift.Bool
    /// <p>A user-supplied ID that uniquely identifies the <code>DataSource</code>. Typically, an Amazon Resource Number (ARN)
    ///             becomes the ID for a <code>DataSource</code>.</p>
    public let dataSourceId: Swift.String?
    /// <p>A user-supplied name or description of the <code>DataSource</code>.</p>
    public let dataSourceName: Swift.String?
    /// <p>The data specification of an Amazon RDS <code>DataSource</code>:</p>
    ///         <ul>
    ///             <li>
    ///                <p>DatabaseInformation -</p>
    ///                 <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>DatabaseName</code> - The name of the Amazon RDS database.</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>InstanceIdentifier </code> - A unique identifier for the Amazon RDS database instance.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>DatabaseCredentials - AWS Identity and Access Management (IAM) credentials that are used to connect to the Amazon RDS database.</p>
    ///             </li>
    ///             <li>
    ///                <p>ResourceRole - A role (DataPipelineDefaultResourceRole) assumed by an EC2 instance to carry out the copy task from Amazon RDS to Amazon
    /// 			Simple Storage Service (Amazon S3). For more information, see <a href="https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p>
    ///             </li>
    ///             <li>
    ///                <p>ServiceRole - A role (DataPipelineDefaultRole) assumed by the AWS Data Pipeline service to monitor the progress of the copy task from Amazon RDS
    /// 			to Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p>
    ///             </li>
    ///             <li>
    ///                <p>SecurityInfo - The security information to use to access an RDS DB instance. You need to set up appropriate ingress rules for the security entity IDs provided to allow access to the Amazon RDS instance. Specify a [<code>SubnetId</code>, <code>SecurityGroupIds</code>] pair for a VPC-based RDS DB instance.</p>
    ///             </li>
    ///             <li>
    ///                <p>SelectSqlQuery - A query that is used to retrieve the observation data for the <code>Datasource</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>S3StagingLocation - The Amazon S3 location for staging Amazon RDS data. The data retrieved from Amazon RDS using <code>SelectSqlQuery</code> is stored in this location.</p>
    ///             </li>
    ///             <li>
    ///                <p>DataSchemaUri - The Amazon S3 location of the <code>DataSchema</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>DataSchema - A JSON string representing the schema. This is not required if <code>DataSchemaUri</code> is specified. </p>
    ///             </li>
    ///             <li>
    ///                <p>DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the <code>Datasource</code>. </p>
    ///                <p> Sample -
    ///             <code> "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let rDSData: MachineLearningClientTypes.RDSDataSpec?
    /// <p>The role that Amazon ML assumes on behalf of the user to create and activate a data
    ///           pipeline in the user's account and copy data using the <code>SelectSqlQuery</code> query from Amazon RDS to Amazon S3.</p>
    ///         <p></p>
    public let roleARN: Swift.String?

    public init (
        computeStatistics: Swift.Bool = false,
        dataSourceId: Swift.String? = nil,
        dataSourceName: Swift.String? = nil,
        rDSData: MachineLearningClientTypes.RDSDataSpec? = nil,
        roleARN: Swift.String? = nil
    )
    {
        self.computeStatistics = computeStatistics
        self.dataSourceId = dataSourceId
        self.dataSourceName = dataSourceName
        self.rDSData = rDSData
        self.roleARN = roleARN
    }
}

struct CreateDataSourceFromRDSInputBody: Swift.Equatable {
    public let dataSourceId: Swift.String?
    public let dataSourceName: Swift.String?
    public let rDSData: MachineLearningClientTypes.RDSDataSpec?
    public let roleARN: Swift.String?
    public let computeStatistics: Swift.Bool
}

extension CreateDataSourceFromRDSInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
        case rDSData = "RDSData"
        case roleARN = "RoleARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataSourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceName)
        dataSourceName = dataSourceNameDecoded
        let rDSDataDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RDSDataSpec.self, forKey: .rDSData)
        rDSData = rDSDataDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let computeStatisticsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .computeStatistics)
        computeStatistics = computeStatisticsDecoded
    }
}

extension CreateDataSourceFromRDSOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDataSourceFromRDSOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDataSourceFromRDSOutputError: Swift.Error, Swift.Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDataSourceFromRDSOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDataSourceFromRDSOutputResponse(dataSourceId: \(Swift.String(describing: dataSourceId)))"}
}

extension CreateDataSourceFromRDSOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDataSourceFromRDSOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataSourceId = output.dataSourceId
        } else {
            self.dataSourceId = nil
        }
    }
}

/// <p> Represents the output of a <code>CreateDataSourceFromRDS</code> operation, and is an acknowledgement that Amazon ML received the request.</p>
///          <p>The <code>CreateDataSourceFromRDS</code>> operation is asynchronous. You can poll for updates by using
///         the <code>GetBatchPrediction</code> operation and checking the <code>Status</code> parameter. You can
///             inspect the <code>Message</code> when <code>Status</code> shows up as <code>FAILED</code>. You can
///             also check the progress of the copy operation by going to the <code>DataPipeline</code> console and looking up
///             the pipeline using the <code>pipelineId </code> from the describe call.</p>
public struct CreateDataSourceFromRDSOutputResponse: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the datasource. This value should be identical to the value of the
    ///             <code>DataSourceID</code> in the request.
    ///         </p>
    public let dataSourceId: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

struct CreateDataSourceFromRDSOutputResponseBody: Swift.Equatable {
    public let dataSourceId: Swift.String?
}

extension CreateDataSourceFromRDSOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

public struct CreateDataSourceFromRedshiftInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDataSourceFromRedshiftInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDataSourceFromRedshiftInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDataSourceFromRedshiftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDataSourceFromRedshiftInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDataSourceFromRedshiftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDataSourceFromRedshiftOutputError>
}

extension CreateDataSourceFromRedshiftInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDataSourceFromRedshiftInput(computeStatistics: \(Swift.String(describing: computeStatistics)), dataSourceId: \(Swift.String(describing: dataSourceId)), dataSourceName: \(Swift.String(describing: dataSourceName)), dataSpec: \(Swift.String(describing: dataSpec)), roleARN: \(Swift.String(describing: roleARN)))"}
}

extension CreateDataSourceFromRedshiftInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
        case dataSpec = "DataSpec"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if computeStatistics != false {
            try encodeContainer.encode(computeStatistics, forKey: .computeStatistics)
        }
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let dataSourceName = dataSourceName {
            try encodeContainer.encode(dataSourceName, forKey: .dataSourceName)
        }
        if let dataSpec = dataSpec {
            try encodeContainer.encode(dataSpec, forKey: .dataSpec)
        }
        if let roleARN = roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
    }
}

public struct CreateDataSourceFromRedshiftInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDataSourceFromRedshiftInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDataSourceFromRedshiftInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDataSourceFromRedshiftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDataSourceFromRedshiftInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDataSourceFromRedshiftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDataSourceFromRedshiftOutputError>
}

public struct CreateDataSourceFromRedshiftInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDataSourceFromRedshiftInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDataSourceFromRedshiftInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDataSourceFromRedshiftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDataSourceFromRedshiftInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDataSourceFromRedshiftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDataSourceFromRedshiftOutputError>
}

public struct CreateDataSourceFromRedshiftInput: Swift.Equatable {
    /// <p>The compute statistics for a <code>DataSource</code>. The statistics are generated from the observation data referenced by
    ///             a <code>DataSource</code>. Amazon ML uses the statistics internally during <code>MLModel</code> training.
    ///            This parameter must be set to <code>true</code> if the <code>DataSource</code> needs to
    ///           be used for <code>MLModel</code> training.</p>
    public let computeStatistics: Swift.Bool
    /// <p>A user-supplied ID that uniquely identifies the <code>DataSource</code>.</p>
    public let dataSourceId: Swift.String?
    /// <p>A user-supplied name or description of the <code>DataSource</code>. </p>
    public let dataSourceName: Swift.String?
    /// <p>The data specification of an Amazon Redshift <code>DataSource</code>:</p>
    ///         <ul>
    ///             <li>
    ///                <p>DatabaseInformation -</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>DatabaseName</code> - The name of the Amazon Redshift database.</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code> ClusterIdentifier</code> - The unique ID for the Amazon Redshift cluster.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>DatabaseCredentials - The AWS Identity and Access Management (IAM) credentials that are used to connect to the Amazon Redshift database.</p>
    ///             </li>
    ///             <li>
    ///                <p>SelectSqlQuery - The query that is used to retrieve the observation data for the
    /// 			<code>Datasource</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>S3StagingLocation - The Amazon Simple Storage Service (Amazon S3) location for staging Amazon
    ///                     Redshift data. The data retrieved from Amazon Redshift using
    ///                         the <code>SelectSqlQuery</code> query is stored in this location.</p>
    ///             </li>
    ///             <li>
    ///                <p>DataSchemaUri - The Amazon S3 location of the <code>DataSchema</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>DataSchema - A JSON string representing the schema. This is not required if <code>DataSchemaUri</code> is specified. </p>
    ///             </li>
    ///             <li>
    ///                <p>DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the <code>DataSource</code>.</p>
    ///                <p> Sample -
    ///             <code> "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let dataSpec: MachineLearningClientTypes.RedshiftDataSpec?
    /// <p>A fully specified role Amazon Resource Name (ARN). Amazon ML assumes the role on behalf of the user to create the following:</p>
    ///
    ///            <ul>
    ///             <li>
    ///                <p>A security group to allow Amazon ML to execute the <code>SelectSqlQuery</code> query on an Amazon Redshift cluster</p>
    ///             </li>
    ///             <li>
    ///                <p>An Amazon S3 bucket policy to grant Amazon ML read/write permissions on the <code>S3StagingLocation</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let roleARN: Swift.String?

    public init (
        computeStatistics: Swift.Bool = false,
        dataSourceId: Swift.String? = nil,
        dataSourceName: Swift.String? = nil,
        dataSpec: MachineLearningClientTypes.RedshiftDataSpec? = nil,
        roleARN: Swift.String? = nil
    )
    {
        self.computeStatistics = computeStatistics
        self.dataSourceId = dataSourceId
        self.dataSourceName = dataSourceName
        self.dataSpec = dataSpec
        self.roleARN = roleARN
    }
}

struct CreateDataSourceFromRedshiftInputBody: Swift.Equatable {
    public let dataSourceId: Swift.String?
    public let dataSourceName: Swift.String?
    public let dataSpec: MachineLearningClientTypes.RedshiftDataSpec?
    public let roleARN: Swift.String?
    public let computeStatistics: Swift.Bool
}

extension CreateDataSourceFromRedshiftInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
        case dataSpec = "DataSpec"
        case roleARN = "RoleARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataSourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceName)
        dataSourceName = dataSourceNameDecoded
        let dataSpecDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftDataSpec.self, forKey: .dataSpec)
        dataSpec = dataSpecDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let computeStatisticsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .computeStatistics)
        computeStatistics = computeStatisticsDecoded
    }
}

extension CreateDataSourceFromRedshiftOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDataSourceFromRedshiftOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDataSourceFromRedshiftOutputError: Swift.Error, Swift.Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDataSourceFromRedshiftOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDataSourceFromRedshiftOutputResponse(dataSourceId: \(Swift.String(describing: dataSourceId)))"}
}

extension CreateDataSourceFromRedshiftOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDataSourceFromRedshiftOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataSourceId = output.dataSourceId
        } else {
            self.dataSourceId = nil
        }
    }
}

/// <p> Represents the output of a <code>CreateDataSourceFromRedshift</code> operation, and is an acknowledgement that Amazon ML received the request.</p>
///          <p>The <code>CreateDataSourceFromRedshift</code> operation is asynchronous. You can poll for updates by using
///         the <code>GetBatchPrediction</code> operation and checking the <code>Status</code> parameter. </p>
public struct CreateDataSourceFromRedshiftOutputResponse: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the datasource. This value should be identical to the value of the
    ///             <code>DataSourceID</code> in the request.
    ///         </p>
    public let dataSourceId: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

struct CreateDataSourceFromRedshiftOutputResponseBody: Swift.Equatable {
    public let dataSourceId: Swift.String?
}

extension CreateDataSourceFromRedshiftOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

public struct CreateDataSourceFromS3InputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDataSourceFromS3InputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDataSourceFromS3Input>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDataSourceFromS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDataSourceFromS3Input>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDataSourceFromS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDataSourceFromS3OutputError>
}

extension CreateDataSourceFromS3Input: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDataSourceFromS3Input(computeStatistics: \(Swift.String(describing: computeStatistics)), dataSourceId: \(Swift.String(describing: dataSourceId)), dataSourceName: \(Swift.String(describing: dataSourceName)), dataSpec: \(Swift.String(describing: dataSpec)))"}
}

extension CreateDataSourceFromS3Input: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
        case dataSpec = "DataSpec"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if computeStatistics != false {
            try encodeContainer.encode(computeStatistics, forKey: .computeStatistics)
        }
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let dataSourceName = dataSourceName {
            try encodeContainer.encode(dataSourceName, forKey: .dataSourceName)
        }
        if let dataSpec = dataSpec {
            try encodeContainer.encode(dataSpec, forKey: .dataSpec)
        }
    }
}

public struct CreateDataSourceFromS3InputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDataSourceFromS3InputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDataSourceFromS3Input>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDataSourceFromS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDataSourceFromS3Input>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDataSourceFromS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDataSourceFromS3OutputError>
}

public struct CreateDataSourceFromS3InputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDataSourceFromS3InputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDataSourceFromS3Input>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDataSourceFromS3OutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDataSourceFromS3Input>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDataSourceFromS3OutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDataSourceFromS3OutputError>
}

public struct CreateDataSourceFromS3Input: Swift.Equatable {
    /// <p>The compute statistics for a <code>DataSource</code>. The statistics are generated from the observation data referenced by
    ///             a <code>DataSource</code>. Amazon ML uses the statistics internally during <code>MLModel</code> training.
    ///             This parameter must be set to <code>true</code> if the <code></code>DataSource<code></code> needs to be used for <code>MLModel</code> training.</p>
    public let computeStatistics: Swift.Bool
    /// <p>A user-supplied identifier that uniquely identifies the <code>DataSource</code>. </p>
    public let dataSourceId: Swift.String?
    /// <p>A user-supplied name or description of the <code>DataSource</code>. </p>
    public let dataSourceName: Swift.String?
    /// <p>The data specification of a <code>DataSource</code>:</p>
    ///         <ul>
    ///             <li>
    ///                <p>DataLocationS3 - The Amazon S3 location of the observation data.</p>
    ///             </li>
    ///             <li>
    ///                <p>DataSchemaLocationS3 - The Amazon S3 location of the <code>DataSchema</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>DataSchema - A JSON string representing the schema. This is not required if <code>DataSchemaUri</code> is specified. </p>
    ///             </li>
    ///             <li>
    ///                <p>DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the <code>Datasource</code>. </p>
    ///                <p> Sample -
    ///             <code> "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let dataSpec: MachineLearningClientTypes.S3DataSpec?

    public init (
        computeStatistics: Swift.Bool = false,
        dataSourceId: Swift.String? = nil,
        dataSourceName: Swift.String? = nil,
        dataSpec: MachineLearningClientTypes.S3DataSpec? = nil
    )
    {
        self.computeStatistics = computeStatistics
        self.dataSourceId = dataSourceId
        self.dataSourceName = dataSourceName
        self.dataSpec = dataSpec
    }
}

struct CreateDataSourceFromS3InputBody: Swift.Equatable {
    public let dataSourceId: Swift.String?
    public let dataSourceName: Swift.String?
    public let dataSpec: MachineLearningClientTypes.S3DataSpec?
    public let computeStatistics: Swift.Bool
}

extension CreateDataSourceFromS3InputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
        case dataSpec = "DataSpec"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataSourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceName)
        dataSourceName = dataSourceNameDecoded
        let dataSpecDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.S3DataSpec.self, forKey: .dataSpec)
        dataSpec = dataSpecDecoded
        let computeStatisticsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .computeStatistics)
        computeStatistics = computeStatisticsDecoded
    }
}

extension CreateDataSourceFromS3OutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDataSourceFromS3OutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDataSourceFromS3OutputError: Swift.Error, Swift.Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDataSourceFromS3OutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDataSourceFromS3OutputResponse(dataSourceId: \(Swift.String(describing: dataSourceId)))"}
}

extension CreateDataSourceFromS3OutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDataSourceFromS3OutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataSourceId = output.dataSourceId
        } else {
            self.dataSourceId = nil
        }
    }
}

/// <p> Represents the output of a <code>CreateDataSourceFromS3</code> operation, and is an acknowledgement that Amazon ML received the request.</p>
///         <p>The <code>CreateDataSourceFromS3</code> operation is asynchronous. You can poll for updates by using
///             the <code>GetBatchPrediction</code> operation and checking the <code>Status</code> parameter. </p>
public struct CreateDataSourceFromS3OutputResponse: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>DataSource</code>. This value should be identical to the value of the
    ///             <code>DataSourceID</code> in the request.
    ///         </p>
    public let dataSourceId: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

struct CreateDataSourceFromS3OutputResponseBody: Swift.Equatable {
    public let dataSourceId: Swift.String?
}

extension CreateDataSourceFromS3OutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

public struct CreateEvaluationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateEvaluationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateEvaluationOutputError>
}

extension CreateEvaluationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEvaluationInput(evaluationDataSourceId: \(Swift.String(describing: evaluationDataSourceId)), evaluationId: \(Swift.String(describing: evaluationId)), evaluationName: \(Swift.String(describing: evaluationName)), mLModelId: \(Swift.String(describing: mLModelId)))"}
}

extension CreateEvaluationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationDataSourceId = "EvaluationDataSourceId"
        case evaluationId = "EvaluationId"
        case evaluationName = "EvaluationName"
        case mLModelId = "MLModelId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluationDataSourceId = evaluationDataSourceId {
            try encodeContainer.encode(evaluationDataSourceId, forKey: .evaluationDataSourceId)
        }
        if let evaluationId = evaluationId {
            try encodeContainer.encode(evaluationId, forKey: .evaluationId)
        }
        if let evaluationName = evaluationName {
            try encodeContainer.encode(evaluationName, forKey: .evaluationName)
        }
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
    }
}

public struct CreateEvaluationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateEvaluationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateEvaluationOutputError>
}

public struct CreateEvaluationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateEvaluationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateEvaluationOutputError>
}

public struct CreateEvaluationInput: Swift.Equatable {
    /// <p>The ID of the <code>DataSource</code> for the evaluation. The schema of the <code>DataSource</code>
    ///             must match the schema used to create the <code>MLModel</code>.</p>
    public let evaluationDataSourceId: Swift.String?
    /// <p>A user-supplied ID that uniquely identifies the <code>Evaluation</code>.</p>
    public let evaluationId: Swift.String?
    /// <p>A user-supplied name or description of the <code>Evaluation</code>.</p>
    public let evaluationName: Swift.String?
    /// <p>The ID of the <code>MLModel</code> to evaluate.</p>
    ///         <p>The schema used in creating the <code>MLModel</code> must match the schema of the <code>DataSource</code> used in the <code>Evaluation</code>.</p>
    public let mLModelId: Swift.String?

    public init (
        evaluationDataSourceId: Swift.String? = nil,
        evaluationId: Swift.String? = nil,
        evaluationName: Swift.String? = nil,
        mLModelId: Swift.String? = nil
    )
    {
        self.evaluationDataSourceId = evaluationDataSourceId
        self.evaluationId = evaluationId
        self.evaluationName = evaluationName
        self.mLModelId = mLModelId
    }
}

struct CreateEvaluationInputBody: Swift.Equatable {
    public let evaluationId: Swift.String?
    public let evaluationName: Swift.String?
    public let mLModelId: Swift.String?
    public let evaluationDataSourceId: Swift.String?
}

extension CreateEvaluationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationDataSourceId = "EvaluationDataSourceId"
        case evaluationId = "EvaluationId"
        case evaluationName = "EvaluationName"
        case mLModelId = "MLModelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
        let evaluationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationName)
        evaluationName = evaluationNameDecoded
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let evaluationDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationDataSourceId)
        evaluationDataSourceId = evaluationDataSourceIdDecoded
    }
}

extension CreateEvaluationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEvaluationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateEvaluationOutputError: Swift.Error, Swift.Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEvaluationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEvaluationOutputResponse(evaluationId: \(Swift.String(describing: evaluationId)))"}
}

extension CreateEvaluationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateEvaluationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.evaluationId = output.evaluationId
        } else {
            self.evaluationId = nil
        }
    }
}

/// <p> Represents the output of a <code>CreateEvaluation</code> operation, and is an acknowledgement that Amazon ML received the request.</p>
///         <p>
///             <code>CreateEvaluation</code> operation is asynchronous. You can poll for status updates
///           by using the <code>GetEvcaluation</code> operation
///             and checking the <code>Status</code> parameter.
///         </p>
public struct CreateEvaluationOutputResponse: Swift.Equatable {
    /// <p>The user-supplied ID that uniquely identifies the <code>Evaluation</code>. This value should be identical to the value of the
    ///             <code>EvaluationId</code> in the request.</p>
    public let evaluationId: Swift.String?

    public init (
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

struct CreateEvaluationOutputResponseBody: Swift.Equatable {
    public let evaluationId: Swift.String?
}

extension CreateEvaluationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
    }
}

public struct CreateMLModelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMLModelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMLModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMLModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMLModelOutputError>
}

extension CreateMLModelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMLModelInput(mLModelId: \(Swift.String(describing: mLModelId)), mLModelName: \(Swift.String(describing: mLModelName)), mLModelType: \(Swift.String(describing: mLModelType)), parameters: \(Swift.String(describing: parameters)), recipe: \(Swift.String(describing: recipe)), recipeUri: \(Swift.String(describing: recipeUri)), trainingDataSourceId: \(Swift.String(describing: trainingDataSourceId)))"}
}

extension CreateMLModelInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
        case mLModelName = "MLModelName"
        case mLModelType = "MLModelType"
        case parameters = "Parameters"
        case recipe = "Recipe"
        case recipeUri = "RecipeUri"
        case trainingDataSourceId = "TrainingDataSourceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
        if let mLModelName = mLModelName {
            try encodeContainer.encode(mLModelName, forKey: .mLModelName)
        }
        if let mLModelType = mLModelType {
            try encodeContainer.encode(mLModelType.rawValue, forKey: .mLModelType)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, trainingparameters0) in parameters {
                try parametersContainer.encode(trainingparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let recipe = recipe {
            try encodeContainer.encode(recipe, forKey: .recipe)
        }
        if let recipeUri = recipeUri {
            try encodeContainer.encode(recipeUri, forKey: .recipeUri)
        }
        if let trainingDataSourceId = trainingDataSourceId {
            try encodeContainer.encode(trainingDataSourceId, forKey: .trainingDataSourceId)
        }
    }
}

public struct CreateMLModelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMLModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMLModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMLModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMLModelOutputError>
}

public struct CreateMLModelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMLModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMLModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMLModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMLModelOutputError>
}

public struct CreateMLModelInput: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>MLModel</code>.</p>
    public let mLModelId: Swift.String?
    /// <p>A user-supplied name or description of the <code>MLModel</code>.</p>
    public let mLModelName: Swift.String?
    /// <p>The category of supervised learning that this <code>MLModel</code> will address. Choose from the following types:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Choose <code>REGRESSION</code> if the <code>MLModel</code> will be used to predict a numeric value.</p>
    ///             </li>
    ///             <li>
    ///                <p>Choose <code>BINARY</code> if the <code>MLModel</code> result has two possible values.</p>
    ///             </li>
    ///             <li>
    ///                <p>Choose <code>MULTICLASS</code> if the <code>MLModel</code> result has a limited number of values.</p>
    ///             </li>
    ///          </ul>
    ///         <p> For more information, see the <a href="https://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>.</p>
    public let mLModelType: MachineLearningClientTypes.MLModelType?
    /// <p>A list of the training parameters in the <code>MLModel</code>. The list is implemented as
    ///             a map of key-value pairs.</p>
    ///         <p>The following is the current set of training parameters:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.maxMLModelSizeInBytes</code> - The maximum allowed size of the model. Depending on the
    ///                     input data, the size of the model might affect its performance.</p>
    ///                 <p> The value is an integer that ranges from <code>100000</code> to <code>2147483648</code>. The default value is <code>33554432</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.maxPasses</code> - The number of times that the training process traverses the
    ///                     observations to build the <code>MLModel</code>. The value is an integer that
    ///                     ranges from <code>1</code> to <code>10000</code>. The default value is
    ///                         <code>10</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>sgd.shuffleType</code> - Whether Amazon ML shuffles the training data. Shuffling
    ///                     the data improves a model's ability to find the optimal solution for a variety
    ///                     of data types. The valid values are <code>auto</code> and <code>none</code>. The
    ///                     default value is <code>none</code>. We strongly recommend that you shuffle your data.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.l1RegularizationAmount</code> - The coefficient regularization L1 norm. It controls
    ///                     overfitting the data by penalizing large coefficients. This tends to drive
    ///                     coefficients to zero, resulting in a sparse feature set. If you use this
    ///                     parameter, start by specifying a small value, such as <code>1.0E-08</code>.</p>
    ///                 <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>.
    ///                     The default is to not use L1 normalization. This parameter can't be used when
    ///                         <code>L2</code> is specified. Use this parameter sparingly.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.l2RegularizationAmount</code> - The coefficient regularization L2 norm. It controls
    ///                     overfitting the data by penalizing large coefficients. This tends to drive
    ///                     coefficients to small, nonzero values. If you use this parameter, start by
    ///                     specifying a small value, such as <code>1.0E-08</code>.</p>
    ///                 <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>.
    ///                     The default is to not use L2 normalization. This parameter can't be used when
    ///                         <code>L1</code> is specified. Use this parameter sparingly.</p>
    ///             </li>
    ///          </ul>
    public let parameters: [Swift.String:Swift.String]?
    /// <p>The data recipe for creating the <code>MLModel</code>. You must specify either the recipe
    ///             or its URI. If you don't specify a recipe or its URI, Amazon ML creates a default.</p>
    public let recipe: Swift.String?
    /// <p>The Amazon Simple Storage Service (Amazon S3) location and file name that contains the <code>MLModel</code> recipe. You must specify either the recipe or its URI. If you don't specify a recipe or its URI, Amazon ML creates a default.</p>
    public let recipeUri: Swift.String?
    /// <p>The <code>DataSource</code> that points to the training data.</p>
    public let trainingDataSourceId: Swift.String?

    public init (
        mLModelId: Swift.String? = nil,
        mLModelName: Swift.String? = nil,
        mLModelType: MachineLearningClientTypes.MLModelType? = nil,
        parameters: [Swift.String:Swift.String]? = nil,
        recipe: Swift.String? = nil,
        recipeUri: Swift.String? = nil,
        trainingDataSourceId: Swift.String? = nil
    )
    {
        self.mLModelId = mLModelId
        self.mLModelName = mLModelName
        self.mLModelType = mLModelType
        self.parameters = parameters
        self.recipe = recipe
        self.recipeUri = recipeUri
        self.trainingDataSourceId = trainingDataSourceId
    }
}

struct CreateMLModelInputBody: Swift.Equatable {
    public let mLModelId: Swift.String?
    public let mLModelName: Swift.String?
    public let mLModelType: MachineLearningClientTypes.MLModelType?
    public let parameters: [Swift.String:Swift.String]?
    public let trainingDataSourceId: Swift.String?
    public let recipe: Swift.String?
    public let recipeUri: Swift.String?
}

extension CreateMLModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
        case mLModelName = "MLModelName"
        case mLModelType = "MLModelType"
        case parameters = "Parameters"
        case recipe = "Recipe"
        case recipeUri = "RecipeUri"
        case trainingDataSourceId = "TrainingDataSourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let mLModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelName)
        mLModelName = mLModelNameDecoded
        let mLModelTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.MLModelType.self, forKey: .mLModelType)
        mLModelType = mLModelTypeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in parametersContainer {
                if let stringtype0 = stringtype0 {
                    parametersDecoded0?[key0] = stringtype0
                }
            }
        }
        parameters = parametersDecoded0
        let trainingDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingDataSourceId)
        trainingDataSourceId = trainingDataSourceIdDecoded
        let recipeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recipe)
        recipe = recipeDecoded
        let recipeUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recipeUri)
        recipeUri = recipeUriDecoded
    }
}

extension CreateMLModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMLModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMLModelOutputError: Swift.Error, Swift.Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMLModelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMLModelOutputResponse(mLModelId: \(Swift.String(describing: mLModelId)))"}
}

extension CreateMLModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateMLModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mLModelId = output.mLModelId
        } else {
            self.mLModelId = nil
        }
    }
}

/// <p> Represents the output of a <code>CreateMLModel</code> operation, and is an acknowledgement that Amazon ML received the request.</p>
///         <p>The <code>CreateMLModel</code> operation is asynchronous. You can poll for status updates by using the
///             <code>GetMLModel</code> operation and checking the <code>Status</code> parameter.
///         </p>
public struct CreateMLModelOutputResponse: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>MLModel</code>. This value should be identical to the value of the
    ///             <code>MLModelId</code> in the request.
    ///         </p>
    public let mLModelId: Swift.String?

    public init (
        mLModelId: Swift.String? = nil
    )
    {
        self.mLModelId = mLModelId
    }
}

struct CreateMLModelOutputResponseBody: Swift.Equatable {
    public let mLModelId: Swift.String?
}

extension CreateMLModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
    }
}

public struct CreateRealtimeEndpointInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRealtimeEndpointInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRealtimeEndpointInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRealtimeEndpointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRealtimeEndpointInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRealtimeEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRealtimeEndpointOutputError>
}

extension CreateRealtimeEndpointInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRealtimeEndpointInput(mLModelId: \(Swift.String(describing: mLModelId)))"}
}

extension CreateRealtimeEndpointInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
    }
}

public struct CreateRealtimeEndpointInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRealtimeEndpointInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRealtimeEndpointInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRealtimeEndpointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRealtimeEndpointInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRealtimeEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRealtimeEndpointOutputError>
}

public struct CreateRealtimeEndpointInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRealtimeEndpointInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRealtimeEndpointInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRealtimeEndpointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRealtimeEndpointInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRealtimeEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRealtimeEndpointOutputError>
}

public struct CreateRealtimeEndpointInput: Swift.Equatable {
    /// <p>The ID assigned to the <code>MLModel</code> during creation.</p>
    public let mLModelId: Swift.String?

    public init (
        mLModelId: Swift.String? = nil
    )
    {
        self.mLModelId = mLModelId
    }
}

struct CreateRealtimeEndpointInputBody: Swift.Equatable {
    public let mLModelId: Swift.String?
}

extension CreateRealtimeEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
    }
}

extension CreateRealtimeEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRealtimeEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateRealtimeEndpointOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRealtimeEndpointOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRealtimeEndpointOutputResponse(mLModelId: \(Swift.String(describing: mLModelId)), realtimeEndpointInfo: \(Swift.String(describing: realtimeEndpointInfo)))"}
}

extension CreateRealtimeEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateRealtimeEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mLModelId = output.mLModelId
            self.realtimeEndpointInfo = output.realtimeEndpointInfo
        } else {
            self.mLModelId = nil
            self.realtimeEndpointInfo = nil
        }
    }
}

/// <p>Represents the output of an <code>CreateRealtimeEndpoint</code> operation.</p>
///         <p>The result contains the <code>MLModelId</code> and the endpoint information for the <code>MLModel</code>.</p>
///         <p>
///             <b>Note:</b> The endpoint information includes the URI of the <code>MLModel</code>; that is, the location to send online prediction requests for the specified <code>MLModel</code>.</p>
public struct CreateRealtimeEndpointOutputResponse: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>MLModel</code>. This value should be identical to the value of the
    ///             <code>MLModelId</code> in the request.</p>
    public let mLModelId: Swift.String?
    /// <p>The endpoint information of the <code>MLModel</code>
    ///          </p>
    public let realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?

    public init (
        mLModelId: Swift.String? = nil,
        realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo? = nil
    )
    {
        self.mLModelId = mLModelId
        self.realtimeEndpointInfo = realtimeEndpointInfo
    }
}

struct CreateRealtimeEndpointOutputResponseBody: Swift.Equatable {
    public let mLModelId: Swift.String?
    public let realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?
}

extension CreateRealtimeEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
        case realtimeEndpointInfo = "RealtimeEndpointInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let realtimeEndpointInfoDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RealtimeEndpointInfo.self, forKey: .realtimeEndpointInfo)
        realtimeEndpointInfo = realtimeEndpointInfoDecoded
    }
}

extension MachineLearningClientTypes.DataSource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case dataLocationS3 = "DataLocationS3"
        case dataRearrangement = "DataRearrangement"
        case dataSizeInBytes = "DataSizeInBytes"
        case dataSourceId = "DataSourceId"
        case finishedAt = "FinishedAt"
        case lastUpdatedAt = "LastUpdatedAt"
        case message = "Message"
        case name = "Name"
        case numberOfFiles = "NumberOfFiles"
        case rDSMetadata = "RDSMetadata"
        case redshiftMetadata = "RedshiftMetadata"
        case roleARN = "RoleARN"
        case startedAt = "StartedAt"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if computeStatistics != false {
            try encodeContainer.encode(computeStatistics, forKey: .computeStatistics)
        }
        if let computeTime = computeTime {
            try encodeContainer.encode(computeTime, forKey: .computeTime)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let createdByIamUser = createdByIamUser {
            try encodeContainer.encode(createdByIamUser, forKey: .createdByIamUser)
        }
        if let dataLocationS3 = dataLocationS3 {
            try encodeContainer.encode(dataLocationS3, forKey: .dataLocationS3)
        }
        if let dataRearrangement = dataRearrangement {
            try encodeContainer.encode(dataRearrangement, forKey: .dataRearrangement)
        }
        if let dataSizeInBytes = dataSizeInBytes {
            try encodeContainer.encode(dataSizeInBytes, forKey: .dataSizeInBytes)
        }
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let finishedAt = finishedAt {
            try encodeContainer.encode(finishedAt.timeIntervalSince1970, forKey: .finishedAt)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let numberOfFiles = numberOfFiles {
            try encodeContainer.encode(numberOfFiles, forKey: .numberOfFiles)
        }
        if let rDSMetadata = rDSMetadata {
            try encodeContainer.encode(rDSMetadata, forKey: .rDSMetadata)
        }
        if let redshiftMetadata = redshiftMetadata {
            try encodeContainer.encode(redshiftMetadata, forKey: .redshiftMetadata)
        }
        if let roleARN = roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let startedAt = startedAt {
            try encodeContainer.encode(startedAt.timeIntervalSince1970, forKey: .startedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataLocationS3)
        dataLocationS3 = dataLocationS3Decoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let dataSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataSizeInBytes)
        dataSizeInBytes = dataSizeInBytesDecoded
        let numberOfFilesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfFiles)
        numberOfFiles = numberOfFilesDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let redshiftMetadataDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftMetadata.self, forKey: .redshiftMetadata)
        redshiftMetadata = redshiftMetadataDecoded
        let rDSMetadataDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RDSMetadata.self, forKey: .rDSMetadata)
        rDSMetadata = rDSMetadataDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let computeStatisticsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .computeStatistics)
        computeStatistics = computeStatisticsDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
    }
}

extension MachineLearningClientTypes.DataSource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DataSource(computeStatistics: \(Swift.String(describing: computeStatistics)), computeTime: \(Swift.String(describing: computeTime)), createdAt: \(Swift.String(describing: createdAt)), createdByIamUser: \(Swift.String(describing: createdByIamUser)), dataLocationS3: \(Swift.String(describing: dataLocationS3)), dataRearrangement: \(Swift.String(describing: dataRearrangement)), dataSizeInBytes: \(Swift.String(describing: dataSizeInBytes)), dataSourceId: \(Swift.String(describing: dataSourceId)), finishedAt: \(Swift.String(describing: finishedAt)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), message: \(Swift.String(describing: message)), name: \(Swift.String(describing: name)), numberOfFiles: \(Swift.String(describing: numberOfFiles)), rDSMetadata: \(Swift.String(describing: rDSMetadata)), redshiftMetadata: \(Swift.String(describing: redshiftMetadata)), roleARN: \(Swift.String(describing: roleARN)), startedAt: \(Swift.String(describing: startedAt)), status: \(Swift.String(describing: status)))"}
}

extension MachineLearningClientTypes {
    /// <p> Represents the output of the <code>GetDataSource</code> operation. </p>
    ///          <p>  The content consists of the detailed metadata and data file information and the current status of the <code>DataSource</code>. </p>
    public struct DataSource: Swift.Equatable {
        /// <p>
        ///           The parameter is <code>true</code> if statistics need to be generated from the observation data.
        ///       </p>
        public let computeStatistics: Swift.Bool
        /// <p>Long integer type that is a 64-bit signed number.</p>
        public let computeTime: Swift.Int?
        /// <p>The time that the <code>DataSource</code> was created. The time is expressed in epoch time.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The AWS user account from which the <code>DataSource</code> was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.</p>
        public let createdByIamUser: Swift.String?
        /// <p>The location and name of the data in Amazon Simple Storage Service (Amazon S3) that is used by a <code>DataSource</code>.</p>
        public let dataLocationS3: Swift.String?
        /// <p>A JSON string that represents the splitting and rearrangement requirement used when this <code>DataSource</code>
        ///         was created.</p>
        public let dataRearrangement: Swift.String?
        /// <p>The total number of observations contained in the data files that the <code>DataSource</code> references.</p>
        public let dataSizeInBytes: Swift.Int?
        /// <p>The ID that is assigned to the <code>DataSource</code> during creation.</p>
        public let dataSourceId: Swift.String?
        /// <p>A timestamp represented in epoch time.</p>
        public let finishedAt: ClientRuntime.Date?
        /// <p>The time of the most recent edit to the
        ///       <code>BatchPrediction</code>. The time is expressed in epoch time.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>A description of the most recent details about creating the <code>DataSource</code>.</p>
        public let message: Swift.String?
        /// <p>A user-supplied name or description of the <code>DataSource</code>.</p>
        public let name: Swift.String?
        /// <p>The number of data files referenced by the <code>DataSource</code>.</p>
        public let numberOfFiles: Swift.Int?
        /// <p>The datasource details that are specific to Amazon RDS.</p>
        public let rDSMetadata: MachineLearningClientTypes.RDSMetadata?
        /// <p>Describes the <code>DataSource</code> details specific to Amazon Redshift.</p>
        public let redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata?
        /// <p>The Amazon Resource Name (ARN) of an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html#roles-about-termsandconcepts">AWS IAM Role</a>, such as the following: arn:aws:iam::account:role/rolename. </p>
        public let roleARN: Swift.String?
        /// <p>A timestamp represented in epoch time.</p>
        public let startedAt: ClientRuntime.Date?
        /// <p>The current status of the <code>DataSource</code>. This element can have one of the following values: </p>
        ///          <ul>
        ///             <li>
        ///                <p>PENDING	- Amazon Machine Learning (Amazon ML) submitted a request to create a <code>DataSource</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>INPROGRESS - The creation process is underway.</p>
        ///             </li>
        ///             <li>
        ///                <p>FAILED - The request to create a <code>DataSource</code> did not run to completion. It is not usable.</p>
        ///             </li>
        ///             <li>
        ///                <p>COMPLETED - The creation process completed successfully.</p>
        ///             </li>
        ///             <li>
        ///                <p>DELETED	- The <code>DataSource</code> is marked as deleted. It is not usable.</p>
        ///             </li>
        ///          </ul>
        public let status: MachineLearningClientTypes.EntityStatus?

        public init (
            computeStatistics: Swift.Bool = false,
            computeTime: Swift.Int? = nil,
            createdAt: ClientRuntime.Date? = nil,
            createdByIamUser: Swift.String? = nil,
            dataLocationS3: Swift.String? = nil,
            dataRearrangement: Swift.String? = nil,
            dataSizeInBytes: Swift.Int? = nil,
            dataSourceId: Swift.String? = nil,
            finishedAt: ClientRuntime.Date? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil,
            numberOfFiles: Swift.Int? = nil,
            rDSMetadata: MachineLearningClientTypes.RDSMetadata? = nil,
            redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata? = nil,
            roleARN: Swift.String? = nil,
            startedAt: ClientRuntime.Date? = nil,
            status: MachineLearningClientTypes.EntityStatus? = nil
        )
        {
            self.computeStatistics = computeStatistics
            self.computeTime = computeTime
            self.createdAt = createdAt
            self.createdByIamUser = createdByIamUser
            self.dataLocationS3 = dataLocationS3
            self.dataRearrangement = dataRearrangement
            self.dataSizeInBytes = dataSizeInBytes
            self.dataSourceId = dataSourceId
            self.finishedAt = finishedAt
            self.lastUpdatedAt = lastUpdatedAt
            self.message = message
            self.name = name
            self.numberOfFiles = numberOfFiles
            self.rDSMetadata = rDSMetadata
            self.redshiftMetadata = redshiftMetadata
            self.roleARN = roleARN
            self.startedAt = startedAt
            self.status = status
        }
    }

}

extension MachineLearningClientTypes {
    /// <p>A list of the variables to use in searching or filtering <code>DataSource</code>.</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreatedAt</code> - Sets the search criteria to <code>DataSource</code> creation date.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code> - Sets the search criteria to <code>DataSource</code> status.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Name</code> - Sets the search criteria to the contents of <code>DataSource</code>
    ///                   <code>Name</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DataUri</code> - Sets the search criteria to the URI of data files used to create the <code>DataSource</code>. The URI can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>DataSource</code> creation.</p>
    ///             </li>
    ///          </ul>
    ///
    ///         <p>
    ///             <b>Note:</b>
    ///             The variable names should match the variable names in the <code>DataSource</code>.</p>
    public enum DataSourceFilterVariable: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createdAt
        case dataUri
        case iamUser
        case lastUpdatedAt
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [DataSourceFilterVariable] {
            return [
                .createdAt,
                .dataUri,
                .iamUser,
                .lastUpdatedAt,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createdAt: return "CreatedAt"
            case .dataUri: return "DataLocationS3"
            case .iamUser: return "IAMUser"
            case .lastUpdatedAt: return "LastUpdatedAt"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataSourceFilterVariable(rawValue: rawValue) ?? DataSourceFilterVariable.sdkUnknown(rawValue)
        }
    }
}

public struct DeleteBatchPredictionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBatchPredictionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBatchPredictionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBatchPredictionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBatchPredictionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBatchPredictionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBatchPredictionOutputError>
}

extension DeleteBatchPredictionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBatchPredictionInput(batchPredictionId: \(Swift.String(describing: batchPredictionId)))"}
}

extension DeleteBatchPredictionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchPredictionId = batchPredictionId {
            try encodeContainer.encode(batchPredictionId, forKey: .batchPredictionId)
        }
    }
}

public struct DeleteBatchPredictionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBatchPredictionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBatchPredictionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBatchPredictionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBatchPredictionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBatchPredictionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBatchPredictionOutputError>
}

public struct DeleteBatchPredictionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBatchPredictionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBatchPredictionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBatchPredictionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBatchPredictionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBatchPredictionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBatchPredictionOutputError>
}

public struct DeleteBatchPredictionInput: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>BatchPrediction</code>.</p>
    public let batchPredictionId: Swift.String?

    public init (
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

struct DeleteBatchPredictionInputBody: Swift.Equatable {
    public let batchPredictionId: Swift.String?
}

extension DeleteBatchPredictionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
    }
}

extension DeleteBatchPredictionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBatchPredictionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBatchPredictionOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBatchPredictionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBatchPredictionOutputResponse(batchPredictionId: \(Swift.String(describing: batchPredictionId)))"}
}

extension DeleteBatchPredictionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteBatchPredictionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.batchPredictionId = output.batchPredictionId
        } else {
            self.batchPredictionId = nil
        }
    }
}

/// <p> Represents the output of a <code>DeleteBatchPrediction</code> operation.</p>
///         <p>You can use the <code>GetBatchPrediction</code> operation and check the value of the <code>Status</code> parameter to see whether a
///             <code>BatchPrediction</code> is marked as <code>DELETED</code>.</p>
public struct DeleteBatchPredictionOutputResponse: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>BatchPrediction</code>. This value should be identical to the value of the <code>BatchPredictionID</code> in the request.</p>
    public let batchPredictionId: Swift.String?

    public init (
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

struct DeleteBatchPredictionOutputResponseBody: Swift.Equatable {
    public let batchPredictionId: Swift.String?
}

extension DeleteBatchPredictionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
    }
}

public struct DeleteDataSourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDataSourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDataSourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDataSourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDataSourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDataSourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDataSourceOutputError>
}

extension DeleteDataSourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDataSourceInput(dataSourceId: \(Swift.String(describing: dataSourceId)))"}
}

extension DeleteDataSourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
    }
}

public struct DeleteDataSourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDataSourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDataSourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDataSourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDataSourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDataSourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDataSourceOutputError>
}

public struct DeleteDataSourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDataSourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDataSourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDataSourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDataSourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDataSourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDataSourceOutputError>
}

public struct DeleteDataSourceInput: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>DataSource</code>.</p>
    public let dataSourceId: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

struct DeleteDataSourceInputBody: Swift.Equatable {
    public let dataSourceId: Swift.String?
}

extension DeleteDataSourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

extension DeleteDataSourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDataSourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDataSourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDataSourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDataSourceOutputResponse(dataSourceId: \(Swift.String(describing: dataSourceId)))"}
}

extension DeleteDataSourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteDataSourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataSourceId = output.dataSourceId
        } else {
            self.dataSourceId = nil
        }
    }
}

/// <p> Represents the output of a <code>DeleteDataSource</code> operation.</p>
public struct DeleteDataSourceOutputResponse: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>DataSource</code>. This value should be identical to the value of the <code>DataSourceID</code> in the request.</p>
    public let dataSourceId: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

struct DeleteDataSourceOutputResponseBody: Swift.Equatable {
    public let dataSourceId: Swift.String?
}

extension DeleteDataSourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

public struct DeleteEvaluationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteEvaluationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteEvaluationOutputError>
}

extension DeleteEvaluationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteEvaluationInput(evaluationId: \(Swift.String(describing: evaluationId)))"}
}

extension DeleteEvaluationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluationId = evaluationId {
            try encodeContainer.encode(evaluationId, forKey: .evaluationId)
        }
    }
}

public struct DeleteEvaluationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteEvaluationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteEvaluationOutputError>
}

public struct DeleteEvaluationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteEvaluationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteEvaluationOutputError>
}

public struct DeleteEvaluationInput: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>Evaluation</code> to delete.</p>
    public let evaluationId: Swift.String?

    public init (
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

struct DeleteEvaluationInputBody: Swift.Equatable {
    public let evaluationId: Swift.String?
}

extension DeleteEvaluationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
    }
}

extension DeleteEvaluationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEvaluationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteEvaluationOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEvaluationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteEvaluationOutputResponse(evaluationId: \(Swift.String(describing: evaluationId)))"}
}

extension DeleteEvaluationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteEvaluationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.evaluationId = output.evaluationId
        } else {
            self.evaluationId = nil
        }
    }
}

/// <p> Represents the output of a <code>DeleteEvaluation</code> operation. The output indicates that Amazon Machine Learning (Amazon ML) received the request.</p>
///         <p>You can use the <code>GetEvaluation</code> operation and check the value of the <code>Status</code> parameter to see whether an
///             <code>Evaluation</code> is marked as <code>DELETED</code>.</p>
public struct DeleteEvaluationOutputResponse: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>Evaluation</code>. This value should be identical to the value of the <code>EvaluationId</code> in the request.</p>
    public let evaluationId: Swift.String?

    public init (
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

struct DeleteEvaluationOutputResponseBody: Swift.Equatable {
    public let evaluationId: Swift.String?
}

extension DeleteEvaluationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
    }
}

public struct DeleteMLModelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMLModelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMLModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMLModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMLModelOutputError>
}

extension DeleteMLModelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMLModelInput(mLModelId: \(Swift.String(describing: mLModelId)))"}
}

extension DeleteMLModelInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
    }
}

public struct DeleteMLModelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMLModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMLModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMLModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMLModelOutputError>
}

public struct DeleteMLModelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMLModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMLModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMLModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMLModelOutputError>
}

public struct DeleteMLModelInput: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>MLModel</code>.</p>
    public let mLModelId: Swift.String?

    public init (
        mLModelId: Swift.String? = nil
    )
    {
        self.mLModelId = mLModelId
    }
}

struct DeleteMLModelInputBody: Swift.Equatable {
    public let mLModelId: Swift.String?
}

extension DeleteMLModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
    }
}

extension DeleteMLModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMLModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMLModelOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMLModelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMLModelOutputResponse(mLModelId: \(Swift.String(describing: mLModelId)))"}
}

extension DeleteMLModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteMLModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mLModelId = output.mLModelId
        } else {
            self.mLModelId = nil
        }
    }
}

/// <p>Represents the output of a <code>DeleteMLModel</code> operation.</p>
///         <p>You can use the <code>GetMLModel</code> operation and check the value of the <code>Status</code> parameter to see whether an
///             <code>MLModel</code> is marked as <code>DELETED</code>.</p>
public struct DeleteMLModelOutputResponse: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>MLModel</code>. This value should be identical to the value of the <code>MLModelID</code> in the request.</p>
    public let mLModelId: Swift.String?

    public init (
        mLModelId: Swift.String? = nil
    )
    {
        self.mLModelId = mLModelId
    }
}

struct DeleteMLModelOutputResponseBody: Swift.Equatable {
    public let mLModelId: Swift.String?
}

extension DeleteMLModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
    }
}

public struct DeleteRealtimeEndpointInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRealtimeEndpointInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRealtimeEndpointInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRealtimeEndpointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRealtimeEndpointInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRealtimeEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRealtimeEndpointOutputError>
}

extension DeleteRealtimeEndpointInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRealtimeEndpointInput(mLModelId: \(Swift.String(describing: mLModelId)))"}
}

extension DeleteRealtimeEndpointInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
    }
}

public struct DeleteRealtimeEndpointInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRealtimeEndpointInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRealtimeEndpointInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRealtimeEndpointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRealtimeEndpointInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRealtimeEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRealtimeEndpointOutputError>
}

public struct DeleteRealtimeEndpointInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRealtimeEndpointInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRealtimeEndpointInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRealtimeEndpointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRealtimeEndpointInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRealtimeEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRealtimeEndpointOutputError>
}

public struct DeleteRealtimeEndpointInput: Swift.Equatable {
    /// <p>The ID assigned to the <code>MLModel</code> during creation.</p>
    public let mLModelId: Swift.String?

    public init (
        mLModelId: Swift.String? = nil
    )
    {
        self.mLModelId = mLModelId
    }
}

struct DeleteRealtimeEndpointInputBody: Swift.Equatable {
    public let mLModelId: Swift.String?
}

extension DeleteRealtimeEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
    }
}

extension DeleteRealtimeEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRealtimeEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRealtimeEndpointOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRealtimeEndpointOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRealtimeEndpointOutputResponse(mLModelId: \(Swift.String(describing: mLModelId)), realtimeEndpointInfo: \(Swift.String(describing: realtimeEndpointInfo)))"}
}

extension DeleteRealtimeEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteRealtimeEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mLModelId = output.mLModelId
            self.realtimeEndpointInfo = output.realtimeEndpointInfo
        } else {
            self.mLModelId = nil
            self.realtimeEndpointInfo = nil
        }
    }
}

/// <p>Represents the output of an <code>DeleteRealtimeEndpoint</code> operation.</p>
///         <p>The result contains the <code>MLModelId</code> and the endpoint information for the <code>MLModel</code>. </p>
public struct DeleteRealtimeEndpointOutputResponse: Swift.Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>MLModel</code>. This value should be identical to the value of the
    ///             <code>MLModelId</code> in the request.</p>
    public let mLModelId: Swift.String?
    /// <p>The endpoint information of the <code>MLModel</code>
    ///          </p>
    public let realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?

    public init (
        mLModelId: Swift.String? = nil,
        realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo? = nil
    )
    {
        self.mLModelId = mLModelId
        self.realtimeEndpointInfo = realtimeEndpointInfo
    }
}

struct DeleteRealtimeEndpointOutputResponseBody: Swift.Equatable {
    public let mLModelId: Swift.String?
    public let realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?
}

extension DeleteRealtimeEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
        case realtimeEndpointInfo = "RealtimeEndpointInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let realtimeEndpointInfoDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RealtimeEndpointInfo.self, forKey: .realtimeEndpointInfo)
        realtimeEndpointInfo = realtimeEndpointInfoDecoded
    }
}

public struct DeleteTagsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTagsOutputError>
}

extension DeleteTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTagsInput(resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension DeleteTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

public struct DeleteTagsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTagsOutputError>
}

public struct DeleteTagsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTagsOutputError>
}

public struct DeleteTagsInput: Swift.Equatable {
    /// <p>The ID of the tagged ML object. For example, <code>exampleModelId</code>.</p>
    public let resourceId: Swift.String?
    /// <p>The type of the tagged ML object.</p>
    public let resourceType: MachineLearningClientTypes.TaggableResourceType?
    /// <p>One or more tags to delete.</p>
    public let tagKeys: [Swift.String]?

    public init (
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.tagKeys = tagKeys
    }
}

struct DeleteTagsInputBody: Swift.Equatable {
    public let tagKeys: [Swift.String]?
    public let resourceId: Swift.String?
    public let resourceType: MachineLearningClientTypes.TaggableResourceType?
}

extension DeleteTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.TaggableResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension DeleteTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTagsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case invalidTagException(InvalidTagException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTagsOutputResponse(resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension DeleteTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceId = output.resourceId
            self.resourceType = output.resourceType
        } else {
            self.resourceId = nil
            self.resourceType = nil
        }
    }
}

/// <p>Amazon ML returns the following elements.</p>
public struct DeleteTagsOutputResponse: Swift.Equatable {
    /// <p>The ID of the ML object from which tags were deleted.</p>
    public let resourceId: Swift.String?
    /// <p>The type of the ML object from which tags were deleted.</p>
    public let resourceType: MachineLearningClientTypes.TaggableResourceType?

    public init (
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct DeleteTagsOutputResponseBody: Swift.Equatable {
    public let resourceId: Swift.String?
    public let resourceType: MachineLearningClientTypes.TaggableResourceType?
}

extension DeleteTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.TaggableResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

public struct DescribeBatchPredictionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeBatchPredictionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeBatchPredictionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeBatchPredictionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeBatchPredictionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeBatchPredictionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeBatchPredictionsOutputError>
}

extension DescribeBatchPredictionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeBatchPredictionsInput(eQ: \(Swift.String(describing: eQ)), filterVariable: \(Swift.String(describing: filterVariable)), gE: \(Swift.String(describing: gE)), gT: \(Swift.String(describing: gT)), lE: \(Swift.String(describing: lE)), lT: \(Swift.String(describing: lT)), limit: \(Swift.String(describing: limit)), nE: \(Swift.String(describing: nE)), nextToken: \(Swift.String(describing: nextToken)), prefix: \(Swift.String(describing: prefix)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension DescribeBatchPredictionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eQ = "EQ"
        case filterVariable = "FilterVariable"
        case gE = "GE"
        case gT = "GT"
        case lE = "LE"
        case lT = "LT"
        case limit = "Limit"
        case nE = "NE"
        case nextToken = "NextToken"
        case prefix = "Prefix"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eQ = eQ {
            try encodeContainer.encode(eQ, forKey: .eQ)
        }
        if let filterVariable = filterVariable {
            try encodeContainer.encode(filterVariable.rawValue, forKey: .filterVariable)
        }
        if let gE = gE {
            try encodeContainer.encode(gE, forKey: .gE)
        }
        if let gT = gT {
            try encodeContainer.encode(gT, forKey: .gT)
        }
        if let lE = lE {
            try encodeContainer.encode(lE, forKey: .lE)
        }
        if let lT = lT {
            try encodeContainer.encode(lT, forKey: .lT)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nE = nE {
            try encodeContainer.encode(nE, forKey: .nE)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct DescribeBatchPredictionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeBatchPredictionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeBatchPredictionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeBatchPredictionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeBatchPredictionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeBatchPredictionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeBatchPredictionsOutputError>
}

public struct DescribeBatchPredictionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeBatchPredictionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeBatchPredictionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeBatchPredictionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeBatchPredictionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeBatchPredictionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeBatchPredictionsOutputError>
}

public struct DescribeBatchPredictionsInput: Swift.Equatable {
    /// <p>The equal to operator. The <code>BatchPrediction</code> results will have
    ///             <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.</p>
    public let eQ: Swift.String?
    /// <p>Use one of the following variables to filter a list of <code>BatchPrediction</code>:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreatedAt</code> - Sets the search criteria to the <code>BatchPrediction</code> creation date.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code> - Sets the search criteria to the <code>BatchPrediction</code> status.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Name</code> - Sets the search criteria to the contents of the <code>BatchPrediction</code>
    ///                   <b> </b>
    ///                   <code>Name</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>BatchPrediction</code> creation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MLModelId</code> - Sets the search criteria to the <code>MLModel</code> used in the <code>BatchPrediction</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in the <code>BatchPrediction</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DataURI</code> - Sets the search criteria to the data file(s) used in the <code>BatchPrediction</code>. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory.</p>
    ///             </li>
    ///          </ul>
    public let filterVariable: MachineLearningClientTypes.BatchPredictionFilterVariable?
    /// <p>The greater than or equal to operator. The <code>BatchPrediction</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>.
    ///         </p>
    public let gE: Swift.String?
    /// <p>The greater than operator. The <code>BatchPrediction</code> results will
    ///             have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.</p>
    public let gT: Swift.String?
    /// <p>The less than or equal to operator. The <code>BatchPrediction</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.</p>
    public let lE: Swift.String?
    /// <p>The less than operator. The <code>BatchPrediction</code> results will
    ///             have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.</p>
    public let lT: Swift.String?
    /// <p>The number of pages of information to include in the result. The range of acceptable values is <code>1</code> through <code>100</code>. The default value is <code>100</code>.</p>
    public let limit: Swift.Int?
    /// <p>The not equal to operator. The <code>BatchPrediction</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.</p>
    public let nE: Swift.String?
    /// <p>An ID of the page in the paginated results.</p>
    public let nextToken: Swift.String?
    /// <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p>
    ///         <p>For example, a <code>Batch Prediction</code> operation could have the <code>Name</code>
    ///             <code>2014-09-09-HolidayGiftMailer</code>. To search for
    ///             this <code>BatchPrediction</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the
    ///             <code>Prefix</code>:
    ///         </p>
    ///
    ///         <ul>
    ///             <li>
    ///                <p>2014-09</p>
    ///             </li>
    ///             <li>
    ///                <p>2014-09-09</p>
    ///             </li>
    ///             <li>
    ///                <p>2014-09-09-Holiday</p>
    ///             </li>
    ///          </ul>
    public let prefix: Swift.String?
    /// <p>A two-value parameter that determines the sequence of the resulting list of <code>MLModel</code>s.</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</p>
    ///             </li>
    ///          </ul>
    ///         <p>Results are sorted by <code>FilterVariable</code>.</p>
    public let sortOrder: MachineLearningClientTypes.SortOrder?

    public init (
        eQ: Swift.String? = nil,
        filterVariable: MachineLearningClientTypes.BatchPredictionFilterVariable? = nil,
        gE: Swift.String? = nil,
        gT: Swift.String? = nil,
        lE: Swift.String? = nil,
        lT: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nE: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        prefix: Swift.String? = nil,
        sortOrder: MachineLearningClientTypes.SortOrder? = nil
    )
    {
        self.eQ = eQ
        self.filterVariable = filterVariable
        self.gE = gE
        self.gT = gT
        self.lE = lE
        self.lT = lT
        self.limit = limit
        self.nE = nE
        self.nextToken = nextToken
        self.prefix = prefix
        self.sortOrder = sortOrder
    }
}

struct DescribeBatchPredictionsInputBody: Swift.Equatable {
    public let filterVariable: MachineLearningClientTypes.BatchPredictionFilterVariable?
    public let eQ: Swift.String?
    public let gT: Swift.String?
    public let lT: Swift.String?
    public let gE: Swift.String?
    public let lE: Swift.String?
    public let nE: Swift.String?
    public let prefix: Swift.String?
    public let sortOrder: MachineLearningClientTypes.SortOrder?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension DescribeBatchPredictionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eQ = "EQ"
        case filterVariable = "FilterVariable"
        case gE = "GE"
        case gT = "GT"
        case lE = "LE"
        case lT = "LT"
        case limit = "Limit"
        case nE = "NE"
        case nextToken = "NextToken"
        case prefix = "Prefix"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterVariableDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.BatchPredictionFilterVariable.self, forKey: .filterVariable)
        filterVariable = filterVariableDecoded
        let eQDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eQ)
        eQ = eQDecoded
        let gTDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gT)
        gT = gTDecoded
        let lTDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lT)
        lT = lTDecoded
        let gEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gE)
        gE = gEDecoded
        let lEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lE)
        lE = lEDecoded
        let nEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nE)
        nE = nEDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeBatchPredictionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeBatchPredictionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeBatchPredictionsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeBatchPredictionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeBatchPredictionsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), results: \(Swift.String(describing: results)))"}
}

extension DescribeBatchPredictionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeBatchPredictionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.results = output.results
        } else {
            self.nextToken = nil
            self.results = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeBatchPredictions</code> operation. The content is essentially a list of <code>BatchPrediction</code>s.</p>
public struct DescribeBatchPredictionsOutputResponse: Swift.Equatable {
    /// <p>The ID of the next page in the paginated results that indicates at least one more page follows.</p>
    public let nextToken: Swift.String?
    /// <p>A list of <code>BatchPrediction</code> objects that meet the search criteria.
    ///         </p>
    public let results: [MachineLearningClientTypes.BatchPrediction]?

    public init (
        nextToken: Swift.String? = nil,
        results: [MachineLearningClientTypes.BatchPrediction]? = nil
    )
    {
        self.nextToken = nextToken
        self.results = results
    }
}

struct DescribeBatchPredictionsOutputResponseBody: Swift.Equatable {
    public let results: [MachineLearningClientTypes.BatchPrediction]?
    public let nextToken: Swift.String?
}

extension DescribeBatchPredictionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case results = "Results"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([MachineLearningClientTypes.BatchPrediction?].self, forKey: .results)
        var resultsDecoded0:[MachineLearningClientTypes.BatchPrediction]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [MachineLearningClientTypes.BatchPrediction]()
            for structure0 in resultsContainer {
                if let structure0 = structure0 {
                    resultsDecoded0?.append(structure0)
                }
            }
        }
        results = resultsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeDataSourcesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDataSourcesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDataSourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDataSourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDataSourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDataSourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDataSourcesOutputError>
}

extension DescribeDataSourcesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDataSourcesInput(eQ: \(Swift.String(describing: eQ)), filterVariable: \(Swift.String(describing: filterVariable)), gE: \(Swift.String(describing: gE)), gT: \(Swift.String(describing: gT)), lE: \(Swift.String(describing: lE)), lT: \(Swift.String(describing: lT)), limit: \(Swift.String(describing: limit)), nE: \(Swift.String(describing: nE)), nextToken: \(Swift.String(describing: nextToken)), prefix: \(Swift.String(describing: prefix)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension DescribeDataSourcesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eQ = "EQ"
        case filterVariable = "FilterVariable"
        case gE = "GE"
        case gT = "GT"
        case lE = "LE"
        case lT = "LT"
        case limit = "Limit"
        case nE = "NE"
        case nextToken = "NextToken"
        case prefix = "Prefix"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eQ = eQ {
            try encodeContainer.encode(eQ, forKey: .eQ)
        }
        if let filterVariable = filterVariable {
            try encodeContainer.encode(filterVariable.rawValue, forKey: .filterVariable)
        }
        if let gE = gE {
            try encodeContainer.encode(gE, forKey: .gE)
        }
        if let gT = gT {
            try encodeContainer.encode(gT, forKey: .gT)
        }
        if let lE = lE {
            try encodeContainer.encode(lE, forKey: .lE)
        }
        if let lT = lT {
            try encodeContainer.encode(lT, forKey: .lT)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nE = nE {
            try encodeContainer.encode(nE, forKey: .nE)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct DescribeDataSourcesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDataSourcesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDataSourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDataSourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDataSourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDataSourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDataSourcesOutputError>
}

public struct DescribeDataSourcesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDataSourcesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDataSourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDataSourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDataSourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDataSourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDataSourcesOutputError>
}

public struct DescribeDataSourcesInput: Swift.Equatable {
    /// <p>The equal to operator. The <code>DataSource</code> results will have
    ///             <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.</p>
    public let eQ: Swift.String?
    /// <p>Use one of the following variables to filter a list of <code>DataSource</code>:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreatedAt</code> - Sets the search criteria to <code>DataSource</code> creation dates.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code> - Sets the search criteria to <code>DataSource</code> statuses.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Name</code> - Sets the search criteria to the contents of <code>DataSource</code>
    ///                   <code>Name</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DataUri</code> - Sets the search criteria to the URI of data files used to create the <code>DataSource</code>. The URI can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>DataSource</code> creation.</p>
    ///             </li>
    ///          </ul>
    public let filterVariable: MachineLearningClientTypes.DataSourceFilterVariable?
    /// <p>The greater than or equal to operator. The <code>DataSource</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>.
    ///         </p>
    public let gE: Swift.String?
    /// <p>The greater than operator. The <code>DataSource</code> results will
    ///             have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.</p>
    public let gT: Swift.String?
    /// <p>The less than or equal to operator. The <code>DataSource</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.</p>
    public let lE: Swift.String?
    /// <p>The less than operator. The <code>DataSource</code> results will
    ///             have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.</p>
    public let lT: Swift.String?
    /// <p> The maximum number of <code>DataSource</code> to include in the result.</p>
    public let limit: Swift.Int?
    /// <p>The not equal to operator. The <code>DataSource</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.</p>
    public let nE: Swift.String?
    /// <p>The ID of the page in the paginated results.</p>
    public let nextToken: Swift.String?
    /// <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p>
    ///         <p>For example, a <code>DataSource</code> could have the <code>Name</code>
    ///             <code>2014-09-09-HolidayGiftMailer</code>. To search for
    ///             this <code>DataSource</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the
    ///             <code>Prefix</code>:
    ///         </p>
    ///
    ///         <ul>
    ///             <li>
    ///                <p>2014-09</p>
    ///             </li>
    ///             <li>
    ///                <p>2014-09-09</p>
    ///             </li>
    ///             <li>
    ///                <p>2014-09-09-Holiday</p>
    ///             </li>
    ///          </ul>
    public let prefix: Swift.String?
    /// <p>A two-value parameter that determines the sequence of the resulting list of <code>DataSource</code>.</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</p>
    ///             </li>
    ///          </ul>
    ///         <p>Results are sorted by <code>FilterVariable</code>.</p>
    public let sortOrder: MachineLearningClientTypes.SortOrder?

    public init (
        eQ: Swift.String? = nil,
        filterVariable: MachineLearningClientTypes.DataSourceFilterVariable? = nil,
        gE: Swift.String? = nil,
        gT: Swift.String? = nil,
        lE: Swift.String? = nil,
        lT: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nE: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        prefix: Swift.String? = nil,
        sortOrder: MachineLearningClientTypes.SortOrder? = nil
    )
    {
        self.eQ = eQ
        self.filterVariable = filterVariable
        self.gE = gE
        self.gT = gT
        self.lE = lE
        self.lT = lT
        self.limit = limit
        self.nE = nE
        self.nextToken = nextToken
        self.prefix = prefix
        self.sortOrder = sortOrder
    }
}

struct DescribeDataSourcesInputBody: Swift.Equatable {
    public let filterVariable: MachineLearningClientTypes.DataSourceFilterVariable?
    public let eQ: Swift.String?
    public let gT: Swift.String?
    public let lT: Swift.String?
    public let gE: Swift.String?
    public let lE: Swift.String?
    public let nE: Swift.String?
    public let prefix: Swift.String?
    public let sortOrder: MachineLearningClientTypes.SortOrder?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension DescribeDataSourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eQ = "EQ"
        case filterVariable = "FilterVariable"
        case gE = "GE"
        case gT = "GT"
        case lE = "LE"
        case lT = "LT"
        case limit = "Limit"
        case nE = "NE"
        case nextToken = "NextToken"
        case prefix = "Prefix"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterVariableDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.DataSourceFilterVariable.self, forKey: .filterVariable)
        filterVariable = filterVariableDecoded
        let eQDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eQ)
        eQ = eQDecoded
        let gTDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gT)
        gT = gTDecoded
        let lTDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lT)
        lT = lTDecoded
        let gEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gE)
        gE = gEDecoded
        let lEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lE)
        lE = lEDecoded
        let nEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nE)
        nE = nEDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeDataSourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDataSourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDataSourcesOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDataSourcesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDataSourcesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), results: \(Swift.String(describing: results)))"}
}

extension DescribeDataSourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDataSourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.results = output.results
        } else {
            self.nextToken = nil
            self.results = nil
        }
    }
}

/// <p>Represents the query results from a <a>DescribeDataSources</a> operation. The content is essentially a list of <code>DataSource</code>.</p>
public struct DescribeDataSourcesOutputResponse: Swift.Equatable {
    /// <p>An ID of the next page in the paginated results that indicates at least one more page follows.</p>
    public let nextToken: Swift.String?
    /// <p>A list of <code>DataSource</code> that meet the search criteria.
    ///          </p>
    public let results: [MachineLearningClientTypes.DataSource]?

    public init (
        nextToken: Swift.String? = nil,
        results: [MachineLearningClientTypes.DataSource]? = nil
    )
    {
        self.nextToken = nextToken
        self.results = results
    }
}

struct DescribeDataSourcesOutputResponseBody: Swift.Equatable {
    public let results: [MachineLearningClientTypes.DataSource]?
    public let nextToken: Swift.String?
}

extension DescribeDataSourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case results = "Results"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([MachineLearningClientTypes.DataSource?].self, forKey: .results)
        var resultsDecoded0:[MachineLearningClientTypes.DataSource]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [MachineLearningClientTypes.DataSource]()
            for structure0 in resultsContainer {
                if let structure0 = structure0 {
                    resultsDecoded0?.append(structure0)
                }
            }
        }
        results = resultsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeEvaluationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeEvaluationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeEvaluationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeEvaluationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeEvaluationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeEvaluationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeEvaluationsOutputError>
}

extension DescribeEvaluationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeEvaluationsInput(eQ: \(Swift.String(describing: eQ)), filterVariable: \(Swift.String(describing: filterVariable)), gE: \(Swift.String(describing: gE)), gT: \(Swift.String(describing: gT)), lE: \(Swift.String(describing: lE)), lT: \(Swift.String(describing: lT)), limit: \(Swift.String(describing: limit)), nE: \(Swift.String(describing: nE)), nextToken: \(Swift.String(describing: nextToken)), prefix: \(Swift.String(describing: prefix)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension DescribeEvaluationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eQ = "EQ"
        case filterVariable = "FilterVariable"
        case gE = "GE"
        case gT = "GT"
        case lE = "LE"
        case lT = "LT"
        case limit = "Limit"
        case nE = "NE"
        case nextToken = "NextToken"
        case prefix = "Prefix"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eQ = eQ {
            try encodeContainer.encode(eQ, forKey: .eQ)
        }
        if let filterVariable = filterVariable {
            try encodeContainer.encode(filterVariable.rawValue, forKey: .filterVariable)
        }
        if let gE = gE {
            try encodeContainer.encode(gE, forKey: .gE)
        }
        if let gT = gT {
            try encodeContainer.encode(gT, forKey: .gT)
        }
        if let lE = lE {
            try encodeContainer.encode(lE, forKey: .lE)
        }
        if let lT = lT {
            try encodeContainer.encode(lT, forKey: .lT)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nE = nE {
            try encodeContainer.encode(nE, forKey: .nE)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct DescribeEvaluationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeEvaluationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeEvaluationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeEvaluationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeEvaluationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeEvaluationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeEvaluationsOutputError>
}

public struct DescribeEvaluationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeEvaluationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeEvaluationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeEvaluationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeEvaluationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeEvaluationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeEvaluationsOutputError>
}

public struct DescribeEvaluationsInput: Swift.Equatable {
    /// <p>The equal to operator. The <code>Evaluation</code> results will have
    ///             <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.</p>
    public let eQ: Swift.String?
    /// <p>Use one of the following variable to filter a list of <code>Evaluation</code> objects:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreatedAt</code> - Sets the search criteria to the <code>Evaluation</code> creation date.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code> - Sets the search criteria to the <code>Evaluation</code> status.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Name</code> - Sets the search criteria to the contents of <code>Evaluation</code>
    ///                   <b> </b>
    ///                   <code>Name</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IAMUser</code> - Sets the search criteria to the user account that invoked an <code>Evaluation</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MLModelId</code> - Sets the search criteria to the <code>MLModel</code> that was evaluated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in <code>Evaluation</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DataUri</code> - Sets the search criteria to the data file(s) used in <code>Evaluation</code>. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory.</p>
    ///             </li>
    ///          </ul>
    public let filterVariable: MachineLearningClientTypes.EvaluationFilterVariable?
    /// <p>The greater than or equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>.
    ///         </p>
    public let gE: Swift.String?
    /// <p>The greater than operator. The <code>Evaluation</code> results will
    ///             have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.</p>
    public let gT: Swift.String?
    /// <p>The less than or equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.</p>
    public let lE: Swift.String?
    /// <p>The less than operator. The <code>Evaluation</code> results will
    ///             have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.</p>
    public let lT: Swift.String?
    /// <p> The maximum number of <code>Evaluation</code> to include in the result.</p>
    public let limit: Swift.Int?
    /// <p>The not equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.</p>
    public let nE: Swift.String?
    /// <p>The ID of the page in the paginated results.</p>
    public let nextToken: Swift.String?
    /// <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p>
    ///         <p>For example, an <code>Evaluation</code> could have the <code>Name</code>
    ///             <code>2014-09-09-HolidayGiftMailer</code>. To search for
    ///             this <code>Evaluation</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the
    ///             <code>Prefix</code>:
    ///         </p>
    ///
    ///         <ul>
    ///             <li>
    ///                <p>2014-09</p>
    ///             </li>
    ///             <li>
    ///                <p>2014-09-09</p>
    ///             </li>
    ///             <li>
    ///                <p>2014-09-09-Holiday</p>
    ///             </li>
    ///          </ul>
    public let prefix: Swift.String?
    /// <p>A two-value parameter that determines the sequence of the resulting list of <code>Evaluation</code>.</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</p>
    ///             </li>
    ///          </ul>
    ///         <p>Results are sorted by <code>FilterVariable</code>.</p>
    public let sortOrder: MachineLearningClientTypes.SortOrder?

    public init (
        eQ: Swift.String? = nil,
        filterVariable: MachineLearningClientTypes.EvaluationFilterVariable? = nil,
        gE: Swift.String? = nil,
        gT: Swift.String? = nil,
        lE: Swift.String? = nil,
        lT: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nE: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        prefix: Swift.String? = nil,
        sortOrder: MachineLearningClientTypes.SortOrder? = nil
    )
    {
        self.eQ = eQ
        self.filterVariable = filterVariable
        self.gE = gE
        self.gT = gT
        self.lE = lE
        self.lT = lT
        self.limit = limit
        self.nE = nE
        self.nextToken = nextToken
        self.prefix = prefix
        self.sortOrder = sortOrder
    }
}

struct DescribeEvaluationsInputBody: Swift.Equatable {
    public let filterVariable: MachineLearningClientTypes.EvaluationFilterVariable?
    public let eQ: Swift.String?
    public let gT: Swift.String?
    public let lT: Swift.String?
    public let gE: Swift.String?
    public let lE: Swift.String?
    public let nE: Swift.String?
    public let prefix: Swift.String?
    public let sortOrder: MachineLearningClientTypes.SortOrder?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension DescribeEvaluationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eQ = "EQ"
        case filterVariable = "FilterVariable"
        case gE = "GE"
        case gT = "GT"
        case lE = "LE"
        case lT = "LT"
        case limit = "Limit"
        case nE = "NE"
        case nextToken = "NextToken"
        case prefix = "Prefix"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterVariableDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EvaluationFilterVariable.self, forKey: .filterVariable)
        filterVariable = filterVariableDecoded
        let eQDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eQ)
        eQ = eQDecoded
        let gTDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gT)
        gT = gTDecoded
        let lTDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lT)
        lT = lTDecoded
        let gEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gE)
        gE = gEDecoded
        let lEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lE)
        lE = lEDecoded
        let nEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nE)
        nE = nEDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeEvaluationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEvaluationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEvaluationsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEvaluationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeEvaluationsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), results: \(Swift.String(describing: results)))"}
}

extension DescribeEvaluationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeEvaluationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.results = output.results
        } else {
            self.nextToken = nil
            self.results = nil
        }
    }
}

/// <p>Represents the query results from a <code>DescribeEvaluations</code> operation. The content is essentially a list of <code>Evaluation</code>.</p>
public struct DescribeEvaluationsOutputResponse: Swift.Equatable {
    /// <p>The ID of the next page in the paginated results that indicates at least one more page follows.</p>
    public let nextToken: Swift.String?
    /// <p>A list of <code>Evaluation</code> that meet the search criteria.
    ///         </p>
    public let results: [MachineLearningClientTypes.Evaluation]?

    public init (
        nextToken: Swift.String? = nil,
        results: [MachineLearningClientTypes.Evaluation]? = nil
    )
    {
        self.nextToken = nextToken
        self.results = results
    }
}

struct DescribeEvaluationsOutputResponseBody: Swift.Equatable {
    public let results: [MachineLearningClientTypes.Evaluation]?
    public let nextToken: Swift.String?
}

extension DescribeEvaluationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case results = "Results"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([MachineLearningClientTypes.Evaluation?].self, forKey: .results)
        var resultsDecoded0:[MachineLearningClientTypes.Evaluation]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [MachineLearningClientTypes.Evaluation]()
            for structure0 in resultsContainer {
                if let structure0 = structure0 {
                    resultsDecoded0?.append(structure0)
                }
            }
        }
        results = resultsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeMLModelsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeMLModelsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeMLModelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeMLModelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeMLModelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeMLModelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeMLModelsOutputError>
}

extension DescribeMLModelsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeMLModelsInput(eQ: \(Swift.String(describing: eQ)), filterVariable: \(Swift.String(describing: filterVariable)), gE: \(Swift.String(describing: gE)), gT: \(Swift.String(describing: gT)), lE: \(Swift.String(describing: lE)), lT: \(Swift.String(describing: lT)), limit: \(Swift.String(describing: limit)), nE: \(Swift.String(describing: nE)), nextToken: \(Swift.String(describing: nextToken)), prefix: \(Swift.String(describing: prefix)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension DescribeMLModelsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eQ = "EQ"
        case filterVariable = "FilterVariable"
        case gE = "GE"
        case gT = "GT"
        case lE = "LE"
        case lT = "LT"
        case limit = "Limit"
        case nE = "NE"
        case nextToken = "NextToken"
        case prefix = "Prefix"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eQ = eQ {
            try encodeContainer.encode(eQ, forKey: .eQ)
        }
        if let filterVariable = filterVariable {
            try encodeContainer.encode(filterVariable.rawValue, forKey: .filterVariable)
        }
        if let gE = gE {
            try encodeContainer.encode(gE, forKey: .gE)
        }
        if let gT = gT {
            try encodeContainer.encode(gT, forKey: .gT)
        }
        if let lE = lE {
            try encodeContainer.encode(lE, forKey: .lE)
        }
        if let lT = lT {
            try encodeContainer.encode(lT, forKey: .lT)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nE = nE {
            try encodeContainer.encode(nE, forKey: .nE)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct DescribeMLModelsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeMLModelsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeMLModelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeMLModelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeMLModelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeMLModelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeMLModelsOutputError>
}

public struct DescribeMLModelsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeMLModelsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeMLModelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeMLModelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeMLModelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeMLModelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeMLModelsOutputError>
}

public struct DescribeMLModelsInput: Swift.Equatable {
    /// <p>The equal to operator. The <code>MLModel</code> results will have
    ///             <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.</p>
    public let eQ: Swift.String?
    /// <p>Use one of the following variables to filter a list of <code>MLModel</code>:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreatedAt</code> - Sets the search criteria to <code>MLModel</code> creation date.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code> - Sets the search criteria to <code>MLModel</code> status.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Name</code> - Sets the search criteria to the contents of <code>MLModel</code>
    ///                   <b> </b>
    ///                   <code>Name</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>MLModel</code> creation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TrainingDataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used to train one or more <code>MLModel</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RealtimeEndpointStatus</code> - Sets the search criteria to the <code>MLModel</code> real-time endpoint status.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MLModelType</code> - Sets the search criteria to <code>MLModel</code> type: binary, regression, or multi-class.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Algorithm</code> - Sets the search criteria to the algorithm that the <code>MLModel</code> uses.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TrainingDataURI</code> - Sets the search criteria to the data file(s) used in training a <code>MLModel</code>. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</p>
    ///             </li>
    ///          </ul>
    public let filterVariable: MachineLearningClientTypes.MLModelFilterVariable?
    /// <p>The greater than or equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>.
    ///         </p>
    public let gE: Swift.String?
    /// <p>The greater than operator. The <code>MLModel</code> results will
    ///             have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.</p>
    public let gT: Swift.String?
    /// <p>The less than or equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.</p>
    public let lE: Swift.String?
    /// <p>The less than operator. The <code>MLModel</code> results will
    ///             have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.</p>
    public let lT: Swift.String?
    /// <p>The number of pages of information to include in the result. The range of acceptable values is <code>1</code> through <code>100</code>. The default value is <code>100</code>.</p>
    public let limit: Swift.Int?
    /// <p>The not equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.</p>
    public let nE: Swift.String?
    /// <p>The ID of the page in the paginated results.</p>
    public let nextToken: Swift.String?
    /// <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p>
    ///         <p>For example, an <code>MLModel</code> could have the <code>Name</code>
    ///             <code>2014-09-09-HolidayGiftMailer</code>. To search for
    ///             this <code>MLModel</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the
    ///             <code>Prefix</code>:
    ///         </p>
    ///
    ///         <ul>
    ///             <li>
    ///                <p>2014-09</p>
    ///             </li>
    ///             <li>
    ///                <p>2014-09-09</p>
    ///             </li>
    ///             <li>
    ///                <p>2014-09-09-Holiday</p>
    ///             </li>
    ///          </ul>
    public let prefix: Swift.String?
    /// <p>A two-value parameter that determines the sequence of the resulting list of <code>MLModel</code>.</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</p>
    ///             </li>
    ///          </ul>
    ///         <p>Results are sorted by <code>FilterVariable</code>.</p>
    public let sortOrder: MachineLearningClientTypes.SortOrder?

    public init (
        eQ: Swift.String? = nil,
        filterVariable: MachineLearningClientTypes.MLModelFilterVariable? = nil,
        gE: Swift.String? = nil,
        gT: Swift.String? = nil,
        lE: Swift.String? = nil,
        lT: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nE: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        prefix: Swift.String? = nil,
        sortOrder: MachineLearningClientTypes.SortOrder? = nil
    )
    {
        self.eQ = eQ
        self.filterVariable = filterVariable
        self.gE = gE
        self.gT = gT
        self.lE = lE
        self.lT = lT
        self.limit = limit
        self.nE = nE
        self.nextToken = nextToken
        self.prefix = prefix
        self.sortOrder = sortOrder
    }
}

struct DescribeMLModelsInputBody: Swift.Equatable {
    public let filterVariable: MachineLearningClientTypes.MLModelFilterVariable?
    public let eQ: Swift.String?
    public let gT: Swift.String?
    public let lT: Swift.String?
    public let gE: Swift.String?
    public let lE: Swift.String?
    public let nE: Swift.String?
    public let prefix: Swift.String?
    public let sortOrder: MachineLearningClientTypes.SortOrder?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension DescribeMLModelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eQ = "EQ"
        case filterVariable = "FilterVariable"
        case gE = "GE"
        case gT = "GT"
        case lE = "LE"
        case lT = "LT"
        case limit = "Limit"
        case nE = "NE"
        case nextToken = "NextToken"
        case prefix = "Prefix"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterVariableDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.MLModelFilterVariable.self, forKey: .filterVariable)
        filterVariable = filterVariableDecoded
        let eQDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eQ)
        eQ = eQDecoded
        let gTDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gT)
        gT = gTDecoded
        let lTDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lT)
        lT = lTDecoded
        let gEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gE)
        gE = gEDecoded
        let lEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lE)
        lE = lEDecoded
        let nEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nE)
        nE = nEDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeMLModelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMLModelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeMLModelsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMLModelsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeMLModelsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), results: \(Swift.String(describing: results)))"}
}

extension DescribeMLModelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeMLModelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.results = output.results
        } else {
            self.nextToken = nil
            self.results = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeMLModels</code> operation. The content is essentially a list of <code>MLModel</code>.</p>
public struct DescribeMLModelsOutputResponse: Swift.Equatable {
    /// <p>The ID of the next page in the paginated results that indicates at least one more page follows.</p>
    public let nextToken: Swift.String?
    /// <p>A list of <code>MLModel</code> that meet the search criteria.</p>
    public let results: [MachineLearningClientTypes.MLModel]?

    public init (
        nextToken: Swift.String? = nil,
        results: [MachineLearningClientTypes.MLModel]? = nil
    )
    {
        self.nextToken = nextToken
        self.results = results
    }
}

struct DescribeMLModelsOutputResponseBody: Swift.Equatable {
    public let results: [MachineLearningClientTypes.MLModel]?
    public let nextToken: Swift.String?
}

extension DescribeMLModelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case results = "Results"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([MachineLearningClientTypes.MLModel?].self, forKey: .results)
        var resultsDecoded0:[MachineLearningClientTypes.MLModel]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [MachineLearningClientTypes.MLModel]()
            for structure0 in resultsContainer {
                if let structure0 = structure0 {
                    resultsDecoded0?.append(structure0)
                }
            }
        }
        results = resultsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeTagsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTagsOutputError>
}

extension DescribeTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTagsInput(resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension DescribeTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }
}

public struct DescribeTagsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTagsOutputError>
}

public struct DescribeTagsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTagsOutputError>
}

public struct DescribeTagsInput: Swift.Equatable {
    /// <p>The ID of the ML object. For example, <code>exampleModelId</code>. </p>
    public let resourceId: Swift.String?
    /// <p>The type of the ML object.</p>
    public let resourceType: MachineLearningClientTypes.TaggableResourceType?

    public init (
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct DescribeTagsInputBody: Swift.Equatable {
    public let resourceId: Swift.String?
    public let resourceType: MachineLearningClientTypes.TaggableResourceType?
}

extension DescribeTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.TaggableResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension DescribeTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTagsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTagsOutputResponse(resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)), tags: \(Swift.String(describing: tags)))"}
}

extension DescribeTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceId = output.resourceId
            self.resourceType = output.resourceType
            self.tags = output.tags
        } else {
            self.resourceId = nil
            self.resourceType = nil
            self.tags = nil
        }
    }
}

/// <p>Amazon ML returns the following elements.</p>
public struct DescribeTagsOutputResponse: Swift.Equatable {
    /// <p>The ID of the tagged ML object.</p>
    public let resourceId: Swift.String?
    /// <p>The type of the tagged ML object.</p>
    public let resourceType: MachineLearningClientTypes.TaggableResourceType?
    /// <p>A list of tags associated with the ML object.</p>
    public let tags: [MachineLearningClientTypes.Tag]?

    public init (
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil,
        tags: [MachineLearningClientTypes.Tag]? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.tags = tags
    }
}

struct DescribeTagsOutputResponseBody: Swift.Equatable {
    public let resourceId: Swift.String?
    public let resourceType: MachineLearningClientTypes.TaggableResourceType?
    public let tags: [MachineLearningClientTypes.Tag]?
}

extension DescribeTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.TaggableResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([MachineLearningClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[MachineLearningClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [MachineLearningClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension MachineLearningClientTypes {
    /// <p>Contains the key values of <code>DetailsMap</code>:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PredictiveModelType</code> - Indicates the type of the <code>MLModel</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Algorithm</code> - Indicates the algorithm that was used for the <code>MLModel</code>.</p>
    ///             </li>
    ///          </ul>
    public enum DetailsAttributes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case algorithm
        case predictiveModelType
        case sdkUnknown(Swift.String)

        public static var allCases: [DetailsAttributes] {
            return [
                .algorithm,
                .predictiveModelType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .algorithm: return "Algorithm"
            case .predictiveModelType: return "PredictiveModelType"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DetailsAttributes(rawValue: rawValue) ?? DetailsAttributes.sdkUnknown(rawValue)
        }
    }
}

extension MachineLearningClientTypes {
    /// <p>Object status with the following possible values:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PENDING</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INPROGRESS</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILED</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>COMPLETED</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETED</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public enum EntityStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case deleted
        case failed
        case inprogress
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [EntityStatus] {
            return [
                .completed,
                .deleted,
                .failed,
                .inprogress,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .deleted: return "DELETED"
            case .failed: return "FAILED"
            case .inprogress: return "INPROGRESS"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EntityStatus(rawValue: rawValue) ?? EntityStatus.sdkUnknown(rawValue)
        }
    }
}

extension MachineLearningClientTypes.Evaluation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case evaluationDataSourceId = "EvaluationDataSourceId"
        case evaluationId = "EvaluationId"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case lastUpdatedAt = "LastUpdatedAt"
        case mLModelId = "MLModelId"
        case message = "Message"
        case name = "Name"
        case performanceMetrics = "PerformanceMetrics"
        case startedAt = "StartedAt"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeTime = computeTime {
            try encodeContainer.encode(computeTime, forKey: .computeTime)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let createdByIamUser = createdByIamUser {
            try encodeContainer.encode(createdByIamUser, forKey: .createdByIamUser)
        }
        if let evaluationDataSourceId = evaluationDataSourceId {
            try encodeContainer.encode(evaluationDataSourceId, forKey: .evaluationDataSourceId)
        }
        if let evaluationId = evaluationId {
            try encodeContainer.encode(evaluationId, forKey: .evaluationId)
        }
        if let finishedAt = finishedAt {
            try encodeContainer.encode(finishedAt.timeIntervalSince1970, forKey: .finishedAt)
        }
        if let inputDataLocationS3 = inputDataLocationS3 {
            try encodeContainer.encode(inputDataLocationS3, forKey: .inputDataLocationS3)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let performanceMetrics = performanceMetrics {
            try encodeContainer.encode(performanceMetrics, forKey: .performanceMetrics)
        }
        if let startedAt = startedAt {
            try encodeContainer.encode(startedAt.timeIntervalSince1970, forKey: .startedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let evaluationDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationDataSourceId)
        evaluationDataSourceId = evaluationDataSourceIdDecoded
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let performanceMetricsDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.PerformanceMetrics.self, forKey: .performanceMetrics)
        performanceMetrics = performanceMetricsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
    }
}

extension MachineLearningClientTypes.Evaluation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Evaluation(computeTime: \(Swift.String(describing: computeTime)), createdAt: \(Swift.String(describing: createdAt)), createdByIamUser: \(Swift.String(describing: createdByIamUser)), evaluationDataSourceId: \(Swift.String(describing: evaluationDataSourceId)), evaluationId: \(Swift.String(describing: evaluationId)), finishedAt: \(Swift.String(describing: finishedAt)), inputDataLocationS3: \(Swift.String(describing: inputDataLocationS3)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), mLModelId: \(Swift.String(describing: mLModelId)), message: \(Swift.String(describing: message)), name: \(Swift.String(describing: name)), performanceMetrics: \(Swift.String(describing: performanceMetrics)), startedAt: \(Swift.String(describing: startedAt)), status: \(Swift.String(describing: status)))"}
}

extension MachineLearningClientTypes {
    /// <p> Represents the output of <code>GetEvaluation</code> operation. </p>
    ///          <p>The content consists of the detailed metadata and data file information and the current status of the
    ///             <code>Evaluation</code>.</p>
    public struct Evaluation: Swift.Equatable {
        /// <p>Long integer type that is a 64-bit signed number.</p>
        public let computeTime: Swift.Int?
        /// <p>The time that the <code>Evaluation</code> was created. The time is expressed in epoch time.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The AWS user account that invoked the evaluation. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.</p>
        public let createdByIamUser: Swift.String?
        /// <p>The ID of the <code>DataSource</code> that is used to evaluate the <code>MLModel</code>.</p>
        public let evaluationDataSourceId: Swift.String?
        /// <p>The ID that is assigned to the <code>Evaluation</code> at creation.</p>
        public let evaluationId: Swift.String?
        /// <p>A timestamp represented in epoch time.</p>
        public let finishedAt: ClientRuntime.Date?
        /// <p>The location and name of the data in Amazon Simple Storage Server (Amazon S3) that is used in the evaluation.</p>
        public let inputDataLocationS3: Swift.String?
        /// <p>The time of the most recent edit to the <code>Evaluation</code>. The time is expressed in epoch time.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The ID of the <code>MLModel</code> that is the focus of the evaluation.</p>
        public let mLModelId: Swift.String?
        /// <p>A description of the most recent details about evaluating the <code>MLModel</code>.</p>
        public let message: Swift.String?
        /// <p>A user-supplied name or description of the <code>Evaluation</code>. </p>
        public let name: Swift.String?
        /// <p>Measurements of how well the <code>MLModel</code> performed, using observations referenced
        ///         by the <code>DataSource</code>. One of the following metrics is returned, based on the type of the <code>MLModel</code>:
        ///         </p>
        ///         <ul>
        ///             <li>
        ///                <p>BinaryAUC: A binary <code>MLModel</code> uses the Area Under the Curve (AUC) technique to measure performance. </p>
        ///             </li>
        ///             <li>
        ///                <p>RegressionRMSE: A regression <code>MLModel</code> uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.</p>
        ///             </li>
        ///             <li>
        ///                <p>MulticlassAvgFScore: A multiclass <code>MLModel</code> uses the F1 score technique to measure performance. </p>
        ///             </li>
        ///          </ul>
        ///         <p>
        ///             For more information about performance metrics, please see the <a href="https://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>.
        ///         </p>
        public let performanceMetrics: MachineLearningClientTypes.PerformanceMetrics?
        /// <p>A timestamp represented in epoch time.</p>
        public let startedAt: ClientRuntime.Date?
        /// <p>The status of the evaluation. This element can have one of the following values:</p>
        ///         <ul>
        ///             <li>
        ///                <p>
        ///                   <code>PENDING</code> - Amazon Machine Learning (Amazon ML) submitted a request to evaluate an <code>MLModel</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>INPROGRESS</code> - The evaluation is underway.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>FAILED</code> - The request to evaluate an <code>MLModel</code> did not run to completion. It is not usable.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>COMPLETED</code> - The evaluation process completed successfully.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>DELETED</code> - The <code>Evaluation</code> is marked as deleted. It is not usable.</p>
        ///             </li>
        ///          </ul>
        public let status: MachineLearningClientTypes.EntityStatus?

        public init (
            computeTime: Swift.Int? = nil,
            createdAt: ClientRuntime.Date? = nil,
            createdByIamUser: Swift.String? = nil,
            evaluationDataSourceId: Swift.String? = nil,
            evaluationId: Swift.String? = nil,
            finishedAt: ClientRuntime.Date? = nil,
            inputDataLocationS3: Swift.String? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            mLModelId: Swift.String? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil,
            performanceMetrics: MachineLearningClientTypes.PerformanceMetrics? = nil,
            startedAt: ClientRuntime.Date? = nil,
            status: MachineLearningClientTypes.EntityStatus? = nil
        )
        {
            self.computeTime = computeTime
            self.createdAt = createdAt
            self.createdByIamUser = createdByIamUser
            self.evaluationDataSourceId = evaluationDataSourceId
            self.evaluationId = evaluationId
            self.finishedAt = finishedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.lastUpdatedAt = lastUpdatedAt
            self.mLModelId = mLModelId
            self.message = message
            self.name = name
            self.performanceMetrics = performanceMetrics
            self.startedAt = startedAt
            self.status = status
        }
    }

}

extension MachineLearningClientTypes {
    /// <p>A list of the variables to use in searching or filtering <code>Evaluation</code>.</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreatedAt</code> - Sets the search criteria to <code>Evaluation</code> creation date.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code> - Sets the search criteria to <code>Evaluation</code> status.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Name</code> - Sets the search criteria to the contents of <code>Evaluation</code>
    ///                   <b> </b>
    ///                   <code>Name</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IAMUser</code> - Sets the search criteria to the user account that invoked an evaluation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MLModelId</code> - Sets the search criteria to the <code>Predictor</code> that was evaluated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in evaluation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DataUri</code> - Sets the search criteria to the data file(s) used in evaluation. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</p>
    ///             </li>
    ///          </ul>
    public enum EvaluationFilterVariable: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createdAt
        case datasourceId
        case dataUri
        case iamUser
        case lastUpdatedAt
        case mlModelId
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [EvaluationFilterVariable] {
            return [
                .createdAt,
                .datasourceId,
                .dataUri,
                .iamUser,
                .lastUpdatedAt,
                .mlModelId,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createdAt: return "CreatedAt"
            case .datasourceId: return "DataSourceId"
            case .dataUri: return "DataURI"
            case .iamUser: return "IAMUser"
            case .lastUpdatedAt: return "LastUpdatedAt"
            case .mlModelId: return "MLModelId"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EvaluationFilterVariable(rawValue: rawValue) ?? EvaluationFilterVariable.sdkUnknown(rawValue)
        }
    }
}

public struct GetBatchPredictionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBatchPredictionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBatchPredictionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBatchPredictionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBatchPredictionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBatchPredictionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBatchPredictionOutputError>
}

extension GetBatchPredictionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBatchPredictionInput(batchPredictionId: \(Swift.String(describing: batchPredictionId)))"}
}

extension GetBatchPredictionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchPredictionId = batchPredictionId {
            try encodeContainer.encode(batchPredictionId, forKey: .batchPredictionId)
        }
    }
}

public struct GetBatchPredictionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBatchPredictionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBatchPredictionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBatchPredictionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBatchPredictionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBatchPredictionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBatchPredictionOutputError>
}

public struct GetBatchPredictionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBatchPredictionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBatchPredictionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBatchPredictionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBatchPredictionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBatchPredictionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBatchPredictionOutputError>
}

public struct GetBatchPredictionInput: Swift.Equatable {
    /// <p>An ID assigned to the <code>BatchPrediction</code> at creation.</p>
    public let batchPredictionId: Swift.String?

    public init (
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

struct GetBatchPredictionInputBody: Swift.Equatable {
    public let batchPredictionId: Swift.String?
}

extension GetBatchPredictionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
    }
}

extension GetBatchPredictionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBatchPredictionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBatchPredictionOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBatchPredictionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBatchPredictionOutputResponse(batchPredictionDataSourceId: \(Swift.String(describing: batchPredictionDataSourceId)), batchPredictionId: \(Swift.String(describing: batchPredictionId)), computeTime: \(Swift.String(describing: computeTime)), createdAt: \(Swift.String(describing: createdAt)), createdByIamUser: \(Swift.String(describing: createdByIamUser)), finishedAt: \(Swift.String(describing: finishedAt)), inputDataLocationS3: \(Swift.String(describing: inputDataLocationS3)), invalidRecordCount: \(Swift.String(describing: invalidRecordCount)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), logUri: \(Swift.String(describing: logUri)), mLModelId: \(Swift.String(describing: mLModelId)), message: \(Swift.String(describing: message)), name: \(Swift.String(describing: name)), outputUri: \(Swift.String(describing: outputUri)), startedAt: \(Swift.String(describing: startedAt)), status: \(Swift.String(describing: status)), totalRecordCount: \(Swift.String(describing: totalRecordCount)))"}
}

extension GetBatchPredictionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBatchPredictionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.batchPredictionDataSourceId = output.batchPredictionDataSourceId
            self.batchPredictionId = output.batchPredictionId
            self.computeTime = output.computeTime
            self.createdAt = output.createdAt
            self.createdByIamUser = output.createdByIamUser
            self.finishedAt = output.finishedAt
            self.inputDataLocationS3 = output.inputDataLocationS3
            self.invalidRecordCount = output.invalidRecordCount
            self.lastUpdatedAt = output.lastUpdatedAt
            self.logUri = output.logUri
            self.mLModelId = output.mLModelId
            self.message = output.message
            self.name = output.name
            self.outputUri = output.outputUri
            self.startedAt = output.startedAt
            self.status = output.status
            self.totalRecordCount = output.totalRecordCount
        } else {
            self.batchPredictionDataSourceId = nil
            self.batchPredictionId = nil
            self.computeTime = nil
            self.createdAt = nil
            self.createdByIamUser = nil
            self.finishedAt = nil
            self.inputDataLocationS3 = nil
            self.invalidRecordCount = nil
            self.lastUpdatedAt = nil
            self.logUri = nil
            self.mLModelId = nil
            self.message = nil
            self.name = nil
            self.outputUri = nil
            self.startedAt = nil
            self.status = nil
            self.totalRecordCount = nil
        }
    }
}

/// <p>Represents the output of a <code>GetBatchPrediction</code> operation and describes a <code>BatchPrediction</code>.</p>
public struct GetBatchPredictionOutputResponse: Swift.Equatable {
    /// <p>The ID of the <code>DataSource</code> that was used to create the <code>BatchPrediction</code>.
    ///         </p>
    public let batchPredictionDataSourceId: Swift.String?
    /// <p>An ID assigned to the <code>BatchPrediction</code> at creation. This value should be identical to the value of the <code>BatchPredictionID</code>
    ///             in the request.</p>
    public let batchPredictionId: Swift.String?
    /// <p>The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the <code>BatchPrediction</code>, normalized and scaled on computation resources. <code>ComputeTime</code> is only available if the <code>BatchPrediction</code> is in the <code>COMPLETED</code> state.</p>
    public let computeTime: Swift.Int?
    /// <p>The time when the <code>BatchPrediction</code> was created. The time is expressed in epoch time.</p>
    public let createdAt: ClientRuntime.Date?
    /// <p>The AWS user account that invoked the <code>BatchPrediction</code>. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.</p>
    public let createdByIamUser: Swift.String?
    /// <p>The epoch time when Amazon Machine Learning marked the <code>BatchPrediction</code> as <code>COMPLETED</code> or <code>FAILED</code>. <code>FinishedAt</code> is only available when the <code>BatchPrediction</code> is in the <code>COMPLETED</code> or <code>FAILED</code> state.</p>
    public let finishedAt: ClientRuntime.Date?
    /// <p>The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).</p>
    public let inputDataLocationS3: Swift.String?
    /// <p>The number of invalid records that Amazon Machine Learning saw while processing the <code>BatchPrediction</code>.</p>
    public let invalidRecordCount: Swift.Int?
    /// <p>The time of the most recent edit to <code>BatchPrediction</code>. The time is expressed in epoch time.</p>
    public let lastUpdatedAt: ClientRuntime.Date?
    /// <p>A link to the file that contains logs of the <code>CreateBatchPrediction</code> operation.</p>
    public let logUri: Swift.String?
    /// <p>The ID of the <code>MLModel</code> that generated predictions for the <code>BatchPrediction</code> request.</p>
    public let mLModelId: Swift.String?
    /// <p>A description of the most recent details about processing the batch prediction request.</p>
    public let message: Swift.String?
    /// <p>A user-supplied name or description of the <code>BatchPrediction</code>.</p>
    public let name: Swift.String?
    /// <p>The location of an Amazon S3 bucket or directory to receive the operation results.</p>
    public let outputUri: Swift.String?
    /// <p>The epoch time when Amazon Machine Learning marked the <code>BatchPrediction</code> as <code>INPROGRESS</code>. <code>StartedAt</code> isn't available if the <code>BatchPrediction</code> is in the <code>PENDING</code> state.</p>
    public let startedAt: ClientRuntime.Date?
    /// <p>The status of the <code>BatchPrediction</code>, which can be one of the following values:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PENDING</code> - Amazon Machine Learning (Amazon ML) submitted a request to generate batch predictions.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INPROGRESS</code> - The batch predictions are in progress.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILED</code> - The request to perform a batch prediction did not run to completion. It is not usable.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>COMPLETED</code> - The batch prediction process completed successfully.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETED</code> - The <code>BatchPrediction</code> is marked as deleted. It is not usable.</p>
    ///             </li>
    ///          </ul>
    public let status: MachineLearningClientTypes.EntityStatus?
    /// <p>The number of total records that Amazon Machine Learning saw while processing the <code>BatchPrediction</code>.</p>
    public let totalRecordCount: Swift.Int?

    public init (
        batchPredictionDataSourceId: Swift.String? = nil,
        batchPredictionId: Swift.String? = nil,
        computeTime: Swift.Int? = nil,
        createdAt: ClientRuntime.Date? = nil,
        createdByIamUser: Swift.String? = nil,
        finishedAt: ClientRuntime.Date? = nil,
        inputDataLocationS3: Swift.String? = nil,
        invalidRecordCount: Swift.Int? = nil,
        lastUpdatedAt: ClientRuntime.Date? = nil,
        logUri: Swift.String? = nil,
        mLModelId: Swift.String? = nil,
        message: Swift.String? = nil,
        name: Swift.String? = nil,
        outputUri: Swift.String? = nil,
        startedAt: ClientRuntime.Date? = nil,
        status: MachineLearningClientTypes.EntityStatus? = nil,
        totalRecordCount: Swift.Int? = nil
    )
    {
        self.batchPredictionDataSourceId = batchPredictionDataSourceId
        self.batchPredictionId = batchPredictionId
        self.computeTime = computeTime
        self.createdAt = createdAt
        self.createdByIamUser = createdByIamUser
        self.finishedAt = finishedAt
        self.inputDataLocationS3 = inputDataLocationS3
        self.invalidRecordCount = invalidRecordCount
        self.lastUpdatedAt = lastUpdatedAt
        self.logUri = logUri
        self.mLModelId = mLModelId
        self.message = message
        self.name = name
        self.outputUri = outputUri
        self.startedAt = startedAt
        self.status = status
        self.totalRecordCount = totalRecordCount
    }
}

struct GetBatchPredictionOutputResponseBody: Swift.Equatable {
    public let batchPredictionId: Swift.String?
    public let mLModelId: Swift.String?
    public let batchPredictionDataSourceId: Swift.String?
    public let inputDataLocationS3: Swift.String?
    public let createdByIamUser: Swift.String?
    public let createdAt: ClientRuntime.Date?
    public let lastUpdatedAt: ClientRuntime.Date?
    public let name: Swift.String?
    public let status: MachineLearningClientTypes.EntityStatus?
    public let outputUri: Swift.String?
    public let logUri: Swift.String?
    public let message: Swift.String?
    public let computeTime: Swift.Int?
    public let finishedAt: ClientRuntime.Date?
    public let startedAt: ClientRuntime.Date?
    public let totalRecordCount: Swift.Int?
    public let invalidRecordCount: Swift.Int?
}

extension GetBatchPredictionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionDataSourceId = "BatchPredictionDataSourceId"
        case batchPredictionId = "BatchPredictionId"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case invalidRecordCount = "InvalidRecordCount"
        case lastUpdatedAt = "LastUpdatedAt"
        case logUri = "LogUri"
        case mLModelId = "MLModelId"
        case message = "Message"
        case name = "Name"
        case outputUri = "OutputUri"
        case startedAt = "StartedAt"
        case status = "Status"
        case totalRecordCount = "TotalRecordCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let batchPredictionDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionDataSourceId)
        batchPredictionDataSourceId = batchPredictionDataSourceIdDecoded
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let outputUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputUri)
        outputUri = outputUriDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let totalRecordCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalRecordCount)
        totalRecordCount = totalRecordCountDecoded
        let invalidRecordCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .invalidRecordCount)
        invalidRecordCount = invalidRecordCountDecoded
    }
}

public struct GetDataSourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDataSourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDataSourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDataSourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDataSourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDataSourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDataSourceOutputError>
}

extension GetDataSourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDataSourceInput(dataSourceId: \(Swift.String(describing: dataSourceId)), verbose: \(Swift.String(describing: verbose)))"}
}

extension GetDataSourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case verbose = "Verbose"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if verbose != false {
            try encodeContainer.encode(verbose, forKey: .verbose)
        }
    }
}

public struct GetDataSourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDataSourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDataSourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDataSourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDataSourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDataSourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDataSourceOutputError>
}

public struct GetDataSourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDataSourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDataSourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDataSourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDataSourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDataSourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDataSourceOutputError>
}

public struct GetDataSourceInput: Swift.Equatable {
    /// <p>The ID assigned to the <code>DataSource</code> at creation.</p>
    public let dataSourceId: Swift.String?
    /// <p>Specifies whether the <code>GetDataSource</code> operation should return <code>DataSourceSchema</code>.</p>
    ///         <p>If true, <code>DataSourceSchema</code> is returned.</p>
    ///         <p>If false, <code>DataSourceSchema</code> is not returned.</p>
    public let verbose: Swift.Bool

    public init (
        dataSourceId: Swift.String? = nil,
        verbose: Swift.Bool = false
    )
    {
        self.dataSourceId = dataSourceId
        self.verbose = verbose
    }
}

struct GetDataSourceInputBody: Swift.Equatable {
    public let dataSourceId: Swift.String?
    public let verbose: Swift.Bool
}

extension GetDataSourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case verbose = "Verbose"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let verboseDecoded = try containerValues.decode(Swift.Bool.self, forKey: .verbose)
        verbose = verboseDecoded
    }
}

extension GetDataSourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDataSourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDataSourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDataSourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDataSourceOutputResponse(computeStatistics: \(Swift.String(describing: computeStatistics)), computeTime: \(Swift.String(describing: computeTime)), createdAt: \(Swift.String(describing: createdAt)), createdByIamUser: \(Swift.String(describing: createdByIamUser)), dataLocationS3: \(Swift.String(describing: dataLocationS3)), dataRearrangement: \(Swift.String(describing: dataRearrangement)), dataSizeInBytes: \(Swift.String(describing: dataSizeInBytes)), dataSourceId: \(Swift.String(describing: dataSourceId)), dataSourceSchema: \(Swift.String(describing: dataSourceSchema)), finishedAt: \(Swift.String(describing: finishedAt)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), logUri: \(Swift.String(describing: logUri)), message: \(Swift.String(describing: message)), name: \(Swift.String(describing: name)), numberOfFiles: \(Swift.String(describing: numberOfFiles)), rDSMetadata: \(Swift.String(describing: rDSMetadata)), redshiftMetadata: \(Swift.String(describing: redshiftMetadata)), roleARN: \(Swift.String(describing: roleARN)), startedAt: \(Swift.String(describing: startedAt)), status: \(Swift.String(describing: status)))"}
}

extension GetDataSourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDataSourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computeStatistics = output.computeStatistics
            self.computeTime = output.computeTime
            self.createdAt = output.createdAt
            self.createdByIamUser = output.createdByIamUser
            self.dataLocationS3 = output.dataLocationS3
            self.dataRearrangement = output.dataRearrangement
            self.dataSizeInBytes = output.dataSizeInBytes
            self.dataSourceId = output.dataSourceId
            self.dataSourceSchema = output.dataSourceSchema
            self.finishedAt = output.finishedAt
            self.lastUpdatedAt = output.lastUpdatedAt
            self.logUri = output.logUri
            self.message = output.message
            self.name = output.name
            self.numberOfFiles = output.numberOfFiles
            self.rDSMetadata = output.rDSMetadata
            self.redshiftMetadata = output.redshiftMetadata
            self.roleARN = output.roleARN
            self.startedAt = output.startedAt
            self.status = output.status
        } else {
            self.computeStatistics = false
            self.computeTime = nil
            self.createdAt = nil
            self.createdByIamUser = nil
            self.dataLocationS3 = nil
            self.dataRearrangement = nil
            self.dataSizeInBytes = nil
            self.dataSourceId = nil
            self.dataSourceSchema = nil
            self.finishedAt = nil
            self.lastUpdatedAt = nil
            self.logUri = nil
            self.message = nil
            self.name = nil
            self.numberOfFiles = nil
            self.rDSMetadata = nil
            self.redshiftMetadata = nil
            self.roleARN = nil
            self.startedAt = nil
            self.status = nil
        }
    }
}

/// <p>Represents the output of a <code>GetDataSource</code> operation and describes a <code>DataSource</code>.</p>
public struct GetDataSourceOutputResponse: Swift.Equatable {
    /// <p>
    ///             The parameter is <code>true</code> if statistics need to be generated from the observation data.
    ///         </p>
    public let computeStatistics: Swift.Bool
    /// <p>The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the <code>DataSource</code>, normalized and scaled on computation resources. <code>ComputeTime</code> is only available if the <code>DataSource</code> is in the <code>COMPLETED</code> state and the <code>ComputeStatistics</code> is set to true.</p>
    public let computeTime: Swift.Int?
    /// <p>The time that the <code>DataSource</code> was created. The time is expressed in epoch time.</p>
    public let createdAt: ClientRuntime.Date?
    /// <p>The AWS user account from which the <code>DataSource</code> was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.</p>
    public let createdByIamUser: Swift.String?
    /// <p>The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).</p>
    public let dataLocationS3: Swift.String?
    /// <p>A JSON string that represents the splitting and rearrangement requirement used when this <code>DataSource</code>
    ///             was created.</p>
    public let dataRearrangement: Swift.String?
    /// <p>The total size of observations in the data files.</p>
    public let dataSizeInBytes: Swift.Int?
    /// <p>The ID assigned to the <code>DataSource</code> at creation.  This value should be identical to the value of the <code>DataSourceId</code> in the request.</p>
    public let dataSourceId: Swift.String?
    /// <p>The schema used by all of the data files of this <code>DataSource</code>.</p>
    ///         <p>
    ///             <b>Note:</b> This parameter is provided as part of the verbose format.</p>
    public let dataSourceSchema: Swift.String?
    /// <p>The epoch time when Amazon Machine Learning marked the <code>DataSource</code> as <code>COMPLETED</code> or <code>FAILED</code>. <code>FinishedAt</code> is only available when the <code>DataSource</code> is in the <code>COMPLETED</code> or <code>FAILED</code> state.</p>
    public let finishedAt: ClientRuntime.Date?
    /// <p>The time of the most recent edit to the <code>DataSource</code>. The time is expressed in epoch time.</p>
    public let lastUpdatedAt: ClientRuntime.Date?
    /// <p>A link to the file containing logs of <code>CreateDataSourceFrom*</code> operations.</p>
    public let logUri: Swift.String?
    /// <p>The user-supplied description of the most recent details about creating the <code>DataSource</code>.</p>
    public let message: Swift.String?
    /// <p>A user-supplied name or description of the <code>DataSource</code>.</p>
    public let name: Swift.String?
    /// <p>The number of data files referenced by the <code>DataSource</code>.</p>
    public let numberOfFiles: Swift.Int?
    /// <p>The datasource details that are specific to Amazon RDS.</p>
    public let rDSMetadata: MachineLearningClientTypes.RDSMetadata?
    /// <p>Describes the <code>DataSource</code> details specific to Amazon Redshift.</p>
    public let redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata?
    /// <p>The Amazon Resource Name (ARN) of an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html#roles-about-termsandconcepts">AWS IAM Role</a>, such as the following: arn:aws:iam::account:role/rolename. </p>
    public let roleARN: Swift.String?
    /// <p>The epoch time when Amazon Machine Learning marked the <code>DataSource</code> as <code>INPROGRESS</code>. <code>StartedAt</code> isn't available if the <code>DataSource</code> is in the <code>PENDING</code> state.</p>
    public let startedAt: ClientRuntime.Date?
    /// <p>The current status of the <code>DataSource</code>. This element can have one of the following values:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PENDING</code> - Amazon ML submitted a request to create a <code>DataSource</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INPROGRESS</code> - The creation process is underway.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILED</code> - The request to create a <code>DataSource</code> did not run to completion. It is not usable.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>COMPLETED</code> - The creation process completed successfully.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETED</code> - The <code>DataSource</code> is marked as deleted. It is not usable.</p>
    ///             </li>
    ///          </ul>
    public let status: MachineLearningClientTypes.EntityStatus?

    public init (
        computeStatistics: Swift.Bool = false,
        computeTime: Swift.Int? = nil,
        createdAt: ClientRuntime.Date? = nil,
        createdByIamUser: Swift.String? = nil,
        dataLocationS3: Swift.String? = nil,
        dataRearrangement: Swift.String? = nil,
        dataSizeInBytes: Swift.Int? = nil,
        dataSourceId: Swift.String? = nil,
        dataSourceSchema: Swift.String? = nil,
        finishedAt: ClientRuntime.Date? = nil,
        lastUpdatedAt: ClientRuntime.Date? = nil,
        logUri: Swift.String? = nil,
        message: Swift.String? = nil,
        name: Swift.String? = nil,
        numberOfFiles: Swift.Int? = nil,
        rDSMetadata: MachineLearningClientTypes.RDSMetadata? = nil,
        redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata? = nil,
        roleARN: Swift.String? = nil,
        startedAt: ClientRuntime.Date? = nil,
        status: MachineLearningClientTypes.EntityStatus? = nil
    )
    {
        self.computeStatistics = computeStatistics
        self.computeTime = computeTime
        self.createdAt = createdAt
        self.createdByIamUser = createdByIamUser
        self.dataLocationS3 = dataLocationS3
        self.dataRearrangement = dataRearrangement
        self.dataSizeInBytes = dataSizeInBytes
        self.dataSourceId = dataSourceId
        self.dataSourceSchema = dataSourceSchema
        self.finishedAt = finishedAt
        self.lastUpdatedAt = lastUpdatedAt
        self.logUri = logUri
        self.message = message
        self.name = name
        self.numberOfFiles = numberOfFiles
        self.rDSMetadata = rDSMetadata
        self.redshiftMetadata = redshiftMetadata
        self.roleARN = roleARN
        self.startedAt = startedAt
        self.status = status
    }
}

struct GetDataSourceOutputResponseBody: Swift.Equatable {
    public let dataSourceId: Swift.String?
    public let dataLocationS3: Swift.String?
    public let dataRearrangement: Swift.String?
    public let createdByIamUser: Swift.String?
    public let createdAt: ClientRuntime.Date?
    public let lastUpdatedAt: ClientRuntime.Date?
    public let dataSizeInBytes: Swift.Int?
    public let numberOfFiles: Swift.Int?
    public let name: Swift.String?
    public let status: MachineLearningClientTypes.EntityStatus?
    public let logUri: Swift.String?
    public let message: Swift.String?
    public let redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata?
    public let rDSMetadata: MachineLearningClientTypes.RDSMetadata?
    public let roleARN: Swift.String?
    public let computeStatistics: Swift.Bool
    public let computeTime: Swift.Int?
    public let finishedAt: ClientRuntime.Date?
    public let startedAt: ClientRuntime.Date?
    public let dataSourceSchema: Swift.String?
}

extension GetDataSourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case dataLocationS3 = "DataLocationS3"
        case dataRearrangement = "DataRearrangement"
        case dataSizeInBytes = "DataSizeInBytes"
        case dataSourceId = "DataSourceId"
        case dataSourceSchema = "DataSourceSchema"
        case finishedAt = "FinishedAt"
        case lastUpdatedAt = "LastUpdatedAt"
        case logUri = "LogUri"
        case message = "Message"
        case name = "Name"
        case numberOfFiles = "NumberOfFiles"
        case rDSMetadata = "RDSMetadata"
        case redshiftMetadata = "RedshiftMetadata"
        case roleARN = "RoleARN"
        case startedAt = "StartedAt"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataLocationS3)
        dataLocationS3 = dataLocationS3Decoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let dataSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataSizeInBytes)
        dataSizeInBytes = dataSizeInBytesDecoded
        let numberOfFilesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfFiles)
        numberOfFiles = numberOfFilesDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let redshiftMetadataDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftMetadata.self, forKey: .redshiftMetadata)
        redshiftMetadata = redshiftMetadataDecoded
        let rDSMetadataDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RDSMetadata.self, forKey: .rDSMetadata)
        rDSMetadata = rDSMetadataDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let computeStatisticsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .computeStatistics)
        computeStatistics = computeStatisticsDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let dataSourceSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceSchema)
        dataSourceSchema = dataSourceSchemaDecoded
    }
}

public struct GetEvaluationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEvaluationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEvaluationOutputError>
}

extension GetEvaluationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEvaluationInput(evaluationId: \(Swift.String(describing: evaluationId)))"}
}

extension GetEvaluationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluationId = evaluationId {
            try encodeContainer.encode(evaluationId, forKey: .evaluationId)
        }
    }
}

public struct GetEvaluationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEvaluationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEvaluationOutputError>
}

public struct GetEvaluationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEvaluationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEvaluationOutputError>
}

public struct GetEvaluationInput: Swift.Equatable {
    /// <p>The ID of the <code>Evaluation</code> to retrieve. The evaluation of each <code>MLModel</code> is recorded and cataloged. The ID provides the means to access the information. </p>
    public let evaluationId: Swift.String?

    public init (
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

struct GetEvaluationInputBody: Swift.Equatable {
    public let evaluationId: Swift.String?
}

extension GetEvaluationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
    }
}

extension GetEvaluationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEvaluationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetEvaluationOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEvaluationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEvaluationOutputResponse(computeTime: \(Swift.String(describing: computeTime)), createdAt: \(Swift.String(describing: createdAt)), createdByIamUser: \(Swift.String(describing: createdByIamUser)), evaluationDataSourceId: \(Swift.String(describing: evaluationDataSourceId)), evaluationId: \(Swift.String(describing: evaluationId)), finishedAt: \(Swift.String(describing: finishedAt)), inputDataLocationS3: \(Swift.String(describing: inputDataLocationS3)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), logUri: \(Swift.String(describing: logUri)), mLModelId: \(Swift.String(describing: mLModelId)), message: \(Swift.String(describing: message)), name: \(Swift.String(describing: name)), performanceMetrics: \(Swift.String(describing: performanceMetrics)), startedAt: \(Swift.String(describing: startedAt)), status: \(Swift.String(describing: status)))"}
}

extension GetEvaluationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetEvaluationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computeTime = output.computeTime
            self.createdAt = output.createdAt
            self.createdByIamUser = output.createdByIamUser
            self.evaluationDataSourceId = output.evaluationDataSourceId
            self.evaluationId = output.evaluationId
            self.finishedAt = output.finishedAt
            self.inputDataLocationS3 = output.inputDataLocationS3
            self.lastUpdatedAt = output.lastUpdatedAt
            self.logUri = output.logUri
            self.mLModelId = output.mLModelId
            self.message = output.message
            self.name = output.name
            self.performanceMetrics = output.performanceMetrics
            self.startedAt = output.startedAt
            self.status = output.status
        } else {
            self.computeTime = nil
            self.createdAt = nil
            self.createdByIamUser = nil
            self.evaluationDataSourceId = nil
            self.evaluationId = nil
            self.finishedAt = nil
            self.inputDataLocationS3 = nil
            self.lastUpdatedAt = nil
            self.logUri = nil
            self.mLModelId = nil
            self.message = nil
            self.name = nil
            self.performanceMetrics = nil
            self.startedAt = nil
            self.status = nil
        }
    }
}

/// <p>Represents the output of a <code>GetEvaluation</code> operation and describes an <code>Evaluation</code>.</p>
public struct GetEvaluationOutputResponse: Swift.Equatable {
    /// <p>The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the <code>Evaluation</code>, normalized and scaled on computation resources. <code>ComputeTime</code> is only available if the <code>Evaluation</code> is in the <code>COMPLETED</code> state.</p>
    public let computeTime: Swift.Int?
    /// <p>The time that the <code>Evaluation</code> was created. The time is expressed in epoch time.</p>
    public let createdAt: ClientRuntime.Date?
    /// <p>The AWS user account that invoked the evaluation. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.</p>
    public let createdByIamUser: Swift.String?
    /// <p>The <code>DataSource</code> used for this evaluation.</p>
    public let evaluationDataSourceId: Swift.String?
    /// <p>The evaluation ID which is same as the <code>EvaluationId</code> in the request.</p>
    public let evaluationId: Swift.String?
    /// <p>The epoch time when Amazon Machine Learning marked the <code>Evaluation</code> as <code>COMPLETED</code> or <code>FAILED</code>. <code>FinishedAt</code> is only available when the <code>Evaluation</code> is in the <code>COMPLETED</code> or <code>FAILED</code> state.</p>
    public let finishedAt: ClientRuntime.Date?
    /// <p>The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).</p>
    public let inputDataLocationS3: Swift.String?
    /// <p>The time of the most recent edit to the <code>Evaluation</code>. The time is expressed in epoch time.</p>
    public let lastUpdatedAt: ClientRuntime.Date?
    /// <p>A link to the file that contains logs of the <code>CreateEvaluation</code> operation.</p>
    public let logUri: Swift.String?
    /// <p>The ID of the <code>MLModel</code> that was the focus of the evaluation.</p>
    public let mLModelId: Swift.String?
    /// <p>A description of the most recent details about evaluating the <code>MLModel</code>.</p>
    public let message: Swift.String?
    /// <p>A user-supplied name or description of the <code>Evaluation</code>. </p>
    public let name: Swift.String?
    /// <p>Measurements of how well the <code>MLModel</code> performed using observations referenced by the <code>DataSource</code>. One of the following metric is returned based on the type of the <code>MLModel</code>:
    ///         </p>
    ///         <ul>
    ///             <li>
    ///                <p>BinaryAUC: A binary <code>MLModel</code> uses the Area Under the Curve (AUC) technique to measure performance. </p>
    ///             </li>
    ///             <li>
    ///                <p>RegressionRMSE: A regression <code>MLModel</code> uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.</p>
    ///             </li>
    ///             <li>
    ///                <p>MulticlassAvgFScore: A multiclass <code>MLModel</code> uses the F1 score technique to measure performance. </p>
    ///             </li>
    ///          </ul>
    ///         <p>
    ///                         For more information about performance metrics, please see the <a href="https://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>.
    ///         </p>
    public let performanceMetrics: MachineLearningClientTypes.PerformanceMetrics?
    /// <p>The epoch time when Amazon Machine Learning marked the <code>Evaluation</code> as <code>INPROGRESS</code>. <code>StartedAt</code> isn't available if the <code>Evaluation</code> is in the <code>PENDING</code> state.</p>
    public let startedAt: ClientRuntime.Date?
    /// <p>The status of the evaluation. This element can have one of the following values:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PENDING</code> - Amazon Machine Language (Amazon ML) submitted a request to evaluate an <code>MLModel</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INPROGRESS</code> - The evaluation is underway.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILED</code> - The request to evaluate an <code>MLModel</code> did not run to completion. It is not usable.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>COMPLETED</code> - The evaluation process completed successfully.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETED</code> - The <code>Evaluation</code> is marked as deleted. It is not usable.</p>
    ///             </li>
    ///          </ul>
    public let status: MachineLearningClientTypes.EntityStatus?

    public init (
        computeTime: Swift.Int? = nil,
        createdAt: ClientRuntime.Date? = nil,
        createdByIamUser: Swift.String? = nil,
        evaluationDataSourceId: Swift.String? = nil,
        evaluationId: Swift.String? = nil,
        finishedAt: ClientRuntime.Date? = nil,
        inputDataLocationS3: Swift.String? = nil,
        lastUpdatedAt: ClientRuntime.Date? = nil,
        logUri: Swift.String? = nil,
        mLModelId: Swift.String? = nil,
        message: Swift.String? = nil,
        name: Swift.String? = nil,
        performanceMetrics: MachineLearningClientTypes.PerformanceMetrics? = nil,
        startedAt: ClientRuntime.Date? = nil,
        status: MachineLearningClientTypes.EntityStatus? = nil
    )
    {
        self.computeTime = computeTime
        self.createdAt = createdAt
        self.createdByIamUser = createdByIamUser
        self.evaluationDataSourceId = evaluationDataSourceId
        self.evaluationId = evaluationId
        self.finishedAt = finishedAt
        self.inputDataLocationS3 = inputDataLocationS3
        self.lastUpdatedAt = lastUpdatedAt
        self.logUri = logUri
        self.mLModelId = mLModelId
        self.message = message
        self.name = name
        self.performanceMetrics = performanceMetrics
        self.startedAt = startedAt
        self.status = status
    }
}

struct GetEvaluationOutputResponseBody: Swift.Equatable {
    public let evaluationId: Swift.String?
    public let mLModelId: Swift.String?
    public let evaluationDataSourceId: Swift.String?
    public let inputDataLocationS3: Swift.String?
    public let createdByIamUser: Swift.String?
    public let createdAt: ClientRuntime.Date?
    public let lastUpdatedAt: ClientRuntime.Date?
    public let name: Swift.String?
    public let status: MachineLearningClientTypes.EntityStatus?
    public let performanceMetrics: MachineLearningClientTypes.PerformanceMetrics?
    public let logUri: Swift.String?
    public let message: Swift.String?
    public let computeTime: Swift.Int?
    public let finishedAt: ClientRuntime.Date?
    public let startedAt: ClientRuntime.Date?
}

extension GetEvaluationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case evaluationDataSourceId = "EvaluationDataSourceId"
        case evaluationId = "EvaluationId"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case lastUpdatedAt = "LastUpdatedAt"
        case logUri = "LogUri"
        case mLModelId = "MLModelId"
        case message = "Message"
        case name = "Name"
        case performanceMetrics = "PerformanceMetrics"
        case startedAt = "StartedAt"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let evaluationDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationDataSourceId)
        evaluationDataSourceId = evaluationDataSourceIdDecoded
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let performanceMetricsDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.PerformanceMetrics.self, forKey: .performanceMetrics)
        performanceMetrics = performanceMetricsDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
    }
}

public struct GetMLModelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMLModelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMLModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMLModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMLModelOutputError>
}

extension GetMLModelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMLModelInput(mLModelId: \(Swift.String(describing: mLModelId)), verbose: \(Swift.String(describing: verbose)))"}
}

extension GetMLModelInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
        case verbose = "Verbose"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
        if verbose != false {
            try encodeContainer.encode(verbose, forKey: .verbose)
        }
    }
}

public struct GetMLModelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMLModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMLModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMLModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMLModelOutputError>
}

public struct GetMLModelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMLModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMLModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMLModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMLModelOutputError>
}

public struct GetMLModelInput: Swift.Equatable {
    /// <p>The ID assigned to the <code>MLModel</code> at creation.</p>
    public let mLModelId: Swift.String?
    /// <p>Specifies whether the <code>GetMLModel</code> operation should return <code>Recipe</code>.</p>
    ///         <p>If true, <code>Recipe</code> is returned.</p>
    ///         <p>If false, <code>Recipe</code> is not returned.</p>
    public let verbose: Swift.Bool

    public init (
        mLModelId: Swift.String? = nil,
        verbose: Swift.Bool = false
    )
    {
        self.mLModelId = mLModelId
        self.verbose = verbose
    }
}

struct GetMLModelInputBody: Swift.Equatable {
    public let mLModelId: Swift.String?
    public let verbose: Swift.Bool
}

extension GetMLModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
        case verbose = "Verbose"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let verboseDecoded = try containerValues.decode(Swift.Bool.self, forKey: .verbose)
        verbose = verboseDecoded
    }
}

extension GetMLModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMLModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMLModelOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMLModelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMLModelOutputResponse(computeTime: \(Swift.String(describing: computeTime)), createdAt: \(Swift.String(describing: createdAt)), createdByIamUser: \(Swift.String(describing: createdByIamUser)), endpointInfo: \(Swift.String(describing: endpointInfo)), finishedAt: \(Swift.String(describing: finishedAt)), inputDataLocationS3: \(Swift.String(describing: inputDataLocationS3)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), logUri: \(Swift.String(describing: logUri)), mLModelId: \(Swift.String(describing: mLModelId)), mLModelType: \(Swift.String(describing: mLModelType)), message: \(Swift.String(describing: message)), name: \(Swift.String(describing: name)), recipe: \(Swift.String(describing: recipe)), schema: \(Swift.String(describing: schema)), scoreThreshold: \(Swift.String(describing: scoreThreshold)), scoreThresholdLastUpdatedAt: \(Swift.String(describing: scoreThresholdLastUpdatedAt)), sizeInBytes: \(Swift.String(describing: sizeInBytes)), startedAt: \(Swift.String(describing: startedAt)), status: \(Swift.String(describing: status)), trainingDataSourceId: \(Swift.String(describing: trainingDataSourceId)), trainingParameters: \(Swift.String(describing: trainingParameters)))"}
}

extension GetMLModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMLModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computeTime = output.computeTime
            self.createdAt = output.createdAt
            self.createdByIamUser = output.createdByIamUser
            self.endpointInfo = output.endpointInfo
            self.finishedAt = output.finishedAt
            self.inputDataLocationS3 = output.inputDataLocationS3
            self.lastUpdatedAt = output.lastUpdatedAt
            self.logUri = output.logUri
            self.mLModelId = output.mLModelId
            self.mLModelType = output.mLModelType
            self.message = output.message
            self.name = output.name
            self.recipe = output.recipe
            self.schema = output.schema
            self.scoreThreshold = output.scoreThreshold
            self.scoreThresholdLastUpdatedAt = output.scoreThresholdLastUpdatedAt
            self.sizeInBytes = output.sizeInBytes
            self.startedAt = output.startedAt
            self.status = output.status
            self.trainingDataSourceId = output.trainingDataSourceId
            self.trainingParameters = output.trainingParameters
        } else {
            self.computeTime = nil
            self.createdAt = nil
            self.createdByIamUser = nil
            self.endpointInfo = nil
            self.finishedAt = nil
            self.inputDataLocationS3 = nil
            self.lastUpdatedAt = nil
            self.logUri = nil
            self.mLModelId = nil
            self.mLModelType = nil
            self.message = nil
            self.name = nil
            self.recipe = nil
            self.schema = nil
            self.scoreThreshold = nil
            self.scoreThresholdLastUpdatedAt = nil
            self.sizeInBytes = nil
            self.startedAt = nil
            self.status = nil
            self.trainingDataSourceId = nil
            self.trainingParameters = nil
        }
    }
}

/// <p>Represents the output of a <code>GetMLModel</code> operation, and provides detailed information about a <code>MLModel</code>.</p>
public struct GetMLModelOutputResponse: Swift.Equatable {
    /// <p>The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the <code>MLModel</code>, normalized and scaled on computation resources. <code>ComputeTime</code> is only available if the <code>MLModel</code> is in the <code>COMPLETED</code> state.</p>
    public let computeTime: Swift.Int?
    /// <p>The time that the <code>MLModel</code> was created. The time is expressed in epoch time.</p>
    public let createdAt: ClientRuntime.Date?
    /// <p>The AWS user account from which the <code>MLModel</code> was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.</p>
    public let createdByIamUser: Swift.String?
    /// <p>The current endpoint of the <code>MLModel</code>
    ///          </p>
    public let endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?
    /// <p>The epoch time when Amazon Machine Learning marked the <code>MLModel</code> as <code>COMPLETED</code> or <code>FAILED</code>. <code>FinishedAt</code> is only available when the <code>MLModel</code> is in the <code>COMPLETED</code> or <code>FAILED</code> state.</p>
    public let finishedAt: ClientRuntime.Date?
    /// <p>The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).</p>
    public let inputDataLocationS3: Swift.String?
    /// <p>The time of the most recent edit to the <code>MLModel</code>. The time is expressed in epoch time.</p>
    public let lastUpdatedAt: ClientRuntime.Date?
    /// <p>A link to the file that contains logs of the <code>CreateMLModel</code> operation.</p>
    public let logUri: Swift.String?
    /// <p>The MLModel ID,
    ///             which is same as the <code>MLModelId</code> in the request.</p>
    public let mLModelId: Swift.String?
    /// <p>Identifies the <code>MLModel</code> category. The following are the available types: </p>
    ///         <ul>
    ///             <li>
    ///                <p>REGRESSION -- Produces a numeric result. For example, "What price should a house be listed at?"</p>
    ///             </li>
    ///             <li>
    ///                <p>BINARY -- Produces one of two possible results. For example, "Is this an e-commerce website?"</p>
    ///             </li>
    ///             <li>
    ///                <p>MULTICLASS -- Produces one of several possible results. For example, "Is this a HIGH, LOW or MEDIUM risk trade?"</p>
    ///             </li>
    ///          </ul>
    public let mLModelType: MachineLearningClientTypes.MLModelType?
    /// <p>A description of the most recent details about accessing the <code>MLModel</code>.</p>
    public let message: Swift.String?
    /// <p>A user-supplied name or description of the <code>MLModel</code>.</p>
    public let name: Swift.String?
    /// <p>The recipe to use when training the <code>MLModel</code>. The <code>Recipe</code>
    ///             provides detailed information about the observation data to use during training, and
    ///             manipulations to perform on the observation data during training.</p>
    ///         <p>
    ///             <b>Note:</b> This parameter is provided as part of the verbose format.</p>
    public let recipe: Swift.String?
    /// <p>The schema used by all of the data files referenced by the <code>DataSource</code>.</p>
    ///         <p>
    ///             <b>Note:</b> This parameter is provided as part of the verbose format.</p>
    public let schema: Swift.String?
    /// <p>The scoring threshold is used in binary classification <code>MLModel</code>
    ///             models. It marks the boundary between a positive prediction and a
    ///             negative prediction.</p>
    ///         <p>Output values greater than or equal to the threshold receive a positive result from the MLModel, such as
    ///             <code>true</code>. Output values less than the threshold receive a negative response from the MLModel,
    ///             such as <code>false</code>.</p>
    public let scoreThreshold: Swift.Float?
    /// <p>The time of the most recent edit to the <code>ScoreThreshold</code>. The time is expressed in epoch time.</p>
    public let scoreThresholdLastUpdatedAt: ClientRuntime.Date?
    /// <p>Long integer type that is a 64-bit signed number.</p>
    public let sizeInBytes: Swift.Int?
    /// <p>The epoch time when Amazon Machine Learning marked the <code>MLModel</code> as <code>INPROGRESS</code>. <code>StartedAt</code> isn't available if the <code>MLModel</code> is in the <code>PENDING</code> state.</p>
    public let startedAt: ClientRuntime.Date?
    /// <p>The current status of the <code>MLModel</code>. This element can have one of the following values:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PENDING</code> - Amazon Machine Learning (Amazon ML) submitted a request to describe a <code>MLModel</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INPROGRESS</code> - The request is processing.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILED</code> - The request did not run to completion. The ML model isn't
    ///                 usable.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>COMPLETED</code> - The request completed successfully.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETED</code> - The <code>MLModel</code> is marked as deleted. It isn't
    ///                 usable.</p>
    ///             </li>
    ///          </ul>
    public let status: MachineLearningClientTypes.EntityStatus?
    /// <p>The ID of the training <code>DataSource</code>.</p>
    public let trainingDataSourceId: Swift.String?
    /// <p>A list of the training parameters in the <code>MLModel</code>. The list is implemented as
    ///             a map of key-value pairs.</p>
    ///         <p>The following is the current set of training parameters:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.maxMLModelSizeInBytes</code> - The maximum allowed size of the model. Depending on the
    ///                     input data, the size of the model might affect its performance.</p>
    ///                 <p> The value is an integer that ranges from <code>100000</code> to <code>2147483648</code>. The default value is <code>33554432</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.maxPasses</code> - The number of times that the training process traverses the
    ///                     observations to build the <code>MLModel</code>. The value is an integer that
    ///                     ranges from <code>1</code> to <code>10000</code>. The default value is
    ///                         <code>10</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.shuffleType</code> - Whether Amazon ML shuffles the training data. Shuffling data improves a
    ///                     model's ability to find the optimal solution for a variety of data types. The
    ///                     valid values are <code>auto</code> and <code>none</code>. The default value is
    ///                         <code>none</code>. We strongly recommend that you shuffle your data.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.l1RegularizationAmount</code> - The coefficient regularization L1 norm. It controls
    ///                     overfitting the data by penalizing large coefficients. This tends to drive
    ///                     coefficients to zero, resulting in a sparse feature set. If you use this
    ///                     parameter, start by specifying a small value, such as <code>1.0E-08</code>.</p>
    ///                 <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>.
    ///                     The default is to not use L1 normalization. This parameter can't be used when
    ///                         <code>L2</code> is specified. Use this parameter sparingly.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.l2RegularizationAmount</code> - The coefficient regularization L2 norm. It controls
    ///                     overfitting the data by penalizing large coefficients. This tends to drive
    ///                     coefficients to small, nonzero values. If you use this parameter, start by
    ///                     specifying a small value, such as <code>1.0E-08</code>.</p>
    ///                 <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>.
    ///                     The default is to not use L2 normalization. This parameter can't be used when
    ///                         <code>L1</code> is specified. Use this parameter sparingly.</p>
    ///             </li>
    ///          </ul>
    public let trainingParameters: [Swift.String:Swift.String]?

    public init (
        computeTime: Swift.Int? = nil,
        createdAt: ClientRuntime.Date? = nil,
        createdByIamUser: Swift.String? = nil,
        endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo? = nil,
        finishedAt: ClientRuntime.Date? = nil,
        inputDataLocationS3: Swift.String? = nil,
        lastUpdatedAt: ClientRuntime.Date? = nil,
        logUri: Swift.String? = nil,
        mLModelId: Swift.String? = nil,
        mLModelType: MachineLearningClientTypes.MLModelType? = nil,
        message: Swift.String? = nil,
        name: Swift.String? = nil,
        recipe: Swift.String? = nil,
        schema: Swift.String? = nil,
        scoreThreshold: Swift.Float? = nil,
        scoreThresholdLastUpdatedAt: ClientRuntime.Date? = nil,
        sizeInBytes: Swift.Int? = nil,
        startedAt: ClientRuntime.Date? = nil,
        status: MachineLearningClientTypes.EntityStatus? = nil,
        trainingDataSourceId: Swift.String? = nil,
        trainingParameters: [Swift.String:Swift.String]? = nil
    )
    {
        self.computeTime = computeTime
        self.createdAt = createdAt
        self.createdByIamUser = createdByIamUser
        self.endpointInfo = endpointInfo
        self.finishedAt = finishedAt
        self.inputDataLocationS3 = inputDataLocationS3
        self.lastUpdatedAt = lastUpdatedAt
        self.logUri = logUri
        self.mLModelId = mLModelId
        self.mLModelType = mLModelType
        self.message = message
        self.name = name
        self.recipe = recipe
        self.schema = schema
        self.scoreThreshold = scoreThreshold
        self.scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAt
        self.sizeInBytes = sizeInBytes
        self.startedAt = startedAt
        self.status = status
        self.trainingDataSourceId = trainingDataSourceId
        self.trainingParameters = trainingParameters
    }
}

struct GetMLModelOutputResponseBody: Swift.Equatable {
    public let mLModelId: Swift.String?
    public let trainingDataSourceId: Swift.String?
    public let createdByIamUser: Swift.String?
    public let createdAt: ClientRuntime.Date?
    public let lastUpdatedAt: ClientRuntime.Date?
    public let name: Swift.String?
    public let status: MachineLearningClientTypes.EntityStatus?
    public let sizeInBytes: Swift.Int?
    public let endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?
    public let trainingParameters: [Swift.String:Swift.String]?
    public let inputDataLocationS3: Swift.String?
    public let mLModelType: MachineLearningClientTypes.MLModelType?
    public let scoreThreshold: Swift.Float?
    public let scoreThresholdLastUpdatedAt: ClientRuntime.Date?
    public let logUri: Swift.String?
    public let message: Swift.String?
    public let computeTime: Swift.Int?
    public let finishedAt: ClientRuntime.Date?
    public let startedAt: ClientRuntime.Date?
    public let recipe: Swift.String?
    public let schema: Swift.String?
}

extension GetMLModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case endpointInfo = "EndpointInfo"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case lastUpdatedAt = "LastUpdatedAt"
        case logUri = "LogUri"
        case mLModelId = "MLModelId"
        case mLModelType = "MLModelType"
        case message = "Message"
        case name = "Name"
        case recipe = "Recipe"
        case schema = "Schema"
        case scoreThreshold = "ScoreThreshold"
        case scoreThresholdLastUpdatedAt = "ScoreThresholdLastUpdatedAt"
        case sizeInBytes = "SizeInBytes"
        case startedAt = "StartedAt"
        case status = "Status"
        case trainingDataSourceId = "TrainingDataSourceId"
        case trainingParameters = "TrainingParameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let trainingDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingDataSourceId)
        trainingDataSourceId = trainingDataSourceIdDecoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let sizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInBytes)
        sizeInBytes = sizeInBytesDecoded
        let endpointInfoDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RealtimeEndpointInfo.self, forKey: .endpointInfo)
        endpointInfo = endpointInfoDecoded
        let trainingParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .trainingParameters)
        var trainingParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let trainingParametersContainer = trainingParametersContainer {
            trainingParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in trainingParametersContainer {
                if let stringtype0 = stringtype0 {
                    trainingParametersDecoded0?[key0] = stringtype0
                }
            }
        }
        trainingParameters = trainingParametersDecoded0
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let mLModelTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.MLModelType.self, forKey: .mLModelType)
        mLModelType = mLModelTypeDecoded
        let scoreThresholdDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .scoreThreshold)
        scoreThreshold = scoreThresholdDecoded
        let scoreThresholdLastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .scoreThresholdLastUpdatedAt)
        scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAtDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let recipeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recipe)
        recipe = recipeDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
    }
}

extension IdempotentParameterMismatchException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IdempotentParameterMismatchException(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension IdempotentParameterMismatchException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: IdempotentParameterMismatchExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = 0
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A second request to use or change an object was not allowed. This can result from retrying a request using a parameter that was not present in the original request.</p>
public struct IdempotentParameterMismatchException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.Int
    public var message: Swift.String?

    public init (
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct IdempotentParameterMismatchExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let code: Swift.Int
}

extension IdempotentParameterMismatchExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decode(Swift.Int.self, forKey: .code)
        code = codeDecoded
    }
}

extension InternalServerException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServerException(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension InternalServerException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = 0
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An error on the server occurred when trying to process a request.</p>
public struct InternalServerException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var code: Swift.Int
    public var message: Swift.String?

    public init (
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let code: Swift.Int
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decode(Swift.Int.self, forKey: .code)
        code = codeDecoded
    }
}

extension InvalidInputException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidInputException(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension InvalidInputException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidInputExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = 0
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An error on the client occurred. Typically, the cause is an invalid input value.</p>
public struct InvalidInputException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.Int
    public var message: Swift.String?

    public init (
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct InvalidInputExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let code: Swift.Int
}

extension InvalidInputExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decode(Swift.Int.self, forKey: .code)
        code = codeDecoded
    }
}

extension InvalidTagException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidTagException(message: \(Swift.String(describing: message)))"}
}

extension InvalidTagException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidTagExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

public struct InvalidTagException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTagExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidTagExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = 0
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The subscriber exceeded the maximum number of operations. This exception can occur when listing objects such as <code>DataSource</code>.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.Int
    public var message: Swift.String?

    public init (
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let code: Swift.Int
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decode(Swift.Int.self, forKey: .code)
        code = codeDecoded
    }
}

extension MachineLearningClientTypes.MLModel: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithm = "Algorithm"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case endpointInfo = "EndpointInfo"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case lastUpdatedAt = "LastUpdatedAt"
        case mLModelId = "MLModelId"
        case mLModelType = "MLModelType"
        case message = "Message"
        case name = "Name"
        case scoreThreshold = "ScoreThreshold"
        case scoreThresholdLastUpdatedAt = "ScoreThresholdLastUpdatedAt"
        case sizeInBytes = "SizeInBytes"
        case startedAt = "StartedAt"
        case status = "Status"
        case trainingDataSourceId = "TrainingDataSourceId"
        case trainingParameters = "TrainingParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithm = algorithm {
            try encodeContainer.encode(algorithm.rawValue, forKey: .algorithm)
        }
        if let computeTime = computeTime {
            try encodeContainer.encode(computeTime, forKey: .computeTime)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let createdByIamUser = createdByIamUser {
            try encodeContainer.encode(createdByIamUser, forKey: .createdByIamUser)
        }
        if let endpointInfo = endpointInfo {
            try encodeContainer.encode(endpointInfo, forKey: .endpointInfo)
        }
        if let finishedAt = finishedAt {
            try encodeContainer.encode(finishedAt.timeIntervalSince1970, forKey: .finishedAt)
        }
        if let inputDataLocationS3 = inputDataLocationS3 {
            try encodeContainer.encode(inputDataLocationS3, forKey: .inputDataLocationS3)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
        if let mLModelType = mLModelType {
            try encodeContainer.encode(mLModelType.rawValue, forKey: .mLModelType)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scoreThreshold = scoreThreshold {
            try encodeContainer.encode(scoreThreshold, forKey: .scoreThreshold)
        }
        if let scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAt {
            try encodeContainer.encode(scoreThresholdLastUpdatedAt.timeIntervalSince1970, forKey: .scoreThresholdLastUpdatedAt)
        }
        if let sizeInBytes = sizeInBytes {
            try encodeContainer.encode(sizeInBytes, forKey: .sizeInBytes)
        }
        if let startedAt = startedAt {
            try encodeContainer.encode(startedAt.timeIntervalSince1970, forKey: .startedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let trainingDataSourceId = trainingDataSourceId {
            try encodeContainer.encode(trainingDataSourceId, forKey: .trainingDataSourceId)
        }
        if let trainingParameters = trainingParameters {
            var trainingParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .trainingParameters)
            for (dictKey0, trainingparameters0) in trainingParameters {
                try trainingParametersContainer.encode(trainingparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let trainingDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingDataSourceId)
        trainingDataSourceId = trainingDataSourceIdDecoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let sizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInBytes)
        sizeInBytes = sizeInBytesDecoded
        let endpointInfoDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RealtimeEndpointInfo.self, forKey: .endpointInfo)
        endpointInfo = endpointInfoDecoded
        let trainingParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .trainingParameters)
        var trainingParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let trainingParametersContainer = trainingParametersContainer {
            trainingParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in trainingParametersContainer {
                if let stringtype0 = stringtype0 {
                    trainingParametersDecoded0?[key0] = stringtype0
                }
            }
        }
        trainingParameters = trainingParametersDecoded0
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let algorithmDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.Algorithm.self, forKey: .algorithm)
        algorithm = algorithmDecoded
        let mLModelTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.MLModelType.self, forKey: .mLModelType)
        mLModelType = mLModelTypeDecoded
        let scoreThresholdDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .scoreThreshold)
        scoreThreshold = scoreThresholdDecoded
        let scoreThresholdLastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .scoreThresholdLastUpdatedAt)
        scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAtDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
    }
}

extension MachineLearningClientTypes.MLModel: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MLModel(algorithm: \(Swift.String(describing: algorithm)), computeTime: \(Swift.String(describing: computeTime)), createdAt: \(Swift.String(describing: createdAt)), createdByIamUser: \(Swift.String(describing: createdByIamUser)), endpointInfo: \(Swift.String(describing: endpointInfo)), finishedAt: \(Swift.String(describing: finishedAt)), inputDataLocationS3: \(Swift.String(describing: inputDataLocationS3)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), mLModelId: \(Swift.String(describing: mLModelId)), mLModelType: \(Swift.String(describing: mLModelType)), message: \(Swift.String(describing: message)), name: \(Swift.String(describing: name)), scoreThreshold: \(Swift.String(describing: scoreThreshold)), scoreThresholdLastUpdatedAt: \(Swift.String(describing: scoreThresholdLastUpdatedAt)), sizeInBytes: \(Swift.String(describing: sizeInBytes)), startedAt: \(Swift.String(describing: startedAt)), status: \(Swift.String(describing: status)), trainingDataSourceId: \(Swift.String(describing: trainingDataSourceId)), trainingParameters: \(Swift.String(describing: trainingParameters)))"}
}

extension MachineLearningClientTypes {
    /// <p> Represents the output of a <code>GetMLModel</code> operation. </p>
    ///          <p>The content consists of the detailed metadata and the current status of the <code>MLModel</code>.</p>
    public struct MLModel: Swift.Equatable {
        /// <p>The algorithm used to train the <code>MLModel</code>. The following algorithm is supported:</p>
        ///         <ul>
        ///             <li>
        ///                <p>
        ///                   <code>SGD</code> -- Stochastic gradient descent. The goal of <code>SGD</code> is to minimize the gradient of the loss function. </p>
        ///             </li>
        ///          </ul>
        public let algorithm: MachineLearningClientTypes.Algorithm?
        /// <p>Long integer type that is a 64-bit signed number.</p>
        public let computeTime: Swift.Int?
        /// <p>The time that the <code>MLModel</code> was created. The time is expressed in epoch time.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The AWS user account from which the <code>MLModel</code> was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.</p>
        public let createdByIamUser: Swift.String?
        /// <p>The current endpoint of the <code>MLModel</code>.</p>
        public let endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?
        /// <p>A timestamp represented in epoch time.</p>
        public let finishedAt: ClientRuntime.Date?
        /// <p>The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).</p>
        public let inputDataLocationS3: Swift.String?
        /// <p>The time of the most recent edit to the <code>MLModel</code>. The time is expressed in epoch time.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The ID assigned to the <code>MLModel</code> at creation.</p>
        public let mLModelId: Swift.String?
        /// <p>Identifies the <code>MLModel</code> category. The following are the available types:</p>
        ///         <ul>
        ///             <li>
        ///                <p>
        ///                   <code>REGRESSION</code> - Produces a numeric result. For example, "What price should a
        ///                 house be listed at?"</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>BINARY</code> - Produces one of two possible results. For example, "Is this a
        ///                 child-friendly web site?".</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>MULTICLASS</code> - Produces one of several possible results. For example, "Is
        ///                 this a HIGH-, LOW-, or MEDIUM-risk trade?".</p>
        ///             </li>
        ///          </ul>
        public let mLModelType: MachineLearningClientTypes.MLModelType?
        /// <p>A description of the most recent details about accessing the <code>MLModel</code>.</p>
        public let message: Swift.String?
        /// <p>A user-supplied name or description of the <code>MLModel</code>.</p>
        public let name: Swift.String?
        public let scoreThreshold: Swift.Float?
        /// <p>The time of the most recent edit to the <code>ScoreThreshold</code>. The time is expressed in epoch time.</p>
        public let scoreThresholdLastUpdatedAt: ClientRuntime.Date?
        /// <p>Long integer type that is a 64-bit signed number.</p>
        public let sizeInBytes: Swift.Int?
        /// <p>A timestamp represented in epoch time.</p>
        public let startedAt: ClientRuntime.Date?
        /// <p>The current status of an <code>MLModel</code>. This element can have one of the following values: </p>
        ///         <ul>
        ///             <li>
        ///                <p>
        ///                   <code>PENDING</code>	- Amazon Machine Learning (Amazon ML) submitted a request to create an <code>MLModel</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>INPROGRESS</code>	- The creation process is underway.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>FAILED</code> - The request to create an <code>MLModel</code> didn't run to
        ///                 completion. The model isn't usable.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>COMPLETED</code>	- The creation process completed successfully.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>DELETED</code> - The <code>MLModel</code> is marked as deleted. It isn't
        ///                 usable.</p>
        ///             </li>
        ///          </ul>
        public let status: MachineLearningClientTypes.EntityStatus?
        /// <p>The ID of the training <code>DataSource</code>. The <code>CreateMLModel</code> operation uses the <code>TrainingDataSourceId</code>.</p>
        public let trainingDataSourceId: Swift.String?
        /// <p>A list of the training parameters in the <code>MLModel</code>. The list is implemented as
        ///             a map of key-value pairs.</p>
        ///         <p>The following is the current set of training parameters:</p>
        ///         <ul>
        ///             <li>
        ///                <p>
        ///                   <code>sgd.maxMLModelSizeInBytes</code> - The maximum allowed size of the model. Depending on the
        ///                     input data, the size of the model might affect its performance.</p>
        ///                 <p> The value is an integer that ranges from <code>100000</code> to <code>2147483648</code>. The default value is <code>33554432</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>sgd.maxPasses</code> - The number of times that the training process traverses the
        ///                     observations to build the <code>MLModel</code>. The value is an integer that
        ///                     ranges from <code>1</code> to <code>10000</code>. The default value is
        ///                         <code>10</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>sgd.shuffleType</code> - Whether Amazon ML shuffles the training data. Shuffling the data
        ///                     improves a model's ability to find the optimal solution for a variety of data
        ///                     types. The valid values are <code>auto</code> and <code>none</code>. The default
        ///                     value is <code>none</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>sgd.l1RegularizationAmount</code> - The coefficient regularization L1 norm, which controls
        ///                     overfitting the data by penalizing large coefficients. This parameter tends to
        ///                     drive coefficients to zero, resulting in sparse feature set. If you use this
        ///                     parameter, start by specifying a small value, such as <code>1.0E-08</code>.</p>
        ///                 <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>.
        ///                     The default is to not use L1 normalization. This parameter can't be used when
        ///                         <code>L2</code> is specified. Use this parameter sparingly.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>sgd.l2RegularizationAmount</code> - The coefficient regularization L2 norm, which controls
        ///                     overfitting the data by penalizing large coefficients. This tends to drive
        ///                     coefficients to small, nonzero values. If you use this parameter, start by
        ///                     specifying a small value, such as <code>1.0E-08</code>.</p>
        ///                 <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>.
        ///                     The default is to not use L2 normalization. This parameter can't be used when
        ///                         <code>L1</code> is specified. Use this parameter sparingly.</p>
        ///             </li>
        ///          </ul>
        public let trainingParameters: [Swift.String:Swift.String]?

        public init (
            algorithm: MachineLearningClientTypes.Algorithm? = nil,
            computeTime: Swift.Int? = nil,
            createdAt: ClientRuntime.Date? = nil,
            createdByIamUser: Swift.String? = nil,
            endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo? = nil,
            finishedAt: ClientRuntime.Date? = nil,
            inputDataLocationS3: Swift.String? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            mLModelId: Swift.String? = nil,
            mLModelType: MachineLearningClientTypes.MLModelType? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil,
            scoreThreshold: Swift.Float? = nil,
            scoreThresholdLastUpdatedAt: ClientRuntime.Date? = nil,
            sizeInBytes: Swift.Int? = nil,
            startedAt: ClientRuntime.Date? = nil,
            status: MachineLearningClientTypes.EntityStatus? = nil,
            trainingDataSourceId: Swift.String? = nil,
            trainingParameters: [Swift.String:Swift.String]? = nil
        )
        {
            self.algorithm = algorithm
            self.computeTime = computeTime
            self.createdAt = createdAt
            self.createdByIamUser = createdByIamUser
            self.endpointInfo = endpointInfo
            self.finishedAt = finishedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.lastUpdatedAt = lastUpdatedAt
            self.mLModelId = mLModelId
            self.mLModelType = mLModelType
            self.message = message
            self.name = name
            self.scoreThreshold = scoreThreshold
            self.scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAt
            self.sizeInBytes = sizeInBytes
            self.startedAt = startedAt
            self.status = status
            self.trainingDataSourceId = trainingDataSourceId
            self.trainingParameters = trainingParameters
        }
    }

}

extension MachineLearningClientTypes {
    public enum MLModelFilterVariable: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case algorithm
        case createdAt
        case iamUser
        case lastUpdatedAt
        case mlModelType
        case name
        case realTimeEndpointStatus
        case status
        case trainingDatasourceId
        case trainingDataUri
        case sdkUnknown(Swift.String)

        public static var allCases: [MLModelFilterVariable] {
            return [
                .algorithm,
                .createdAt,
                .iamUser,
                .lastUpdatedAt,
                .mlModelType,
                .name,
                .realTimeEndpointStatus,
                .status,
                .trainingDatasourceId,
                .trainingDataUri,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .algorithm: return "Algorithm"
            case .createdAt: return "CreatedAt"
            case .iamUser: return "IAMUser"
            case .lastUpdatedAt: return "LastUpdatedAt"
            case .mlModelType: return "MLModelType"
            case .name: return "Name"
            case .realTimeEndpointStatus: return "RealtimeEndpointStatus"
            case .status: return "Status"
            case .trainingDatasourceId: return "TrainingDataSourceId"
            case .trainingDataUri: return "TrainingDataURI"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MLModelFilterVariable(rawValue: rawValue) ?? MLModelFilterVariable.sdkUnknown(rawValue)
        }
    }
}

extension MachineLearningClientTypes {
    public enum MLModelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case binary
        case multiclass
        case regression
        case sdkUnknown(Swift.String)

        public static var allCases: [MLModelType] {
            return [
                .binary,
                .multiclass,
                .regression,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .binary: return "BINARY"
            case .multiclass: return "MULTICLASS"
            case .regression: return "REGRESSION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MLModelType(rawValue: rawValue) ?? MLModelType.sdkUnknown(rawValue)
        }
    }
}

extension MachineLearningClientTypes.PerformanceMetrics: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case properties = "Properties"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, performancemetricsproperties0) in properties {
                try propertiesContainer.encode(performancemetricsproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, performancemetricspropertyvalue0) in propertiesContainer {
                if let performancemetricspropertyvalue0 = performancemetricspropertyvalue0 {
                    propertiesDecoded0?[key0] = performancemetricspropertyvalue0
                }
            }
        }
        properties = propertiesDecoded0
    }
}

extension MachineLearningClientTypes.PerformanceMetrics: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PerformanceMetrics(properties: \(Swift.String(describing: properties)))"}
}

extension MachineLearningClientTypes {
    /// <p>Measurements of how well the <code>MLModel</code> performed on known observations. One of the following metrics is returned, based on the type of the <code>MLModel</code>:
    ///         </p>
    ///         <ul>
    ///             <li>
    ///                <p>BinaryAUC: The binary <code>MLModel</code> uses the Area Under the Curve (AUC) technique to measure performance. </p>
    ///             </li>
    ///             <li>
    ///                <p>RegressionRMSE: The regression <code>MLModel</code> uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.</p>
    ///             </li>
    ///             <li>
    ///                <p>MulticlassAvgFScore: The multiclass <code>MLModel</code> uses the F1 score technique to measure performance. </p>
    ///             </li>
    ///          </ul>
    ///         <p>
    ///             For more information about performance metrics, please see the <a href="https://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>.
    ///         </p>
    public struct PerformanceMetrics: Swift.Equatable {
        public let properties: [Swift.String:Swift.String]?

        public init (
            properties: [Swift.String:Swift.String]? = nil
        )
        {
            self.properties = properties
        }
    }

}

public struct PredictInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PredictInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PredictInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PredictOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PredictInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PredictOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PredictOutputError>
}

extension PredictInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PredictInput(mLModelId: \(Swift.String(describing: mLModelId)), predictEndpoint: \(Swift.String(describing: predictEndpoint)), record: \(Swift.String(describing: record)))"}
}

extension PredictInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
        case predictEndpoint = "PredictEndpoint"
        case record = "Record"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
        if let predictEndpoint = predictEndpoint {
            try encodeContainer.encode(predictEndpoint, forKey: .predictEndpoint)
        }
        if let record = record {
            var recordContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .record)
            for (dictKey0, record0) in record {
                try recordContainer.encode(record0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct PredictInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PredictInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PredictInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PredictOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PredictInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PredictOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PredictOutputError>
}

public struct PredictInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PredictInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PredictInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PredictOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PredictInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PredictOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PredictOutputError>
}

public struct PredictInput: Swift.Equatable {
    /// <p>A unique identifier of the <code>MLModel</code>.</p>
    public let mLModelId: Swift.String?
    public let predictEndpoint: Swift.String?
    /// <p>A map of variable name-value pairs that represent an observation.</p>
    public let record: [Swift.String:Swift.String]?

    public init (
        mLModelId: Swift.String? = nil,
        predictEndpoint: Swift.String? = nil,
        record: [Swift.String:Swift.String]? = nil
    )
    {
        self.mLModelId = mLModelId
        self.predictEndpoint = predictEndpoint
        self.record = record
    }
}

struct PredictInputBody: Swift.Equatable {
    public let mLModelId: Swift.String?
    public let record: [Swift.String:Swift.String]?
    public let predictEndpoint: Swift.String?
}

extension PredictInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
        case predictEndpoint = "PredictEndpoint"
        case record = "Record"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let recordContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .record)
        var recordDecoded0: [Swift.String:Swift.String]? = nil
        if let recordContainer = recordContainer {
            recordDecoded0 = [Swift.String:Swift.String]()
            for (key0, variablevalue0) in recordContainer {
                if let variablevalue0 = variablevalue0 {
                    recordDecoded0?[key0] = variablevalue0
                }
            }
        }
        record = recordDecoded0
        let predictEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .predictEndpoint)
        predictEndpoint = predictEndpointDecoded
    }
}

extension PredictOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PredictOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PredictorNotMountedException" : self = .predictorNotMountedException(try PredictorNotMountedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PredictOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case predictorNotMountedException(PredictorNotMountedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PredictOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PredictOutputResponse(prediction: \(Swift.String(describing: prediction)))"}
}

extension PredictOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PredictOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.prediction = output.prediction
        } else {
            self.prediction = nil
        }
    }
}

public struct PredictOutputResponse: Swift.Equatable {
    /// <p>The output from a <code>Predict</code> operation: </p>
    /// 		
    /// 		       <ul>
    ///             <li>
    /// 				           <p>
    /// 				              <code>Details</code> - Contains the following attributes:
    /// 				  <code>DetailsAttributes.PREDICTIVE_MODEL_TYPE - REGRESSION | BINARY | MULTICLASS</code>
    /// 				              <code>DetailsAttributes.ALGORITHM - SGD</code>
    /// 				           </p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    /// 				              <code>PredictedLabel</code> - Present for either a <code>BINARY</code> or <code>MULTICLASS</code>
    ///                   <code>MLModel</code> request.
    /// 				</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    /// 				              <code>PredictedScores</code> - Contains the raw classification score corresponding to each label.
    /// 				</p>				
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    /// 				              <code>PredictedValue</code> - Present for a <code>REGRESSION</code>
    ///                   <code>MLModel</code> request.
    /// 				</p>				
    /// 			         </li>
    ///          </ul>
    public let prediction: MachineLearningClientTypes.Prediction?

    public init (
        prediction: MachineLearningClientTypes.Prediction? = nil
    )
    {
        self.prediction = prediction
    }
}

struct PredictOutputResponseBody: Swift.Equatable {
    public let prediction: MachineLearningClientTypes.Prediction?
}

extension PredictOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case prediction = "Prediction"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predictionDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.Prediction.self, forKey: .prediction)
        prediction = predictionDecoded
    }
}

extension MachineLearningClientTypes.Prediction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case predictedLabel
        case predictedScores
        case predictedValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            var detailsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .details)
            for (dictKey0, detailsmap0) in details {
                try detailsContainer.encode(detailsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let predictedLabel = predictedLabel {
            try encodeContainer.encode(predictedLabel, forKey: .predictedLabel)
        }
        if let predictedScores = predictedScores {
            var predictedScoresContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .predictedScores)
            for (dictKey0, scorevalueperlabelmap0) in predictedScores {
                try predictedScoresContainer.encode(scorevalueperlabelmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let predictedValue = predictedValue {
            try encodeContainer.encode(predictedValue, forKey: .predictedValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predictedLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .predictedLabel)
        predictedLabel = predictedLabelDecoded
        let predictedValueDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .predictedValue)
        predictedValue = predictedValueDecoded
        let predictedScoresContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Float?].self, forKey: .predictedScores)
        var predictedScoresDecoded0: [Swift.String:Swift.Float]? = nil
        if let predictedScoresContainer = predictedScoresContainer {
            predictedScoresDecoded0 = [Swift.String:Swift.Float]()
            for (key0, scorevalue0) in predictedScoresContainer {
                if let scorevalue0 = scorevalue0 {
                    predictedScoresDecoded0?[key0] = scorevalue0
                }
            }
        }
        predictedScores = predictedScoresDecoded0
        let detailsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .details)
        var detailsDecoded0: [Swift.String:Swift.String]? = nil
        if let detailsContainer = detailsContainer {
            detailsDecoded0 = [Swift.String:Swift.String]()
            for (key0, detailsvalue0) in detailsContainer {
                if let detailsvalue0 = detailsvalue0 {
                    detailsDecoded0?[key0] = detailsvalue0
                }
            }
        }
        details = detailsDecoded0
    }
}

extension MachineLearningClientTypes.Prediction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Prediction(details: \(Swift.String(describing: details)), predictedLabel: \(Swift.String(describing: predictedLabel)), predictedScores: \(Swift.String(describing: predictedScores)), predictedValue: \(Swift.String(describing: predictedValue)))"}
}

extension MachineLearningClientTypes {
    /// <p>The output from a <code>Predict</code> operation: </p>
    /// 		
    /// 		       <ul>
    ///             <li>
    /// 				           <p>
    /// 				              <code>Details</code> - Contains the following attributes:
    /// 				  <code>DetailsAttributes.PREDICTIVE_MODEL_TYPE - REGRESSION | BINARY | MULTICLASS</code>
    /// 				              <code>DetailsAttributes.ALGORITHM - SGD</code>
    /// 				           </p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    /// 				              <code>PredictedLabel</code> - Present for either a <code>BINARY</code> or <code>MULTICLASS</code>
    ///                   <code>MLModel</code> request.
    /// 				</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    /// 				              <code>PredictedScores</code> - Contains the raw classification score corresponding to each label.
    /// 				</p>				
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    /// 				              <code>PredictedValue</code> - Present for a <code>REGRESSION</code>
    ///                   <code>MLModel</code> request.
    /// 				</p>				
    /// 			         </li>
    ///          </ul>
    public struct Prediction: Swift.Equatable {
        /// <p>Provides any additional details regarding the prediction.</p>
        public let details: [Swift.String:Swift.String]?
        /// <p>The prediction label for either a <code>BINARY</code> or <code>MULTICLASS</code>
        ///             <code>MLModel</code>.</p>
        public let predictedLabel: Swift.String?
        /// <p>Provides the raw classification score corresponding to each label.</p>
        public let predictedScores: [Swift.String:Swift.Float]?
        /// <p>The prediction value for <code>REGRESSION</code>
        ///             <code>MLModel</code>.</p>
        public let predictedValue: Swift.Float?

        public init (
            details: [Swift.String:Swift.String]? = nil,
            predictedLabel: Swift.String? = nil,
            predictedScores: [Swift.String:Swift.Float]? = nil,
            predictedValue: Swift.Float? = nil
        )
        {
            self.details = details
            self.predictedLabel = predictedLabel
            self.predictedScores = predictedScores
            self.predictedValue = predictedValue
        }
    }

}

extension PredictorNotMountedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PredictorNotMountedException(message: \(Swift.String(describing: message)))"}
}

extension PredictorNotMountedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PredictorNotMountedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The exception is thrown when a predict request is made to an unmounted <code>MLModel</code>.</p>
public struct PredictorNotMountedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PredictorNotMountedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension PredictorNotMountedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MachineLearningClientTypes.RDSDataSpec: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataRearrangement = "DataRearrangement"
        case dataSchema = "DataSchema"
        case dataSchemaUri = "DataSchemaUri"
        case databaseCredentials = "DatabaseCredentials"
        case databaseInformation = "DatabaseInformation"
        case resourceRole = "ResourceRole"
        case s3StagingLocation = "S3StagingLocation"
        case securityGroupIds = "SecurityGroupIds"
        case selectSqlQuery = "SelectSqlQuery"
        case serviceRole = "ServiceRole"
        case subnetId = "SubnetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataRearrangement = dataRearrangement {
            try encodeContainer.encode(dataRearrangement, forKey: .dataRearrangement)
        }
        if let dataSchema = dataSchema {
            try encodeContainer.encode(dataSchema, forKey: .dataSchema)
        }
        if let dataSchemaUri = dataSchemaUri {
            try encodeContainer.encode(dataSchemaUri, forKey: .dataSchemaUri)
        }
        if let databaseCredentials = databaseCredentials {
            try encodeContainer.encode(databaseCredentials, forKey: .databaseCredentials)
        }
        if let databaseInformation = databaseInformation {
            try encodeContainer.encode(databaseInformation, forKey: .databaseInformation)
        }
        if let resourceRole = resourceRole {
            try encodeContainer.encode(resourceRole, forKey: .resourceRole)
        }
        if let s3StagingLocation = s3StagingLocation {
            try encodeContainer.encode(s3StagingLocation, forKey: .s3StagingLocation)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for edpsecuritygroupids0 in securityGroupIds {
                try securityGroupIdsContainer.encode(edpsecuritygroupids0)
            }
        }
        if let selectSqlQuery = selectSqlQuery {
            try encodeContainer.encode(selectSqlQuery, forKey: .selectSqlQuery)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseInformationDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RDSDatabase.self, forKey: .databaseInformation)
        databaseInformation = databaseInformationDecoded
        let selectSqlQueryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .selectSqlQuery)
        selectSqlQuery = selectSqlQueryDecoded
        let databaseCredentialsDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RDSDatabaseCredentials.self, forKey: .databaseCredentials)
        databaseCredentials = databaseCredentialsDecoded
        let s3StagingLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3StagingLocation)
        s3StagingLocation = s3StagingLocationDecoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let dataSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSchema)
        dataSchema = dataSchemaDecoded
        let dataSchemaUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSchemaUri)
        dataSchemaUri = dataSchemaUriDecoded
        let resourceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceRole)
        resourceRole = resourceRoleDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}

extension MachineLearningClientTypes.RDSDataSpec: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RDSDataSpec(dataRearrangement: \(Swift.String(describing: dataRearrangement)), dataSchema: \(Swift.String(describing: dataSchema)), dataSchemaUri: \(Swift.String(describing: dataSchemaUri)), databaseCredentials: \(Swift.String(describing: databaseCredentials)), databaseInformation: \(Swift.String(describing: databaseInformation)), resourceRole: \(Swift.String(describing: resourceRole)), s3StagingLocation: \(Swift.String(describing: s3StagingLocation)), securityGroupIds: \(Swift.String(describing: securityGroupIds)), selectSqlQuery: \(Swift.String(describing: selectSqlQuery)), serviceRole: \(Swift.String(describing: serviceRole)), subnetId: \(Swift.String(describing: subnetId)))"}
}

extension MachineLearningClientTypes {
    /// <p>The data specification of an Amazon Relational Database Service (Amazon RDS) <code>DataSource</code>.</p>
    public struct RDSDataSpec: Swift.Equatable {
        /// <p>A JSON string that represents the splitting and rearrangement
        ///     processing to be applied to a <code>DataSource</code>. If the <code>DataRearrangement</code>
        ///     parameter is not provided, all of the input data is used to create the <code>Datasource</code>.</p>
        ///
        ///          <p>There are multiple parameters that control what data is used to create a datasource:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>percentBegin</code>
        ///                   </b>
        ///                </p>
        ///                <p>Use <code>percentBegin</code> to indicate the beginning of the range of the data used to
        ///         create the Datasource.
        ///         If you do not include <code>percentBegin</code> and <code>percentEnd</code>, Amazon ML includes
        ///         all of the data when creating the datasource.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>percentEnd</code>
        ///                   </b>
        ///                </p>
        ///                <p>Use <code>percentEnd</code> to indicate the end of the range of the data used to create the
        ///         Datasource. If you do not
        ///         include <code>percentBegin</code> and <code>percentEnd</code>, Amazon ML
        ///         includes all of the data when creating the datasource.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>complement</code>
        ///                   </b>
        ///                </p>
        ///                <p>The <code>complement</code> parameter instructs Amazon ML to use the data that is
        ///     not included in the range of <code>percentBegin</code> to <code>percentEnd</code> to create a
        ///     datasource. The <code>complement</code> parameter is useful if you need to create
        ///     complementary datasources for training and evaluation.
        ///     To create a complementary datasource, use the same
        ///     values for <code>percentBegin</code> and <code>percentEnd</code>, along with the
        ///     <code>complement</code> parameter.</p>
        ///
        ///                <p>For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data.</p>
        ///                <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":0, "percentEnd":25}}</code>
        ///                </p>
        ///                <p>Datasource for training: <code>{"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>strategy</code>
        ///                   </b>
        ///                </p>
        ///                <p>To change how Amazon ML splits the data for a datasource, use the <code>strategy</code> parameter.</p>
        ///                <p>The default value for the <code>strategy</code> parameter
        ///     is <code>sequential</code>, meaning that Amazon ML takes all of the data records between the <code>percentBegin</code>
        ///     and <code>percentEnd</code> parameters for the datasource, in the order that the records appear in the input data.</p>
        ///
        ///                <p>The following two <code>DataRearrangement</code> lines are examples of sequentially ordered
        ///     training and evaluation datasources:</p>
        ///                <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}}</code>
        ///                </p>
        ///                <p>Datasource for training: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}}</code>
        ///                </p>
        ///
        ///                <p>To randomly split the input data into the proportions indicated by the percentBegin and percentEnd
        ///         parameters, set the <code>strategy</code> parameter to
        ///     <code>random</code> and provide a string that is used as the seed value for the random data splitting (for
        ///     example, you can use the S3 path to your data as the random seed string).
        ///     If you choose the random split strategy,
        ///     Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned
        ///     number between <code>percentBegin</code> and <code>percentEnd</code>. Pseudo-random numbers are assigned
        ///     using both the input seed string value and the byte offset as a seed, so changing the data results in a
        ///     different split. Any existing ordering is preserved.
        ///     The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly.
        ///     It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in
        ///     training and evaluation datasources containing non-similar data records.</p>
        ///                <p>The following two <code>DataRearrangement</code> lines are examples of non-sequentially ordered
        ///     training and evaluation datasources:</p>
        ///                <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}}</code>
        ///                </p>
        ///                <p>Datasource for training: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let dataRearrangement: Swift.String?
        /// <p>A JSON string that represents the schema for an Amazon RDS
        ///             <code>DataSource</code>. The <code>DataSchema</code>
        ///             defines the structure of the observation data in the data file(s)
        ///             referenced in the <code>DataSource</code>.</p>
        ///         <p>A <code>DataSchema</code> is not required if you specify a
        ///             <code>DataSchemaUri</code>
        ///          </p>
        ///         <p>Define your <code>DataSchema</code> as a series of key-value pairs. <code>attributes</code>
        ///             and <code>excludedVariableNames</code> have an array of key-value pairs
        ///             for their value. Use the following format to define your <code>DataSchema</code>.</p>
        ///         <p>{ "version": "1.0",</p>
        ///          <p>"recordAnnotationFieldName": "F1",</p>
        ///          <p>"recordWeightFieldName": "F2",</p>
        ///          <p>"targetFieldName": "F3",</p>
        ///          <p>"dataFormat": "CSV",</p>
        ///          <p>"dataFileContainsHeader": true,</p>
        ///          <p>"attributes": [</p>
        ///          <p>{ "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ],</p>
        ///          <p>"excludedVariableNames": [ "F6" ] }</p>
        public let dataSchema: Swift.String?
        /// <p>The Amazon S3 location of the <code>DataSchema</code>. </p>
        public let dataSchemaUri: Swift.String?
        /// <p>The AWS Identity and Access Management (IAM) credentials that are used connect to the Amazon RDS database.</p>
        public let databaseCredentials: MachineLearningClientTypes.RDSDatabaseCredentials?
        /// <p>Describes the <code>DatabaseName</code> and <code>InstanceIdentifier</code> of an Amazon RDS database.</p>
        public let databaseInformation: MachineLearningClientTypes.RDSDatabase?
        /// <p>The role (DataPipelineDefaultResourceRole) assumed by an Amazon Elastic Compute Cloud (Amazon EC2) instance to carry out the copy operation from Amazon RDS to an Amazon S3 task. For more information, see <a href="https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p>
        public let resourceRole: Swift.String?
        /// <p>The Amazon S3 location for staging Amazon RDS data. The data retrieved from Amazon RDS using <code>SelectSqlQuery</code> is stored in this location.</p>
        public let s3StagingLocation: Swift.String?
        /// <p>The security group IDs to be used to access a VPC-based RDS DB instance. Ensure that there are appropriate ingress rules set up to allow access to the RDS DB instance. This attribute is used by Data Pipeline to carry out the copy operation from Amazon RDS to an Amazon S3 task.</p>
        public let securityGroupIds: [Swift.String]?
        /// <p>The query that is used to retrieve the observation data for the <code>DataSource</code>.</p>
        public let selectSqlQuery: Swift.String?
        /// <p>The role (DataPipelineDefaultRole) assumed by AWS Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p>
        public let serviceRole: Swift.String?
        /// <p>The subnet ID to be used to access a VPC-based RDS DB instance. This attribute is used by Data Pipeline to carry out the copy task from Amazon RDS to Amazon S3.</p>
        public let subnetId: Swift.String?

        public init (
            dataRearrangement: Swift.String? = nil,
            dataSchema: Swift.String? = nil,
            dataSchemaUri: Swift.String? = nil,
            databaseCredentials: MachineLearningClientTypes.RDSDatabaseCredentials? = nil,
            databaseInformation: MachineLearningClientTypes.RDSDatabase? = nil,
            resourceRole: Swift.String? = nil,
            s3StagingLocation: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            selectSqlQuery: Swift.String? = nil,
            serviceRole: Swift.String? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.dataRearrangement = dataRearrangement
            self.dataSchema = dataSchema
            self.dataSchemaUri = dataSchemaUri
            self.databaseCredentials = databaseCredentials
            self.databaseInformation = databaseInformation
            self.resourceRole = resourceRole
            self.s3StagingLocation = s3StagingLocation
            self.securityGroupIds = securityGroupIds
            self.selectSqlQuery = selectSqlQuery
            self.serviceRole = serviceRole
            self.subnetId = subnetId
        }
    }

}

extension MachineLearningClientTypes.RDSDatabase: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseName = "DatabaseName"
        case instanceIdentifier = "InstanceIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let instanceIdentifier = instanceIdentifier {
            try encodeContainer.encode(instanceIdentifier, forKey: .instanceIdentifier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceIdentifier)
        instanceIdentifier = instanceIdentifierDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
    }
}

extension MachineLearningClientTypes.RDSDatabase: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RDSDatabase(databaseName: \(Swift.String(describing: databaseName)), instanceIdentifier: \(Swift.String(describing: instanceIdentifier)))"}
}

extension MachineLearningClientTypes {
    /// <p>The database details of an Amazon RDS database.</p>
    public struct RDSDatabase: Swift.Equatable {
        /// <p>The name of a database hosted on an RDS DB instance.</p>
        public let databaseName: Swift.String?
        /// <p>The ID of an RDS DB instance.</p>
        public let instanceIdentifier: Swift.String?

        public init (
            databaseName: Swift.String? = nil,
            instanceIdentifier: Swift.String? = nil
        )
        {
            self.databaseName = databaseName
            self.instanceIdentifier = instanceIdentifier
        }
    }

}

extension MachineLearningClientTypes.RDSDatabaseCredentials: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case password = "Password"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
    }
}

extension MachineLearningClientTypes.RDSDatabaseCredentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RDSDatabaseCredentials(password: \(Swift.String(describing: password)), username: \(Swift.String(describing: username)))"}
}

extension MachineLearningClientTypes {
    /// <p>The database credentials to connect to a database on an RDS DB instance.</p>
    public struct RDSDatabaseCredentials: Swift.Equatable {
        /// <p>The password to be used by Amazon ML to connect to a database on an RDS DB instance.
        ///             The password should have sufficient permissions to execute the <code>RDSSelectQuery</code> query.</p>
        public let password: Swift.String?
        /// <p>The username to be used by Amazon ML to connect to database on an Amazon RDS instance.
        ///             The username should have sufficient permissions to execute an <code>RDSSelectSqlQuery</code> query.</p>
        public let username: Swift.String?

        public init (
            password: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.password = password
            self.username = username
        }
    }

}

extension MachineLearningClientTypes.RDSMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataPipelineId = "DataPipelineId"
        case database = "Database"
        case databaseUserName = "DatabaseUserName"
        case resourceRole = "ResourceRole"
        case selectSqlQuery = "SelectSqlQuery"
        case serviceRole = "ServiceRole"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataPipelineId = dataPipelineId {
            try encodeContainer.encode(dataPipelineId, forKey: .dataPipelineId)
        }
        if let database = database {
            try encodeContainer.encode(database, forKey: .database)
        }
        if let databaseUserName = databaseUserName {
            try encodeContainer.encode(databaseUserName, forKey: .databaseUserName)
        }
        if let resourceRole = resourceRole {
            try encodeContainer.encode(resourceRole, forKey: .resourceRole)
        }
        if let selectSqlQuery = selectSqlQuery {
            try encodeContainer.encode(selectSqlQuery, forKey: .selectSqlQuery)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RDSDatabase.self, forKey: .database)
        database = databaseDecoded
        let databaseUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseUserName)
        databaseUserName = databaseUserNameDecoded
        let selectSqlQueryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .selectSqlQuery)
        selectSqlQuery = selectSqlQueryDecoded
        let resourceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceRole)
        resourceRole = resourceRoleDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let dataPipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataPipelineId)
        dataPipelineId = dataPipelineIdDecoded
    }
}

extension MachineLearningClientTypes.RDSMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RDSMetadata(dataPipelineId: \(Swift.String(describing: dataPipelineId)), database: \(Swift.String(describing: database)), databaseUserName: \(Swift.String(describing: databaseUserName)), resourceRole: \(Swift.String(describing: resourceRole)), selectSqlQuery: \(Swift.String(describing: selectSqlQuery)), serviceRole: \(Swift.String(describing: serviceRole)))"}
}

extension MachineLearningClientTypes {
    /// <p>The datasource details that are specific to Amazon RDS.</p>
    public struct RDSMetadata: Swift.Equatable {
        /// <p>The ID of the Data Pipeline instance that is used to carry to copy data from Amazon RDS to Amazon S3. You can use the ID to find details about the instance in the Data Pipeline console.</p>
        public let dataPipelineId: Swift.String?
        /// <p>The database details required to connect to an Amazon RDS.</p>
        public let database: MachineLearningClientTypes.RDSDatabase?
        /// <p>The username to be used by Amazon ML to connect to database on an Amazon RDS instance.
        ///             The username should have sufficient permissions to execute an <code>RDSSelectSqlQuery</code> query.</p>
        public let databaseUserName: Swift.String?
        /// <p>The role (DataPipelineDefaultResourceRole) assumed by an Amazon EC2 instance to carry out the copy task from Amazon RDS to Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p>
        public let resourceRole: Swift.String?
        /// <p>The SQL query that is supplied during <a>CreateDataSourceFromRDS</a>. Returns only if <code>Verbose</code> is true in <code>GetDataSourceInput</code>. </p>
        public let selectSqlQuery: Swift.String?
        /// <p>The role (DataPipelineDefaultRole) assumed by the Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p>
        public let serviceRole: Swift.String?

        public init (
            dataPipelineId: Swift.String? = nil,
            database: MachineLearningClientTypes.RDSDatabase? = nil,
            databaseUserName: Swift.String? = nil,
            resourceRole: Swift.String? = nil,
            selectSqlQuery: Swift.String? = nil,
            serviceRole: Swift.String? = nil
        )
        {
            self.dataPipelineId = dataPipelineId
            self.database = database
            self.databaseUserName = databaseUserName
            self.resourceRole = resourceRole
            self.selectSqlQuery = selectSqlQuery
            self.serviceRole = serviceRole
        }
    }

}

extension MachineLearningClientTypes.RealtimeEndpointInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case endpointStatus = "EndpointStatus"
        case endpointUrl = "EndpointUrl"
        case peakRequestsPerSecond = "PeakRequestsPerSecond"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let endpointStatus = endpointStatus {
            try encodeContainer.encode(endpointStatus.rawValue, forKey: .endpointStatus)
        }
        if let endpointUrl = endpointUrl {
            try encodeContainer.encode(endpointUrl, forKey: .endpointUrl)
        }
        if peakRequestsPerSecond != 0 {
            try encodeContainer.encode(peakRequestsPerSecond, forKey: .peakRequestsPerSecond)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let peakRequestsPerSecondDecoded = try containerValues.decode(Swift.Int.self, forKey: .peakRequestsPerSecond)
        peakRequestsPerSecond = peakRequestsPerSecondDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let endpointUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointUrl)
        endpointUrl = endpointUrlDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RealtimeEndpointStatus.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
    }
}

extension MachineLearningClientTypes.RealtimeEndpointInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RealtimeEndpointInfo(createdAt: \(Swift.String(describing: createdAt)), endpointStatus: \(Swift.String(describing: endpointStatus)), endpointUrl: \(Swift.String(describing: endpointUrl)), peakRequestsPerSecond: \(Swift.String(describing: peakRequestsPerSecond)))"}
}

extension MachineLearningClientTypes {
    /// <p> Describes the real-time endpoint information for an <code>MLModel</code>.</p>
    public struct RealtimeEndpointInfo: Swift.Equatable {
        /// <p>The time that the request to create the real-time endpoint for the <code>MLModel</code> was received. The time is expressed in epoch time.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p> The current status of the real-time endpoint for the <code>MLModel</code>. This element can have one of the following values: </p>
        ///         <ul>
        ///             <li>
        ///                <p>
        ///                   <code>NONE</code>  - Endpoint does not exist or was previously deleted.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>READY</code> - Endpoint is ready to be used for real-time predictions.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>UPDATING</code> - Updating/creating the endpoint. </p>
        ///             </li>
        ///          </ul>
        public let endpointStatus: MachineLearningClientTypes.RealtimeEndpointStatus?
        /// <p>The URI that specifies where to send real-time prediction requests for the <code>MLModel</code>.</p>
        ///         <p>
        ///             <b>Note:</b> The application must wait until the real-time endpoint is ready before using this URI.</p>
        public let endpointUrl: Swift.String?
        /// <p> The maximum processing rate for the real-time endpoint for <code>MLModel</code>, measured in incoming requests per second.</p>
        public let peakRequestsPerSecond: Swift.Int

        public init (
            createdAt: ClientRuntime.Date? = nil,
            endpointStatus: MachineLearningClientTypes.RealtimeEndpointStatus? = nil,
            endpointUrl: Swift.String? = nil,
            peakRequestsPerSecond: Swift.Int = 0
        )
        {
            self.createdAt = createdAt
            self.endpointStatus = endpointStatus
            self.endpointUrl = endpointUrl
            self.peakRequestsPerSecond = peakRequestsPerSecond
        }
    }

}

extension MachineLearningClientTypes {
    public enum RealtimeEndpointStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case `none`
        case ready
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [RealtimeEndpointStatus] {
            return [
                .failed,
                .none,
                .ready,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .none: return "NONE"
            case .ready: return "READY"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RealtimeEndpointStatus(rawValue: rawValue) ?? RealtimeEndpointStatus.sdkUnknown(rawValue)
        }
    }
}

extension MachineLearningClientTypes.RedshiftDataSpec: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataRearrangement = "DataRearrangement"
        case dataSchema = "DataSchema"
        case dataSchemaUri = "DataSchemaUri"
        case databaseCredentials = "DatabaseCredentials"
        case databaseInformation = "DatabaseInformation"
        case s3StagingLocation = "S3StagingLocation"
        case selectSqlQuery = "SelectSqlQuery"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataRearrangement = dataRearrangement {
            try encodeContainer.encode(dataRearrangement, forKey: .dataRearrangement)
        }
        if let dataSchema = dataSchema {
            try encodeContainer.encode(dataSchema, forKey: .dataSchema)
        }
        if let dataSchemaUri = dataSchemaUri {
            try encodeContainer.encode(dataSchemaUri, forKey: .dataSchemaUri)
        }
        if let databaseCredentials = databaseCredentials {
            try encodeContainer.encode(databaseCredentials, forKey: .databaseCredentials)
        }
        if let databaseInformation = databaseInformation {
            try encodeContainer.encode(databaseInformation, forKey: .databaseInformation)
        }
        if let s3StagingLocation = s3StagingLocation {
            try encodeContainer.encode(s3StagingLocation, forKey: .s3StagingLocation)
        }
        if let selectSqlQuery = selectSqlQuery {
            try encodeContainer.encode(selectSqlQuery, forKey: .selectSqlQuery)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseInformationDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftDatabase.self, forKey: .databaseInformation)
        databaseInformation = databaseInformationDecoded
        let selectSqlQueryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .selectSqlQuery)
        selectSqlQuery = selectSqlQueryDecoded
        let databaseCredentialsDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftDatabaseCredentials.self, forKey: .databaseCredentials)
        databaseCredentials = databaseCredentialsDecoded
        let s3StagingLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3StagingLocation)
        s3StagingLocation = s3StagingLocationDecoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let dataSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSchema)
        dataSchema = dataSchemaDecoded
        let dataSchemaUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSchemaUri)
        dataSchemaUri = dataSchemaUriDecoded
    }
}

extension MachineLearningClientTypes.RedshiftDataSpec: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RedshiftDataSpec(dataRearrangement: \(Swift.String(describing: dataRearrangement)), dataSchema: \(Swift.String(describing: dataSchema)), dataSchemaUri: \(Swift.String(describing: dataSchemaUri)), databaseCredentials: \(Swift.String(describing: databaseCredentials)), databaseInformation: \(Swift.String(describing: databaseInformation)), s3StagingLocation: \(Swift.String(describing: s3StagingLocation)), selectSqlQuery: \(Swift.String(describing: selectSqlQuery)))"}
}

extension MachineLearningClientTypes {
    /// <p>Describes the data specification of an Amazon Redshift <code>DataSource</code>.</p>
    public struct RedshiftDataSpec: Swift.Equatable {
        /// <p>A JSON string that represents the splitting and rearrangement
        ///     processing to be applied to a <code>DataSource</code>. If the <code>DataRearrangement</code>
        ///     parameter is not provided, all of the input data is used to create the <code>Datasource</code>.</p>
        ///
        ///          <p>There are multiple parameters that control what data is used to create a datasource:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>percentBegin</code>
        ///                   </b>
        ///                </p>
        ///                <p>Use <code>percentBegin</code> to indicate the beginning of the range of the data used to
        ///         create the Datasource.
        ///         If you do not include <code>percentBegin</code> and <code>percentEnd</code>, Amazon ML includes
        ///         all of the data when creating the datasource.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>percentEnd</code>
        ///                   </b>
        ///                </p>
        ///                <p>Use <code>percentEnd</code> to indicate the end of the range of the data used to create the
        ///         Datasource. If you do not
        ///         include <code>percentBegin</code> and <code>percentEnd</code>, Amazon ML
        ///         includes all of the data when creating the datasource.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>complement</code>
        ///                   </b>
        ///                </p>
        ///                <p>The <code>complement</code> parameter instructs Amazon ML to use the data that is
        ///     not included in the range of <code>percentBegin</code> to <code>percentEnd</code> to create a
        ///     datasource. The <code>complement</code> parameter is useful if you need to create
        ///     complementary datasources for training and evaluation.
        ///     To create a complementary datasource, use the same
        ///     values for <code>percentBegin</code> and <code>percentEnd</code>, along with the
        ///     <code>complement</code> parameter.</p>
        ///
        ///                <p>For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data.</p>
        ///                <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":0, "percentEnd":25}}</code>
        ///                </p>
        ///                <p>Datasource for training: <code>{"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>strategy</code>
        ///                   </b>
        ///                </p>
        ///                <p>To change how Amazon ML splits the data for a datasource, use the <code>strategy</code> parameter.</p>
        ///                <p>The default value for the <code>strategy</code> parameter
        ///     is <code>sequential</code>, meaning that Amazon ML takes all of the data records between the <code>percentBegin</code>
        ///     and <code>percentEnd</code> parameters for the datasource, in the order that the records appear in the input data.</p>
        ///
        ///                <p>The following two <code>DataRearrangement</code> lines are examples of sequentially ordered
        ///     training and evaluation datasources:</p>
        ///                <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}}</code>
        ///                </p>
        ///                <p>Datasource for training: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}}</code>
        ///                </p>
        ///
        ///                <p>To randomly split the input data into the proportions indicated by the percentBegin and percentEnd
        ///         parameters, set the <code>strategy</code> parameter to
        ///     <code>random</code> and provide a string that is used as the seed value for the random data splitting (for
        ///     example, you can use the S3 path to your data as the random seed string).
        ///     If you choose the random split strategy,
        ///     Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned
        ///     number between <code>percentBegin</code> and <code>percentEnd</code>. Pseudo-random numbers are assigned
        ///     using both the input seed string value and the byte offset as a seed, so changing the data results in a
        ///     different split. Any existing ordering is preserved.
        ///     The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly.
        ///     It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in
        ///     training and evaluation datasources containing non-similar data records.</p>
        ///                <p>The following two <code>DataRearrangement</code> lines are examples of non-sequentially ordered
        ///     training and evaluation datasources:</p>
        ///                <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}}</code>
        ///                </p>
        ///                <p>Datasource for training: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let dataRearrangement: Swift.String?
        /// <p>A JSON string that represents the schema for an Amazon Redshift
        ///             <code>DataSource</code>. The <code>DataSchema</code>
        ///             defines the structure of the observation data in the data file(s)
        ///             referenced in the <code>DataSource</code>.</p>
        ///         <p>A <code>DataSchema</code> is not required if you specify a
        ///             <code>DataSchemaUri</code>.</p>
        ///         <p>Define your <code>DataSchema</code> as a series of key-value pairs. <code>attributes</code>
        ///             and <code>excludedVariableNames</code> have an array of key-value pairs
        ///             for their value. Use the following format to define your <code>DataSchema</code>.</p>
        ///         <p>{ "version": "1.0",</p>
        ///          <p>"recordAnnotationFieldName": "F1",</p>
        ///          <p>"recordWeightFieldName": "F2",</p>
        ///          <p>"targetFieldName": "F3",</p>
        ///          <p>"dataFormat": "CSV",</p>
        ///          <p>"dataFileContainsHeader": true,</p>
        ///          <p>"attributes": [</p>
        ///          <p>{ "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ],</p>
        ///          <p>"excludedVariableNames": [ "F6" ] }</p>
        public let dataSchema: Swift.String?
        /// <p>Describes the schema location for an Amazon Redshift <code>DataSource</code>.</p>
        public let dataSchemaUri: Swift.String?
        /// <p>Describes AWS Identity and Access Management (IAM) credentials that are used connect to the Amazon Redshift database.</p>
        public let databaseCredentials: MachineLearningClientTypes.RedshiftDatabaseCredentials?
        /// <p>Describes the <code>DatabaseName</code> and <code>ClusterIdentifier</code> for an Amazon Redshift <code>DataSource</code>.</p>
        public let databaseInformation: MachineLearningClientTypes.RedshiftDatabase?
        /// <p>Describes an Amazon S3 location to store the result set of the <code>SelectSqlQuery</code> query.</p>
        public let s3StagingLocation: Swift.String?
        /// <p>Describes the SQL Query to execute on an Amazon Redshift database for an Amazon Redshift <code>DataSource</code>.</p>
        public let selectSqlQuery: Swift.String?

        public init (
            dataRearrangement: Swift.String? = nil,
            dataSchema: Swift.String? = nil,
            dataSchemaUri: Swift.String? = nil,
            databaseCredentials: MachineLearningClientTypes.RedshiftDatabaseCredentials? = nil,
            databaseInformation: MachineLearningClientTypes.RedshiftDatabase? = nil,
            s3StagingLocation: Swift.String? = nil,
            selectSqlQuery: Swift.String? = nil
        )
        {
            self.dataRearrangement = dataRearrangement
            self.dataSchema = dataSchema
            self.dataSchemaUri = dataSchemaUri
            self.databaseCredentials = databaseCredentials
            self.databaseInformation = databaseInformation
            self.s3StagingLocation = s3StagingLocation
            self.selectSqlQuery = selectSqlQuery
        }
    }

}

extension MachineLearningClientTypes.RedshiftDatabase: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case databaseName = "DatabaseName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterIdentifier = clusterIdentifier {
            try encodeContainer.encode(clusterIdentifier, forKey: .clusterIdentifier)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension MachineLearningClientTypes.RedshiftDatabase: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RedshiftDatabase(clusterIdentifier: \(Swift.String(describing: clusterIdentifier)), databaseName: \(Swift.String(describing: databaseName)))"}
}

extension MachineLearningClientTypes {
    /// <p>Describes the database details required to connect to an Amazon Redshift database.</p>
    public struct RedshiftDatabase: Swift.Equatable {
        /// <p>The ID of an Amazon Redshift cluster.</p>
        public let clusterIdentifier: Swift.String?
        /// <p>The name of a database hosted on an Amazon Redshift cluster.</p>
        public let databaseName: Swift.String?

        public init (
            clusterIdentifier: Swift.String? = nil,
            databaseName: Swift.String? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.databaseName = databaseName
        }
    }

}

extension MachineLearningClientTypes.RedshiftDatabaseCredentials: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case password = "Password"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
    }
}

extension MachineLearningClientTypes.RedshiftDatabaseCredentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RedshiftDatabaseCredentials(password: \(Swift.String(describing: password)), username: \(Swift.String(describing: username)))"}
}

extension MachineLearningClientTypes {
    /// <p>Describes the database credentials for connecting to a database on an Amazon Redshift cluster.</p>
    public struct RedshiftDatabaseCredentials: Swift.Equatable {
        /// <p>A password to be used by Amazon ML to connect to a database on an Amazon Redshift cluster.
        ///           The password should have sufficient permissions to execute a <code>RedshiftSelectSqlQuery</code> query. The password should be valid for an Amazon Redshift <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html">USER</a>.</p>
        public let password: Swift.String?
        /// <p>A username to be used by Amazon Machine Learning (Amazon ML)to connect to a database on an Amazon Redshift cluster.
        ///           The username should have sufficient permissions to execute the <code>RedshiftSelectSqlQuery</code> query. The username should be valid for an Amazon Redshift <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html">USER</a>.</p>
        public let username: Swift.String?

        public init (
            password: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.password = password
            self.username = username
        }
    }

}

extension MachineLearningClientTypes.RedshiftMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseUserName = "DatabaseUserName"
        case redshiftDatabase = "RedshiftDatabase"
        case selectSqlQuery = "SelectSqlQuery"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let databaseUserName = databaseUserName {
            try encodeContainer.encode(databaseUserName, forKey: .databaseUserName)
        }
        if let redshiftDatabase = redshiftDatabase {
            try encodeContainer.encode(redshiftDatabase, forKey: .redshiftDatabase)
        }
        if let selectSqlQuery = selectSqlQuery {
            try encodeContainer.encode(selectSqlQuery, forKey: .selectSqlQuery)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let redshiftDatabaseDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftDatabase.self, forKey: .redshiftDatabase)
        redshiftDatabase = redshiftDatabaseDecoded
        let databaseUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseUserName)
        databaseUserName = databaseUserNameDecoded
        let selectSqlQueryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .selectSqlQuery)
        selectSqlQuery = selectSqlQueryDecoded
    }
}

extension MachineLearningClientTypes.RedshiftMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RedshiftMetadata(databaseUserName: \(Swift.String(describing: databaseUserName)), redshiftDatabase: \(Swift.String(describing: redshiftDatabase)), selectSqlQuery: \(Swift.String(describing: selectSqlQuery)))"}
}

extension MachineLearningClientTypes {
    /// <p>Describes the <code>DataSource</code> details specific to Amazon Redshift.</p>
    public struct RedshiftMetadata: Swift.Equatable {
        /// <p>A username to be used by Amazon Machine Learning (Amazon ML)to connect to a database on an Amazon Redshift cluster.
        ///           The username should have sufficient permissions to execute the <code>RedshiftSelectSqlQuery</code> query. The username should be valid for an Amazon Redshift <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html">USER</a>.</p>
        public let databaseUserName: Swift.String?
        /// <p>Describes the database details required to connect to an Amazon Redshift database.</p>
        public let redshiftDatabase: MachineLearningClientTypes.RedshiftDatabase?
        /// <p> The SQL query that is specified during <a>CreateDataSourceFromRedshift</a>. Returns only if <code>Verbose</code> is true in GetDataSourceInput. </p>
        public let selectSqlQuery: Swift.String?

        public init (
            databaseUserName: Swift.String? = nil,
            redshiftDatabase: MachineLearningClientTypes.RedshiftDatabase? = nil,
            selectSqlQuery: Swift.String? = nil
        )
        {
            self.databaseUserName = databaseUserName
            self.redshiftDatabase = redshiftDatabase
            self.selectSqlQuery = selectSqlQuery
        }
    }

}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = 0
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A specified resource cannot be located.</p>
public struct ResourceNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.Int
    public var message: Swift.String?

    public init (
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let code: Swift.Int
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decode(Swift.Int.self, forKey: .code)
        code = codeDecoded
    }
}

extension MachineLearningClientTypes.S3DataSpec: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataLocationS3 = "DataLocationS3"
        case dataRearrangement = "DataRearrangement"
        case dataSchema = "DataSchema"
        case dataSchemaLocationS3 = "DataSchemaLocationS3"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataLocationS3 = dataLocationS3 {
            try encodeContainer.encode(dataLocationS3, forKey: .dataLocationS3)
        }
        if let dataRearrangement = dataRearrangement {
            try encodeContainer.encode(dataRearrangement, forKey: .dataRearrangement)
        }
        if let dataSchema = dataSchema {
            try encodeContainer.encode(dataSchema, forKey: .dataSchema)
        }
        if let dataSchemaLocationS3 = dataSchemaLocationS3 {
            try encodeContainer.encode(dataSchemaLocationS3, forKey: .dataSchemaLocationS3)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataLocationS3)
        dataLocationS3 = dataLocationS3Decoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let dataSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSchema)
        dataSchema = dataSchemaDecoded
        let dataSchemaLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSchemaLocationS3)
        dataSchemaLocationS3 = dataSchemaLocationS3Decoded
    }
}

extension MachineLearningClientTypes.S3DataSpec: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "S3DataSpec(dataLocationS3: \(Swift.String(describing: dataLocationS3)), dataRearrangement: \(Swift.String(describing: dataRearrangement)), dataSchema: \(Swift.String(describing: dataSchema)), dataSchemaLocationS3: \(Swift.String(describing: dataSchemaLocationS3)))"}
}

extension MachineLearningClientTypes {
    /// <p> Describes the data specification of a <code>DataSource</code>.</p>
    public struct S3DataSpec: Swift.Equatable {
        /// <p>The location of the data file(s) used by a <code>DataSource</code>. The URI specifies a data file or
        ///             an Amazon Simple Storage Service (Amazon S3) directory or bucket containing data files.</p>
        public let dataLocationS3: Swift.String?
        /// <p>A JSON string that represents the splitting and rearrangement
        ///     processing to be applied to a <code>DataSource</code>. If the <code>DataRearrangement</code>
        ///     parameter is not provided, all of the input data is used to create the <code>Datasource</code>.</p>
        ///
        ///          <p>There are multiple parameters that control what data is used to create a datasource:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>percentBegin</code>
        ///                   </b>
        ///                </p>
        ///                <p>Use <code>percentBegin</code> to indicate the beginning of the range of the data used to
        ///         create the Datasource.
        ///         If you do not include <code>percentBegin</code> and <code>percentEnd</code>, Amazon ML includes
        ///         all of the data when creating the datasource.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>percentEnd</code>
        ///                   </b>
        ///                </p>
        ///                <p>Use <code>percentEnd</code> to indicate the end of the range of the data used to create the
        ///         Datasource. If you do not
        ///         include <code>percentBegin</code> and <code>percentEnd</code>, Amazon ML
        ///         includes all of the data when creating the datasource.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>complement</code>
        ///                   </b>
        ///                </p>
        ///                <p>The <code>complement</code> parameter instructs Amazon ML to use the data that is
        ///     not included in the range of <code>percentBegin</code> to <code>percentEnd</code> to create a
        ///     datasource. The <code>complement</code> parameter is useful if you need to create
        ///     complementary datasources for training and evaluation.
        ///     To create a complementary datasource, use the same
        ///     values for <code>percentBegin</code> and <code>percentEnd</code>, along with the
        ///     <code>complement</code> parameter.</p>
        ///
        ///                <p>For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data.</p>
        ///                <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":0, "percentEnd":25}}</code>
        ///                </p>
        ///                <p>Datasource for training: <code>{"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>strategy</code>
        ///                   </b>
        ///                </p>
        ///                <p>To change how Amazon ML splits the data for a datasource, use the <code>strategy</code> parameter.</p>
        ///                <p>The default value for the <code>strategy</code> parameter
        ///     is <code>sequential</code>, meaning that Amazon ML takes all of the data records between the <code>percentBegin</code>
        ///     and <code>percentEnd</code> parameters for the datasource, in the order that the records appear in the input data.</p>
        ///
        ///                <p>The following two <code>DataRearrangement</code> lines are examples of sequentially ordered
        ///     training and evaluation datasources:</p>
        ///                <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}}</code>
        ///                </p>
        ///                <p>Datasource for training: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}}</code>
        ///                </p>
        ///
        ///                <p>To randomly split the input data into the proportions indicated by the percentBegin and percentEnd
        ///         parameters, set the <code>strategy</code> parameter to
        ///     <code>random</code> and provide a string that is used as the seed value for the random data splitting (for
        ///     example, you can use the S3 path to your data as the random seed string).
        ///     If you choose the random split strategy,
        ///     Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned
        ///     number between <code>percentBegin</code> and <code>percentEnd</code>. Pseudo-random numbers are assigned
        ///     using both the input seed string value and the byte offset as a seed, so changing the data results in a
        ///     different split. Any existing ordering is preserved.
        ///     The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly.
        ///     It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in
        ///     training and evaluation datasources containing non-similar data records.</p>
        ///                <p>The following two <code>DataRearrangement</code> lines are examples of non-sequentially ordered
        ///     training and evaluation datasources:</p>
        ///                <p>Datasource for evaluation: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}}</code>
        ///                </p>
        ///                <p>Datasource for training: <code>{"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let dataRearrangement: Swift.String?
        /// <p> A JSON string that represents the schema for an Amazon S3
        ///             <code>DataSource</code>. The <code>DataSchema</code>
        ///             defines the structure of the observation data in the data file(s)
        ///             referenced in the <code>DataSource</code>.</p>
        ///         <p>You must provide either the <code>DataSchema</code> or the <code>DataSchemaLocationS3</code>.</p>
        ///         <p>Define your <code>DataSchema</code> as a series of key-value pairs. <code>attributes</code>
        ///             and <code>excludedVariableNames</code> have an array of key-value pairs
        ///             for their value. Use the following format to define your <code>DataSchema</code>.</p>
        ///         <p>{ "version": "1.0",</p>
        ///          <p>"recordAnnotationFieldName": "F1",</p>
        ///          <p>"recordWeightFieldName": "F2",</p>
        ///          <p>"targetFieldName": "F3",</p>
        ///          <p>"dataFormat": "CSV",</p>
        ///          <p>"dataFileContainsHeader": true,</p>
        ///          <p>"attributes": [</p>
        ///          <p>{ "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ],</p>
        ///          <p>"excludedVariableNames": [ "F6" ] }</p>
        public let dataSchema: Swift.String?
        /// <p>Describes the schema location in Amazon S3. You must provide either the
        ///            <code>DataSchema</code> or the <code>DataSchemaLocationS3</code>.</p>
        public let dataSchemaLocationS3: Swift.String?

        public init (
            dataLocationS3: Swift.String? = nil,
            dataRearrangement: Swift.String? = nil,
            dataSchema: Swift.String? = nil,
            dataSchemaLocationS3: Swift.String? = nil
        )
        {
            self.dataLocationS3 = dataLocationS3
            self.dataRearrangement = dataRearrangement
            self.dataSchema = dataSchema
            self.dataSchemaLocationS3 = dataSchemaLocationS3
        }
    }

}

extension MachineLearningClientTypes {
    /// <p>The sort order specified in a listing condition. Possible values include the following:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>asc</code> - Present the information in ascending order (from A-Z).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>dsc</code> - Present the information in descending order (from Z-A).</p>
    ///             </li>
    ///          </ul>
    public enum SortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case asc
        case dsc
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .asc,
                .dsc,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .asc: return "asc"
            case .dsc: return "dsc"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortOrder(rawValue: rawValue) ?? SortOrder.sdkUnknown(rawValue)
        }
    }
}

extension MachineLearningClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension MachineLearningClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension MachineLearningClientTypes {
    /// <p>A custom key-value pair associated with an ML object, such as an ML model.</p>
    public struct Tag: Swift.Equatable {
        /// <p>A unique identifier for the tag. Valid characters include Unicode letters, digits, white space, _, ., /, =, +, -, %, and @.</p>
        public let key: Swift.String?
        /// <p>An optional string, typically used to describe or define the tag. Valid characters include Unicode letters, digits, white space, _, ., /, =, +, -, %, and @.</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagLimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension TagLimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TagLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

public struct TagLimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TagLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TagLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MachineLearningClientTypes {
    public enum TaggableResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case batchPrediction
        case datasource
        case evaluation
        case mlModel
        case sdkUnknown(Swift.String)

        public static var allCases: [TaggableResourceType] {
            return [
                .batchPrediction,
                .datasource,
                .evaluation,
                .mlModel,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .batchPrediction: return "BatchPrediction"
            case .datasource: return "DataSource"
            case .evaluation: return "Evaluation"
            case .mlModel: return "MLModel"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaggableResourceType(rawValue: rawValue) ?? TaggableResourceType.sdkUnknown(rawValue)
        }
    }
}

public struct UpdateBatchPredictionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateBatchPredictionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateBatchPredictionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateBatchPredictionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateBatchPredictionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateBatchPredictionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateBatchPredictionOutputError>
}

extension UpdateBatchPredictionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateBatchPredictionInput(batchPredictionId: \(Swift.String(describing: batchPredictionId)), batchPredictionName: \(Swift.String(describing: batchPredictionName)))"}
}

extension UpdateBatchPredictionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
        case batchPredictionName = "BatchPredictionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchPredictionId = batchPredictionId {
            try encodeContainer.encode(batchPredictionId, forKey: .batchPredictionId)
        }
        if let batchPredictionName = batchPredictionName {
            try encodeContainer.encode(batchPredictionName, forKey: .batchPredictionName)
        }
    }
}

public struct UpdateBatchPredictionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateBatchPredictionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateBatchPredictionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateBatchPredictionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateBatchPredictionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateBatchPredictionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateBatchPredictionOutputError>
}

public struct UpdateBatchPredictionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateBatchPredictionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateBatchPredictionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateBatchPredictionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateBatchPredictionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateBatchPredictionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateBatchPredictionOutputError>
}

public struct UpdateBatchPredictionInput: Swift.Equatable {
    /// <p>The ID assigned to the <code>BatchPrediction</code> during creation.</p>
    public let batchPredictionId: Swift.String?
    /// <p>A new user-supplied name or description of the <code>BatchPrediction</code>.</p>
    public let batchPredictionName: Swift.String?

    public init (
        batchPredictionId: Swift.String? = nil,
        batchPredictionName: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
        self.batchPredictionName = batchPredictionName
    }
}

struct UpdateBatchPredictionInputBody: Swift.Equatable {
    public let batchPredictionId: Swift.String?
    public let batchPredictionName: Swift.String?
}

extension UpdateBatchPredictionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
        case batchPredictionName = "BatchPredictionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
        let batchPredictionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionName)
        batchPredictionName = batchPredictionNameDecoded
    }
}

extension UpdateBatchPredictionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateBatchPredictionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateBatchPredictionOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateBatchPredictionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateBatchPredictionOutputResponse(batchPredictionId: \(Swift.String(describing: batchPredictionId)))"}
}

extension UpdateBatchPredictionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateBatchPredictionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.batchPredictionId = output.batchPredictionId
        } else {
            self.batchPredictionId = nil
        }
    }
}

/// <p>Represents the output of an <code>UpdateBatchPrediction</code> operation.</p>
///         <p>You can see the updated content by using the <code>GetBatchPrediction</code> operation.</p>
public struct UpdateBatchPredictionOutputResponse: Swift.Equatable {
    /// <p>The ID assigned to the <code>BatchPrediction</code> during creation.  This value should be identical to the value
    ///             of the <code>BatchPredictionId</code> in the request.</p>
    public let batchPredictionId: Swift.String?

    public init (
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

struct UpdateBatchPredictionOutputResponseBody: Swift.Equatable {
    public let batchPredictionId: Swift.String?
}

extension UpdateBatchPredictionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
    }
}

public struct UpdateDataSourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDataSourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDataSourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDataSourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDataSourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDataSourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDataSourceOutputError>
}

extension UpdateDataSourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDataSourceInput(dataSourceId: \(Swift.String(describing: dataSourceId)), dataSourceName: \(Swift.String(describing: dataSourceName)))"}
}

extension UpdateDataSourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceId = dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let dataSourceName = dataSourceName {
            try encodeContainer.encode(dataSourceName, forKey: .dataSourceName)
        }
    }
}

public struct UpdateDataSourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDataSourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDataSourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDataSourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDataSourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDataSourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDataSourceOutputError>
}

public struct UpdateDataSourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDataSourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDataSourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDataSourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDataSourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDataSourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDataSourceOutputError>
}

public struct UpdateDataSourceInput: Swift.Equatable {
    /// <p>The ID assigned to the <code>DataSource</code> during creation.</p>
    public let dataSourceId: Swift.String?
    /// <p>A new user-supplied name or description of the <code>DataSource</code> that will replace the current description. </p>
    public let dataSourceName: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil,
        dataSourceName: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
        self.dataSourceName = dataSourceName
    }
}

struct UpdateDataSourceInputBody: Swift.Equatable {
    public let dataSourceId: Swift.String?
    public let dataSourceName: Swift.String?
}

extension UpdateDataSourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataSourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceName)
        dataSourceName = dataSourceNameDecoded
    }
}

extension UpdateDataSourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDataSourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDataSourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDataSourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDataSourceOutputResponse(dataSourceId: \(Swift.String(describing: dataSourceId)))"}
}

extension UpdateDataSourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateDataSourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataSourceId = output.dataSourceId
        } else {
            self.dataSourceId = nil
        }
    }
}

/// <p>Represents the output of an <code>UpdateDataSource</code> operation.</p>
///         <p>You can see the updated content by using the <code>GetBatchPrediction</code> operation.</p>
public struct UpdateDataSourceOutputResponse: Swift.Equatable {
    /// <p>The ID assigned to the <code>DataSource</code> during creation.  This value should be identical to the value
    ///             of the <code>DataSourceID</code> in the request.</p>
    public let dataSourceId: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

struct UpdateDataSourceOutputResponseBody: Swift.Equatable {
    public let dataSourceId: Swift.String?
}

extension UpdateDataSourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

public struct UpdateEvaluationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEvaluationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEvaluationOutputError>
}

extension UpdateEvaluationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEvaluationInput(evaluationId: \(Swift.String(describing: evaluationId)), evaluationName: \(Swift.String(describing: evaluationName)))"}
}

extension UpdateEvaluationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
        case evaluationName = "EvaluationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluationId = evaluationId {
            try encodeContainer.encode(evaluationId, forKey: .evaluationId)
        }
        if let evaluationName = evaluationName {
            try encodeContainer.encode(evaluationName, forKey: .evaluationName)
        }
    }
}

public struct UpdateEvaluationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEvaluationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEvaluationOutputError>
}

public struct UpdateEvaluationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEvaluationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEvaluationOutputError>
}

public struct UpdateEvaluationInput: Swift.Equatable {
    /// <p>The ID assigned to the <code>Evaluation</code> during creation.</p>
    public let evaluationId: Swift.String?
    /// <p>A new user-supplied name or description of the <code>Evaluation</code> that will replace the current content. </p>
    public let evaluationName: Swift.String?

    public init (
        evaluationId: Swift.String? = nil,
        evaluationName: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
        self.evaluationName = evaluationName
    }
}

struct UpdateEvaluationInputBody: Swift.Equatable {
    public let evaluationId: Swift.String?
    public let evaluationName: Swift.String?
}

extension UpdateEvaluationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
        case evaluationName = "EvaluationName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
        let evaluationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationName)
        evaluationName = evaluationNameDecoded
    }
}

extension UpdateEvaluationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEvaluationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateEvaluationOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEvaluationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEvaluationOutputResponse(evaluationId: \(Swift.String(describing: evaluationId)))"}
}

extension UpdateEvaluationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateEvaluationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.evaluationId = output.evaluationId
        } else {
            self.evaluationId = nil
        }
    }
}

/// <p>Represents the output of an <code>UpdateEvaluation</code> operation.</p>
///         <p>You can see the updated content by using the <code>GetEvaluation</code> operation.</p>
public struct UpdateEvaluationOutputResponse: Swift.Equatable {
    /// <p>The ID assigned to the <code>Evaluation</code> during creation.  This value should be identical to the value
    ///             of the <code>Evaluation</code> in the request.</p>
    public let evaluationId: Swift.String?

    public init (
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

struct UpdateEvaluationOutputResponseBody: Swift.Equatable {
    public let evaluationId: Swift.String?
}

extension UpdateEvaluationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
    }
}

public struct UpdateMLModelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMLModelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMLModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMLModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMLModelOutputError>
}

extension UpdateMLModelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateMLModelInput(mLModelId: \(Swift.String(describing: mLModelId)), mLModelName: \(Swift.String(describing: mLModelName)), scoreThreshold: \(Swift.String(describing: scoreThreshold)))"}
}

extension UpdateMLModelInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
        case mLModelName = "MLModelName"
        case scoreThreshold = "ScoreThreshold"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
        if let mLModelName = mLModelName {
            try encodeContainer.encode(mLModelName, forKey: .mLModelName)
        }
        if let scoreThreshold = scoreThreshold {
            try encodeContainer.encode(scoreThreshold, forKey: .scoreThreshold)
        }
    }
}

public struct UpdateMLModelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMLModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMLModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMLModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMLModelOutputError>
}

public struct UpdateMLModelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMLModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMLModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMLModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMLModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMLModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMLModelOutputError>
}

public struct UpdateMLModelInput: Swift.Equatable {
    /// <p>The ID assigned to the <code>MLModel</code> during creation.</p>
    public let mLModelId: Swift.String?
    /// <p>A user-supplied name or description of the <code>MLModel</code>.</p>
    public let mLModelName: Swift.String?
    /// <p>The <code>ScoreThreshold</code> used in binary classification <code>MLModel</code> that marks the boundary between a positive prediction and a negative prediction.</p>
    ///         <p>Output values greater than or equal to the <code>ScoreThreshold</code> receive a positive result from the <code>MLModel</code>, such as <code>true</code>. Output values less than the <code>ScoreThreshold</code> receive a negative response from the <code>MLModel</code>, such as <code>false</code>.</p>
    public let scoreThreshold: Swift.Float?

    public init (
        mLModelId: Swift.String? = nil,
        mLModelName: Swift.String? = nil,
        scoreThreshold: Swift.Float? = nil
    )
    {
        self.mLModelId = mLModelId
        self.mLModelName = mLModelName
        self.scoreThreshold = scoreThreshold
    }
}

struct UpdateMLModelInputBody: Swift.Equatable {
    public let mLModelId: Swift.String?
    public let mLModelName: Swift.String?
    public let scoreThreshold: Swift.Float?
}

extension UpdateMLModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
        case mLModelName = "MLModelName"
        case scoreThreshold = "ScoreThreshold"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let mLModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelName)
        mLModelName = mLModelNameDecoded
        let scoreThresholdDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .scoreThreshold)
        scoreThreshold = scoreThresholdDecoded
    }
}

extension UpdateMLModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMLModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateMLModelOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMLModelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateMLModelOutputResponse(mLModelId: \(Swift.String(describing: mLModelId)))"}
}

extension UpdateMLModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateMLModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mLModelId = output.mLModelId
        } else {
            self.mLModelId = nil
        }
    }
}

/// <p>Represents the output of an <code>UpdateMLModel</code> operation.</p>
///         <p>You can see the updated content by using the <code>GetMLModel</code> operation.</p>
public struct UpdateMLModelOutputResponse: Swift.Equatable {
    /// <p>The ID assigned to the <code>MLModel</code> during creation.  This value should be identical to the value
    ///             of the <code>MLModelID</code> in the request.</p>
    public let mLModelId: Swift.String?

    public init (
        mLModelId: Swift.String? = nil
    )
    {
        self.mLModelId = mLModelId
    }
}

struct UpdateMLModelOutputResponseBody: Swift.Equatable {
    public let mLModelId: Swift.String?
}

extension UpdateMLModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mLModelId = "MLModelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
    }
}
