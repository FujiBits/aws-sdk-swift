// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ApplicationDiscoveryClient {
    /// <p>Associates one or more configuration items with an application.</p>
    func associateConfigurationItemsToApplication(input: AssociateConfigurationItemsToApplicationInput) async throws -> AssociateConfigurationItemsToApplicationOutputResponse
    {
        typealias associateConfigurationItemsToApplicationContinuation = CheckedContinuation<AssociateConfigurationItemsToApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateConfigurationItemsToApplicationContinuation) in
            associateConfigurationItemsToApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes one or more import tasks, each identified by their import ID. Each import task has
    ///       a number of records that can identify servers or applications. </p>
    ///
    ///          <p>AWS Application Discovery Service has built-in matching logic that will identify when
    ///       discovered servers match existing entries that you've previously discovered, the information
    ///       for the already-existing discovered server is updated. When you delete an import task that
    ///       contains records that were used to match, the information in those matched records that comes
    ///       from the deleted records will also be deleted.</p>
    func batchDeleteImportData(input: BatchDeleteImportDataInput) async throws -> BatchDeleteImportDataOutputResponse
    {
        typealias batchDeleteImportDataContinuation = CheckedContinuation<BatchDeleteImportDataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDeleteImportDataContinuation) in
            batchDeleteImportData(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an application with the given name and description.</p>
    func createApplication(input: CreateApplicationInput) async throws -> CreateApplicationOutputResponse
    {
        typealias createApplicationContinuation = CheckedContinuation<CreateApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createApplicationContinuation) in
            createApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates one or more tags for configuration items. Tags are metadata that help you
    ///       categorize IT assets. This API accepts a list of multiple configuration items.</p>
    func createTags(input: CreateTagsInput) async throws -> CreateTagsOutputResponse
    {
        typealias createTagsContinuation = CheckedContinuation<CreateTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTagsContinuation) in
            createTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a list of applications and their associations with configuration
    ///       items.</p>
    func deleteApplications(input: DeleteApplicationsInput) async throws -> DeleteApplicationsOutputResponse
    {
        typealias deleteApplicationsContinuation = CheckedContinuation<DeleteApplicationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteApplicationsContinuation) in
            deleteApplications(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the association between configuration items and one or more tags. This API
    ///       accepts a list of multiple configuration items.</p>
    func deleteTags(input: DeleteTagsInput) async throws -> DeleteTagsOutputResponse
    {
        typealias deleteTagsContinuation = CheckedContinuation<DeleteTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTagsContinuation) in
            deleteTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists agents or connectors as specified by ID or other filters. All agents/connectors
    ///       associated with your user account can be listed if you call <code>DescribeAgents</code> as is
    ///       without passing any parameters.</p>
    func describeAgents(input: DescribeAgentsInput) async throws -> DescribeAgentsOutputResponse
    {
        typealias describeAgentsContinuation = CheckedContinuation<DescribeAgentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAgentsContinuation) in
            describeAgents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves attributes for a list of configuration item IDs.</p>
    ///
    ///          <note>
    ///             <p>All of the supplied IDs must be for the same asset type from one of the
    ///         following:</p>
    ///             <ul>
    ///                <li>
    ///                   <p>server</p>
    ///                </li>
    ///                <li>
    ///                   <p>application</p>
    ///                </li>
    ///                <li>
    ///                   <p>process</p>
    ///                </li>
    ///                <li>
    ///                   <p>connection</p>
    ///                </li>
    ///             </ul>
    ///
    ///             <p>Output fields are specific to the asset type specified. For example, the output for a
    ///           <i>server</i> configuration item includes a list of attributes about the
    ///         server, such as host name, operating system, number of network cards, etc.</p>
    ///             <p>For a complete list of outputs for each asset type, see <a href="https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-api-queries.html#DescribeConfigurations">Using the DescribeConfigurations Action</a> in the <i>AWS Application
    ///           Discovery Service User Guide</i>.</p>
    ///          </note>
    func describeConfigurations(input: DescribeConfigurationsInput) async throws -> DescribeConfigurationsOutputResponse
    {
        typealias describeConfigurationsContinuation = CheckedContinuation<DescribeConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeConfigurationsContinuation) in
            describeConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists exports as specified by ID. All continuous exports associated with your user
    ///       account can be listed if you call <code>DescribeContinuousExports</code> as is without passing
    ///       any parameters.</p>
    func describeContinuousExports(input: DescribeContinuousExportsInput) async throws -> DescribeContinuousExportsOutputResponse
    {
        typealias describeContinuousExportsContinuation = CheckedContinuation<DescribeContinuousExportsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeContinuousExportsContinuation) in
            describeContinuousExports(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///             <code>DescribeExportConfigurations</code> is deprecated. Use <a href="https://docs.aws.amazon.com/application-discovery/latest/APIReference/API_DescribeExportTasks.html">DescribeImportTasks</a>, instead.</p>
    @available(*, deprecated)
    func describeExportConfigurations(input: DescribeExportConfigurationsInput) async throws -> DescribeExportConfigurationsOutputResponse
    {
        typealias describeExportConfigurationsContinuation = CheckedContinuation<DescribeExportConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeExportConfigurationsContinuation) in
            describeExportConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieve status of one or more export tasks. You can retrieve the status of up to 100
    ///       export tasks.</p>
    func describeExportTasks(input: DescribeExportTasksInput) async throws -> DescribeExportTasksOutputResponse
    {
        typealias describeExportTasksContinuation = CheckedContinuation<DescribeExportTasksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeExportTasksContinuation) in
            describeExportTasks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns an array of import tasks for your account, including status information, times,
    ///       IDs, the Amazon S3 Object URL for the import file, and more.</p>
    func describeImportTasks(input: DescribeImportTasksInput) async throws -> DescribeImportTasksOutputResponse
    {
        typealias describeImportTasksContinuation = CheckedContinuation<DescribeImportTasksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeImportTasksContinuation) in
            describeImportTasks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list of configuration items that have tags as specified by the key-value
    ///       pairs, name and value, passed to the optional parameter <code>filters</code>.</p>
    ///          <p>There are three valid tag filter names:</p>
    ///          <ul>
    ///             <li>
    ///                <p>tagKey</p>
    ///             </li>
    ///             <li>
    ///                <p>tagValue</p>
    ///             </li>
    ///             <li>
    ///                <p>configurationId</p>
    ///             </li>
    ///          </ul>
    ///          <p>Also, all configuration items associated with your user account that have tags can be
    ///       listed if you call <code>DescribeTags</code> as is without passing any parameters.</p>
    func describeTags(input: DescribeTagsInput) async throws -> DescribeTagsOutputResponse
    {
        typealias describeTagsContinuation = CheckedContinuation<DescribeTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeTagsContinuation) in
            describeTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates one or more configuration items from an application.</p>
    func disassociateConfigurationItemsFromApplication(input: DisassociateConfigurationItemsFromApplicationInput) async throws -> DisassociateConfigurationItemsFromApplicationOutputResponse
    {
        typealias disassociateConfigurationItemsFromApplicationContinuation = CheckedContinuation<DisassociateConfigurationItemsFromApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateConfigurationItemsFromApplicationContinuation) in
            disassociateConfigurationItemsFromApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deprecated. Use <code>StartExportTask</code> instead.</p>
    ///          <p>Exports all discovered configuration data to an Amazon S3 bucket or an application that
    ///       enables you to view and evaluate the data. Data includes tags and tag associations, processes,
    ///       connections, servers, and system performance. This API returns an export ID that you can query
    ///       using the <i>DescribeExportConfigurations</i> API. The system imposes a limit of
    ///       two configuration exports in six hours.</p>
    @available(*, deprecated)
    func exportConfigurations(input: ExportConfigurationsInput) async throws -> ExportConfigurationsOutputResponse
    {
        typealias exportConfigurationsContinuation = CheckedContinuation<ExportConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportConfigurationsContinuation) in
            exportConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a short summary of discovered assets.</p>
    ///          <p>This API operation takes no request parameters and is called as is at the command
    ///       prompt as shown in the example.</p>
    func getDiscoverySummary(input: GetDiscoverySummaryInput) async throws -> GetDiscoverySummaryOutputResponse
    {
        typealias getDiscoverySummaryContinuation = CheckedContinuation<GetDiscoverySummaryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDiscoverySummaryContinuation) in
            getDiscoverySummary(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list of configuration items as specified by the value passed to the
    ///       required parameter <code>configurationType</code>. Optional filtering may be applied to refine
    ///       search results.</p>
    func listConfigurations(input: ListConfigurationsInput) async throws -> ListConfigurationsOutputResponse
    {
        typealias listConfigurationsContinuation = CheckedContinuation<ListConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listConfigurationsContinuation) in
            listConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list of servers that are one network hop away from a specified
    ///       server.</p>
    func listServerNeighbors(input: ListServerNeighborsInput) async throws -> ListServerNeighborsOutputResponse
    {
        typealias listServerNeighborsContinuation = CheckedContinuation<ListServerNeighborsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listServerNeighborsContinuation) in
            listServerNeighbors(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Start the continuous flow of agent's discovered data into Amazon Athena.</p>
    func startContinuousExport(input: StartContinuousExportInput) async throws -> StartContinuousExportOutputResponse
    {
        typealias startContinuousExportContinuation = CheckedContinuation<StartContinuousExportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startContinuousExportContinuation) in
            startContinuousExport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Instructs the specified agents or connectors to start collecting data.</p>
    func startDataCollectionByAgentIds(input: StartDataCollectionByAgentIdsInput) async throws -> StartDataCollectionByAgentIdsOutputResponse
    {
        typealias startDataCollectionByAgentIdsContinuation = CheckedContinuation<StartDataCollectionByAgentIdsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startDataCollectionByAgentIdsContinuation) in
            startDataCollectionByAgentIds(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Begins the export of discovered data to an S3 bucket.</p>
    ///          <p> If you specify <code>agentIds</code> in a filter, the task exports up to 72 hours of
    ///       detailed data collected by the identified Application Discovery Agent, including network,
    ///       process, and performance details. A time range for exported agent data may be set by using
    ///         <code>startTime</code> and <code>endTime</code>. Export of detailed agent data is limited to
    ///       five concurrently running exports. </p>
    ///          <p> If you do not include an <code>agentIds</code> filter, summary data is exported that
    ///       includes both AWS Agentless Discovery Connector data and summary data from AWS Discovery
    ///       Agents. Export of summary data is limited to two exports per day. </p>
    func startExportTask(input: StartExportTaskInput) async throws -> StartExportTaskOutputResponse
    {
        typealias startExportTaskContinuation = CheckedContinuation<StartExportTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startExportTaskContinuation) in
            startExportTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts an import task, which allows you to import details of your on-premises environment
    ///       directly into AWS Migration Hub without having to use the Application Discovery Service (ADS)
    ///       tools such as the Discovery Connector or Discovery Agent. This gives you the option to perform
    ///       migration assessment and planning directly from your imported data, including the ability to
    ///       group your devices as applications and track their migration status.</p>
    ///
    ///          <p>To start an import request, do this:</p>
    ///
    ///          <ol>
    ///             <li>
    ///                <p>Download the specially formatted comma separated value (CSV) import template, which
    ///           you can find here: <a href="https://s3-us-west-2.amazonaws.com/templates-7cffcf56-bd96-4b1c-b45b-a5b42f282e46/import_template.csv">https://s3-us-west-2.amazonaws.com/templates-7cffcf56-bd96-4b1c-b45b-a5b42f282e46/import_template.csv</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Fill out the template with your server and application data.</p>
    ///             </li>
    ///             <li>
    ///                <p>Upload your import file to an Amazon S3 bucket, and make a note of it's Object URL.
    ///           Your import file must be in the CSV format.</p>
    ///             </li>
    ///             <li>
    ///                <p>Use the console or the <code>StartImportTask</code> command with the AWS CLI or one of
    ///           the AWS SDKs to import the records from your file.</p>
    ///             </li>
    ///          </ol>
    ///
    ///          <p>For more information, including step-by-step procedures, see <a href="https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-import.html">Migration Hub
    ///         Import</a> in the <i>AWS Application Discovery Service User
    ///       Guide</i>.</p>
    ///
    ///          <note>
    ///             <p>There are limits to the number of import tasks you can create (and delete) in an AWS
    ///         account. For more information, see <a href="https://docs.aws.amazon.com/application-discovery/latest/userguide/ads_service_limits.html">AWS Application
    ///           Discovery Service Limits</a> in the <i>AWS Application Discovery Service User
    ///           Guide</i>.</p>
    ///          </note>
    func startImportTask(input: StartImportTaskInput) async throws -> StartImportTaskOutputResponse
    {
        typealias startImportTaskContinuation = CheckedContinuation<StartImportTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startImportTaskContinuation) in
            startImportTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Stop the continuous flow of agent's discovered data into Amazon Athena.</p>
    func stopContinuousExport(input: StopContinuousExportInput) async throws -> StopContinuousExportOutputResponse
    {
        typealias stopContinuousExportContinuation = CheckedContinuation<StopContinuousExportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopContinuousExportContinuation) in
            stopContinuousExport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Instructs the specified agents or connectors to stop collecting data.</p>
    func stopDataCollectionByAgentIds(input: StopDataCollectionByAgentIdsInput) async throws -> StopDataCollectionByAgentIdsOutputResponse
    {
        typealias stopDataCollectionByAgentIdsContinuation = CheckedContinuation<StopDataCollectionByAgentIdsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopDataCollectionByAgentIdsContinuation) in
            stopDataCollectionByAgentIds(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates metadata about an application.</p>
    func updateApplication(input: UpdateApplicationInput) async throws -> UpdateApplicationOutputResponse
    {
        typealias updateApplicationContinuation = CheckedContinuation<UpdateApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApplicationContinuation) in
            updateApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
