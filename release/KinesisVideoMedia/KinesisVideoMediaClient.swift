// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation
import Logging

public class KinesisVideoMediaClient {
    let client: SdkHttpClient
    let config: KinesisVideoMediaClientConfiguration
    let serviceName = "Kinesis Video Media"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: KinesisVideoMediaClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    deinit {
        client.close()
    }

    public class KinesisVideoMediaClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public let clientLogMode: ClientLogMode
        public let logger: LogAgent

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String,
            clientLogMode: ClientLogMode = .request,
            logger: LogAgent? = nil
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
            self.clientLogMode = clientLogMode
            self.logger = logger ?? SwiftLogger(label: "KinesisVideoMediaClient")
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> KinesisVideoMediaClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try KinesisVideoMediaClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

public struct KinesisVideoMediaClientLogHandlerFactory: SDKLogHandlerFactory {
    public var label = "KinesisVideoMediaClient"
    let logLevel: SDKLogLevel
    public func construct(label: String) -> LogHandler {
        var handler = StreamLogHandler.standardOutput(label: label)
        handler.logLevel = logLevel.toLoggerType()
        return handler
    }
    public init(logLevel: SDKLogLevel) {
        self.logLevel = logLevel
    }
}

extension KinesisVideoMediaClient: KinesisVideoMediaClientProtocol {
    /// <p> Use this API to retrieve media content from a Kinesis video stream. In the request,
    ///       you identify the stream name or stream Amazon Resource Name (ARN), and the starting chunk.
    ///       Kinesis Video Streams then returns a stream of chunks in order by fragment number.</p>
    ///          <note>
    ///             <p>You must first call the <code>GetDataEndpoint</code> API to get an endpoint. Then
    ///         send the <code>GetMedia</code> requests to this endpoint using the <a href="https://docs.aws.amazon.com/cli/latest/reference/">--endpoint-url parameter</a>.
    ///       </p>
    ///          </note>
    ///          <p>When you put media data (fragments) on a stream, Kinesis Video Streams stores each
    ///       incoming fragment and related metadata in what is called a "chunk." For more information, see
    ///         <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_dataplane_PutMedia.html">PutMedia</a>. The <code>GetMedia</code> API returns a stream of these chunks starting
    ///       from the chunk that you specify in the request. </p>
    ///          <p>The following limits apply when using the <code>GetMedia</code> API:</p>
    ///          <ul>
    ///             <li>
    ///                <p>A client can call <code>GetMedia</code> up to five times per second per stream.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>Kinesis Video Streams sends media data at a rate of up to 25 megabytes per second
    ///           (or 200 megabits per second) during a <code>GetMedia</code> session. </p>
    ///             </li>
    ///          </ul>
    ///
    ///          <note>
    ///             <p>If an error is thrown after invoking a Kinesis Video Streams media API, in addition to
    ///         the HTTP status code and the response body, it includes the following pieces of information: </p>
    ///             <ul>
    ///                <li>
    ///                   <p>
    ///                      <code>x-amz-ErrorType</code> HTTP header – contains a more specific error type in
    ///             addition to what the HTTP status code provides. </p>
    ///                </li>
    ///                <li>
    ///                   <p>
    ///                      <code>x-amz-RequestId</code> HTTP header – if you want to report an issue to AWS,
    ///             the support team can better diagnose the problem if given the Request Id.</p>
    ///                </li>
    ///             </ul>
    ///             <p>Both the HTTP status code and the ErrorType header can be utilized to make programmatic
    ///         decisions about whether errors are retry-able and under what conditions, as well as provide
    ///         information on what actions the client programmer might need to take in order to
    ///         successfully try again.</p>
    ///             <p>For more information, see the <b>Errors</b> section at the
    ///         bottom of this topic, as well as <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common Errors</a>. </p>
    ///          </note>
    public func getMedia(input: GetMediaInput, completion: @escaping (SdkResult<GetMediaOutputResponse, GetMediaOutputError>) -> Void)
    {
        let urlPath = "/getMedia"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getMedia")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "kinesisvideo.\(config.region).amazonaws.com")
                      .withSigningName(value: "kinesisvideo")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetMediaInput, GetMediaOutputResponse, GetMediaOutputError>(id: "getMedia")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetMediaInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetMediaInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetMediaInput, GetMediaOutputResponse, GetMediaOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: GetMediaInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
