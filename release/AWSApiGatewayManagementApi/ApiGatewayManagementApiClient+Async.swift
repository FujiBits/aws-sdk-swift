// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ApiGatewayManagementApiClient {
    /// Delete the connection with the provided id.
    func deleteConnection(input: DeleteConnectionInput) async throws -> DeleteConnectionOutputResponse
    {
        typealias deleteConnectionContinuation = CheckedContinuation<DeleteConnectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConnectionContinuation) in
            deleteConnection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get information about the connection with the provided id.
    func getConnection(input: GetConnectionInput) async throws -> GetConnectionOutputResponse
    {
        typealias getConnectionContinuation = CheckedContinuation<GetConnectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getConnectionContinuation) in
            getConnection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends the provided data to the specified connection.
    func postToConnection(input: PostToConnectionInput) async throws -> PostToConnectionOutputResponse
    {
        typealias postToConnectionContinuation = CheckedContinuation<PostToConnectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: postToConnectionContinuation) in
            postToConnection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
