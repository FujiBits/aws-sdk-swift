// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// AppSync provides API actions for creating and interacting with data
///          sources using GraphQL from your application.
public protocol AppSyncClientProtocol {
    /// Creates a cache for the GraphQL API.
    func createApiCache(input: CreateApiCacheInput, completion: @escaping (ClientRuntime.SdkResult<CreateApiCacheOutputResponse, CreateApiCacheOutputError>) -> Void)
    /// Creates a unique key that you can distribute to clients who are executing your
    ///          API.
    func createApiKey(input: CreateApiKeyInput, completion: @escaping (ClientRuntime.SdkResult<CreateApiKeyOutputResponse, CreateApiKeyOutputError>) -> Void)
    /// Creates a DataSource object.
    func createDataSource(input: CreateDataSourceInput, completion: @escaping (ClientRuntime.SdkResult<CreateDataSourceOutputResponse, CreateDataSourceOutputError>) -> Void)
    /// Creates a Function object.
    ///          A function is a reusable entity. Multiple functions can be used to compose the resolver
    ///          logic.
    func createFunction(input: CreateFunctionInput, completion: @escaping (ClientRuntime.SdkResult<CreateFunctionOutputResponse, CreateFunctionOutputError>) -> Void)
    /// Creates a GraphqlApi object.
    func createGraphqlApi(input: CreateGraphqlApiInput, completion: @escaping (ClientRuntime.SdkResult<CreateGraphqlApiOutputResponse, CreateGraphqlApiOutputError>) -> Void)
    /// Creates a Resolver object.
    ///          A resolver converts incoming requests into a format that a data source can understand
    ///          and converts the data source's responses into GraphQL.
    func createResolver(input: CreateResolverInput, completion: @escaping (ClientRuntime.SdkResult<CreateResolverOutputResponse, CreateResolverOutputError>) -> Void)
    /// Creates a Type object.
    func createType(input: CreateTypeInput, completion: @escaping (ClientRuntime.SdkResult<CreateTypeOutputResponse, CreateTypeOutputError>) -> Void)
    /// Deletes an ApiCache object.
    func deleteApiCache(input: DeleteApiCacheInput, completion: @escaping (ClientRuntime.SdkResult<DeleteApiCacheOutputResponse, DeleteApiCacheOutputError>) -> Void)
    /// Deletes an API key.
    func deleteApiKey(input: DeleteApiKeyInput, completion: @escaping (ClientRuntime.SdkResult<DeleteApiKeyOutputResponse, DeleteApiKeyOutputError>) -> Void)
    /// Deletes a DataSource object.
    func deleteDataSource(input: DeleteDataSourceInput, completion: @escaping (ClientRuntime.SdkResult<DeleteDataSourceOutputResponse, DeleteDataSourceOutputError>) -> Void)
    /// Deletes a Function.
    func deleteFunction(input: DeleteFunctionInput, completion: @escaping (ClientRuntime.SdkResult<DeleteFunctionOutputResponse, DeleteFunctionOutputError>) -> Void)
    /// Deletes a GraphqlApi object.
    func deleteGraphqlApi(input: DeleteGraphqlApiInput, completion: @escaping (ClientRuntime.SdkResult<DeleteGraphqlApiOutputResponse, DeleteGraphqlApiOutputError>) -> Void)
    /// Deletes a Resolver object.
    func deleteResolver(input: DeleteResolverInput, completion: @escaping (ClientRuntime.SdkResult<DeleteResolverOutputResponse, DeleteResolverOutputError>) -> Void)
    /// Deletes a Type object.
    func deleteType(input: DeleteTypeInput, completion: @escaping (ClientRuntime.SdkResult<DeleteTypeOutputResponse, DeleteTypeOutputError>) -> Void)
    /// Flushes an ApiCache object.
    func flushApiCache(input: FlushApiCacheInput, completion: @escaping (ClientRuntime.SdkResult<FlushApiCacheOutputResponse, FlushApiCacheOutputError>) -> Void)
    /// Retrieves an ApiCache object.
    func getApiCache(input: GetApiCacheInput, completion: @escaping (ClientRuntime.SdkResult<GetApiCacheOutputResponse, GetApiCacheOutputError>) -> Void)
    /// Retrieves a DataSource object.
    func getDataSource(input: GetDataSourceInput, completion: @escaping (ClientRuntime.SdkResult<GetDataSourceOutputResponse, GetDataSourceOutputError>) -> Void)
    /// Get a Function.
    func getFunction(input: GetFunctionInput, completion: @escaping (ClientRuntime.SdkResult<GetFunctionOutputResponse, GetFunctionOutputError>) -> Void)
    /// Retrieves a GraphqlApi object.
    func getGraphqlApi(input: GetGraphqlApiInput, completion: @escaping (ClientRuntime.SdkResult<GetGraphqlApiOutputResponse, GetGraphqlApiOutputError>) -> Void)
    /// Retrieves the introspection schema for a GraphQL API.
    func getIntrospectionSchema(input: GetIntrospectionSchemaInput, completion: @escaping (ClientRuntime.SdkResult<GetIntrospectionSchemaOutputResponse, GetIntrospectionSchemaOutputError>) -> Void)
    /// Retrieves a Resolver object.
    func getResolver(input: GetResolverInput, completion: @escaping (ClientRuntime.SdkResult<GetResolverOutputResponse, GetResolverOutputError>) -> Void)
    /// Retrieves the current status of a schema creation operation.
    func getSchemaCreationStatus(input: GetSchemaCreationStatusInput, completion: @escaping (ClientRuntime.SdkResult<GetSchemaCreationStatusOutputResponse, GetSchemaCreationStatusOutputError>) -> Void)
    /// Retrieves a Type object.
    func getType(input: GetTypeInput, completion: @escaping (ClientRuntime.SdkResult<GetTypeOutputResponse, GetTypeOutputError>) -> Void)
    /// Lists the API keys for a given API.
    ///
    ///             API keys are deleted automatically 60 days after they expire. However, they may still
    ///             be included in the response until they have actually been deleted. You can safely call
    ///                DeleteApiKey to manually delete a key before it's automatically
    ///             deleted.
    ///
    func listApiKeys(input: ListApiKeysInput, completion: @escaping (ClientRuntime.SdkResult<ListApiKeysOutputResponse, ListApiKeysOutputError>) -> Void)
    /// Lists the data sources for a given API.
    func listDataSources(input: ListDataSourcesInput, completion: @escaping (ClientRuntime.SdkResult<ListDataSourcesOutputResponse, ListDataSourcesOutputError>) -> Void)
    /// List multiple functions.
    func listFunctions(input: ListFunctionsInput, completion: @escaping (ClientRuntime.SdkResult<ListFunctionsOutputResponse, ListFunctionsOutputError>) -> Void)
    /// Lists your GraphQL APIs.
    func listGraphqlApis(input: ListGraphqlApisInput, completion: @escaping (ClientRuntime.SdkResult<ListGraphqlApisOutputResponse, ListGraphqlApisOutputError>) -> Void)
    /// Lists the resolvers for a given API and type.
    func listResolvers(input: ListResolversInput, completion: @escaping (ClientRuntime.SdkResult<ListResolversOutputResponse, ListResolversOutputError>) -> Void)
    /// List the resolvers that are associated with a specific function.
    func listResolversByFunction(input: ListResolversByFunctionInput, completion: @escaping (ClientRuntime.SdkResult<ListResolversByFunctionOutputResponse, ListResolversByFunctionOutputError>) -> Void)
    /// Lists the tags for a resource.
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (ClientRuntime.SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// Lists the types for a given API.
    func listTypes(input: ListTypesInput, completion: @escaping (ClientRuntime.SdkResult<ListTypesOutputResponse, ListTypesOutputError>) -> Void)
    /// Adds a new schema to your GraphQL API.
    ///          This operation is asynchronous. Use  to
    ///          determine when it has completed.
    func startSchemaCreation(input: StartSchemaCreationInput, completion: @escaping (ClientRuntime.SdkResult<StartSchemaCreationOutputResponse, StartSchemaCreationOutputError>) -> Void)
    /// Tags a resource with user-supplied tags.
    func tagResource(input: TagResourceInput, completion: @escaping (ClientRuntime.SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// Untags a resource.
    func untagResource(input: UntagResourceInput, completion: @escaping (ClientRuntime.SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// Updates the cache for the GraphQL API.
    func updateApiCache(input: UpdateApiCacheInput, completion: @escaping (ClientRuntime.SdkResult<UpdateApiCacheOutputResponse, UpdateApiCacheOutputError>) -> Void)
    /// Updates an API key. The key can be updated while it is not deleted.
    func updateApiKey(input: UpdateApiKeyInput, completion: @escaping (ClientRuntime.SdkResult<UpdateApiKeyOutputResponse, UpdateApiKeyOutputError>) -> Void)
    /// Updates a DataSource object.
    func updateDataSource(input: UpdateDataSourceInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDataSourceOutputResponse, UpdateDataSourceOutputError>) -> Void)
    /// Updates a Function object.
    func updateFunction(input: UpdateFunctionInput, completion: @escaping (ClientRuntime.SdkResult<UpdateFunctionOutputResponse, UpdateFunctionOutputError>) -> Void)
    /// Updates a GraphqlApi object.
    func updateGraphqlApi(input: UpdateGraphqlApiInput, completion: @escaping (ClientRuntime.SdkResult<UpdateGraphqlApiOutputResponse, UpdateGraphqlApiOutputError>) -> Void)
    /// Updates a Resolver object.
    func updateResolver(input: UpdateResolverInput, completion: @escaping (ClientRuntime.SdkResult<UpdateResolverOutputResponse, UpdateResolverOutputError>) -> Void)
    /// Updates a Type object.
    func updateType(input: UpdateTypeInput, completion: @escaping (ClientRuntime.SdkResult<UpdateTypeOutputResponse, UpdateTypeOutputError>) -> Void)
}

public enum AppSyncClientTypes {}
