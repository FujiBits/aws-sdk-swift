// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ApiGatewayV2Client {
    /// <p>Creates an Api resource.</p>
    func createApi(input: CreateApiInput) async throws -> CreateApiOutputResponse
    {
        typealias createApiContinuation = CheckedContinuation<CreateApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createApiContinuation) in
            createApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an API mapping.</p>
    func createApiMapping(input: CreateApiMappingInput) async throws -> CreateApiMappingOutputResponse
    {
        typealias createApiMappingContinuation = CheckedContinuation<CreateApiMappingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createApiMappingContinuation) in
            createApiMapping(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an Authorizer for an API.</p>
    func createAuthorizer(input: CreateAuthorizerInput) async throws -> CreateAuthorizerOutputResponse
    {
        typealias createAuthorizerContinuation = CheckedContinuation<CreateAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAuthorizerContinuation) in
            createAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a Deployment for an API.</p>
    func createDeployment(input: CreateDeploymentInput) async throws -> CreateDeploymentOutputResponse
    {
        typealias createDeploymentContinuation = CheckedContinuation<CreateDeploymentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDeploymentContinuation) in
            createDeployment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a domain name.</p>
    func createDomainName(input: CreateDomainNameInput) async throws -> CreateDomainNameOutputResponse
    {
        typealias createDomainNameContinuation = CheckedContinuation<CreateDomainNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDomainNameContinuation) in
            createDomainName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an Integration.</p>
    func createIntegration(input: CreateIntegrationInput) async throws -> CreateIntegrationOutputResponse
    {
        typealias createIntegrationContinuation = CheckedContinuation<CreateIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createIntegrationContinuation) in
            createIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an IntegrationResponses.</p>
    func createIntegrationResponse(input: CreateIntegrationResponseInput) async throws -> CreateIntegrationResponseOutputResponse
    {
        typealias createIntegrationResponseContinuation = CheckedContinuation<CreateIntegrationResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createIntegrationResponseContinuation) in
            createIntegrationResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a Model for an API.</p>
    func createModel(input: CreateModelInput) async throws -> CreateModelOutputResponse
    {
        typealias createModelContinuation = CheckedContinuation<CreateModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createModelContinuation) in
            createModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a Route for an API.</p>
    func createRoute(input: CreateRouteInput) async throws -> CreateRouteOutputResponse
    {
        typealias createRouteContinuation = CheckedContinuation<CreateRouteOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRouteContinuation) in
            createRoute(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a RouteResponse for a Route.</p>
    func createRouteResponse(input: CreateRouteResponseInput) async throws -> CreateRouteResponseOutputResponse
    {
        typealias createRouteResponseContinuation = CheckedContinuation<CreateRouteResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRouteResponseContinuation) in
            createRouteResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a Stage for an API.</p>
    func createStage(input: CreateStageInput) async throws -> CreateStageOutputResponse
    {
        typealias createStageContinuation = CheckedContinuation<CreateStageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createStageContinuation) in
            createStage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a VPC link.</p>
    func createVpcLink(input: CreateVpcLinkInput) async throws -> CreateVpcLinkOutputResponse
    {
        typealias createVpcLinkContinuation = CheckedContinuation<CreateVpcLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createVpcLinkContinuation) in
            createVpcLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the AccessLogSettings for a Stage. To disable access logging for a Stage, delete its AccessLogSettings.</p>
    func deleteAccessLogSettings(input: DeleteAccessLogSettingsInput) async throws -> DeleteAccessLogSettingsOutputResponse
    {
        typealias deleteAccessLogSettingsContinuation = CheckedContinuation<DeleteAccessLogSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAccessLogSettingsContinuation) in
            deleteAccessLogSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an Api resource.</p>
    func deleteApi(input: DeleteApiInput) async throws -> DeleteApiOutputResponse
    {
        typealias deleteApiContinuation = CheckedContinuation<DeleteApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteApiContinuation) in
            deleteApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an API mapping.</p>
    func deleteApiMapping(input: DeleteApiMappingInput) async throws -> DeleteApiMappingOutputResponse
    {
        typealias deleteApiMappingContinuation = CheckedContinuation<DeleteApiMappingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteApiMappingContinuation) in
            deleteApiMapping(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an Authorizer.</p>
    func deleteAuthorizer(input: DeleteAuthorizerInput) async throws -> DeleteAuthorizerOutputResponse
    {
        typealias deleteAuthorizerContinuation = CheckedContinuation<DeleteAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAuthorizerContinuation) in
            deleteAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a CORS configuration.</p>
    func deleteCorsConfiguration(input: DeleteCorsConfigurationInput) async throws -> DeleteCorsConfigurationOutputResponse
    {
        typealias deleteCorsConfigurationContinuation = CheckedContinuation<DeleteCorsConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCorsConfigurationContinuation) in
            deleteCorsConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a Deployment.</p>
    func deleteDeployment(input: DeleteDeploymentInput) async throws -> DeleteDeploymentOutputResponse
    {
        typealias deleteDeploymentContinuation = CheckedContinuation<DeleteDeploymentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDeploymentContinuation) in
            deleteDeployment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a domain name.</p>
    func deleteDomainName(input: DeleteDomainNameInput) async throws -> DeleteDomainNameOutputResponse
    {
        typealias deleteDomainNameContinuation = CheckedContinuation<DeleteDomainNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDomainNameContinuation) in
            deleteDomainName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an Integration.</p>
    func deleteIntegration(input: DeleteIntegrationInput) async throws -> DeleteIntegrationOutputResponse
    {
        typealias deleteIntegrationContinuation = CheckedContinuation<DeleteIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIntegrationContinuation) in
            deleteIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an IntegrationResponses.</p>
    func deleteIntegrationResponse(input: DeleteIntegrationResponseInput) async throws -> DeleteIntegrationResponseOutputResponse
    {
        typealias deleteIntegrationResponseContinuation = CheckedContinuation<DeleteIntegrationResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIntegrationResponseContinuation) in
            deleteIntegrationResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a Model.</p>
    func deleteModel(input: DeleteModelInput) async throws -> DeleteModelOutputResponse
    {
        typealias deleteModelContinuation = CheckedContinuation<DeleteModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteModelContinuation) in
            deleteModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a Route.</p>
    func deleteRoute(input: DeleteRouteInput) async throws -> DeleteRouteOutputResponse
    {
        typealias deleteRouteContinuation = CheckedContinuation<DeleteRouteOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRouteContinuation) in
            deleteRoute(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a route request parameter.</p>
    func deleteRouteRequestParameter(input: DeleteRouteRequestParameterInput) async throws -> DeleteRouteRequestParameterOutputResponse
    {
        typealias deleteRouteRequestParameterContinuation = CheckedContinuation<DeleteRouteRequestParameterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRouteRequestParameterContinuation) in
            deleteRouteRequestParameter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a RouteResponse.</p>
    func deleteRouteResponse(input: DeleteRouteResponseInput) async throws -> DeleteRouteResponseOutputResponse
    {
        typealias deleteRouteResponseContinuation = CheckedContinuation<DeleteRouteResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRouteResponseContinuation) in
            deleteRouteResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the RouteSettings for a stage.</p>
    func deleteRouteSettings(input: DeleteRouteSettingsInput) async throws -> DeleteRouteSettingsOutputResponse
    {
        typealias deleteRouteSettingsContinuation = CheckedContinuation<DeleteRouteSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRouteSettingsContinuation) in
            deleteRouteSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a Stage.</p>
    func deleteStage(input: DeleteStageInput) async throws -> DeleteStageOutputResponse
    {
        typealias deleteStageContinuation = CheckedContinuation<DeleteStageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteStageContinuation) in
            deleteStage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a VPC link.</p>
    func deleteVpcLink(input: DeleteVpcLinkInput) async throws -> DeleteVpcLinkOutputResponse
    {
        typealias deleteVpcLinkContinuation = CheckedContinuation<DeleteVpcLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVpcLinkContinuation) in
            deleteVpcLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func exportApi(input: ExportApiInput) async throws -> ExportApiOutputResponse
    {
        typealias exportApiContinuation = CheckedContinuation<ExportApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportApiContinuation) in
            exportApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets an Api resource.</p>
    func getApi(input: GetApiInput) async throws -> GetApiOutputResponse
    {
        typealias getApiContinuation = CheckedContinuation<GetApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApiContinuation) in
            getApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets an API mapping.</p>
    func getApiMapping(input: GetApiMappingInput) async throws -> GetApiMappingOutputResponse
    {
        typealias getApiMappingContinuation = CheckedContinuation<GetApiMappingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApiMappingContinuation) in
            getApiMapping(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets API mappings.</p>
    func getApiMappings(input: GetApiMappingsInput) async throws -> GetApiMappingsOutputResponse
    {
        typealias getApiMappingsContinuation = CheckedContinuation<GetApiMappingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApiMappingsContinuation) in
            getApiMappings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a collection of Api resources.</p>
    func getApis(input: GetApisInput) async throws -> GetApisOutputResponse
    {
        typealias getApisContinuation = CheckedContinuation<GetApisOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApisContinuation) in
            getApis(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets an Authorizer.</p>
    func getAuthorizer(input: GetAuthorizerInput) async throws -> GetAuthorizerOutputResponse
    {
        typealias getAuthorizerContinuation = CheckedContinuation<GetAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAuthorizerContinuation) in
            getAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the Authorizers for an API.</p>
    func getAuthorizers(input: GetAuthorizersInput) async throws -> GetAuthorizersOutputResponse
    {
        typealias getAuthorizersContinuation = CheckedContinuation<GetAuthorizersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAuthorizersContinuation) in
            getAuthorizers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a Deployment.</p>
    func getDeployment(input: GetDeploymentInput) async throws -> GetDeploymentOutputResponse
    {
        typealias getDeploymentContinuation = CheckedContinuation<GetDeploymentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeploymentContinuation) in
            getDeployment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the Deployments for an API.</p>
    func getDeployments(input: GetDeploymentsInput) async throws -> GetDeploymentsOutputResponse
    {
        typealias getDeploymentsContinuation = CheckedContinuation<GetDeploymentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeploymentsContinuation) in
            getDeployments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a domain name.</p>
    func getDomainName(input: GetDomainNameInput) async throws -> GetDomainNameOutputResponse
    {
        typealias getDomainNameContinuation = CheckedContinuation<GetDomainNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDomainNameContinuation) in
            getDomainName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the domain names for an AWS account.</p>
    func getDomainNames(input: GetDomainNamesInput) async throws -> GetDomainNamesOutputResponse
    {
        typealias getDomainNamesContinuation = CheckedContinuation<GetDomainNamesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDomainNamesContinuation) in
            getDomainNames(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets an Integration.</p>
    func getIntegration(input: GetIntegrationInput) async throws -> GetIntegrationOutputResponse
    {
        typealias getIntegrationContinuation = CheckedContinuation<GetIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIntegrationContinuation) in
            getIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets an IntegrationResponses.</p>
    func getIntegrationResponse(input: GetIntegrationResponseInput) async throws -> GetIntegrationResponseOutputResponse
    {
        typealias getIntegrationResponseContinuation = CheckedContinuation<GetIntegrationResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIntegrationResponseContinuation) in
            getIntegrationResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the IntegrationResponses for an Integration.</p>
    func getIntegrationResponses(input: GetIntegrationResponsesInput) async throws -> GetIntegrationResponsesOutputResponse
    {
        typealias getIntegrationResponsesContinuation = CheckedContinuation<GetIntegrationResponsesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIntegrationResponsesContinuation) in
            getIntegrationResponses(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the Integrations for an API.</p>
    func getIntegrations(input: GetIntegrationsInput) async throws -> GetIntegrationsOutputResponse
    {
        typealias getIntegrationsContinuation = CheckedContinuation<GetIntegrationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIntegrationsContinuation) in
            getIntegrations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a Model.</p>
    func getModel(input: GetModelInput) async throws -> GetModelOutputResponse
    {
        typealias getModelContinuation = CheckedContinuation<GetModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getModelContinuation) in
            getModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a model template.</p>
    func getModelTemplate(input: GetModelTemplateInput) async throws -> GetModelTemplateOutputResponse
    {
        typealias getModelTemplateContinuation = CheckedContinuation<GetModelTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getModelTemplateContinuation) in
            getModelTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the Models for an API.</p>
    func getModels(input: GetModelsInput) async throws -> GetModelsOutputResponse
    {
        typealias getModelsContinuation = CheckedContinuation<GetModelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getModelsContinuation) in
            getModels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a Route.</p>
    func getRoute(input: GetRouteInput) async throws -> GetRouteOutputResponse
    {
        typealias getRouteContinuation = CheckedContinuation<GetRouteOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRouteContinuation) in
            getRoute(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a RouteResponse.</p>
    func getRouteResponse(input: GetRouteResponseInput) async throws -> GetRouteResponseOutputResponse
    {
        typealias getRouteResponseContinuation = CheckedContinuation<GetRouteResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRouteResponseContinuation) in
            getRouteResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the RouteResponses for a Route.</p>
    func getRouteResponses(input: GetRouteResponsesInput) async throws -> GetRouteResponsesOutputResponse
    {
        typealias getRouteResponsesContinuation = CheckedContinuation<GetRouteResponsesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRouteResponsesContinuation) in
            getRouteResponses(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the Routes for an API.</p>
    func getRoutes(input: GetRoutesInput) async throws -> GetRoutesOutputResponse
    {
        typealias getRoutesContinuation = CheckedContinuation<GetRoutesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRoutesContinuation) in
            getRoutes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a Stage.</p>
    func getStage(input: GetStageInput) async throws -> GetStageOutputResponse
    {
        typealias getStageContinuation = CheckedContinuation<GetStageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getStageContinuation) in
            getStage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the Stages for an API.</p>
    func getStages(input: GetStagesInput) async throws -> GetStagesOutputResponse
    {
        typealias getStagesContinuation = CheckedContinuation<GetStagesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getStagesContinuation) in
            getStages(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a collection of Tag resources.</p>
    func getTags(input: GetTagsInput) async throws -> GetTagsOutputResponse
    {
        typealias getTagsContinuation = CheckedContinuation<GetTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTagsContinuation) in
            getTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a VPC link.</p>
    func getVpcLink(input: GetVpcLinkInput) async throws -> GetVpcLinkOutputResponse
    {
        typealias getVpcLinkContinuation = CheckedContinuation<GetVpcLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVpcLinkContinuation) in
            getVpcLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a collection of VPC links.</p>
    func getVpcLinks(input: GetVpcLinksInput) async throws -> GetVpcLinksOutputResponse
    {
        typealias getVpcLinksContinuation = CheckedContinuation<GetVpcLinksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVpcLinksContinuation) in
            getVpcLinks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Imports an API.</p>
    func importApi(input: ImportApiInput) async throws -> ImportApiOutputResponse
    {
        typealias importApiContinuation = CheckedContinuation<ImportApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importApiContinuation) in
            importApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Puts an Api resource.</p>
    func reimportApi(input: ReimportApiInput) async throws -> ReimportApiOutputResponse
    {
        typealias reimportApiContinuation = CheckedContinuation<ReimportApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: reimportApiContinuation) in
            reimportApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Resets all authorizer cache entries on a stage. Supported only for HTTP APIs.</p>
    func resetAuthorizersCache(input: ResetAuthorizersCacheInput) async throws -> ResetAuthorizersCacheOutputResponse
    {
        typealias resetAuthorizersCacheContinuation = CheckedContinuation<ResetAuthorizersCacheOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resetAuthorizersCacheContinuation) in
            resetAuthorizersCache(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new Tag resource to represent a tag.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a Tag.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an Api resource.</p>
    func updateApi(input: UpdateApiInput) async throws -> UpdateApiOutputResponse
    {
        typealias updateApiContinuation = CheckedContinuation<UpdateApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApiContinuation) in
            updateApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>The API mapping.</p>
    func updateApiMapping(input: UpdateApiMappingInput) async throws -> UpdateApiMappingOutputResponse
    {
        typealias updateApiMappingContinuation = CheckedContinuation<UpdateApiMappingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApiMappingContinuation) in
            updateApiMapping(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an Authorizer.</p>
    func updateAuthorizer(input: UpdateAuthorizerInput) async throws -> UpdateAuthorizerOutputResponse
    {
        typealias updateAuthorizerContinuation = CheckedContinuation<UpdateAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAuthorizerContinuation) in
            updateAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a Deployment.</p>
    func updateDeployment(input: UpdateDeploymentInput) async throws -> UpdateDeploymentOutputResponse
    {
        typealias updateDeploymentContinuation = CheckedContinuation<UpdateDeploymentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDeploymentContinuation) in
            updateDeployment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a domain name.</p>
    func updateDomainName(input: UpdateDomainNameInput) async throws -> UpdateDomainNameOutputResponse
    {
        typealias updateDomainNameContinuation = CheckedContinuation<UpdateDomainNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDomainNameContinuation) in
            updateDomainName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an Integration.</p>
    func updateIntegration(input: UpdateIntegrationInput) async throws -> UpdateIntegrationOutputResponse
    {
        typealias updateIntegrationContinuation = CheckedContinuation<UpdateIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateIntegrationContinuation) in
            updateIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an IntegrationResponses.</p>
    func updateIntegrationResponse(input: UpdateIntegrationResponseInput) async throws -> UpdateIntegrationResponseOutputResponse
    {
        typealias updateIntegrationResponseContinuation = CheckedContinuation<UpdateIntegrationResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateIntegrationResponseContinuation) in
            updateIntegrationResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a Model.</p>
    func updateModel(input: UpdateModelInput) async throws -> UpdateModelOutputResponse
    {
        typealias updateModelContinuation = CheckedContinuation<UpdateModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateModelContinuation) in
            updateModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a Route.</p>
    func updateRoute(input: UpdateRouteInput) async throws -> UpdateRouteOutputResponse
    {
        typealias updateRouteContinuation = CheckedContinuation<UpdateRouteOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRouteContinuation) in
            updateRoute(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a RouteResponse.</p>
    func updateRouteResponse(input: UpdateRouteResponseInput) async throws -> UpdateRouteResponseOutputResponse
    {
        typealias updateRouteResponseContinuation = CheckedContinuation<UpdateRouteResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRouteResponseContinuation) in
            updateRouteResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a Stage.</p>
    func updateStage(input: UpdateStageInput) async throws -> UpdateStageOutputResponse
    {
        typealias updateStageContinuation = CheckedContinuation<UpdateStageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateStageContinuation) in
            updateStage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a VPC link.</p>
    func updateVpcLink(input: UpdateVpcLinkInput) async throws -> UpdateVpcLinkOutputResponse
    {
        typealias updateVpcLinkContinuation = CheckedContinuation<UpdateVpcLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateVpcLinkContinuation) in
            updateVpcLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
