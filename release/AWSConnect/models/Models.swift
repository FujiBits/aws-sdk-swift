// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension ConnectClientTypes.AgentStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentStatusARN = "AgentStatusARN"
        case agentStatusId = "AgentStatusId"
        case description = "Description"
        case displayOrder = "DisplayOrder"
        case name = "Name"
        case state = "State"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentStatusARN = agentStatusARN {
            try encodeContainer.encode(agentStatusARN, forKey: .agentStatusARN)
        }
        if let agentStatusId = agentStatusId {
            try encodeContainer.encode(agentStatusId, forKey: .agentStatusId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayOrder = displayOrder {
            try encodeContainer.encode(displayOrder, forKey: .displayOrder)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentStatusARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentStatusARN)
        agentStatusARN = agentStatusARNDecoded
        let agentStatusIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentStatusId)
        agentStatusId = agentStatusIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.AgentStatusType.self, forKey: .type)
        type = typeDecoded
        let displayOrderDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .displayOrder)
        displayOrder = displayOrderDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.AgentStatusState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ConnectClientTypes.AgentStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AgentStatus(agentStatusARN: \(Swift.String(describing: agentStatusARN)), agentStatusId: \(Swift.String(describing: agentStatusId)), description: \(Swift.String(describing: description)), displayOrder: \(Swift.String(describing: displayOrder)), name: \(Swift.String(describing: name)), state: \(Swift.String(describing: state)), tags: \(Swift.String(describing: tags)), type: \(Swift.String(describing: type)))"}
}

extension ConnectClientTypes {
    /// Contains information about an agent status.
    public struct AgentStatus: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the agent status.
        public var agentStatusARN: Swift.String?
        /// The identifier of the agent status.
        public var agentStatusId: Swift.String?
        /// The description of the agent status.
        public var description: Swift.String?
        /// The display order of the agent status.
        public var displayOrder: Swift.Int?
        /// The name of the agent status.
        public var name: Swift.String?
        /// The state of the agent status.
        public var state: ConnectClientTypes.AgentStatusState?
        /// One or more tags.
        public var tags: [Swift.String:Swift.String]?
        /// The type of agent status.
        public var type: ConnectClientTypes.AgentStatusType?

        public init (
            agentStatusARN: Swift.String? = nil,
            agentStatusId: Swift.String? = nil,
            description: Swift.String? = nil,
            displayOrder: Swift.Int? = nil,
            name: Swift.String? = nil,
            state: ConnectClientTypes.AgentStatusState? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            type: ConnectClientTypes.AgentStatusType? = nil
        )
        {
            self.agentStatusARN = agentStatusARN
            self.agentStatusId = agentStatusId
            self.description = description
            self.displayOrder = displayOrder
            self.name = name
            self.state = state
            self.tags = tags
            self.type = type
        }
    }

}

extension ConnectClientTypes {
    public enum AgentStatusState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AgentStatusState] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AgentStatusState(rawValue: rawValue) ?? AgentStatusState.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.AgentStatusSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.AgentStatusType.self, forKey: .type)
        type = typeDecoded
    }
}

extension ConnectClientTypes.AgentStatusSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AgentStatusSummary(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), type: \(Swift.String(describing: type)))"}
}

extension ConnectClientTypes {
    /// Summary information for an agent status.
    public struct AgentStatusSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) for the agent status.
        public var arn: Swift.String?
        /// The identifier for an agent status.
        public var id: Swift.String?
        /// The name of the agent status.
        public var name: Swift.String?
        /// The type of the agent status.
        public var type: ConnectClientTypes.AgentStatusType?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            type: ConnectClientTypes.AgentStatusType? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
            self.type = type
        }
    }

}

extension ConnectClientTypes {
    public enum AgentStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case custom
        case offline
        case routable
        case sdkUnknown(Swift.String)

        public static var allCases: [AgentStatusType] {
            return [
                .custom,
                .offline,
                .routable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .custom: return "CUSTOM"
            case .offline: return "OFFLINE"
            case .routable: return "ROUTABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AgentStatusType(rawValue: rawValue) ?? AgentStatusType.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.AnswerMachineDetectionConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awaitAnswerMachinePrompt = "AwaitAnswerMachinePrompt"
        case enableAnswerMachineDetection = "EnableAnswerMachineDetection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if awaitAnswerMachinePrompt != false {
            try encodeContainer.encode(awaitAnswerMachinePrompt, forKey: .awaitAnswerMachinePrompt)
        }
        if enableAnswerMachineDetection != false {
            try encodeContainer.encode(enableAnswerMachineDetection, forKey: .enableAnswerMachineDetection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enableAnswerMachineDetectionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableAnswerMachineDetection)
        enableAnswerMachineDetection = enableAnswerMachineDetectionDecoded
        let awaitAnswerMachinePromptDecoded = try containerValues.decode(Swift.Bool.self, forKey: .awaitAnswerMachinePrompt)
        awaitAnswerMachinePrompt = awaitAnswerMachinePromptDecoded
    }
}

extension ConnectClientTypes.AnswerMachineDetectionConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AnswerMachineDetectionConfig(awaitAnswerMachinePrompt: \(Swift.String(describing: awaitAnswerMachinePrompt)), enableAnswerMachineDetection: \(Swift.String(describing: enableAnswerMachineDetection)))"}
}

extension ConnectClientTypes {
    /// Configuration of the answering machine detection.
    public struct AnswerMachineDetectionConfig: Swift.Equatable {
        /// Wait for the answering machine prompt.
        public var awaitAnswerMachinePrompt: Swift.Bool
        /// The flag to indicate if answer machine detection analysis needs to be performed for a voice
        ///    call. If set to true, TrafficType must be set as CAMPAIGN.
        ///
        public var enableAnswerMachineDetection: Swift.Bool

        public init (
            awaitAnswerMachinePrompt: Swift.Bool = false,
            enableAnswerMachineDetection: Swift.Bool = false
        )
        {
            self.awaitAnswerMachinePrompt = awaitAnswerMachinePrompt
            self.enableAnswerMachineDetection = enableAnswerMachineDetection
        }
    }

}

public struct AssociateApprovedOriginInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateApprovedOriginInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateApprovedOriginInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateApprovedOriginOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateApprovedOriginInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateApprovedOriginOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateApprovedOriginOutputError>
}

extension AssociateApprovedOriginInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateApprovedOriginInput(instanceId: \(Swift.String(describing: instanceId)), origin: \(Swift.String(describing: origin)))"}
}

extension AssociateApprovedOriginInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case origin = "Origin"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let origin = origin {
            try encodeContainer.encode(origin, forKey: .origin)
        }
    }
}

public struct AssociateApprovedOriginInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateApprovedOriginInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateApprovedOriginInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateApprovedOriginOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateApprovedOriginInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateApprovedOriginOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateApprovedOriginOutputError>
}

public struct AssociateApprovedOriginInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateApprovedOriginInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateApprovedOriginInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateApprovedOriginOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateApprovedOriginInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateApprovedOriginOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateApprovedOriginOutputError>
}

public struct AssociateApprovedOriginInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateApprovedOriginInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: AssociateApprovedOriginInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateApprovedOriginOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/approved-origin"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = AssociateApprovedOriginInput
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateApprovedOriginOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateApprovedOriginOutputError>
}

public struct AssociateApprovedOriginInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The domain to add to your allow list.
    /// This member is required.
    public var origin: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        origin: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.origin = origin
    }
}

struct AssociateApprovedOriginInputBody: Swift.Equatable {
    public let origin: Swift.String?
}

extension AssociateApprovedOriginInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case origin = "Origin"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let originDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .origin)
        origin = originDecoded
    }
}

extension AssociateApprovedOriginOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateApprovedOriginOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceConflictException" : self = .resourceConflictException(try ResourceConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateApprovedOriginOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceConflictException(ResourceConflictException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateApprovedOriginOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateApprovedOriginOutputResponse()"}
}

extension AssociateApprovedOriginOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AssociateApprovedOriginOutputResponse: Swift.Equatable {

    public init() {}
}

struct AssociateApprovedOriginOutputResponseBody: Swift.Equatable {
}

extension AssociateApprovedOriginOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct AssociateBotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateBotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateBotOutputError>
}

extension AssociateBotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateBotInput(instanceId: \(Swift.String(describing: instanceId)), lexBot: \(Swift.String(describing: lexBot)), lexV2Bot: \(Swift.String(describing: lexV2Bot)))"}
}

extension AssociateBotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lexBot = "LexBot"
        case lexV2Bot = "LexV2Bot"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lexBot = lexBot {
            try encodeContainer.encode(lexBot, forKey: .lexBot)
        }
        if let lexV2Bot = lexV2Bot {
            try encodeContainer.encode(lexV2Bot, forKey: .lexV2Bot)
        }
    }
}

public struct AssociateBotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateBotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateBotOutputError>
}

public struct AssociateBotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateBotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateBotOutputError>
}

public struct AssociateBotInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateBotInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: AssociateBotInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/bot"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = AssociateBotInput
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateBotOutputError>
}

public struct AssociateBotInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// Configuration information of an Amazon Lex bot.
    public var lexBot: ConnectClientTypes.LexBot?
    /// The Amazon Lex V2 bot to associate with the instance.
    public var lexV2Bot: ConnectClientTypes.LexV2Bot?

    public init (
        instanceId: Swift.String? = nil,
        lexBot: ConnectClientTypes.LexBot? = nil,
        lexV2Bot: ConnectClientTypes.LexV2Bot? = nil
    )
    {
        self.instanceId = instanceId
        self.lexBot = lexBot
        self.lexV2Bot = lexV2Bot
    }
}

struct AssociateBotInputBody: Swift.Equatable {
    public let lexBot: ConnectClientTypes.LexBot?
    public let lexV2Bot: ConnectClientTypes.LexV2Bot?
}

extension AssociateBotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lexBot = "LexBot"
        case lexV2Bot = "LexV2Bot"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lexBotDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.LexBot.self, forKey: .lexBot)
        lexBot = lexBotDecoded
        let lexV2BotDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.LexV2Bot.self, forKey: .lexV2Bot)
        lexV2Bot = lexV2BotDecoded
    }
}

extension AssociateBotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateBotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceConflictException" : self = .resourceConflictException(try ResourceConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateBotOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceConflictException(ResourceConflictException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateBotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateBotOutputResponse()"}
}

extension AssociateBotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AssociateBotOutputResponse: Swift.Equatable {

    public init() {}
}

struct AssociateBotOutputResponseBody: Swift.Equatable {
}

extension AssociateBotOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct AssociateInstanceStorageConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateInstanceStorageConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateInstanceStorageConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateInstanceStorageConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateInstanceStorageConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateInstanceStorageConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateInstanceStorageConfigOutputError>
}

extension AssociateInstanceStorageConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateInstanceStorageConfigInput(instanceId: \(Swift.String(describing: instanceId)), resourceType: \(Swift.String(describing: resourceType)), storageConfig: \(Swift.String(describing: storageConfig)))"}
}

extension AssociateInstanceStorageConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceType = "ResourceType"
        case storageConfig = "StorageConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let storageConfig = storageConfig {
            try encodeContainer.encode(storageConfig, forKey: .storageConfig)
        }
    }
}

public struct AssociateInstanceStorageConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateInstanceStorageConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateInstanceStorageConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateInstanceStorageConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateInstanceStorageConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateInstanceStorageConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateInstanceStorageConfigOutputError>
}

public struct AssociateInstanceStorageConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateInstanceStorageConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateInstanceStorageConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateInstanceStorageConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateInstanceStorageConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateInstanceStorageConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateInstanceStorageConfigOutputError>
}

public struct AssociateInstanceStorageConfigInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateInstanceStorageConfigInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: AssociateInstanceStorageConfigInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateInstanceStorageConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/storage-config"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = AssociateInstanceStorageConfigInput
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateInstanceStorageConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateInstanceStorageConfigOutputError>
}

public struct AssociateInstanceStorageConfigInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// A valid resource type.
    /// This member is required.
    public var resourceType: ConnectClientTypes.InstanceStorageResourceType?
    /// A valid storage type.
    /// This member is required.
    public var storageConfig: ConnectClientTypes.InstanceStorageConfig?

    public init (
        instanceId: Swift.String? = nil,
        resourceType: ConnectClientTypes.InstanceStorageResourceType? = nil,
        storageConfig: ConnectClientTypes.InstanceStorageConfig? = nil
    )
    {
        self.instanceId = instanceId
        self.resourceType = resourceType
        self.storageConfig = storageConfig
    }
}

struct AssociateInstanceStorageConfigInputBody: Swift.Equatable {
    public let resourceType: ConnectClientTypes.InstanceStorageResourceType?
    public let storageConfig: ConnectClientTypes.InstanceStorageConfig?
}

extension AssociateInstanceStorageConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceType = "ResourceType"
        case storageConfig = "StorageConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.InstanceStorageResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let storageConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.InstanceStorageConfig.self, forKey: .storageConfig)
        storageConfig = storageConfigDecoded
    }
}

extension AssociateInstanceStorageConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateInstanceStorageConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceConflictException" : self = .resourceConflictException(try ResourceConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateInstanceStorageConfigOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceConflictException(ResourceConflictException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateInstanceStorageConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateInstanceStorageConfigOutputResponse(associationId: \(Swift.String(describing: associationId)))"}
}

extension AssociateInstanceStorageConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AssociateInstanceStorageConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.associationId = output.associationId
        } else {
            self.associationId = nil
        }
    }
}

public struct AssociateInstanceStorageConfigOutputResponse: Swift.Equatable {
    /// The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
    public var associationId: Swift.String?

    public init (
        associationId: Swift.String? = nil
    )
    {
        self.associationId = associationId
    }
}

struct AssociateInstanceStorageConfigOutputResponseBody: Swift.Equatable {
    public let associationId: Swift.String?
}

extension AssociateInstanceStorageConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
    }
}

public struct AssociateLambdaFunctionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateLambdaFunctionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateLambdaFunctionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateLambdaFunctionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateLambdaFunctionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateLambdaFunctionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateLambdaFunctionOutputError>
}

extension AssociateLambdaFunctionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateLambdaFunctionInput(functionArn: \(Swift.String(describing: functionArn)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension AssociateLambdaFunctionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case functionArn = "FunctionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let functionArn = functionArn {
            try encodeContainer.encode(functionArn, forKey: .functionArn)
        }
    }
}

public struct AssociateLambdaFunctionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateLambdaFunctionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateLambdaFunctionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateLambdaFunctionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateLambdaFunctionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateLambdaFunctionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateLambdaFunctionOutputError>
}

public struct AssociateLambdaFunctionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateLambdaFunctionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateLambdaFunctionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateLambdaFunctionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateLambdaFunctionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateLambdaFunctionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateLambdaFunctionOutputError>
}

public struct AssociateLambdaFunctionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateLambdaFunctionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: AssociateLambdaFunctionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateLambdaFunctionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/lambda-function"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = AssociateLambdaFunctionInput
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateLambdaFunctionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateLambdaFunctionOutputError>
}

public struct AssociateLambdaFunctionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the Lambda function being associated. Maximum number of characters allowed is
    ///    140.
    /// This member is required.
    public var functionArn: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        functionArn: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.functionArn = functionArn
        self.instanceId = instanceId
    }
}

struct AssociateLambdaFunctionInputBody: Swift.Equatable {
    public let functionArn: Swift.String?
}

extension AssociateLambdaFunctionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case functionArn = "FunctionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionArn)
        functionArn = functionArnDecoded
    }
}

extension AssociateLambdaFunctionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateLambdaFunctionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceConflictException" : self = .resourceConflictException(try ResourceConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateLambdaFunctionOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceConflictException(ResourceConflictException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateLambdaFunctionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateLambdaFunctionOutputResponse()"}
}

extension AssociateLambdaFunctionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AssociateLambdaFunctionOutputResponse: Swift.Equatable {

    public init() {}
}

struct AssociateLambdaFunctionOutputResponseBody: Swift.Equatable {
}

extension AssociateLambdaFunctionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct AssociateLexBotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateLexBotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateLexBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateLexBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateLexBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateLexBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateLexBotOutputError>
}

extension AssociateLexBotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateLexBotInput(instanceId: \(Swift.String(describing: instanceId)), lexBot: \(Swift.String(describing: lexBot)))"}
}

extension AssociateLexBotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lexBot = "LexBot"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lexBot = lexBot {
            try encodeContainer.encode(lexBot, forKey: .lexBot)
        }
    }
}

public struct AssociateLexBotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateLexBotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateLexBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateLexBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateLexBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateLexBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateLexBotOutputError>
}

public struct AssociateLexBotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateLexBotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateLexBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateLexBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateLexBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateLexBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateLexBotOutputError>
}

public struct AssociateLexBotInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateLexBotInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: AssociateLexBotInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateLexBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/lex-bot"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = AssociateLexBotInput
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateLexBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateLexBotOutputError>
}

public struct AssociateLexBotInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The Amazon Lex bot to associate with the instance.
    /// This member is required.
    public var lexBot: ConnectClientTypes.LexBot?

    public init (
        instanceId: Swift.String? = nil,
        lexBot: ConnectClientTypes.LexBot? = nil
    )
    {
        self.instanceId = instanceId
        self.lexBot = lexBot
    }
}

struct AssociateLexBotInputBody: Swift.Equatable {
    public let lexBot: ConnectClientTypes.LexBot?
}

extension AssociateLexBotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lexBot = "LexBot"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lexBotDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.LexBot.self, forKey: .lexBot)
        lexBot = lexBotDecoded
    }
}

extension AssociateLexBotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateLexBotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceConflictException" : self = .resourceConflictException(try ResourceConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateLexBotOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceConflictException(ResourceConflictException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateLexBotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateLexBotOutputResponse()"}
}

extension AssociateLexBotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AssociateLexBotOutputResponse: Swift.Equatable {

    public init() {}
}

struct AssociateLexBotOutputResponseBody: Swift.Equatable {
}

extension AssociateLexBotOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct AssociateQueueQuickConnectsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateQueueQuickConnectsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateQueueQuickConnectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateQueueQuickConnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateQueueQuickConnectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateQueueQuickConnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateQueueQuickConnectsOutputError>
}

extension AssociateQueueQuickConnectsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateQueueQuickConnectsInput(instanceId: \(Swift.String(describing: instanceId)), queueId: \(Swift.String(describing: queueId)), quickConnectIds: \(Swift.String(describing: quickConnectIds)))"}
}

extension AssociateQueueQuickConnectsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case quickConnectIds = "QuickConnectIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let quickConnectIds = quickConnectIds {
            var quickConnectIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .quickConnectIds)
            for quickconnectslist0 in quickConnectIds {
                try quickConnectIdsContainer.encode(quickconnectslist0)
            }
        }
    }
}

public struct AssociateQueueQuickConnectsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateQueueQuickConnectsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateQueueQuickConnectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateQueueQuickConnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateQueueQuickConnectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateQueueQuickConnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateQueueQuickConnectsOutputError>
}

public struct AssociateQueueQuickConnectsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateQueueQuickConnectsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateQueueQuickConnectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateQueueQuickConnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateQueueQuickConnectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateQueueQuickConnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateQueueQuickConnectsOutputError>
}

public struct AssociateQueueQuickConnectsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateQueueQuickConnectsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: AssociateQueueQuickConnectsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateQueueQuickConnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let queueId = input.queueId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("queueId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/queues/\(instanceId.urlPercentEncoding())/\(queueId.urlPercentEncoding())/associate-quick-connects"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = AssociateQueueQuickConnectsInput
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateQueueQuickConnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateQueueQuickConnectsOutputError>
}

public struct AssociateQueueQuickConnectsInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier for the queue.
    /// This member is required.
    public var queueId: Swift.String?
    /// The quick connects to associate with this queue.
    /// This member is required.
    public var quickConnectIds: [Swift.String]?

    public init (
        instanceId: Swift.String? = nil,
        queueId: Swift.String? = nil,
        quickConnectIds: [Swift.String]? = nil
    )
    {
        self.instanceId = instanceId
        self.queueId = queueId
        self.quickConnectIds = quickConnectIds
    }
}

struct AssociateQueueQuickConnectsInputBody: Swift.Equatable {
    public let quickConnectIds: [Swift.String]?
}

extension AssociateQueueQuickConnectsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case quickConnectIds = "QuickConnectIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let quickConnectIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .quickConnectIds)
        var quickConnectIdsDecoded0:[Swift.String]? = nil
        if let quickConnectIdsContainer = quickConnectIdsContainer {
            quickConnectIdsDecoded0 = [Swift.String]()
            for string0 in quickConnectIdsContainer {
                if let string0 = string0 {
                    quickConnectIdsDecoded0?.append(string0)
                }
            }
        }
        quickConnectIds = quickConnectIdsDecoded0
    }
}

extension AssociateQueueQuickConnectsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateQueueQuickConnectsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateQueueQuickConnectsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateQueueQuickConnectsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateQueueQuickConnectsOutputResponse()"}
}

extension AssociateQueueQuickConnectsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AssociateQueueQuickConnectsOutputResponse: Swift.Equatable {

    public init() {}
}

struct AssociateQueueQuickConnectsOutputResponseBody: Swift.Equatable {
}

extension AssociateQueueQuickConnectsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct AssociateRoutingProfileQueuesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateRoutingProfileQueuesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateRoutingProfileQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateRoutingProfileQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateRoutingProfileQueuesOutputError>
}

extension AssociateRoutingProfileQueuesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateRoutingProfileQueuesInput(instanceId: \(Swift.String(describing: instanceId)), queueConfigs: \(Swift.String(describing: queueConfigs)), routingProfileId: \(Swift.String(describing: routingProfileId)))"}
}

extension AssociateRoutingProfileQueuesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueConfigs = "QueueConfigs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queueConfigs = queueConfigs {
            var queueConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queueConfigs)
            for routingprofilequeueconfiglist0 in queueConfigs {
                try queueConfigsContainer.encode(routingprofilequeueconfiglist0)
            }
        }
    }
}

public struct AssociateRoutingProfileQueuesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateRoutingProfileQueuesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateRoutingProfileQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateRoutingProfileQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateRoutingProfileQueuesOutputError>
}

public struct AssociateRoutingProfileQueuesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateRoutingProfileQueuesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateRoutingProfileQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateRoutingProfileQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateRoutingProfileQueuesOutputError>
}

public struct AssociateRoutingProfileQueuesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateRoutingProfileQueuesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: AssociateRoutingProfileQueuesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let routingProfileId = input.routingProfileId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("routingProfileId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/routing-profiles/\(instanceId.urlPercentEncoding())/\(routingProfileId.urlPercentEncoding())/associate-queues"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = AssociateRoutingProfileQueuesInput
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateRoutingProfileQueuesOutputError>
}

public struct AssociateRoutingProfileQueuesInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The queues to associate with this routing profile.
    /// This member is required.
    public var queueConfigs: [ConnectClientTypes.RoutingProfileQueueConfig]?
    /// The identifier of the routing profile.
    /// This member is required.
    public var routingProfileId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        queueConfigs: [ConnectClientTypes.RoutingProfileQueueConfig]? = nil,
        routingProfileId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.queueConfigs = queueConfigs
        self.routingProfileId = routingProfileId
    }
}

struct AssociateRoutingProfileQueuesInputBody: Swift.Equatable {
    public let queueConfigs: [ConnectClientTypes.RoutingProfileQueueConfig]?
}

extension AssociateRoutingProfileQueuesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueConfigs = "QueueConfigs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueConfigsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.RoutingProfileQueueConfig?].self, forKey: .queueConfigs)
        var queueConfigsDecoded0:[ConnectClientTypes.RoutingProfileQueueConfig]? = nil
        if let queueConfigsContainer = queueConfigsContainer {
            queueConfigsDecoded0 = [ConnectClientTypes.RoutingProfileQueueConfig]()
            for structure0 in queueConfigsContainer {
                if let structure0 = structure0 {
                    queueConfigsDecoded0?.append(structure0)
                }
            }
        }
        queueConfigs = queueConfigsDecoded0
    }
}

extension AssociateRoutingProfileQueuesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateRoutingProfileQueuesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateRoutingProfileQueuesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateRoutingProfileQueuesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateRoutingProfileQueuesOutputResponse()"}
}

extension AssociateRoutingProfileQueuesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AssociateRoutingProfileQueuesOutputResponse: Swift.Equatable {

    public init() {}
}

struct AssociateRoutingProfileQueuesOutputResponseBody: Swift.Equatable {
}

extension AssociateRoutingProfileQueuesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct AssociateSecurityKeyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateSecurityKeyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateSecurityKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateSecurityKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateSecurityKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateSecurityKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateSecurityKeyOutputError>
}

extension AssociateSecurityKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateSecurityKeyInput(instanceId: \(Swift.String(describing: instanceId)), key: \(Swift.String(describing: key)))"}
}

extension AssociateSecurityKeyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
    }
}

public struct AssociateSecurityKeyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateSecurityKeyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateSecurityKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateSecurityKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateSecurityKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateSecurityKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateSecurityKeyOutputError>
}

public struct AssociateSecurityKeyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateSecurityKeyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateSecurityKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateSecurityKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateSecurityKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateSecurityKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateSecurityKeyOutputError>
}

public struct AssociateSecurityKeyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateSecurityKeyInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: AssociateSecurityKeyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateSecurityKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/security-key"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = AssociateSecurityKeyInput
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateSecurityKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateSecurityKeyOutputError>
}

public struct AssociateSecurityKeyInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// A valid security key in PEM format.
    /// This member is required.
    public var key: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        key: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.key = key
    }
}

struct AssociateSecurityKeyInputBody: Swift.Equatable {
    public let key: Swift.String?
}

extension AssociateSecurityKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
    }
}

extension AssociateSecurityKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateSecurityKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceConflictException" : self = .resourceConflictException(try ResourceConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateSecurityKeyOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceConflictException(ResourceConflictException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateSecurityKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateSecurityKeyOutputResponse(associationId: \(Swift.String(describing: associationId)))"}
}

extension AssociateSecurityKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AssociateSecurityKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.associationId = output.associationId
        } else {
            self.associationId = nil
        }
    }
}

public struct AssociateSecurityKeyOutputResponse: Swift.Equatable {
    /// The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
    public var associationId: Swift.String?

    public init (
        associationId: Swift.String? = nil
    )
    {
        self.associationId = associationId
    }
}

struct AssociateSecurityKeyOutputResponseBody: Swift.Equatable {
    public let associationId: Swift.String?
}

extension AssociateSecurityKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
    }
}

extension ConnectClientTypes.Attribute: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeType = "AttributeType"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeType = attributeType {
            try encodeContainer.encode(attributeType.rawValue, forKey: .attributeType)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.InstanceAttributeType.self, forKey: .attributeType)
        attributeType = attributeTypeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension ConnectClientTypes.Attribute: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Attribute(attributeType: \(Swift.String(describing: attributeType)), value: \(Swift.String(describing: value)))"}
}

extension ConnectClientTypes {
    /// A toggle for an individual feature at the instance level.
    public struct Attribute: Swift.Equatable {
        /// The type of attribute.
        public var attributeType: ConnectClientTypes.InstanceAttributeType?
        /// The value of the attribute.
        public var value: Swift.String?

        public init (
            attributeType: ConnectClientTypes.InstanceAttributeType? = nil,
            value: Swift.String? = nil
        )
        {
            self.attributeType = attributeType
            self.value = value
        }
    }

}

extension ConnectClientTypes {
    public enum Channel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case chat
        case task
        case voice
        case sdkUnknown(Swift.String)

        public static var allCases: [Channel] {
            return [
                .chat,
                .task,
                .voice,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .chat: return "CHAT"
            case .task: return "TASK"
            case .voice: return "VOICE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Channel(rawValue: rawValue) ?? Channel.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.ChatMessage: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case contentType = "ContentType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let contentType = contentType {
            try encodeContainer.encode(contentType, forKey: .contentType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
    }
}

extension ConnectClientTypes.ChatMessage: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChatMessage(content: \(Swift.String(describing: content)), contentType: \(Swift.String(describing: contentType)))"}
}

extension ConnectClientTypes {
    /// A chat message.
    public struct ChatMessage: Swift.Equatable {
        /// The content of the chat message.
        /// This member is required.
        public var content: Swift.String?
        /// The type of the content. Supported types are text and plain.
        /// This member is required.
        public var contentType: Swift.String?

        public init (
            content: Swift.String? = nil,
            contentType: Swift.String? = nil
        )
        {
            self.content = content
            self.contentType = contentType
        }
    }

}

extension ConnectClientTypes {
    public enum Comparison: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case lt
        case sdkUnknown(Swift.String)

        public static var allCases: [Comparison] {
            return [
                .lt,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .lt: return "LT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Comparison(rawValue: rawValue) ?? Comparison.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.ContactFlow: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case content = "Content"
        case description = "Description"
        case id = "Id"
        case name = "Name"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.ContactFlowType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ConnectClientTypes.ContactFlow: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContactFlow(arn: \(Swift.String(describing: arn)), content: \(Swift.String(describing: content)), description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), tags: \(Swift.String(describing: tags)), type: \(Swift.String(describing: type)))"}
}

extension ConnectClientTypes {
    /// Contains information about a contact flow.
    public struct ContactFlow: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the contact flow.
        public var arn: Swift.String?
        /// The content of the contact flow.
        public var content: Swift.String?
        /// The description of the contact flow.
        public var description: Swift.String?
        /// The identifier of the contact flow.
        public var id: Swift.String?
        /// The name of the contact flow.
        public var name: Swift.String?
        /// One or more tags.
        public var tags: [Swift.String:Swift.String]?
        /// The type of the contact flow. For descriptions of the available types, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/create-contact-flow.html#contact-flow-types">Choose a Contact Flow Type in the Amazon Connect Administrator
        ///    Guide.
        public var type: ConnectClientTypes.ContactFlowType?

        public init (
            arn: Swift.String? = nil,
            content: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            type: ConnectClientTypes.ContactFlowType? = nil
        )
        {
            self.arn = arn
            self.content = content
            self.description = description
            self.id = id
            self.name = name
            self.tags = tags
            self.type = type
        }
    }

}

extension ContactFlowNotPublishedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContactFlowNotPublishedException(message: \(Swift.String(describing: message)))"}
}

extension ContactFlowNotPublishedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ContactFlowNotPublishedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The contact flow has not been published.
public struct ContactFlowNotPublishedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ContactFlowNotPublishedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ContactFlowNotPublishedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConnectClientTypes.ContactFlowSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case contactFlowType = "ContactFlowType"
        case id = "Id"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let contactFlowType = contactFlowType {
            try encodeContainer.encode(contactFlowType.rawValue, forKey: .contactFlowType)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let contactFlowTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.ContactFlowType.self, forKey: .contactFlowType)
        contactFlowType = contactFlowTypeDecoded
    }
}

extension ConnectClientTypes.ContactFlowSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContactFlowSummary(arn: \(Swift.String(describing: arn)), contactFlowType: \(Swift.String(describing: contactFlowType)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)))"}
}

extension ConnectClientTypes {
    /// Contains summary information about a contact flow.
    ///          You can also create and update contact flows using the <a href="https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html">Amazon Connect
    ///    Flow language.
    public struct ContactFlowSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the contact flow.
        public var arn: Swift.String?
        /// The type of contact flow.
        public var contactFlowType: ConnectClientTypes.ContactFlowType?
        /// The identifier of the contact flow.
        public var id: Swift.String?
        /// The name of the contact flow.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            contactFlowType: ConnectClientTypes.ContactFlowType? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.contactFlowType = contactFlowType
            self.id = id
            self.name = name
        }
    }

}

extension ConnectClientTypes {
    public enum ContactFlowType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case agentHold
        case agentTransfer
        case agentWhisper
        case contactFlow
        case customerHold
        case customerQueue
        case customerWhisper
        case outboundWhisper
        case queueTransfer
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactFlowType] {
            return [
                .agentHold,
                .agentTransfer,
                .agentWhisper,
                .contactFlow,
                .customerHold,
                .customerQueue,
                .customerWhisper,
                .outboundWhisper,
                .queueTransfer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .agentHold: return "AGENT_HOLD"
            case .agentTransfer: return "AGENT_TRANSFER"
            case .agentWhisper: return "AGENT_WHISPER"
            case .contactFlow: return "CONTACT_FLOW"
            case .customerHold: return "CUSTOMER_HOLD"
            case .customerQueue: return "CUSTOMER_QUEUE"
            case .customerWhisper: return "CUSTOMER_WHISPER"
            case .outboundWhisper: return "OUTBOUND_WHISPER"
            case .queueTransfer: return "QUEUE_TRANSFER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContactFlowType(rawValue: rawValue) ?? ContactFlowType.sdkUnknown(rawValue)
        }
    }
}

extension ContactNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContactNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ContactNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ContactNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The contact with the specified ID is not active or does not exist.
public struct ContactNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ContactNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ContactNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct CreateAgentStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAgentStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAgentStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAgentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAgentStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAgentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAgentStatusOutputError>
}

extension CreateAgentStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAgentStatusInput(description: \(Swift.String(describing: description)), displayOrder: \(Swift.String(describing: displayOrder)), instanceId: \(Swift.String(describing: instanceId)), name: \(Swift.String(describing: name)), state: \(Swift.String(describing: state)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateAgentStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case displayOrder = "DisplayOrder"
        case name = "Name"
        case state = "State"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayOrder = displayOrder {
            try encodeContainer.encode(displayOrder, forKey: .displayOrder)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateAgentStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAgentStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAgentStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAgentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAgentStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAgentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAgentStatusOutputError>
}

public struct CreateAgentStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAgentStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAgentStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAgentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAgentStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAgentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAgentStatusOutputError>
}

public struct CreateAgentStatusInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAgentStatusInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateAgentStatusInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAgentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/agent-status/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateAgentStatusInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAgentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAgentStatusOutputError>
}

public struct CreateAgentStatusInput: Swift.Equatable {
    /// The description of the status.
    public var description: Swift.String?
    /// The display order of the status.
    public var displayOrder: Swift.Int?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The name of the status.
    /// This member is required.
    public var name: Swift.String?
    /// The state of the status.
    /// This member is required.
    public var state: ConnectClientTypes.AgentStatusState?
    /// One or more tags.
    public var tags: [Swift.String:Swift.String]?

    public init (
        description: Swift.String? = nil,
        displayOrder: Swift.Int? = nil,
        instanceId: Swift.String? = nil,
        name: Swift.String? = nil,
        state: ConnectClientTypes.AgentStatusState? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.description = description
        self.displayOrder = displayOrder
        self.instanceId = instanceId
        self.name = name
        self.state = state
        self.tags = tags
    }
}

struct CreateAgentStatusInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let state: ConnectClientTypes.AgentStatusState?
    public let displayOrder: Swift.Int?
    public let tags: [Swift.String:Swift.String]?
}

extension CreateAgentStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case displayOrder = "DisplayOrder"
        case name = "Name"
        case state = "State"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.AgentStatusState.self, forKey: .state)
        state = stateDecoded
        let displayOrderDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .displayOrder)
        displayOrder = displayOrderDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateAgentStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAgentStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAgentStatusOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAgentStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAgentStatusOutputResponse(agentStatusARN: \(Swift.String(describing: agentStatusARN)), agentStatusId: \(Swift.String(describing: agentStatusId)))"}
}

extension CreateAgentStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateAgentStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentStatusARN = output.agentStatusARN
            self.agentStatusId = output.agentStatusId
        } else {
            self.agentStatusARN = nil
            self.agentStatusId = nil
        }
    }
}

public struct CreateAgentStatusOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the agent status.
    public var agentStatusARN: Swift.String?
    /// The identifier of the agent status.
    public var agentStatusId: Swift.String?

    public init (
        agentStatusARN: Swift.String? = nil,
        agentStatusId: Swift.String? = nil
    )
    {
        self.agentStatusARN = agentStatusARN
        self.agentStatusId = agentStatusId
    }
}

struct CreateAgentStatusOutputResponseBody: Swift.Equatable {
    public let agentStatusARN: Swift.String?
    public let agentStatusId: Swift.String?
}

extension CreateAgentStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentStatusARN = "AgentStatusARN"
        case agentStatusId = "AgentStatusId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentStatusARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentStatusARN)
        agentStatusARN = agentStatusARNDecoded
        let agentStatusIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentStatusId)
        agentStatusId = agentStatusIdDecoded
    }
}

public struct CreateContactFlowInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContactFlowInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContactFlowInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContactFlowOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContactFlowInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContactFlowOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContactFlowOutputError>
}

extension CreateContactFlowInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContactFlowInput(content: \(Swift.String(describing: content)), description: \(Swift.String(describing: description)), instanceId: \(Swift.String(describing: instanceId)), name: \(Swift.String(describing: name)), tags: \(Swift.String(describing: tags)), type: \(Swift.String(describing: type)))"}
}

extension CreateContactFlowInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case description = "Description"
        case name = "Name"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct CreateContactFlowInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContactFlowInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContactFlowInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContactFlowOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContactFlowInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContactFlowOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContactFlowOutputError>
}

public struct CreateContactFlowInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContactFlowInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContactFlowInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContactFlowOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContactFlowInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContactFlowOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContactFlowOutputError>
}

public struct CreateContactFlowInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContactFlowInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateContactFlowInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContactFlowOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/contact-flows/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateContactFlowInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContactFlowOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContactFlowOutputError>
}

public struct CreateContactFlowInput: Swift.Equatable {
    /// The content of the contact flow.
    /// This member is required.
    public var content: Swift.String?
    /// The description of the contact flow.
    public var description: Swift.String?
    /// The identifier of the Amazon Connect instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The name of the contact flow.
    /// This member is required.
    public var name: Swift.String?
    /// One or more tags.
    public var tags: [Swift.String:Swift.String]?
    /// The type of the contact flow. For descriptions of the available types, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/create-contact-flow.html#contact-flow-types">Choose a Contact Flow Type in the Amazon Connect Administrator
    ///    Guide.
    /// This member is required.
    public var type: ConnectClientTypes.ContactFlowType?

    public init (
        content: Swift.String? = nil,
        description: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        type: ConnectClientTypes.ContactFlowType? = nil
    )
    {
        self.content = content
        self.description = description
        self.instanceId = instanceId
        self.name = name
        self.tags = tags
        self.type = type
    }
}

struct CreateContactFlowInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let type: ConnectClientTypes.ContactFlowType?
    public let description: Swift.String?
    public let content: Swift.String?
    public let tags: [Swift.String:Swift.String]?
}

extension CreateContactFlowInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case description = "Description"
        case name = "Name"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.ContactFlowType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateContactFlowOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContactFlowOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidContactFlowException" : self = .invalidContactFlowException(try InvalidContactFlowException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateContactFlowOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidContactFlowException(InvalidContactFlowException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContactFlowOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContactFlowOutputResponse(contactFlowArn: \(Swift.String(describing: contactFlowArn)), contactFlowId: \(Swift.String(describing: contactFlowId)))"}
}

extension CreateContactFlowOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateContactFlowOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contactFlowArn = output.contactFlowArn
            self.contactFlowId = output.contactFlowId
        } else {
            self.contactFlowArn = nil
            self.contactFlowId = nil
        }
    }
}

public struct CreateContactFlowOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the contact flow.
    public var contactFlowArn: Swift.String?
    /// The identifier of the contact flow.
    public var contactFlowId: Swift.String?

    public init (
        contactFlowArn: Swift.String? = nil,
        contactFlowId: Swift.String? = nil
    )
    {
        self.contactFlowArn = contactFlowArn
        self.contactFlowId = contactFlowId
    }
}

struct CreateContactFlowOutputResponseBody: Swift.Equatable {
    public let contactFlowId: Swift.String?
    public let contactFlowArn: Swift.String?
}

extension CreateContactFlowOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactFlowArn = "ContactFlowArn"
        case contactFlowId = "ContactFlowId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactFlowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactFlowId)
        contactFlowId = contactFlowIdDecoded
        let contactFlowArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactFlowArn)
        contactFlowArn = contactFlowArnDecoded
    }
}

public struct CreateHoursOfOperationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateHoursOfOperationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateHoursOfOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateHoursOfOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateHoursOfOperationOutputError>
}

extension CreateHoursOfOperationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateHoursOfOperationInput(config: \(Swift.String(describing: config)), description: \(Swift.String(describing: description)), instanceId: \(Swift.String(describing: instanceId)), name: \(Swift.String(describing: name)), tags: \(Swift.String(describing: tags)), timeZone: \(Swift.String(describing: timeZone)))"}
}

extension CreateHoursOfOperationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case config = "Config"
        case description = "Description"
        case name = "Name"
        case tags = "Tags"
        case timeZone = "TimeZone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let config = config {
            var configContainer = encodeContainer.nestedUnkeyedContainer(forKey: .config)
            for hoursofoperationconfiglist0 in config {
                try configContainer.encode(hoursofoperationconfiglist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeZone = timeZone {
            try encodeContainer.encode(timeZone, forKey: .timeZone)
        }
    }
}

public struct CreateHoursOfOperationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateHoursOfOperationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateHoursOfOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateHoursOfOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateHoursOfOperationOutputError>
}

public struct CreateHoursOfOperationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateHoursOfOperationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateHoursOfOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateHoursOfOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateHoursOfOperationOutputError>
}

public struct CreateHoursOfOperationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateHoursOfOperationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateHoursOfOperationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/hours-of-operations/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateHoursOfOperationInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateHoursOfOperationOutputError>
}

public struct CreateHoursOfOperationInput: Swift.Equatable {
    /// Configuration information for the hours of operation: day, start time, and end time.
    /// This member is required.
    public var config: [ConnectClientTypes.HoursOfOperationConfig]?
    /// The description of the hours of operation.
    public var description: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The name of the hours of operation.
    /// This member is required.
    public var name: Swift.String?
    /// One or more tags.
    public var tags: [Swift.String:Swift.String]?
    /// The time zone of the hours of operation.
    /// This member is required.
    public var timeZone: Swift.String?

    public init (
        config: [ConnectClientTypes.HoursOfOperationConfig]? = nil,
        description: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        timeZone: Swift.String? = nil
    )
    {
        self.config = config
        self.description = description
        self.instanceId = instanceId
        self.name = name
        self.tags = tags
        self.timeZone = timeZone
    }
}

struct CreateHoursOfOperationInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let timeZone: Swift.String?
    public let config: [ConnectClientTypes.HoursOfOperationConfig]?
    public let tags: [Swift.String:Swift.String]?
}

extension CreateHoursOfOperationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case config = "Config"
        case description = "Description"
        case name = "Name"
        case tags = "Tags"
        case timeZone = "TimeZone"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
        let configContainer = try containerValues.decodeIfPresent([ConnectClientTypes.HoursOfOperationConfig?].self, forKey: .config)
        var configDecoded0:[ConnectClientTypes.HoursOfOperationConfig]? = nil
        if let configContainer = configContainer {
            configDecoded0 = [ConnectClientTypes.HoursOfOperationConfig]()
            for structure0 in configContainer {
                if let structure0 = structure0 {
                    configDecoded0?.append(structure0)
                }
            }
        }
        config = configDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateHoursOfOperationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateHoursOfOperationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateHoursOfOperationOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateHoursOfOperationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateHoursOfOperationOutputResponse(hoursOfOperationArn: \(Swift.String(describing: hoursOfOperationArn)), hoursOfOperationId: \(Swift.String(describing: hoursOfOperationId)))"}
}

extension CreateHoursOfOperationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateHoursOfOperationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hoursOfOperationArn = output.hoursOfOperationArn
            self.hoursOfOperationId = output.hoursOfOperationId
        } else {
            self.hoursOfOperationArn = nil
            self.hoursOfOperationId = nil
        }
    }
}

public struct CreateHoursOfOperationOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the hours of operation.
    public var hoursOfOperationArn: Swift.String?
    /// The identifier for the hours of operation.
    public var hoursOfOperationId: Swift.String?

    public init (
        hoursOfOperationArn: Swift.String? = nil,
        hoursOfOperationId: Swift.String? = nil
    )
    {
        self.hoursOfOperationArn = hoursOfOperationArn
        self.hoursOfOperationId = hoursOfOperationId
    }
}

struct CreateHoursOfOperationOutputResponseBody: Swift.Equatable {
    public let hoursOfOperationId: Swift.String?
    public let hoursOfOperationArn: Swift.String?
}

extension CreateHoursOfOperationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hoursOfOperationArn = "HoursOfOperationArn"
        case hoursOfOperationId = "HoursOfOperationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hoursOfOperationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hoursOfOperationId)
        hoursOfOperationId = hoursOfOperationIdDecoded
        let hoursOfOperationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hoursOfOperationArn)
        hoursOfOperationArn = hoursOfOperationArnDecoded
    }
}

public struct CreateInstanceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInstanceOutputError>
}

extension CreateInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInstanceInput(clientToken: \(Swift.String(describing: clientToken)), directoryId: \(Swift.String(describing: directoryId)), identityManagementType: \(Swift.String(describing: identityManagementType)), inboundCallsEnabled: \(Swift.String(describing: inboundCallsEnabled)), instanceAlias: \(Swift.String(describing: instanceAlias)), outboundCallsEnabled: \(Swift.String(describing: outboundCallsEnabled)))"}
}

extension CreateInstanceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case directoryId = "DirectoryId"
        case identityManagementType = "IdentityManagementType"
        case inboundCallsEnabled = "InboundCallsEnabled"
        case instanceAlias = "InstanceAlias"
        case outboundCallsEnabled = "OutboundCallsEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let identityManagementType = identityManagementType {
            try encodeContainer.encode(identityManagementType.rawValue, forKey: .identityManagementType)
        }
        if let inboundCallsEnabled = inboundCallsEnabled {
            try encodeContainer.encode(inboundCallsEnabled, forKey: .inboundCallsEnabled)
        }
        if let instanceAlias = instanceAlias {
            try encodeContainer.encode(instanceAlias, forKey: .instanceAlias)
        }
        if let outboundCallsEnabled = outboundCallsEnabled {
            try encodeContainer.encode(outboundCallsEnabled, forKey: .outboundCallsEnabled)
        }
    }
}

public struct CreateInstanceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInstanceOutputError>
}

public struct CreateInstanceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInstanceOutputError>
}

public struct CreateInstanceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInstanceInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateInstanceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/instance"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateInstanceInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInstanceOutputError>
}

public struct CreateInstanceInput: Swift.Equatable {
    /// The idempotency token.
    public var clientToken: Swift.String?
    /// The identifier for the directory.
    public var directoryId: Swift.String?
    /// The type of identity management for your Amazon Connect users.
    /// This member is required.
    public var identityManagementType: ConnectClientTypes.DirectoryType?
    /// Your contact center handles incoming contacts.
    /// This member is required.
    public var inboundCallsEnabled: Swift.Bool?
    /// The name for your instance.
    public var instanceAlias: Swift.String?
    /// Your contact center allows outbound calls.
    /// This member is required.
    public var outboundCallsEnabled: Swift.Bool?

    public init (
        clientToken: Swift.String? = nil,
        directoryId: Swift.String? = nil,
        identityManagementType: ConnectClientTypes.DirectoryType? = nil,
        inboundCallsEnabled: Swift.Bool? = nil,
        instanceAlias: Swift.String? = nil,
        outboundCallsEnabled: Swift.Bool? = nil
    )
    {
        self.clientToken = clientToken
        self.directoryId = directoryId
        self.identityManagementType = identityManagementType
        self.inboundCallsEnabled = inboundCallsEnabled
        self.instanceAlias = instanceAlias
        self.outboundCallsEnabled = outboundCallsEnabled
    }
}

struct CreateInstanceInputBody: Swift.Equatable {
    public let clientToken: Swift.String?
    public let identityManagementType: ConnectClientTypes.DirectoryType?
    public let instanceAlias: Swift.String?
    public let directoryId: Swift.String?
    public let inboundCallsEnabled: Swift.Bool?
    public let outboundCallsEnabled: Swift.Bool?
}

extension CreateInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case directoryId = "DirectoryId"
        case identityManagementType = "IdentityManagementType"
        case inboundCallsEnabled = "InboundCallsEnabled"
        case instanceAlias = "InstanceAlias"
        case outboundCallsEnabled = "OutboundCallsEnabled"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let identityManagementTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.DirectoryType.self, forKey: .identityManagementType)
        identityManagementType = identityManagementTypeDecoded
        let instanceAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceAlias)
        instanceAlias = instanceAliasDecoded
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let inboundCallsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .inboundCallsEnabled)
        inboundCallsEnabled = inboundCallsEnabledDecoded
        let outboundCallsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .outboundCallsEnabled)
        outboundCallsEnabled = outboundCallsEnabledDecoded
    }
}

extension CreateInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateInstanceOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInstanceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInstanceOutputResponse(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)))"}
}

extension CreateInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.id = output.id
        } else {
            self.arn = nil
            self.id = nil
        }
    }
}

public struct CreateInstanceOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the instance.
    public var arn: Swift.String?
    /// The identifier for the instance.
    public var id: Swift.String?

    public init (
        arn: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.arn = arn
        self.id = id
    }
}

struct CreateInstanceOutputResponseBody: Swift.Equatable {
    public let id: Swift.String?
    public let arn: Swift.String?
}

extension CreateInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

public struct CreateIntegrationAssociationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateIntegrationAssociationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateIntegrationAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateIntegrationAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateIntegrationAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateIntegrationAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateIntegrationAssociationOutputError>
}

extension CreateIntegrationAssociationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateIntegrationAssociationInput(instanceId: \(Swift.String(describing: instanceId)), integrationArn: \(Swift.String(describing: integrationArn)), integrationType: \(Swift.String(describing: integrationType)), sourceApplicationName: \(Swift.String(describing: sourceApplicationName)), sourceApplicationUrl: \(Swift.String(describing: sourceApplicationUrl)), sourceType: \(Swift.String(describing: sourceType)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateIntegrationAssociationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integrationArn = "IntegrationArn"
        case integrationType = "IntegrationType"
        case sourceApplicationName = "SourceApplicationName"
        case sourceApplicationUrl = "SourceApplicationUrl"
        case sourceType = "SourceType"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let integrationArn = integrationArn {
            try encodeContainer.encode(integrationArn, forKey: .integrationArn)
        }
        if let integrationType = integrationType {
            try encodeContainer.encode(integrationType.rawValue, forKey: .integrationType)
        }
        if let sourceApplicationName = sourceApplicationName {
            try encodeContainer.encode(sourceApplicationName, forKey: .sourceApplicationName)
        }
        if let sourceApplicationUrl = sourceApplicationUrl {
            try encodeContainer.encode(sourceApplicationUrl, forKey: .sourceApplicationUrl)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType.rawValue, forKey: .sourceType)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateIntegrationAssociationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateIntegrationAssociationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateIntegrationAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateIntegrationAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateIntegrationAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateIntegrationAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateIntegrationAssociationOutputError>
}

public struct CreateIntegrationAssociationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateIntegrationAssociationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateIntegrationAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateIntegrationAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateIntegrationAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateIntegrationAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateIntegrationAssociationOutputError>
}

public struct CreateIntegrationAssociationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateIntegrationAssociationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateIntegrationAssociationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateIntegrationAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/integration-associations"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateIntegrationAssociationInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateIntegrationAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateIntegrationAssociationOutputError>
}

public struct CreateIntegrationAssociationInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The Amazon Resource Name (ARN) of the integration.
    /// This member is required.
    public var integrationArn: Swift.String?
    /// The type of information to be ingested.
    /// This member is required.
    public var integrationType: ConnectClientTypes.IntegrationType?
    /// The name of the external application. This field is only required for the EVENT integration type.
    public var sourceApplicationName: Swift.String?
    /// The URL for the external application. This field is only required for the EVENT integration type.
    public var sourceApplicationUrl: Swift.String?
    /// The type of the data source. This field is only required for the EVENT integration type.
    public var sourceType: ConnectClientTypes.SourceType?
    /// One or more tags.
    public var tags: [Swift.String:Swift.String]?

    public init (
        instanceId: Swift.String? = nil,
        integrationArn: Swift.String? = nil,
        integrationType: ConnectClientTypes.IntegrationType? = nil,
        sourceApplicationName: Swift.String? = nil,
        sourceApplicationUrl: Swift.String? = nil,
        sourceType: ConnectClientTypes.SourceType? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.instanceId = instanceId
        self.integrationArn = integrationArn
        self.integrationType = integrationType
        self.sourceApplicationName = sourceApplicationName
        self.sourceApplicationUrl = sourceApplicationUrl
        self.sourceType = sourceType
        self.tags = tags
    }
}

struct CreateIntegrationAssociationInputBody: Swift.Equatable {
    public let integrationType: ConnectClientTypes.IntegrationType?
    public let integrationArn: Swift.String?
    public let sourceApplicationUrl: Swift.String?
    public let sourceApplicationName: Swift.String?
    public let sourceType: ConnectClientTypes.SourceType?
    public let tags: [Swift.String:Swift.String]?
}

extension CreateIntegrationAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integrationArn = "IntegrationArn"
        case integrationType = "IntegrationType"
        case sourceApplicationName = "SourceApplicationName"
        case sourceApplicationUrl = "SourceApplicationUrl"
        case sourceType = "SourceType"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integrationTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.IntegrationType.self, forKey: .integrationType)
        integrationType = integrationTypeDecoded
        let integrationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationArn)
        integrationArn = integrationArnDecoded
        let sourceApplicationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceApplicationUrl)
        sourceApplicationUrl = sourceApplicationUrlDecoded
        let sourceApplicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceApplicationName)
        sourceApplicationName = sourceApplicationNameDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateIntegrationAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateIntegrationAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateIntegrationAssociationOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateIntegrationAssociationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateIntegrationAssociationOutputResponse(integrationAssociationArn: \(Swift.String(describing: integrationAssociationArn)), integrationAssociationId: \(Swift.String(describing: integrationAssociationId)))"}
}

extension CreateIntegrationAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateIntegrationAssociationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.integrationAssociationArn = output.integrationAssociationArn
            self.integrationAssociationId = output.integrationAssociationId
        } else {
            self.integrationAssociationArn = nil
            self.integrationAssociationId = nil
        }
    }
}

public struct CreateIntegrationAssociationOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the association.
    public var integrationAssociationArn: Swift.String?
    /// The identifier for the integration association.
    public var integrationAssociationId: Swift.String?

    public init (
        integrationAssociationArn: Swift.String? = nil,
        integrationAssociationId: Swift.String? = nil
    )
    {
        self.integrationAssociationArn = integrationAssociationArn
        self.integrationAssociationId = integrationAssociationId
    }
}

struct CreateIntegrationAssociationOutputResponseBody: Swift.Equatable {
    public let integrationAssociationId: Swift.String?
    public let integrationAssociationArn: Swift.String?
}

extension CreateIntegrationAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integrationAssociationArn = "IntegrationAssociationArn"
        case integrationAssociationId = "IntegrationAssociationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integrationAssociationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationAssociationId)
        integrationAssociationId = integrationAssociationIdDecoded
        let integrationAssociationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationAssociationArn)
        integrationAssociationArn = integrationAssociationArnDecoded
    }
}

public struct CreateQueueInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateQueueOutputError>
}

extension CreateQueueInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateQueueInput(description: \(Swift.String(describing: description)), hoursOfOperationId: \(Swift.String(describing: hoursOfOperationId)), instanceId: \(Swift.String(describing: instanceId)), maxContacts: \(Swift.String(describing: maxContacts)), name: \(Swift.String(describing: name)), outboundCallerConfig: \(Swift.String(describing: outboundCallerConfig)), quickConnectIds: \(Swift.String(describing: quickConnectIds)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateQueueInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case hoursOfOperationId = "HoursOfOperationId"
        case maxContacts = "MaxContacts"
        case name = "Name"
        case outboundCallerConfig = "OutboundCallerConfig"
        case quickConnectIds = "QuickConnectIds"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let hoursOfOperationId = hoursOfOperationId {
            try encodeContainer.encode(hoursOfOperationId, forKey: .hoursOfOperationId)
        }
        if maxContacts != 0 {
            try encodeContainer.encode(maxContacts, forKey: .maxContacts)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outboundCallerConfig = outboundCallerConfig {
            try encodeContainer.encode(outboundCallerConfig, forKey: .outboundCallerConfig)
        }
        if let quickConnectIds = quickConnectIds {
            var quickConnectIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .quickConnectIds)
            for quickconnectslist0 in quickConnectIds {
                try quickConnectIdsContainer.encode(quickconnectslist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateQueueInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateQueueOutputError>
}

public struct CreateQueueInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateQueueOutputError>
}

public struct CreateQueueInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateQueueInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateQueueInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/queues/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateQueueInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateQueueOutputError>
}

public struct CreateQueueInput: Swift.Equatable {
    /// The description of the queue.
    public var description: Swift.String?
    /// The identifier for the hours of operation.
    /// This member is required.
    public var hoursOfOperationId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of contacts that can be in the queue before it is considered full.
    public var maxContacts: Swift.Int
    /// The name of the queue.
    /// This member is required.
    public var name: Swift.String?
    /// The outbound caller ID name, number, and outbound whisper flow.
    public var outboundCallerConfig: ConnectClientTypes.OutboundCallerConfig?
    /// The quick connects available to agents who are working the queue.
    public var quickConnectIds: [Swift.String]?
    /// One or more tags.
    public var tags: [Swift.String:Swift.String]?

    public init (
        description: Swift.String? = nil,
        hoursOfOperationId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        maxContacts: Swift.Int = 0,
        name: Swift.String? = nil,
        outboundCallerConfig: ConnectClientTypes.OutboundCallerConfig? = nil,
        quickConnectIds: [Swift.String]? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.description = description
        self.hoursOfOperationId = hoursOfOperationId
        self.instanceId = instanceId
        self.maxContacts = maxContacts
        self.name = name
        self.outboundCallerConfig = outboundCallerConfig
        self.quickConnectIds = quickConnectIds
        self.tags = tags
    }
}

struct CreateQueueInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let outboundCallerConfig: ConnectClientTypes.OutboundCallerConfig?
    public let hoursOfOperationId: Swift.String?
    public let maxContacts: Swift.Int
    public let quickConnectIds: [Swift.String]?
    public let tags: [Swift.String:Swift.String]?
}

extension CreateQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case hoursOfOperationId = "HoursOfOperationId"
        case maxContacts = "MaxContacts"
        case name = "Name"
        case outboundCallerConfig = "OutboundCallerConfig"
        case quickConnectIds = "QuickConnectIds"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let outboundCallerConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.OutboundCallerConfig.self, forKey: .outboundCallerConfig)
        outboundCallerConfig = outboundCallerConfigDecoded
        let hoursOfOperationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hoursOfOperationId)
        hoursOfOperationId = hoursOfOperationIdDecoded
        let maxContactsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxContacts)
        maxContacts = maxContactsDecoded
        let quickConnectIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .quickConnectIds)
        var quickConnectIdsDecoded0:[Swift.String]? = nil
        if let quickConnectIdsContainer = quickConnectIdsContainer {
            quickConnectIdsDecoded0 = [Swift.String]()
            for string0 in quickConnectIdsContainer {
                if let string0 = string0 {
                    quickConnectIdsDecoded0?.append(string0)
                }
            }
        }
        quickConnectIds = quickConnectIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateQueueOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateQueueOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateQueueOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateQueueOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateQueueOutputResponse(queueArn: \(Swift.String(describing: queueArn)), queueId: \(Swift.String(describing: queueId)))"}
}

extension CreateQueueOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateQueueOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.queueArn = output.queueArn
            self.queueId = output.queueId
        } else {
            self.queueArn = nil
            self.queueId = nil
        }
    }
}

public struct CreateQueueOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the queue.
    public var queueArn: Swift.String?
    /// The identifier for the queue.
    public var queueId: Swift.String?

    public init (
        queueArn: Swift.String? = nil,
        queueId: Swift.String? = nil
    )
    {
        self.queueArn = queueArn
        self.queueId = queueId
    }
}

struct CreateQueueOutputResponseBody: Swift.Equatable {
    public let queueArn: Swift.String?
    public let queueId: Swift.String?
}

extension CreateQueueOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueArn = "QueueArn"
        case queueId = "QueueId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueArn)
        queueArn = queueArnDecoded
        let queueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueId)
        queueId = queueIdDecoded
    }
}

public struct CreateQuickConnectInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateQuickConnectInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateQuickConnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateQuickConnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateQuickConnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateQuickConnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateQuickConnectOutputError>
}

extension CreateQuickConnectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateQuickConnectInput(description: \(Swift.String(describing: description)), instanceId: \(Swift.String(describing: instanceId)), name: \(Swift.String(describing: name)), quickConnectConfig: \(Swift.String(describing: quickConnectConfig)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateQuickConnectInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
        case quickConnectConfig = "QuickConnectConfig"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let quickConnectConfig = quickConnectConfig {
            try encodeContainer.encode(quickConnectConfig, forKey: .quickConnectConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateQuickConnectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateQuickConnectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateQuickConnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateQuickConnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateQuickConnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateQuickConnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateQuickConnectOutputError>
}

public struct CreateQuickConnectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateQuickConnectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateQuickConnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateQuickConnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateQuickConnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateQuickConnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateQuickConnectOutputError>
}

public struct CreateQuickConnectInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateQuickConnectInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateQuickConnectInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateQuickConnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/quick-connects/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateQuickConnectInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateQuickConnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateQuickConnectOutputError>
}

public struct CreateQuickConnectInput: Swift.Equatable {
    /// The description of the quick connect.
    public var description: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The name of the quick connect.
    /// This member is required.
    public var name: Swift.String?
    /// Configuration settings for the quick connect.
    /// This member is required.
    public var quickConnectConfig: ConnectClientTypes.QuickConnectConfig?
    /// One or more tags.
    public var tags: [Swift.String:Swift.String]?

    public init (
        description: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        name: Swift.String? = nil,
        quickConnectConfig: ConnectClientTypes.QuickConnectConfig? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.description = description
        self.instanceId = instanceId
        self.name = name
        self.quickConnectConfig = quickConnectConfig
        self.tags = tags
    }
}

struct CreateQuickConnectInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let quickConnectConfig: ConnectClientTypes.QuickConnectConfig?
    public let tags: [Swift.String:Swift.String]?
}

extension CreateQuickConnectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
        case quickConnectConfig = "QuickConnectConfig"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let quickConnectConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.QuickConnectConfig.self, forKey: .quickConnectConfig)
        quickConnectConfig = quickConnectConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateQuickConnectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateQuickConnectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateQuickConnectOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateQuickConnectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateQuickConnectOutputResponse(quickConnectARN: \(Swift.String(describing: quickConnectARN)), quickConnectId: \(Swift.String(describing: quickConnectId)))"}
}

extension CreateQuickConnectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateQuickConnectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.quickConnectARN = output.quickConnectARN
            self.quickConnectId = output.quickConnectId
        } else {
            self.quickConnectARN = nil
            self.quickConnectId = nil
        }
    }
}

public struct CreateQuickConnectOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the quick connect.
    public var quickConnectARN: Swift.String?
    /// The identifier for the quick connect.
    ///
    public var quickConnectId: Swift.String?

    public init (
        quickConnectARN: Swift.String? = nil,
        quickConnectId: Swift.String? = nil
    )
    {
        self.quickConnectARN = quickConnectARN
        self.quickConnectId = quickConnectId
    }
}

struct CreateQuickConnectOutputResponseBody: Swift.Equatable {
    public let quickConnectARN: Swift.String?
    public let quickConnectId: Swift.String?
}

extension CreateQuickConnectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case quickConnectARN = "QuickConnectARN"
        case quickConnectId = "QuickConnectId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let quickConnectARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quickConnectARN)
        quickConnectARN = quickConnectARNDecoded
        let quickConnectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quickConnectId)
        quickConnectId = quickConnectIdDecoded
    }
}

public struct CreateRoutingProfileInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRoutingProfileInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRoutingProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRoutingProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRoutingProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRoutingProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRoutingProfileOutputError>
}

extension CreateRoutingProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRoutingProfileInput(defaultOutboundQueueId: \(Swift.String(describing: defaultOutboundQueueId)), description: \(Swift.String(describing: description)), instanceId: \(Swift.String(describing: instanceId)), mediaConcurrencies: \(Swift.String(describing: mediaConcurrencies)), name: \(Swift.String(describing: name)), queueConfigs: \(Swift.String(describing: queueConfigs)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateRoutingProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultOutboundQueueId = "DefaultOutboundQueueId"
        case description = "Description"
        case mediaConcurrencies = "MediaConcurrencies"
        case name = "Name"
        case queueConfigs = "QueueConfigs"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultOutboundQueueId = defaultOutboundQueueId {
            try encodeContainer.encode(defaultOutboundQueueId, forKey: .defaultOutboundQueueId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let mediaConcurrencies = mediaConcurrencies {
            var mediaConcurrenciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaConcurrencies)
            for mediaconcurrencies0 in mediaConcurrencies {
                try mediaConcurrenciesContainer.encode(mediaconcurrencies0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let queueConfigs = queueConfigs {
            var queueConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queueConfigs)
            for routingprofilequeueconfiglist0 in queueConfigs {
                try queueConfigsContainer.encode(routingprofilequeueconfiglist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateRoutingProfileInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRoutingProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRoutingProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRoutingProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRoutingProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRoutingProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRoutingProfileOutputError>
}

public struct CreateRoutingProfileInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRoutingProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRoutingProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRoutingProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRoutingProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRoutingProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRoutingProfileOutputError>
}

public struct CreateRoutingProfileInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRoutingProfileInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateRoutingProfileInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRoutingProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/routing-profiles/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateRoutingProfileInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRoutingProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRoutingProfileOutputError>
}

public struct CreateRoutingProfileInput: Swift.Equatable {
    /// The default outbound queue for the routing profile.
    /// This member is required.
    public var defaultOutboundQueueId: Swift.String?
    /// Description of the routing profile. Must not be more than 250 characters.
    /// This member is required.
    public var description: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The channels that agents can handle in the Contact Control Panel (CCP) for this routing
    ///    profile.
    /// This member is required.
    public var mediaConcurrencies: [ConnectClientTypes.MediaConcurrency]?
    /// The name of the routing profile. Must not be more than 127 characters.
    /// This member is required.
    public var name: Swift.String?
    /// The inbound queues associated with the routing profile. If no queue is added, the agent can
    ///    make only outbound calls.
    public var queueConfigs: [ConnectClientTypes.RoutingProfileQueueConfig]?
    /// One or more tags.
    public var tags: [Swift.String:Swift.String]?

    public init (
        defaultOutboundQueueId: Swift.String? = nil,
        description: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        mediaConcurrencies: [ConnectClientTypes.MediaConcurrency]? = nil,
        name: Swift.String? = nil,
        queueConfigs: [ConnectClientTypes.RoutingProfileQueueConfig]? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.defaultOutboundQueueId = defaultOutboundQueueId
        self.description = description
        self.instanceId = instanceId
        self.mediaConcurrencies = mediaConcurrencies
        self.name = name
        self.queueConfigs = queueConfigs
        self.tags = tags
    }
}

struct CreateRoutingProfileInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let defaultOutboundQueueId: Swift.String?
    public let queueConfigs: [ConnectClientTypes.RoutingProfileQueueConfig]?
    public let mediaConcurrencies: [ConnectClientTypes.MediaConcurrency]?
    public let tags: [Swift.String:Swift.String]?
}

extension CreateRoutingProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultOutboundQueueId = "DefaultOutboundQueueId"
        case description = "Description"
        case mediaConcurrencies = "MediaConcurrencies"
        case name = "Name"
        case queueConfigs = "QueueConfigs"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let defaultOutboundQueueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultOutboundQueueId)
        defaultOutboundQueueId = defaultOutboundQueueIdDecoded
        let queueConfigsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.RoutingProfileQueueConfig?].self, forKey: .queueConfigs)
        var queueConfigsDecoded0:[ConnectClientTypes.RoutingProfileQueueConfig]? = nil
        if let queueConfigsContainer = queueConfigsContainer {
            queueConfigsDecoded0 = [ConnectClientTypes.RoutingProfileQueueConfig]()
            for structure0 in queueConfigsContainer {
                if let structure0 = structure0 {
                    queueConfigsDecoded0?.append(structure0)
                }
            }
        }
        queueConfigs = queueConfigsDecoded0
        let mediaConcurrenciesContainer = try containerValues.decodeIfPresent([ConnectClientTypes.MediaConcurrency?].self, forKey: .mediaConcurrencies)
        var mediaConcurrenciesDecoded0:[ConnectClientTypes.MediaConcurrency]? = nil
        if let mediaConcurrenciesContainer = mediaConcurrenciesContainer {
            mediaConcurrenciesDecoded0 = [ConnectClientTypes.MediaConcurrency]()
            for structure0 in mediaConcurrenciesContainer {
                if let structure0 = structure0 {
                    mediaConcurrenciesDecoded0?.append(structure0)
                }
            }
        }
        mediaConcurrencies = mediaConcurrenciesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateRoutingProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRoutingProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateRoutingProfileOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRoutingProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRoutingProfileOutputResponse(routingProfileArn: \(Swift.String(describing: routingProfileArn)), routingProfileId: \(Swift.String(describing: routingProfileId)))"}
}

extension CreateRoutingProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateRoutingProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.routingProfileArn = output.routingProfileArn
            self.routingProfileId = output.routingProfileId
        } else {
            self.routingProfileArn = nil
            self.routingProfileId = nil
        }
    }
}

public struct CreateRoutingProfileOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the routing profile.
    public var routingProfileArn: Swift.String?
    /// The identifier of the routing profile.
    public var routingProfileId: Swift.String?

    public init (
        routingProfileArn: Swift.String? = nil,
        routingProfileId: Swift.String? = nil
    )
    {
        self.routingProfileArn = routingProfileArn
        self.routingProfileId = routingProfileId
    }
}

struct CreateRoutingProfileOutputResponseBody: Swift.Equatable {
    public let routingProfileArn: Swift.String?
    public let routingProfileId: Swift.String?
}

extension CreateRoutingProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingProfileArn = "RoutingProfileArn"
        case routingProfileId = "RoutingProfileId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingProfileArn)
        routingProfileArn = routingProfileArnDecoded
        let routingProfileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingProfileId)
        routingProfileId = routingProfileIdDecoded
    }
}

public struct CreateUseCaseInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateUseCaseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateUseCaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateUseCaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateUseCaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateUseCaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateUseCaseOutputError>
}

extension CreateUseCaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateUseCaseInput(instanceId: \(Swift.String(describing: instanceId)), integrationAssociationId: \(Swift.String(describing: integrationAssociationId)), tags: \(Swift.String(describing: tags)), useCaseType: \(Swift.String(describing: useCaseType)))"}
}

extension CreateUseCaseInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
        case useCaseType = "UseCaseType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let useCaseType = useCaseType {
            try encodeContainer.encode(useCaseType.rawValue, forKey: .useCaseType)
        }
    }
}

public struct CreateUseCaseInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateUseCaseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateUseCaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateUseCaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateUseCaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateUseCaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateUseCaseOutputError>
}

public struct CreateUseCaseInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateUseCaseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateUseCaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateUseCaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateUseCaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateUseCaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateUseCaseOutputError>
}

public struct CreateUseCaseInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateUseCaseInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateUseCaseInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateUseCaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let integrationAssociationId = input.integrationAssociationId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("integrationAssociationId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/integration-associations/\(integrationAssociationId.urlPercentEncoding())/use-cases"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateUseCaseInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateUseCaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateUseCaseOutputError>
}

public struct CreateUseCaseInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier for the integration association.
    /// This member is required.
    public var integrationAssociationId: Swift.String?
    /// One or more tags.
    public var tags: [Swift.String:Swift.String]?
    /// The type of use case to associate to the integration association. Each integration
    ///    association can have only one of each use case type.
    /// This member is required.
    public var useCaseType: ConnectClientTypes.UseCaseType?

    public init (
        instanceId: Swift.String? = nil,
        integrationAssociationId: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        useCaseType: ConnectClientTypes.UseCaseType? = nil
    )
    {
        self.instanceId = instanceId
        self.integrationAssociationId = integrationAssociationId
        self.tags = tags
        self.useCaseType = useCaseType
    }
}

struct CreateUseCaseInputBody: Swift.Equatable {
    public let useCaseType: ConnectClientTypes.UseCaseType?
    public let tags: [Swift.String:Swift.String]?
}

extension CreateUseCaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
        case useCaseType = "UseCaseType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let useCaseTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.UseCaseType.self, forKey: .useCaseType)
        useCaseType = useCaseTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateUseCaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateUseCaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateUseCaseOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateUseCaseOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateUseCaseOutputResponse(useCaseArn: \(Swift.String(describing: useCaseArn)), useCaseId: \(Swift.String(describing: useCaseId)))"}
}

extension CreateUseCaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateUseCaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.useCaseArn = output.useCaseArn
            self.useCaseId = output.useCaseId
        } else {
            self.useCaseArn = nil
            self.useCaseId = nil
        }
    }
}

public struct CreateUseCaseOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the use case.
    public var useCaseArn: Swift.String?
    /// The identifier of the use case.
    public var useCaseId: Swift.String?

    public init (
        useCaseArn: Swift.String? = nil,
        useCaseId: Swift.String? = nil
    )
    {
        self.useCaseArn = useCaseArn
        self.useCaseId = useCaseId
    }
}

struct CreateUseCaseOutputResponseBody: Swift.Equatable {
    public let useCaseId: Swift.String?
    public let useCaseArn: Swift.String?
}

extension CreateUseCaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case useCaseArn = "UseCaseArn"
        case useCaseId = "UseCaseId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let useCaseIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .useCaseId)
        useCaseId = useCaseIdDecoded
        let useCaseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .useCaseArn)
        useCaseArn = useCaseArnDecoded
    }
}

public struct CreateUserHierarchyGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateUserHierarchyGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateUserHierarchyGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateUserHierarchyGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateUserHierarchyGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateUserHierarchyGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateUserHierarchyGroupOutputError>
}

extension CreateUserHierarchyGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateUserHierarchyGroupInput(instanceId: \(Swift.String(describing: instanceId)), name: \(Swift.String(describing: name)), parentGroupId: \(Swift.String(describing: parentGroupId)))"}
}

extension CreateUserHierarchyGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case parentGroupId = "ParentGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parentGroupId = parentGroupId {
            try encodeContainer.encode(parentGroupId, forKey: .parentGroupId)
        }
    }
}

public struct CreateUserHierarchyGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateUserHierarchyGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateUserHierarchyGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateUserHierarchyGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateUserHierarchyGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateUserHierarchyGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateUserHierarchyGroupOutputError>
}

public struct CreateUserHierarchyGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateUserHierarchyGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateUserHierarchyGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateUserHierarchyGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateUserHierarchyGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateUserHierarchyGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateUserHierarchyGroupOutputError>
}

public struct CreateUserHierarchyGroupInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateUserHierarchyGroupInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateUserHierarchyGroupInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateUserHierarchyGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/user-hierarchy-groups/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateUserHierarchyGroupInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateUserHierarchyGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateUserHierarchyGroupOutputError>
}

public struct CreateUserHierarchyGroupInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The name of the user hierarchy group. Must not be more than 100 characters.
    /// This member is required.
    public var name: Swift.String?
    /// The identifier for the parent hierarchy group. The user hierarchy is created at level one if
    ///    the parent group ID is null.
    public var parentGroupId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        name: Swift.String? = nil,
        parentGroupId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.name = name
        self.parentGroupId = parentGroupId
    }
}

struct CreateUserHierarchyGroupInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let parentGroupId: Swift.String?
}

extension CreateUserHierarchyGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case parentGroupId = "ParentGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let parentGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentGroupId)
        parentGroupId = parentGroupIdDecoded
    }
}

extension CreateUserHierarchyGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateUserHierarchyGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateUserHierarchyGroupOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateUserHierarchyGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateUserHierarchyGroupOutputResponse(hierarchyGroupArn: \(Swift.String(describing: hierarchyGroupArn)), hierarchyGroupId: \(Swift.String(describing: hierarchyGroupId)))"}
}

extension CreateUserHierarchyGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateUserHierarchyGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hierarchyGroupArn = output.hierarchyGroupArn
            self.hierarchyGroupId = output.hierarchyGroupId
        } else {
            self.hierarchyGroupArn = nil
            self.hierarchyGroupId = nil
        }
    }
}

public struct CreateUserHierarchyGroupOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the hierarchy group.
    public var hierarchyGroupArn: Swift.String?
    /// The identifier of the hierarchy group.
    public var hierarchyGroupId: Swift.String?

    public init (
        hierarchyGroupArn: Swift.String? = nil,
        hierarchyGroupId: Swift.String? = nil
    )
    {
        self.hierarchyGroupArn = hierarchyGroupArn
        self.hierarchyGroupId = hierarchyGroupId
    }
}

struct CreateUserHierarchyGroupOutputResponseBody: Swift.Equatable {
    public let hierarchyGroupId: Swift.String?
    public let hierarchyGroupArn: Swift.String?
}

extension CreateUserHierarchyGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hierarchyGroupArn = "HierarchyGroupArn"
        case hierarchyGroupId = "HierarchyGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hierarchyGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hierarchyGroupId)
        hierarchyGroupId = hierarchyGroupIdDecoded
        let hierarchyGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hierarchyGroupArn)
        hierarchyGroupArn = hierarchyGroupArnDecoded
    }
}

public struct CreateUserInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateUserInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateUserInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateUserInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateUserOutputError>
}

extension CreateUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateUserInput(directoryUserId: \(Swift.String(describing: directoryUserId)), hierarchyGroupId: \(Swift.String(describing: hierarchyGroupId)), identityInfo: \(Swift.String(describing: identityInfo)), instanceId: \(Swift.String(describing: instanceId)), password: \(Swift.String(describing: password)), phoneConfig: \(Swift.String(describing: phoneConfig)), routingProfileId: \(Swift.String(describing: routingProfileId)), securityProfileIds: \(Swift.String(describing: securityProfileIds)), tags: \(Swift.String(describing: tags)), username: \(Swift.String(describing: username)))"}
}

extension CreateUserInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryUserId = "DirectoryUserId"
        case hierarchyGroupId = "HierarchyGroupId"
        case identityInfo = "IdentityInfo"
        case password = "Password"
        case phoneConfig = "PhoneConfig"
        case routingProfileId = "RoutingProfileId"
        case securityProfileIds = "SecurityProfileIds"
        case tags = "Tags"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryUserId = directoryUserId {
            try encodeContainer.encode(directoryUserId, forKey: .directoryUserId)
        }
        if let hierarchyGroupId = hierarchyGroupId {
            try encodeContainer.encode(hierarchyGroupId, forKey: .hierarchyGroupId)
        }
        if let identityInfo = identityInfo {
            try encodeContainer.encode(identityInfo, forKey: .identityInfo)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let phoneConfig = phoneConfig {
            try encodeContainer.encode(phoneConfig, forKey: .phoneConfig)
        }
        if let routingProfileId = routingProfileId {
            try encodeContainer.encode(routingProfileId, forKey: .routingProfileId)
        }
        if let securityProfileIds = securityProfileIds {
            var securityProfileIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityProfileIds)
            for securityprofileids0 in securityProfileIds {
                try securityProfileIdsContainer.encode(securityprofileids0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

public struct CreateUserInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateUserInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateUserInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateUserInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateUserOutputError>
}

public struct CreateUserInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateUserInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateUserInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateUserInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateUserOutputError>
}

public struct CreateUserInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateUserInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateUserInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/users/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateUserInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateUserOutputError>
}

public struct CreateUserInput: Swift.Equatable {
    /// The identifier of the user account in the directory used for identity management. If Amazon Connect
    ///    cannot access the directory, you can specify this identifier to authenticate users. If you
    ///    include the identifier, we assume that Amazon Connect cannot access the directory. Otherwise, the identity
    ///    information is used to authenticate users from your directory.
    ///          This parameter is required if you are using an existing directory for identity management in
    ///    Amazon Connect when Amazon Connect cannot access your directory to authenticate users. If you are using SAML for
    ///    identity management and include this parameter, an error is returned.
    public var directoryUserId: Swift.String?
    /// The identifier of the hierarchy group for the user.
    public var hierarchyGroupId: Swift.String?
    /// The information about the identity of the user.
    public var identityInfo: ConnectClientTypes.UserIdentityInfo?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The password for the user account. A password is required if you are using Amazon Connect for
    ///    identity management. Otherwise, it is an error to include a password.
    public var password: Swift.String?
    /// The phone settings for the user.
    /// This member is required.
    public var phoneConfig: ConnectClientTypes.UserPhoneConfig?
    /// The identifier of the routing profile for the user.
    /// This member is required.
    public var routingProfileId: Swift.String?
    /// The identifier of the security profile for the user.
    /// This member is required.
    public var securityProfileIds: [Swift.String]?
    /// One or more tags.
    public var tags: [Swift.String:Swift.String]?
    /// The user name for the account. For instances not using SAML for identity management, the
    ///    user name can include up to 20 characters. If you are using SAML for identity management, the
    ///    user name can include up to 64 characters from [a-zA-Z0-9_-.\@]+.
    /// This member is required.
    public var username: Swift.String?

    public init (
        directoryUserId: Swift.String? = nil,
        hierarchyGroupId: Swift.String? = nil,
        identityInfo: ConnectClientTypes.UserIdentityInfo? = nil,
        instanceId: Swift.String? = nil,
        password: Swift.String? = nil,
        phoneConfig: ConnectClientTypes.UserPhoneConfig? = nil,
        routingProfileId: Swift.String? = nil,
        securityProfileIds: [Swift.String]? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        username: Swift.String? = nil
    )
    {
        self.directoryUserId = directoryUserId
        self.hierarchyGroupId = hierarchyGroupId
        self.identityInfo = identityInfo
        self.instanceId = instanceId
        self.password = password
        self.phoneConfig = phoneConfig
        self.routingProfileId = routingProfileId
        self.securityProfileIds = securityProfileIds
        self.tags = tags
        self.username = username
    }
}

struct CreateUserInputBody: Swift.Equatable {
    public let username: Swift.String?
    public let password: Swift.String?
    public let identityInfo: ConnectClientTypes.UserIdentityInfo?
    public let phoneConfig: ConnectClientTypes.UserPhoneConfig?
    public let directoryUserId: Swift.String?
    public let securityProfileIds: [Swift.String]?
    public let routingProfileId: Swift.String?
    public let hierarchyGroupId: Swift.String?
    public let tags: [Swift.String:Swift.String]?
}

extension CreateUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryUserId = "DirectoryUserId"
        case hierarchyGroupId = "HierarchyGroupId"
        case identityInfo = "IdentityInfo"
        case password = "Password"
        case phoneConfig = "PhoneConfig"
        case routingProfileId = "RoutingProfileId"
        case securityProfileIds = "SecurityProfileIds"
        case tags = "Tags"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let identityInfoDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.UserIdentityInfo.self, forKey: .identityInfo)
        identityInfo = identityInfoDecoded
        let phoneConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.UserPhoneConfig.self, forKey: .phoneConfig)
        phoneConfig = phoneConfigDecoded
        let directoryUserIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryUserId)
        directoryUserId = directoryUserIdDecoded
        let securityProfileIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityProfileIds)
        var securityProfileIdsDecoded0:[Swift.String]? = nil
        if let securityProfileIdsContainer = securityProfileIdsContainer {
            securityProfileIdsDecoded0 = [Swift.String]()
            for string0 in securityProfileIdsContainer {
                if let string0 = string0 {
                    securityProfileIdsDecoded0?.append(string0)
                }
            }
        }
        securityProfileIds = securityProfileIdsDecoded0
        let routingProfileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingProfileId)
        routingProfileId = routingProfileIdDecoded
        let hierarchyGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hierarchyGroupId)
        hierarchyGroupId = hierarchyGroupIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateUserOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateUserOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateUserOutputResponse(userArn: \(Swift.String(describing: userArn)), userId: \(Swift.String(describing: userId)))"}
}

extension CreateUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateUserOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.userArn = output.userArn
            self.userId = output.userId
        } else {
            self.userArn = nil
            self.userId = nil
        }
    }
}

public struct CreateUserOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the user account.
    public var userArn: Swift.String?
    /// The identifier of the user account.
    public var userId: Swift.String?

    public init (
        userArn: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.userArn = userArn
        self.userId = userId
    }
}

struct CreateUserOutputResponseBody: Swift.Equatable {
    public let userId: Swift.String?
    public let userArn: Swift.String?
}

extension CreateUserOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userArn = "UserArn"
        case userId = "UserId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let userArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userArn)
        userArn = userArnDecoded
    }
}

extension ConnectClientTypes.Credentials: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case accessTokenExpiration = "AccessTokenExpiration"
        case refreshToken = "RefreshToken"
        case refreshTokenExpiration = "RefreshTokenExpiration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = accessToken {
            try encodeContainer.encode(accessToken, forKey: .accessToken)
        }
        if let accessTokenExpiration = accessTokenExpiration {
            try encodeContainer.encode(accessTokenExpiration.timeIntervalSince1970, forKey: .accessTokenExpiration)
        }
        if let refreshToken = refreshToken {
            try encodeContainer.encode(refreshToken, forKey: .refreshToken)
        }
        if let refreshTokenExpiration = refreshTokenExpiration {
            try encodeContainer.encode(refreshTokenExpiration.timeIntervalSince1970, forKey: .refreshTokenExpiration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let accessTokenExpirationDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .accessTokenExpiration)
        accessTokenExpiration = accessTokenExpirationDecoded
        let refreshTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .refreshToken)
        refreshToken = refreshTokenDecoded
        let refreshTokenExpirationDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .refreshTokenExpiration)
        refreshTokenExpiration = refreshTokenExpirationDecoded
    }
}

extension ConnectClientTypes.Credentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Credentials(accessToken: \(Swift.String(describing: accessToken)), accessTokenExpiration: \(Swift.String(describing: accessTokenExpiration)), refreshToken: \(Swift.String(describing: refreshToken)), refreshTokenExpiration: \(Swift.String(describing: refreshTokenExpiration)))"}
}

extension ConnectClientTypes {
    /// Contains credentials to use for federation.
    public struct Credentials: Swift.Equatable {
        /// An access token generated for a federated user to access Amazon Connect.
        public var accessToken: Swift.String?
        /// A token generated with an expiration time for the session a user is logged in to
        ///    Amazon Connect.
        public var accessTokenExpiration: ClientRuntime.Date?
        /// Renews a token generated for a user to access the Amazon Connect instance.
        public var refreshToken: Swift.String?
        /// Renews the expiration timer for a generated token.
        public var refreshTokenExpiration: ClientRuntime.Date?

        public init (
            accessToken: Swift.String? = nil,
            accessTokenExpiration: ClientRuntime.Date? = nil,
            refreshToken: Swift.String? = nil,
            refreshTokenExpiration: ClientRuntime.Date? = nil
        )
        {
            self.accessToken = accessToken
            self.accessTokenExpiration = accessTokenExpiration
            self.refreshToken = refreshToken
            self.refreshTokenExpiration = refreshTokenExpiration
        }
    }

}

extension ConnectClientTypes.CurrentMetric: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.CurrentMetricName.self, forKey: .name)
        name = nameDecoded
        let unitDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Unit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension ConnectClientTypes.CurrentMetric: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CurrentMetric(name: \(Swift.String(describing: name)), unit: \(Swift.String(describing: unit)))"}
}

extension ConnectClientTypes {
    /// Contains information about a real-time metric. For a description of each metric, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html">Real-time Metrics Definitions in the Amazon Connect Administrator
    ///    Guide.
    public struct CurrentMetric: Swift.Equatable {
        /// The name of the metric.
        public var name: ConnectClientTypes.CurrentMetricName?
        /// The unit for the metric.
        public var unit: ConnectClientTypes.Unit?

        public init (
            name: ConnectClientTypes.CurrentMetricName? = nil,
            unit: ConnectClientTypes.Unit? = nil
        )
        {
            self.name = name
            self.unit = unit
        }
    }

}

extension ConnectClientTypes.CurrentMetricData: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metric = "Metric"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metric = metric {
            try encodeContainer.encode(metric, forKey: .metric)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.CurrentMetric.self, forKey: .metric)
        metric = metricDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value)
        value = valueDecoded
    }
}

extension ConnectClientTypes.CurrentMetricData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CurrentMetricData(metric: \(Swift.String(describing: metric)), value: \(Swift.String(describing: value)))"}
}

extension ConnectClientTypes {
    /// Contains the data for a real-time metric.
    public struct CurrentMetricData: Swift.Equatable {
        /// Information about the metric.
        public var metric: ConnectClientTypes.CurrentMetric?
        /// The value of the metric.
        public var value: Swift.Double?

        public init (
            metric: ConnectClientTypes.CurrentMetric? = nil,
            value: Swift.Double? = nil
        )
        {
            self.metric = metric
            self.value = value
        }
    }

}

extension ConnectClientTypes {
    /// The current metric names.
    public enum CurrentMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case agentsAfterContactWork
        case agentsAvailable
        case agentsError
        case agentsNonProductive
        case agentsOnline
        case agentsOnCall
        case agentsOnContact
        case agentsStaffed
        case contactsInQueue
        case contactsScheduled
        case oldestContactAge
        case slotsActive
        case slotsAvailable
        case sdkUnknown(Swift.String)

        public static var allCases: [CurrentMetricName] {
            return [
                .agentsAfterContactWork,
                .agentsAvailable,
                .agentsError,
                .agentsNonProductive,
                .agentsOnline,
                .agentsOnCall,
                .agentsOnContact,
                .agentsStaffed,
                .contactsInQueue,
                .contactsScheduled,
                .oldestContactAge,
                .slotsActive,
                .slotsAvailable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .agentsAfterContactWork: return "AGENTS_AFTER_CONTACT_WORK"
            case .agentsAvailable: return "AGENTS_AVAILABLE"
            case .agentsError: return "AGENTS_ERROR"
            case .agentsNonProductive: return "AGENTS_NON_PRODUCTIVE"
            case .agentsOnline: return "AGENTS_ONLINE"
            case .agentsOnCall: return "AGENTS_ON_CALL"
            case .agentsOnContact: return "AGENTS_ON_CONTACT"
            case .agentsStaffed: return "AGENTS_STAFFED"
            case .contactsInQueue: return "CONTACTS_IN_QUEUE"
            case .contactsScheduled: return "CONTACTS_SCHEDULED"
            case .oldestContactAge: return "OLDEST_CONTACT_AGE"
            case .slotsActive: return "SLOTS_ACTIVE"
            case .slotsAvailable: return "SLOTS_AVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CurrentMetricName(rawValue: rawValue) ?? CurrentMetricName.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.CurrentMetricResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collections = "Collections"
        case dimensions = "Dimensions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collections = collections {
            var collectionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .collections)
            for currentmetricdatacollections0 in collections {
                try collectionsContainer.encode(currentmetricdatacollections0)
            }
        }
        if let dimensions = dimensions {
            try encodeContainer.encode(dimensions, forKey: .dimensions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionsDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Dimensions.self, forKey: .dimensions)
        dimensions = dimensionsDecoded
        let collectionsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.CurrentMetricData?].self, forKey: .collections)
        var collectionsDecoded0:[ConnectClientTypes.CurrentMetricData]? = nil
        if let collectionsContainer = collectionsContainer {
            collectionsDecoded0 = [ConnectClientTypes.CurrentMetricData]()
            for structure0 in collectionsContainer {
                if let structure0 = structure0 {
                    collectionsDecoded0?.append(structure0)
                }
            }
        }
        collections = collectionsDecoded0
    }
}

extension ConnectClientTypes.CurrentMetricResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CurrentMetricResult(collections: \(Swift.String(describing: collections)), dimensions: \(Swift.String(describing: dimensions)))"}
}

extension ConnectClientTypes {
    /// Contains information about a set of real-time metrics.
    public struct CurrentMetricResult: Swift.Equatable {
        /// The set of metrics.
        public var collections: [ConnectClientTypes.CurrentMetricData]?
        /// The dimensions for the metrics.
        public var dimensions: ConnectClientTypes.Dimensions?

        public init (
            collections: [ConnectClientTypes.CurrentMetricData]? = nil,
            dimensions: ConnectClientTypes.Dimensions? = nil
        )
        {
            self.collections = collections
            self.dimensions = dimensions
        }
    }

}

extension DeleteHoursOfOperationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteHoursOfOperationInput(hoursOfOperationId: \(Swift.String(describing: hoursOfOperationId)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension DeleteHoursOfOperationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteHoursOfOperationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteHoursOfOperationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteHoursOfOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteHoursOfOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteHoursOfOperationOutputError>
}

public struct DeleteHoursOfOperationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteHoursOfOperationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteHoursOfOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteHoursOfOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteHoursOfOperationOutputError>
}

public struct DeleteHoursOfOperationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteHoursOfOperationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteHoursOfOperationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let hoursOfOperationId = input.hoursOfOperationId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("hoursOfOperationId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/hours-of-operations/\(instanceId.urlPercentEncoding())/\(hoursOfOperationId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteHoursOfOperationInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteHoursOfOperationOutputError>
}

public struct DeleteHoursOfOperationInput: Swift.Equatable {
    /// The identifier for the hours of operation.
    /// This member is required.
    public var hoursOfOperationId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        hoursOfOperationId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.hoursOfOperationId = hoursOfOperationId
        self.instanceId = instanceId
    }
}

struct DeleteHoursOfOperationInputBody: Swift.Equatable {
}

extension DeleteHoursOfOperationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteHoursOfOperationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteHoursOfOperationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteHoursOfOperationOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteHoursOfOperationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteHoursOfOperationOutputResponse()"}
}

extension DeleteHoursOfOperationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteHoursOfOperationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteHoursOfOperationOutputResponseBody: Swift.Equatable {
}

extension DeleteHoursOfOperationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInstanceInput(instanceId: \(Swift.String(describing: instanceId)))"}
}

extension DeleteInstanceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteInstanceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInstanceOutputError>
}

public struct DeleteInstanceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInstanceOutputError>
}

public struct DeleteInstanceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInstanceInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteInstanceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteInstanceInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInstanceOutputError>
}

public struct DeleteInstanceInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        instanceId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
    }
}

struct DeleteInstanceInputBody: Swift.Equatable {
}

extension DeleteInstanceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteInstanceOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInstanceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInstanceOutputResponse()"}
}

extension DeleteInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteInstanceOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteInstanceOutputResponseBody: Swift.Equatable {
}

extension DeleteInstanceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteIntegrationAssociationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteIntegrationAssociationInput(instanceId: \(Swift.String(describing: instanceId)), integrationAssociationId: \(Swift.String(describing: integrationAssociationId)))"}
}

extension DeleteIntegrationAssociationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteIntegrationAssociationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIntegrationAssociationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIntegrationAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIntegrationAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIntegrationAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIntegrationAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIntegrationAssociationOutputError>
}

public struct DeleteIntegrationAssociationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIntegrationAssociationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIntegrationAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIntegrationAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIntegrationAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIntegrationAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIntegrationAssociationOutputError>
}

public struct DeleteIntegrationAssociationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIntegrationAssociationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteIntegrationAssociationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIntegrationAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let integrationAssociationId = input.integrationAssociationId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("integrationAssociationId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/integration-associations/\(integrationAssociationId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteIntegrationAssociationInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIntegrationAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIntegrationAssociationOutputError>
}

public struct DeleteIntegrationAssociationInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier for the integration association.
    /// This member is required.
    public var integrationAssociationId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        integrationAssociationId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.integrationAssociationId = integrationAssociationId
    }
}

struct DeleteIntegrationAssociationInputBody: Swift.Equatable {
}

extension DeleteIntegrationAssociationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteIntegrationAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteIntegrationAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteIntegrationAssociationOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteIntegrationAssociationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteIntegrationAssociationOutputResponse()"}
}

extension DeleteIntegrationAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteIntegrationAssociationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteIntegrationAssociationOutputResponseBody: Swift.Equatable {
}

extension DeleteIntegrationAssociationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteQuickConnectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteQuickConnectInput(instanceId: \(Swift.String(describing: instanceId)), quickConnectId: \(Swift.String(describing: quickConnectId)))"}
}

extension DeleteQuickConnectInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteQuickConnectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteQuickConnectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteQuickConnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteQuickConnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteQuickConnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteQuickConnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteQuickConnectOutputError>
}

public struct DeleteQuickConnectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteQuickConnectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteQuickConnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteQuickConnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteQuickConnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteQuickConnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteQuickConnectOutputError>
}

public struct DeleteQuickConnectInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteQuickConnectInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteQuickConnectInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteQuickConnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let quickConnectId = input.quickConnectId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("quickConnectId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/quick-connects/\(instanceId.urlPercentEncoding())/\(quickConnectId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteQuickConnectInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteQuickConnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteQuickConnectOutputError>
}

public struct DeleteQuickConnectInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier for the quick connect.
    /// This member is required.
    public var quickConnectId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        quickConnectId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.quickConnectId = quickConnectId
    }
}

struct DeleteQuickConnectInputBody: Swift.Equatable {
}

extension DeleteQuickConnectInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteQuickConnectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteQuickConnectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteQuickConnectOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteQuickConnectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteQuickConnectOutputResponse()"}
}

extension DeleteQuickConnectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteQuickConnectOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteQuickConnectOutputResponseBody: Swift.Equatable {
}

extension DeleteQuickConnectOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteUseCaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUseCaseInput(instanceId: \(Swift.String(describing: instanceId)), integrationAssociationId: \(Swift.String(describing: integrationAssociationId)), useCaseId: \(Swift.String(describing: useCaseId)))"}
}

extension DeleteUseCaseInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteUseCaseInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteUseCaseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteUseCaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteUseCaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteUseCaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteUseCaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteUseCaseOutputError>
}

public struct DeleteUseCaseInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteUseCaseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteUseCaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteUseCaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteUseCaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteUseCaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteUseCaseOutputError>
}

public struct DeleteUseCaseInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteUseCaseInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteUseCaseInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteUseCaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let integrationAssociationId = input.integrationAssociationId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("integrationAssociationId is nil and needs a value for the path of this operation"))))
        }
        guard let useCaseId = input.useCaseId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("useCaseId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/integration-associations/\(integrationAssociationId.urlPercentEncoding())/use-cases/\(useCaseId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteUseCaseInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteUseCaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteUseCaseOutputError>
}

public struct DeleteUseCaseInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier for the integration association.
    /// This member is required.
    public var integrationAssociationId: Swift.String?
    /// The identifier for the use case.
    /// This member is required.
    public var useCaseId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        integrationAssociationId: Swift.String? = nil,
        useCaseId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.integrationAssociationId = integrationAssociationId
        self.useCaseId = useCaseId
    }
}

struct DeleteUseCaseInputBody: Swift.Equatable {
}

extension DeleteUseCaseInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteUseCaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteUseCaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteUseCaseOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUseCaseOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUseCaseOutputResponse()"}
}

extension DeleteUseCaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteUseCaseOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteUseCaseOutputResponseBody: Swift.Equatable {
}

extension DeleteUseCaseOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteUserHierarchyGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserHierarchyGroupInput(hierarchyGroupId: \(Swift.String(describing: hierarchyGroupId)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension DeleteUserHierarchyGroupInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteUserHierarchyGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteUserHierarchyGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteUserHierarchyGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteUserHierarchyGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteUserHierarchyGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteUserHierarchyGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteUserHierarchyGroupOutputError>
}

public struct DeleteUserHierarchyGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteUserHierarchyGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteUserHierarchyGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteUserHierarchyGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteUserHierarchyGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteUserHierarchyGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteUserHierarchyGroupOutputError>
}

public struct DeleteUserHierarchyGroupInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteUserHierarchyGroupInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteUserHierarchyGroupInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteUserHierarchyGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let hierarchyGroupId = input.hierarchyGroupId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("hierarchyGroupId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/user-hierarchy-groups/\(instanceId.urlPercentEncoding())/\(hierarchyGroupId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteUserHierarchyGroupInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteUserHierarchyGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteUserHierarchyGroupOutputError>
}

public struct DeleteUserHierarchyGroupInput: Swift.Equatable {
    /// The identifier of the hierarchy group.
    /// This member is required.
    public var hierarchyGroupId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        hierarchyGroupId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.hierarchyGroupId = hierarchyGroupId
        self.instanceId = instanceId
    }
}

struct DeleteUserHierarchyGroupInputBody: Swift.Equatable {
}

extension DeleteUserHierarchyGroupInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteUserHierarchyGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteUserHierarchyGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteUserHierarchyGroupOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserHierarchyGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserHierarchyGroupOutputResponse()"}
}

extension DeleteUserHierarchyGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteUserHierarchyGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteUserHierarchyGroupOutputResponseBody: Swift.Equatable {
}

extension DeleteUserHierarchyGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserInput(instanceId: \(Swift.String(describing: instanceId)), userId: \(Swift.String(describing: userId)))"}
}

extension DeleteUserInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteUserInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteUserInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteUserInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteUserInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteUserOutputError>
}

public struct DeleteUserInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteUserInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteUserInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteUserInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteUserOutputError>
}

public struct DeleteUserInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteUserInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteUserInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let userId = input.userId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("userId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/users/\(instanceId.urlPercentEncoding())/\(userId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteUserInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteUserOutputError>
}

public struct DeleteUserInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier of the user.
    /// This member is required.
    public var userId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.userId = userId
    }
}

struct DeleteUserInputBody: Swift.Equatable {
}

extension DeleteUserInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteUserOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUserOutputResponse()"}
}

extension DeleteUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteUserOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteUserOutputResponseBody: Swift.Equatable {
}

extension DeleteUserOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeAgentStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAgentStatusInput(agentStatusId: \(Swift.String(describing: agentStatusId)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension DescribeAgentStatusInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeAgentStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAgentStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAgentStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAgentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAgentStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAgentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAgentStatusOutputError>
}

public struct DescribeAgentStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAgentStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAgentStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAgentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAgentStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAgentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAgentStatusOutputError>
}

public struct DescribeAgentStatusInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAgentStatusInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeAgentStatusInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAgentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let agentStatusId = input.agentStatusId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("agentStatusId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/agent-status/\(instanceId.urlPercentEncoding())/\(agentStatusId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeAgentStatusInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAgentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAgentStatusOutputError>
}

public struct DescribeAgentStatusInput: Swift.Equatable {
    /// The identifier for the agent status.
    /// This member is required.
    public var agentStatusId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        agentStatusId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.agentStatusId = agentStatusId
        self.instanceId = instanceId
    }
}

struct DescribeAgentStatusInputBody: Swift.Equatable {
}

extension DescribeAgentStatusInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeAgentStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAgentStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAgentStatusOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAgentStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAgentStatusOutputResponse(agentStatus: \(Swift.String(describing: agentStatus)))"}
}

extension DescribeAgentStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAgentStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentStatus = output.agentStatus
        } else {
            self.agentStatus = nil
        }
    }
}

public struct DescribeAgentStatusOutputResponse: Swift.Equatable {
    /// The agent status.
    public var agentStatus: ConnectClientTypes.AgentStatus?

    public init (
        agentStatus: ConnectClientTypes.AgentStatus? = nil
    )
    {
        self.agentStatus = agentStatus
    }
}

struct DescribeAgentStatusOutputResponseBody: Swift.Equatable {
    public let agentStatus: ConnectClientTypes.AgentStatus?
}

extension DescribeAgentStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentStatus = "AgentStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentStatusDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.AgentStatus.self, forKey: .agentStatus)
        agentStatus = agentStatusDecoded
    }
}

extension DescribeContactFlowInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeContactFlowInput(contactFlowId: \(Swift.String(describing: contactFlowId)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension DescribeContactFlowInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeContactFlowInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeContactFlowInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeContactFlowInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeContactFlowOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeContactFlowInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeContactFlowOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeContactFlowOutputError>
}

public struct DescribeContactFlowInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeContactFlowInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeContactFlowInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeContactFlowOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeContactFlowInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeContactFlowOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeContactFlowOutputError>
}

public struct DescribeContactFlowInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeContactFlowInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeContactFlowInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeContactFlowOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let contactFlowId = input.contactFlowId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("contactFlowId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/contact-flows/\(instanceId.urlPercentEncoding())/\(contactFlowId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeContactFlowInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeContactFlowOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeContactFlowOutputError>
}

public struct DescribeContactFlowInput: Swift.Equatable {
    /// The identifier of the contact flow.
    /// This member is required.
    public var contactFlowId: Swift.String?
    /// The identifier of the Amazon Connect instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        contactFlowId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.contactFlowId = contactFlowId
        self.instanceId = instanceId
    }
}

struct DescribeContactFlowInputBody: Swift.Equatable {
}

extension DescribeContactFlowInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeContactFlowOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeContactFlowOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContactFlowNotPublishedException" : self = .contactFlowNotPublishedException(try ContactFlowNotPublishedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeContactFlowOutputError: Swift.Error, Swift.Equatable {
    case contactFlowNotPublishedException(ContactFlowNotPublishedException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeContactFlowOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeContactFlowOutputResponse(contactFlow: \(Swift.String(describing: contactFlow)))"}
}

extension DescribeContactFlowOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeContactFlowOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contactFlow = output.contactFlow
        } else {
            self.contactFlow = nil
        }
    }
}

public struct DescribeContactFlowOutputResponse: Swift.Equatable {
    /// Information about the contact flow.
    public var contactFlow: ConnectClientTypes.ContactFlow?

    public init (
        contactFlow: ConnectClientTypes.ContactFlow? = nil
    )
    {
        self.contactFlow = contactFlow
    }
}

struct DescribeContactFlowOutputResponseBody: Swift.Equatable {
    public let contactFlow: ConnectClientTypes.ContactFlow?
}

extension DescribeContactFlowOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactFlow = "ContactFlow"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactFlowDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.ContactFlow.self, forKey: .contactFlow)
        contactFlow = contactFlowDecoded
    }
}

extension DescribeHoursOfOperationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeHoursOfOperationInput(hoursOfOperationId: \(Swift.String(describing: hoursOfOperationId)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension DescribeHoursOfOperationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeHoursOfOperationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeHoursOfOperationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeHoursOfOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeHoursOfOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeHoursOfOperationOutputError>
}

public struct DescribeHoursOfOperationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeHoursOfOperationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeHoursOfOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeHoursOfOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeHoursOfOperationOutputError>
}

public struct DescribeHoursOfOperationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeHoursOfOperationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeHoursOfOperationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let hoursOfOperationId = input.hoursOfOperationId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("hoursOfOperationId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/hours-of-operations/\(instanceId.urlPercentEncoding())/\(hoursOfOperationId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeHoursOfOperationInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeHoursOfOperationOutputError>
}

public struct DescribeHoursOfOperationInput: Swift.Equatable {
    /// The identifier for the hours of operation.
    /// This member is required.
    public var hoursOfOperationId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        hoursOfOperationId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.hoursOfOperationId = hoursOfOperationId
        self.instanceId = instanceId
    }
}

struct DescribeHoursOfOperationInputBody: Swift.Equatable {
}

extension DescribeHoursOfOperationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeHoursOfOperationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeHoursOfOperationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeHoursOfOperationOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeHoursOfOperationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeHoursOfOperationOutputResponse(hoursOfOperation: \(Swift.String(describing: hoursOfOperation)))"}
}

extension DescribeHoursOfOperationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeHoursOfOperationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hoursOfOperation = output.hoursOfOperation
        } else {
            self.hoursOfOperation = nil
        }
    }
}

public struct DescribeHoursOfOperationOutputResponse: Swift.Equatable {
    /// The hours of operation.
    public var hoursOfOperation: ConnectClientTypes.HoursOfOperation?

    public init (
        hoursOfOperation: ConnectClientTypes.HoursOfOperation? = nil
    )
    {
        self.hoursOfOperation = hoursOfOperation
    }
}

struct DescribeHoursOfOperationOutputResponseBody: Swift.Equatable {
    public let hoursOfOperation: ConnectClientTypes.HoursOfOperation?
}

extension DescribeHoursOfOperationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hoursOfOperation = "HoursOfOperation"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hoursOfOperationDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HoursOfOperation.self, forKey: .hoursOfOperation)
        hoursOfOperation = hoursOfOperationDecoded
    }
}

extension DescribeInstanceAttributeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInstanceAttributeInput(attributeType: \(Swift.String(describing: attributeType)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension DescribeInstanceAttributeInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeInstanceAttributeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInstanceAttributeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInstanceAttributeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInstanceAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInstanceAttributeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInstanceAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInstanceAttributeOutputError>
}

public struct DescribeInstanceAttributeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInstanceAttributeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInstanceAttributeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInstanceAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInstanceAttributeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInstanceAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInstanceAttributeOutputError>
}

public struct DescribeInstanceAttributeInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInstanceAttributeInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeInstanceAttributeInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInstanceAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let attributeType = input.attributeType else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("attributeType is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/attribute/\(attributeType.rawValue.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeInstanceAttributeInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInstanceAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInstanceAttributeOutputError>
}

public struct DescribeInstanceAttributeInput: Swift.Equatable {
    /// The type of attribute.
    /// This member is required.
    public var attributeType: ConnectClientTypes.InstanceAttributeType?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        attributeType: ConnectClientTypes.InstanceAttributeType? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.attributeType = attributeType
        self.instanceId = instanceId
    }
}

struct DescribeInstanceAttributeInputBody: Swift.Equatable {
}

extension DescribeInstanceAttributeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeInstanceAttributeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInstanceAttributeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInstanceAttributeOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInstanceAttributeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInstanceAttributeOutputResponse(attribute: \(Swift.String(describing: attribute)))"}
}

extension DescribeInstanceAttributeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeInstanceAttributeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.attribute = output.attribute
        } else {
            self.attribute = nil
        }
    }
}

public struct DescribeInstanceAttributeOutputResponse: Swift.Equatable {
    /// The
    ///    type
    ///    of attribute.
    public var attribute: ConnectClientTypes.Attribute?

    public init (
        attribute: ConnectClientTypes.Attribute? = nil
    )
    {
        self.attribute = attribute
    }
}

struct DescribeInstanceAttributeOutputResponseBody: Swift.Equatable {
    public let attribute: ConnectClientTypes.Attribute?
}

extension DescribeInstanceAttributeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attribute = "Attribute"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Attribute.self, forKey: .attribute)
        attribute = attributeDecoded
    }
}

extension DescribeInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInstanceInput(instanceId: \(Swift.String(describing: instanceId)))"}
}

extension DescribeInstanceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeInstanceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInstanceOutputError>
}

public struct DescribeInstanceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInstanceOutputError>
}

public struct DescribeInstanceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInstanceInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeInstanceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeInstanceInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInstanceOutputError>
}

public struct DescribeInstanceInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        instanceId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
    }
}

struct DescribeInstanceInputBody: Swift.Equatable {
}

extension DescribeInstanceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInstanceOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInstanceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInstanceOutputResponse(instance: \(Swift.String(describing: instance)))"}
}

extension DescribeInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instance = output.instance
        } else {
            self.instance = nil
        }
    }
}

public struct DescribeInstanceOutputResponse: Swift.Equatable {
    /// The name of the instance.
    public var instance: ConnectClientTypes.Instance?

    public init (
        instance: ConnectClientTypes.Instance? = nil
    )
    {
        self.instance = instance
    }
}

struct DescribeInstanceOutputResponseBody: Swift.Equatable {
    public let instance: ConnectClientTypes.Instance?
}

extension DescribeInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instance = "Instance"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Instance.self, forKey: .instance)
        instance = instanceDecoded
    }
}

extension DescribeInstanceStorageConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInstanceStorageConfigInput(associationId: \(Swift.String(describing: associationId)), instanceId: \(Swift.String(describing: instanceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension DescribeInstanceStorageConfigInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeInstanceStorageConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInstanceStorageConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInstanceStorageConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInstanceStorageConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInstanceStorageConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInstanceStorageConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInstanceStorageConfigOutputError>
}

public struct DescribeInstanceStorageConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInstanceStorageConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInstanceStorageConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInstanceStorageConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let resourceType = input.operationInput.resourceType {
            let resourceTypeQueryItem = ClientRuntime.URLQueryItem(name: "resourceType".urlPercentEncoding(), value: Swift.String(resourceType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(resourceTypeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInstanceStorageConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInstanceStorageConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInstanceStorageConfigOutputError>
}

public struct DescribeInstanceStorageConfigInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInstanceStorageConfigInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeInstanceStorageConfigInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInstanceStorageConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let associationId = input.associationId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("associationId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/storage-config/\(associationId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeInstanceStorageConfigInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInstanceStorageConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInstanceStorageConfigOutputError>
}

public struct DescribeInstanceStorageConfigInput: Swift.Equatable {
    /// The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
    /// This member is required.
    public var associationId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// A valid resource type.
    /// This member is required.
    public var resourceType: ConnectClientTypes.InstanceStorageResourceType?

    public init (
        associationId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        resourceType: ConnectClientTypes.InstanceStorageResourceType? = nil
    )
    {
        self.associationId = associationId
        self.instanceId = instanceId
        self.resourceType = resourceType
    }
}

struct DescribeInstanceStorageConfigInputBody: Swift.Equatable {
}

extension DescribeInstanceStorageConfigInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeInstanceStorageConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInstanceStorageConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInstanceStorageConfigOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInstanceStorageConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInstanceStorageConfigOutputResponse(storageConfig: \(Swift.String(describing: storageConfig)))"}
}

extension DescribeInstanceStorageConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeInstanceStorageConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.storageConfig = output.storageConfig
        } else {
            self.storageConfig = nil
        }
    }
}

public struct DescribeInstanceStorageConfigOutputResponse: Swift.Equatable {
    /// A valid storage type.
    public var storageConfig: ConnectClientTypes.InstanceStorageConfig?

    public init (
        storageConfig: ConnectClientTypes.InstanceStorageConfig? = nil
    )
    {
        self.storageConfig = storageConfig
    }
}

struct DescribeInstanceStorageConfigOutputResponseBody: Swift.Equatable {
    public let storageConfig: ConnectClientTypes.InstanceStorageConfig?
}

extension DescribeInstanceStorageConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageConfig = "StorageConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.InstanceStorageConfig.self, forKey: .storageConfig)
        storageConfig = storageConfigDecoded
    }
}

extension DescribeQueueInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeQueueInput(instanceId: \(Swift.String(describing: instanceId)), queueId: \(Swift.String(describing: queueId)))"}
}

extension DescribeQueueInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeQueueInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeQueueOutputError>
}

public struct DescribeQueueInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeQueueOutputError>
}

public struct DescribeQueueInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeQueueInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeQueueInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let queueId = input.queueId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("queueId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/queues/\(instanceId.urlPercentEncoding())/\(queueId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeQueueInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeQueueOutputError>
}

public struct DescribeQueueInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier for the queue.
    /// This member is required.
    public var queueId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        queueId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.queueId = queueId
    }
}

struct DescribeQueueInputBody: Swift.Equatable {
}

extension DescribeQueueInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeQueueOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeQueueOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeQueueOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeQueueOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeQueueOutputResponse(queue: \(Swift.String(describing: queue)))"}
}

extension DescribeQueueOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeQueueOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.queue = output.queue
        } else {
            self.queue = nil
        }
    }
}

public struct DescribeQueueOutputResponse: Swift.Equatable {
    /// The name of the queue.
    public var queue: ConnectClientTypes.Queue?

    public init (
        queue: ConnectClientTypes.Queue? = nil
    )
    {
        self.queue = queue
    }
}

struct DescribeQueueOutputResponseBody: Swift.Equatable {
    public let queue: ConnectClientTypes.Queue?
}

extension DescribeQueueOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queue = "Queue"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Queue.self, forKey: .queue)
        queue = queueDecoded
    }
}

extension DescribeQuickConnectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeQuickConnectInput(instanceId: \(Swift.String(describing: instanceId)), quickConnectId: \(Swift.String(describing: quickConnectId)))"}
}

extension DescribeQuickConnectInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeQuickConnectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeQuickConnectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeQuickConnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeQuickConnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeQuickConnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeQuickConnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeQuickConnectOutputError>
}

public struct DescribeQuickConnectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeQuickConnectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeQuickConnectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeQuickConnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeQuickConnectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeQuickConnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeQuickConnectOutputError>
}

public struct DescribeQuickConnectInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeQuickConnectInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeQuickConnectInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeQuickConnectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let quickConnectId = input.quickConnectId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("quickConnectId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/quick-connects/\(instanceId.urlPercentEncoding())/\(quickConnectId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeQuickConnectInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeQuickConnectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeQuickConnectOutputError>
}

public struct DescribeQuickConnectInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier for the quick connect.
    /// This member is required.
    public var quickConnectId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        quickConnectId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.quickConnectId = quickConnectId
    }
}

struct DescribeQuickConnectInputBody: Swift.Equatable {
}

extension DescribeQuickConnectInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeQuickConnectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeQuickConnectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeQuickConnectOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeQuickConnectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeQuickConnectOutputResponse(quickConnect: \(Swift.String(describing: quickConnect)))"}
}

extension DescribeQuickConnectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeQuickConnectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.quickConnect = output.quickConnect
        } else {
            self.quickConnect = nil
        }
    }
}

public struct DescribeQuickConnectOutputResponse: Swift.Equatable {
    /// Information about the quick connect.
    public var quickConnect: ConnectClientTypes.QuickConnect?

    public init (
        quickConnect: ConnectClientTypes.QuickConnect? = nil
    )
    {
        self.quickConnect = quickConnect
    }
}

struct DescribeQuickConnectOutputResponseBody: Swift.Equatable {
    public let quickConnect: ConnectClientTypes.QuickConnect?
}

extension DescribeQuickConnectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case quickConnect = "QuickConnect"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let quickConnectDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.QuickConnect.self, forKey: .quickConnect)
        quickConnect = quickConnectDecoded
    }
}

extension DescribeRoutingProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRoutingProfileInput(instanceId: \(Swift.String(describing: instanceId)), routingProfileId: \(Swift.String(describing: routingProfileId)))"}
}

extension DescribeRoutingProfileInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeRoutingProfileInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRoutingProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRoutingProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRoutingProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRoutingProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRoutingProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRoutingProfileOutputError>
}

public struct DescribeRoutingProfileInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRoutingProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRoutingProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRoutingProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRoutingProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRoutingProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRoutingProfileOutputError>
}

public struct DescribeRoutingProfileInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRoutingProfileInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeRoutingProfileInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRoutingProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let routingProfileId = input.routingProfileId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("routingProfileId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/routing-profiles/\(instanceId.urlPercentEncoding())/\(routingProfileId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeRoutingProfileInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRoutingProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRoutingProfileOutputError>
}

public struct DescribeRoutingProfileInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier of the routing profile.
    /// This member is required.
    public var routingProfileId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        routingProfileId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.routingProfileId = routingProfileId
    }
}

struct DescribeRoutingProfileInputBody: Swift.Equatable {
}

extension DescribeRoutingProfileInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeRoutingProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRoutingProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeRoutingProfileOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRoutingProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRoutingProfileOutputResponse(routingProfile: \(Swift.String(describing: routingProfile)))"}
}

extension DescribeRoutingProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeRoutingProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.routingProfile = output.routingProfile
        } else {
            self.routingProfile = nil
        }
    }
}

public struct DescribeRoutingProfileOutputResponse: Swift.Equatable {
    /// The routing profile.
    public var routingProfile: ConnectClientTypes.RoutingProfile?

    public init (
        routingProfile: ConnectClientTypes.RoutingProfile? = nil
    )
    {
        self.routingProfile = routingProfile
    }
}

struct DescribeRoutingProfileOutputResponseBody: Swift.Equatable {
    public let routingProfile: ConnectClientTypes.RoutingProfile?
}

extension DescribeRoutingProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingProfile = "RoutingProfile"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingProfileDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.RoutingProfile.self, forKey: .routingProfile)
        routingProfile = routingProfileDecoded
    }
}

extension DescribeUserHierarchyGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeUserHierarchyGroupInput(hierarchyGroupId: \(Swift.String(describing: hierarchyGroupId)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension DescribeUserHierarchyGroupInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeUserHierarchyGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeUserHierarchyGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeUserHierarchyGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeUserHierarchyGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeUserHierarchyGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeUserHierarchyGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeUserHierarchyGroupOutputError>
}

public struct DescribeUserHierarchyGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeUserHierarchyGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeUserHierarchyGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeUserHierarchyGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeUserHierarchyGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeUserHierarchyGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeUserHierarchyGroupOutputError>
}

public struct DescribeUserHierarchyGroupInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeUserHierarchyGroupInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeUserHierarchyGroupInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeUserHierarchyGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let hierarchyGroupId = input.hierarchyGroupId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("hierarchyGroupId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/user-hierarchy-groups/\(instanceId.urlPercentEncoding())/\(hierarchyGroupId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeUserHierarchyGroupInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeUserHierarchyGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeUserHierarchyGroupOutputError>
}

public struct DescribeUserHierarchyGroupInput: Swift.Equatable {
    /// The identifier of the hierarchy group.
    /// This member is required.
    public var hierarchyGroupId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        hierarchyGroupId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.hierarchyGroupId = hierarchyGroupId
        self.instanceId = instanceId
    }
}

struct DescribeUserHierarchyGroupInputBody: Swift.Equatable {
}

extension DescribeUserHierarchyGroupInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeUserHierarchyGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeUserHierarchyGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeUserHierarchyGroupOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUserHierarchyGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeUserHierarchyGroupOutputResponse(hierarchyGroup: \(Swift.String(describing: hierarchyGroup)))"}
}

extension DescribeUserHierarchyGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeUserHierarchyGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hierarchyGroup = output.hierarchyGroup
        } else {
            self.hierarchyGroup = nil
        }
    }
}

public struct DescribeUserHierarchyGroupOutputResponse: Swift.Equatable {
    /// Information about the hierarchy group.
    public var hierarchyGroup: ConnectClientTypes.HierarchyGroup?

    public init (
        hierarchyGroup: ConnectClientTypes.HierarchyGroup? = nil
    )
    {
        self.hierarchyGroup = hierarchyGroup
    }
}

struct DescribeUserHierarchyGroupOutputResponseBody: Swift.Equatable {
    public let hierarchyGroup: ConnectClientTypes.HierarchyGroup?
}

extension DescribeUserHierarchyGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hierarchyGroup = "HierarchyGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hierarchyGroupDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyGroup.self, forKey: .hierarchyGroup)
        hierarchyGroup = hierarchyGroupDecoded
    }
}

extension DescribeUserHierarchyStructureInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeUserHierarchyStructureInput(instanceId: \(Swift.String(describing: instanceId)))"}
}

extension DescribeUserHierarchyStructureInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeUserHierarchyStructureInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeUserHierarchyStructureInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeUserHierarchyStructureInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeUserHierarchyStructureOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeUserHierarchyStructureInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeUserHierarchyStructureOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeUserHierarchyStructureOutputError>
}

public struct DescribeUserHierarchyStructureInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeUserHierarchyStructureInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeUserHierarchyStructureInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeUserHierarchyStructureOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeUserHierarchyStructureInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeUserHierarchyStructureOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeUserHierarchyStructureOutputError>
}

public struct DescribeUserHierarchyStructureInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeUserHierarchyStructureInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeUserHierarchyStructureInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeUserHierarchyStructureOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/user-hierarchy-structure/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeUserHierarchyStructureInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeUserHierarchyStructureOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeUserHierarchyStructureOutputError>
}

public struct DescribeUserHierarchyStructureInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        instanceId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
    }
}

struct DescribeUserHierarchyStructureInputBody: Swift.Equatable {
}

extension DescribeUserHierarchyStructureInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeUserHierarchyStructureOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeUserHierarchyStructureOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeUserHierarchyStructureOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUserHierarchyStructureOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeUserHierarchyStructureOutputResponse(hierarchyStructure: \(Swift.String(describing: hierarchyStructure)))"}
}

extension DescribeUserHierarchyStructureOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeUserHierarchyStructureOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hierarchyStructure = output.hierarchyStructure
        } else {
            self.hierarchyStructure = nil
        }
    }
}

public struct DescribeUserHierarchyStructureOutputResponse: Swift.Equatable {
    /// Information about the hierarchy structure.
    public var hierarchyStructure: ConnectClientTypes.HierarchyStructure?

    public init (
        hierarchyStructure: ConnectClientTypes.HierarchyStructure? = nil
    )
    {
        self.hierarchyStructure = hierarchyStructure
    }
}

struct DescribeUserHierarchyStructureOutputResponseBody: Swift.Equatable {
    public let hierarchyStructure: ConnectClientTypes.HierarchyStructure?
}

extension DescribeUserHierarchyStructureOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hierarchyStructure = "HierarchyStructure"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hierarchyStructureDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyStructure.self, forKey: .hierarchyStructure)
        hierarchyStructure = hierarchyStructureDecoded
    }
}

extension DescribeUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeUserInput(instanceId: \(Swift.String(describing: instanceId)), userId: \(Swift.String(describing: userId)))"}
}

extension DescribeUserInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeUserInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeUserInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeUserInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeUserInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeUserOutputError>
}

public struct DescribeUserInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeUserInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeUserInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeUserInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeUserOutputError>
}

public struct DescribeUserInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeUserInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeUserInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let userId = input.userId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("userId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/users/\(instanceId.urlPercentEncoding())/\(userId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeUserInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeUserOutputError>
}

public struct DescribeUserInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier of the user account.
    /// This member is required.
    public var userId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.userId = userId
    }
}

struct DescribeUserInputBody: Swift.Equatable {
}

extension DescribeUserInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeUserOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUserOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeUserOutputResponse(user: \(Swift.String(describing: user)))"}
}

extension DescribeUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeUserOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.user = output.user
        } else {
            self.user = nil
        }
    }
}

public struct DescribeUserOutputResponse: Swift.Equatable {
    /// Information about the user account and configuration settings.
    public var user: ConnectClientTypes.User?

    public init (
        user: ConnectClientTypes.User? = nil
    )
    {
        self.user = user
    }
}

struct DescribeUserOutputResponseBody: Swift.Equatable {
    public let user: ConnectClientTypes.User?
}

extension DescribeUserOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case user = "User"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.User.self, forKey: .user)
        user = userDecoded
    }
}

extension DestinationNotAllowedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DestinationNotAllowedException(message: \(Swift.String(describing: message)))"}
}

extension DestinationNotAllowedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DestinationNotAllowedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Outbound calls to the destination number are not allowed.
public struct DestinationNotAllowedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message about the outbound calls.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DestinationNotAllowedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DestinationNotAllowedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConnectClientTypes.Dimensions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channel = "Channel"
        case queue = "Queue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channel = channel {
            try encodeContainer.encode(channel.rawValue, forKey: .channel)
        }
        if let queue = queue {
            try encodeContainer.encode(queue, forKey: .queue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.QueueReference.self, forKey: .queue)
        queue = queueDecoded
        let channelDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Channel.self, forKey: .channel)
        channel = channelDecoded
    }
}

extension ConnectClientTypes.Dimensions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Dimensions(channel: \(Swift.String(describing: channel)), queue: \(Swift.String(describing: queue)))"}
}

extension ConnectClientTypes {
    /// Contains information about the dimensions for a set of metrics.
    public struct Dimensions: Swift.Equatable {
        /// The channel used for grouping and filters.
        public var channel: ConnectClientTypes.Channel?
        /// Information about the queue for which metrics are returned.
        public var queue: ConnectClientTypes.QueueReference?

        public init (
            channel: ConnectClientTypes.Channel? = nil,
            queue: ConnectClientTypes.QueueReference? = nil
        )
        {
            self.channel = channel
            self.queue = queue
        }
    }

}

extension ConnectClientTypes {
    public enum DirectoryType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case connectManaged
        case existingDirectory
        case saml
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectoryType] {
            return [
                .connectManaged,
                .existingDirectory,
                .saml,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .connectManaged: return "CONNECT_MANAGED"
            case .existingDirectory: return "EXISTING_DIRECTORY"
            case .saml: return "SAML"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DirectoryType(rawValue: rawValue) ?? DirectoryType.sdkUnknown(rawValue)
        }
    }
}

extension DisassociateApprovedOriginInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateApprovedOriginInput(instanceId: \(Swift.String(describing: instanceId)), origin: \(Swift.String(describing: origin)))"}
}

extension DisassociateApprovedOriginInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DisassociateApprovedOriginInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateApprovedOriginInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateApprovedOriginInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateApprovedOriginOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateApprovedOriginInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateApprovedOriginOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateApprovedOriginOutputError>
}

public struct DisassociateApprovedOriginInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateApprovedOriginInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateApprovedOriginInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateApprovedOriginOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let origin = input.operationInput.origin {
            let originQueryItem = ClientRuntime.URLQueryItem(name: "origin".urlPercentEncoding(), value: Swift.String(origin).urlPercentEncoding())
            input.builder.withQueryItem(originQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateApprovedOriginInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateApprovedOriginOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateApprovedOriginOutputError>
}

public struct DisassociateApprovedOriginInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateApprovedOriginInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DisassociateApprovedOriginInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateApprovedOriginOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/approved-origin"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DisassociateApprovedOriginInput
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateApprovedOriginOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateApprovedOriginOutputError>
}

public struct DisassociateApprovedOriginInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The domain URL of the integrated application.
    /// This member is required.
    public var origin: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        origin: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.origin = origin
    }
}

struct DisassociateApprovedOriginInputBody: Swift.Equatable {
}

extension DisassociateApprovedOriginInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisassociateApprovedOriginOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateApprovedOriginOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateApprovedOriginOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateApprovedOriginOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateApprovedOriginOutputResponse()"}
}

extension DisassociateApprovedOriginOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateApprovedOriginOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisassociateApprovedOriginOutputResponseBody: Swift.Equatable {
}

extension DisassociateApprovedOriginOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DisassociateBotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateBotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateBotOutputError>
}

extension DisassociateBotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateBotInput(instanceId: \(Swift.String(describing: instanceId)), lexBot: \(Swift.String(describing: lexBot)), lexV2Bot: \(Swift.String(describing: lexV2Bot)))"}
}

extension DisassociateBotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lexBot = "LexBot"
        case lexV2Bot = "LexV2Bot"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lexBot = lexBot {
            try encodeContainer.encode(lexBot, forKey: .lexBot)
        }
        if let lexV2Bot = lexV2Bot {
            try encodeContainer.encode(lexV2Bot, forKey: .lexV2Bot)
        }
    }
}

public struct DisassociateBotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateBotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateBotOutputError>
}

public struct DisassociateBotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateBotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateBotOutputError>
}

public struct DisassociateBotInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateBotInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DisassociateBotInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/bot"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DisassociateBotInput
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateBotOutputError>
}

public struct DisassociateBotInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// Configuration information of an Amazon Lex bot.
    public var lexBot: ConnectClientTypes.LexBot?
    /// The Amazon Lex V2 bot to disassociate from the instance.
    public var lexV2Bot: ConnectClientTypes.LexV2Bot?

    public init (
        instanceId: Swift.String? = nil,
        lexBot: ConnectClientTypes.LexBot? = nil,
        lexV2Bot: ConnectClientTypes.LexV2Bot? = nil
    )
    {
        self.instanceId = instanceId
        self.lexBot = lexBot
        self.lexV2Bot = lexV2Bot
    }
}

struct DisassociateBotInputBody: Swift.Equatable {
    public let lexBot: ConnectClientTypes.LexBot?
    public let lexV2Bot: ConnectClientTypes.LexV2Bot?
}

extension DisassociateBotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lexBot = "LexBot"
        case lexV2Bot = "LexV2Bot"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lexBotDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.LexBot.self, forKey: .lexBot)
        lexBot = lexBotDecoded
        let lexV2BotDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.LexV2Bot.self, forKey: .lexV2Bot)
        lexV2Bot = lexV2BotDecoded
    }
}

extension DisassociateBotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateBotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateBotOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateBotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateBotOutputResponse()"}
}

extension DisassociateBotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateBotOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisassociateBotOutputResponseBody: Swift.Equatable {
}

extension DisassociateBotOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisassociateInstanceStorageConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateInstanceStorageConfigInput(associationId: \(Swift.String(describing: associationId)), instanceId: \(Swift.String(describing: instanceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension DisassociateInstanceStorageConfigInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DisassociateInstanceStorageConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateInstanceStorageConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateInstanceStorageConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateInstanceStorageConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateInstanceStorageConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateInstanceStorageConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateInstanceStorageConfigOutputError>
}

public struct DisassociateInstanceStorageConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateInstanceStorageConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateInstanceStorageConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateInstanceStorageConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let resourceType = input.operationInput.resourceType {
            let resourceTypeQueryItem = ClientRuntime.URLQueryItem(name: "resourceType".urlPercentEncoding(), value: Swift.String(resourceType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(resourceTypeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateInstanceStorageConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateInstanceStorageConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateInstanceStorageConfigOutputError>
}

public struct DisassociateInstanceStorageConfigInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateInstanceStorageConfigInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DisassociateInstanceStorageConfigInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateInstanceStorageConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let associationId = input.associationId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("associationId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/storage-config/\(associationId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DisassociateInstanceStorageConfigInput
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateInstanceStorageConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateInstanceStorageConfigOutputError>
}

public struct DisassociateInstanceStorageConfigInput: Swift.Equatable {
    /// The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
    /// This member is required.
    public var associationId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// A valid resource type.
    /// This member is required.
    public var resourceType: ConnectClientTypes.InstanceStorageResourceType?

    public init (
        associationId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        resourceType: ConnectClientTypes.InstanceStorageResourceType? = nil
    )
    {
        self.associationId = associationId
        self.instanceId = instanceId
        self.resourceType = resourceType
    }
}

struct DisassociateInstanceStorageConfigInputBody: Swift.Equatable {
}

extension DisassociateInstanceStorageConfigInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisassociateInstanceStorageConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateInstanceStorageConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateInstanceStorageConfigOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateInstanceStorageConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateInstanceStorageConfigOutputResponse()"}
}

extension DisassociateInstanceStorageConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateInstanceStorageConfigOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisassociateInstanceStorageConfigOutputResponseBody: Swift.Equatable {
}

extension DisassociateInstanceStorageConfigOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisassociateLambdaFunctionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateLambdaFunctionInput(functionArn: \(Swift.String(describing: functionArn)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension DisassociateLambdaFunctionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DisassociateLambdaFunctionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateLambdaFunctionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateLambdaFunctionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateLambdaFunctionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateLambdaFunctionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateLambdaFunctionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateLambdaFunctionOutputError>
}

public struct DisassociateLambdaFunctionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateLambdaFunctionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateLambdaFunctionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateLambdaFunctionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let functionArn = input.operationInput.functionArn {
            let functionArnQueryItem = ClientRuntime.URLQueryItem(name: "functionArn".urlPercentEncoding(), value: Swift.String(functionArn).urlPercentEncoding())
            input.builder.withQueryItem(functionArnQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateLambdaFunctionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateLambdaFunctionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateLambdaFunctionOutputError>
}

public struct DisassociateLambdaFunctionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateLambdaFunctionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DisassociateLambdaFunctionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateLambdaFunctionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/lambda-function"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DisassociateLambdaFunctionInput
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateLambdaFunctionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateLambdaFunctionOutputError>
}

public struct DisassociateLambdaFunctionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Lambda function being disassociated.
    /// This member is required.
    public var functionArn: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance..
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        functionArn: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.functionArn = functionArn
        self.instanceId = instanceId
    }
}

struct DisassociateLambdaFunctionInputBody: Swift.Equatable {
}

extension DisassociateLambdaFunctionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisassociateLambdaFunctionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateLambdaFunctionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateLambdaFunctionOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateLambdaFunctionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateLambdaFunctionOutputResponse()"}
}

extension DisassociateLambdaFunctionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateLambdaFunctionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisassociateLambdaFunctionOutputResponseBody: Swift.Equatable {
}

extension DisassociateLambdaFunctionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisassociateLexBotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateLexBotInput(botName: \(Swift.String(describing: botName)), instanceId: \(Swift.String(describing: instanceId)), lexRegion: \(Swift.String(describing: lexRegion)))"}
}

extension DisassociateLexBotInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DisassociateLexBotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateLexBotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateLexBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateLexBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateLexBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateLexBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateLexBotOutputError>
}

public struct DisassociateLexBotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateLexBotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateLexBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateLexBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let lexRegion = input.operationInput.lexRegion {
            let lexRegionQueryItem = ClientRuntime.URLQueryItem(name: "lexRegion".urlPercentEncoding(), value: Swift.String(lexRegion).urlPercentEncoding())
            input.builder.withQueryItem(lexRegionQueryItem)
        }
        if let botName = input.operationInput.botName {
            let botNameQueryItem = ClientRuntime.URLQueryItem(name: "botName".urlPercentEncoding(), value: Swift.String(botName).urlPercentEncoding())
            input.builder.withQueryItem(botNameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateLexBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateLexBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateLexBotOutputError>
}

public struct DisassociateLexBotInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateLexBotInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DisassociateLexBotInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateLexBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/lex-bot"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DisassociateLexBotInput
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateLexBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateLexBotOutputError>
}

public struct DisassociateLexBotInput: Swift.Equatable {
    /// The name of the Amazon Lex bot. Maximum character limit of 50.
    /// This member is required.
    public var botName: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The Region in which the Amazon Lex bot has been created.
    /// This member is required.
    public var lexRegion: Swift.String?

    public init (
        botName: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        lexRegion: Swift.String? = nil
    )
    {
        self.botName = botName
        self.instanceId = instanceId
        self.lexRegion = lexRegion
    }
}

struct DisassociateLexBotInputBody: Swift.Equatable {
}

extension DisassociateLexBotInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisassociateLexBotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateLexBotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateLexBotOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateLexBotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateLexBotOutputResponse()"}
}

extension DisassociateLexBotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateLexBotOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisassociateLexBotOutputResponseBody: Swift.Equatable {
}

extension DisassociateLexBotOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DisassociateQueueQuickConnectsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateQueueQuickConnectsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateQueueQuickConnectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateQueueQuickConnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateQueueQuickConnectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateQueueQuickConnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateQueueQuickConnectsOutputError>
}

extension DisassociateQueueQuickConnectsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateQueueQuickConnectsInput(instanceId: \(Swift.String(describing: instanceId)), queueId: \(Swift.String(describing: queueId)), quickConnectIds: \(Swift.String(describing: quickConnectIds)))"}
}

extension DisassociateQueueQuickConnectsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case quickConnectIds = "QuickConnectIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let quickConnectIds = quickConnectIds {
            var quickConnectIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .quickConnectIds)
            for quickconnectslist0 in quickConnectIds {
                try quickConnectIdsContainer.encode(quickconnectslist0)
            }
        }
    }
}

public struct DisassociateQueueQuickConnectsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateQueueQuickConnectsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateQueueQuickConnectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateQueueQuickConnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateQueueQuickConnectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateQueueQuickConnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateQueueQuickConnectsOutputError>
}

public struct DisassociateQueueQuickConnectsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateQueueQuickConnectsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateQueueQuickConnectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateQueueQuickConnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateQueueQuickConnectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateQueueQuickConnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateQueueQuickConnectsOutputError>
}

public struct DisassociateQueueQuickConnectsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateQueueQuickConnectsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DisassociateQueueQuickConnectsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateQueueQuickConnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let queueId = input.queueId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("queueId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/queues/\(instanceId.urlPercentEncoding())/\(queueId.urlPercentEncoding())/disassociate-quick-connects"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DisassociateQueueQuickConnectsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateQueueQuickConnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateQueueQuickConnectsOutputError>
}

public struct DisassociateQueueQuickConnectsInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier for the queue.
    /// This member is required.
    public var queueId: Swift.String?
    /// The quick connects to disassociate from the queue.
    /// This member is required.
    public var quickConnectIds: [Swift.String]?

    public init (
        instanceId: Swift.String? = nil,
        queueId: Swift.String? = nil,
        quickConnectIds: [Swift.String]? = nil
    )
    {
        self.instanceId = instanceId
        self.queueId = queueId
        self.quickConnectIds = quickConnectIds
    }
}

struct DisassociateQueueQuickConnectsInputBody: Swift.Equatable {
    public let quickConnectIds: [Swift.String]?
}

extension DisassociateQueueQuickConnectsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case quickConnectIds = "QuickConnectIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let quickConnectIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .quickConnectIds)
        var quickConnectIdsDecoded0:[Swift.String]? = nil
        if let quickConnectIdsContainer = quickConnectIdsContainer {
            quickConnectIdsDecoded0 = [Swift.String]()
            for string0 in quickConnectIdsContainer {
                if let string0 = string0 {
                    quickConnectIdsDecoded0?.append(string0)
                }
            }
        }
        quickConnectIds = quickConnectIdsDecoded0
    }
}

extension DisassociateQueueQuickConnectsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateQueueQuickConnectsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateQueueQuickConnectsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateQueueQuickConnectsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateQueueQuickConnectsOutputResponse()"}
}

extension DisassociateQueueQuickConnectsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateQueueQuickConnectsOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisassociateQueueQuickConnectsOutputResponseBody: Swift.Equatable {
}

extension DisassociateQueueQuickConnectsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DisassociateRoutingProfileQueuesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateRoutingProfileQueuesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateRoutingProfileQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateRoutingProfileQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateRoutingProfileQueuesOutputError>
}

extension DisassociateRoutingProfileQueuesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateRoutingProfileQueuesInput(instanceId: \(Swift.String(describing: instanceId)), queueReferences: \(Swift.String(describing: queueReferences)), routingProfileId: \(Swift.String(describing: routingProfileId)))"}
}

extension DisassociateRoutingProfileQueuesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueReferences = "QueueReferences"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queueReferences = queueReferences {
            var queueReferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queueReferences)
            for routingprofilequeuereferencelist0 in queueReferences {
                try queueReferencesContainer.encode(routingprofilequeuereferencelist0)
            }
        }
    }
}

public struct DisassociateRoutingProfileQueuesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateRoutingProfileQueuesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateRoutingProfileQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateRoutingProfileQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateRoutingProfileQueuesOutputError>
}

public struct DisassociateRoutingProfileQueuesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateRoutingProfileQueuesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateRoutingProfileQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateRoutingProfileQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateRoutingProfileQueuesOutputError>
}

public struct DisassociateRoutingProfileQueuesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateRoutingProfileQueuesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DisassociateRoutingProfileQueuesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let routingProfileId = input.routingProfileId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("routingProfileId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/routing-profiles/\(instanceId.urlPercentEncoding())/\(routingProfileId.urlPercentEncoding())/disassociate-queues"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DisassociateRoutingProfileQueuesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateRoutingProfileQueuesOutputError>
}

public struct DisassociateRoutingProfileQueuesInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The queues to disassociate from this routing profile.
    /// This member is required.
    public var queueReferences: [ConnectClientTypes.RoutingProfileQueueReference]?
    /// The identifier of the routing profile.
    /// This member is required.
    public var routingProfileId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        queueReferences: [ConnectClientTypes.RoutingProfileQueueReference]? = nil,
        routingProfileId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.queueReferences = queueReferences
        self.routingProfileId = routingProfileId
    }
}

struct DisassociateRoutingProfileQueuesInputBody: Swift.Equatable {
    public let queueReferences: [ConnectClientTypes.RoutingProfileQueueReference]?
}

extension DisassociateRoutingProfileQueuesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueReferences = "QueueReferences"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueReferencesContainer = try containerValues.decodeIfPresent([ConnectClientTypes.RoutingProfileQueueReference?].self, forKey: .queueReferences)
        var queueReferencesDecoded0:[ConnectClientTypes.RoutingProfileQueueReference]? = nil
        if let queueReferencesContainer = queueReferencesContainer {
            queueReferencesDecoded0 = [ConnectClientTypes.RoutingProfileQueueReference]()
            for structure0 in queueReferencesContainer {
                if let structure0 = structure0 {
                    queueReferencesDecoded0?.append(structure0)
                }
            }
        }
        queueReferences = queueReferencesDecoded0
    }
}

extension DisassociateRoutingProfileQueuesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateRoutingProfileQueuesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateRoutingProfileQueuesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateRoutingProfileQueuesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateRoutingProfileQueuesOutputResponse()"}
}

extension DisassociateRoutingProfileQueuesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateRoutingProfileQueuesOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisassociateRoutingProfileQueuesOutputResponseBody: Swift.Equatable {
}

extension DisassociateRoutingProfileQueuesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisassociateSecurityKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateSecurityKeyInput(associationId: \(Swift.String(describing: associationId)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension DisassociateSecurityKeyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DisassociateSecurityKeyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateSecurityKeyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateSecurityKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateSecurityKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateSecurityKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateSecurityKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateSecurityKeyOutputError>
}

public struct DisassociateSecurityKeyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateSecurityKeyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateSecurityKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateSecurityKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateSecurityKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateSecurityKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateSecurityKeyOutputError>
}

public struct DisassociateSecurityKeyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateSecurityKeyInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DisassociateSecurityKeyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateSecurityKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let associationId = input.associationId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("associationId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/security-key/\(associationId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DisassociateSecurityKeyInput
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateSecurityKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateSecurityKeyOutputError>
}

public struct DisassociateSecurityKeyInput: Swift.Equatable {
    /// The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
    /// This member is required.
    public var associationId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        associationId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.associationId = associationId
        self.instanceId = instanceId
    }
}

struct DisassociateSecurityKeyInputBody: Swift.Equatable {
}

extension DisassociateSecurityKeyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisassociateSecurityKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateSecurityKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateSecurityKeyOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateSecurityKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateSecurityKeyOutputResponse()"}
}

extension DisassociateSecurityKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateSecurityKeyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisassociateSecurityKeyOutputResponseBody: Swift.Equatable {
}

extension DisassociateSecurityKeyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DuplicateResourceException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DuplicateResourceException(message: \(Swift.String(describing: message)))"}
}

extension DuplicateResourceException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DuplicateResourceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A resource with the specified name already exists.
public struct DuplicateResourceException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateResourceExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DuplicateResourceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConnectClientTypes.EncryptionConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionType = "EncryptionType"
        case keyId = "KeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionType = encryptionType {
            try encodeContainer.encode(encryptionType.rawValue, forKey: .encryptionType)
        }
        if let keyId = keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.EncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
    }
}

extension ConnectClientTypes.EncryptionConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EncryptionConfig(encryptionType: \(Swift.String(describing: encryptionType)), keyId: \(Swift.String(describing: keyId)))"}
}

extension ConnectClientTypes {
    /// The encryption configuration.
    public struct EncryptionConfig: Swift.Equatable {
        /// The type of encryption.
        /// This member is required.
        public var encryptionType: ConnectClientTypes.EncryptionType?
        /// The full ARN of the encryption key.
        ///
        ///             Be sure to provide the full ARN of the encryption key, not just the ID.
        ///
        /// This member is required.
        public var keyId: Swift.String?

        public init (
            encryptionType: ConnectClientTypes.EncryptionType? = nil,
            keyId: Swift.String? = nil
        )
        {
            self.encryptionType = encryptionType
            self.keyId = keyId
        }
    }

}

extension ConnectClientTypes {
    public enum EncryptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case kms
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionType] {
            return [
                .kms,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .kms: return "KMS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EncryptionType(rawValue: rawValue) ?? EncryptionType.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.Filters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channels = "Channels"
        case queues = "Queues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channels = channels {
            var channelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .channels)
            for channels0 in channels {
                try channelsContainer.encode(channels0.rawValue)
            }
        }
        if let queues = queues {
            var queuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queues)
            for queues0 in queues {
                try queuesContainer.encode(queues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .queues)
        var queuesDecoded0:[Swift.String]? = nil
        if let queuesContainer = queuesContainer {
            queuesDecoded0 = [Swift.String]()
            for string0 in queuesContainer {
                if let string0 = string0 {
                    queuesDecoded0?.append(string0)
                }
            }
        }
        queues = queuesDecoded0
        let channelsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.Channel?].self, forKey: .channels)
        var channelsDecoded0:[ConnectClientTypes.Channel]? = nil
        if let channelsContainer = channelsContainer {
            channelsDecoded0 = [ConnectClientTypes.Channel]()
            for string0 in channelsContainer {
                if let string0 = string0 {
                    channelsDecoded0?.append(string0)
                }
            }
        }
        channels = channelsDecoded0
    }
}

extension ConnectClientTypes.Filters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Filters(channels: \(Swift.String(describing: channels)), queues: \(Swift.String(describing: queues)))"}
}

extension ConnectClientTypes {
    /// Contains the filter to apply when retrieving metrics.
    public struct Filters: Swift.Equatable {
        /// The channel to use to filter the metrics.
        public var channels: [ConnectClientTypes.Channel]?
        /// The queues to use to filter the metrics. You can specify up to 100 queues per
        ///    request.
        public var queues: [Swift.String]?

        public init (
            channels: [ConnectClientTypes.Channel]? = nil,
            queues: [Swift.String]? = nil
        )
        {
            self.channels = channels
            self.queues = queues
        }
    }

}

extension GetContactAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContactAttributesInput(initialContactId: \(Swift.String(describing: initialContactId)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension GetContactAttributesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetContactAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContactAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContactAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContactAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContactAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContactAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContactAttributesOutputError>
}

public struct GetContactAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContactAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContactAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContactAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContactAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContactAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContactAttributesOutputError>
}

public struct GetContactAttributesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContactAttributesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetContactAttributesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContactAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let initialContactId = input.initialContactId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("initialContactId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/contact/attributes/\(instanceId.urlPercentEncoding())/\(initialContactId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetContactAttributesInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetContactAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContactAttributesOutputError>
}

public struct GetContactAttributesInput: Swift.Equatable {
    /// The identifier of the initial contact.
    /// This member is required.
    public var initialContactId: Swift.String?
    /// The identifier of the Amazon Connect instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        initialContactId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.initialContactId = initialContactId
        self.instanceId = instanceId
    }
}

struct GetContactAttributesInputBody: Swift.Equatable {
}

extension GetContactAttributesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContactAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContactAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetContactAttributesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContactAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContactAttributesOutputResponse(attributes: \(Swift.String(describing: attributes)))"}
}

extension GetContactAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetContactAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.attributes = output.attributes
        } else {
            self.attributes = nil
        }
    }
}

public struct GetContactAttributesOutputResponse: Swift.Equatable {
    /// Information about the attributes.
    public var attributes: [Swift.String:Swift.String]?

    public init (
        attributes: [Swift.String:Swift.String]? = nil
    )
    {
        self.attributes = attributes
    }
}

struct GetContactAttributesOutputResponseBody: Swift.Equatable {
    public let attributes: [Swift.String:Swift.String]?
}

extension GetContactAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
    }
}

public struct GetCurrentMetricDataInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCurrentMetricDataInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCurrentMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCurrentMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCurrentMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCurrentMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCurrentMetricDataOutputError>
}

extension GetCurrentMetricDataInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCurrentMetricDataInput(currentMetrics: \(Swift.String(describing: currentMetrics)), filters: \(Swift.String(describing: filters)), groupings: \(Swift.String(describing: groupings)), instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetCurrentMetricDataInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentMetrics = "CurrentMetrics"
        case filters = "Filters"
        case groupings = "Groupings"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentMetrics = currentMetrics {
            var currentMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .currentMetrics)
            for currentmetrics0 in currentMetrics {
                try currentMetricsContainer.encode(currentmetrics0)
            }
        }
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let groupings = groupings {
            var groupingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groupings)
            for groupings0 in groupings {
                try groupingsContainer.encode(groupings0.rawValue)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct GetCurrentMetricDataInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCurrentMetricDataInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCurrentMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCurrentMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCurrentMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCurrentMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCurrentMetricDataOutputError>
}

public struct GetCurrentMetricDataInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCurrentMetricDataInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCurrentMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCurrentMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCurrentMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCurrentMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCurrentMetricDataOutputError>
}

public struct GetCurrentMetricDataInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCurrentMetricDataInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetCurrentMetricDataInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCurrentMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/metrics/current/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetCurrentMetricDataInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetCurrentMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCurrentMetricDataOutputError>
}

public struct GetCurrentMetricDataInput: Swift.Equatable {
    /// The metrics to retrieve. Specify the name and unit for each metric. The following metrics
    ///    are available. For a description of all the metrics, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html">Real-time Metrics
    ///     Definitions in the Amazon Connect Administrator Guide.
    ///
    ///             AGENTS_AFTER_CONTACT_WORK
    ///
    ///                Unit: COUNT
    ///                Name in real-time metrics report: <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#aftercallwork-real-time">ACW
    ///
    ///
    ///
    ///             AGENTS_AVAILABLE
    ///
    ///                Unit: COUNT
    ///                Name in real-time metrics report: <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#available-real-time">Available
    ///
    ///
    ///             AGENTS_ERROR
    ///
    ///                Unit: COUNT
    ///                Name in real-time metrics report: <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#error-real-time">Error
    ///
    ///
    ///             AGENTS_NON_PRODUCTIVE
    ///
    ///                Unit: COUNT
    ///                Name in real-time metrics report: <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#non-productive-time-real-time">NPT (Non-Productive Time)
    ///
    ///
    ///             AGENTS_ON_CALL
    ///
    ///                Unit: COUNT
    ///                Name in real-time metrics report: <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#on-call-real-time">On
    ///        contact
    ///
    ///
    ///             AGENTS_ON_CONTACT
    ///
    ///                Unit: COUNT
    ///                Name in real-time metrics report: <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#on-call-real-time">On
    ///        contact
    ///
    ///
    ///             AGENTS_ONLINE
    ///
    ///                Unit: COUNT
    ///                Name in real-time metrics report: <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#online-real-time">Online
    ///
    ///
    ///             AGENTS_STAFFED
    ///
    ///                Unit: COUNT
    ///                Name in real-time metrics report: <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#staffed-real-time">Staffed
    ///
    ///
    ///             CONTACTS_IN_QUEUE
    ///
    ///                Unit: COUNT
    ///                Name in real-time metrics report: <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#in-queue-real-time">In
    ///        queue
    ///
    ///
    ///             CONTACTS_SCHEDULED
    ///
    ///                Unit: COUNT
    ///                Name in real-time metrics report: <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#scheduled-real-time">Scheduled
    ///
    ///
    ///             OLDEST_CONTACT_AGE
    ///
    ///                Unit: SECONDS
    ///                When you use groupings, Unit says SECONDS and the Value is returned in SECONDS.
    ///                When you do not use groupings, Unit says SECONDS but the Value is returned in MILLISECONDS. For
    ///       example, if you get a response like this:
    ///
    ///                   { "Metric": { "Name": "OLDEST_CONTACT_AGE", "Unit": "SECONDS" }, "Value": 24113.0
    ///      }
    ///                The actual OLDEST_CONTACT_AGE is 24 seconds.
    ///
    ///                Name in real-time metrics report: <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#oldest-real-time">Oldest
    ///
    ///
    ///             SLOTS_ACTIVE
    ///
    ///                Unit: COUNT
    ///                Name in real-time metrics report: <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#active-real-time">Active
    ///
    ///
    ///             SLOTS_AVAILABLE
    ///
    ///                Unit: COUNT
    ///                Name in real-time metrics report: <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#availability-real-time">Availability
    ///
    ///
    ///
    /// This member is required.
    public var currentMetrics: [ConnectClientTypes.CurrentMetric]?
    /// The queues, up to 100, or channels, to use to filter the metrics returned. Metric data is
    ///    retrieved only for the resources associated with the queues or channels included in the filter.
    ///    You can include both queue IDs and queue ARNs in the same request. VOICE, CHAT, and TASK channels are supported.
    /// This member is required.
    public var filters: ConnectClientTypes.Filters?
    /// The grouping applied to the metrics returned. For example, when grouped by
    ///     QUEUE, the metrics returned apply to each queue rather than aggregated for all
    ///    queues. If you group by CHANNEL, you should include a Channels filter.
    ///    VOICE, CHAT, and TASK channels are supported.
    ///          If no Grouping is included in the request, a summary of metrics is
    ///    returned.
    public var groupings: [ConnectClientTypes.Grouping]?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    ///          The token expires after 5 minutes from the time it is created. Subsequent requests that use
    ///    the token must use the same request parameters as the request that generated the token.
    public var nextToken: Swift.String?

    public init (
        currentMetrics: [ConnectClientTypes.CurrentMetric]? = nil,
        filters: ConnectClientTypes.Filters? = nil,
        groupings: [ConnectClientTypes.Grouping]? = nil,
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.currentMetrics = currentMetrics
        self.filters = filters
        self.groupings = groupings
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetCurrentMetricDataInputBody: Swift.Equatable {
    public let filters: ConnectClientTypes.Filters?
    public let groupings: [ConnectClientTypes.Grouping]?
    public let currentMetrics: [ConnectClientTypes.CurrentMetric]?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int
}

extension GetCurrentMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentMetrics = "CurrentMetrics"
        case filters = "Filters"
        case groupings = "Groupings"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Filters.self, forKey: .filters)
        filters = filtersDecoded
        let groupingsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.Grouping?].self, forKey: .groupings)
        var groupingsDecoded0:[ConnectClientTypes.Grouping]? = nil
        if let groupingsContainer = groupingsContainer {
            groupingsDecoded0 = [ConnectClientTypes.Grouping]()
            for string0 in groupingsContainer {
                if let string0 = string0 {
                    groupingsDecoded0?.append(string0)
                }
            }
        }
        groupings = groupingsDecoded0
        let currentMetricsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.CurrentMetric?].self, forKey: .currentMetrics)
        var currentMetricsDecoded0:[ConnectClientTypes.CurrentMetric]? = nil
        if let currentMetricsContainer = currentMetricsContainer {
            currentMetricsDecoded0 = [ConnectClientTypes.CurrentMetric]()
            for structure0 in currentMetricsContainer {
                if let structure0 = structure0 {
                    currentMetricsDecoded0?.append(structure0)
                }
            }
        }
        currentMetrics = currentMetricsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetCurrentMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCurrentMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCurrentMetricDataOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCurrentMetricDataOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCurrentMetricDataOutputResponse(dataSnapshotTime: \(Swift.String(describing: dataSnapshotTime)), metricResults: \(Swift.String(describing: metricResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetCurrentMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCurrentMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataSnapshotTime = output.dataSnapshotTime
            self.metricResults = output.metricResults
            self.nextToken = output.nextToken
        } else {
            self.dataSnapshotTime = nil
            self.metricResults = nil
            self.nextToken = nil
        }
    }
}

public struct GetCurrentMetricDataOutputResponse: Swift.Equatable {
    /// The time at which the metrics were retrieved and cached for pagination.
    public var dataSnapshotTime: ClientRuntime.Date?
    /// Information about the real-time metrics.
    public var metricResults: [ConnectClientTypes.CurrentMetricResult]?
    /// If there are additional results, this is the token for the next set of results.
    ///          The token expires after 5 minutes from the time it is created. Subsequent requests that use
    ///    the token must use the same request parameters as the request that generated the token.
    public var nextToken: Swift.String?

    public init (
        dataSnapshotTime: ClientRuntime.Date? = nil,
        metricResults: [ConnectClientTypes.CurrentMetricResult]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dataSnapshotTime = dataSnapshotTime
        self.metricResults = metricResults
        self.nextToken = nextToken
    }
}

struct GetCurrentMetricDataOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let metricResults: [ConnectClientTypes.CurrentMetricResult]?
    public let dataSnapshotTime: ClientRuntime.Date?
}

extension GetCurrentMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSnapshotTime = "DataSnapshotTime"
        case metricResults = "MetricResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let metricResultsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.CurrentMetricResult?].self, forKey: .metricResults)
        var metricResultsDecoded0:[ConnectClientTypes.CurrentMetricResult]? = nil
        if let metricResultsContainer = metricResultsContainer {
            metricResultsDecoded0 = [ConnectClientTypes.CurrentMetricResult]()
            for structure0 in metricResultsContainer {
                if let structure0 = structure0 {
                    metricResultsDecoded0?.append(structure0)
                }
            }
        }
        metricResults = metricResultsDecoded0
        let dataSnapshotTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .dataSnapshotTime)
        dataSnapshotTime = dataSnapshotTimeDecoded
    }
}

extension GetFederationTokenInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetFederationTokenInput(instanceId: \(Swift.String(describing: instanceId)))"}
}

extension GetFederationTokenInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetFederationTokenInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetFederationTokenInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetFederationTokenInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetFederationTokenOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetFederationTokenInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetFederationTokenOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetFederationTokenOutputError>
}

public struct GetFederationTokenInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetFederationTokenInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetFederationTokenInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetFederationTokenOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetFederationTokenInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetFederationTokenOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetFederationTokenOutputError>
}

public struct GetFederationTokenInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetFederationTokenInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetFederationTokenInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetFederationTokenOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/user/federate/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetFederationTokenInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetFederationTokenOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetFederationTokenOutputError>
}

public struct GetFederationTokenInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        instanceId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
    }
}

struct GetFederationTokenInputBody: Swift.Equatable {
}

extension GetFederationTokenInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetFederationTokenOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetFederationTokenOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFoundException" : self = .userNotFoundException(try UserNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetFederationTokenOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case userNotFoundException(UserNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetFederationTokenOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetFederationTokenOutputResponse(credentials: \(Swift.String(describing: credentials)))"}
}

extension GetFederationTokenOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetFederationTokenOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.credentials = output.credentials
        } else {
            self.credentials = nil
        }
    }
}

public struct GetFederationTokenOutputResponse: Swift.Equatable {
    /// The credentials to use for federation.
    public var credentials: ConnectClientTypes.Credentials?

    public init (
        credentials: ConnectClientTypes.Credentials? = nil
    )
    {
        self.credentials = credentials
    }
}

struct GetFederationTokenOutputResponseBody: Swift.Equatable {
    public let credentials: ConnectClientTypes.Credentials?
}

extension GetFederationTokenOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case credentials = "Credentials"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let credentialsDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Credentials.self, forKey: .credentials)
        credentials = credentialsDecoded
    }
}

public struct GetMetricDataInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricDataInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricDataOutputError>
}

extension GetMetricDataInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMetricDataInput(endTime: \(Swift.String(describing: endTime)), filters: \(Swift.String(describing: filters)), groupings: \(Swift.String(describing: groupings)), historicalMetrics: \(Swift.String(describing: historicalMetrics)), instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), startTime: \(Swift.String(describing: startTime)))"}
}

extension GetMetricDataInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case filters = "Filters"
        case groupings = "Groupings"
        case historicalMetrics = "HistoricalMetrics"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let groupings = groupings {
            var groupingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groupings)
            for groupings0 in groupings {
                try groupingsContainer.encode(groupings0.rawValue)
            }
        }
        if let historicalMetrics = historicalMetrics {
            var historicalMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .historicalMetrics)
            for historicalmetrics0 in historicalMetrics {
                try historicalMetricsContainer.encode(historicalmetrics0)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }
}

public struct GetMetricDataInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricDataInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricDataOutputError>
}

public struct GetMetricDataInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricDataInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricDataOutputError>
}

public struct GetMetricDataInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMetricDataInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetMetricDataInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/metrics/historical/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetMetricDataInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMetricDataOutputError>
}

public struct GetMetricDataInput: Swift.Equatable {
    /// The timestamp, in UNIX Epoch time format, at which to end the reporting interval for the
    ///    retrieval of historical metrics data. The time must be specified using an interval of 5 minutes,
    ///    such as 11:00, 11:05, 11:10, and must be later than the start time timestamp.
    ///          The time range between the start and end time must be less than 24 hours.
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// The queues, up to 100, or channels, to use to filter the metrics returned. Metric data is
    ///    retrieved only for the resources associated with the queues or channels included in the filter.
    ///    You can include both queue IDs and queue ARNs in the same request. VOICE, CHAT, and TASK channels are supported.
    ///
    ///             To filter by Queues, enter the queue
    ///     ID/ARN, not the name of the queue.
    ///
    /// This member is required.
    public var filters: ConnectClientTypes.Filters?
    /// The grouping applied to the metrics returned. For example, when results are grouped by
    ///    queue, the metrics returned are grouped by queue. The values returned apply to the metrics for
    ///    each queue rather than aggregated for all queues.
    ///
    ///          If no grouping is specified, a summary of metrics for all queues is returned.
    public var groupings: [ConnectClientTypes.Grouping]?
    /// The metrics to retrieve. Specify the name, unit, and statistic for each metric. The
    ///    following historical metrics are available. For a description of each metric, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html">Historical Metrics Definitions in the Amazon Connect Administrator
    ///    Guide.
    ///
    ///             This API does not support a contacts
    ///     incoming metric (there's no CONTACTS_INCOMING metric missing from the documented list).
    ///
    ///
    ///
    ///             ABANDON_TIME
    ///
    ///                Unit: SECONDS
    ///                Statistic: AVG
    ///
    ///             AFTER_CONTACT_WORK_TIME
    ///
    ///                Unit: SECONDS
    ///                Statistic: AVG
    ///
    ///             API_CONTACTS_HANDLED
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             CALLBACK_CONTACTS_HANDLED
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             CONTACTS_ABANDONED
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             CONTACTS_AGENT_HUNG_UP_FIRST
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             CONTACTS_CONSULTED
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             CONTACTS_HANDLED
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             CONTACTS_HANDLED_INCOMING
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             CONTACTS_HANDLED_OUTBOUND
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             CONTACTS_HOLD_ABANDONS
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             CONTACTS_MISSED
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             CONTACTS_QUEUED
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             CONTACTS_TRANSFERRED_IN
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             CONTACTS_TRANSFERRED_IN_FROM_QUEUE
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             CONTACTS_TRANSFERRED_OUT
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             CONTACTS_TRANSFERRED_OUT_FROM_QUEUE
    ///
    ///                Unit: COUNT
    ///                Statistic: SUM
    ///
    ///             HANDLE_TIME
    ///
    ///                Unit: SECONDS
    ///                Statistic: AVG
    ///
    ///             HOLD_TIME
    ///
    ///                Unit: SECONDS
    ///                Statistic: AVG
    ///
    ///             INTERACTION_AND_HOLD_TIME
    ///
    ///                Unit: SECONDS
    ///                Statistic: AVG
    ///
    ///             INTERACTION_TIME
    ///
    ///                Unit: SECONDS
    ///                Statistic: AVG
    ///
    ///             OCCUPANCY
    ///
    ///                Unit: PERCENT
    ///                Statistic: AVG
    ///
    ///             QUEUE_ANSWER_TIME
    ///
    ///                Unit: SECONDS
    ///                Statistic: AVG
    ///
    ///             QUEUED_TIME
    ///
    ///                Unit: SECONDS
    ///                Statistic: MAX
    ///
    ///             SERVICE_LEVEL
    ///
    ///                You can include up to 20 SERVICE_LEVEL metrics in a request.
    ///                Unit: PERCENT
    ///                Statistic: AVG
    ///                Threshold: For ThresholdValue, enter any whole number from 1 to 604800
    ///       (inclusive), in seconds. For Comparison, you must enter LT (for
    ///       "Less than").
    ///
    ///
    /// This member is required.
    public var historicalMetrics: [ConnectClientTypes.HistoricalMetric]?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The timestamp, in UNIX Epoch time format, at which to start the reporting interval for the
    ///    retrieval of historical metrics data. The time must be specified using a multiple of 5 minutes,
    ///    such as 10:05, 10:10, 10:15.
    ///          The start time cannot be earlier than 24 hours before the time of the request. Historical
    ///    metrics are available only for 24 hours.
    /// This member is required.
    public var startTime: ClientRuntime.Date?

    public init (
        endTime: ClientRuntime.Date? = nil,
        filters: ConnectClientTypes.Filters? = nil,
        groupings: [ConnectClientTypes.Grouping]? = nil,
        historicalMetrics: [ConnectClientTypes.HistoricalMetric]? = nil,
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.endTime = endTime
        self.filters = filters
        self.groupings = groupings
        self.historicalMetrics = historicalMetrics
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.startTime = startTime
    }
}

struct GetMetricDataInputBody: Swift.Equatable {
    public let startTime: ClientRuntime.Date?
    public let endTime: ClientRuntime.Date?
    public let filters: ConnectClientTypes.Filters?
    public let groupings: [ConnectClientTypes.Grouping]?
    public let historicalMetrics: [ConnectClientTypes.HistoricalMetric]?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int
}

extension GetMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case filters = "Filters"
        case groupings = "Groupings"
        case historicalMetrics = "HistoricalMetrics"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case startTime = "StartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Filters.self, forKey: .filters)
        filters = filtersDecoded
        let groupingsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.Grouping?].self, forKey: .groupings)
        var groupingsDecoded0:[ConnectClientTypes.Grouping]? = nil
        if let groupingsContainer = groupingsContainer {
            groupingsDecoded0 = [ConnectClientTypes.Grouping]()
            for string0 in groupingsContainer {
                if let string0 = string0 {
                    groupingsDecoded0?.append(string0)
                }
            }
        }
        groupings = groupingsDecoded0
        let historicalMetricsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.HistoricalMetric?].self, forKey: .historicalMetrics)
        var historicalMetricsDecoded0:[ConnectClientTypes.HistoricalMetric]? = nil
        if let historicalMetricsContainer = historicalMetricsContainer {
            historicalMetricsDecoded0 = [ConnectClientTypes.HistoricalMetric]()
            for structure0 in historicalMetricsContainer {
                if let structure0 = structure0 {
                    historicalMetricsDecoded0?.append(structure0)
                }
            }
        }
        historicalMetrics = historicalMetricsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMetricDataOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMetricDataOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMetricDataOutputResponse(metricResults: \(Swift.String(describing: metricResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricResults = output.metricResults
            self.nextToken = output.nextToken
        } else {
            self.metricResults = nil
            self.nextToken = nil
        }
    }
}

public struct GetMetricDataOutputResponse: Swift.Equatable {
    /// Information about the historical metrics.
    ///          If no grouping is specified, a summary of metric data is returned.
    public var metricResults: [ConnectClientTypes.HistoricalMetricResult]?
    /// If there are additional results, this is the token for the next set of results.
    ///          The token expires after 5 minutes from the time it is created. Subsequent requests that use
    ///    the token must use the same request parameters as the request that generated the token.
    public var nextToken: Swift.String?

    public init (
        metricResults: [ConnectClientTypes.HistoricalMetricResult]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.metricResults = metricResults
        self.nextToken = nextToken
    }
}

struct GetMetricDataOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let metricResults: [ConnectClientTypes.HistoricalMetricResult]?
}

extension GetMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricResults = "MetricResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let metricResultsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.HistoricalMetricResult?].self, forKey: .metricResults)
        var metricResultsDecoded0:[ConnectClientTypes.HistoricalMetricResult]? = nil
        if let metricResultsContainer = metricResultsContainer {
            metricResultsDecoded0 = [ConnectClientTypes.HistoricalMetricResult]()
            for structure0 in metricResultsContainer {
                if let structure0 = structure0 {
                    metricResultsDecoded0?.append(structure0)
                }
            }
        }
        metricResults = metricResultsDecoded0
    }
}

extension ConnectClientTypes {
    public enum Grouping: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case channel
        case queue
        case sdkUnknown(Swift.String)

        public static var allCases: [Grouping] {
            return [
                .channel,
                .queue,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .channel: return "CHANNEL"
            case .queue: return "QUEUE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Grouping(rawValue: rawValue) ?? Grouping.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.HierarchyGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case hierarchyPath = "HierarchyPath"
        case id = "Id"
        case levelId = "LevelId"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let hierarchyPath = hierarchyPath {
            try encodeContainer.encode(hierarchyPath, forKey: .hierarchyPath)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let levelId = levelId {
            try encodeContainer.encode(levelId, forKey: .levelId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let levelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .levelId)
        levelId = levelIdDecoded
        let hierarchyPathDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyPath.self, forKey: .hierarchyPath)
        hierarchyPath = hierarchyPathDecoded
    }
}

extension ConnectClientTypes.HierarchyGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HierarchyGroup(arn: \(Swift.String(describing: arn)), hierarchyPath: \(Swift.String(describing: hierarchyPath)), id: \(Swift.String(describing: id)), levelId: \(Swift.String(describing: levelId)), name: \(Swift.String(describing: name)))"}
}

extension ConnectClientTypes {
    /// Contains information about a hierarchy group.
    public struct HierarchyGroup: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the hierarchy group.
        public var arn: Swift.String?
        /// Information about the levels in the hierarchy group.
        public var hierarchyPath: ConnectClientTypes.HierarchyPath?
        /// The identifier of the hierarchy group.
        public var id: Swift.String?
        /// The identifier of the level in the hierarchy group.
        public var levelId: Swift.String?
        /// The name of the hierarchy group.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            hierarchyPath: ConnectClientTypes.HierarchyPath? = nil,
            id: Swift.String? = nil,
            levelId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.hierarchyPath = hierarchyPath
            self.id = id
            self.levelId = levelId
            self.name = name
        }
    }

}

extension ConnectClientTypes.HierarchyGroupSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension ConnectClientTypes.HierarchyGroupSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HierarchyGroupSummary(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)))"}
}

extension ConnectClientTypes {
    /// Contains summary information about a hierarchy group.
    public struct HierarchyGroupSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the hierarchy group.
        public var arn: Swift.String?
        /// The identifier of the hierarchy group.
        public var id: Swift.String?
        /// The name of the hierarchy group.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
        }
    }

}

extension ConnectClientTypes.HierarchyLevel: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension ConnectClientTypes.HierarchyLevel: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HierarchyLevel(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)))"}
}

extension ConnectClientTypes {
    /// Contains information about a hierarchy level.
    public struct HierarchyLevel: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the hierarchy level.
        public var arn: Swift.String?
        /// The identifier of the hierarchy level.
        public var id: Swift.String?
        /// The name of the hierarchy level.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
        }
    }

}

extension ConnectClientTypes.HierarchyLevelUpdate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension ConnectClientTypes.HierarchyLevelUpdate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HierarchyLevelUpdate(name: \(Swift.String(describing: name)))"}
}

extension ConnectClientTypes {
    /// Contains information about the hierarchy level to update.
    public struct HierarchyLevelUpdate: Swift.Equatable {
        /// The name of the user hierarchy level. Must not be more than 50 characters.
        /// This member is required.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension ConnectClientTypes.HierarchyPath: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case levelFive = "LevelFive"
        case levelFour = "LevelFour"
        case levelOne = "LevelOne"
        case levelThree = "LevelThree"
        case levelTwo = "LevelTwo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let levelFive = levelFive {
            try encodeContainer.encode(levelFive, forKey: .levelFive)
        }
        if let levelFour = levelFour {
            try encodeContainer.encode(levelFour, forKey: .levelFour)
        }
        if let levelOne = levelOne {
            try encodeContainer.encode(levelOne, forKey: .levelOne)
        }
        if let levelThree = levelThree {
            try encodeContainer.encode(levelThree, forKey: .levelThree)
        }
        if let levelTwo = levelTwo {
            try encodeContainer.encode(levelTwo, forKey: .levelTwo)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let levelOneDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyGroupSummary.self, forKey: .levelOne)
        levelOne = levelOneDecoded
        let levelTwoDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyGroupSummary.self, forKey: .levelTwo)
        levelTwo = levelTwoDecoded
        let levelThreeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyGroupSummary.self, forKey: .levelThree)
        levelThree = levelThreeDecoded
        let levelFourDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyGroupSummary.self, forKey: .levelFour)
        levelFour = levelFourDecoded
        let levelFiveDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyGroupSummary.self, forKey: .levelFive)
        levelFive = levelFiveDecoded
    }
}

extension ConnectClientTypes.HierarchyPath: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HierarchyPath(levelFive: \(Swift.String(describing: levelFive)), levelFour: \(Swift.String(describing: levelFour)), levelOne: \(Swift.String(describing: levelOne)), levelThree: \(Swift.String(describing: levelThree)), levelTwo: \(Swift.String(describing: levelTwo)))"}
}

extension ConnectClientTypes {
    /// Contains information about the levels of a hierarchy group.
    public struct HierarchyPath: Swift.Equatable {
        /// Information about level five.
        public var levelFive: ConnectClientTypes.HierarchyGroupSummary?
        /// Information about level four.
        public var levelFour: ConnectClientTypes.HierarchyGroupSummary?
        /// Information about level one.
        public var levelOne: ConnectClientTypes.HierarchyGroupSummary?
        /// Information about level three.
        public var levelThree: ConnectClientTypes.HierarchyGroupSummary?
        /// Information about level two.
        public var levelTwo: ConnectClientTypes.HierarchyGroupSummary?

        public init (
            levelFive: ConnectClientTypes.HierarchyGroupSummary? = nil,
            levelFour: ConnectClientTypes.HierarchyGroupSummary? = nil,
            levelOne: ConnectClientTypes.HierarchyGroupSummary? = nil,
            levelThree: ConnectClientTypes.HierarchyGroupSummary? = nil,
            levelTwo: ConnectClientTypes.HierarchyGroupSummary? = nil
        )
        {
            self.levelFive = levelFive
            self.levelFour = levelFour
            self.levelOne = levelOne
            self.levelThree = levelThree
            self.levelTwo = levelTwo
        }
    }

}

extension ConnectClientTypes.HierarchyStructure: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case levelFive = "LevelFive"
        case levelFour = "LevelFour"
        case levelOne = "LevelOne"
        case levelThree = "LevelThree"
        case levelTwo = "LevelTwo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let levelFive = levelFive {
            try encodeContainer.encode(levelFive, forKey: .levelFive)
        }
        if let levelFour = levelFour {
            try encodeContainer.encode(levelFour, forKey: .levelFour)
        }
        if let levelOne = levelOne {
            try encodeContainer.encode(levelOne, forKey: .levelOne)
        }
        if let levelThree = levelThree {
            try encodeContainer.encode(levelThree, forKey: .levelThree)
        }
        if let levelTwo = levelTwo {
            try encodeContainer.encode(levelTwo, forKey: .levelTwo)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let levelOneDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyLevel.self, forKey: .levelOne)
        levelOne = levelOneDecoded
        let levelTwoDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyLevel.self, forKey: .levelTwo)
        levelTwo = levelTwoDecoded
        let levelThreeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyLevel.self, forKey: .levelThree)
        levelThree = levelThreeDecoded
        let levelFourDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyLevel.self, forKey: .levelFour)
        levelFour = levelFourDecoded
        let levelFiveDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyLevel.self, forKey: .levelFive)
        levelFive = levelFiveDecoded
    }
}

extension ConnectClientTypes.HierarchyStructure: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HierarchyStructure(levelFive: \(Swift.String(describing: levelFive)), levelFour: \(Swift.String(describing: levelFour)), levelOne: \(Swift.String(describing: levelOne)), levelThree: \(Swift.String(describing: levelThree)), levelTwo: \(Swift.String(describing: levelTwo)))"}
}

extension ConnectClientTypes {
    /// Contains information about a hierarchy structure.
    public struct HierarchyStructure: Swift.Equatable {
        /// Information about level five.
        public var levelFive: ConnectClientTypes.HierarchyLevel?
        /// Information about level four.
        public var levelFour: ConnectClientTypes.HierarchyLevel?
        /// Information about level one.
        public var levelOne: ConnectClientTypes.HierarchyLevel?
        /// Information about level three.
        public var levelThree: ConnectClientTypes.HierarchyLevel?
        /// Information about level two.
        public var levelTwo: ConnectClientTypes.HierarchyLevel?

        public init (
            levelFive: ConnectClientTypes.HierarchyLevel? = nil,
            levelFour: ConnectClientTypes.HierarchyLevel? = nil,
            levelOne: ConnectClientTypes.HierarchyLevel? = nil,
            levelThree: ConnectClientTypes.HierarchyLevel? = nil,
            levelTwo: ConnectClientTypes.HierarchyLevel? = nil
        )
        {
            self.levelFive = levelFive
            self.levelFour = levelFour
            self.levelOne = levelOne
            self.levelThree = levelThree
            self.levelTwo = levelTwo
        }
    }

}

extension ConnectClientTypes.HierarchyStructureUpdate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case levelFive = "LevelFive"
        case levelFour = "LevelFour"
        case levelOne = "LevelOne"
        case levelThree = "LevelThree"
        case levelTwo = "LevelTwo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let levelFive = levelFive {
            try encodeContainer.encode(levelFive, forKey: .levelFive)
        }
        if let levelFour = levelFour {
            try encodeContainer.encode(levelFour, forKey: .levelFour)
        }
        if let levelOne = levelOne {
            try encodeContainer.encode(levelOne, forKey: .levelOne)
        }
        if let levelThree = levelThree {
            try encodeContainer.encode(levelThree, forKey: .levelThree)
        }
        if let levelTwo = levelTwo {
            try encodeContainer.encode(levelTwo, forKey: .levelTwo)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let levelOneDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyLevelUpdate.self, forKey: .levelOne)
        levelOne = levelOneDecoded
        let levelTwoDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyLevelUpdate.self, forKey: .levelTwo)
        levelTwo = levelTwoDecoded
        let levelThreeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyLevelUpdate.self, forKey: .levelThree)
        levelThree = levelThreeDecoded
        let levelFourDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyLevelUpdate.self, forKey: .levelFour)
        levelFour = levelFourDecoded
        let levelFiveDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyLevelUpdate.self, forKey: .levelFive)
        levelFive = levelFiveDecoded
    }
}

extension ConnectClientTypes.HierarchyStructureUpdate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HierarchyStructureUpdate(levelFive: \(Swift.String(describing: levelFive)), levelFour: \(Swift.String(describing: levelFour)), levelOne: \(Swift.String(describing: levelOne)), levelThree: \(Swift.String(describing: levelThree)), levelTwo: \(Swift.String(describing: levelTwo)))"}
}

extension ConnectClientTypes {
    /// Contains information about the level hierarchy to update.
    public struct HierarchyStructureUpdate: Swift.Equatable {
        /// The update for level five.
        public var levelFive: ConnectClientTypes.HierarchyLevelUpdate?
        /// The update for level four.
        public var levelFour: ConnectClientTypes.HierarchyLevelUpdate?
        /// The
        ///    update
        ///    for level one.
        public var levelOne: ConnectClientTypes.HierarchyLevelUpdate?
        /// The update for level three.
        public var levelThree: ConnectClientTypes.HierarchyLevelUpdate?
        /// The update for level two.
        public var levelTwo: ConnectClientTypes.HierarchyLevelUpdate?

        public init (
            levelFive: ConnectClientTypes.HierarchyLevelUpdate? = nil,
            levelFour: ConnectClientTypes.HierarchyLevelUpdate? = nil,
            levelOne: ConnectClientTypes.HierarchyLevelUpdate? = nil,
            levelThree: ConnectClientTypes.HierarchyLevelUpdate? = nil,
            levelTwo: ConnectClientTypes.HierarchyLevelUpdate? = nil
        )
        {
            self.levelFive = levelFive
            self.levelFour = levelFour
            self.levelOne = levelOne
            self.levelThree = levelThree
            self.levelTwo = levelTwo
        }
    }

}

extension ConnectClientTypes.HistoricalMetric: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case statistic = "Statistic"
        case threshold = "Threshold"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let statistic = statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if let threshold = threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HistoricalMetricName.self, forKey: .name)
        name = nameDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Threshold.self, forKey: .threshold)
        threshold = thresholdDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Statistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let unitDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Unit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension ConnectClientTypes.HistoricalMetric: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HistoricalMetric(name: \(Swift.String(describing: name)), statistic: \(Swift.String(describing: statistic)), threshold: \(Swift.String(describing: threshold)), unit: \(Swift.String(describing: unit)))"}
}

extension ConnectClientTypes {
    /// Contains information about a historical metric. For a description of each metric, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html">Historical Metrics Definitions in the Amazon Connect Administrator
    ///    Guide.
    public struct HistoricalMetric: Swift.Equatable {
        /// The name of the metric.
        public var name: ConnectClientTypes.HistoricalMetricName?
        /// The statistic for the metric.
        public var statistic: ConnectClientTypes.Statistic?
        /// The threshold for the metric, used with service level metrics.
        public var threshold: ConnectClientTypes.Threshold?
        /// The unit for the metric.
        public var unit: ConnectClientTypes.Unit?

        public init (
            name: ConnectClientTypes.HistoricalMetricName? = nil,
            statistic: ConnectClientTypes.Statistic? = nil,
            threshold: ConnectClientTypes.Threshold? = nil,
            unit: ConnectClientTypes.Unit? = nil
        )
        {
            self.name = name
            self.statistic = statistic
            self.threshold = threshold
            self.unit = unit
        }
    }

}

extension ConnectClientTypes.HistoricalMetricData: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metric = "Metric"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metric = metric {
            try encodeContainer.encode(metric, forKey: .metric)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HistoricalMetric.self, forKey: .metric)
        metric = metricDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value)
        value = valueDecoded
    }
}

extension ConnectClientTypes.HistoricalMetricData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HistoricalMetricData(metric: \(Swift.String(describing: metric)), value: \(Swift.String(describing: value)))"}
}

extension ConnectClientTypes {
    /// Contains the data for a historical metric.
    public struct HistoricalMetricData: Swift.Equatable {
        /// Information about the metric.
        public var metric: ConnectClientTypes.HistoricalMetric?
        /// The value of the metric.
        public var value: Swift.Double?

        public init (
            metric: ConnectClientTypes.HistoricalMetric? = nil,
            value: Swift.Double? = nil
        )
        {
            self.metric = metric
            self.value = value
        }
    }

}

extension ConnectClientTypes {
    /// The historical metric names.
    public enum HistoricalMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case abandonTime
        case afterContactWorkTime
        case apiContactsHandled
        case callbackContactsHandled
        case contactsAbandoned
        case contactsAgentHungUpFirst
        case contactsConsulted
        case contactsHandled
        case contactsHandledIncoming
        case contactsHandledOutbound
        case contactsHoldAbandons
        case contactsMissed
        case contactsQueued
        case contactsTransferredIn
        case contactsTransferredInFromQueue
        case contactsTransferredOut
        case contactsTransferredOutFromQueue
        case handleTime
        case holdTime
        case interactionAndHoldTime
        case interactionTime
        case occupancy
        case queuedTime
        case queueAnswerTime
        case serviceLevel
        case sdkUnknown(Swift.String)

        public static var allCases: [HistoricalMetricName] {
            return [
                .abandonTime,
                .afterContactWorkTime,
                .apiContactsHandled,
                .callbackContactsHandled,
                .contactsAbandoned,
                .contactsAgentHungUpFirst,
                .contactsConsulted,
                .contactsHandled,
                .contactsHandledIncoming,
                .contactsHandledOutbound,
                .contactsHoldAbandons,
                .contactsMissed,
                .contactsQueued,
                .contactsTransferredIn,
                .contactsTransferredInFromQueue,
                .contactsTransferredOut,
                .contactsTransferredOutFromQueue,
                .handleTime,
                .holdTime,
                .interactionAndHoldTime,
                .interactionTime,
                .occupancy,
                .queuedTime,
                .queueAnswerTime,
                .serviceLevel,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .abandonTime: return "ABANDON_TIME"
            case .afterContactWorkTime: return "AFTER_CONTACT_WORK_TIME"
            case .apiContactsHandled: return "API_CONTACTS_HANDLED"
            case .callbackContactsHandled: return "CALLBACK_CONTACTS_HANDLED"
            case .contactsAbandoned: return "CONTACTS_ABANDONED"
            case .contactsAgentHungUpFirst: return "CONTACTS_AGENT_HUNG_UP_FIRST"
            case .contactsConsulted: return "CONTACTS_CONSULTED"
            case .contactsHandled: return "CONTACTS_HANDLED"
            case .contactsHandledIncoming: return "CONTACTS_HANDLED_INCOMING"
            case .contactsHandledOutbound: return "CONTACTS_HANDLED_OUTBOUND"
            case .contactsHoldAbandons: return "CONTACTS_HOLD_ABANDONS"
            case .contactsMissed: return "CONTACTS_MISSED"
            case .contactsQueued: return "CONTACTS_QUEUED"
            case .contactsTransferredIn: return "CONTACTS_TRANSFERRED_IN"
            case .contactsTransferredInFromQueue: return "CONTACTS_TRANSFERRED_IN_FROM_QUEUE"
            case .contactsTransferredOut: return "CONTACTS_TRANSFERRED_OUT"
            case .contactsTransferredOutFromQueue: return "CONTACTS_TRANSFERRED_OUT_FROM_QUEUE"
            case .handleTime: return "HANDLE_TIME"
            case .holdTime: return "HOLD_TIME"
            case .interactionAndHoldTime: return "INTERACTION_AND_HOLD_TIME"
            case .interactionTime: return "INTERACTION_TIME"
            case .occupancy: return "OCCUPANCY"
            case .queuedTime: return "QUEUED_TIME"
            case .queueAnswerTime: return "QUEUE_ANSWER_TIME"
            case .serviceLevel: return "SERVICE_LEVEL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HistoricalMetricName(rawValue: rawValue) ?? HistoricalMetricName.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.HistoricalMetricResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collections = "Collections"
        case dimensions = "Dimensions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collections = collections {
            var collectionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .collections)
            for historicalmetricdatacollections0 in collections {
                try collectionsContainer.encode(historicalmetricdatacollections0)
            }
        }
        if let dimensions = dimensions {
            try encodeContainer.encode(dimensions, forKey: .dimensions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionsDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Dimensions.self, forKey: .dimensions)
        dimensions = dimensionsDecoded
        let collectionsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.HistoricalMetricData?].self, forKey: .collections)
        var collectionsDecoded0:[ConnectClientTypes.HistoricalMetricData]? = nil
        if let collectionsContainer = collectionsContainer {
            collectionsDecoded0 = [ConnectClientTypes.HistoricalMetricData]()
            for structure0 in collectionsContainer {
                if let structure0 = structure0 {
                    collectionsDecoded0?.append(structure0)
                }
            }
        }
        collections = collectionsDecoded0
    }
}

extension ConnectClientTypes.HistoricalMetricResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HistoricalMetricResult(collections: \(Swift.String(describing: collections)), dimensions: \(Swift.String(describing: dimensions)))"}
}

extension ConnectClientTypes {
    /// Contains information about the historical metrics retrieved.
    public struct HistoricalMetricResult: Swift.Equatable {
        /// The set of metrics.
        public var collections: [ConnectClientTypes.HistoricalMetricData]?
        /// The dimension for the metrics.
        public var dimensions: ConnectClientTypes.Dimensions?

        public init (
            collections: [ConnectClientTypes.HistoricalMetricData]? = nil,
            dimensions: ConnectClientTypes.Dimensions? = nil
        )
        {
            self.collections = collections
            self.dimensions = dimensions
        }
    }

}

extension ConnectClientTypes.HoursOfOperation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case config = "Config"
        case description = "Description"
        case hoursOfOperationArn = "HoursOfOperationArn"
        case hoursOfOperationId = "HoursOfOperationId"
        case name = "Name"
        case tags = "Tags"
        case timeZone = "TimeZone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let config = config {
            var configContainer = encodeContainer.nestedUnkeyedContainer(forKey: .config)
            for hoursofoperationconfiglist0 in config {
                try configContainer.encode(hoursofoperationconfiglist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let hoursOfOperationArn = hoursOfOperationArn {
            try encodeContainer.encode(hoursOfOperationArn, forKey: .hoursOfOperationArn)
        }
        if let hoursOfOperationId = hoursOfOperationId {
            try encodeContainer.encode(hoursOfOperationId, forKey: .hoursOfOperationId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeZone = timeZone {
            try encodeContainer.encode(timeZone, forKey: .timeZone)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hoursOfOperationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hoursOfOperationId)
        hoursOfOperationId = hoursOfOperationIdDecoded
        let hoursOfOperationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hoursOfOperationArn)
        hoursOfOperationArn = hoursOfOperationArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
        let configContainer = try containerValues.decodeIfPresent([ConnectClientTypes.HoursOfOperationConfig?].self, forKey: .config)
        var configDecoded0:[ConnectClientTypes.HoursOfOperationConfig]? = nil
        if let configContainer = configContainer {
            configDecoded0 = [ConnectClientTypes.HoursOfOperationConfig]()
            for structure0 in configContainer {
                if let structure0 = structure0 {
                    configDecoded0?.append(structure0)
                }
            }
        }
        config = configDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ConnectClientTypes.HoursOfOperation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HoursOfOperation(config: \(Swift.String(describing: config)), description: \(Swift.String(describing: description)), hoursOfOperationArn: \(Swift.String(describing: hoursOfOperationArn)), hoursOfOperationId: \(Swift.String(describing: hoursOfOperationId)), name: \(Swift.String(describing: name)), tags: \(Swift.String(describing: tags)), timeZone: \(Swift.String(describing: timeZone)))"}
}

extension ConnectClientTypes {
    /// Information about of the hours of operation.
    public struct HoursOfOperation: Swift.Equatable {
        /// Configuration information for the hours of operation.
        public var config: [ConnectClientTypes.HoursOfOperationConfig]?
        /// The description for the hours of operation.
        public var description: Swift.String?
        /// The Amazon Resource Name (ARN) for the hours of operation.
        public var hoursOfOperationArn: Swift.String?
        /// The identifier for the hours of operation.
        public var hoursOfOperationId: Swift.String?
        /// The name for the hours of operation.
        public var name: Swift.String?
        /// One or more tags.
        public var tags: [Swift.String:Swift.String]?
        /// The time zone for the hours of operation.
        public var timeZone: Swift.String?

        public init (
            config: [ConnectClientTypes.HoursOfOperationConfig]? = nil,
            description: Swift.String? = nil,
            hoursOfOperationArn: Swift.String? = nil,
            hoursOfOperationId: Swift.String? = nil,
            name: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            timeZone: Swift.String? = nil
        )
        {
            self.config = config
            self.description = description
            self.hoursOfOperationArn = hoursOfOperationArn
            self.hoursOfOperationId = hoursOfOperationId
            self.name = name
            self.tags = tags
            self.timeZone = timeZone
        }
    }

}

extension ConnectClientTypes.HoursOfOperationConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case day = "Day"
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let day = day {
            try encodeContainer.encode(day.rawValue, forKey: .day)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dayDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HoursOfOperationDays.self, forKey: .day)
        day = dayDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HoursOfOperationTimeSlice.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HoursOfOperationTimeSlice.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension ConnectClientTypes.HoursOfOperationConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HoursOfOperationConfig(day: \(Swift.String(describing: day)), endTime: \(Swift.String(describing: endTime)), startTime: \(Swift.String(describing: startTime)))"}
}

extension ConnectClientTypes {
    /// Contains information about the hours of operation.
    public struct HoursOfOperationConfig: Swift.Equatable {
        /// The day that the hours of operation applies to.
        /// This member is required.
        public var day: ConnectClientTypes.HoursOfOperationDays?
        /// The end time that your contact center is closes.
        /// This member is required.
        public var endTime: ConnectClientTypes.HoursOfOperationTimeSlice?
        /// The start time that your contact center is open.
        /// This member is required.
        public var startTime: ConnectClientTypes.HoursOfOperationTimeSlice?

        public init (
            day: ConnectClientTypes.HoursOfOperationDays? = nil,
            endTime: ConnectClientTypes.HoursOfOperationTimeSlice? = nil,
            startTime: ConnectClientTypes.HoursOfOperationTimeSlice? = nil
        )
        {
            self.day = day
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension ConnectClientTypes {
    public enum HoursOfOperationDays: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case friday
        case monday
        case saturday
        case sunday
        case thursday
        case tuesday
        case wednesday
        case sdkUnknown(Swift.String)

        public static var allCases: [HoursOfOperationDays] {
            return [
                .friday,
                .monday,
                .saturday,
                .sunday,
                .thursday,
                .tuesday,
                .wednesday,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .friday: return "FRIDAY"
            case .monday: return "MONDAY"
            case .saturday: return "SATURDAY"
            case .sunday: return "SUNDAY"
            case .thursday: return "THURSDAY"
            case .tuesday: return "TUESDAY"
            case .wednesday: return "WEDNESDAY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HoursOfOperationDays(rawValue: rawValue) ?? HoursOfOperationDays.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.HoursOfOperationSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension ConnectClientTypes.HoursOfOperationSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HoursOfOperationSummary(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)))"}
}

extension ConnectClientTypes {
    /// Contains summary information about hours of operation for a contact center.
    public struct HoursOfOperationSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the hours of operation.
        public var arn: Swift.String?
        /// The identifier of the hours of operation.
        public var id: Swift.String?
        /// The name of the hours of operation.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
        }
    }

}

extension ConnectClientTypes.HoursOfOperationTimeSlice: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hours = "Hours"
        case minutes = "Minutes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if hours != 0 {
            try encodeContainer.encode(hours, forKey: .hours)
        }
        if minutes != 0 {
            try encodeContainer.encode(minutes, forKey: .minutes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hoursDecoded = try containerValues.decode(Swift.Int.self, forKey: .hours)
        hours = hoursDecoded
        let minutesDecoded = try containerValues.decode(Swift.Int.self, forKey: .minutes)
        minutes = minutesDecoded
    }
}

extension ConnectClientTypes.HoursOfOperationTimeSlice: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HoursOfOperationTimeSlice(hours: \(Swift.String(describing: hours)), minutes: \(Swift.String(describing: minutes)))"}
}

extension ConnectClientTypes {
    /// The start time or end time for an hours of operation.
    public struct HoursOfOperationTimeSlice: Swift.Equatable {
        /// The hours.
        /// This member is required.
        public var hours: Swift.Int
        /// The minutes.
        /// This member is required.
        public var minutes: Swift.Int

        public init (
            hours: Swift.Int = 0,
            minutes: Swift.Int = 0
        )
        {
            self.hours = hours
            self.minutes = minutes
        }
    }

}

extension ConnectClientTypes.Instance: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case createdTime = "CreatedTime"
        case id = "Id"
        case identityManagementType = "IdentityManagementType"
        case inboundCallsEnabled = "InboundCallsEnabled"
        case instanceAlias = "InstanceAlias"
        case instanceStatus = "InstanceStatus"
        case outboundCallsEnabled = "OutboundCallsEnabled"
        case serviceRole = "ServiceRole"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let identityManagementType = identityManagementType {
            try encodeContainer.encode(identityManagementType.rawValue, forKey: .identityManagementType)
        }
        if let inboundCallsEnabled = inboundCallsEnabled {
            try encodeContainer.encode(inboundCallsEnabled, forKey: .inboundCallsEnabled)
        }
        if let instanceAlias = instanceAlias {
            try encodeContainer.encode(instanceAlias, forKey: .instanceAlias)
        }
        if let instanceStatus = instanceStatus {
            try encodeContainer.encode(instanceStatus.rawValue, forKey: .instanceStatus)
        }
        if let outboundCallsEnabled = outboundCallsEnabled {
            try encodeContainer.encode(outboundCallsEnabled, forKey: .outboundCallsEnabled)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let identityManagementTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.DirectoryType.self, forKey: .identityManagementType)
        identityManagementType = identityManagementTypeDecoded
        let instanceAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceAlias)
        instanceAlias = instanceAliasDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let instanceStatusDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.InstanceStatus.self, forKey: .instanceStatus)
        instanceStatus = instanceStatusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.InstanceStatusReason.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let inboundCallsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .inboundCallsEnabled)
        inboundCallsEnabled = inboundCallsEnabledDecoded
        let outboundCallsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .outboundCallsEnabled)
        outboundCallsEnabled = outboundCallsEnabledDecoded
    }
}

extension ConnectClientTypes.Instance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Instance(arn: \(Swift.String(describing: arn)), createdTime: \(Swift.String(describing: createdTime)), id: \(Swift.String(describing: id)), identityManagementType: \(Swift.String(describing: identityManagementType)), inboundCallsEnabled: \(Swift.String(describing: inboundCallsEnabled)), instanceAlias: \(Swift.String(describing: instanceAlias)), instanceStatus: \(Swift.String(describing: instanceStatus)), outboundCallsEnabled: \(Swift.String(describing: outboundCallsEnabled)), serviceRole: \(Swift.String(describing: serviceRole)), statusReason: \(Swift.String(describing: statusReason)))"}
}

extension ConnectClientTypes {
    /// The Amazon Connect instance.
    public struct Instance: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the instance.
        public var arn: Swift.String?
        /// When the instance was created.
        public var createdTime: ClientRuntime.Date?
        /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
        public var id: Swift.String?
        /// The identity management type.
        public var identityManagementType: ConnectClientTypes.DirectoryType?
        /// Whether inbound calls are enabled.
        public var inboundCallsEnabled: Swift.Bool?
        /// The alias of instance.
        public var instanceAlias: Swift.String?
        /// The state of the instance.
        public var instanceStatus: ConnectClientTypes.InstanceStatus?
        /// Whether outbound calls are enabled.
        public var outboundCallsEnabled: Swift.Bool?
        /// The service role of the instance.
        public var serviceRole: Swift.String?
        /// Relevant
        ///    details why the instance was not successfully created.
        public var statusReason: ConnectClientTypes.InstanceStatusReason?

        public init (
            arn: Swift.String? = nil,
            createdTime: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            identityManagementType: ConnectClientTypes.DirectoryType? = nil,
            inboundCallsEnabled: Swift.Bool? = nil,
            instanceAlias: Swift.String? = nil,
            instanceStatus: ConnectClientTypes.InstanceStatus? = nil,
            outboundCallsEnabled: Swift.Bool? = nil,
            serviceRole: Swift.String? = nil,
            statusReason: ConnectClientTypes.InstanceStatusReason? = nil
        )
        {
            self.arn = arn
            self.createdTime = createdTime
            self.id = id
            self.identityManagementType = identityManagementType
            self.inboundCallsEnabled = inboundCallsEnabled
            self.instanceAlias = instanceAlias
            self.instanceStatus = instanceStatus
            self.outboundCallsEnabled = outboundCallsEnabled
            self.serviceRole = serviceRole
            self.statusReason = statusReason
        }
    }

}

extension ConnectClientTypes {
    public enum InstanceAttributeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case autoResolveBestVoices
        case contactflowLogs
        case contactLens
        case earlyMedia
        case inboundCalls
        case outboundCalls
        case useCustomTtsVoices
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceAttributeType] {
            return [
                .autoResolveBestVoices,
                .contactflowLogs,
                .contactLens,
                .earlyMedia,
                .inboundCalls,
                .outboundCalls,
                .useCustomTtsVoices,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .autoResolveBestVoices: return "AUTO_RESOLVE_BEST_VOICES"
            case .contactflowLogs: return "CONTACTFLOW_LOGS"
            case .contactLens: return "CONTACT_LENS"
            case .earlyMedia: return "EARLY_MEDIA"
            case .inboundCalls: return "INBOUND_CALLS"
            case .outboundCalls: return "OUTBOUND_CALLS"
            case .useCustomTtsVoices: return "USE_CUSTOM_TTS_VOICES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceAttributeType(rawValue: rawValue) ?? InstanceAttributeType.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes {
    public enum InstanceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creationFailed
        case creationInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceStatus] {
            return [
                .active,
                .creationFailed,
                .creationInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creationFailed: return "CREATION_FAILED"
            case .creationInProgress: return "CREATION_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceStatus(rawValue: rawValue) ?? InstanceStatus.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.InstanceStatusReason: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConnectClientTypes.InstanceStatusReason: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceStatusReason(message: \(Swift.String(describing: message)))"}
}

extension ConnectClientTypes {
    /// Relevant
    ///    details why the instance was not successfully created.
    public struct InstanceStatusReason: Swift.Equatable {
        /// The message.
        public var message: Swift.String?

        public init (
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension ConnectClientTypes.InstanceStorageConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
        case kinesisFirehoseConfig = "KinesisFirehoseConfig"
        case kinesisStreamConfig = "KinesisStreamConfig"
        case kinesisVideoStreamConfig = "KinesisVideoStreamConfig"
        case s3Config = "S3Config"
        case storageType = "StorageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationId = associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let kinesisFirehoseConfig = kinesisFirehoseConfig {
            try encodeContainer.encode(kinesisFirehoseConfig, forKey: .kinesisFirehoseConfig)
        }
        if let kinesisStreamConfig = kinesisStreamConfig {
            try encodeContainer.encode(kinesisStreamConfig, forKey: .kinesisStreamConfig)
        }
        if let kinesisVideoStreamConfig = kinesisVideoStreamConfig {
            try encodeContainer.encode(kinesisVideoStreamConfig, forKey: .kinesisVideoStreamConfig)
        }
        if let s3Config = s3Config {
            try encodeContainer.encode(s3Config, forKey: .s3Config)
        }
        if let storageType = storageType {
            try encodeContainer.encode(storageType.rawValue, forKey: .storageType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.StorageType.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let s3ConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.S3Config.self, forKey: .s3Config)
        s3Config = s3ConfigDecoded
        let kinesisVideoStreamConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.KinesisVideoStreamConfig.self, forKey: .kinesisVideoStreamConfig)
        kinesisVideoStreamConfig = kinesisVideoStreamConfigDecoded
        let kinesisStreamConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.KinesisStreamConfig.self, forKey: .kinesisStreamConfig)
        kinesisStreamConfig = kinesisStreamConfigDecoded
        let kinesisFirehoseConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.KinesisFirehoseConfig.self, forKey: .kinesisFirehoseConfig)
        kinesisFirehoseConfig = kinesisFirehoseConfigDecoded
    }
}

extension ConnectClientTypes.InstanceStorageConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceStorageConfig(associationId: \(Swift.String(describing: associationId)), kinesisFirehoseConfig: \(Swift.String(describing: kinesisFirehoseConfig)), kinesisStreamConfig: \(Swift.String(describing: kinesisStreamConfig)), kinesisVideoStreamConfig: \(Swift.String(describing: kinesisVideoStreamConfig)), s3Config: \(Swift.String(describing: s3Config)), storageType: \(Swift.String(describing: storageType)))"}
}

extension ConnectClientTypes {
    /// The storage configuration for the instance.
    public struct InstanceStorageConfig: Swift.Equatable {
        /// The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
        public var associationId: Swift.String?
        /// The configuration of the Kinesis Firehose delivery stream.
        public var kinesisFirehoseConfig: ConnectClientTypes.KinesisFirehoseConfig?
        /// The configuration of the Kinesis data stream.
        public var kinesisStreamConfig: ConnectClientTypes.KinesisStreamConfig?
        /// The configuration of the Kinesis video stream.
        public var kinesisVideoStreamConfig: ConnectClientTypes.KinesisVideoStreamConfig?
        /// The S3 bucket
        ///    configuration.
        public var s3Config: ConnectClientTypes.S3Config?
        /// A valid storage type.
        /// This member is required.
        public var storageType: ConnectClientTypes.StorageType?

        public init (
            associationId: Swift.String? = nil,
            kinesisFirehoseConfig: ConnectClientTypes.KinesisFirehoseConfig? = nil,
            kinesisStreamConfig: ConnectClientTypes.KinesisStreamConfig? = nil,
            kinesisVideoStreamConfig: ConnectClientTypes.KinesisVideoStreamConfig? = nil,
            s3Config: ConnectClientTypes.S3Config? = nil,
            storageType: ConnectClientTypes.StorageType? = nil
        )
        {
            self.associationId = associationId
            self.kinesisFirehoseConfig = kinesisFirehoseConfig
            self.kinesisStreamConfig = kinesisStreamConfig
            self.kinesisVideoStreamConfig = kinesisVideoStreamConfig
            self.s3Config = s3Config
            self.storageType = storageType
        }
    }

}

extension ConnectClientTypes {
    public enum InstanceStorageResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case agentEvents
        case callRecordings
        case chatTranscripts
        case contactTraceRecords
        case mediaStreams
        case scheduledReports
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceStorageResourceType] {
            return [
                .agentEvents,
                .callRecordings,
                .chatTranscripts,
                .contactTraceRecords,
                .mediaStreams,
                .scheduledReports,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .agentEvents: return "AGENT_EVENTS"
            case .callRecordings: return "CALL_RECORDINGS"
            case .chatTranscripts: return "CHAT_TRANSCRIPTS"
            case .contactTraceRecords: return "CONTACT_TRACE_RECORDS"
            case .mediaStreams: return "MEDIA_STREAMS"
            case .scheduledReports: return "SCHEDULED_REPORTS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceStorageResourceType(rawValue: rawValue) ?? InstanceStorageResourceType.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.InstanceSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case createdTime = "CreatedTime"
        case id = "Id"
        case identityManagementType = "IdentityManagementType"
        case inboundCallsEnabled = "InboundCallsEnabled"
        case instanceAlias = "InstanceAlias"
        case instanceStatus = "InstanceStatus"
        case outboundCallsEnabled = "OutboundCallsEnabled"
        case serviceRole = "ServiceRole"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let identityManagementType = identityManagementType {
            try encodeContainer.encode(identityManagementType.rawValue, forKey: .identityManagementType)
        }
        if let inboundCallsEnabled = inboundCallsEnabled {
            try encodeContainer.encode(inboundCallsEnabled, forKey: .inboundCallsEnabled)
        }
        if let instanceAlias = instanceAlias {
            try encodeContainer.encode(instanceAlias, forKey: .instanceAlias)
        }
        if let instanceStatus = instanceStatus {
            try encodeContainer.encode(instanceStatus.rawValue, forKey: .instanceStatus)
        }
        if let outboundCallsEnabled = outboundCallsEnabled {
            try encodeContainer.encode(outboundCallsEnabled, forKey: .outboundCallsEnabled)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let identityManagementTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.DirectoryType.self, forKey: .identityManagementType)
        identityManagementType = identityManagementTypeDecoded
        let instanceAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceAlias)
        instanceAlias = instanceAliasDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let instanceStatusDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.InstanceStatus.self, forKey: .instanceStatus)
        instanceStatus = instanceStatusDecoded
        let inboundCallsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .inboundCallsEnabled)
        inboundCallsEnabled = inboundCallsEnabledDecoded
        let outboundCallsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .outboundCallsEnabled)
        outboundCallsEnabled = outboundCallsEnabledDecoded
    }
}

extension ConnectClientTypes.InstanceSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceSummary(arn: \(Swift.String(describing: arn)), createdTime: \(Swift.String(describing: createdTime)), id: \(Swift.String(describing: id)), identityManagementType: \(Swift.String(describing: identityManagementType)), inboundCallsEnabled: \(Swift.String(describing: inboundCallsEnabled)), instanceAlias: \(Swift.String(describing: instanceAlias)), instanceStatus: \(Swift.String(describing: instanceStatus)), outboundCallsEnabled: \(Swift.String(describing: outboundCallsEnabled)), serviceRole: \(Swift.String(describing: serviceRole)))"}
}

extension ConnectClientTypes {
    /// Information about the instance.
    public struct InstanceSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the instance.
        public var arn: Swift.String?
        /// When the instance was created.
        public var createdTime: ClientRuntime.Date?
        /// The identifier of the instance.
        public var id: Swift.String?
        /// The identity management type of the instance.
        public var identityManagementType: ConnectClientTypes.DirectoryType?
        /// Whether inbound calls are enabled.
        public var inboundCallsEnabled: Swift.Bool?
        /// The alias of the instance.
        public var instanceAlias: Swift.String?
        /// The state of the instance.
        public var instanceStatus: ConnectClientTypes.InstanceStatus?
        /// Whether outbound calls are enabled.
        public var outboundCallsEnabled: Swift.Bool?
        /// The service role of the instance.
        public var serviceRole: Swift.String?

        public init (
            arn: Swift.String? = nil,
            createdTime: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            identityManagementType: ConnectClientTypes.DirectoryType? = nil,
            inboundCallsEnabled: Swift.Bool? = nil,
            instanceAlias: Swift.String? = nil,
            instanceStatus: ConnectClientTypes.InstanceStatus? = nil,
            outboundCallsEnabled: Swift.Bool? = nil,
            serviceRole: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdTime = createdTime
            self.id = id
            self.identityManagementType = identityManagementType
            self.inboundCallsEnabled = inboundCallsEnabled
            self.instanceAlias = instanceAlias
            self.instanceStatus = instanceStatus
            self.outboundCallsEnabled = outboundCallsEnabled
            self.serviceRole = serviceRole
        }
    }

}

extension ConnectClientTypes.IntegrationAssociationSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceId = "InstanceId"
        case integrationArn = "IntegrationArn"
        case integrationAssociationArn = "IntegrationAssociationArn"
        case integrationAssociationId = "IntegrationAssociationId"
        case integrationType = "IntegrationType"
        case sourceApplicationName = "SourceApplicationName"
        case sourceApplicationUrl = "SourceApplicationUrl"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let integrationArn = integrationArn {
            try encodeContainer.encode(integrationArn, forKey: .integrationArn)
        }
        if let integrationAssociationArn = integrationAssociationArn {
            try encodeContainer.encode(integrationAssociationArn, forKey: .integrationAssociationArn)
        }
        if let integrationAssociationId = integrationAssociationId {
            try encodeContainer.encode(integrationAssociationId, forKey: .integrationAssociationId)
        }
        if let integrationType = integrationType {
            try encodeContainer.encode(integrationType.rawValue, forKey: .integrationType)
        }
        if let sourceApplicationName = sourceApplicationName {
            try encodeContainer.encode(sourceApplicationName, forKey: .sourceApplicationName)
        }
        if let sourceApplicationUrl = sourceApplicationUrl {
            try encodeContainer.encode(sourceApplicationUrl, forKey: .sourceApplicationUrl)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType.rawValue, forKey: .sourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integrationAssociationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationAssociationId)
        integrationAssociationId = integrationAssociationIdDecoded
        let integrationAssociationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationAssociationArn)
        integrationAssociationArn = integrationAssociationArnDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let integrationTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.IntegrationType.self, forKey: .integrationType)
        integrationType = integrationTypeDecoded
        let integrationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationArn)
        integrationArn = integrationArnDecoded
        let sourceApplicationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceApplicationUrl)
        sourceApplicationUrl = sourceApplicationUrlDecoded
        let sourceApplicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceApplicationName)
        sourceApplicationName = sourceApplicationNameDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
    }
}

extension ConnectClientTypes.IntegrationAssociationSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IntegrationAssociationSummary(instanceId: \(Swift.String(describing: instanceId)), integrationArn: \(Swift.String(describing: integrationArn)), integrationAssociationArn: \(Swift.String(describing: integrationAssociationArn)), integrationAssociationId: \(Swift.String(describing: integrationAssociationId)), integrationType: \(Swift.String(describing: integrationType)), sourceApplicationName: \(Swift.String(describing: sourceApplicationName)), sourceApplicationUrl: \(Swift.String(describing: sourceApplicationUrl)), sourceType: \(Swift.String(describing: sourceType)))"}
}

extension ConnectClientTypes {
    /// Contains summary information about the associated AppIntegrations.
    public struct IntegrationAssociationSummary: Swift.Equatable {
        /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
        public var instanceId: Swift.String?
        /// The Amazon Resource Name (ARN) for the AppIntegration.
        public var integrationArn: Swift.String?
        /// The Amazon Resource Name (ARN) for the AppIntegration association.
        public var integrationAssociationArn: Swift.String?
        /// The identifier for the AppIntegration association.
        public var integrationAssociationId: Swift.String?
        /// The integration type.
        public var integrationType: ConnectClientTypes.IntegrationType?
        /// The user-provided, friendly name for the external application.
        public var sourceApplicationName: Swift.String?
        /// The URL for the external application.
        public var sourceApplicationUrl: Swift.String?
        /// The name of the source.
        public var sourceType: ConnectClientTypes.SourceType?

        public init (
            instanceId: Swift.String? = nil,
            integrationArn: Swift.String? = nil,
            integrationAssociationArn: Swift.String? = nil,
            integrationAssociationId: Swift.String? = nil,
            integrationType: ConnectClientTypes.IntegrationType? = nil,
            sourceApplicationName: Swift.String? = nil,
            sourceApplicationUrl: Swift.String? = nil,
            sourceType: ConnectClientTypes.SourceType? = nil
        )
        {
            self.instanceId = instanceId
            self.integrationArn = integrationArn
            self.integrationAssociationArn = integrationAssociationArn
            self.integrationAssociationId = integrationAssociationId
            self.integrationType = integrationType
            self.sourceApplicationName = sourceApplicationName
            self.sourceApplicationUrl = sourceApplicationUrl
            self.sourceType = sourceType
        }
    }

}

extension ConnectClientTypes {
    public enum IntegrationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case event
        case pinpointApp
        case voiceId
        case wisdomAssistant
        case wisdomKnowledgeBase
        case sdkUnknown(Swift.String)

        public static var allCases: [IntegrationType] {
            return [
                .event,
                .pinpointApp,
                .voiceId,
                .wisdomAssistant,
                .wisdomKnowledgeBase,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .event: return "EVENT"
            case .pinpointApp: return "PINPOINT_APP"
            case .voiceId: return "VOICE_ID"
            case .wisdomAssistant: return "WISDOM_ASSISTANT"
            case .wisdomKnowledgeBase: return "WISDOM_KNOWLEDGE_BASE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IntegrationType(rawValue: rawValue) ?? IntegrationType.sdkUnknown(rawValue)
        }
    }
}

extension InternalServiceException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServiceException(message: \(Swift.String(describing: message)))"}
}

extension InternalServiceException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalServiceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Request processing failed because of an error or failure with the service.
public struct InternalServiceException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// The message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServiceExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalServiceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidContactFlowException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidContactFlowException(problems: \(Swift.String(describing: problems)))"}
}

extension InvalidContactFlowException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidContactFlowExceptionBody = try responseDecoder.decode(responseBody: data)
            self.problems = output.problems
        } else {
            self.problems = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The contact flow is not valid.
public struct InvalidContactFlowException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The problems with the contact flow. Please fix before trying again.
    public var problems: [ConnectClientTypes.ProblemDetail]?

    public init (
        problems: [ConnectClientTypes.ProblemDetail]? = nil
    )
    {
        self.problems = problems
    }
}

struct InvalidContactFlowExceptionBody: Swift.Equatable {
    public let problems: [ConnectClientTypes.ProblemDetail]?
}

extension InvalidContactFlowExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case problems
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let problemsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.ProblemDetail?].self, forKey: .problems)
        var problemsDecoded0:[ConnectClientTypes.ProblemDetail]? = nil
        if let problemsContainer = problemsContainer {
            problemsDecoded0 = [ConnectClientTypes.ProblemDetail]()
            for structure0 in problemsContainer {
                if let structure0 = structure0 {
                    problemsDecoded0?.append(structure0)
                }
            }
        }
        problems = problemsDecoded0
    }
}

extension InvalidParameterException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidParameterException(message: \(Swift.String(describing: message)))"}
}

extension InvalidParameterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidParameterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// One or more of the specified parameters are not valid.
public struct InvalidParameterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message about the parameters.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRequestException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidRequestException(message: \(Swift.String(describing: message)))"}
}

extension InvalidRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request is not valid.
public struct InvalidRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message about the request.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConnectClientTypes.KinesisFirehoseConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firehoseArn = "FirehoseArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firehoseArn = firehoseArn {
            try encodeContainer.encode(firehoseArn, forKey: .firehoseArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firehoseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firehoseArn)
        firehoseArn = firehoseArnDecoded
    }
}

extension ConnectClientTypes.KinesisFirehoseConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KinesisFirehoseConfig(firehoseArn: \(Swift.String(describing: firehoseArn)))"}
}

extension ConnectClientTypes {
    /// Configuration information of a Kinesis Data Firehose delivery stream.
    public struct KinesisFirehoseConfig: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the delivery stream.
        /// This member is required.
        public var firehoseArn: Swift.String?

        public init (
            firehoseArn: Swift.String? = nil
        )
        {
            self.firehoseArn = firehoseArn
        }
    }

}

extension ConnectClientTypes.KinesisStreamConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamArn = "StreamArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamArn = streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
    }
}

extension ConnectClientTypes.KinesisStreamConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KinesisStreamConfig(streamArn: \(Swift.String(describing: streamArn)))"}
}

extension ConnectClientTypes {
    /// Configuration information of a Kinesis data stream.
    public struct KinesisStreamConfig: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the data stream.
        /// This member is required.
        public var streamArn: Swift.String?

        public init (
            streamArn: Swift.String? = nil
        )
        {
            self.streamArn = streamArn
        }
    }

}

extension ConnectClientTypes.KinesisVideoStreamConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionConfig = "EncryptionConfig"
        case prefix = "Prefix"
        case retentionPeriodHours = "RetentionPeriodHours"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionConfig = encryptionConfig {
            try encodeContainer.encode(encryptionConfig, forKey: .encryptionConfig)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
        if retentionPeriodHours != 0 {
            try encodeContainer.encode(retentionPeriodHours, forKey: .retentionPeriodHours)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let retentionPeriodHoursDecoded = try containerValues.decode(Swift.Int.self, forKey: .retentionPeriodHours)
        retentionPeriodHours = retentionPeriodHoursDecoded
        let encryptionConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.EncryptionConfig.self, forKey: .encryptionConfig)
        encryptionConfig = encryptionConfigDecoded
    }
}

extension ConnectClientTypes.KinesisVideoStreamConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KinesisVideoStreamConfig(encryptionConfig: \(Swift.String(describing: encryptionConfig)), prefix: \(Swift.String(describing: prefix)), retentionPeriodHours: \(Swift.String(describing: retentionPeriodHours)))"}
}

extension ConnectClientTypes {
    /// Configuration information of a Kinesis video stream.
    public struct KinesisVideoStreamConfig: Swift.Equatable {
        /// The encryption configuration.
        /// This member is required.
        public var encryptionConfig: ConnectClientTypes.EncryptionConfig?
        /// The prefix of the video stream.
        /// This member is required.
        public var prefix: Swift.String?
        /// The number of hours data is retained in the stream. Kinesis Video Streams retains the data
        ///    in a data store that is associated with the stream.
        ///          The default value is 0, indicating that the stream does not persist data.
        /// This member is required.
        public var retentionPeriodHours: Swift.Int

        public init (
            encryptionConfig: ConnectClientTypes.EncryptionConfig? = nil,
            prefix: Swift.String? = nil,
            retentionPeriodHours: Swift.Int = 0
        )
        {
            self.encryptionConfig = encryptionConfig
            self.prefix = prefix
            self.retentionPeriodHours = retentionPeriodHours
        }
    }

}

extension ConnectClientTypes.LexBot: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lexRegion = "LexRegion"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lexRegion = lexRegion {
            try encodeContainer.encode(lexRegion, forKey: .lexRegion)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let lexRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lexRegion)
        lexRegion = lexRegionDecoded
    }
}

extension ConnectClientTypes.LexBot: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LexBot(lexRegion: \(Swift.String(describing: lexRegion)), name: \(Swift.String(describing: name)))"}
}

extension ConnectClientTypes {
    /// Configuration information of an Amazon Lex bot.
    public struct LexBot: Swift.Equatable {
        /// The Region that the Amazon Lex bot was created in.
        public var lexRegion: Swift.String?
        /// The name of the Amazon Lex bot.
        public var name: Swift.String?

        public init (
            lexRegion: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.lexRegion = lexRegion
            self.name = name
        }
    }

}

extension ConnectClientTypes.LexBotConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lexBot = "LexBot"
        case lexV2Bot = "LexV2Bot"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lexBot = lexBot {
            try encodeContainer.encode(lexBot, forKey: .lexBot)
        }
        if let lexV2Bot = lexV2Bot {
            try encodeContainer.encode(lexV2Bot, forKey: .lexV2Bot)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lexBotDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.LexBot.self, forKey: .lexBot)
        lexBot = lexBotDecoded
        let lexV2BotDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.LexV2Bot.self, forKey: .lexV2Bot)
        lexV2Bot = lexV2BotDecoded
    }
}

extension ConnectClientTypes.LexBotConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LexBotConfig(lexBot: \(Swift.String(describing: lexBot)), lexV2Bot: \(Swift.String(describing: lexV2Bot)))"}
}

extension ConnectClientTypes {
    /// Configuration information of an Amazon Lex or Amazon Lex V2 bot.
    public struct LexBotConfig: Swift.Equatable {
        /// Configuration information of an Amazon Lex bot.
        public var lexBot: ConnectClientTypes.LexBot?
        /// Configuration information of an Amazon Lex V2 bot.
        public var lexV2Bot: ConnectClientTypes.LexV2Bot?

        public init (
            lexBot: ConnectClientTypes.LexBot? = nil,
            lexV2Bot: ConnectClientTypes.LexV2Bot? = nil
        )
        {
            self.lexBot = lexBot
            self.lexV2Bot = lexV2Bot
        }
    }

}

extension ConnectClientTypes.LexV2Bot: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasArn = "AliasArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasArn = aliasArn {
            try encodeContainer.encode(aliasArn, forKey: .aliasArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasArn)
        aliasArn = aliasArnDecoded
    }
}

extension ConnectClientTypes.LexV2Bot: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LexV2Bot(aliasArn: \(Swift.String(describing: aliasArn)))"}
}

extension ConnectClientTypes {
    /// Configuration information of an Amazon Lex V2 bot.
    public struct LexV2Bot: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon Lex V2 bot.
        public var aliasArn: Swift.String?

        public init (
            aliasArn: Swift.String? = nil
        )
        {
            self.aliasArn = aliasArn
        }
    }

}

extension ConnectClientTypes {
    public enum LexVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case v1
        case v2
        case sdkUnknown(Swift.String)

        public static var allCases: [LexVersion] {
            return [
                .v1,
                .v2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .v1: return "V1"
            case .v2: return "V2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LexVersion(rawValue: rawValue) ?? LexVersion.sdkUnknown(rawValue)
        }
    }
}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The allowed limit for the resource has been exceeded.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message about the limit.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListAgentStatusesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAgentStatusesInput(agentStatusTypes: \(Swift.String(describing: agentStatusTypes)), instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListAgentStatusesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListAgentStatusesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAgentStatusesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAgentStatusesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAgentStatusesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAgentStatusesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAgentStatusesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAgentStatusesOutputError>
}

public struct ListAgentStatusesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAgentStatusesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAgentStatusesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAgentStatusesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let agentStatusTypes = input.operationInput.agentStatusTypes {
            agentStatusTypes.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "AgentStatusTypes".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAgentStatusesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAgentStatusesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAgentStatusesOutputError>
}

public struct ListAgentStatusesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAgentStatusesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListAgentStatusesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAgentStatusesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/agent-status/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListAgentStatusesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListAgentStatusesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAgentStatusesOutputError>
}

public struct ListAgentStatusesInput: Swift.Equatable {
    /// Available agent status types.
    public var agentStatusTypes: [ConnectClientTypes.AgentStatusType]?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        agentStatusTypes: [ConnectClientTypes.AgentStatusType]? = nil,
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.agentStatusTypes = agentStatusTypes
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListAgentStatusesInputBody: Swift.Equatable {
}

extension ListAgentStatusesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListAgentStatusesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAgentStatusesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAgentStatusesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAgentStatusesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAgentStatusesOutputResponse(agentStatusSummaryList: \(Swift.String(describing: agentStatusSummaryList)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListAgentStatusesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAgentStatusesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentStatusSummaryList = output.agentStatusSummaryList
            self.nextToken = output.nextToken
        } else {
            self.agentStatusSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListAgentStatusesOutputResponse: Swift.Equatable {
    /// A summary of agent statuses.
    public var agentStatusSummaryList: [ConnectClientTypes.AgentStatusSummary]?
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?

    public init (
        agentStatusSummaryList: [ConnectClientTypes.AgentStatusSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.agentStatusSummaryList = agentStatusSummaryList
        self.nextToken = nextToken
    }
}

struct ListAgentStatusesOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let agentStatusSummaryList: [ConnectClientTypes.AgentStatusSummary]?
}

extension ListAgentStatusesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentStatusSummaryList = "AgentStatusSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let agentStatusSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.AgentStatusSummary?].self, forKey: .agentStatusSummaryList)
        var agentStatusSummaryListDecoded0:[ConnectClientTypes.AgentStatusSummary]? = nil
        if let agentStatusSummaryListContainer = agentStatusSummaryListContainer {
            agentStatusSummaryListDecoded0 = [ConnectClientTypes.AgentStatusSummary]()
            for structure0 in agentStatusSummaryListContainer {
                if let structure0 = structure0 {
                    agentStatusSummaryListDecoded0?.append(structure0)
                }
            }
        }
        agentStatusSummaryList = agentStatusSummaryListDecoded0
    }
}

extension ListApprovedOriginsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListApprovedOriginsInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListApprovedOriginsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListApprovedOriginsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListApprovedOriginsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListApprovedOriginsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListApprovedOriginsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListApprovedOriginsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListApprovedOriginsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListApprovedOriginsOutputError>
}

public struct ListApprovedOriginsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListApprovedOriginsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListApprovedOriginsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListApprovedOriginsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListApprovedOriginsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListApprovedOriginsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListApprovedOriginsOutputError>
}

public struct ListApprovedOriginsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListApprovedOriginsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListApprovedOriginsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListApprovedOriginsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/approved-origins"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListApprovedOriginsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListApprovedOriginsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListApprovedOriginsOutputError>
}

public struct ListApprovedOriginsInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListApprovedOriginsInputBody: Swift.Equatable {
}

extension ListApprovedOriginsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListApprovedOriginsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListApprovedOriginsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListApprovedOriginsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListApprovedOriginsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListApprovedOriginsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), origins: \(Swift.String(describing: origins)))"}
}

extension ListApprovedOriginsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListApprovedOriginsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.origins = output.origins
        } else {
            self.nextToken = nil
            self.origins = nil
        }
    }
}

public struct ListApprovedOriginsOutputResponse: Swift.Equatable {
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?
    /// The approved origins.
    public var origins: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        origins: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.origins = origins
    }
}

struct ListApprovedOriginsOutputResponseBody: Swift.Equatable {
    public let origins: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListApprovedOriginsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case origins = "Origins"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let originsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .origins)
        var originsDecoded0:[Swift.String]? = nil
        if let originsContainer = originsContainer {
            originsDecoded0 = [Swift.String]()
            for string0 in originsContainer {
                if let string0 = string0 {
                    originsDecoded0?.append(string0)
                }
            }
        }
        origins = originsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListBotsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBotsInput(instanceId: \(Swift.String(describing: instanceId)), lexVersion: \(Swift.String(describing: lexVersion)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListBotsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListBotsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBotsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBotsOutputError>
}

public struct ListBotsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBotsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let lexVersion = input.operationInput.lexVersion {
            let lexVersionQueryItem = ClientRuntime.URLQueryItem(name: "lexVersion".urlPercentEncoding(), value: Swift.String(lexVersion.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(lexVersionQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBotsOutputError>
}

public struct ListBotsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBotsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListBotsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/bots"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListBotsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListBotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBotsOutputError>
}

public struct ListBotsInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The version of Amazon Lex or Amazon Lex V2.
    /// This member is required.
    public var lexVersion: ConnectClientTypes.LexVersion?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        lexVersion: ConnectClientTypes.LexVersion? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.lexVersion = lexVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListBotsInputBody: Swift.Equatable {
}

extension ListBotsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListBotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListBotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBotsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBotsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBotsOutputResponse(lexBots: \(Swift.String(describing: lexBots)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListBotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListBotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lexBots = output.lexBots
            self.nextToken = output.nextToken
        } else {
            self.lexBots = nil
            self.nextToken = nil
        }
    }
}

public struct ListBotsOutputResponse: Swift.Equatable {
    /// The names and Regions of the Amazon Lex or Amazon Lex V2 bots associated with the specified
    ///    instance.
    public var lexBots: [ConnectClientTypes.LexBotConfig]?
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?

    public init (
        lexBots: [ConnectClientTypes.LexBotConfig]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.lexBots = lexBots
        self.nextToken = nextToken
    }
}

struct ListBotsOutputResponseBody: Swift.Equatable {
    public let lexBots: [ConnectClientTypes.LexBotConfig]?
    public let nextToken: Swift.String?
}

extension ListBotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lexBots = "LexBots"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lexBotsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.LexBotConfig?].self, forKey: .lexBots)
        var lexBotsDecoded0:[ConnectClientTypes.LexBotConfig]? = nil
        if let lexBotsContainer = lexBotsContainer {
            lexBotsDecoded0 = [ConnectClientTypes.LexBotConfig]()
            for structure0 in lexBotsContainer {
                if let structure0 = structure0 {
                    lexBotsDecoded0?.append(structure0)
                }
            }
        }
        lexBots = lexBotsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListContactFlowsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListContactFlowsInput(contactFlowTypes: \(Swift.String(describing: contactFlowTypes)), instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListContactFlowsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListContactFlowsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListContactFlowsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListContactFlowsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListContactFlowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListContactFlowsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListContactFlowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListContactFlowsOutputError>
}

public struct ListContactFlowsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListContactFlowsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListContactFlowsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListContactFlowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let contactFlowTypes = input.operationInput.contactFlowTypes {
            contactFlowTypes.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "contactFlowTypes".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListContactFlowsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListContactFlowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListContactFlowsOutputError>
}

public struct ListContactFlowsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListContactFlowsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListContactFlowsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListContactFlowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/contact-flows-summary/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListContactFlowsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListContactFlowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListContactFlowsOutputError>
}

public struct ListContactFlowsInput: Swift.Equatable {
    /// The type of contact flow.
    public var contactFlowTypes: [ConnectClientTypes.ContactFlowType]?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        contactFlowTypes: [ConnectClientTypes.ContactFlowType]? = nil,
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.contactFlowTypes = contactFlowTypes
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListContactFlowsInputBody: Swift.Equatable {
}

extension ListContactFlowsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListContactFlowsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListContactFlowsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListContactFlowsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListContactFlowsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListContactFlowsOutputResponse(contactFlowSummaryList: \(Swift.String(describing: contactFlowSummaryList)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListContactFlowsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListContactFlowsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contactFlowSummaryList = output.contactFlowSummaryList
            self.nextToken = output.nextToken
        } else {
            self.contactFlowSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListContactFlowsOutputResponse: Swift.Equatable {
    /// Information about the contact flows.
    public var contactFlowSummaryList: [ConnectClientTypes.ContactFlowSummary]?
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?

    public init (
        contactFlowSummaryList: [ConnectClientTypes.ContactFlowSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.contactFlowSummaryList = contactFlowSummaryList
        self.nextToken = nextToken
    }
}

struct ListContactFlowsOutputResponseBody: Swift.Equatable {
    public let contactFlowSummaryList: [ConnectClientTypes.ContactFlowSummary]?
    public let nextToken: Swift.String?
}

extension ListContactFlowsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactFlowSummaryList = "ContactFlowSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactFlowSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.ContactFlowSummary?].self, forKey: .contactFlowSummaryList)
        var contactFlowSummaryListDecoded0:[ConnectClientTypes.ContactFlowSummary]? = nil
        if let contactFlowSummaryListContainer = contactFlowSummaryListContainer {
            contactFlowSummaryListDecoded0 = [ConnectClientTypes.ContactFlowSummary]()
            for structure0 in contactFlowSummaryListContainer {
                if let structure0 = structure0 {
                    contactFlowSummaryListDecoded0?.append(structure0)
                }
            }
        }
        contactFlowSummaryList = contactFlowSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListHoursOfOperationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListHoursOfOperationsInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListHoursOfOperationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListHoursOfOperationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListHoursOfOperationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListHoursOfOperationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListHoursOfOperationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListHoursOfOperationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListHoursOfOperationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListHoursOfOperationsOutputError>
}

public struct ListHoursOfOperationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListHoursOfOperationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListHoursOfOperationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListHoursOfOperationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListHoursOfOperationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListHoursOfOperationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListHoursOfOperationsOutputError>
}

public struct ListHoursOfOperationsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListHoursOfOperationsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListHoursOfOperationsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListHoursOfOperationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/hours-of-operations-summary/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListHoursOfOperationsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListHoursOfOperationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListHoursOfOperationsOutputError>
}

public struct ListHoursOfOperationsInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListHoursOfOperationsInputBody: Swift.Equatable {
}

extension ListHoursOfOperationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListHoursOfOperationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListHoursOfOperationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListHoursOfOperationsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListHoursOfOperationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListHoursOfOperationsOutputResponse(hoursOfOperationSummaryList: \(Swift.String(describing: hoursOfOperationSummaryList)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListHoursOfOperationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListHoursOfOperationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hoursOfOperationSummaryList = output.hoursOfOperationSummaryList
            self.nextToken = output.nextToken
        } else {
            self.hoursOfOperationSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListHoursOfOperationsOutputResponse: Swift.Equatable {
    /// Information about the hours of operation.
    public var hoursOfOperationSummaryList: [ConnectClientTypes.HoursOfOperationSummary]?
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?

    public init (
        hoursOfOperationSummaryList: [ConnectClientTypes.HoursOfOperationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.hoursOfOperationSummaryList = hoursOfOperationSummaryList
        self.nextToken = nextToken
    }
}

struct ListHoursOfOperationsOutputResponseBody: Swift.Equatable {
    public let hoursOfOperationSummaryList: [ConnectClientTypes.HoursOfOperationSummary]?
    public let nextToken: Swift.String?
}

extension ListHoursOfOperationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hoursOfOperationSummaryList = "HoursOfOperationSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hoursOfOperationSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.HoursOfOperationSummary?].self, forKey: .hoursOfOperationSummaryList)
        var hoursOfOperationSummaryListDecoded0:[ConnectClientTypes.HoursOfOperationSummary]? = nil
        if let hoursOfOperationSummaryListContainer = hoursOfOperationSummaryListContainer {
            hoursOfOperationSummaryListDecoded0 = [ConnectClientTypes.HoursOfOperationSummary]()
            for structure0 in hoursOfOperationSummaryListContainer {
                if let structure0 = structure0 {
                    hoursOfOperationSummaryListDecoded0?.append(structure0)
                }
            }
        }
        hoursOfOperationSummaryList = hoursOfOperationSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListInstanceAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInstanceAttributesInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListInstanceAttributesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListInstanceAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInstanceAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInstanceAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInstanceAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInstanceAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInstanceAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInstanceAttributesOutputError>
}

public struct ListInstanceAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInstanceAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInstanceAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInstanceAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInstanceAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInstanceAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInstanceAttributesOutputError>
}

public struct ListInstanceAttributesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInstanceAttributesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListInstanceAttributesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInstanceAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/attributes"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListInstanceAttributesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListInstanceAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInstanceAttributesOutputError>
}

public struct ListInstanceAttributesInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListInstanceAttributesInputBody: Swift.Equatable {
}

extension ListInstanceAttributesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListInstanceAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInstanceAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInstanceAttributesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInstanceAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInstanceAttributesOutputResponse(attributes: \(Swift.String(describing: attributes)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListInstanceAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListInstanceAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.attributes = output.attributes
            self.nextToken = output.nextToken
        } else {
            self.attributes = nil
            self.nextToken = nil
        }
    }
}

public struct ListInstanceAttributesOutputResponse: Swift.Equatable {
    /// The attribute types.
    public var attributes: [ConnectClientTypes.Attribute]?
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?

    public init (
        attributes: [ConnectClientTypes.Attribute]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.attributes = attributes
        self.nextToken = nextToken
    }
}

struct ListInstanceAttributesOutputResponseBody: Swift.Equatable {
    public let attributes: [ConnectClientTypes.Attribute]?
    public let nextToken: Swift.String?
}

extension ListInstanceAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([ConnectClientTypes.Attribute?].self, forKey: .attributes)
        var attributesDecoded0:[ConnectClientTypes.Attribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [ConnectClientTypes.Attribute]()
            for structure0 in attributesContainer {
                if let structure0 = structure0 {
                    attributesDecoded0?.append(structure0)
                }
            }
        }
        attributes = attributesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListInstanceStorageConfigsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInstanceStorageConfigsInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ListInstanceStorageConfigsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListInstanceStorageConfigsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInstanceStorageConfigsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInstanceStorageConfigsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInstanceStorageConfigsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInstanceStorageConfigsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInstanceStorageConfigsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInstanceStorageConfigsOutputError>
}

public struct ListInstanceStorageConfigsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInstanceStorageConfigsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInstanceStorageConfigsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInstanceStorageConfigsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let resourceType = input.operationInput.resourceType {
            let resourceTypeQueryItem = ClientRuntime.URLQueryItem(name: "resourceType".urlPercentEncoding(), value: Swift.String(resourceType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(resourceTypeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInstanceStorageConfigsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInstanceStorageConfigsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInstanceStorageConfigsOutputError>
}

public struct ListInstanceStorageConfigsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInstanceStorageConfigsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListInstanceStorageConfigsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInstanceStorageConfigsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/storage-configs"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListInstanceStorageConfigsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListInstanceStorageConfigsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInstanceStorageConfigsOutputError>
}

public struct ListInstanceStorageConfigsInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// A valid resource type.
    /// This member is required.
    public var resourceType: ConnectClientTypes.InstanceStorageResourceType?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        resourceType: ConnectClientTypes.InstanceStorageResourceType? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceType = resourceType
    }
}

struct ListInstanceStorageConfigsInputBody: Swift.Equatable {
}

extension ListInstanceStorageConfigsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListInstanceStorageConfigsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInstanceStorageConfigsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInstanceStorageConfigsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInstanceStorageConfigsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInstanceStorageConfigsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), storageConfigs: \(Swift.String(describing: storageConfigs)))"}
}

extension ListInstanceStorageConfigsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListInstanceStorageConfigsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.storageConfigs = output.storageConfigs
        } else {
            self.nextToken = nil
            self.storageConfigs = nil
        }
    }
}

public struct ListInstanceStorageConfigsOutputResponse: Swift.Equatable {
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?
    /// A valid storage type.
    public var storageConfigs: [ConnectClientTypes.InstanceStorageConfig]?

    public init (
        nextToken: Swift.String? = nil,
        storageConfigs: [ConnectClientTypes.InstanceStorageConfig]? = nil
    )
    {
        self.nextToken = nextToken
        self.storageConfigs = storageConfigs
    }
}

struct ListInstanceStorageConfigsOutputResponseBody: Swift.Equatable {
    public let storageConfigs: [ConnectClientTypes.InstanceStorageConfig]?
    public let nextToken: Swift.String?
}

extension ListInstanceStorageConfigsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case storageConfigs = "StorageConfigs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageConfigsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.InstanceStorageConfig?].self, forKey: .storageConfigs)
        var storageConfigsDecoded0:[ConnectClientTypes.InstanceStorageConfig]? = nil
        if let storageConfigsContainer = storageConfigsContainer {
            storageConfigsDecoded0 = [ConnectClientTypes.InstanceStorageConfig]()
            for structure0 in storageConfigsContainer {
                if let structure0 = structure0 {
                    storageConfigsDecoded0?.append(structure0)
                }
            }
        }
        storageConfigs = storageConfigsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListInstancesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInstancesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListInstancesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListInstancesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInstancesOutputError>
}

public struct ListInstancesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInstancesOutputError>
}

public struct ListInstancesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInstancesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListInstancesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/instance"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListInstancesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInstancesOutputError>
}

public struct ListInstancesInput: Swift.Equatable {
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListInstancesInputBody: Swift.Equatable {
}

extension ListInstancesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInstancesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInstancesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInstancesOutputResponse(instanceSummaryList: \(Swift.String(describing: instanceSummaryList)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceSummaryList = output.instanceSummaryList
            self.nextToken = output.nextToken
        } else {
            self.instanceSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListInstancesOutputResponse: Swift.Equatable {
    /// Information about the instances.
    public var instanceSummaryList: [ConnectClientTypes.InstanceSummary]?
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceSummaryList: [ConnectClientTypes.InstanceSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceSummaryList = instanceSummaryList
        self.nextToken = nextToken
    }
}

struct ListInstancesOutputResponseBody: Swift.Equatable {
    public let instanceSummaryList: [ConnectClientTypes.InstanceSummary]?
    public let nextToken: Swift.String?
}

extension ListInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSummaryList = "InstanceSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.InstanceSummary?].self, forKey: .instanceSummaryList)
        var instanceSummaryListDecoded0:[ConnectClientTypes.InstanceSummary]? = nil
        if let instanceSummaryListContainer = instanceSummaryListContainer {
            instanceSummaryListDecoded0 = [ConnectClientTypes.InstanceSummary]()
            for structure0 in instanceSummaryListContainer {
                if let structure0 = structure0 {
                    instanceSummaryListDecoded0?.append(structure0)
                }
            }
        }
        instanceSummaryList = instanceSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListIntegrationAssociationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListIntegrationAssociationsInput(instanceId: \(Swift.String(describing: instanceId)), integrationType: \(Swift.String(describing: integrationType)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListIntegrationAssociationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListIntegrationAssociationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIntegrationAssociationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIntegrationAssociationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIntegrationAssociationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIntegrationAssociationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIntegrationAssociationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIntegrationAssociationsOutputError>
}

public struct ListIntegrationAssociationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIntegrationAssociationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIntegrationAssociationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIntegrationAssociationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let integrationType = input.operationInput.integrationType {
            let integrationTypeQueryItem = ClientRuntime.URLQueryItem(name: "integrationType".urlPercentEncoding(), value: Swift.String(integrationType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(integrationTypeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIntegrationAssociationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIntegrationAssociationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIntegrationAssociationsOutputError>
}

public struct ListIntegrationAssociationsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIntegrationAssociationsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListIntegrationAssociationsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIntegrationAssociationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/integration-associations"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListIntegrationAssociationsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListIntegrationAssociationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIntegrationAssociationsOutputError>
}

public struct ListIntegrationAssociationsInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    ///
    public var integrationType: ConnectClientTypes.IntegrationType?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        integrationType: ConnectClientTypes.IntegrationType? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.integrationType = integrationType
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListIntegrationAssociationsInputBody: Swift.Equatable {
}

extension ListIntegrationAssociationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListIntegrationAssociationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListIntegrationAssociationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListIntegrationAssociationsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListIntegrationAssociationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListIntegrationAssociationsOutputResponse(integrationAssociationSummaryList: \(Swift.String(describing: integrationAssociationSummaryList)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListIntegrationAssociationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListIntegrationAssociationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.integrationAssociationSummaryList = output.integrationAssociationSummaryList
            self.nextToken = output.nextToken
        } else {
            self.integrationAssociationSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListIntegrationAssociationsOutputResponse: Swift.Equatable {
    /// The associations.
    public var integrationAssociationSummaryList: [ConnectClientTypes.IntegrationAssociationSummary]?
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?

    public init (
        integrationAssociationSummaryList: [ConnectClientTypes.IntegrationAssociationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.integrationAssociationSummaryList = integrationAssociationSummaryList
        self.nextToken = nextToken
    }
}

struct ListIntegrationAssociationsOutputResponseBody: Swift.Equatable {
    public let integrationAssociationSummaryList: [ConnectClientTypes.IntegrationAssociationSummary]?
    public let nextToken: Swift.String?
}

extension ListIntegrationAssociationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integrationAssociationSummaryList = "IntegrationAssociationSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integrationAssociationSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.IntegrationAssociationSummary?].self, forKey: .integrationAssociationSummaryList)
        var integrationAssociationSummaryListDecoded0:[ConnectClientTypes.IntegrationAssociationSummary]? = nil
        if let integrationAssociationSummaryListContainer = integrationAssociationSummaryListContainer {
            integrationAssociationSummaryListDecoded0 = [ConnectClientTypes.IntegrationAssociationSummary]()
            for structure0 in integrationAssociationSummaryListContainer {
                if let structure0 = structure0 {
                    integrationAssociationSummaryListDecoded0?.append(structure0)
                }
            }
        }
        integrationAssociationSummaryList = integrationAssociationSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListLambdaFunctionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListLambdaFunctionsInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListLambdaFunctionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListLambdaFunctionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLambdaFunctionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLambdaFunctionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLambdaFunctionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLambdaFunctionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLambdaFunctionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLambdaFunctionsOutputError>
}

public struct ListLambdaFunctionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLambdaFunctionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLambdaFunctionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLambdaFunctionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLambdaFunctionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLambdaFunctionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLambdaFunctionsOutputError>
}

public struct ListLambdaFunctionsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLambdaFunctionsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListLambdaFunctionsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLambdaFunctionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/lambda-functions"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListLambdaFunctionsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListLambdaFunctionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLambdaFunctionsOutputError>
}

public struct ListLambdaFunctionsInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListLambdaFunctionsInputBody: Swift.Equatable {
}

extension ListLambdaFunctionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListLambdaFunctionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLambdaFunctionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListLambdaFunctionsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLambdaFunctionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListLambdaFunctionsOutputResponse(lambdaFunctions: \(Swift.String(describing: lambdaFunctions)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListLambdaFunctionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListLambdaFunctionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lambdaFunctions = output.lambdaFunctions
            self.nextToken = output.nextToken
        } else {
            self.lambdaFunctions = nil
            self.nextToken = nil
        }
    }
}

public struct ListLambdaFunctionsOutputResponse: Swift.Equatable {
    /// The Lambdafunction ARNs associated with the specified instance.
    public var lambdaFunctions: [Swift.String]?
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?

    public init (
        lambdaFunctions: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.lambdaFunctions = lambdaFunctions
        self.nextToken = nextToken
    }
}

struct ListLambdaFunctionsOutputResponseBody: Swift.Equatable {
    public let lambdaFunctions: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListLambdaFunctionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lambdaFunctions = "LambdaFunctions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lambdaFunctionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .lambdaFunctions)
        var lambdaFunctionsDecoded0:[Swift.String]? = nil
        if let lambdaFunctionsContainer = lambdaFunctionsContainer {
            lambdaFunctionsDecoded0 = [Swift.String]()
            for string0 in lambdaFunctionsContainer {
                if let string0 = string0 {
                    lambdaFunctionsDecoded0?.append(string0)
                }
            }
        }
        lambdaFunctions = lambdaFunctionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListLexBotsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListLexBotsInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListLexBotsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListLexBotsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLexBotsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLexBotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLexBotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLexBotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLexBotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLexBotsOutputError>
}

public struct ListLexBotsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLexBotsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLexBotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLexBotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLexBotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLexBotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLexBotsOutputError>
}

public struct ListLexBotsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLexBotsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListLexBotsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLexBotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/lex-bots"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListLexBotsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListLexBotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLexBotsOutputError>
}

public struct ListLexBotsInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListLexBotsInputBody: Swift.Equatable {
}

extension ListLexBotsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListLexBotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLexBotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListLexBotsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLexBotsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListLexBotsOutputResponse(lexBots: \(Swift.String(describing: lexBots)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListLexBotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListLexBotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lexBots = output.lexBots
            self.nextToken = output.nextToken
        } else {
            self.lexBots = nil
            self.nextToken = nil
        }
    }
}

public struct ListLexBotsOutputResponse: Swift.Equatable {
    /// The names and Regions of the Amazon Lex bots associated with the specified instance.
    public var lexBots: [ConnectClientTypes.LexBot]?
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?

    public init (
        lexBots: [ConnectClientTypes.LexBot]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.lexBots = lexBots
        self.nextToken = nextToken
    }
}

struct ListLexBotsOutputResponseBody: Swift.Equatable {
    public let lexBots: [ConnectClientTypes.LexBot]?
    public let nextToken: Swift.String?
}

extension ListLexBotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lexBots = "LexBots"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lexBotsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.LexBot?].self, forKey: .lexBots)
        var lexBotsDecoded0:[ConnectClientTypes.LexBot]? = nil
        if let lexBotsContainer = lexBotsContainer {
            lexBotsDecoded0 = [ConnectClientTypes.LexBot]()
            for structure0 in lexBotsContainer {
                if let structure0 = structure0 {
                    lexBotsDecoded0?.append(structure0)
                }
            }
        }
        lexBots = lexBotsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPhoneNumbersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPhoneNumbersInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), phoneNumberCountryCodes: \(Swift.String(describing: phoneNumberCountryCodes)), phoneNumberTypes: \(Swift.String(describing: phoneNumberTypes)))"}
}

extension ListPhoneNumbersInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListPhoneNumbersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPhoneNumbersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPhoneNumbersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPhoneNumbersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPhoneNumbersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPhoneNumbersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPhoneNumbersOutputError>
}

public struct ListPhoneNumbersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPhoneNumbersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPhoneNumbersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPhoneNumbersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let phoneNumberTypes = input.operationInput.phoneNumberTypes {
            phoneNumberTypes.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "phoneNumberTypes".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let phoneNumberCountryCodes = input.operationInput.phoneNumberCountryCodes {
            phoneNumberCountryCodes.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "phoneNumberCountryCodes".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPhoneNumbersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPhoneNumbersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPhoneNumbersOutputError>
}

public struct ListPhoneNumbersInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPhoneNumbersInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListPhoneNumbersInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPhoneNumbersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/phone-numbers-summary/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListPhoneNumbersInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListPhoneNumbersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPhoneNumbersOutputError>
}

public struct ListPhoneNumbersInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The ISO country code.
    public var phoneNumberCountryCodes: [ConnectClientTypes.PhoneNumberCountryCode]?
    /// The type of phone number.
    public var phoneNumberTypes: [ConnectClientTypes.PhoneNumberType]?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        phoneNumberCountryCodes: [ConnectClientTypes.PhoneNumberCountryCode]? = nil,
        phoneNumberTypes: [ConnectClientTypes.PhoneNumberType]? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.phoneNumberCountryCodes = phoneNumberCountryCodes
        self.phoneNumberTypes = phoneNumberTypes
    }
}

struct ListPhoneNumbersInputBody: Swift.Equatable {
}

extension ListPhoneNumbersInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListPhoneNumbersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPhoneNumbersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPhoneNumbersOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPhoneNumbersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPhoneNumbersOutputResponse(nextToken: \(Swift.String(describing: nextToken)), phoneNumberSummaryList: \(Swift.String(describing: phoneNumberSummaryList)))"}
}

extension ListPhoneNumbersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPhoneNumbersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.phoneNumberSummaryList = output.phoneNumberSummaryList
        } else {
            self.nextToken = nil
            self.phoneNumberSummaryList = nil
        }
    }
}

public struct ListPhoneNumbersOutputResponse: Swift.Equatable {
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?
    /// Information about the phone numbers.
    public var phoneNumberSummaryList: [ConnectClientTypes.PhoneNumberSummary]?

    public init (
        nextToken: Swift.String? = nil,
        phoneNumberSummaryList: [ConnectClientTypes.PhoneNumberSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.phoneNumberSummaryList = phoneNumberSummaryList
    }
}

struct ListPhoneNumbersOutputResponseBody: Swift.Equatable {
    public let phoneNumberSummaryList: [ConnectClientTypes.PhoneNumberSummary]?
    public let nextToken: Swift.String?
}

extension ListPhoneNumbersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case phoneNumberSummaryList = "PhoneNumberSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let phoneNumberSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.PhoneNumberSummary?].self, forKey: .phoneNumberSummaryList)
        var phoneNumberSummaryListDecoded0:[ConnectClientTypes.PhoneNumberSummary]? = nil
        if let phoneNumberSummaryListContainer = phoneNumberSummaryListContainer {
            phoneNumberSummaryListDecoded0 = [ConnectClientTypes.PhoneNumberSummary]()
            for structure0 in phoneNumberSummaryListContainer {
                if let structure0 = structure0 {
                    phoneNumberSummaryListDecoded0?.append(structure0)
                }
            }
        }
        phoneNumberSummaryList = phoneNumberSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPromptsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPromptsInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListPromptsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListPromptsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPromptsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPromptsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPromptsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPromptsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPromptsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPromptsOutputError>
}

public struct ListPromptsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPromptsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPromptsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPromptsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPromptsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPromptsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPromptsOutputError>
}

public struct ListPromptsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPromptsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListPromptsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPromptsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/prompts-summary/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListPromptsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListPromptsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPromptsOutputError>
}

public struct ListPromptsInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous response in
    ///    the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListPromptsInputBody: Swift.Equatable {
}

extension ListPromptsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListPromptsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPromptsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPromptsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPromptsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPromptsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), promptSummaryList: \(Swift.String(describing: promptSummaryList)))"}
}

extension ListPromptsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPromptsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.promptSummaryList = output.promptSummaryList
        } else {
            self.nextToken = nil
            self.promptSummaryList = nil
        }
    }
}

public struct ListPromptsOutputResponse: Swift.Equatable {
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?
    /// Information about the prompts.
    public var promptSummaryList: [ConnectClientTypes.PromptSummary]?

    public init (
        nextToken: Swift.String? = nil,
        promptSummaryList: [ConnectClientTypes.PromptSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.promptSummaryList = promptSummaryList
    }
}

struct ListPromptsOutputResponseBody: Swift.Equatable {
    public let promptSummaryList: [ConnectClientTypes.PromptSummary]?
    public let nextToken: Swift.String?
}

extension ListPromptsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case promptSummaryList = "PromptSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let promptSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.PromptSummary?].self, forKey: .promptSummaryList)
        var promptSummaryListDecoded0:[ConnectClientTypes.PromptSummary]? = nil
        if let promptSummaryListContainer = promptSummaryListContainer {
            promptSummaryListDecoded0 = [ConnectClientTypes.PromptSummary]()
            for structure0 in promptSummaryListContainer {
                if let structure0 = structure0 {
                    promptSummaryListDecoded0?.append(structure0)
                }
            }
        }
        promptSummaryList = promptSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListQueueQuickConnectsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListQueueQuickConnectsInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), queueId: \(Swift.String(describing: queueId)))"}
}

extension ListQueueQuickConnectsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListQueueQuickConnectsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListQueueQuickConnectsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListQueueQuickConnectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListQueueQuickConnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListQueueQuickConnectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListQueueQuickConnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListQueueQuickConnectsOutputError>
}

public struct ListQueueQuickConnectsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListQueueQuickConnectsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListQueueQuickConnectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListQueueQuickConnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListQueueQuickConnectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListQueueQuickConnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListQueueQuickConnectsOutputError>
}

public struct ListQueueQuickConnectsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListQueueQuickConnectsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListQueueQuickConnectsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListQueueQuickConnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let queueId = input.queueId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("queueId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/queues/\(instanceId.urlPercentEncoding())/\(queueId.urlPercentEncoding())/quick-connects"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListQueueQuickConnectsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListQueueQuickConnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListQueueQuickConnectsOutputError>
}

public struct ListQueueQuickConnectsInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The identifier for the queue.
    /// This member is required.
    public var queueId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        queueId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queueId = queueId
    }
}

struct ListQueueQuickConnectsInputBody: Swift.Equatable {
}

extension ListQueueQuickConnectsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListQueueQuickConnectsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListQueueQuickConnectsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListQueueQuickConnectsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListQueueQuickConnectsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListQueueQuickConnectsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), quickConnectSummaryList: \(Swift.String(describing: quickConnectSummaryList)))"}
}

extension ListQueueQuickConnectsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListQueueQuickConnectsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.quickConnectSummaryList = output.quickConnectSummaryList
        } else {
            self.nextToken = nil
            self.quickConnectSummaryList = nil
        }
    }
}

public struct ListQueueQuickConnectsOutputResponse: Swift.Equatable {
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?
    /// Information about the quick connects.
    public var quickConnectSummaryList: [ConnectClientTypes.QuickConnectSummary]?

    public init (
        nextToken: Swift.String? = nil,
        quickConnectSummaryList: [ConnectClientTypes.QuickConnectSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.quickConnectSummaryList = quickConnectSummaryList
    }
}

struct ListQueueQuickConnectsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let quickConnectSummaryList: [ConnectClientTypes.QuickConnectSummary]?
}

extension ListQueueQuickConnectsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case quickConnectSummaryList = "QuickConnectSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let quickConnectSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.QuickConnectSummary?].self, forKey: .quickConnectSummaryList)
        var quickConnectSummaryListDecoded0:[ConnectClientTypes.QuickConnectSummary]? = nil
        if let quickConnectSummaryListContainer = quickConnectSummaryListContainer {
            quickConnectSummaryListDecoded0 = [ConnectClientTypes.QuickConnectSummary]()
            for structure0 in quickConnectSummaryListContainer {
                if let structure0 = structure0 {
                    quickConnectSummaryListDecoded0?.append(structure0)
                }
            }
        }
        quickConnectSummaryList = quickConnectSummaryListDecoded0
    }
}

extension ListQueuesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListQueuesInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), queueTypes: \(Swift.String(describing: queueTypes)))"}
}

extension ListQueuesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListQueuesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListQueuesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListQueuesOutputError>
}

public struct ListQueuesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListQueuesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let queueTypes = input.operationInput.queueTypes {
            queueTypes.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "queueTypes".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListQueuesOutputError>
}

public struct ListQueuesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListQueuesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListQueuesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/queues-summary/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListQueuesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListQueuesOutputError>
}

public struct ListQueuesInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The type of queue.
    public var queueTypes: [ConnectClientTypes.QueueType]?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        queueTypes: [ConnectClientTypes.QueueType]? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queueTypes = queueTypes
    }
}

struct ListQueuesInputBody: Swift.Equatable {
}

extension ListQueuesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListQueuesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListQueuesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListQueuesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListQueuesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListQueuesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), queueSummaryList: \(Swift.String(describing: queueSummaryList)))"}
}

extension ListQueuesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListQueuesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.queueSummaryList = output.queueSummaryList
        } else {
            self.nextToken = nil
            self.queueSummaryList = nil
        }
    }
}

public struct ListQueuesOutputResponse: Swift.Equatable {
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?
    /// Information about the queues.
    public var queueSummaryList: [ConnectClientTypes.QueueSummary]?

    public init (
        nextToken: Swift.String? = nil,
        queueSummaryList: [ConnectClientTypes.QueueSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.queueSummaryList = queueSummaryList
    }
}

struct ListQueuesOutputResponseBody: Swift.Equatable {
    public let queueSummaryList: [ConnectClientTypes.QueueSummary]?
    public let nextToken: Swift.String?
}

extension ListQueuesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case queueSummaryList = "QueueSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.QueueSummary?].self, forKey: .queueSummaryList)
        var queueSummaryListDecoded0:[ConnectClientTypes.QueueSummary]? = nil
        if let queueSummaryListContainer = queueSummaryListContainer {
            queueSummaryListDecoded0 = [ConnectClientTypes.QueueSummary]()
            for structure0 in queueSummaryListContainer {
                if let structure0 = structure0 {
                    queueSummaryListDecoded0?.append(structure0)
                }
            }
        }
        queueSummaryList = queueSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListQuickConnectsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListQuickConnectsInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), quickConnectTypes: \(Swift.String(describing: quickConnectTypes)))"}
}

extension ListQuickConnectsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListQuickConnectsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListQuickConnectsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListQuickConnectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListQuickConnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListQuickConnectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListQuickConnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListQuickConnectsOutputError>
}

public struct ListQuickConnectsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListQuickConnectsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListQuickConnectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListQuickConnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let quickConnectTypes = input.operationInput.quickConnectTypes {
            quickConnectTypes.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "QuickConnectTypes".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListQuickConnectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListQuickConnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListQuickConnectsOutputError>
}

public struct ListQuickConnectsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListQuickConnectsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListQuickConnectsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListQuickConnectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/quick-connects/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListQuickConnectsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListQuickConnectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListQuickConnectsOutputError>
}

public struct ListQuickConnectsInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are
    ///    prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).
    public var quickConnectTypes: [ConnectClientTypes.QuickConnectType]?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        quickConnectTypes: [ConnectClientTypes.QuickConnectType]? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.quickConnectTypes = quickConnectTypes
    }
}

struct ListQuickConnectsInputBody: Swift.Equatable {
}

extension ListQuickConnectsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListQuickConnectsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListQuickConnectsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListQuickConnectsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListQuickConnectsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListQuickConnectsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), quickConnectSummaryList: \(Swift.String(describing: quickConnectSummaryList)))"}
}

extension ListQuickConnectsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListQuickConnectsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.quickConnectSummaryList = output.quickConnectSummaryList
        } else {
            self.nextToken = nil
            self.quickConnectSummaryList = nil
        }
    }
}

public struct ListQuickConnectsOutputResponse: Swift.Equatable {
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?
    /// Information about the quick connects.
    public var quickConnectSummaryList: [ConnectClientTypes.QuickConnectSummary]?

    public init (
        nextToken: Swift.String? = nil,
        quickConnectSummaryList: [ConnectClientTypes.QuickConnectSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.quickConnectSummaryList = quickConnectSummaryList
    }
}

struct ListQuickConnectsOutputResponseBody: Swift.Equatable {
    public let quickConnectSummaryList: [ConnectClientTypes.QuickConnectSummary]?
    public let nextToken: Swift.String?
}

extension ListQuickConnectsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case quickConnectSummaryList = "QuickConnectSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let quickConnectSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.QuickConnectSummary?].self, forKey: .quickConnectSummaryList)
        var quickConnectSummaryListDecoded0:[ConnectClientTypes.QuickConnectSummary]? = nil
        if let quickConnectSummaryListContainer = quickConnectSummaryListContainer {
            quickConnectSummaryListDecoded0 = [ConnectClientTypes.QuickConnectSummary]()
            for structure0 in quickConnectSummaryListContainer {
                if let structure0 = structure0 {
                    quickConnectSummaryListDecoded0?.append(structure0)
                }
            }
        }
        quickConnectSummaryList = quickConnectSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListRoutingProfileQueuesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRoutingProfileQueuesInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), routingProfileId: \(Swift.String(describing: routingProfileId)))"}
}

extension ListRoutingProfileQueuesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListRoutingProfileQueuesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRoutingProfileQueuesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRoutingProfileQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRoutingProfileQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRoutingProfileQueuesOutputError>
}

public struct ListRoutingProfileQueuesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRoutingProfileQueuesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRoutingProfileQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRoutingProfileQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRoutingProfileQueuesOutputError>
}

public struct ListRoutingProfileQueuesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRoutingProfileQueuesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListRoutingProfileQueuesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let routingProfileId = input.routingProfileId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("routingProfileId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/routing-profiles/\(instanceId.urlPercentEncoding())/\(routingProfileId.urlPercentEncoding())/queues"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListRoutingProfileQueuesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRoutingProfileQueuesOutputError>
}

public struct ListRoutingProfileQueuesInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The identifier of the routing profile.
    /// This member is required.
    public var routingProfileId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        routingProfileId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.routingProfileId = routingProfileId
    }
}

struct ListRoutingProfileQueuesInputBody: Swift.Equatable {
}

extension ListRoutingProfileQueuesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListRoutingProfileQueuesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRoutingProfileQueuesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListRoutingProfileQueuesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRoutingProfileQueuesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRoutingProfileQueuesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), routingProfileQueueConfigSummaryList: \(Swift.String(describing: routingProfileQueueConfigSummaryList)))"}
}

extension ListRoutingProfileQueuesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListRoutingProfileQueuesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.routingProfileQueueConfigSummaryList = output.routingProfileQueueConfigSummaryList
        } else {
            self.nextToken = nil
            self.routingProfileQueueConfigSummaryList = nil
        }
    }
}

public struct ListRoutingProfileQueuesOutputResponse: Swift.Equatable {
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?
    /// Information about the routing profiles.
    public var routingProfileQueueConfigSummaryList: [ConnectClientTypes.RoutingProfileQueueConfigSummary]?

    public init (
        nextToken: Swift.String? = nil,
        routingProfileQueueConfigSummaryList: [ConnectClientTypes.RoutingProfileQueueConfigSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.routingProfileQueueConfigSummaryList = routingProfileQueueConfigSummaryList
    }
}

struct ListRoutingProfileQueuesOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let routingProfileQueueConfigSummaryList: [ConnectClientTypes.RoutingProfileQueueConfigSummary]?
}

extension ListRoutingProfileQueuesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case routingProfileQueueConfigSummaryList = "RoutingProfileQueueConfigSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let routingProfileQueueConfigSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.RoutingProfileQueueConfigSummary?].self, forKey: .routingProfileQueueConfigSummaryList)
        var routingProfileQueueConfigSummaryListDecoded0:[ConnectClientTypes.RoutingProfileQueueConfigSummary]? = nil
        if let routingProfileQueueConfigSummaryListContainer = routingProfileQueueConfigSummaryListContainer {
            routingProfileQueueConfigSummaryListDecoded0 = [ConnectClientTypes.RoutingProfileQueueConfigSummary]()
            for structure0 in routingProfileQueueConfigSummaryListContainer {
                if let structure0 = structure0 {
                    routingProfileQueueConfigSummaryListDecoded0?.append(structure0)
                }
            }
        }
        routingProfileQueueConfigSummaryList = routingProfileQueueConfigSummaryListDecoded0
    }
}

extension ListRoutingProfilesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRoutingProfilesInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListRoutingProfilesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListRoutingProfilesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRoutingProfilesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRoutingProfilesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRoutingProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRoutingProfilesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRoutingProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRoutingProfilesOutputError>
}

public struct ListRoutingProfilesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRoutingProfilesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRoutingProfilesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRoutingProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRoutingProfilesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRoutingProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRoutingProfilesOutputError>
}

public struct ListRoutingProfilesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRoutingProfilesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListRoutingProfilesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRoutingProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/routing-profiles-summary/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListRoutingProfilesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListRoutingProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRoutingProfilesOutputError>
}

public struct ListRoutingProfilesInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListRoutingProfilesInputBody: Swift.Equatable {
}

extension ListRoutingProfilesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListRoutingProfilesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRoutingProfilesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListRoutingProfilesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRoutingProfilesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRoutingProfilesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), routingProfileSummaryList: \(Swift.String(describing: routingProfileSummaryList)))"}
}

extension ListRoutingProfilesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListRoutingProfilesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.routingProfileSummaryList = output.routingProfileSummaryList
        } else {
            self.nextToken = nil
            self.routingProfileSummaryList = nil
        }
    }
}

public struct ListRoutingProfilesOutputResponse: Swift.Equatable {
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?
    /// Information about the routing profiles.
    public var routingProfileSummaryList: [ConnectClientTypes.RoutingProfileSummary]?

    public init (
        nextToken: Swift.String? = nil,
        routingProfileSummaryList: [ConnectClientTypes.RoutingProfileSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.routingProfileSummaryList = routingProfileSummaryList
    }
}

struct ListRoutingProfilesOutputResponseBody: Swift.Equatable {
    public let routingProfileSummaryList: [ConnectClientTypes.RoutingProfileSummary]?
    public let nextToken: Swift.String?
}

extension ListRoutingProfilesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case routingProfileSummaryList = "RoutingProfileSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingProfileSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.RoutingProfileSummary?].self, forKey: .routingProfileSummaryList)
        var routingProfileSummaryListDecoded0:[ConnectClientTypes.RoutingProfileSummary]? = nil
        if let routingProfileSummaryListContainer = routingProfileSummaryListContainer {
            routingProfileSummaryListDecoded0 = [ConnectClientTypes.RoutingProfileSummary]()
            for structure0 in routingProfileSummaryListContainer {
                if let structure0 = structure0 {
                    routingProfileSummaryListDecoded0?.append(structure0)
                }
            }
        }
        routingProfileSummaryList = routingProfileSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSecurityKeysInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSecurityKeysInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListSecurityKeysInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListSecurityKeysInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSecurityKeysInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSecurityKeysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSecurityKeysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSecurityKeysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSecurityKeysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSecurityKeysOutputError>
}

public struct ListSecurityKeysInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSecurityKeysInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSecurityKeysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSecurityKeysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSecurityKeysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSecurityKeysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSecurityKeysOutputError>
}

public struct ListSecurityKeysInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSecurityKeysInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListSecurityKeysInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSecurityKeysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/security-keys"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListSecurityKeysInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListSecurityKeysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSecurityKeysOutputError>
}

public struct ListSecurityKeysInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListSecurityKeysInputBody: Swift.Equatable {
}

extension ListSecurityKeysInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListSecurityKeysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSecurityKeysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSecurityKeysOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSecurityKeysOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSecurityKeysOutputResponse(nextToken: \(Swift.String(describing: nextToken)), securityKeys: \(Swift.String(describing: securityKeys)))"}
}

extension ListSecurityKeysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSecurityKeysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.securityKeys = output.securityKeys
        } else {
            self.nextToken = nil
            self.securityKeys = nil
        }
    }
}

public struct ListSecurityKeysOutputResponse: Swift.Equatable {
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?
    /// The security keys.
    public var securityKeys: [ConnectClientTypes.SecurityKey]?

    public init (
        nextToken: Swift.String? = nil,
        securityKeys: [ConnectClientTypes.SecurityKey]? = nil
    )
    {
        self.nextToken = nextToken
        self.securityKeys = securityKeys
    }
}

struct ListSecurityKeysOutputResponseBody: Swift.Equatable {
    public let securityKeys: [ConnectClientTypes.SecurityKey]?
    public let nextToken: Swift.String?
}

extension ListSecurityKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case securityKeys = "SecurityKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityKeysContainer = try containerValues.decodeIfPresent([ConnectClientTypes.SecurityKey?].self, forKey: .securityKeys)
        var securityKeysDecoded0:[ConnectClientTypes.SecurityKey]? = nil
        if let securityKeysContainer = securityKeysContainer {
            securityKeysDecoded0 = [ConnectClientTypes.SecurityKey]()
            for structure0 in securityKeysContainer {
                if let structure0 = structure0 {
                    securityKeysDecoded0?.append(structure0)
                }
            }
        }
        securityKeys = securityKeysDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSecurityProfilesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSecurityProfilesInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListSecurityProfilesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListSecurityProfilesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSecurityProfilesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSecurityProfilesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSecurityProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSecurityProfilesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSecurityProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSecurityProfilesOutputError>
}

public struct ListSecurityProfilesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSecurityProfilesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSecurityProfilesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSecurityProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSecurityProfilesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSecurityProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSecurityProfilesOutputError>
}

public struct ListSecurityProfilesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSecurityProfilesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListSecurityProfilesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSecurityProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/security-profiles-summary/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListSecurityProfilesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListSecurityProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSecurityProfilesOutputError>
}

public struct ListSecurityProfilesInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListSecurityProfilesInputBody: Swift.Equatable {
}

extension ListSecurityProfilesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListSecurityProfilesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSecurityProfilesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSecurityProfilesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSecurityProfilesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSecurityProfilesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), securityProfileSummaryList: \(Swift.String(describing: securityProfileSummaryList)))"}
}

extension ListSecurityProfilesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSecurityProfilesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.securityProfileSummaryList = output.securityProfileSummaryList
        } else {
            self.nextToken = nil
            self.securityProfileSummaryList = nil
        }
    }
}

public struct ListSecurityProfilesOutputResponse: Swift.Equatable {
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?
    /// Information about the security profiles.
    public var securityProfileSummaryList: [ConnectClientTypes.SecurityProfileSummary]?

    public init (
        nextToken: Swift.String? = nil,
        securityProfileSummaryList: [ConnectClientTypes.SecurityProfileSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.securityProfileSummaryList = securityProfileSummaryList
    }
}

struct ListSecurityProfilesOutputResponseBody: Swift.Equatable {
    public let securityProfileSummaryList: [ConnectClientTypes.SecurityProfileSummary]?
    public let nextToken: Swift.String?
}

extension ListSecurityProfilesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case securityProfileSummaryList = "SecurityProfileSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityProfileSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.SecurityProfileSummary?].self, forKey: .securityProfileSummaryList)
        var securityProfileSummaryListDecoded0:[ConnectClientTypes.SecurityProfileSummary]? = nil
        if let securityProfileSummaryListContainer = securityProfileSummaryListContainer {
            securityProfileSummaryListDecoded0 = [ConnectClientTypes.SecurityProfileSummary]()
            for structure0 in securityProfileSummaryListContainer {
                if let structure0 = structure0 {
                    securityProfileSummaryListDecoded0?.append(structure0)
                }
            }
        }
        securityProfileSummaryList = securityProfileSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListTagsForResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let resourceArn = input.resourceArn else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("resourceArn is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/tags/\(resourceArn.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTagsForResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// Information about the tags.
    public var tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListUseCasesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListUseCasesInput(instanceId: \(Swift.String(describing: instanceId)), integrationAssociationId: \(Swift.String(describing: integrationAssociationId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListUseCasesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListUseCasesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListUseCasesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListUseCasesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListUseCasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListUseCasesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListUseCasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListUseCasesOutputError>
}

public struct ListUseCasesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListUseCasesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListUseCasesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListUseCasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListUseCasesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListUseCasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListUseCasesOutputError>
}

public struct ListUseCasesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListUseCasesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListUseCasesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListUseCasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let integrationAssociationId = input.integrationAssociationId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("integrationAssociationId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/integration-associations/\(integrationAssociationId.urlPercentEncoding())/use-cases"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListUseCasesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListUseCasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListUseCasesOutputError>
}

/// Provides summary information about the use cases for the specified integration
///    association.
public struct ListUseCasesInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier for the integration association.
    /// This member is required.
    public var integrationAssociationId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        integrationAssociationId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.integrationAssociationId = integrationAssociationId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListUseCasesInputBody: Swift.Equatable {
}

extension ListUseCasesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListUseCasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListUseCasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListUseCasesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListUseCasesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListUseCasesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), useCaseSummaryList: \(Swift.String(describing: useCaseSummaryList)))"}
}

extension ListUseCasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListUseCasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.useCaseSummaryList = output.useCaseSummaryList
        } else {
            self.nextToken = nil
            self.useCaseSummaryList = nil
        }
    }
}

public struct ListUseCasesOutputResponse: Swift.Equatable {
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?
    /// The use cases.
    public var useCaseSummaryList: [ConnectClientTypes.UseCase]?

    public init (
        nextToken: Swift.String? = nil,
        useCaseSummaryList: [ConnectClientTypes.UseCase]? = nil
    )
    {
        self.nextToken = nextToken
        self.useCaseSummaryList = useCaseSummaryList
    }
}

struct ListUseCasesOutputResponseBody: Swift.Equatable {
    public let useCaseSummaryList: [ConnectClientTypes.UseCase]?
    public let nextToken: Swift.String?
}

extension ListUseCasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case useCaseSummaryList = "UseCaseSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let useCaseSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.UseCase?].self, forKey: .useCaseSummaryList)
        var useCaseSummaryListDecoded0:[ConnectClientTypes.UseCase]? = nil
        if let useCaseSummaryListContainer = useCaseSummaryListContainer {
            useCaseSummaryListDecoded0 = [ConnectClientTypes.UseCase]()
            for structure0 in useCaseSummaryListContainer {
                if let structure0 = structure0 {
                    useCaseSummaryListDecoded0?.append(structure0)
                }
            }
        }
        useCaseSummaryList = useCaseSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListUserHierarchyGroupsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListUserHierarchyGroupsInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListUserHierarchyGroupsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListUserHierarchyGroupsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListUserHierarchyGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListUserHierarchyGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListUserHierarchyGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListUserHierarchyGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListUserHierarchyGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListUserHierarchyGroupsOutputError>
}

public struct ListUserHierarchyGroupsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListUserHierarchyGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListUserHierarchyGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListUserHierarchyGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListUserHierarchyGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListUserHierarchyGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListUserHierarchyGroupsOutputError>
}

public struct ListUserHierarchyGroupsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListUserHierarchyGroupsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListUserHierarchyGroupsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListUserHierarchyGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/user-hierarchy-groups-summary/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListUserHierarchyGroupsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListUserHierarchyGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListUserHierarchyGroupsOutputError>
}

public struct ListUserHierarchyGroupsInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListUserHierarchyGroupsInputBody: Swift.Equatable {
}

extension ListUserHierarchyGroupsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListUserHierarchyGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListUserHierarchyGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListUserHierarchyGroupsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListUserHierarchyGroupsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListUserHierarchyGroupsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), userHierarchyGroupSummaryList: \(Swift.String(describing: userHierarchyGroupSummaryList)))"}
}

extension ListUserHierarchyGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListUserHierarchyGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.userHierarchyGroupSummaryList = output.userHierarchyGroupSummaryList
        } else {
            self.nextToken = nil
            self.userHierarchyGroupSummaryList = nil
        }
    }
}

public struct ListUserHierarchyGroupsOutputResponse: Swift.Equatable {
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?
    /// Information about the hierarchy groups.
    public var userHierarchyGroupSummaryList: [ConnectClientTypes.HierarchyGroupSummary]?

    public init (
        nextToken: Swift.String? = nil,
        userHierarchyGroupSummaryList: [ConnectClientTypes.HierarchyGroupSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.userHierarchyGroupSummaryList = userHierarchyGroupSummaryList
    }
}

struct ListUserHierarchyGroupsOutputResponseBody: Swift.Equatable {
    public let userHierarchyGroupSummaryList: [ConnectClientTypes.HierarchyGroupSummary]?
    public let nextToken: Swift.String?
}

extension ListUserHierarchyGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case userHierarchyGroupSummaryList = "UserHierarchyGroupSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userHierarchyGroupSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.HierarchyGroupSummary?].self, forKey: .userHierarchyGroupSummaryList)
        var userHierarchyGroupSummaryListDecoded0:[ConnectClientTypes.HierarchyGroupSummary]? = nil
        if let userHierarchyGroupSummaryListContainer = userHierarchyGroupSummaryListContainer {
            userHierarchyGroupSummaryListDecoded0 = [ConnectClientTypes.HierarchyGroupSummary]()
            for structure0 in userHierarchyGroupSummaryListContainer {
                if let structure0 = structure0 {
                    userHierarchyGroupSummaryListDecoded0?.append(structure0)
                }
            }
        }
        userHierarchyGroupSummaryList = userHierarchyGroupSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListUsersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListUsersInput(instanceId: \(Swift.String(describing: instanceId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListUsersInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListUsersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListUsersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListUsersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListUsersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListUsersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListUsersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListUsersOutputError>
}

public struct ListUsersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListUsersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListUsersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListUsersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListUsersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListUsersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListUsersOutputError>
}

public struct ListUsersInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListUsersInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListUsersInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListUsersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/users-summary/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListUsersInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListUsersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListUsersOutputError>
}

public struct ListUsersInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of results to return per page.
    public var maxResults: Swift.Int
    /// The token for the next set of results. Use the value returned in the previous
    /// response in the next request to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListUsersInputBody: Swift.Equatable {
}

extension ListUsersInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListUsersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListUsersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListUsersOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListUsersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListUsersOutputResponse(nextToken: \(Swift.String(describing: nextToken)), userSummaryList: \(Swift.String(describing: userSummaryList)))"}
}

extension ListUsersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListUsersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.userSummaryList = output.userSummaryList
        } else {
            self.nextToken = nil
            self.userSummaryList = nil
        }
    }
}

public struct ListUsersOutputResponse: Swift.Equatable {
    /// If there are additional results, this is the token for the next set of results.
    public var nextToken: Swift.String?
    /// Information about the users.
    public var userSummaryList: [ConnectClientTypes.UserSummary]?

    public init (
        nextToken: Swift.String? = nil,
        userSummaryList: [ConnectClientTypes.UserSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.userSummaryList = userSummaryList
    }
}

struct ListUsersOutputResponseBody: Swift.Equatable {
    public let userSummaryList: [ConnectClientTypes.UserSummary]?
    public let nextToken: Swift.String?
}

extension ListUsersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case userSummaryList = "UserSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.UserSummary?].self, forKey: .userSummaryList)
        var userSummaryListDecoded0:[ConnectClientTypes.UserSummary]? = nil
        if let userSummaryListContainer = userSummaryListContainer {
            userSummaryListDecoded0 = [ConnectClientTypes.UserSummary]()
            for structure0 in userSummaryListContainer {
                if let structure0 = structure0 {
                    userSummaryListDecoded0?.append(structure0)
                }
            }
        }
        userSummaryList = userSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ConnectClientTypes.MediaConcurrency: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channel = "Channel"
        case concurrency = "Concurrency"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channel = channel {
            try encodeContainer.encode(channel.rawValue, forKey: .channel)
        }
        if concurrency != 0 {
            try encodeContainer.encode(concurrency, forKey: .concurrency)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Channel.self, forKey: .channel)
        channel = channelDecoded
        let concurrencyDecoded = try containerValues.decode(Swift.Int.self, forKey: .concurrency)
        concurrency = concurrencyDecoded
    }
}

extension ConnectClientTypes.MediaConcurrency: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MediaConcurrency(channel: \(Swift.String(describing: channel)), concurrency: \(Swift.String(describing: concurrency)))"}
}

extension ConnectClientTypes {
    /// Contains information about which channels are supported, and how many contacts an agent can
    ///    have on a channel simultaneously.
    public struct MediaConcurrency: Swift.Equatable {
        /// The channels that agents can handle in the Contact Control Panel (CCP).
        /// This member is required.
        public var channel: ConnectClientTypes.Channel?
        /// The number of contacts an agent can have on a channel simultaneously.
        ///          Valid Range for VOICE: Minimum value of 1. Maximum value of 1.
        ///          Valid Range for CHAT: Minimum value of 1. Maximum value of 10.
        ///          Valid Range for TASK: Minimum value of 1. Maximum value of 10.
        /// This member is required.
        public var concurrency: Swift.Int

        public init (
            channel: ConnectClientTypes.Channel? = nil,
            concurrency: Swift.Int = 0
        )
        {
            self.channel = channel
            self.concurrency = concurrency
        }
    }

}

extension ConnectClientTypes.OutboundCallerConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case outboundCallerIdName = "OutboundCallerIdName"
        case outboundCallerIdNumberId = "OutboundCallerIdNumberId"
        case outboundFlowId = "OutboundFlowId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outboundCallerIdName = outboundCallerIdName {
            try encodeContainer.encode(outboundCallerIdName, forKey: .outboundCallerIdName)
        }
        if let outboundCallerIdNumberId = outboundCallerIdNumberId {
            try encodeContainer.encode(outboundCallerIdNumberId, forKey: .outboundCallerIdNumberId)
        }
        if let outboundFlowId = outboundFlowId {
            try encodeContainer.encode(outboundFlowId, forKey: .outboundFlowId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outboundCallerIdNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outboundCallerIdName)
        outboundCallerIdName = outboundCallerIdNameDecoded
        let outboundCallerIdNumberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outboundCallerIdNumberId)
        outboundCallerIdNumberId = outboundCallerIdNumberIdDecoded
        let outboundFlowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outboundFlowId)
        outboundFlowId = outboundFlowIdDecoded
    }
}

extension ConnectClientTypes.OutboundCallerConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OutboundCallerConfig(outboundCallerIdName: \(Swift.String(describing: outboundCallerIdName)), outboundCallerIdNumberId: \(Swift.String(describing: outboundCallerIdNumberId)), outboundFlowId: \(Swift.String(describing: outboundFlowId)))"}
}

extension ConnectClientTypes {
    /// The outbound caller ID name, number, and outbound whisper flow.
    public struct OutboundCallerConfig: Swift.Equatable {
        /// The caller ID name.
        public var outboundCallerIdName: Swift.String?
        /// The caller ID number.
        public var outboundCallerIdNumberId: Swift.String?
        /// The outbound whisper flow to be used during an outbound call.
        public var outboundFlowId: Swift.String?

        public init (
            outboundCallerIdName: Swift.String? = nil,
            outboundCallerIdNumberId: Swift.String? = nil,
            outboundFlowId: Swift.String? = nil
        )
        {
            self.outboundCallerIdName = outboundCallerIdName
            self.outboundCallerIdNumberId = outboundCallerIdNumberId
            self.outboundFlowId = outboundFlowId
        }
    }

}

extension OutboundContactNotPermittedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OutboundContactNotPermittedException(message: \(Swift.String(describing: message)))"}
}

extension OutboundContactNotPermittedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: OutboundContactNotPermittedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The contact is not permitted.
public struct OutboundContactNotPermittedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message about the contact.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OutboundContactNotPermittedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension OutboundContactNotPermittedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConnectClientTypes.ParticipantDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
    }
}

extension ConnectClientTypes.ParticipantDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ParticipantDetails(displayName: \(Swift.String(describing: displayName)))"}
}

extension ConnectClientTypes {
    /// The customer's details.
    public struct ParticipantDetails: Swift.Equatable {
        /// Display name of the participant.
        /// This member is required.
        public var displayName: Swift.String?

        public init (
            displayName: Swift.String? = nil
        )
        {
            self.displayName = displayName
        }
    }

}

extension ConnectClientTypes {
    public enum PhoneNumberCountryCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ad
        case ae
        case af
        case ag
        case ai
        case al
        case am
        case an
        case ao
        case aq
        case ar
        case `as`
        case at
        case au
        case aw
        case az
        case ba
        case bb
        case bd
        case be
        case bf
        case bg
        case bh
        case bi
        case bj
        case bl
        case bm
        case bn
        case bo
        case br
        case bs
        case bt
        case bw
        case by
        case bz
        case ca
        case cc
        case cd
        case cf
        case cg
        case ch
        case ci
        case ck
        case cl
        case cm
        case cn
        case co
        case cr
        case cu
        case cv
        case cw
        case cx
        case cy
        case cz
        case de
        case dj
        case dk
        case dm
        case `do`
        case dz
        case ec
        case ee
        case eg
        case eh
        case er
        case es
        case et
        case fi
        case fj
        case fk
        case fm
        case fo
        case fr
        case ga
        case gb
        case gd
        case ge
        case gg
        case gh
        case gi
        case gl
        case gm
        case gn
        case gq
        case gr
        case gt
        case gu
        case gw
        case gy
        case hk
        case hn
        case hr
        case ht
        case hu
        case id
        case ie
        case il
        case im
        case `in`
        case io
        case iq
        case ir
        case `is`
        case it
        case je
        case jm
        case jo
        case jp
        case ke
        case kg
        case kh
        case ki
        case km
        case kn
        case kp
        case kr
        case kw
        case ky
        case kz
        case la
        case lb
        case lc
        case li
        case lk
        case lr
        case ls
        case lt
        case lu
        case lv
        case ly
        case ma
        case mc
        case md
        case me
        case mf
        case mg
        case mh
        case mk
        case ml
        case mm
        case mn
        case mo
        case mp
        case mr
        case ms
        case mt
        case mu
        case mv
        case mw
        case mx
        case my
        case mz
        case na
        case nc
        case ne
        case ng
        case ni
        case nl
        case no
        case np
        case nr
        case nu
        case nz
        case om
        case pa
        case pe
        case pf
        case pg
        case ph
        case pk
        case pl
        case pm
        case pn
        case pr
        case pt
        case pw
        case py
        case qa
        case re
        case ro
        case rs
        case ru
        case rw
        case sa
        case sb
        case sc
        case sd
        case se
        case sg
        case sh
        case si
        case sj
        case sk
        case sl
        case sm
        case sn
        case so
        case sr
        case st
        case sv
        case sx
        case sy
        case sz
        case tc
        case td
        case tg
        case th
        case tj
        case tk
        case tl
        case tm
        case tn
        case to
        case tr
        case tt
        case tv
        case tw
        case tz
        case ua
        case ug
        case us
        case uy
        case uz
        case va
        case vc
        case ve
        case vg
        case vi
        case vn
        case vu
        case wf
        case ws
        case ye
        case yt
        case za
        case zm
        case zw
        case sdkUnknown(Swift.String)

        public static var allCases: [PhoneNumberCountryCode] {
            return [
                .ad,
                .ae,
                .af,
                .ag,
                .ai,
                .al,
                .am,
                .an,
                .ao,
                .aq,
                .ar,
                .as,
                .at,
                .au,
                .aw,
                .az,
                .ba,
                .bb,
                .bd,
                .be,
                .bf,
                .bg,
                .bh,
                .bi,
                .bj,
                .bl,
                .bm,
                .bn,
                .bo,
                .br,
                .bs,
                .bt,
                .bw,
                .by,
                .bz,
                .ca,
                .cc,
                .cd,
                .cf,
                .cg,
                .ch,
                .ci,
                .ck,
                .cl,
                .cm,
                .cn,
                .co,
                .cr,
                .cu,
                .cv,
                .cw,
                .cx,
                .cy,
                .cz,
                .de,
                .dj,
                .dk,
                .dm,
                .do,
                .dz,
                .ec,
                .ee,
                .eg,
                .eh,
                .er,
                .es,
                .et,
                .fi,
                .fj,
                .fk,
                .fm,
                .fo,
                .fr,
                .ga,
                .gb,
                .gd,
                .ge,
                .gg,
                .gh,
                .gi,
                .gl,
                .gm,
                .gn,
                .gq,
                .gr,
                .gt,
                .gu,
                .gw,
                .gy,
                .hk,
                .hn,
                .hr,
                .ht,
                .hu,
                .id,
                .ie,
                .il,
                .im,
                .in,
                .io,
                .iq,
                .ir,
                .is,
                .it,
                .je,
                .jm,
                .jo,
                .jp,
                .ke,
                .kg,
                .kh,
                .ki,
                .km,
                .kn,
                .kp,
                .kr,
                .kw,
                .ky,
                .kz,
                .la,
                .lb,
                .lc,
                .li,
                .lk,
                .lr,
                .ls,
                .lt,
                .lu,
                .lv,
                .ly,
                .ma,
                .mc,
                .md,
                .me,
                .mf,
                .mg,
                .mh,
                .mk,
                .ml,
                .mm,
                .mn,
                .mo,
                .mp,
                .mr,
                .ms,
                .mt,
                .mu,
                .mv,
                .mw,
                .mx,
                .my,
                .mz,
                .na,
                .nc,
                .ne,
                .ng,
                .ni,
                .nl,
                .no,
                .np,
                .nr,
                .nu,
                .nz,
                .om,
                .pa,
                .pe,
                .pf,
                .pg,
                .ph,
                .pk,
                .pl,
                .pm,
                .pn,
                .pr,
                .pt,
                .pw,
                .py,
                .qa,
                .re,
                .ro,
                .rs,
                .ru,
                .rw,
                .sa,
                .sb,
                .sc,
                .sd,
                .se,
                .sg,
                .sh,
                .si,
                .sj,
                .sk,
                .sl,
                .sm,
                .sn,
                .so,
                .sr,
                .st,
                .sv,
                .sx,
                .sy,
                .sz,
                .tc,
                .td,
                .tg,
                .th,
                .tj,
                .tk,
                .tl,
                .tm,
                .tn,
                .to,
                .tr,
                .tt,
                .tv,
                .tw,
                .tz,
                .ua,
                .ug,
                .us,
                .uy,
                .uz,
                .va,
                .vc,
                .ve,
                .vg,
                .vi,
                .vn,
                .vu,
                .wf,
                .ws,
                .ye,
                .yt,
                .za,
                .zm,
                .zw,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ad: return "AD"
            case .ae: return "AE"
            case .af: return "AF"
            case .ag: return "AG"
            case .ai: return "AI"
            case .al: return "AL"
            case .am: return "AM"
            case .an: return "AN"
            case .ao: return "AO"
            case .aq: return "AQ"
            case .ar: return "AR"
            case .as: return "AS"
            case .at: return "AT"
            case .au: return "AU"
            case .aw: return "AW"
            case .az: return "AZ"
            case .ba: return "BA"
            case .bb: return "BB"
            case .bd: return "BD"
            case .be: return "BE"
            case .bf: return "BF"
            case .bg: return "BG"
            case .bh: return "BH"
            case .bi: return "BI"
            case .bj: return "BJ"
            case .bl: return "BL"
            case .bm: return "BM"
            case .bn: return "BN"
            case .bo: return "BO"
            case .br: return "BR"
            case .bs: return "BS"
            case .bt: return "BT"
            case .bw: return "BW"
            case .by: return "BY"
            case .bz: return "BZ"
            case .ca: return "CA"
            case .cc: return "CC"
            case .cd: return "CD"
            case .cf: return "CF"
            case .cg: return "CG"
            case .ch: return "CH"
            case .ci: return "CI"
            case .ck: return "CK"
            case .cl: return "CL"
            case .cm: return "CM"
            case .cn: return "CN"
            case .co: return "CO"
            case .cr: return "CR"
            case .cu: return "CU"
            case .cv: return "CV"
            case .cw: return "CW"
            case .cx: return "CX"
            case .cy: return "CY"
            case .cz: return "CZ"
            case .de: return "DE"
            case .dj: return "DJ"
            case .dk: return "DK"
            case .dm: return "DM"
            case .do: return "DO"
            case .dz: return "DZ"
            case .ec: return "EC"
            case .ee: return "EE"
            case .eg: return "EG"
            case .eh: return "EH"
            case .er: return "ER"
            case .es: return "ES"
            case .et: return "ET"
            case .fi: return "FI"
            case .fj: return "FJ"
            case .fk: return "FK"
            case .fm: return "FM"
            case .fo: return "FO"
            case .fr: return "FR"
            case .ga: return "GA"
            case .gb: return "GB"
            case .gd: return "GD"
            case .ge: return "GE"
            case .gg: return "GG"
            case .gh: return "GH"
            case .gi: return "GI"
            case .gl: return "GL"
            case .gm: return "GM"
            case .gn: return "GN"
            case .gq: return "GQ"
            case .gr: return "GR"
            case .gt: return "GT"
            case .gu: return "GU"
            case .gw: return "GW"
            case .gy: return "GY"
            case .hk: return "HK"
            case .hn: return "HN"
            case .hr: return "HR"
            case .ht: return "HT"
            case .hu: return "HU"
            case .id: return "ID"
            case .ie: return "IE"
            case .il: return "IL"
            case .im: return "IM"
            case .in: return "IN"
            case .io: return "IO"
            case .iq: return "IQ"
            case .ir: return "IR"
            case .is: return "IS"
            case .it: return "IT"
            case .je: return "JE"
            case .jm: return "JM"
            case .jo: return "JO"
            case .jp: return "JP"
            case .ke: return "KE"
            case .kg: return "KG"
            case .kh: return "KH"
            case .ki: return "KI"
            case .km: return "KM"
            case .kn: return "KN"
            case .kp: return "KP"
            case .kr: return "KR"
            case .kw: return "KW"
            case .ky: return "KY"
            case .kz: return "KZ"
            case .la: return "LA"
            case .lb: return "LB"
            case .lc: return "LC"
            case .li: return "LI"
            case .lk: return "LK"
            case .lr: return "LR"
            case .ls: return "LS"
            case .lt: return "LT"
            case .lu: return "LU"
            case .lv: return "LV"
            case .ly: return "LY"
            case .ma: return "MA"
            case .mc: return "MC"
            case .md: return "MD"
            case .me: return "ME"
            case .mf: return "MF"
            case .mg: return "MG"
            case .mh: return "MH"
            case .mk: return "MK"
            case .ml: return "ML"
            case .mm: return "MM"
            case .mn: return "MN"
            case .mo: return "MO"
            case .mp: return "MP"
            case .mr: return "MR"
            case .ms: return "MS"
            case .mt: return "MT"
            case .mu: return "MU"
            case .mv: return "MV"
            case .mw: return "MW"
            case .mx: return "MX"
            case .my: return "MY"
            case .mz: return "MZ"
            case .na: return "NA"
            case .nc: return "NC"
            case .ne: return "NE"
            case .ng: return "NG"
            case .ni: return "NI"
            case .nl: return "NL"
            case .no: return "NO"
            case .np: return "NP"
            case .nr: return "NR"
            case .nu: return "NU"
            case .nz: return "NZ"
            case .om: return "OM"
            case .pa: return "PA"
            case .pe: return "PE"
            case .pf: return "PF"
            case .pg: return "PG"
            case .ph: return "PH"
            case .pk: return "PK"
            case .pl: return "PL"
            case .pm: return "PM"
            case .pn: return "PN"
            case .pr: return "PR"
            case .pt: return "PT"
            case .pw: return "PW"
            case .py: return "PY"
            case .qa: return "QA"
            case .re: return "RE"
            case .ro: return "RO"
            case .rs: return "RS"
            case .ru: return "RU"
            case .rw: return "RW"
            case .sa: return "SA"
            case .sb: return "SB"
            case .sc: return "SC"
            case .sd: return "SD"
            case .se: return "SE"
            case .sg: return "SG"
            case .sh: return "SH"
            case .si: return "SI"
            case .sj: return "SJ"
            case .sk: return "SK"
            case .sl: return "SL"
            case .sm: return "SM"
            case .sn: return "SN"
            case .so: return "SO"
            case .sr: return "SR"
            case .st: return "ST"
            case .sv: return "SV"
            case .sx: return "SX"
            case .sy: return "SY"
            case .sz: return "SZ"
            case .tc: return "TC"
            case .td: return "TD"
            case .tg: return "TG"
            case .th: return "TH"
            case .tj: return "TJ"
            case .tk: return "TK"
            case .tl: return "TL"
            case .tm: return "TM"
            case .tn: return "TN"
            case .to: return "TO"
            case .tr: return "TR"
            case .tt: return "TT"
            case .tv: return "TV"
            case .tw: return "TW"
            case .tz: return "TZ"
            case .ua: return "UA"
            case .ug: return "UG"
            case .us: return "US"
            case .uy: return "UY"
            case .uz: return "UZ"
            case .va: return "VA"
            case .vc: return "VC"
            case .ve: return "VE"
            case .vg: return "VG"
            case .vi: return "VI"
            case .vn: return "VN"
            case .vu: return "VU"
            case .wf: return "WF"
            case .ws: return "WS"
            case .ye: return "YE"
            case .yt: return "YT"
            case .za: return "ZA"
            case .zm: return "ZM"
            case .zw: return "ZW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PhoneNumberCountryCode(rawValue: rawValue) ?? PhoneNumberCountryCode.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.PhoneNumberQuickConnectConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case phoneNumber = "PhoneNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let phoneNumber = phoneNumber {
            try encodeContainer.encode(phoneNumber, forKey: .phoneNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let phoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .phoneNumber)
        phoneNumber = phoneNumberDecoded
    }
}

extension ConnectClientTypes.PhoneNumberQuickConnectConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PhoneNumberQuickConnectConfig(phoneNumber: \(Swift.String(describing: phoneNumber)))"}
}

extension ConnectClientTypes {
    /// Contains information about a phone number for a quick connect.
    public struct PhoneNumberQuickConnectConfig: Swift.Equatable {
        /// The phone number in E.164 format.
        /// This member is required.
        public var phoneNumber: Swift.String?

        public init (
            phoneNumber: Swift.String? = nil
        )
        {
            self.phoneNumber = phoneNumber
        }
    }

}

extension ConnectClientTypes.PhoneNumberSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
        case phoneNumber = "PhoneNumber"
        case phoneNumberCountryCode = "PhoneNumberCountryCode"
        case phoneNumberType = "PhoneNumberType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let phoneNumber = phoneNumber {
            try encodeContainer.encode(phoneNumber, forKey: .phoneNumber)
        }
        if let phoneNumberCountryCode = phoneNumberCountryCode {
            try encodeContainer.encode(phoneNumberCountryCode.rawValue, forKey: .phoneNumberCountryCode)
        }
        if let phoneNumberType = phoneNumberType {
            try encodeContainer.encode(phoneNumberType.rawValue, forKey: .phoneNumberType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let phoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .phoneNumber)
        phoneNumber = phoneNumberDecoded
        let phoneNumberTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.PhoneNumberType.self, forKey: .phoneNumberType)
        phoneNumberType = phoneNumberTypeDecoded
        let phoneNumberCountryCodeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.PhoneNumberCountryCode.self, forKey: .phoneNumberCountryCode)
        phoneNumberCountryCode = phoneNumberCountryCodeDecoded
    }
}

extension ConnectClientTypes.PhoneNumberSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PhoneNumberSummary(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)), phoneNumber: \(Swift.String(describing: phoneNumber)), phoneNumberCountryCode: \(Swift.String(describing: phoneNumberCountryCode)), phoneNumberType: \(Swift.String(describing: phoneNumberType)))"}
}

extension ConnectClientTypes {
    /// Contains summary information about a phone number for a contact center.
    public struct PhoneNumberSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the phone number.
        public var arn: Swift.String?
        /// The identifier of the phone number.
        public var id: Swift.String?
        /// The phone number.
        public var phoneNumber: Swift.String?
        /// The ISO country code.
        public var phoneNumberCountryCode: ConnectClientTypes.PhoneNumberCountryCode?
        /// The type of phone number.
        public var phoneNumberType: ConnectClientTypes.PhoneNumberType?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            phoneNumber: Swift.String? = nil,
            phoneNumberCountryCode: ConnectClientTypes.PhoneNumberCountryCode? = nil,
            phoneNumberType: ConnectClientTypes.PhoneNumberType? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.phoneNumber = phoneNumber
            self.phoneNumberCountryCode = phoneNumberCountryCode
            self.phoneNumberType = phoneNumberType
        }
    }

}

extension ConnectClientTypes {
    public enum PhoneNumberType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case did
        case tollFree
        case sdkUnknown(Swift.String)

        public static var allCases: [PhoneNumberType] {
            return [
                .did,
                .tollFree,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .did: return "DID"
            case .tollFree: return "TOLL_FREE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PhoneNumberType(rawValue: rawValue) ?? PhoneNumberType.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes {
    public enum PhoneType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deskPhone
        case softPhone
        case sdkUnknown(Swift.String)

        public static var allCases: [PhoneType] {
            return [
                .deskPhone,
                .softPhone,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deskPhone: return "DESK_PHONE"
            case .softPhone: return "SOFT_PHONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PhoneType(rawValue: rawValue) ?? PhoneType.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.ProblemDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConnectClientTypes.ProblemDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProblemDetail(message: \(Swift.String(describing: message)))"}
}

extension ConnectClientTypes {
    /// Information about a problem detail.
    public struct ProblemDetail: Swift.Equatable {
        /// The problem detail's message.
        public var message: Swift.String?

        public init (
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension ConnectClientTypes.PromptSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension ConnectClientTypes.PromptSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PromptSummary(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)))"}
}

extension ConnectClientTypes {
    /// Contains information about the prompt.
    public struct PromptSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the prompt.
        public var arn: Swift.String?
        /// The identifier of the prompt.
        public var id: Swift.String?
        /// The name of the prompt.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
        }
    }

}

extension ConnectClientTypes.Queue: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case hoursOfOperationId = "HoursOfOperationId"
        case maxContacts = "MaxContacts"
        case name = "Name"
        case outboundCallerConfig = "OutboundCallerConfig"
        case queueArn = "QueueArn"
        case queueId = "QueueId"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let hoursOfOperationId = hoursOfOperationId {
            try encodeContainer.encode(hoursOfOperationId, forKey: .hoursOfOperationId)
        }
        if maxContacts != 0 {
            try encodeContainer.encode(maxContacts, forKey: .maxContacts)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outboundCallerConfig = outboundCallerConfig {
            try encodeContainer.encode(outboundCallerConfig, forKey: .outboundCallerConfig)
        }
        if let queueArn = queueArn {
            try encodeContainer.encode(queueArn, forKey: .queueArn)
        }
        if let queueId = queueId {
            try encodeContainer.encode(queueId, forKey: .queueId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let queueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueArn)
        queueArn = queueArnDecoded
        let queueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueId)
        queueId = queueIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let outboundCallerConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.OutboundCallerConfig.self, forKey: .outboundCallerConfig)
        outboundCallerConfig = outboundCallerConfigDecoded
        let hoursOfOperationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hoursOfOperationId)
        hoursOfOperationId = hoursOfOperationIdDecoded
        let maxContactsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxContacts)
        maxContacts = maxContactsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.QueueStatus.self, forKey: .status)
        status = statusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ConnectClientTypes.Queue: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Queue(description: \(Swift.String(describing: description)), hoursOfOperationId: \(Swift.String(describing: hoursOfOperationId)), maxContacts: \(Swift.String(describing: maxContacts)), name: \(Swift.String(describing: name)), outboundCallerConfig: \(Swift.String(describing: outboundCallerConfig)), queueArn: \(Swift.String(describing: queueArn)), queueId: \(Swift.String(describing: queueId)), status: \(Swift.String(describing: status)), tags: \(Swift.String(describing: tags)))"}
}

extension ConnectClientTypes {
    /// Contains information about a queue.
    public struct Queue: Swift.Equatable {
        /// The description of the queue.
        public var description: Swift.String?
        /// The identifier for the hours of operation.
        public var hoursOfOperationId: Swift.String?
        /// The maximum number of contacts that can be in the queue before it is considered full.
        public var maxContacts: Swift.Int
        /// The name of the queue.
        public var name: Swift.String?
        /// The outbound caller ID name, number, and outbound whisper flow.
        public var outboundCallerConfig: ConnectClientTypes.OutboundCallerConfig?
        /// The Amazon Resource Name (ARN) for the queue.
        public var queueArn: Swift.String?
        /// The identifier for the queue.
        public var queueId: Swift.String?
        /// The status of the queue.
        public var status: ConnectClientTypes.QueueStatus?
        /// One or more tags.
        public var tags: [Swift.String:Swift.String]?

        public init (
            description: Swift.String? = nil,
            hoursOfOperationId: Swift.String? = nil,
            maxContacts: Swift.Int = 0,
            name: Swift.String? = nil,
            outboundCallerConfig: ConnectClientTypes.OutboundCallerConfig? = nil,
            queueArn: Swift.String? = nil,
            queueId: Swift.String? = nil,
            status: ConnectClientTypes.QueueStatus? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.description = description
            self.hoursOfOperationId = hoursOfOperationId
            self.maxContacts = maxContacts
            self.name = name
            self.outboundCallerConfig = outboundCallerConfig
            self.queueArn = queueArn
            self.queueId = queueId
            self.status = status
            self.tags = tags
        }
    }

}

extension ConnectClientTypes.QueueQuickConnectConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactFlowId = "ContactFlowId"
        case queueId = "QueueId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactFlowId = contactFlowId {
            try encodeContainer.encode(contactFlowId, forKey: .contactFlowId)
        }
        if let queueId = queueId {
            try encodeContainer.encode(queueId, forKey: .queueId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueId)
        queueId = queueIdDecoded
        let contactFlowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactFlowId)
        contactFlowId = contactFlowIdDecoded
    }
}

extension ConnectClientTypes.QueueQuickConnectConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QueueQuickConnectConfig(contactFlowId: \(Swift.String(describing: contactFlowId)), queueId: \(Swift.String(describing: queueId)))"}
}

extension ConnectClientTypes {
    /// Contains information about a queue for a quick connect. The contact flow must be of type
    ///    Transfer to Queue.
    public struct QueueQuickConnectConfig: Swift.Equatable {
        /// The identifier of the contact flow.
        /// This member is required.
        public var contactFlowId: Swift.String?
        /// The identifier for the queue.
        /// This member is required.
        public var queueId: Swift.String?

        public init (
            contactFlowId: Swift.String? = nil,
            queueId: Swift.String? = nil
        )
        {
            self.contactFlowId = contactFlowId
            self.queueId = queueId
        }
    }

}

extension ConnectClientTypes.QueueReference: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension ConnectClientTypes.QueueReference: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QueueReference(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)))"}
}

extension ConnectClientTypes {
    /// Contains information about a queue resource for which metrics are returned.
    public struct QueueReference: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the queue.
        public var arn: Swift.String?
        /// The identifier of the queue.
        public var id: Swift.String?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
        }
    }

}

extension ConnectClientTypes {
    public enum QueueStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [QueueStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QueueStatus(rawValue: rawValue) ?? QueueStatus.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.QueueSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
        case queueType = "QueueType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let queueType = queueType {
            try encodeContainer.encode(queueType.rawValue, forKey: .queueType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let queueTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.QueueType.self, forKey: .queueType)
        queueType = queueTypeDecoded
    }
}

extension ConnectClientTypes.QueueSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QueueSummary(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), queueType: \(Swift.String(describing: queueType)))"}
}

extension ConnectClientTypes {
    /// Contains summary information about a queue.
    public struct QueueSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the queue.
        public var arn: Swift.String?
        /// The identifier of the queue.
        public var id: Swift.String?
        /// The name of the queue.
        public var name: Swift.String?
        /// The type of queue.
        public var queueType: ConnectClientTypes.QueueType?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            queueType: ConnectClientTypes.QueueType? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
            self.queueType = queueType
        }
    }

}

extension ConnectClientTypes {
    public enum QueueType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case agent
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [QueueType] {
            return [
                .agent,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .agent: return "AGENT"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QueueType(rawValue: rawValue) ?? QueueType.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.QuickConnect: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
        case quickConnectARN = "QuickConnectARN"
        case quickConnectConfig = "QuickConnectConfig"
        case quickConnectId = "QuickConnectId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let quickConnectARN = quickConnectARN {
            try encodeContainer.encode(quickConnectARN, forKey: .quickConnectARN)
        }
        if let quickConnectConfig = quickConnectConfig {
            try encodeContainer.encode(quickConnectConfig, forKey: .quickConnectConfig)
        }
        if let quickConnectId = quickConnectId {
            try encodeContainer.encode(quickConnectId, forKey: .quickConnectId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let quickConnectARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quickConnectARN)
        quickConnectARN = quickConnectARNDecoded
        let quickConnectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quickConnectId)
        quickConnectId = quickConnectIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let quickConnectConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.QuickConnectConfig.self, forKey: .quickConnectConfig)
        quickConnectConfig = quickConnectConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ConnectClientTypes.QuickConnect: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QuickConnect(description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), quickConnectARN: \(Swift.String(describing: quickConnectARN)), quickConnectConfig: \(Swift.String(describing: quickConnectConfig)), quickConnectId: \(Swift.String(describing: quickConnectId)), tags: \(Swift.String(describing: tags)))"}
}

extension ConnectClientTypes {
    /// Contains information about a quick connect.
    public struct QuickConnect: Swift.Equatable {
        /// The description.
        public var description: Swift.String?
        /// The name of the quick connect.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) of the quick connect.
        public var quickConnectARN: Swift.String?
        /// Contains information about the quick connect.
        public var quickConnectConfig: ConnectClientTypes.QuickConnectConfig?
        /// The identifier for the quick connect.
        public var quickConnectId: Swift.String?
        /// One or more tags.
        public var tags: [Swift.String:Swift.String]?

        public init (
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            quickConnectARN: Swift.String? = nil,
            quickConnectConfig: ConnectClientTypes.QuickConnectConfig? = nil,
            quickConnectId: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.description = description
            self.name = name
            self.quickConnectARN = quickConnectARN
            self.quickConnectConfig = quickConnectConfig
            self.quickConnectId = quickConnectId
            self.tags = tags
        }
    }

}

extension ConnectClientTypes.QuickConnectConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case phoneConfig = "PhoneConfig"
        case queueConfig = "QueueConfig"
        case quickConnectType = "QuickConnectType"
        case userConfig = "UserConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let phoneConfig = phoneConfig {
            try encodeContainer.encode(phoneConfig, forKey: .phoneConfig)
        }
        if let queueConfig = queueConfig {
            try encodeContainer.encode(queueConfig, forKey: .queueConfig)
        }
        if let quickConnectType = quickConnectType {
            try encodeContainer.encode(quickConnectType.rawValue, forKey: .quickConnectType)
        }
        if let userConfig = userConfig {
            try encodeContainer.encode(userConfig, forKey: .userConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let quickConnectTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.QuickConnectType.self, forKey: .quickConnectType)
        quickConnectType = quickConnectTypeDecoded
        let userConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.UserQuickConnectConfig.self, forKey: .userConfig)
        userConfig = userConfigDecoded
        let queueConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.QueueQuickConnectConfig.self, forKey: .queueConfig)
        queueConfig = queueConfigDecoded
        let phoneConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.PhoneNumberQuickConnectConfig.self, forKey: .phoneConfig)
        phoneConfig = phoneConfigDecoded
    }
}

extension ConnectClientTypes.QuickConnectConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QuickConnectConfig(phoneConfig: \(Swift.String(describing: phoneConfig)), queueConfig: \(Swift.String(describing: queueConfig)), quickConnectType: \(Swift.String(describing: quickConnectType)), userConfig: \(Swift.String(describing: userConfig)))"}
}

extension ConnectClientTypes {
    /// Contains configuration settings for a quick connect.
    public struct QuickConnectConfig: Swift.Equatable {
        /// The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
        public var phoneConfig: ConnectClientTypes.PhoneNumberQuickConnectConfig?
        /// The queue configuration. This is required only if QuickConnectType is QUEUE.
        public var queueConfig: ConnectClientTypes.QueueQuickConnectConfig?
        /// The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are
        ///    prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).
        /// This member is required.
        public var quickConnectType: ConnectClientTypes.QuickConnectType?
        /// The user configuration. This is required only if QuickConnectType is USER.
        public var userConfig: ConnectClientTypes.UserQuickConnectConfig?

        public init (
            phoneConfig: ConnectClientTypes.PhoneNumberQuickConnectConfig? = nil,
            queueConfig: ConnectClientTypes.QueueQuickConnectConfig? = nil,
            quickConnectType: ConnectClientTypes.QuickConnectType? = nil,
            userConfig: ConnectClientTypes.UserQuickConnectConfig? = nil
        )
        {
            self.phoneConfig = phoneConfig
            self.queueConfig = queueConfig
            self.quickConnectType = quickConnectType
            self.userConfig = userConfig
        }
    }

}

extension ConnectClientTypes.QuickConnectSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
        case quickConnectType = "QuickConnectType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let quickConnectType = quickConnectType {
            try encodeContainer.encode(quickConnectType.rawValue, forKey: .quickConnectType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let quickConnectTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.QuickConnectType.self, forKey: .quickConnectType)
        quickConnectType = quickConnectTypeDecoded
    }
}

extension ConnectClientTypes.QuickConnectSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QuickConnectSummary(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), quickConnectType: \(Swift.String(describing: quickConnectType)))"}
}

extension ConnectClientTypes {
    /// Contains summary information about a quick connect.
    public struct QuickConnectSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the quick connect.
        public var arn: Swift.String?
        /// The identifier for the quick connect.
        public var id: Swift.String?
        /// The name of the quick connect.
        public var name: Swift.String?
        /// The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are
        ///    prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).
        public var quickConnectType: ConnectClientTypes.QuickConnectType?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            quickConnectType: ConnectClientTypes.QuickConnectType? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
            self.quickConnectType = quickConnectType
        }
    }

}

extension ConnectClientTypes {
    public enum QuickConnectType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case phoneNumber
        case queue
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [QuickConnectType] {
            return [
                .phoneNumber,
                .queue,
                .user,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .phoneNumber: return "PHONE_NUMBER"
            case .queue: return "QUEUE"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QuickConnectType(rawValue: rawValue) ?? QuickConnectType.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.Reference: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.ReferenceType.self, forKey: .type)
        type = typeDecoded
    }
}

extension ConnectClientTypes.Reference: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Reference(type: \(Swift.String(describing: type)), value: \(Swift.String(describing: value)))"}
}

extension ConnectClientTypes {
    /// A link that an agent selects to complete a given task. You can have up to 4,096 UTF-8 bytes
    ///    across all references for a contact.
    public struct Reference: Swift.Equatable {
        /// A valid
        ///    URL.
        /// This member is required.
        public var type: ConnectClientTypes.ReferenceType?
        /// A formatted URL that displays to an agent in the Contact Control Panel (CCP)
        /// This member is required.
        public var value: Swift.String?

        public init (
            type: ConnectClientTypes.ReferenceType? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension ConnectClientTypes {
    public enum ReferenceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case url
        case sdkUnknown(Swift.String)

        public static var allCases: [ReferenceType] {
            return [
                .url,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .url: return "URL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReferenceType(rawValue: rawValue) ?? ReferenceType.sdkUnknown(rawValue)
        }
    }
}

extension ResourceConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceConflictException(message: \(Swift.String(describing: message)))"}
}

extension ResourceConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A resource already has that name.
public struct ResourceConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceInUseException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceInUseException(message: \(Swift.String(describing: message)), resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ResourceInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceId = output.resourceId
            self.resourceType = output.resourceType
        } else {
            self.message = nil
            self.resourceId = nil
            self.resourceType = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// That resource is already in use. Please try another.
public struct ResourceInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// The identifier for the resource.
    public var resourceId: Swift.String?
    /// The type of resource.
    public var resourceType: ConnectClientTypes.ResourceType?

    public init (
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: ConnectClientTypes.ResourceType? = nil
    )
    {
        self.message = message
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct ResourceInUseExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let resourceType: ConnectClientTypes.ResourceType?
    public let resourceId: Swift.String?
}

extension ResourceInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
    }
}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource was not found.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message about the resource.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConnectClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case contact
        case contactFlow
        case hierarchyGroup
        case hierarchyLevel
        case instance
        case participant
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .contact,
                .contactFlow,
                .hierarchyGroup,
                .hierarchyLevel,
                .instance,
                .participant,
                .user,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .contact: return "CONTACT"
            case .contactFlow: return "CONTACT_FLOW"
            case .hierarchyGroup: return "HIERARCHY_GROUP"
            case .hierarchyLevel: return "HIERARCHY_LEVEL"
            case .instance: return "INSTANCE"
            case .participant: return "PARTICIPANT"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

public struct ResumeContactRecordingInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResumeContactRecordingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResumeContactRecordingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResumeContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResumeContactRecordingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResumeContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResumeContactRecordingOutputError>
}

extension ResumeContactRecordingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResumeContactRecordingInput(contactId: \(Swift.String(describing: contactId)), initialContactId: \(Swift.String(describing: initialContactId)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension ResumeContactRecordingInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactId = "ContactId"
        case initialContactId = "InitialContactId"
        case instanceId = "InstanceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactId = contactId {
            try encodeContainer.encode(contactId, forKey: .contactId)
        }
        if let initialContactId = initialContactId {
            try encodeContainer.encode(initialContactId, forKey: .initialContactId)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
    }
}

public struct ResumeContactRecordingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResumeContactRecordingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResumeContactRecordingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResumeContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResumeContactRecordingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResumeContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResumeContactRecordingOutputError>
}

public struct ResumeContactRecordingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResumeContactRecordingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResumeContactRecordingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResumeContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResumeContactRecordingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResumeContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResumeContactRecordingOutputError>
}

public struct ResumeContactRecordingInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResumeContactRecordingInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ResumeContactRecordingInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResumeContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/contact/resume-recording"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ResumeContactRecordingInput
    public typealias MOutput = ClientRuntime.OperationOutput<ResumeContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResumeContactRecordingOutputError>
}

public struct ResumeContactRecordingInput: Swift.Equatable {
    /// The identifier of the contact.
    /// This member is required.
    public var contactId: Swift.String?
    /// The identifier of the contact. This is the identifier of the contact associated with the
    ///    first interaction with the contact center.
    /// This member is required.
    public var initialContactId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        contactId: Swift.String? = nil,
        initialContactId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.contactId = contactId
        self.initialContactId = initialContactId
        self.instanceId = instanceId
    }
}

struct ResumeContactRecordingInputBody: Swift.Equatable {
    public let instanceId: Swift.String?
    public let contactId: Swift.String?
    public let initialContactId: Swift.String?
}

extension ResumeContactRecordingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactId = "ContactId"
        case initialContactId = "InitialContactId"
        case instanceId = "InstanceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let contactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactId)
        contactId = contactIdDecoded
        let initialContactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .initialContactId)
        initialContactId = initialContactIdDecoded
    }
}

extension ResumeContactRecordingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ResumeContactRecordingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ResumeContactRecordingOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResumeContactRecordingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResumeContactRecordingOutputResponse()"}
}

extension ResumeContactRecordingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ResumeContactRecordingOutputResponse: Swift.Equatable {

    public init() {}
}

struct ResumeContactRecordingOutputResponseBody: Swift.Equatable {
}

extension ResumeContactRecordingOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ConnectClientTypes.RoutingProfile: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultOutboundQueueId = "DefaultOutboundQueueId"
        case description = "Description"
        case instanceId = "InstanceId"
        case mediaConcurrencies = "MediaConcurrencies"
        case name = "Name"
        case routingProfileArn = "RoutingProfileArn"
        case routingProfileId = "RoutingProfileId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultOutboundQueueId = defaultOutboundQueueId {
            try encodeContainer.encode(defaultOutboundQueueId, forKey: .defaultOutboundQueueId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let mediaConcurrencies = mediaConcurrencies {
            var mediaConcurrenciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaConcurrencies)
            for mediaconcurrencies0 in mediaConcurrencies {
                try mediaConcurrenciesContainer.encode(mediaconcurrencies0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let routingProfileArn = routingProfileArn {
            try encodeContainer.encode(routingProfileArn, forKey: .routingProfileArn)
        }
        if let routingProfileId = routingProfileId {
            try encodeContainer.encode(routingProfileId, forKey: .routingProfileId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let routingProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingProfileArn)
        routingProfileArn = routingProfileArnDecoded
        let routingProfileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingProfileId)
        routingProfileId = routingProfileIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let mediaConcurrenciesContainer = try containerValues.decodeIfPresent([ConnectClientTypes.MediaConcurrency?].self, forKey: .mediaConcurrencies)
        var mediaConcurrenciesDecoded0:[ConnectClientTypes.MediaConcurrency]? = nil
        if let mediaConcurrenciesContainer = mediaConcurrenciesContainer {
            mediaConcurrenciesDecoded0 = [ConnectClientTypes.MediaConcurrency]()
            for structure0 in mediaConcurrenciesContainer {
                if let structure0 = structure0 {
                    mediaConcurrenciesDecoded0?.append(structure0)
                }
            }
        }
        mediaConcurrencies = mediaConcurrenciesDecoded0
        let defaultOutboundQueueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultOutboundQueueId)
        defaultOutboundQueueId = defaultOutboundQueueIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ConnectClientTypes.RoutingProfile: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RoutingProfile(defaultOutboundQueueId: \(Swift.String(describing: defaultOutboundQueueId)), description: \(Swift.String(describing: description)), instanceId: \(Swift.String(describing: instanceId)), mediaConcurrencies: \(Swift.String(describing: mediaConcurrencies)), name: \(Swift.String(describing: name)), routingProfileArn: \(Swift.String(describing: routingProfileArn)), routingProfileId: \(Swift.String(describing: routingProfileId)), tags: \(Swift.String(describing: tags)))"}
}

extension ConnectClientTypes {
    /// Contains information about a routing profile.
    public struct RoutingProfile: Swift.Equatable {
        /// The identifier of the default outbound queue for this routing profile.
        public var defaultOutboundQueueId: Swift.String?
        /// The description of the routing profile.
        public var description: Swift.String?
        /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
        public var instanceId: Swift.String?
        /// The channels agents can handle in the Contact Control Panel (CCP) for this routing
        ///    profile.
        public var mediaConcurrencies: [ConnectClientTypes.MediaConcurrency]?
        /// The name of the routing profile.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) of the routing profile.
        public var routingProfileArn: Swift.String?
        /// The identifier of the routing profile.
        public var routingProfileId: Swift.String?
        /// One or more tags.
        public var tags: [Swift.String:Swift.String]?

        public init (
            defaultOutboundQueueId: Swift.String? = nil,
            description: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            mediaConcurrencies: [ConnectClientTypes.MediaConcurrency]? = nil,
            name: Swift.String? = nil,
            routingProfileArn: Swift.String? = nil,
            routingProfileId: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.defaultOutboundQueueId = defaultOutboundQueueId
            self.description = description
            self.instanceId = instanceId
            self.mediaConcurrencies = mediaConcurrencies
            self.name = name
            self.routingProfileArn = routingProfileArn
            self.routingProfileId = routingProfileId
            self.tags = tags
        }
    }

}

extension ConnectClientTypes.RoutingProfileQueueConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delay = "Delay"
        case priority = "Priority"
        case queueReference = "QueueReference"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if delay != 0 {
            try encodeContainer.encode(delay, forKey: .delay)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let queueReference = queueReference {
            try encodeContainer.encode(queueReference, forKey: .queueReference)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueReferenceDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.RoutingProfileQueueReference.self, forKey: .queueReference)
        queueReference = queueReferenceDecoded
        let priorityDecoded = try containerValues.decode(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let delayDecoded = try containerValues.decode(Swift.Int.self, forKey: .delay)
        delay = delayDecoded
    }
}

extension ConnectClientTypes.RoutingProfileQueueConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RoutingProfileQueueConfig(delay: \(Swift.String(describing: delay)), priority: \(Swift.String(describing: priority)), queueReference: \(Swift.String(describing: queueReference)))"}
}

extension ConnectClientTypes {
    /// Contains information about the queue and channel for which priority and delay can be
    ///    set.
    public struct RoutingProfileQueueConfig: Swift.Equatable {
        /// The delay, in seconds, a contact should be in the queue before they are routed to an
        ///    available agent. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html">Queues: priority and
        ///     delay in the Amazon Connect Administrator Guide.
        /// This member is required.
        public var delay: Swift.Int
        /// The order in which contacts are to be handled for the queue. For more information, see
        ///     <a href="https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html">Queues: priority and
        ///     delay.
        /// This member is required.
        public var priority: Swift.Int
        /// Contains information about a queue resource.
        /// This member is required.
        public var queueReference: ConnectClientTypes.RoutingProfileQueueReference?

        public init (
            delay: Swift.Int = 0,
            priority: Swift.Int = 0,
            queueReference: ConnectClientTypes.RoutingProfileQueueReference? = nil
        )
        {
            self.delay = delay
            self.priority = priority
            self.queueReference = queueReference
        }
    }

}

extension ConnectClientTypes.RoutingProfileQueueConfigSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channel = "Channel"
        case delay = "Delay"
        case priority = "Priority"
        case queueArn = "QueueArn"
        case queueId = "QueueId"
        case queueName = "QueueName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channel = channel {
            try encodeContainer.encode(channel.rawValue, forKey: .channel)
        }
        if delay != 0 {
            try encodeContainer.encode(delay, forKey: .delay)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let queueArn = queueArn {
            try encodeContainer.encode(queueArn, forKey: .queueArn)
        }
        if let queueId = queueId {
            try encodeContainer.encode(queueId, forKey: .queueId)
        }
        if let queueName = queueName {
            try encodeContainer.encode(queueName, forKey: .queueName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueId)
        queueId = queueIdDecoded
        let queueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueArn)
        queueArn = queueArnDecoded
        let queueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueName)
        queueName = queueNameDecoded
        let priorityDecoded = try containerValues.decode(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let delayDecoded = try containerValues.decode(Swift.Int.self, forKey: .delay)
        delay = delayDecoded
        let channelDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Channel.self, forKey: .channel)
        channel = channelDecoded
    }
}

extension ConnectClientTypes.RoutingProfileQueueConfigSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RoutingProfileQueueConfigSummary(channel: \(Swift.String(describing: channel)), delay: \(Swift.String(describing: delay)), priority: \(Swift.String(describing: priority)), queueArn: \(Swift.String(describing: queueArn)), queueId: \(Swift.String(describing: queueId)), queueName: \(Swift.String(describing: queueName)))"}
}

extension ConnectClientTypes {
    /// Contains summary information about a routing profile queue.
    public struct RoutingProfileQueueConfigSummary: Swift.Equatable {
        /// The channels this queue supports.
        /// This member is required.
        public var channel: ConnectClientTypes.Channel?
        /// The delay, in seconds, that a contact should be in the queue before they are routed to an
        ///    available agent. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html">Queues: priority and
        ///     delay in the Amazon Connect Administrator Guide.
        /// This member is required.
        public var delay: Swift.Int
        /// The order in which contacts are to be handled for the queue. For more information, see
        ///     <a href="https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html">Queues: priority and
        ///     delay.
        /// This member is required.
        public var priority: Swift.Int
        /// The Amazon Resource Name (ARN) of the queue.
        /// This member is required.
        public var queueArn: Swift.String?
        /// The identifier for the queue.
        /// This member is required.
        public var queueId: Swift.String?
        /// The name of the queue.
        /// This member is required.
        public var queueName: Swift.String?

        public init (
            channel: ConnectClientTypes.Channel? = nil,
            delay: Swift.Int = 0,
            priority: Swift.Int = 0,
            queueArn: Swift.String? = nil,
            queueId: Swift.String? = nil,
            queueName: Swift.String? = nil
        )
        {
            self.channel = channel
            self.delay = delay
            self.priority = priority
            self.queueArn = queueArn
            self.queueId = queueId
            self.queueName = queueName
        }
    }

}

extension ConnectClientTypes.RoutingProfileQueueReference: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channel = "Channel"
        case queueId = "QueueId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channel = channel {
            try encodeContainer.encode(channel.rawValue, forKey: .channel)
        }
        if let queueId = queueId {
            try encodeContainer.encode(queueId, forKey: .queueId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueId)
        queueId = queueIdDecoded
        let channelDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Channel.self, forKey: .channel)
        channel = channelDecoded
    }
}

extension ConnectClientTypes.RoutingProfileQueueReference: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RoutingProfileQueueReference(channel: \(Swift.String(describing: channel)), queueId: \(Swift.String(describing: queueId)))"}
}

extension ConnectClientTypes {
    /// Contains the channel and queue identifier for a routing profile.
    public struct RoutingProfileQueueReference: Swift.Equatable {
        /// The channels agents can handle in the Contact Control Panel (CCP) for this routing
        ///    profile.
        /// This member is required.
        public var channel: ConnectClientTypes.Channel?
        /// The identifier for the queue.
        /// This member is required.
        public var queueId: Swift.String?

        public init (
            channel: ConnectClientTypes.Channel? = nil,
            queueId: Swift.String? = nil
        )
        {
            self.channel = channel
            self.queueId = queueId
        }
    }

}

extension ConnectClientTypes.RoutingProfileSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension ConnectClientTypes.RoutingProfileSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RoutingProfileSummary(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)))"}
}

extension ConnectClientTypes {
    /// Contains summary information about a routing profile.
    public struct RoutingProfileSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the routing profile.
        public var arn: Swift.String?
        /// The identifier of the routing profile.
        public var id: Swift.String?
        /// The name of the routing profile.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
        }
    }

}

extension ConnectClientTypes.S3Config: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName = "BucketName"
        case bucketPrefix = "BucketPrefix"
        case encryptionConfig = "EncryptionConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketName = bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let bucketPrefix = bucketPrefix {
            try encodeContainer.encode(bucketPrefix, forKey: .bucketPrefix)
        }
        if let encryptionConfig = encryptionConfig {
            try encodeContainer.encode(encryptionConfig, forKey: .encryptionConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let bucketPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketPrefix)
        bucketPrefix = bucketPrefixDecoded
        let encryptionConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.EncryptionConfig.self, forKey: .encryptionConfig)
        encryptionConfig = encryptionConfigDecoded
    }
}

extension ConnectClientTypes.S3Config: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "S3Config(bucketName: \(Swift.String(describing: bucketName)), bucketPrefix: \(Swift.String(describing: bucketPrefix)), encryptionConfig: \(Swift.String(describing: encryptionConfig)))"}
}

extension ConnectClientTypes {
    /// Information about the Amazon Simple Storage Service (Amazon S3) storage type.
    public struct S3Config: Swift.Equatable {
        /// The S3 bucket name.
        /// This member is required.
        public var bucketName: Swift.String?
        /// The S3 bucket prefix.
        /// This member is required.
        public var bucketPrefix: Swift.String?
        /// The Amazon S3 encryption configuration.
        public var encryptionConfig: ConnectClientTypes.EncryptionConfig?

        public init (
            bucketName: Swift.String? = nil,
            bucketPrefix: Swift.String? = nil,
            encryptionConfig: ConnectClientTypes.EncryptionConfig? = nil
        )
        {
            self.bucketName = bucketName
            self.bucketPrefix = bucketPrefix
            self.encryptionConfig = encryptionConfig
        }
    }

}

extension ConnectClientTypes.SecurityKey: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
        case creationTime = "CreationTime"
        case key = "Key"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationId = associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension ConnectClientTypes.SecurityKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SecurityKey(associationId: \(Swift.String(describing: associationId)), creationTime: \(Swift.String(describing: creationTime)), key: \(Swift.String(describing: key)))"}
}

extension ConnectClientTypes {
    /// Configuration information of the security key.
    public struct SecurityKey: Swift.Equatable {
        /// The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
        public var associationId: Swift.String?
        /// When the security key was created.
        public var creationTime: ClientRuntime.Date?
        /// The key of the security key.
        public var key: Swift.String?

        public init (
            associationId: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            key: Swift.String? = nil
        )
        {
            self.associationId = associationId
            self.creationTime = creationTime
            self.key = key
        }
    }

}

extension ConnectClientTypes.SecurityProfileSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension ConnectClientTypes.SecurityProfileSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SecurityProfileSummary(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)))"}
}

extension ConnectClientTypes {
    /// Contains information about a security profile.
    public struct SecurityProfileSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the security profile.
        public var arn: Swift.String?
        /// The identifier of the security profile.
        public var id: Swift.String?
        /// The name of the security profile.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
        }
    }

}

extension ServiceQuotaExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceQuotaExceededException(message: \(Swift.String(describing: message)))"}
}

extension ServiceQuotaExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service quota has been exceeded.
public struct ServiceQuotaExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConnectClientTypes {
    public enum SourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case salesforce
        case zendesk
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceType] {
            return [
                .salesforce,
                .zendesk,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .salesforce: return "SALESFORCE"
            case .zendesk: return "ZENDESK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SourceType(rawValue: rawValue) ?? SourceType.sdkUnknown(rawValue)
        }
    }
}

public struct StartChatContactInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartChatContactInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartChatContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartChatContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartChatContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartChatContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartChatContactOutputError>
}

extension StartChatContactInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartChatContactInput(attributes: \(Swift.String(describing: attributes)), clientToken: \(Swift.String(describing: clientToken)), contactFlowId: \(Swift.String(describing: contactFlowId)), initialMessage: \(Swift.String(describing: initialMessage)), instanceId: \(Swift.String(describing: instanceId)), participantDetails: \(Swift.String(describing: participantDetails)))"}
}

extension StartChatContactInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case clientToken = "ClientToken"
        case contactFlowId = "ContactFlowId"
        case initialMessage = "InitialMessage"
        case instanceId = "InstanceId"
        case participantDetails = "ParticipantDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributes0) in attributes {
                try attributesContainer.encode(attributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let contactFlowId = contactFlowId {
            try encodeContainer.encode(contactFlowId, forKey: .contactFlowId)
        }
        if let initialMessage = initialMessage {
            try encodeContainer.encode(initialMessage, forKey: .initialMessage)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let participantDetails = participantDetails {
            try encodeContainer.encode(participantDetails, forKey: .participantDetails)
        }
    }
}

public struct StartChatContactInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartChatContactInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartChatContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartChatContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartChatContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartChatContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartChatContactOutputError>
}

public struct StartChatContactInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartChatContactInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartChatContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartChatContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartChatContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartChatContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartChatContactOutputError>
}

public struct StartChatContactInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartChatContactInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: StartChatContactInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartChatContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/contact/chat"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartChatContactInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartChatContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartChatContactOutputError>
}

public struct StartChatContactInput: Swift.Equatable {
    /// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect
    ///    attributes. They can be accessed in contact flows just like any other contact attributes.
    ///          There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys
    ///    can include only alphanumeric, dash, and underscore characters.
    public var attributes: [Swift.String:Swift.String]?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///    request.
    public var clientToken: Swift.String?
    /// The identifier of the contact flow for initiating the chat.
    ///    To
    ///    see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to Routing, Contact Flows. Choose the
    ///    contact flow. On the contact flow page, under the name of the contact flow, choose Show additional flow information. The ContactFlowId is the last part of
    ///    the ARN, shown here in bold:
    ///          arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/846ec553-a005-41c0-8341-xxxxxxxxxxxx
    ///
    /// This member is required.
    public var contactFlowId: Swift.String?
    /// The initial message to be sent to the newly created chat.
    public var initialMessage: ConnectClientTypes.ChatMessage?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// Information identifying the participant.
    /// This member is required.
    public var participantDetails: ConnectClientTypes.ParticipantDetails?

    public init (
        attributes: [Swift.String:Swift.String]? = nil,
        clientToken: Swift.String? = nil,
        contactFlowId: Swift.String? = nil,
        initialMessage: ConnectClientTypes.ChatMessage? = nil,
        instanceId: Swift.String? = nil,
        participantDetails: ConnectClientTypes.ParticipantDetails? = nil
    )
    {
        self.attributes = attributes
        self.clientToken = clientToken
        self.contactFlowId = contactFlowId
        self.initialMessage = initialMessage
        self.instanceId = instanceId
        self.participantDetails = participantDetails
    }
}

struct StartChatContactInputBody: Swift.Equatable {
    public let instanceId: Swift.String?
    public let contactFlowId: Swift.String?
    public let attributes: [Swift.String:Swift.String]?
    public let participantDetails: ConnectClientTypes.ParticipantDetails?
    public let initialMessage: ConnectClientTypes.ChatMessage?
    public let clientToken: Swift.String?
}

extension StartChatContactInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case clientToken = "ClientToken"
        case contactFlowId = "ContactFlowId"
        case initialMessage = "InitialMessage"
        case instanceId = "InstanceId"
        case participantDetails = "ParticipantDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let contactFlowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactFlowId)
        contactFlowId = contactFlowIdDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let participantDetailsDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.ParticipantDetails.self, forKey: .participantDetails)
        participantDetails = participantDetailsDecoded
        let initialMessageDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.ChatMessage.self, forKey: .initialMessage)
        initialMessage = initialMessageDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension StartChatContactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartChatContactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartChatContactOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartChatContactOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartChatContactOutputResponse(contactId: \(Swift.String(describing: contactId)), participantId: \(Swift.String(describing: participantId)), participantToken: \(Swift.String(describing: participantToken)))"}
}

extension StartChatContactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartChatContactOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contactId = output.contactId
            self.participantId = output.participantId
            self.participantToken = output.participantToken
        } else {
            self.contactId = nil
            self.participantId = nil
            self.participantToken = nil
        }
    }
}

public struct StartChatContactOutputResponse: Swift.Equatable {
    /// The identifier of this contact within the Amazon Connect instance.
    public var contactId: Swift.String?
    /// The identifier for a chat participant. The participantId for a chat participant is the same
    ///    throughout the chat lifecycle.
    public var participantId: Swift.String?
    /// The token used by the chat participant to call <a href="https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html">CreateParticipantConnection. The participant token is valid for the lifetime of a chat
    ///    participant.
    public var participantToken: Swift.String?

    public init (
        contactId: Swift.String? = nil,
        participantId: Swift.String? = nil,
        participantToken: Swift.String? = nil
    )
    {
        self.contactId = contactId
        self.participantId = participantId
        self.participantToken = participantToken
    }
}

struct StartChatContactOutputResponseBody: Swift.Equatable {
    public let contactId: Swift.String?
    public let participantId: Swift.String?
    public let participantToken: Swift.String?
}

extension StartChatContactOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactId = "ContactId"
        case participantId = "ParticipantId"
        case participantToken = "ParticipantToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactId)
        contactId = contactIdDecoded
        let participantIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .participantId)
        participantId = participantIdDecoded
        let participantTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .participantToken)
        participantToken = participantTokenDecoded
    }
}

public struct StartContactRecordingInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartContactRecordingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartContactRecordingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartContactRecordingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartContactRecordingOutputError>
}

extension StartContactRecordingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartContactRecordingInput(contactId: \(Swift.String(describing: contactId)), initialContactId: \(Swift.String(describing: initialContactId)), instanceId: \(Swift.String(describing: instanceId)), voiceRecordingConfiguration: \(Swift.String(describing: voiceRecordingConfiguration)))"}
}

extension StartContactRecordingInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactId = "ContactId"
        case initialContactId = "InitialContactId"
        case instanceId = "InstanceId"
        case voiceRecordingConfiguration = "VoiceRecordingConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactId = contactId {
            try encodeContainer.encode(contactId, forKey: .contactId)
        }
        if let initialContactId = initialContactId {
            try encodeContainer.encode(initialContactId, forKey: .initialContactId)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let voiceRecordingConfiguration = voiceRecordingConfiguration {
            try encodeContainer.encode(voiceRecordingConfiguration, forKey: .voiceRecordingConfiguration)
        }
    }
}

public struct StartContactRecordingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartContactRecordingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartContactRecordingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartContactRecordingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartContactRecordingOutputError>
}

public struct StartContactRecordingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartContactRecordingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartContactRecordingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartContactRecordingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartContactRecordingOutputError>
}

public struct StartContactRecordingInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartContactRecordingInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: StartContactRecordingInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/contact/start-recording"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartContactRecordingInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartContactRecordingOutputError>
}

public struct StartContactRecordingInput: Swift.Equatable {
    /// The identifier of the contact.
    /// This member is required.
    public var contactId: Swift.String?
    /// The identifier of the contact. This is the identifier of the contact associated with the
    ///    first interaction with the contact center.
    /// This member is required.
    public var initialContactId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The person being recorded.
    /// This member is required.
    public var voiceRecordingConfiguration: ConnectClientTypes.VoiceRecordingConfiguration?

    public init (
        contactId: Swift.String? = nil,
        initialContactId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        voiceRecordingConfiguration: ConnectClientTypes.VoiceRecordingConfiguration? = nil
    )
    {
        self.contactId = contactId
        self.initialContactId = initialContactId
        self.instanceId = instanceId
        self.voiceRecordingConfiguration = voiceRecordingConfiguration
    }
}

struct StartContactRecordingInputBody: Swift.Equatable {
    public let instanceId: Swift.String?
    public let contactId: Swift.String?
    public let initialContactId: Swift.String?
    public let voiceRecordingConfiguration: ConnectClientTypes.VoiceRecordingConfiguration?
}

extension StartContactRecordingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactId = "ContactId"
        case initialContactId = "InitialContactId"
        case instanceId = "InstanceId"
        case voiceRecordingConfiguration = "VoiceRecordingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let contactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactId)
        contactId = contactIdDecoded
        let initialContactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .initialContactId)
        initialContactId = initialContactIdDecoded
        let voiceRecordingConfigurationDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.VoiceRecordingConfiguration.self, forKey: .voiceRecordingConfiguration)
        voiceRecordingConfiguration = voiceRecordingConfigurationDecoded
    }
}

extension StartContactRecordingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartContactRecordingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartContactRecordingOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartContactRecordingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartContactRecordingOutputResponse()"}
}

extension StartContactRecordingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StartContactRecordingOutputResponse: Swift.Equatable {

    public init() {}
}

struct StartContactRecordingOutputResponseBody: Swift.Equatable {
}

extension StartContactRecordingOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct StartOutboundVoiceContactInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartOutboundVoiceContactInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartOutboundVoiceContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartOutboundVoiceContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartOutboundVoiceContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartOutboundVoiceContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartOutboundVoiceContactOutputError>
}

extension StartOutboundVoiceContactInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartOutboundVoiceContactInput(answerMachineDetectionConfig: \(Swift.String(describing: answerMachineDetectionConfig)), attributes: \(Swift.String(describing: attributes)), campaignId: \(Swift.String(describing: campaignId)), clientToken: \(Swift.String(describing: clientToken)), contactFlowId: \(Swift.String(describing: contactFlowId)), destinationPhoneNumber: \(Swift.String(describing: destinationPhoneNumber)), instanceId: \(Swift.String(describing: instanceId)), queueId: \(Swift.String(describing: queueId)), sourcePhoneNumber: \(Swift.String(describing: sourcePhoneNumber)), trafficType: \(Swift.String(describing: trafficType)))"}
}

extension StartOutboundVoiceContactInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case answerMachineDetectionConfig = "AnswerMachineDetectionConfig"
        case attributes = "Attributes"
        case campaignId = "CampaignId"
        case clientToken = "ClientToken"
        case contactFlowId = "ContactFlowId"
        case destinationPhoneNumber = "DestinationPhoneNumber"
        case instanceId = "InstanceId"
        case queueId = "QueueId"
        case sourcePhoneNumber = "SourcePhoneNumber"
        case trafficType = "TrafficType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let answerMachineDetectionConfig = answerMachineDetectionConfig {
            try encodeContainer.encode(answerMachineDetectionConfig, forKey: .answerMachineDetectionConfig)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributes0) in attributes {
                try attributesContainer.encode(attributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let campaignId = campaignId {
            try encodeContainer.encode(campaignId, forKey: .campaignId)
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let contactFlowId = contactFlowId {
            try encodeContainer.encode(contactFlowId, forKey: .contactFlowId)
        }
        if let destinationPhoneNumber = destinationPhoneNumber {
            try encodeContainer.encode(destinationPhoneNumber, forKey: .destinationPhoneNumber)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let queueId = queueId {
            try encodeContainer.encode(queueId, forKey: .queueId)
        }
        if let sourcePhoneNumber = sourcePhoneNumber {
            try encodeContainer.encode(sourcePhoneNumber, forKey: .sourcePhoneNumber)
        }
        if let trafficType = trafficType {
            try encodeContainer.encode(trafficType.rawValue, forKey: .trafficType)
        }
    }
}

public struct StartOutboundVoiceContactInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartOutboundVoiceContactInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartOutboundVoiceContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartOutboundVoiceContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartOutboundVoiceContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartOutboundVoiceContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartOutboundVoiceContactOutputError>
}

public struct StartOutboundVoiceContactInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartOutboundVoiceContactInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartOutboundVoiceContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartOutboundVoiceContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartOutboundVoiceContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartOutboundVoiceContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartOutboundVoiceContactOutputError>
}

public struct StartOutboundVoiceContactInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartOutboundVoiceContactInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: StartOutboundVoiceContactInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartOutboundVoiceContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/contact/outbound-voice"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartOutboundVoiceContactInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartOutboundVoiceContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartOutboundVoiceContactOutputError>
}

public struct StartOutboundVoiceContactInput: Swift.Equatable {
    /// Configuration of the answering machine detection for this outbound call.
    public var answerMachineDetectionConfig: ConnectClientTypes.AnswerMachineDetectionConfig?
    /// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect
    ///    attributes, and can be accessed in contact flows just like any other contact attributes.
    ///          There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys
    ///    can include only alphanumeric, dash, and underscore characters.
    public var attributes: [Swift.String:Swift.String]?
    /// The campaign identifier of the outbound communication.
    public var campaignId: Swift.String?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///    request. The token is valid for 7 days after creation. If a contact is already started, the
    ///    contact ID is returned.
    ///
    public var clientToken: Swift.String?
    /// The
    ///    identifier of the contact flow for the outbound call. To see the ContactFlowId in the Amazon Connect
    ///    console user interface, on the navigation menu go to Routing,
    ///     Contact Flows. Choose the contact flow. On the contact flow
    ///    page, under the name of the contact flow, choose Show additional flow
    ///     information. The ContactFlowId is the last part of the ARN, shown here in bold:
    ///          arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/846ec553-a005-41c0-8341-xxxxxxxxxxxx
    ///
    /// This member is required.
    public var contactFlowId: Swift.String?
    /// The phone number of the customer, in E.164 format.
    /// This member is required.
    public var destinationPhoneNumber: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The queue for the call. If you specify a queue, the phone displayed for caller ID is the
    ///    phone number specified in the queue. If you do not specify a queue, the queue defined in the
    ///    contact flow is used. If you do not specify a queue, you must specify a source phone
    ///    number.
    public var queueId: Swift.String?
    /// The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify
    ///    a source phone number, you must specify a queue.
    public var sourcePhoneNumber: Swift.String?
    /// Denotes the class of traffic. Calls with different traffic types are handled differently by
    ///    Amazon Connect. The default value is GENERAL. Use CAMPAIGN if
    ///    EnableAnswerMachineDetection is set to true. For all other cases, use
    ///    GENERAL.
    public var trafficType: ConnectClientTypes.TrafficType?

    public init (
        answerMachineDetectionConfig: ConnectClientTypes.AnswerMachineDetectionConfig? = nil,
        attributes: [Swift.String:Swift.String]? = nil,
        campaignId: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        contactFlowId: Swift.String? = nil,
        destinationPhoneNumber: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        queueId: Swift.String? = nil,
        sourcePhoneNumber: Swift.String? = nil,
        trafficType: ConnectClientTypes.TrafficType? = nil
    )
    {
        self.answerMachineDetectionConfig = answerMachineDetectionConfig
        self.attributes = attributes
        self.campaignId = campaignId
        self.clientToken = clientToken
        self.contactFlowId = contactFlowId
        self.destinationPhoneNumber = destinationPhoneNumber
        self.instanceId = instanceId
        self.queueId = queueId
        self.sourcePhoneNumber = sourcePhoneNumber
        self.trafficType = trafficType
    }
}

struct StartOutboundVoiceContactInputBody: Swift.Equatable {
    public let destinationPhoneNumber: Swift.String?
    public let contactFlowId: Swift.String?
    public let instanceId: Swift.String?
    public let clientToken: Swift.String?
    public let sourcePhoneNumber: Swift.String?
    public let queueId: Swift.String?
    public let attributes: [Swift.String:Swift.String]?
    public let answerMachineDetectionConfig: ConnectClientTypes.AnswerMachineDetectionConfig?
    public let campaignId: Swift.String?
    public let trafficType: ConnectClientTypes.TrafficType?
}

extension StartOutboundVoiceContactInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case answerMachineDetectionConfig = "AnswerMachineDetectionConfig"
        case attributes = "Attributes"
        case campaignId = "CampaignId"
        case clientToken = "ClientToken"
        case contactFlowId = "ContactFlowId"
        case destinationPhoneNumber = "DestinationPhoneNumber"
        case instanceId = "InstanceId"
        case queueId = "QueueId"
        case sourcePhoneNumber = "SourcePhoneNumber"
        case trafficType = "TrafficType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationPhoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPhoneNumber)
        destinationPhoneNumber = destinationPhoneNumberDecoded
        let contactFlowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactFlowId)
        contactFlowId = contactFlowIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let sourcePhoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourcePhoneNumber)
        sourcePhoneNumber = sourcePhoneNumberDecoded
        let queueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueId)
        queueId = queueIdDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let answerMachineDetectionConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.AnswerMachineDetectionConfig.self, forKey: .answerMachineDetectionConfig)
        answerMachineDetectionConfig = answerMachineDetectionConfigDecoded
        let campaignIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .campaignId)
        campaignId = campaignIdDecoded
        let trafficTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.TrafficType.self, forKey: .trafficType)
        trafficType = trafficTypeDecoded
    }
}

extension StartOutboundVoiceContactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartOutboundVoiceContactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DestinationNotAllowedException" : self = .destinationNotAllowedException(try DestinationNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OutboundContactNotPermittedException" : self = .outboundContactNotPermittedException(try OutboundContactNotPermittedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartOutboundVoiceContactOutputError: Swift.Error, Swift.Equatable {
    case destinationNotAllowedException(DestinationNotAllowedException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case outboundContactNotPermittedException(OutboundContactNotPermittedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartOutboundVoiceContactOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartOutboundVoiceContactOutputResponse(contactId: \(Swift.String(describing: contactId)))"}
}

extension StartOutboundVoiceContactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartOutboundVoiceContactOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contactId = output.contactId
        } else {
            self.contactId = nil
        }
    }
}

public struct StartOutboundVoiceContactOutputResponse: Swift.Equatable {
    /// The identifier of this contact within the Amazon Connect instance.
    public var contactId: Swift.String?

    public init (
        contactId: Swift.String? = nil
    )
    {
        self.contactId = contactId
    }
}

struct StartOutboundVoiceContactOutputResponseBody: Swift.Equatable {
    public let contactId: Swift.String?
}

extension StartOutboundVoiceContactOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactId = "ContactId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactId)
        contactId = contactIdDecoded
    }
}

public struct StartTaskContactInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartTaskContactInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartTaskContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartTaskContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartTaskContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartTaskContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartTaskContactOutputError>
}

extension StartTaskContactInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartTaskContactInput(attributes: \(Swift.String(describing: attributes)), clientToken: \(Swift.String(describing: clientToken)), contactFlowId: \(Swift.String(describing: contactFlowId)), description: \(Swift.String(describing: description)), instanceId: \(Swift.String(describing: instanceId)), name: \(Swift.String(describing: name)), previousContactId: \(Swift.String(describing: previousContactId)), references: \(Swift.String(describing: references)))"}
}

extension StartTaskContactInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case clientToken = "ClientToken"
        case contactFlowId = "ContactFlowId"
        case description = "Description"
        case instanceId = "InstanceId"
        case name = "Name"
        case previousContactId = "PreviousContactId"
        case references = "References"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributes0) in attributes {
                try attributesContainer.encode(attributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let contactFlowId = contactFlowId {
            try encodeContainer.encode(contactFlowId, forKey: .contactFlowId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let previousContactId = previousContactId {
            try encodeContainer.encode(previousContactId, forKey: .previousContactId)
        }
        if let references = references {
            var referencesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .references)
            for (dictKey0, contactreferences0) in references {
                try referencesContainer.encode(contactreferences0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct StartTaskContactInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartTaskContactInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartTaskContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartTaskContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartTaskContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartTaskContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartTaskContactOutputError>
}

public struct StartTaskContactInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartTaskContactInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartTaskContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartTaskContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartTaskContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartTaskContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartTaskContactOutputError>
}

public struct StartTaskContactInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartTaskContactInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: StartTaskContactInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartTaskContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/contact/task"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartTaskContactInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartTaskContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartTaskContactOutputError>
}

public struct StartTaskContactInput: Swift.Equatable {
    /// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect
    ///    attributes, and can be accessed in contact flows just like any other contact attributes.
    ///          There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys
    ///    can include only alphanumeric, dash, and underscore characters.
    public var attributes: [Swift.String:Swift.String]?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///    request.
    public var clientToken: Swift.String?
    /// The identifier of the contact flow for initiating the tasks. To see the ContactFlowId in the
    ///    Amazon Connect console user interface, on the navigation menu go to Routing, Contact Flows. Choose the contact flow. On
    ///    the contact flow page, under the name of the contact flow, choose Show
    ///     additional flow information. The ContactFlowId is the last part of the ARN, shown
    ///    here in bold:
    ///          arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/846ec553-a005-41c0-8341-xxxxxxxxxxxx
    ///
    /// This member is required.
    public var contactFlowId: Swift.String?
    /// A description of the task that is shown to an agent in the Contact Control Panel
    ///    (CCP).
    public var description: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The name of a task that is shown to an agent in the Contact Control Panel (CCP).
    /// This member is required.
    public var name: Swift.String?
    /// The identifier of the previous chat, voice, or task contact.
    public var previousContactId: Swift.String?
    /// A formatted URL that is shown to an agent in the Contact Control Panel (CCP).
    public var references: [Swift.String:ConnectClientTypes.Reference]?

    public init (
        attributes: [Swift.String:Swift.String]? = nil,
        clientToken: Swift.String? = nil,
        contactFlowId: Swift.String? = nil,
        description: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        name: Swift.String? = nil,
        previousContactId: Swift.String? = nil,
        references: [Swift.String:ConnectClientTypes.Reference]? = nil
    )
    {
        self.attributes = attributes
        self.clientToken = clientToken
        self.contactFlowId = contactFlowId
        self.description = description
        self.instanceId = instanceId
        self.name = name
        self.previousContactId = previousContactId
        self.references = references
    }
}

struct StartTaskContactInputBody: Swift.Equatable {
    public let instanceId: Swift.String?
    public let previousContactId: Swift.String?
    public let contactFlowId: Swift.String?
    public let attributes: [Swift.String:Swift.String]?
    public let name: Swift.String?
    public let references: [Swift.String:ConnectClientTypes.Reference]?
    public let description: Swift.String?
    public let clientToken: Swift.String?
}

extension StartTaskContactInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case clientToken = "ClientToken"
        case contactFlowId = "ContactFlowId"
        case description = "Description"
        case instanceId = "InstanceId"
        case name = "Name"
        case previousContactId = "PreviousContactId"
        case references = "References"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let previousContactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .previousContactId)
        previousContactId = previousContactIdDecoded
        let contactFlowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactFlowId)
        contactFlowId = contactFlowIdDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let referencesContainer = try containerValues.decodeIfPresent([Swift.String: ConnectClientTypes.Reference?].self, forKey: .references)
        var referencesDecoded0: [Swift.String:ConnectClientTypes.Reference]? = nil
        if let referencesContainer = referencesContainer {
            referencesDecoded0 = [Swift.String:ConnectClientTypes.Reference]()
            for (key0, reference0) in referencesContainer {
                if let reference0 = reference0 {
                    referencesDecoded0?[key0] = reference0
                }
            }
        }
        references = referencesDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension StartTaskContactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartTaskContactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartTaskContactOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartTaskContactOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartTaskContactOutputResponse(contactId: \(Swift.String(describing: contactId)))"}
}

extension StartTaskContactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartTaskContactOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contactId = output.contactId
        } else {
            self.contactId = nil
        }
    }
}

public struct StartTaskContactOutputResponse: Swift.Equatable {
    /// The identifier of this contact within the Amazon Connect instance.
    public var contactId: Swift.String?

    public init (
        contactId: Swift.String? = nil
    )
    {
        self.contactId = contactId
    }
}

struct StartTaskContactOutputResponseBody: Swift.Equatable {
    public let contactId: Swift.String?
}

extension StartTaskContactOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactId = "ContactId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactId)
        contactId = contactIdDecoded
    }
}

extension ConnectClientTypes {
    public enum Statistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case avg
        case max
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [Statistic] {
            return [
                .avg,
                .max,
                .sum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .avg: return "AVG"
            case .max: return "MAX"
            case .sum: return "SUM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Statistic(rawValue: rawValue) ?? Statistic.sdkUnknown(rawValue)
        }
    }
}

public struct StopContactInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopContactInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopContactOutputError>
}

extension StopContactInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopContactInput(contactId: \(Swift.String(describing: contactId)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension StopContactInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactId = "ContactId"
        case instanceId = "InstanceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactId = contactId {
            try encodeContainer.encode(contactId, forKey: .contactId)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
    }
}

public struct StopContactInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopContactInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopContactOutputError>
}

public struct StopContactInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopContactInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopContactInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopContactInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopContactOutputError>
}

public struct StopContactInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopContactInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: StopContactInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopContactOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/contact/stop"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StopContactInput
    public typealias MOutput = ClientRuntime.OperationOutput<StopContactOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopContactOutputError>
}

public struct StopContactInput: Swift.Equatable {
    /// The ID of the contact.
    /// This member is required.
    public var contactId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        contactId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.contactId = contactId
        self.instanceId = instanceId
    }
}

struct StopContactInputBody: Swift.Equatable {
    public let contactId: Swift.String?
    public let instanceId: Swift.String?
}

extension StopContactInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactId = "ContactId"
        case instanceId = "InstanceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactId)
        contactId = contactIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
    }
}

extension StopContactOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopContactOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ContactNotFoundException" : self = .contactNotFoundException(try ContactNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopContactOutputError: Swift.Error, Swift.Equatable {
    case contactNotFoundException(ContactNotFoundException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopContactOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopContactOutputResponse()"}
}

extension StopContactOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopContactOutputResponse: Swift.Equatable {

    public init() {}
}

struct StopContactOutputResponseBody: Swift.Equatable {
}

extension StopContactOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct StopContactRecordingInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopContactRecordingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopContactRecordingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopContactRecordingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopContactRecordingOutputError>
}

extension StopContactRecordingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopContactRecordingInput(contactId: \(Swift.String(describing: contactId)), initialContactId: \(Swift.String(describing: initialContactId)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension StopContactRecordingInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactId = "ContactId"
        case initialContactId = "InitialContactId"
        case instanceId = "InstanceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactId = contactId {
            try encodeContainer.encode(contactId, forKey: .contactId)
        }
        if let initialContactId = initialContactId {
            try encodeContainer.encode(initialContactId, forKey: .initialContactId)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
    }
}

public struct StopContactRecordingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopContactRecordingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopContactRecordingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopContactRecordingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopContactRecordingOutputError>
}

public struct StopContactRecordingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopContactRecordingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopContactRecordingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopContactRecordingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopContactRecordingOutputError>
}

public struct StopContactRecordingInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopContactRecordingInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: StopContactRecordingInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/contact/stop-recording"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StopContactRecordingInput
    public typealias MOutput = ClientRuntime.OperationOutput<StopContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopContactRecordingOutputError>
}

public struct StopContactRecordingInput: Swift.Equatable {
    /// The identifier of the contact.
    /// This member is required.
    public var contactId: Swift.String?
    /// The identifier of the contact. This is the identifier of the contact associated with the
    ///    first interaction with the contact center.
    /// This member is required.
    public var initialContactId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        contactId: Swift.String? = nil,
        initialContactId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.contactId = contactId
        self.initialContactId = initialContactId
        self.instanceId = instanceId
    }
}

struct StopContactRecordingInputBody: Swift.Equatable {
    public let instanceId: Swift.String?
    public let contactId: Swift.String?
    public let initialContactId: Swift.String?
}

extension StopContactRecordingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactId = "ContactId"
        case initialContactId = "InitialContactId"
        case instanceId = "InstanceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let contactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactId)
        contactId = contactIdDecoded
        let initialContactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .initialContactId)
        initialContactId = initialContactIdDecoded
    }
}

extension StopContactRecordingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopContactRecordingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopContactRecordingOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopContactRecordingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopContactRecordingOutputResponse()"}
}

extension StopContactRecordingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopContactRecordingOutputResponse: Swift.Equatable {

    public init() {}
}

struct StopContactRecordingOutputResponseBody: Swift.Equatable {
}

extension StopContactRecordingOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ConnectClientTypes {
    public enum StorageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case kinesisFirehose
        case kinesisStream
        case kinesisVideoStream
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageType] {
            return [
                .kinesisFirehose,
                .kinesisStream,
                .kinesisVideoStream,
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .kinesisFirehose: return "KINESIS_FIREHOSE"
            case .kinesisStream: return "KINESIS_STREAM"
            case .kinesisVideoStream: return "KINESIS_VIDEO_STREAM"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StorageType(rawValue: rawValue) ?? StorageType.sdkUnknown(rawValue)
        }
    }
}

public struct SuspendContactRecordingInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SuspendContactRecordingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SuspendContactRecordingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SuspendContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SuspendContactRecordingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SuspendContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SuspendContactRecordingOutputError>
}

extension SuspendContactRecordingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SuspendContactRecordingInput(contactId: \(Swift.String(describing: contactId)), initialContactId: \(Swift.String(describing: initialContactId)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension SuspendContactRecordingInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactId = "ContactId"
        case initialContactId = "InitialContactId"
        case instanceId = "InstanceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactId = contactId {
            try encodeContainer.encode(contactId, forKey: .contactId)
        }
        if let initialContactId = initialContactId {
            try encodeContainer.encode(initialContactId, forKey: .initialContactId)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
    }
}

public struct SuspendContactRecordingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SuspendContactRecordingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SuspendContactRecordingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SuspendContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SuspendContactRecordingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SuspendContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SuspendContactRecordingOutputError>
}

public struct SuspendContactRecordingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SuspendContactRecordingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SuspendContactRecordingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SuspendContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SuspendContactRecordingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SuspendContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SuspendContactRecordingOutputError>
}

public struct SuspendContactRecordingInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SuspendContactRecordingInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SuspendContactRecordingInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SuspendContactRecordingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/contact/suspend-recording"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = SuspendContactRecordingInput
    public typealias MOutput = ClientRuntime.OperationOutput<SuspendContactRecordingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SuspendContactRecordingOutputError>
}

public struct SuspendContactRecordingInput: Swift.Equatable {
    /// The identifier of the contact.
    /// This member is required.
    public var contactId: Swift.String?
    /// The identifier of the contact. This is the identifier of the contact associated with the
    ///    first interaction with the contact center.
    /// This member is required.
    public var initialContactId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        contactId: Swift.String? = nil,
        initialContactId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.contactId = contactId
        self.initialContactId = initialContactId
        self.instanceId = instanceId
    }
}

struct SuspendContactRecordingInputBody: Swift.Equatable {
    public let instanceId: Swift.String?
    public let contactId: Swift.String?
    public let initialContactId: Swift.String?
}

extension SuspendContactRecordingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactId = "ContactId"
        case initialContactId = "InitialContactId"
        case instanceId = "InstanceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let contactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactId)
        contactId = contactIdDecoded
        let initialContactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .initialContactId)
        initialContactId = initialContactIdDecoded
    }
}

extension SuspendContactRecordingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SuspendContactRecordingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SuspendContactRecordingOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SuspendContactRecordingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SuspendContactRecordingOutputResponse()"}
}

extension SuspendContactRecordingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SuspendContactRecordingOutputResponse: Swift.Equatable {

    public init() {}
}

struct SuspendContactRecordingOutputResponseBody: Swift.Equatable {
}

extension SuspendContactRecordingOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: TagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let resourceArn = input.resourceArn else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("resourceArn is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/tags/\(resourceArn.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = TagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// One or more tags. For example, { "tags": {"key1":"value1", "key2":"value2"} }.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ConnectClientTypes.Threshold: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparison = "Comparison"
        case thresholdValue = "ThresholdValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparison = comparison {
            try encodeContainer.encode(comparison.rawValue, forKey: .comparison)
        }
        if let thresholdValue = thresholdValue {
            try encodeContainer.encode(thresholdValue, forKey: .thresholdValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let comparisonDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Comparison.self, forKey: .comparison)
        comparison = comparisonDecoded
        let thresholdValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .thresholdValue)
        thresholdValue = thresholdValueDecoded
    }
}

extension ConnectClientTypes.Threshold: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Threshold(comparison: \(Swift.String(describing: comparison)), thresholdValue: \(Swift.String(describing: thresholdValue)))"}
}

extension ConnectClientTypes {
    /// Contains information about the threshold for service level metrics.
    public struct Threshold: Swift.Equatable {
        /// The type of comparison. Only "less than" (LT) comparisons are supported.
        public var comparison: ConnectClientTypes.Comparison?
        /// The threshold value to compare.
        public var thresholdValue: Swift.Double?

        public init (
            comparison: ConnectClientTypes.Comparison? = nil,
            thresholdValue: Swift.Double? = nil
        )
        {
            self.comparison = comparison
            self.thresholdValue = thresholdValue
        }
    }

}

extension ThrottlingException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThrottlingException(message: \(Swift.String(describing: message)))"}
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The throttling limit has been exceeded.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConnectClientTypes {
    public enum TrafficType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case campaign
        case general
        case sdkUnknown(Swift.String)

        public static var allCases: [TrafficType] {
            return [
                .campaign,
                .general,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .campaign: return "CAMPAIGN"
            case .general: return "GENERAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TrafficType(rawValue: rawValue) ?? TrafficType.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes {
    public enum Unit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case count
        case percent
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [Unit] {
            return [
                .count,
                .percent,
                .seconds,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .count: return "COUNT"
            case .percent: return "PERCENT"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Unit(rawValue: rawValue) ?? Unit.sdkUnknown(rawValue)
        }
    }
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let tagKeys = input.operationInput.tagKeys {
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UntagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let resourceArn = input.resourceArn else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("resourceArn is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/tags/\(resourceArn.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UntagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tag keys.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateAgentStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAgentStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAgentStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAgentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAgentStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAgentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAgentStatusOutputError>
}

extension UpdateAgentStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAgentStatusInput(agentStatusId: \(Swift.String(describing: agentStatusId)), description: \(Swift.String(describing: description)), displayOrder: \(Swift.String(describing: displayOrder)), instanceId: \(Swift.String(describing: instanceId)), name: \(Swift.String(describing: name)), resetOrderNumber: \(Swift.String(describing: resetOrderNumber)), state: \(Swift.String(describing: state)))"}
}

extension UpdateAgentStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case displayOrder = "DisplayOrder"
        case name = "Name"
        case resetOrderNumber = "ResetOrderNumber"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayOrder = displayOrder {
            try encodeContainer.encode(displayOrder, forKey: .displayOrder)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if resetOrderNumber != false {
            try encodeContainer.encode(resetOrderNumber, forKey: .resetOrderNumber)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }
}

public struct UpdateAgentStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAgentStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAgentStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAgentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAgentStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAgentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAgentStatusOutputError>
}

public struct UpdateAgentStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAgentStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAgentStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAgentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAgentStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAgentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAgentStatusOutputError>
}

public struct UpdateAgentStatusInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAgentStatusInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateAgentStatusInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAgentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let agentStatusId = input.agentStatusId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("agentStatusId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/agent-status/\(instanceId.urlPercentEncoding())/\(agentStatusId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateAgentStatusInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAgentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAgentStatusOutputError>
}

public struct UpdateAgentStatusInput: Swift.Equatable {
    /// The identifier of the agent status.
    /// This member is required.
    public var agentStatusId: Swift.String?
    /// The description of the agent status.
    public var description: Swift.String?
    /// The display order of the agent status.
    public var displayOrder: Swift.Int?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The name of the agent status.
    public var name: Swift.String?
    /// A number indicating the reset order of the agent status.
    public var resetOrderNumber: Swift.Bool
    /// The state of the agent status.
    public var state: ConnectClientTypes.AgentStatusState?

    public init (
        agentStatusId: Swift.String? = nil,
        description: Swift.String? = nil,
        displayOrder: Swift.Int? = nil,
        instanceId: Swift.String? = nil,
        name: Swift.String? = nil,
        resetOrderNumber: Swift.Bool = false,
        state: ConnectClientTypes.AgentStatusState? = nil
    )
    {
        self.agentStatusId = agentStatusId
        self.description = description
        self.displayOrder = displayOrder
        self.instanceId = instanceId
        self.name = name
        self.resetOrderNumber = resetOrderNumber
        self.state = state
    }
}

struct UpdateAgentStatusInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let state: ConnectClientTypes.AgentStatusState?
    public let displayOrder: Swift.Int?
    public let resetOrderNumber: Swift.Bool
}

extension UpdateAgentStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case displayOrder = "DisplayOrder"
        case name = "Name"
        case resetOrderNumber = "ResetOrderNumber"
        case state = "State"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.AgentStatusState.self, forKey: .state)
        state = stateDecoded
        let displayOrderDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .displayOrder)
        displayOrder = displayOrderDecoded
        let resetOrderNumberDecoded = try containerValues.decode(Swift.Bool.self, forKey: .resetOrderNumber)
        resetOrderNumber = resetOrderNumberDecoded
    }
}

extension UpdateAgentStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateAgentStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateAgentStatusOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAgentStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAgentStatusOutputResponse()"}
}

extension UpdateAgentStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAgentStatusOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateAgentStatusOutputResponseBody: Swift.Equatable {
}

extension UpdateAgentStatusOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateContactAttributesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactAttributesOutputError>
}

extension UpdateContactAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateContactAttributesInput(attributes: \(Swift.String(describing: attributes)), initialContactId: \(Swift.String(describing: initialContactId)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension UpdateContactAttributesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case initialContactId = "InitialContactId"
        case instanceId = "InstanceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributes0) in attributes {
                try attributesContainer.encode(attributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let initialContactId = initialContactId {
            try encodeContainer.encode(initialContactId, forKey: .initialContactId)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
    }
}

public struct UpdateContactAttributesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactAttributesOutputError>
}

public struct UpdateContactAttributesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactAttributesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactAttributesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactAttributesOutputError>
}

public struct UpdateContactAttributesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactAttributesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateContactAttributesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/contact/attributes"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateContactAttributesInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactAttributesOutputError>
}

public struct UpdateContactAttributesInput: Swift.Equatable {
    /// The Amazon Connect attributes. These attributes can be accessed in contact flows just like any other
    ///    contact attributes.
    ///          You can have up to 32,768 UTF-8 bytes across all attributes for a contact. Attribute keys
    ///    can include only alphanumeric, dash, and underscore characters.
    /// This member is required.
    public var attributes: [Swift.String:Swift.String]?
    /// The identifier of the contact. This is the identifier of the contact associated with the
    ///    first interaction with the contact center.
    /// This member is required.
    public var initialContactId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        attributes: [Swift.String:Swift.String]? = nil,
        initialContactId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.attributes = attributes
        self.initialContactId = initialContactId
        self.instanceId = instanceId
    }
}

struct UpdateContactAttributesInputBody: Swift.Equatable {
    public let initialContactId: Swift.String?
    public let instanceId: Swift.String?
    public let attributes: [Swift.String:Swift.String]?
}

extension UpdateContactAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case initialContactId = "InitialContactId"
        case instanceId = "InstanceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let initialContactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .initialContactId)
        initialContactId = initialContactIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
    }
}

extension UpdateContactAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateContactAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateContactAttributesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateContactAttributesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateContactAttributesOutputResponse()"}
}

extension UpdateContactAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateContactAttributesOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateContactAttributesOutputResponseBody: Swift.Equatable {
}

extension UpdateContactAttributesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateContactFlowContentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactFlowContentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactFlowContentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactFlowContentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactFlowContentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactFlowContentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactFlowContentOutputError>
}

extension UpdateContactFlowContentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateContactFlowContentInput(contactFlowId: \(Swift.String(describing: contactFlowId)), content: \(Swift.String(describing: content)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension UpdateContactFlowContentInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
    }
}

public struct UpdateContactFlowContentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactFlowContentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactFlowContentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactFlowContentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactFlowContentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactFlowContentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactFlowContentOutputError>
}

public struct UpdateContactFlowContentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactFlowContentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactFlowContentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactFlowContentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactFlowContentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactFlowContentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactFlowContentOutputError>
}

public struct UpdateContactFlowContentInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactFlowContentInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateContactFlowContentInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactFlowContentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let contactFlowId = input.contactFlowId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("contactFlowId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/contact-flows/\(instanceId.urlPercentEncoding())/\(contactFlowId.urlPercentEncoding())/content"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateContactFlowContentInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactFlowContentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactFlowContentOutputError>
}

public struct UpdateContactFlowContentInput: Swift.Equatable {
    /// The identifier of the contact flow.
    /// This member is required.
    public var contactFlowId: Swift.String?
    /// The JSON string that represents contact flow’s content. For an example, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/flow-language-example.html">Example contact
    ///     flow in Amazon Connect Flow language in the Amazon Connect Administrator Guide.
    ///
    /// This member is required.
    public var content: Swift.String?
    /// The identifier of the Amazon Connect instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        contactFlowId: Swift.String? = nil,
        content: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.contactFlowId = contactFlowId
        self.content = content
        self.instanceId = instanceId
    }
}

struct UpdateContactFlowContentInputBody: Swift.Equatable {
    public let content: Swift.String?
}

extension UpdateContactFlowContentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
    }
}

extension UpdateContactFlowContentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateContactFlowContentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidContactFlowException" : self = .invalidContactFlowException(try InvalidContactFlowException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateContactFlowContentOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidContactFlowException(InvalidContactFlowException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateContactFlowContentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateContactFlowContentOutputResponse()"}
}

extension UpdateContactFlowContentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateContactFlowContentOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateContactFlowContentOutputResponseBody: Swift.Equatable {
}

extension UpdateContactFlowContentOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateContactFlowNameInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactFlowNameInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactFlowNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactFlowNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactFlowNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactFlowNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactFlowNameOutputError>
}

extension UpdateContactFlowNameInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateContactFlowNameInput(contactFlowId: \(Swift.String(describing: contactFlowId)), description: \(Swift.String(describing: description)), instanceId: \(Swift.String(describing: instanceId)), name: \(Swift.String(describing: name)))"}
}

extension UpdateContactFlowNameInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct UpdateContactFlowNameInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactFlowNameInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactFlowNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactFlowNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactFlowNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactFlowNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactFlowNameOutputError>
}

public struct UpdateContactFlowNameInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactFlowNameInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContactFlowNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactFlowNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContactFlowNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactFlowNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactFlowNameOutputError>
}

public struct UpdateContactFlowNameInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContactFlowNameInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateContactFlowNameInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContactFlowNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let contactFlowId = input.contactFlowId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("contactFlowId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/contact-flows/\(instanceId.urlPercentEncoding())/\(contactFlowId.urlPercentEncoding())/name"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateContactFlowNameInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContactFlowNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContactFlowNameOutputError>
}

public struct UpdateContactFlowNameInput: Swift.Equatable {
    /// The identifier of the contact flow.
    /// This member is required.
    public var contactFlowId: Swift.String?
    /// The description of the contact flow.
    public var description: Swift.String?
    /// The identifier of the Amazon Connect instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The name of the contact flow.
    public var name: Swift.String?

    public init (
        contactFlowId: Swift.String? = nil,
        description: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.contactFlowId = contactFlowId
        self.description = description
        self.instanceId = instanceId
        self.name = name
    }
}

struct UpdateContactFlowNameInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
}

extension UpdateContactFlowNameInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateContactFlowNameOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateContactFlowNameOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateContactFlowNameOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateContactFlowNameOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateContactFlowNameOutputResponse()"}
}

extension UpdateContactFlowNameOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateContactFlowNameOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateContactFlowNameOutputResponseBody: Swift.Equatable {
}

extension UpdateContactFlowNameOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateHoursOfOperationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateHoursOfOperationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateHoursOfOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateHoursOfOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateHoursOfOperationOutputError>
}

extension UpdateHoursOfOperationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateHoursOfOperationInput(config: \(Swift.String(describing: config)), description: \(Swift.String(describing: description)), hoursOfOperationId: \(Swift.String(describing: hoursOfOperationId)), instanceId: \(Swift.String(describing: instanceId)), name: \(Swift.String(describing: name)), timeZone: \(Swift.String(describing: timeZone)))"}
}

extension UpdateHoursOfOperationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case config = "Config"
        case description = "Description"
        case name = "Name"
        case timeZone = "TimeZone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let config = config {
            var configContainer = encodeContainer.nestedUnkeyedContainer(forKey: .config)
            for hoursofoperationconfiglist0 in config {
                try configContainer.encode(hoursofoperationconfiglist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let timeZone = timeZone {
            try encodeContainer.encode(timeZone, forKey: .timeZone)
        }
    }
}

public struct UpdateHoursOfOperationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateHoursOfOperationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateHoursOfOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateHoursOfOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateHoursOfOperationOutputError>
}

public struct UpdateHoursOfOperationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateHoursOfOperationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateHoursOfOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateHoursOfOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateHoursOfOperationOutputError>
}

public struct UpdateHoursOfOperationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateHoursOfOperationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateHoursOfOperationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let hoursOfOperationId = input.hoursOfOperationId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("hoursOfOperationId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/hours-of-operations/\(instanceId.urlPercentEncoding())/\(hoursOfOperationId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateHoursOfOperationInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateHoursOfOperationOutputError>
}

public struct UpdateHoursOfOperationInput: Swift.Equatable {
    /// Configuration information of the hours of operation.
    public var config: [ConnectClientTypes.HoursOfOperationConfig]?
    /// The description of the hours of operation.
    public var description: Swift.String?
    /// The identifier of the hours of operation.
    /// This member is required.
    public var hoursOfOperationId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The name of the hours of operation.
    public var name: Swift.String?
    /// The time zone of the hours of operation.
    public var timeZone: Swift.String?

    public init (
        config: [ConnectClientTypes.HoursOfOperationConfig]? = nil,
        description: Swift.String? = nil,
        hoursOfOperationId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        name: Swift.String? = nil,
        timeZone: Swift.String? = nil
    )
    {
        self.config = config
        self.description = description
        self.hoursOfOperationId = hoursOfOperationId
        self.instanceId = instanceId
        self.name = name
        self.timeZone = timeZone
    }
}

struct UpdateHoursOfOperationInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let timeZone: Swift.String?
    public let config: [ConnectClientTypes.HoursOfOperationConfig]?
}

extension UpdateHoursOfOperationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case config = "Config"
        case description = "Description"
        case name = "Name"
        case timeZone = "TimeZone"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
        let configContainer = try containerValues.decodeIfPresent([ConnectClientTypes.HoursOfOperationConfig?].self, forKey: .config)
        var configDecoded0:[ConnectClientTypes.HoursOfOperationConfig]? = nil
        if let configContainer = configContainer {
            configDecoded0 = [ConnectClientTypes.HoursOfOperationConfig]()
            for structure0 in configContainer {
                if let structure0 = structure0 {
                    configDecoded0?.append(structure0)
                }
            }
        }
        config = configDecoded0
    }
}

extension UpdateHoursOfOperationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateHoursOfOperationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateHoursOfOperationOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateHoursOfOperationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateHoursOfOperationOutputResponse()"}
}

extension UpdateHoursOfOperationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateHoursOfOperationOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateHoursOfOperationOutputResponseBody: Swift.Equatable {
}

extension UpdateHoursOfOperationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateInstanceAttributeInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInstanceAttributeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateInstanceAttributeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInstanceAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateInstanceAttributeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInstanceAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInstanceAttributeOutputError>
}

extension UpdateInstanceAttributeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateInstanceAttributeInput(attributeType: \(Swift.String(describing: attributeType)), instanceId: \(Swift.String(describing: instanceId)), value: \(Swift.String(describing: value)))"}
}

extension UpdateInstanceAttributeInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }
}

public struct UpdateInstanceAttributeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInstanceAttributeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateInstanceAttributeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInstanceAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateInstanceAttributeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInstanceAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInstanceAttributeOutputError>
}

public struct UpdateInstanceAttributeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInstanceAttributeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateInstanceAttributeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInstanceAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateInstanceAttributeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInstanceAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInstanceAttributeOutputError>
}

public struct UpdateInstanceAttributeInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInstanceAttributeInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateInstanceAttributeInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInstanceAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let attributeType = input.attributeType else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("attributeType is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/attribute/\(attributeType.rawValue.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateInstanceAttributeInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInstanceAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInstanceAttributeOutputError>
}

public struct UpdateInstanceAttributeInput: Swift.Equatable {
    /// The type of attribute.
    ///
    ///             Only allowlisted customers can consume USE_CUSTOM_TTS_VOICES. To access this feature, contact AWS Support for allowlisting.
    ///
    /// This member is required.
    public var attributeType: ConnectClientTypes.InstanceAttributeType?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The value for the attribute. Maximum character limit is 100.
    /// This member is required.
    public var value: Swift.String?

    public init (
        attributeType: ConnectClientTypes.InstanceAttributeType? = nil,
        instanceId: Swift.String? = nil,
        value: Swift.String? = nil
    )
    {
        self.attributeType = attributeType
        self.instanceId = instanceId
        self.value = value
    }
}

struct UpdateInstanceAttributeInputBody: Swift.Equatable {
    public let value: Swift.String?
}

extension UpdateInstanceAttributeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case value = "Value"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension UpdateInstanceAttributeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateInstanceAttributeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateInstanceAttributeOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateInstanceAttributeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateInstanceAttributeOutputResponse()"}
}

extension UpdateInstanceAttributeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateInstanceAttributeOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateInstanceAttributeOutputResponseBody: Swift.Equatable {
}

extension UpdateInstanceAttributeOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateInstanceStorageConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInstanceStorageConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateInstanceStorageConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInstanceStorageConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateInstanceStorageConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInstanceStorageConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInstanceStorageConfigOutputError>
}

extension UpdateInstanceStorageConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateInstanceStorageConfigInput(associationId: \(Swift.String(describing: associationId)), instanceId: \(Swift.String(describing: instanceId)), resourceType: \(Swift.String(describing: resourceType)), storageConfig: \(Swift.String(describing: storageConfig)))"}
}

extension UpdateInstanceStorageConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageConfig = "StorageConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let storageConfig = storageConfig {
            try encodeContainer.encode(storageConfig, forKey: .storageConfig)
        }
    }
}

public struct UpdateInstanceStorageConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInstanceStorageConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateInstanceStorageConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInstanceStorageConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateInstanceStorageConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInstanceStorageConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInstanceStorageConfigOutputError>
}

public struct UpdateInstanceStorageConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInstanceStorageConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateInstanceStorageConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInstanceStorageConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let resourceType = input.operationInput.resourceType {
            let resourceTypeQueryItem = ClientRuntime.URLQueryItem(name: "resourceType".urlPercentEncoding(), value: Swift.String(resourceType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(resourceTypeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateInstanceStorageConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInstanceStorageConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInstanceStorageConfigOutputError>
}

public struct UpdateInstanceStorageConfigInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInstanceStorageConfigInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateInstanceStorageConfigInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInstanceStorageConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let associationId = input.associationId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("associationId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/instance/\(instanceId.urlPercentEncoding())/storage-config/\(associationId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateInstanceStorageConfigInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInstanceStorageConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInstanceStorageConfigOutputError>
}

public struct UpdateInstanceStorageConfigInput: Swift.Equatable {
    /// The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
    /// This member is required.
    public var associationId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// A valid resource type.
    /// This member is required.
    public var resourceType: ConnectClientTypes.InstanceStorageResourceType?
    /// The storage configuration for the instance.
    /// This member is required.
    public var storageConfig: ConnectClientTypes.InstanceStorageConfig?

    public init (
        associationId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        resourceType: ConnectClientTypes.InstanceStorageResourceType? = nil,
        storageConfig: ConnectClientTypes.InstanceStorageConfig? = nil
    )
    {
        self.associationId = associationId
        self.instanceId = instanceId
        self.resourceType = resourceType
        self.storageConfig = storageConfig
    }
}

struct UpdateInstanceStorageConfigInputBody: Swift.Equatable {
    public let storageConfig: ConnectClientTypes.InstanceStorageConfig?
}

extension UpdateInstanceStorageConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageConfig = "StorageConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.InstanceStorageConfig.self, forKey: .storageConfig)
        storageConfig = storageConfigDecoded
    }
}

extension UpdateInstanceStorageConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateInstanceStorageConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateInstanceStorageConfigOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateInstanceStorageConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateInstanceStorageConfigOutputResponse()"}
}

extension UpdateInstanceStorageConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateInstanceStorageConfigOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateInstanceStorageConfigOutputResponseBody: Swift.Equatable {
}

extension UpdateInstanceStorageConfigOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateQueueHoursOfOperationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueHoursOfOperationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueHoursOfOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueHoursOfOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueHoursOfOperationOutputError>
}

extension UpdateQueueHoursOfOperationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateQueueHoursOfOperationInput(hoursOfOperationId: \(Swift.String(describing: hoursOfOperationId)), instanceId: \(Swift.String(describing: instanceId)), queueId: \(Swift.String(describing: queueId)))"}
}

extension UpdateQueueHoursOfOperationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hoursOfOperationId = "HoursOfOperationId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hoursOfOperationId = hoursOfOperationId {
            try encodeContainer.encode(hoursOfOperationId, forKey: .hoursOfOperationId)
        }
    }
}

public struct UpdateQueueHoursOfOperationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueHoursOfOperationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueHoursOfOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueHoursOfOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueHoursOfOperationOutputError>
}

public struct UpdateQueueHoursOfOperationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueHoursOfOperationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueHoursOfOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueHoursOfOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueHoursOfOperationOutputError>
}

public struct UpdateQueueHoursOfOperationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueHoursOfOperationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateQueueHoursOfOperationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueHoursOfOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let queueId = input.queueId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("queueId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/queues/\(instanceId.urlPercentEncoding())/\(queueId.urlPercentEncoding())/hours-of-operation"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateQueueHoursOfOperationInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueHoursOfOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueHoursOfOperationOutputError>
}

public struct UpdateQueueHoursOfOperationInput: Swift.Equatable {
    /// The identifier for the hours of operation.
    /// This member is required.
    public var hoursOfOperationId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier for the queue.
    /// This member is required.
    public var queueId: Swift.String?

    public init (
        hoursOfOperationId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        queueId: Swift.String? = nil
    )
    {
        self.hoursOfOperationId = hoursOfOperationId
        self.instanceId = instanceId
        self.queueId = queueId
    }
}

struct UpdateQueueHoursOfOperationInputBody: Swift.Equatable {
    public let hoursOfOperationId: Swift.String?
}

extension UpdateQueueHoursOfOperationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hoursOfOperationId = "HoursOfOperationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hoursOfOperationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hoursOfOperationId)
        hoursOfOperationId = hoursOfOperationIdDecoded
    }
}

extension UpdateQueueHoursOfOperationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateQueueHoursOfOperationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateQueueHoursOfOperationOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateQueueHoursOfOperationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateQueueHoursOfOperationOutputResponse()"}
}

extension UpdateQueueHoursOfOperationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateQueueHoursOfOperationOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateQueueHoursOfOperationOutputResponseBody: Swift.Equatable {
}

extension UpdateQueueHoursOfOperationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateQueueMaxContactsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueMaxContactsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueMaxContactsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueMaxContactsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueMaxContactsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueMaxContactsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueMaxContactsOutputError>
}

extension UpdateQueueMaxContactsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateQueueMaxContactsInput(instanceId: \(Swift.String(describing: instanceId)), maxContacts: \(Swift.String(describing: maxContacts)), queueId: \(Swift.String(describing: queueId)))"}
}

extension UpdateQueueMaxContactsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxContacts = "MaxContacts"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxContacts != 0 {
            try encodeContainer.encode(maxContacts, forKey: .maxContacts)
        }
    }
}

public struct UpdateQueueMaxContactsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueMaxContactsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueMaxContactsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueMaxContactsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueMaxContactsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueMaxContactsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueMaxContactsOutputError>
}

public struct UpdateQueueMaxContactsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueMaxContactsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueMaxContactsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueMaxContactsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueMaxContactsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueMaxContactsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueMaxContactsOutputError>
}

public struct UpdateQueueMaxContactsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueMaxContactsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateQueueMaxContactsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueMaxContactsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let queueId = input.queueId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("queueId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/queues/\(instanceId.urlPercentEncoding())/\(queueId.urlPercentEncoding())/max-contacts"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateQueueMaxContactsInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueMaxContactsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueMaxContactsOutputError>
}

public struct UpdateQueueMaxContactsInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The maximum number of contacts that can be in the queue before it is considered full.
    public var maxContacts: Swift.Int
    /// The identifier for the queue.
    /// This member is required.
    public var queueId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        maxContacts: Swift.Int = 0,
        queueId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.maxContacts = maxContacts
        self.queueId = queueId
    }
}

struct UpdateQueueMaxContactsInputBody: Swift.Equatable {
    public let maxContacts: Swift.Int
}

extension UpdateQueueMaxContactsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxContacts = "MaxContacts"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxContactsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxContacts)
        maxContacts = maxContactsDecoded
    }
}

extension UpdateQueueMaxContactsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateQueueMaxContactsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateQueueMaxContactsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateQueueMaxContactsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateQueueMaxContactsOutputResponse()"}
}

extension UpdateQueueMaxContactsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateQueueMaxContactsOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateQueueMaxContactsOutputResponseBody: Swift.Equatable {
}

extension UpdateQueueMaxContactsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateQueueNameInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueNameInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueNameOutputError>
}

extension UpdateQueueNameInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateQueueNameInput(description: \(Swift.String(describing: description)), instanceId: \(Swift.String(describing: instanceId)), name: \(Swift.String(describing: name)), queueId: \(Swift.String(describing: queueId)))"}
}

extension UpdateQueueNameInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct UpdateQueueNameInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueNameInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueNameOutputError>
}

public struct UpdateQueueNameInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueNameInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueNameOutputError>
}

public struct UpdateQueueNameInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueNameInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateQueueNameInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let queueId = input.queueId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("queueId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/queues/\(instanceId.urlPercentEncoding())/\(queueId.urlPercentEncoding())/name"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateQueueNameInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueNameOutputError>
}

public struct UpdateQueueNameInput: Swift.Equatable {
    /// The description of the queue.
    public var description: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The name of the queue.
    public var name: Swift.String?
    /// The identifier for the queue.
    /// This member is required.
    public var queueId: Swift.String?

    public init (
        description: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        name: Swift.String? = nil,
        queueId: Swift.String? = nil
    )
    {
        self.description = description
        self.instanceId = instanceId
        self.name = name
        self.queueId = queueId
    }
}

struct UpdateQueueNameInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
}

extension UpdateQueueNameInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateQueueNameOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateQueueNameOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateQueueNameOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateQueueNameOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateQueueNameOutputResponse()"}
}

extension UpdateQueueNameOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateQueueNameOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateQueueNameOutputResponseBody: Swift.Equatable {
}

extension UpdateQueueNameOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateQueueOutboundCallerConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueOutboundCallerConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueOutboundCallerConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueOutboundCallerConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueOutboundCallerConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueOutboundCallerConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueOutboundCallerConfigOutputError>
}

extension UpdateQueueOutboundCallerConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateQueueOutboundCallerConfigInput(instanceId: \(Swift.String(describing: instanceId)), outboundCallerConfig: \(Swift.String(describing: outboundCallerConfig)), queueId: \(Swift.String(describing: queueId)))"}
}

extension UpdateQueueOutboundCallerConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case outboundCallerConfig = "OutboundCallerConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let outboundCallerConfig = outboundCallerConfig {
            try encodeContainer.encode(outboundCallerConfig, forKey: .outboundCallerConfig)
        }
    }
}

public struct UpdateQueueOutboundCallerConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueOutboundCallerConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueOutboundCallerConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueOutboundCallerConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueOutboundCallerConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueOutboundCallerConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueOutboundCallerConfigOutputError>
}

public struct UpdateQueueOutboundCallerConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueOutboundCallerConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueOutboundCallerConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueOutboundCallerConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueOutboundCallerConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueOutboundCallerConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueOutboundCallerConfigOutputError>
}

public struct UpdateQueueOutboundCallerConfigInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueOutboundCallerConfigInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateQueueOutboundCallerConfigInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueOutboundCallerConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let queueId = input.queueId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("queueId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/queues/\(instanceId.urlPercentEncoding())/\(queueId.urlPercentEncoding())/outbound-caller-config"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateQueueOutboundCallerConfigInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueOutboundCallerConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueOutboundCallerConfigOutputError>
}

public struct UpdateQueueOutboundCallerConfigInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The outbound caller ID name, number, and outbound whisper flow.
    /// This member is required.
    public var outboundCallerConfig: ConnectClientTypes.OutboundCallerConfig?
    /// The identifier for the queue.
    /// This member is required.
    public var queueId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        outboundCallerConfig: ConnectClientTypes.OutboundCallerConfig? = nil,
        queueId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.outboundCallerConfig = outboundCallerConfig
        self.queueId = queueId
    }
}

struct UpdateQueueOutboundCallerConfigInputBody: Swift.Equatable {
    public let outboundCallerConfig: ConnectClientTypes.OutboundCallerConfig?
}

extension UpdateQueueOutboundCallerConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case outboundCallerConfig = "OutboundCallerConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outboundCallerConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.OutboundCallerConfig.self, forKey: .outboundCallerConfig)
        outboundCallerConfig = outboundCallerConfigDecoded
    }
}

extension UpdateQueueOutboundCallerConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateQueueOutboundCallerConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateQueueOutboundCallerConfigOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateQueueOutboundCallerConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateQueueOutboundCallerConfigOutputResponse()"}
}

extension UpdateQueueOutboundCallerConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateQueueOutboundCallerConfigOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateQueueOutboundCallerConfigOutputResponseBody: Swift.Equatable {
}

extension UpdateQueueOutboundCallerConfigOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateQueueStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueStatusOutputError>
}

extension UpdateQueueStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateQueueStatusInput(instanceId: \(Swift.String(describing: instanceId)), queueId: \(Swift.String(describing: queueId)), status: \(Swift.String(describing: status)))"}
}

extension UpdateQueueStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

public struct UpdateQueueStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueStatusOutputError>
}

public struct UpdateQueueStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQueueStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQueueStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueStatusOutputError>
}

public struct UpdateQueueStatusInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQueueStatusInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateQueueStatusInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQueueStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let queueId = input.queueId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("queueId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/queues/\(instanceId.urlPercentEncoding())/\(queueId.urlPercentEncoding())/status"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateQueueStatusInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQueueStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQueueStatusOutputError>
}

public struct UpdateQueueStatusInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier for the queue.
    /// This member is required.
    public var queueId: Swift.String?
    /// The status of the queue.
    /// This member is required.
    public var status: ConnectClientTypes.QueueStatus?

    public init (
        instanceId: Swift.String? = nil,
        queueId: Swift.String? = nil,
        status: ConnectClientTypes.QueueStatus? = nil
    )
    {
        self.instanceId = instanceId
        self.queueId = queueId
        self.status = status
    }
}

struct UpdateQueueStatusInputBody: Swift.Equatable {
    public let status: ConnectClientTypes.QueueStatus?
}

extension UpdateQueueStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.QueueStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension UpdateQueueStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateQueueStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateQueueStatusOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateQueueStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateQueueStatusOutputResponse()"}
}

extension UpdateQueueStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateQueueStatusOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateQueueStatusOutputResponseBody: Swift.Equatable {
}

extension UpdateQueueStatusOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateQuickConnectConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQuickConnectConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQuickConnectConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQuickConnectConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQuickConnectConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQuickConnectConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQuickConnectConfigOutputError>
}

extension UpdateQuickConnectConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateQuickConnectConfigInput(instanceId: \(Swift.String(describing: instanceId)), quickConnectConfig: \(Swift.String(describing: quickConnectConfig)), quickConnectId: \(Swift.String(describing: quickConnectId)))"}
}

extension UpdateQuickConnectConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case quickConnectConfig = "QuickConnectConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let quickConnectConfig = quickConnectConfig {
            try encodeContainer.encode(quickConnectConfig, forKey: .quickConnectConfig)
        }
    }
}

public struct UpdateQuickConnectConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQuickConnectConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQuickConnectConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQuickConnectConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQuickConnectConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQuickConnectConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQuickConnectConfigOutputError>
}

public struct UpdateQuickConnectConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQuickConnectConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQuickConnectConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQuickConnectConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQuickConnectConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQuickConnectConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQuickConnectConfigOutputError>
}

public struct UpdateQuickConnectConfigInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQuickConnectConfigInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateQuickConnectConfigInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQuickConnectConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let quickConnectId = input.quickConnectId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("quickConnectId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/quick-connects/\(instanceId.urlPercentEncoding())/\(quickConnectId.urlPercentEncoding())/config"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateQuickConnectConfigInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQuickConnectConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQuickConnectConfigOutputError>
}

public struct UpdateQuickConnectConfigInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// Information about the configuration settings for the quick connect.
    /// This member is required.
    public var quickConnectConfig: ConnectClientTypes.QuickConnectConfig?
    /// The identifier for the quick connect.
    /// This member is required.
    public var quickConnectId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        quickConnectConfig: ConnectClientTypes.QuickConnectConfig? = nil,
        quickConnectId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.quickConnectConfig = quickConnectConfig
        self.quickConnectId = quickConnectId
    }
}

struct UpdateQuickConnectConfigInputBody: Swift.Equatable {
    public let quickConnectConfig: ConnectClientTypes.QuickConnectConfig?
}

extension UpdateQuickConnectConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case quickConnectConfig = "QuickConnectConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let quickConnectConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.QuickConnectConfig.self, forKey: .quickConnectConfig)
        quickConnectConfig = quickConnectConfigDecoded
    }
}

extension UpdateQuickConnectConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateQuickConnectConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateQuickConnectConfigOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateQuickConnectConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateQuickConnectConfigOutputResponse()"}
}

extension UpdateQuickConnectConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateQuickConnectConfigOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateQuickConnectConfigOutputResponseBody: Swift.Equatable {
}

extension UpdateQuickConnectConfigOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateQuickConnectNameInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQuickConnectNameInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQuickConnectNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQuickConnectNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQuickConnectNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQuickConnectNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQuickConnectNameOutputError>
}

extension UpdateQuickConnectNameInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateQuickConnectNameInput(description: \(Swift.String(describing: description)), instanceId: \(Swift.String(describing: instanceId)), name: \(Swift.String(describing: name)), quickConnectId: \(Swift.String(describing: quickConnectId)))"}
}

extension UpdateQuickConnectNameInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct UpdateQuickConnectNameInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQuickConnectNameInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQuickConnectNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQuickConnectNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQuickConnectNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQuickConnectNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQuickConnectNameOutputError>
}

public struct UpdateQuickConnectNameInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQuickConnectNameInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateQuickConnectNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQuickConnectNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateQuickConnectNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQuickConnectNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQuickConnectNameOutputError>
}

public struct UpdateQuickConnectNameInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateQuickConnectNameInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateQuickConnectNameInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateQuickConnectNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let quickConnectId = input.quickConnectId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("quickConnectId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/quick-connects/\(instanceId.urlPercentEncoding())/\(quickConnectId.urlPercentEncoding())/name"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateQuickConnectNameInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateQuickConnectNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateQuickConnectNameOutputError>
}

public struct UpdateQuickConnectNameInput: Swift.Equatable {
    /// The description of the quick connect.
    public var description: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The name of the quick connect.
    public var name: Swift.String?
    /// The identifier for the quick connect.
    /// This member is required.
    public var quickConnectId: Swift.String?

    public init (
        description: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        name: Swift.String? = nil,
        quickConnectId: Swift.String? = nil
    )
    {
        self.description = description
        self.instanceId = instanceId
        self.name = name
        self.quickConnectId = quickConnectId
    }
}

struct UpdateQuickConnectNameInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
}

extension UpdateQuickConnectNameInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateQuickConnectNameOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateQuickConnectNameOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateQuickConnectNameOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateQuickConnectNameOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateQuickConnectNameOutputResponse()"}
}

extension UpdateQuickConnectNameOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateQuickConnectNameOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateQuickConnectNameOutputResponseBody: Swift.Equatable {
}

extension UpdateQuickConnectNameOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateRoutingProfileConcurrencyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileConcurrencyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingProfileConcurrencyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileConcurrencyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingProfileConcurrencyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileConcurrencyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileConcurrencyOutputError>
}

extension UpdateRoutingProfileConcurrencyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoutingProfileConcurrencyInput(instanceId: \(Swift.String(describing: instanceId)), mediaConcurrencies: \(Swift.String(describing: mediaConcurrencies)), routingProfileId: \(Swift.String(describing: routingProfileId)))"}
}

extension UpdateRoutingProfileConcurrencyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mediaConcurrencies = "MediaConcurrencies"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mediaConcurrencies = mediaConcurrencies {
            var mediaConcurrenciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaConcurrencies)
            for mediaconcurrencies0 in mediaConcurrencies {
                try mediaConcurrenciesContainer.encode(mediaconcurrencies0)
            }
        }
    }
}

public struct UpdateRoutingProfileConcurrencyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileConcurrencyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingProfileConcurrencyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileConcurrencyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingProfileConcurrencyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileConcurrencyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileConcurrencyOutputError>
}

public struct UpdateRoutingProfileConcurrencyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileConcurrencyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingProfileConcurrencyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileConcurrencyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingProfileConcurrencyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileConcurrencyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileConcurrencyOutputError>
}

public struct UpdateRoutingProfileConcurrencyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileConcurrencyInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateRoutingProfileConcurrencyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileConcurrencyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let routingProfileId = input.routingProfileId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("routingProfileId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/routing-profiles/\(instanceId.urlPercentEncoding())/\(routingProfileId.urlPercentEncoding())/concurrency"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateRoutingProfileConcurrencyInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileConcurrencyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileConcurrencyOutputError>
}

public struct UpdateRoutingProfileConcurrencyInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The channels that agents can handle in the Contact Control Panel (CCP).
    /// This member is required.
    public var mediaConcurrencies: [ConnectClientTypes.MediaConcurrency]?
    /// The identifier of the routing profile.
    /// This member is required.
    public var routingProfileId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        mediaConcurrencies: [ConnectClientTypes.MediaConcurrency]? = nil,
        routingProfileId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.mediaConcurrencies = mediaConcurrencies
        self.routingProfileId = routingProfileId
    }
}

struct UpdateRoutingProfileConcurrencyInputBody: Swift.Equatable {
    public let mediaConcurrencies: [ConnectClientTypes.MediaConcurrency]?
}

extension UpdateRoutingProfileConcurrencyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mediaConcurrencies = "MediaConcurrencies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mediaConcurrenciesContainer = try containerValues.decodeIfPresent([ConnectClientTypes.MediaConcurrency?].self, forKey: .mediaConcurrencies)
        var mediaConcurrenciesDecoded0:[ConnectClientTypes.MediaConcurrency]? = nil
        if let mediaConcurrenciesContainer = mediaConcurrenciesContainer {
            mediaConcurrenciesDecoded0 = [ConnectClientTypes.MediaConcurrency]()
            for structure0 in mediaConcurrenciesContainer {
                if let structure0 = structure0 {
                    mediaConcurrenciesDecoded0?.append(structure0)
                }
            }
        }
        mediaConcurrencies = mediaConcurrenciesDecoded0
    }
}

extension UpdateRoutingProfileConcurrencyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRoutingProfileConcurrencyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRoutingProfileConcurrencyOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRoutingProfileConcurrencyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoutingProfileConcurrencyOutputResponse()"}
}

extension UpdateRoutingProfileConcurrencyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateRoutingProfileConcurrencyOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateRoutingProfileConcurrencyOutputResponseBody: Swift.Equatable {
}

extension UpdateRoutingProfileConcurrencyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateRoutingProfileDefaultOutboundQueueInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileDefaultOutboundQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingProfileDefaultOutboundQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileDefaultOutboundQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingProfileDefaultOutboundQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileDefaultOutboundQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileDefaultOutboundQueueOutputError>
}

extension UpdateRoutingProfileDefaultOutboundQueueInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoutingProfileDefaultOutboundQueueInput(defaultOutboundQueueId: \(Swift.String(describing: defaultOutboundQueueId)), instanceId: \(Swift.String(describing: instanceId)), routingProfileId: \(Swift.String(describing: routingProfileId)))"}
}

extension UpdateRoutingProfileDefaultOutboundQueueInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultOutboundQueueId = "DefaultOutboundQueueId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultOutboundQueueId = defaultOutboundQueueId {
            try encodeContainer.encode(defaultOutboundQueueId, forKey: .defaultOutboundQueueId)
        }
    }
}

public struct UpdateRoutingProfileDefaultOutboundQueueInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileDefaultOutboundQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingProfileDefaultOutboundQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileDefaultOutboundQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingProfileDefaultOutboundQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileDefaultOutboundQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileDefaultOutboundQueueOutputError>
}

public struct UpdateRoutingProfileDefaultOutboundQueueInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileDefaultOutboundQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingProfileDefaultOutboundQueueInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileDefaultOutboundQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingProfileDefaultOutboundQueueInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileDefaultOutboundQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileDefaultOutboundQueueOutputError>
}

public struct UpdateRoutingProfileDefaultOutboundQueueInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileDefaultOutboundQueueInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateRoutingProfileDefaultOutboundQueueInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileDefaultOutboundQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let routingProfileId = input.routingProfileId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("routingProfileId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/routing-profiles/\(instanceId.urlPercentEncoding())/\(routingProfileId.urlPercentEncoding())/default-outbound-queue"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateRoutingProfileDefaultOutboundQueueInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileDefaultOutboundQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileDefaultOutboundQueueOutputError>
}

public struct UpdateRoutingProfileDefaultOutboundQueueInput: Swift.Equatable {
    /// The identifier for the default outbound queue.
    /// This member is required.
    public var defaultOutboundQueueId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier of the routing profile.
    /// This member is required.
    public var routingProfileId: Swift.String?

    public init (
        defaultOutboundQueueId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        routingProfileId: Swift.String? = nil
    )
    {
        self.defaultOutboundQueueId = defaultOutboundQueueId
        self.instanceId = instanceId
        self.routingProfileId = routingProfileId
    }
}

struct UpdateRoutingProfileDefaultOutboundQueueInputBody: Swift.Equatable {
    public let defaultOutboundQueueId: Swift.String?
}

extension UpdateRoutingProfileDefaultOutboundQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultOutboundQueueId = "DefaultOutboundQueueId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultOutboundQueueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultOutboundQueueId)
        defaultOutboundQueueId = defaultOutboundQueueIdDecoded
    }
}

extension UpdateRoutingProfileDefaultOutboundQueueOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRoutingProfileDefaultOutboundQueueOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRoutingProfileDefaultOutboundQueueOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRoutingProfileDefaultOutboundQueueOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoutingProfileDefaultOutboundQueueOutputResponse()"}
}

extension UpdateRoutingProfileDefaultOutboundQueueOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateRoutingProfileDefaultOutboundQueueOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateRoutingProfileDefaultOutboundQueueOutputResponseBody: Swift.Equatable {
}

extension UpdateRoutingProfileDefaultOutboundQueueOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateRoutingProfileNameInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileNameInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingProfileNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingProfileNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileNameOutputError>
}

extension UpdateRoutingProfileNameInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoutingProfileNameInput(description: \(Swift.String(describing: description)), instanceId: \(Swift.String(describing: instanceId)), name: \(Swift.String(describing: name)), routingProfileId: \(Swift.String(describing: routingProfileId)))"}
}

extension UpdateRoutingProfileNameInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct UpdateRoutingProfileNameInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileNameInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingProfileNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingProfileNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileNameOutputError>
}

public struct UpdateRoutingProfileNameInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileNameInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingProfileNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingProfileNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileNameOutputError>
}

public struct UpdateRoutingProfileNameInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileNameInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateRoutingProfileNameInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let routingProfileId = input.routingProfileId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("routingProfileId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/routing-profiles/\(instanceId.urlPercentEncoding())/\(routingProfileId.urlPercentEncoding())/name"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateRoutingProfileNameInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileNameOutputError>
}

public struct UpdateRoutingProfileNameInput: Swift.Equatable {
    /// The description of the routing profile. Must not be more than 250 characters.
    public var description: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The name of the routing profile. Must not be more than 127 characters.
    public var name: Swift.String?
    /// The identifier of the routing profile.
    /// This member is required.
    public var routingProfileId: Swift.String?

    public init (
        description: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        name: Swift.String? = nil,
        routingProfileId: Swift.String? = nil
    )
    {
        self.description = description
        self.instanceId = instanceId
        self.name = name
        self.routingProfileId = routingProfileId
    }
}

struct UpdateRoutingProfileNameInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
}

extension UpdateRoutingProfileNameInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateRoutingProfileNameOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRoutingProfileNameOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRoutingProfileNameOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRoutingProfileNameOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoutingProfileNameOutputResponse()"}
}

extension UpdateRoutingProfileNameOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateRoutingProfileNameOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateRoutingProfileNameOutputResponseBody: Swift.Equatable {
}

extension UpdateRoutingProfileNameOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateRoutingProfileQueuesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileQueuesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingProfileQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingProfileQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileQueuesOutputError>
}

extension UpdateRoutingProfileQueuesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoutingProfileQueuesInput(instanceId: \(Swift.String(describing: instanceId)), queueConfigs: \(Swift.String(describing: queueConfigs)), routingProfileId: \(Swift.String(describing: routingProfileId)))"}
}

extension UpdateRoutingProfileQueuesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueConfigs = "QueueConfigs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queueConfigs = queueConfigs {
            var queueConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queueConfigs)
            for routingprofilequeueconfiglist0 in queueConfigs {
                try queueConfigsContainer.encode(routingprofilequeueconfiglist0)
            }
        }
    }
}

public struct UpdateRoutingProfileQueuesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileQueuesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingProfileQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingProfileQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileQueuesOutputError>
}

public struct UpdateRoutingProfileQueuesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileQueuesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingProfileQueuesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingProfileQueuesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileQueuesOutputError>
}

public struct UpdateRoutingProfileQueuesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingProfileQueuesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateRoutingProfileQueuesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingProfileQueuesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let routingProfileId = input.routingProfileId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("routingProfileId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/routing-profiles/\(instanceId.urlPercentEncoding())/\(routingProfileId.urlPercentEncoding())/queues"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateRoutingProfileQueuesInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingProfileQueuesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingProfileQueuesOutputError>
}

public struct UpdateRoutingProfileQueuesInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The queues to be updated for this routing profile.
    ///    Queues must first be associated to the routing
    ///    profile. You can do this using AssociateRoutingProfileQueues.
    /// This member is required.
    public var queueConfigs: [ConnectClientTypes.RoutingProfileQueueConfig]?
    /// The identifier of the routing profile.
    /// This member is required.
    public var routingProfileId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        queueConfigs: [ConnectClientTypes.RoutingProfileQueueConfig]? = nil,
        routingProfileId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.queueConfigs = queueConfigs
        self.routingProfileId = routingProfileId
    }
}

struct UpdateRoutingProfileQueuesInputBody: Swift.Equatable {
    public let queueConfigs: [ConnectClientTypes.RoutingProfileQueueConfig]?
}

extension UpdateRoutingProfileQueuesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueConfigs = "QueueConfigs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueConfigsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.RoutingProfileQueueConfig?].self, forKey: .queueConfigs)
        var queueConfigsDecoded0:[ConnectClientTypes.RoutingProfileQueueConfig]? = nil
        if let queueConfigsContainer = queueConfigsContainer {
            queueConfigsDecoded0 = [ConnectClientTypes.RoutingProfileQueueConfig]()
            for structure0 in queueConfigsContainer {
                if let structure0 = structure0 {
                    queueConfigsDecoded0?.append(structure0)
                }
            }
        }
        queueConfigs = queueConfigsDecoded0
    }
}

extension UpdateRoutingProfileQueuesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRoutingProfileQueuesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRoutingProfileQueuesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRoutingProfileQueuesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoutingProfileQueuesOutputResponse()"}
}

extension UpdateRoutingProfileQueuesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateRoutingProfileQueuesOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateRoutingProfileQueuesOutputResponseBody: Swift.Equatable {
}

extension UpdateRoutingProfileQueuesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateUserHierarchyGroupNameInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserHierarchyGroupNameInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserHierarchyGroupNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserHierarchyGroupNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserHierarchyGroupNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserHierarchyGroupNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserHierarchyGroupNameOutputError>
}

extension UpdateUserHierarchyGroupNameInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserHierarchyGroupNameInput(hierarchyGroupId: \(Swift.String(describing: hierarchyGroupId)), instanceId: \(Swift.String(describing: instanceId)), name: \(Swift.String(describing: name)))"}
}

extension UpdateUserHierarchyGroupNameInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct UpdateUserHierarchyGroupNameInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserHierarchyGroupNameInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserHierarchyGroupNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserHierarchyGroupNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserHierarchyGroupNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserHierarchyGroupNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserHierarchyGroupNameOutputError>
}

public struct UpdateUserHierarchyGroupNameInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserHierarchyGroupNameInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserHierarchyGroupNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserHierarchyGroupNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserHierarchyGroupNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserHierarchyGroupNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserHierarchyGroupNameOutputError>
}

public struct UpdateUserHierarchyGroupNameInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserHierarchyGroupNameInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateUserHierarchyGroupNameInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserHierarchyGroupNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let hierarchyGroupId = input.hierarchyGroupId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("hierarchyGroupId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/user-hierarchy-groups/\(instanceId.urlPercentEncoding())/\(hierarchyGroupId.urlPercentEncoding())/name"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateUserHierarchyGroupNameInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserHierarchyGroupNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserHierarchyGroupNameOutputError>
}

public struct UpdateUserHierarchyGroupNameInput: Swift.Equatable {
    /// The identifier of the hierarchy group.
    /// This member is required.
    public var hierarchyGroupId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The name of the hierarchy group. Must not be more than 100 characters.
    /// This member is required.
    public var name: Swift.String?

    public init (
        hierarchyGroupId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.hierarchyGroupId = hierarchyGroupId
        self.instanceId = instanceId
        self.name = name
    }
}

struct UpdateUserHierarchyGroupNameInputBody: Swift.Equatable {
    public let name: Swift.String?
}

extension UpdateUserHierarchyGroupNameInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension UpdateUserHierarchyGroupNameOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateUserHierarchyGroupNameOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateResourceException" : self = .duplicateResourceException(try DuplicateResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateUserHierarchyGroupNameOutputError: Swift.Error, Swift.Equatable {
    case duplicateResourceException(DuplicateResourceException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateUserHierarchyGroupNameOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserHierarchyGroupNameOutputResponse()"}
}

extension UpdateUserHierarchyGroupNameOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateUserHierarchyGroupNameOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateUserHierarchyGroupNameOutputResponseBody: Swift.Equatable {
}

extension UpdateUserHierarchyGroupNameOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateUserHierarchyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserHierarchyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserHierarchyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserHierarchyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserHierarchyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserHierarchyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserHierarchyOutputError>
}

extension UpdateUserHierarchyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserHierarchyInput(hierarchyGroupId: \(Swift.String(describing: hierarchyGroupId)), instanceId: \(Swift.String(describing: instanceId)), userId: \(Swift.String(describing: userId)))"}
}

extension UpdateUserHierarchyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hierarchyGroupId = "HierarchyGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hierarchyGroupId = hierarchyGroupId {
            try encodeContainer.encode(hierarchyGroupId, forKey: .hierarchyGroupId)
        }
    }
}

public struct UpdateUserHierarchyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserHierarchyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserHierarchyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserHierarchyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserHierarchyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserHierarchyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserHierarchyOutputError>
}

public struct UpdateUserHierarchyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserHierarchyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserHierarchyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserHierarchyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserHierarchyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserHierarchyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserHierarchyOutputError>
}

public struct UpdateUserHierarchyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserHierarchyInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateUserHierarchyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserHierarchyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let userId = input.userId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("userId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/users/\(instanceId.urlPercentEncoding())/\(userId.urlPercentEncoding())/hierarchy"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateUserHierarchyInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserHierarchyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserHierarchyOutputError>
}

public struct UpdateUserHierarchyInput: Swift.Equatable {
    /// The identifier of the hierarchy group.
    public var hierarchyGroupId: Swift.String?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier of the user account.
    /// This member is required.
    public var userId: Swift.String?

    public init (
        hierarchyGroupId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.hierarchyGroupId = hierarchyGroupId
        self.instanceId = instanceId
        self.userId = userId
    }
}

struct UpdateUserHierarchyInputBody: Swift.Equatable {
    public let hierarchyGroupId: Swift.String?
}

extension UpdateUserHierarchyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hierarchyGroupId = "HierarchyGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hierarchyGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hierarchyGroupId)
        hierarchyGroupId = hierarchyGroupIdDecoded
    }
}

extension UpdateUserHierarchyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateUserHierarchyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateUserHierarchyOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateUserHierarchyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserHierarchyOutputResponse()"}
}

extension UpdateUserHierarchyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateUserHierarchyOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateUserHierarchyOutputResponseBody: Swift.Equatable {
}

extension UpdateUserHierarchyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateUserHierarchyStructureInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserHierarchyStructureInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserHierarchyStructureInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserHierarchyStructureOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserHierarchyStructureInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserHierarchyStructureOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserHierarchyStructureOutputError>
}

extension UpdateUserHierarchyStructureInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserHierarchyStructureInput(hierarchyStructure: \(Swift.String(describing: hierarchyStructure)), instanceId: \(Swift.String(describing: instanceId)))"}
}

extension UpdateUserHierarchyStructureInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hierarchyStructure = "HierarchyStructure"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hierarchyStructure = hierarchyStructure {
            try encodeContainer.encode(hierarchyStructure, forKey: .hierarchyStructure)
        }
    }
}

public struct UpdateUserHierarchyStructureInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserHierarchyStructureInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserHierarchyStructureInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserHierarchyStructureOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserHierarchyStructureInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserHierarchyStructureOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserHierarchyStructureOutputError>
}

public struct UpdateUserHierarchyStructureInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserHierarchyStructureInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserHierarchyStructureInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserHierarchyStructureOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserHierarchyStructureInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserHierarchyStructureOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserHierarchyStructureOutputError>
}

public struct UpdateUserHierarchyStructureInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserHierarchyStructureInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateUserHierarchyStructureInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserHierarchyStructureOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/user-hierarchy-structure/\(instanceId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateUserHierarchyStructureInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserHierarchyStructureOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserHierarchyStructureOutputError>
}

public struct UpdateUserHierarchyStructureInput: Swift.Equatable {
    /// The hierarchy levels to update.
    /// This member is required.
    public var hierarchyStructure: ConnectClientTypes.HierarchyStructureUpdate?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        hierarchyStructure: ConnectClientTypes.HierarchyStructureUpdate? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.hierarchyStructure = hierarchyStructure
        self.instanceId = instanceId
    }
}

struct UpdateUserHierarchyStructureInputBody: Swift.Equatable {
    public let hierarchyStructure: ConnectClientTypes.HierarchyStructureUpdate?
}

extension UpdateUserHierarchyStructureInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hierarchyStructure = "HierarchyStructure"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hierarchyStructureDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyStructureUpdate.self, forKey: .hierarchyStructure)
        hierarchyStructure = hierarchyStructureDecoded
    }
}

extension UpdateUserHierarchyStructureOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateUserHierarchyStructureOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateUserHierarchyStructureOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateUserHierarchyStructureOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserHierarchyStructureOutputResponse()"}
}

extension UpdateUserHierarchyStructureOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateUserHierarchyStructureOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateUserHierarchyStructureOutputResponseBody: Swift.Equatable {
}

extension UpdateUserHierarchyStructureOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateUserIdentityInfoInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserIdentityInfoInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserIdentityInfoInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserIdentityInfoOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserIdentityInfoInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserIdentityInfoOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserIdentityInfoOutputError>
}

extension UpdateUserIdentityInfoInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserIdentityInfoInput(identityInfo: \(Swift.String(describing: identityInfo)), instanceId: \(Swift.String(describing: instanceId)), userId: \(Swift.String(describing: userId)))"}
}

extension UpdateUserIdentityInfoInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityInfo = "IdentityInfo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityInfo = identityInfo {
            try encodeContainer.encode(identityInfo, forKey: .identityInfo)
        }
    }
}

public struct UpdateUserIdentityInfoInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserIdentityInfoInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserIdentityInfoInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserIdentityInfoOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserIdentityInfoInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserIdentityInfoOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserIdentityInfoOutputError>
}

public struct UpdateUserIdentityInfoInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserIdentityInfoInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserIdentityInfoInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserIdentityInfoOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserIdentityInfoInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserIdentityInfoOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserIdentityInfoOutputError>
}

public struct UpdateUserIdentityInfoInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserIdentityInfoInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateUserIdentityInfoInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserIdentityInfoOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let userId = input.userId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("userId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/users/\(instanceId.urlPercentEncoding())/\(userId.urlPercentEncoding())/identity-info"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateUserIdentityInfoInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserIdentityInfoOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserIdentityInfoOutputError>
}

public struct UpdateUserIdentityInfoInput: Swift.Equatable {
    /// The identity information for the user.
    /// This member is required.
    public var identityInfo: ConnectClientTypes.UserIdentityInfo?
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier of the user account.
    /// This member is required.
    public var userId: Swift.String?

    public init (
        identityInfo: ConnectClientTypes.UserIdentityInfo? = nil,
        instanceId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.identityInfo = identityInfo
        self.instanceId = instanceId
        self.userId = userId
    }
}

struct UpdateUserIdentityInfoInputBody: Swift.Equatable {
    public let identityInfo: ConnectClientTypes.UserIdentityInfo?
}

extension UpdateUserIdentityInfoInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityInfo = "IdentityInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityInfoDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.UserIdentityInfo.self, forKey: .identityInfo)
        identityInfo = identityInfoDecoded
    }
}

extension UpdateUserIdentityInfoOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateUserIdentityInfoOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateUserIdentityInfoOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateUserIdentityInfoOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserIdentityInfoOutputResponse()"}
}

extension UpdateUserIdentityInfoOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateUserIdentityInfoOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateUserIdentityInfoOutputResponseBody: Swift.Equatable {
}

extension UpdateUserIdentityInfoOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateUserPhoneConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserPhoneConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserPhoneConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserPhoneConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserPhoneConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserPhoneConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserPhoneConfigOutputError>
}

extension UpdateUserPhoneConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserPhoneConfigInput(instanceId: \(Swift.String(describing: instanceId)), phoneConfig: \(Swift.String(describing: phoneConfig)), userId: \(Swift.String(describing: userId)))"}
}

extension UpdateUserPhoneConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case phoneConfig = "PhoneConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let phoneConfig = phoneConfig {
            try encodeContainer.encode(phoneConfig, forKey: .phoneConfig)
        }
    }
}

public struct UpdateUserPhoneConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserPhoneConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserPhoneConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserPhoneConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserPhoneConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserPhoneConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserPhoneConfigOutputError>
}

public struct UpdateUserPhoneConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserPhoneConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserPhoneConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserPhoneConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserPhoneConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserPhoneConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserPhoneConfigOutputError>
}

public struct UpdateUserPhoneConfigInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserPhoneConfigInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateUserPhoneConfigInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserPhoneConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let userId = input.userId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("userId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/users/\(instanceId.urlPercentEncoding())/\(userId.urlPercentEncoding())/phone-config"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateUserPhoneConfigInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserPhoneConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserPhoneConfigOutputError>
}

public struct UpdateUserPhoneConfigInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// Information about phone configuration settings for the user.
    /// This member is required.
    public var phoneConfig: ConnectClientTypes.UserPhoneConfig?
    /// The identifier of the user account.
    /// This member is required.
    public var userId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        phoneConfig: ConnectClientTypes.UserPhoneConfig? = nil,
        userId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.phoneConfig = phoneConfig
        self.userId = userId
    }
}

struct UpdateUserPhoneConfigInputBody: Swift.Equatable {
    public let phoneConfig: ConnectClientTypes.UserPhoneConfig?
}

extension UpdateUserPhoneConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case phoneConfig = "PhoneConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let phoneConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.UserPhoneConfig.self, forKey: .phoneConfig)
        phoneConfig = phoneConfigDecoded
    }
}

extension UpdateUserPhoneConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateUserPhoneConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateUserPhoneConfigOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateUserPhoneConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserPhoneConfigOutputResponse()"}
}

extension UpdateUserPhoneConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateUserPhoneConfigOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateUserPhoneConfigOutputResponseBody: Swift.Equatable {
}

extension UpdateUserPhoneConfigOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateUserRoutingProfileInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserRoutingProfileInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserRoutingProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserRoutingProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserRoutingProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserRoutingProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserRoutingProfileOutputError>
}

extension UpdateUserRoutingProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserRoutingProfileInput(instanceId: \(Swift.String(describing: instanceId)), routingProfileId: \(Swift.String(describing: routingProfileId)), userId: \(Swift.String(describing: userId)))"}
}

extension UpdateUserRoutingProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingProfileId = "RoutingProfileId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let routingProfileId = routingProfileId {
            try encodeContainer.encode(routingProfileId, forKey: .routingProfileId)
        }
    }
}

public struct UpdateUserRoutingProfileInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserRoutingProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserRoutingProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserRoutingProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserRoutingProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserRoutingProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserRoutingProfileOutputError>
}

public struct UpdateUserRoutingProfileInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserRoutingProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserRoutingProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserRoutingProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserRoutingProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserRoutingProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserRoutingProfileOutputError>
}

public struct UpdateUserRoutingProfileInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserRoutingProfileInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateUserRoutingProfileInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserRoutingProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let userId = input.userId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("userId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/users/\(instanceId.urlPercentEncoding())/\(userId.urlPercentEncoding())/routing-profile"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateUserRoutingProfileInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserRoutingProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserRoutingProfileOutputError>
}

public struct UpdateUserRoutingProfileInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifier of the routing profile for the user.
    /// This member is required.
    public var routingProfileId: Swift.String?
    /// The identifier of the user account.
    /// This member is required.
    public var userId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        routingProfileId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.routingProfileId = routingProfileId
        self.userId = userId
    }
}

struct UpdateUserRoutingProfileInputBody: Swift.Equatable {
    public let routingProfileId: Swift.String?
}

extension UpdateUserRoutingProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingProfileId = "RoutingProfileId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingProfileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingProfileId)
        routingProfileId = routingProfileIdDecoded
    }
}

extension UpdateUserRoutingProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateUserRoutingProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateUserRoutingProfileOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateUserRoutingProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserRoutingProfileOutputResponse()"}
}

extension UpdateUserRoutingProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateUserRoutingProfileOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateUserRoutingProfileOutputResponseBody: Swift.Equatable {
}

extension UpdateUserRoutingProfileOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateUserSecurityProfilesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserSecurityProfilesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserSecurityProfilesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserSecurityProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserSecurityProfilesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserSecurityProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserSecurityProfilesOutputError>
}

extension UpdateUserSecurityProfilesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserSecurityProfilesInput(instanceId: \(Swift.String(describing: instanceId)), securityProfileIds: \(Swift.String(describing: securityProfileIds)), userId: \(Swift.String(describing: userId)))"}
}

extension UpdateUserSecurityProfilesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityProfileIds = "SecurityProfileIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityProfileIds = securityProfileIds {
            var securityProfileIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityProfileIds)
            for securityprofileids0 in securityProfileIds {
                try securityProfileIdsContainer.encode(securityprofileids0)
            }
        }
    }
}

public struct UpdateUserSecurityProfilesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserSecurityProfilesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserSecurityProfilesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserSecurityProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserSecurityProfilesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserSecurityProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserSecurityProfilesOutputError>
}

public struct UpdateUserSecurityProfilesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserSecurityProfilesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateUserSecurityProfilesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserSecurityProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateUserSecurityProfilesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserSecurityProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserSecurityProfilesOutputError>
}

public struct UpdateUserSecurityProfilesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateUserSecurityProfilesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateUserSecurityProfilesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateUserSecurityProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let instanceId = input.instanceId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("instanceId is nil and needs a value for the path of this operation"))))
        }
        guard let userId = input.userId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("userId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/users/\(instanceId.urlPercentEncoding())/\(userId.urlPercentEncoding())/security-profiles"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateUserSecurityProfilesInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateUserSecurityProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateUserSecurityProfilesOutputError>
}

public struct UpdateUserSecurityProfilesInput: Swift.Equatable {
    /// The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// The identifiers of the security profiles for the user.
    /// This member is required.
    public var securityProfileIds: [Swift.String]?
    /// The identifier of the user account.
    /// This member is required.
    public var userId: Swift.String?

    public init (
        instanceId: Swift.String? = nil,
        securityProfileIds: [Swift.String]? = nil,
        userId: Swift.String? = nil
    )
    {
        self.instanceId = instanceId
        self.securityProfileIds = securityProfileIds
        self.userId = userId
    }
}

struct UpdateUserSecurityProfilesInputBody: Swift.Equatable {
    public let securityProfileIds: [Swift.String]?
}

extension UpdateUserSecurityProfilesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityProfileIds = "SecurityProfileIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityProfileIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityProfileIds)
        var securityProfileIdsDecoded0:[Swift.String]? = nil
        if let securityProfileIdsContainer = securityProfileIdsContainer {
            securityProfileIdsDecoded0 = [Swift.String]()
            for string0 in securityProfileIdsContainer {
                if let string0 = string0 {
                    securityProfileIdsDecoded0?.append(string0)
                }
            }
        }
        securityProfileIds = securityProfileIdsDecoded0
    }
}

extension UpdateUserSecurityProfilesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateUserSecurityProfilesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateUserSecurityProfilesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateUserSecurityProfilesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateUserSecurityProfilesOutputResponse()"}
}

extension UpdateUserSecurityProfilesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateUserSecurityProfilesOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateUserSecurityProfilesOutputResponseBody: Swift.Equatable {
}

extension UpdateUserSecurityProfilesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ConnectClientTypes.UseCase: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case useCaseArn = "UseCaseArn"
        case useCaseId = "UseCaseId"
        case useCaseType = "UseCaseType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let useCaseArn = useCaseArn {
            try encodeContainer.encode(useCaseArn, forKey: .useCaseArn)
        }
        if let useCaseId = useCaseId {
            try encodeContainer.encode(useCaseId, forKey: .useCaseId)
        }
        if let useCaseType = useCaseType {
            try encodeContainer.encode(useCaseType.rawValue, forKey: .useCaseType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let useCaseIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .useCaseId)
        useCaseId = useCaseIdDecoded
        let useCaseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .useCaseArn)
        useCaseArn = useCaseArnDecoded
        let useCaseTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.UseCaseType.self, forKey: .useCaseType)
        useCaseType = useCaseTypeDecoded
    }
}

extension ConnectClientTypes.UseCase: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UseCase(useCaseArn: \(Swift.String(describing: useCaseArn)), useCaseId: \(Swift.String(describing: useCaseId)), useCaseType: \(Swift.String(describing: useCaseType)))"}
}

extension ConnectClientTypes {
    /// Contains the
    ///    use
    ///    case.
    public struct UseCase: Swift.Equatable {
        /// The Amazon Resource Name (ARN) for the use case.
        public var useCaseArn: Swift.String?
        /// The identifier for the use case.
        public var useCaseId: Swift.String?
        /// The type of use case to associate to the integration association. Each integration
        ///    association can have only one of each use case type.
        public var useCaseType: ConnectClientTypes.UseCaseType?

        public init (
            useCaseArn: Swift.String? = nil,
            useCaseId: Swift.String? = nil,
            useCaseType: ConnectClientTypes.UseCaseType? = nil
        )
        {
            self.useCaseArn = useCaseArn
            self.useCaseId = useCaseId
            self.useCaseType = useCaseType
        }
    }

}

extension ConnectClientTypes {
    public enum UseCaseType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case connectCampaigns
        case rulesEvaluation
        case sdkUnknown(Swift.String)

        public static var allCases: [UseCaseType] {
            return [
                .connectCampaigns,
                .rulesEvaluation,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .connectCampaigns: return "CONNECT_CAMPAIGNS"
            case .rulesEvaluation: return "RULES_EVALUATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UseCaseType(rawValue: rawValue) ?? UseCaseType.sdkUnknown(rawValue)
        }
    }
}

extension ConnectClientTypes.User: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case directoryUserId = "DirectoryUserId"
        case hierarchyGroupId = "HierarchyGroupId"
        case id = "Id"
        case identityInfo = "IdentityInfo"
        case phoneConfig = "PhoneConfig"
        case routingProfileId = "RoutingProfileId"
        case securityProfileIds = "SecurityProfileIds"
        case tags = "Tags"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let directoryUserId = directoryUserId {
            try encodeContainer.encode(directoryUserId, forKey: .directoryUserId)
        }
        if let hierarchyGroupId = hierarchyGroupId {
            try encodeContainer.encode(hierarchyGroupId, forKey: .hierarchyGroupId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let identityInfo = identityInfo {
            try encodeContainer.encode(identityInfo, forKey: .identityInfo)
        }
        if let phoneConfig = phoneConfig {
            try encodeContainer.encode(phoneConfig, forKey: .phoneConfig)
        }
        if let routingProfileId = routingProfileId {
            try encodeContainer.encode(routingProfileId, forKey: .routingProfileId)
        }
        if let securityProfileIds = securityProfileIds {
            var securityProfileIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityProfileIds)
            for securityprofileids0 in securityProfileIds {
                try securityProfileIdsContainer.encode(securityprofileids0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let identityInfoDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.UserIdentityInfo.self, forKey: .identityInfo)
        identityInfo = identityInfoDecoded
        let phoneConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.UserPhoneConfig.self, forKey: .phoneConfig)
        phoneConfig = phoneConfigDecoded
        let directoryUserIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryUserId)
        directoryUserId = directoryUserIdDecoded
        let securityProfileIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityProfileIds)
        var securityProfileIdsDecoded0:[Swift.String]? = nil
        if let securityProfileIdsContainer = securityProfileIdsContainer {
            securityProfileIdsDecoded0 = [Swift.String]()
            for string0 in securityProfileIdsContainer {
                if let string0 = string0 {
                    securityProfileIdsDecoded0?.append(string0)
                }
            }
        }
        securityProfileIds = securityProfileIdsDecoded0
        let routingProfileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingProfileId)
        routingProfileId = routingProfileIdDecoded
        let hierarchyGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hierarchyGroupId)
        hierarchyGroupId = hierarchyGroupIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ConnectClientTypes.User: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "User(arn: \(Swift.String(describing: arn)), directoryUserId: \(Swift.String(describing: directoryUserId)), hierarchyGroupId: \(Swift.String(describing: hierarchyGroupId)), id: \(Swift.String(describing: id)), identityInfo: \(Swift.String(describing: identityInfo)), phoneConfig: \(Swift.String(describing: phoneConfig)), routingProfileId: \(Swift.String(describing: routingProfileId)), securityProfileIds: \(Swift.String(describing: securityProfileIds)), tags: \(Swift.String(describing: tags)), username: \(Swift.String(describing: username)))"}
}

extension ConnectClientTypes {
    /// Contains information about a user account for a Amazon Connect instance.
    public struct User: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the user account.
        public var arn: Swift.String?
        /// The identifier of the user account in the directory used for identity management.
        public var directoryUserId: Swift.String?
        /// The identifier of the hierarchy group for the user.
        public var hierarchyGroupId: Swift.String?
        /// The identifier of the user account.
        public var id: Swift.String?
        /// Information about the user identity.
        public var identityInfo: ConnectClientTypes.UserIdentityInfo?
        /// Information about the phone configuration for the user.
        public var phoneConfig: ConnectClientTypes.UserPhoneConfig?
        /// The identifier of the routing profile for the user.
        public var routingProfileId: Swift.String?
        /// The identifiers of the security profiles for the user.
        public var securityProfileIds: [Swift.String]?
        /// The
        ///    tags.
        public var tags: [Swift.String:Swift.String]?
        /// The user name assigned to the user account.
        public var username: Swift.String?

        public init (
            arn: Swift.String? = nil,
            directoryUserId: Swift.String? = nil,
            hierarchyGroupId: Swift.String? = nil,
            id: Swift.String? = nil,
            identityInfo: ConnectClientTypes.UserIdentityInfo? = nil,
            phoneConfig: ConnectClientTypes.UserPhoneConfig? = nil,
            routingProfileId: Swift.String? = nil,
            securityProfileIds: [Swift.String]? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            username: Swift.String? = nil
        )
        {
            self.arn = arn
            self.directoryUserId = directoryUserId
            self.hierarchyGroupId = hierarchyGroupId
            self.id = id
            self.identityInfo = identityInfo
            self.phoneConfig = phoneConfig
            self.routingProfileId = routingProfileId
            self.securityProfileIds = securityProfileIds
            self.tags = tags
            self.username = username
        }
    }

}

extension ConnectClientTypes.UserIdentityInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case email = "Email"
        case firstName = "FirstName"
        case lastName = "LastName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let email = email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if let firstName = firstName {
            try encodeContainer.encode(firstName, forKey: .firstName)
        }
        if let lastName = lastName {
            try encodeContainer.encode(lastName, forKey: .lastName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firstNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firstName)
        firstName = firstNameDecoded
        let lastNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastName)
        lastName = lastNameDecoded
        let emailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .email)
        email = emailDecoded
    }
}

extension ConnectClientTypes.UserIdentityInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UserIdentityInfo(email: \(Swift.String(describing: email)), firstName: \(Swift.String(describing: firstName)), lastName: \(Swift.String(describing: lastName)))"}
}

extension ConnectClientTypes {
    /// Contains information about the identity of a user.
    public struct UserIdentityInfo: Swift.Equatable {
        /// The email address. If you are using SAML for identity management and include this parameter,
        ///    an error is returned.
        public var email: Swift.String?
        /// The first name. This is required if you are using Amazon Connect or SAML for identity
        ///    management.
        public var firstName: Swift.String?
        /// The last name. This is required if you are using Amazon Connect or SAML for identity
        ///    management.
        public var lastName: Swift.String?

        public init (
            email: Swift.String? = nil,
            firstName: Swift.String? = nil,
            lastName: Swift.String? = nil
        )
        {
            self.email = email
            self.firstName = firstName
            self.lastName = lastName
        }
    }

}

extension UserNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UserNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension UserNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UserNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// No user with the specified credentials was found in the Amazon Connect instance.
public struct UserNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UserNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension UserNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConnectClientTypes.UserPhoneConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case afterContactWorkTimeLimit = "AfterContactWorkTimeLimit"
        case autoAccept = "AutoAccept"
        case deskPhoneNumber = "DeskPhoneNumber"
        case phoneType = "PhoneType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if afterContactWorkTimeLimit != 0 {
            try encodeContainer.encode(afterContactWorkTimeLimit, forKey: .afterContactWorkTimeLimit)
        }
        if autoAccept != false {
            try encodeContainer.encode(autoAccept, forKey: .autoAccept)
        }
        if let deskPhoneNumber = deskPhoneNumber {
            try encodeContainer.encode(deskPhoneNumber, forKey: .deskPhoneNumber)
        }
        if let phoneType = phoneType {
            try encodeContainer.encode(phoneType.rawValue, forKey: .phoneType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let phoneTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.PhoneType.self, forKey: .phoneType)
        phoneType = phoneTypeDecoded
        let autoAcceptDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoAccept)
        autoAccept = autoAcceptDecoded
        let afterContactWorkTimeLimitDecoded = try containerValues.decode(Swift.Int.self, forKey: .afterContactWorkTimeLimit)
        afterContactWorkTimeLimit = afterContactWorkTimeLimitDecoded
        let deskPhoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deskPhoneNumber)
        deskPhoneNumber = deskPhoneNumberDecoded
    }
}

extension ConnectClientTypes.UserPhoneConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UserPhoneConfig(afterContactWorkTimeLimit: \(Swift.String(describing: afterContactWorkTimeLimit)), autoAccept: \(Swift.String(describing: autoAccept)), deskPhoneNumber: \(Swift.String(describing: deskPhoneNumber)), phoneType: \(Swift.String(describing: phoneType)))"}
}

extension ConnectClientTypes {
    /// Contains information about the phone configuration settings for a user.
    public struct UserPhoneConfig: Swift.Equatable {
        /// The After Call Work (ACW) timeout setting, in seconds.
        public var afterContactWorkTimeLimit: Swift.Int
        /// The Auto accept setting.
        public var autoAccept: Swift.Bool
        /// The phone number for the user's desk phone.
        public var deskPhoneNumber: Swift.String?
        /// The phone type.
        /// This member is required.
        public var phoneType: ConnectClientTypes.PhoneType?

        public init (
            afterContactWorkTimeLimit: Swift.Int = 0,
            autoAccept: Swift.Bool = false,
            deskPhoneNumber: Swift.String? = nil,
            phoneType: ConnectClientTypes.PhoneType? = nil
        )
        {
            self.afterContactWorkTimeLimit = afterContactWorkTimeLimit
            self.autoAccept = autoAccept
            self.deskPhoneNumber = deskPhoneNumber
            self.phoneType = phoneType
        }
    }

}

extension ConnectClientTypes.UserQuickConnectConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactFlowId = "ContactFlowId"
        case userId = "UserId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactFlowId = contactFlowId {
            try encodeContainer.encode(contactFlowId, forKey: .contactFlowId)
        }
        if let userId = userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let contactFlowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactFlowId)
        contactFlowId = contactFlowIdDecoded
    }
}

extension ConnectClientTypes.UserQuickConnectConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UserQuickConnectConfig(contactFlowId: \(Swift.String(describing: contactFlowId)), userId: \(Swift.String(describing: userId)))"}
}

extension ConnectClientTypes {
    /// Contains information about the quick connect configuration settings for a user. The contact
    ///    flow must be of type Transfer to Agent.
    public struct UserQuickConnectConfig: Swift.Equatable {
        /// The identifier of the contact flow.
        /// This member is required.
        public var contactFlowId: Swift.String?
        /// The identifier of the user.
        /// This member is required.
        public var userId: Swift.String?

        public init (
            contactFlowId: Swift.String? = nil,
            userId: Swift.String? = nil
        )
        {
            self.contactFlowId = contactFlowId
            self.userId = userId
        }
    }

}

extension ConnectClientTypes.UserSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case id = "Id"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension ConnectClientTypes.UserSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UserSummary(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)), username: \(Swift.String(describing: username)))"}
}

extension ConnectClientTypes {
    /// Contains summary information about a user.
    public struct UserSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the user account.
        public var arn: Swift.String?
        /// The identifier of the user account.
        public var id: Swift.String?
        /// The Amazon Connect user name of the user account.
        public var username: Swift.String?

        public init (
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.username = username
        }
    }

}

extension ConnectClientTypes.VoiceRecordingConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case voiceRecordingTrack = "VoiceRecordingTrack"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let voiceRecordingTrack = voiceRecordingTrack {
            try encodeContainer.encode(voiceRecordingTrack.rawValue, forKey: .voiceRecordingTrack)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let voiceRecordingTrackDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.VoiceRecordingTrack.self, forKey: .voiceRecordingTrack)
        voiceRecordingTrack = voiceRecordingTrackDecoded
    }
}

extension ConnectClientTypes.VoiceRecordingConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VoiceRecordingConfiguration(voiceRecordingTrack: \(Swift.String(describing: voiceRecordingTrack)))"}
}

extension ConnectClientTypes {
    /// Contains information about the recording configuration settings.
    public struct VoiceRecordingConfiguration: Swift.Equatable {
        /// Identifies which track is being recorded.
        public var voiceRecordingTrack: ConnectClientTypes.VoiceRecordingTrack?

        public init (
            voiceRecordingTrack: ConnectClientTypes.VoiceRecordingTrack? = nil
        )
        {
            self.voiceRecordingTrack = voiceRecordingTrack
        }
    }

}

extension ConnectClientTypes {
    public enum VoiceRecordingTrack: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case fromAgent
        case toAgent
        case sdkUnknown(Swift.String)

        public static var allCases: [VoiceRecordingTrack] {
            return [
                .all,
                .fromAgent,
                .toAgent,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .fromAgent: return "FROM_AGENT"
            case .toAgent: return "TO_AGENT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VoiceRecordingTrack(rawValue: rawValue) ?? VoiceRecordingTrack.sdkUnknown(rawValue)
        }
    }
}
