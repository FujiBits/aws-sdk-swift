// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ApiGatewayClient {
    /// Create an ApiKey resource.
    ///         <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/create-api-key.html">AWS CLI</div>
    func createApiKey(input: CreateApiKeyInput) async throws -> CreateApiKeyOutputResponse
    {
        typealias createApiKeyContinuation = CheckedContinuation<CreateApiKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createApiKeyContinuation) in
            createApiKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a new Authorizer resource to an existing RestApi resource.
    ///         <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/create-authorizer.html">AWS CLI</div>
    func createAuthorizer(input: CreateAuthorizerInput) async throws -> CreateAuthorizerOutputResponse
    {
        typealias createAuthorizerContinuation = CheckedContinuation<CreateAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAuthorizerContinuation) in
            createAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new BasePathMapping resource.
    func createBasePathMapping(input: CreateBasePathMappingInput) async throws -> CreateBasePathMappingOutputResponse
    {
        typealias createBasePathMappingContinuation = CheckedContinuation<CreateBasePathMappingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBasePathMappingContinuation) in
            createBasePathMapping(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a Deployment resource, which makes a specified RestApi callable over the internet.
    func createDeployment(input: CreateDeploymentInput) async throws -> CreateDeploymentOutputResponse
    {
        typealias createDeploymentContinuation = CheckedContinuation<CreateDeploymentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDeploymentContinuation) in
            createDeployment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func createDocumentationPart(input: CreateDocumentationPartInput) async throws -> CreateDocumentationPartOutputResponse
    {
        typealias createDocumentationPartContinuation = CheckedContinuation<CreateDocumentationPartOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDocumentationPartContinuation) in
            createDocumentationPart(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func createDocumentationVersion(input: CreateDocumentationVersionInput) async throws -> CreateDocumentationVersionOutputResponse
    {
        typealias createDocumentationVersionContinuation = CheckedContinuation<CreateDocumentationVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDocumentationVersionContinuation) in
            createDocumentationVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new domain name.
    func createDomainName(input: CreateDomainNameInput) async throws -> CreateDomainNameOutputResponse
    {
        typealias createDomainNameContinuation = CheckedContinuation<CreateDomainNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDomainNameContinuation) in
            createDomainName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a new Model resource to an existing RestApi resource.
    func createModel(input: CreateModelInput) async throws -> CreateModelOutputResponse
    {
        typealias createModelContinuation = CheckedContinuation<CreateModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createModelContinuation) in
            createModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a ReqeustValidator of a given RestApi.
    func createRequestValidator(input: CreateRequestValidatorInput) async throws -> CreateRequestValidatorOutputResponse
    {
        typealias createRequestValidatorContinuation = CheckedContinuation<CreateRequestValidatorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRequestValidatorContinuation) in
            createRequestValidator(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a Resource resource.
    func createResource(input: CreateResourceInput) async throws -> CreateResourceOutputResponse
    {
        typealias createResourceContinuation = CheckedContinuation<CreateResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createResourceContinuation) in
            createResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new RestApi resource.
    func createRestApi(input: CreateRestApiInput) async throws -> CreateRestApiOutputResponse
    {
        typealias createRestApiContinuation = CheckedContinuation<CreateRestApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRestApiContinuation) in
            createRestApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new Stage resource that references a pre-existing Deployment for the API.
    ///         <!--   Creates a Stage resource.  -->
    func createStage(input: CreateStageInput) async throws -> CreateStageOutputResponse
    {
        typealias createStageContinuation = CheckedContinuation<CreateStageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createStageContinuation) in
            createStage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a usage plan with the throttle and quota limits, as well as the associated API stages, specified in the payload.
    func createUsagePlan(input: CreateUsagePlanInput) async throws -> CreateUsagePlanOutputResponse
    {
        typealias createUsagePlanContinuation = CheckedContinuation<CreateUsagePlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUsagePlanContinuation) in
            createUsagePlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a usage plan key for adding an existing API key to a usage plan.
    func createUsagePlanKey(input: CreateUsagePlanKeyInput) async throws -> CreateUsagePlanKeyOutputResponse
    {
        typealias createUsagePlanKeyContinuation = CheckedContinuation<CreateUsagePlanKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUsagePlanKeyContinuation) in
            createUsagePlanKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a VPC link, under the caller's account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.
    func createVpcLink(input: CreateVpcLinkInput) async throws -> CreateVpcLinkOutputResponse
    {
        typealias createVpcLinkContinuation = CheckedContinuation<CreateVpcLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createVpcLinkContinuation) in
            createVpcLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the ApiKey resource.
    func deleteApiKey(input: DeleteApiKeyInput) async throws -> DeleteApiKeyOutputResponse
    {
        typealias deleteApiKeyContinuation = CheckedContinuation<DeleteApiKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteApiKeyContinuation) in
            deleteApiKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing Authorizer resource.
    ///         <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/delete-authorizer.html">AWS CLI</div>
    func deleteAuthorizer(input: DeleteAuthorizerInput) async throws -> DeleteAuthorizerOutputResponse
    {
        typealias deleteAuthorizerContinuation = CheckedContinuation<DeleteAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAuthorizerContinuation) in
            deleteAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the BasePathMapping resource.
    func deleteBasePathMapping(input: DeleteBasePathMappingInput) async throws -> DeleteBasePathMappingOutputResponse
    {
        typealias deleteBasePathMappingContinuation = CheckedContinuation<DeleteBasePathMappingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBasePathMappingContinuation) in
            deleteBasePathMapping(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the ClientCertificate resource.
    func deleteClientCertificate(input: DeleteClientCertificateInput) async throws -> DeleteClientCertificateOutputResponse
    {
        typealias deleteClientCertificateContinuation = CheckedContinuation<DeleteClientCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteClientCertificateContinuation) in
            deleteClientCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a Deployment resource. Deleting a deployment will only succeed if there are no Stage resources associated with it.
    func deleteDeployment(input: DeleteDeploymentInput) async throws -> DeleteDeploymentOutputResponse
    {
        typealias deleteDeploymentContinuation = CheckedContinuation<DeleteDeploymentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDeploymentContinuation) in
            deleteDeployment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func deleteDocumentationPart(input: DeleteDocumentationPartInput) async throws -> DeleteDocumentationPartOutputResponse
    {
        typealias deleteDocumentationPartContinuation = CheckedContinuation<DeleteDocumentationPartOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDocumentationPartContinuation) in
            deleteDocumentationPart(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func deleteDocumentationVersion(input: DeleteDocumentationVersionInput) async throws -> DeleteDocumentationVersionOutputResponse
    {
        typealias deleteDocumentationVersionContinuation = CheckedContinuation<DeleteDocumentationVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDocumentationVersionContinuation) in
            deleteDocumentationVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the DomainName resource.
    func deleteDomainName(input: DeleteDomainNameInput) async throws -> DeleteDomainNameOutputResponse
    {
        typealias deleteDomainNameContinuation = CheckedContinuation<DeleteDomainNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDomainNameContinuation) in
            deleteDomainName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Clears any customization of a GatewayResponse of a specified response type on the given RestApi and resets it with the default settings.
    func deleteGatewayResponse(input: DeleteGatewayResponseInput) async throws -> DeleteGatewayResponseOutputResponse
    {
        typealias deleteGatewayResponseContinuation = CheckedContinuation<DeleteGatewayResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteGatewayResponseContinuation) in
            deleteGatewayResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Represents a delete integration.
    func deleteIntegration(input: DeleteIntegrationInput) async throws -> DeleteIntegrationOutputResponse
    {
        typealias deleteIntegrationContinuation = CheckedContinuation<DeleteIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIntegrationContinuation) in
            deleteIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Represents a delete integration response.
    func deleteIntegrationResponse(input: DeleteIntegrationResponseInput) async throws -> DeleteIntegrationResponseOutputResponse
    {
        typealias deleteIntegrationResponseContinuation = CheckedContinuation<DeleteIntegrationResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIntegrationResponseContinuation) in
            deleteIntegrationResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing Method resource.
    func deleteMethod(input: DeleteMethodInput) async throws -> DeleteMethodOutputResponse
    {
        typealias deleteMethodContinuation = CheckedContinuation<DeleteMethodOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMethodContinuation) in
            deleteMethod(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing MethodResponse resource.
    func deleteMethodResponse(input: DeleteMethodResponseInput) async throws -> DeleteMethodResponseOutputResponse
    {
        typealias deleteMethodResponseContinuation = CheckedContinuation<DeleteMethodResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMethodResponseContinuation) in
            deleteMethodResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a model.
    func deleteModel(input: DeleteModelInput) async throws -> DeleteModelOutputResponse
    {
        typealias deleteModelContinuation = CheckedContinuation<DeleteModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteModelContinuation) in
            deleteModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a RequestValidator of a given RestApi.
    func deleteRequestValidator(input: DeleteRequestValidatorInput) async throws -> DeleteRequestValidatorOutputResponse
    {
        typealias deleteRequestValidatorContinuation = CheckedContinuation<DeleteRequestValidatorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRequestValidatorContinuation) in
            deleteRequestValidator(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a Resource resource.
    func deleteResource(input: DeleteResourceInput) async throws -> DeleteResourceOutputResponse
    {
        typealias deleteResourceContinuation = CheckedContinuation<DeleteResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteResourceContinuation) in
            deleteResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified API.
    func deleteRestApi(input: DeleteRestApiInput) async throws -> DeleteRestApiOutputResponse
    {
        typealias deleteRestApiContinuation = CheckedContinuation<DeleteRestApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRestApiContinuation) in
            deleteRestApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a Stage resource.
    func deleteStage(input: DeleteStageInput) async throws -> DeleteStageOutputResponse
    {
        typealias deleteStageContinuation = CheckedContinuation<DeleteStageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteStageContinuation) in
            deleteStage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a usage plan of a given plan Id.
    func deleteUsagePlan(input: DeleteUsagePlanInput) async throws -> DeleteUsagePlanOutputResponse
    {
        typealias deleteUsagePlanContinuation = CheckedContinuation<DeleteUsagePlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUsagePlanContinuation) in
            deleteUsagePlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a usage plan key  and remove the underlying API key from the associated usage plan.
    func deleteUsagePlanKey(input: DeleteUsagePlanKeyInput) async throws -> DeleteUsagePlanKeyOutputResponse
    {
        typealias deleteUsagePlanKeyContinuation = CheckedContinuation<DeleteUsagePlanKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUsagePlanKeyContinuation) in
            deleteUsagePlanKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing VpcLink of a specified identifier.
    func deleteVpcLink(input: DeleteVpcLinkInput) async throws -> DeleteVpcLinkOutputResponse
    {
        typealias deleteVpcLinkContinuation = CheckedContinuation<DeleteVpcLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVpcLinkContinuation) in
            deleteVpcLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Flushes all authorizer cache entries on a stage.
    func flushStageAuthorizersCache(input: FlushStageAuthorizersCacheInput) async throws -> FlushStageAuthorizersCacheOutputResponse
    {
        typealias flushStageAuthorizersCacheContinuation = CheckedContinuation<FlushStageAuthorizersCacheOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: flushStageAuthorizersCacheContinuation) in
            flushStageAuthorizersCache(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Flushes a stage's cache.
    func flushStageCache(input: FlushStageCacheInput) async throws -> FlushStageCacheOutputResponse
    {
        typealias flushStageCacheContinuation = CheckedContinuation<FlushStageCacheOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: flushStageCacheContinuation) in
            flushStageCache(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Generates a ClientCertificate resource.
    func generateClientCertificate(input: GenerateClientCertificateInput) async throws -> GenerateClientCertificateOutputResponse
    {
        typealias generateClientCertificateContinuation = CheckedContinuation<GenerateClientCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: generateClientCertificateContinuation) in
            generateClientCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the current Account resource.
    func getAccount(input: GetAccountInput) async throws -> GetAccountOutputResponse
    {
        typealias getAccountContinuation = CheckedContinuation<GetAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAccountContinuation) in
            getAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the current ApiKey resource.
    func getApiKey(input: GetApiKeyInput) async throws -> GetApiKeyOutputResponse
    {
        typealias getApiKeyContinuation = CheckedContinuation<GetApiKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApiKeyContinuation) in
            getApiKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the current ApiKeys resource.
    func getApiKeys(input: GetApiKeysInput) async throws -> GetApiKeysOutputResponse
    {
        typealias getApiKeysContinuation = CheckedContinuation<GetApiKeysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApiKeysContinuation) in
            getApiKeys(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describe an existing Authorizer resource.
    ///         <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-authorizer.html">AWS CLI</div>
    func getAuthorizer(input: GetAuthorizerInput) async throws -> GetAuthorizerOutputResponse
    {
        typealias getAuthorizerContinuation = CheckedContinuation<GetAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAuthorizerContinuation) in
            getAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describe an existing Authorizers resource.
    ///         <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-authorizers.html">AWS CLI</div>
    func getAuthorizers(input: GetAuthorizersInput) async throws -> GetAuthorizersOutputResponse
    {
        typealias getAuthorizersContinuation = CheckedContinuation<GetAuthorizersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAuthorizersContinuation) in
            getAuthorizers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describe a BasePathMapping resource.
    func getBasePathMapping(input: GetBasePathMappingInput) async throws -> GetBasePathMappingOutputResponse
    {
        typealias getBasePathMappingContinuation = CheckedContinuation<GetBasePathMappingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBasePathMappingContinuation) in
            getBasePathMapping(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Represents a collection of BasePathMapping resources.
    func getBasePathMappings(input: GetBasePathMappingsInput) async throws -> GetBasePathMappingsOutputResponse
    {
        typealias getBasePathMappingsContinuation = CheckedContinuation<GetBasePathMappingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBasePathMappingsContinuation) in
            getBasePathMappings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the current ClientCertificate resource.
    func getClientCertificate(input: GetClientCertificateInput) async throws -> GetClientCertificateOutputResponse
    {
        typealias getClientCertificateContinuation = CheckedContinuation<GetClientCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getClientCertificateContinuation) in
            getClientCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a collection of ClientCertificate resources.
    func getClientCertificates(input: GetClientCertificatesInput) async throws -> GetClientCertificatesOutputResponse
    {
        typealias getClientCertificatesContinuation = CheckedContinuation<GetClientCertificatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getClientCertificatesContinuation) in
            getClientCertificates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a Deployment resource.
    func getDeployment(input: GetDeploymentInput) async throws -> GetDeploymentOutputResponse
    {
        typealias getDeploymentContinuation = CheckedContinuation<GetDeploymentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeploymentContinuation) in
            getDeployment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a Deployments collection.
    func getDeployments(input: GetDeploymentsInput) async throws -> GetDeploymentsOutputResponse
    {
        typealias getDeploymentsContinuation = CheckedContinuation<GetDeploymentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeploymentsContinuation) in
            getDeployments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func getDocumentationPart(input: GetDocumentationPartInput) async throws -> GetDocumentationPartOutputResponse
    {
        typealias getDocumentationPartContinuation = CheckedContinuation<GetDocumentationPartOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDocumentationPartContinuation) in
            getDocumentationPart(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func getDocumentationParts(input: GetDocumentationPartsInput) async throws -> GetDocumentationPartsOutputResponse
    {
        typealias getDocumentationPartsContinuation = CheckedContinuation<GetDocumentationPartsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDocumentationPartsContinuation) in
            getDocumentationParts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func getDocumentationVersion(input: GetDocumentationVersionInput) async throws -> GetDocumentationVersionOutputResponse
    {
        typealias getDocumentationVersionContinuation = CheckedContinuation<GetDocumentationVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDocumentationVersionContinuation) in
            getDocumentationVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func getDocumentationVersions(input: GetDocumentationVersionsInput) async throws -> GetDocumentationVersionsOutputResponse
    {
        typealias getDocumentationVersionsContinuation = CheckedContinuation<GetDocumentationVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDocumentationVersionsContinuation) in
            getDocumentationVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Represents a domain name that is contained in a simpler, more intuitive URL that can be called.
    func getDomainName(input: GetDomainNameInput) async throws -> GetDomainNameOutputResponse
    {
        typealias getDomainNameContinuation = CheckedContinuation<GetDomainNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDomainNameContinuation) in
            getDomainName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Represents a collection of DomainName resources.
    func getDomainNames(input: GetDomainNamesInput) async throws -> GetDomainNamesOutputResponse
    {
        typealias getDomainNamesContinuation = CheckedContinuation<GetDomainNamesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDomainNamesContinuation) in
            getDomainNames(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Exports a deployed version of a RestApi in a specified format.
    func getExport(input: GetExportInput) async throws -> GetExportOutputResponse
    {
        typealias getExportContinuation = CheckedContinuation<GetExportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getExportContinuation) in
            getExport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a GatewayResponse of a specified response type on the given RestApi.
    func getGatewayResponse(input: GetGatewayResponseInput) async throws -> GetGatewayResponseOutputResponse
    {
        typealias getGatewayResponseContinuation = CheckedContinuation<GetGatewayResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getGatewayResponseContinuation) in
            getGatewayResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the GatewayResponses collection on the given RestApi. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default GatewayResponses collection for the supported response types.
    func getGatewayResponses(input: GetGatewayResponsesInput) async throws -> GetGatewayResponsesOutputResponse
    {
        typealias getGatewayResponsesContinuation = CheckedContinuation<GetGatewayResponsesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getGatewayResponsesContinuation) in
            getGatewayResponses(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get the integration settings.
    func getIntegration(input: GetIntegrationInput) async throws -> GetIntegrationOutputResponse
    {
        typealias getIntegrationContinuation = CheckedContinuation<GetIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIntegrationContinuation) in
            getIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Represents a get integration response.
    func getIntegrationResponse(input: GetIntegrationResponseInput) async throws -> GetIntegrationResponseOutputResponse
    {
        typealias getIntegrationResponseContinuation = CheckedContinuation<GetIntegrationResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIntegrationResponseContinuation) in
            getIntegrationResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describe an existing Method resource.
    func getMethod(input: GetMethodInput) async throws -> GetMethodOutputResponse
    {
        typealias getMethodContinuation = CheckedContinuation<GetMethodOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMethodContinuation) in
            getMethod(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a MethodResponse resource.
    func getMethodResponse(input: GetMethodResponseInput) async throws -> GetMethodResponseOutputResponse
    {
        typealias getMethodResponseContinuation = CheckedContinuation<GetMethodResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMethodResponseContinuation) in
            getMethodResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an existing model defined for a RestApi resource.
    func getModel(input: GetModelInput) async throws -> GetModelOutputResponse
    {
        typealias getModelContinuation = CheckedContinuation<GetModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getModelContinuation) in
            getModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Generates a sample mapping template that can be used to transform a payload into the structure of a model.
    func getModelTemplate(input: GetModelTemplateInput) async throws -> GetModelTemplateOutputResponse
    {
        typealias getModelTemplateContinuation = CheckedContinuation<GetModelTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getModelTemplateContinuation) in
            getModelTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes existing Models defined for a RestApi resource.
    func getModels(input: GetModelsInput) async throws -> GetModelsOutputResponse
    {
        typealias getModelsContinuation = CheckedContinuation<GetModelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getModelsContinuation) in
            getModels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a RequestValidator of a given RestApi.
    func getRequestValidator(input: GetRequestValidatorInput) async throws -> GetRequestValidatorOutputResponse
    {
        typealias getRequestValidatorContinuation = CheckedContinuation<GetRequestValidatorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRequestValidatorContinuation) in
            getRequestValidator(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the RequestValidators collection of a given RestApi.
    func getRequestValidators(input: GetRequestValidatorsInput) async throws -> GetRequestValidatorsOutputResponse
    {
        typealias getRequestValidatorsContinuation = CheckedContinuation<GetRequestValidatorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRequestValidatorsContinuation) in
            getRequestValidators(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists information about a resource.
    func getResource(input: GetResourceInput) async throws -> GetResourceOutputResponse
    {
        typealias getResourceContinuation = CheckedContinuation<GetResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getResourceContinuation) in
            getResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists information about a collection of Resource resources.
    func getResources(input: GetResourcesInput) async throws -> GetResourcesOutputResponse
    {
        typealias getResourcesContinuation = CheckedContinuation<GetResourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getResourcesContinuation) in
            getResources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the RestApi resource in the collection.
    func getRestApi(input: GetRestApiInput) async throws -> GetRestApiOutputResponse
    {
        typealias getRestApiContinuation = CheckedContinuation<GetRestApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRestApiContinuation) in
            getRestApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the RestApis resources for your collection.
    func getRestApis(input: GetRestApisInput) async throws -> GetRestApisOutputResponse
    {
        typealias getRestApisContinuation = CheckedContinuation<GetRestApisOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRestApisContinuation) in
            getRestApis(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Generates a client SDK for a RestApi and Stage.
    func getSdk(input: GetSdkInput) async throws -> GetSdkOutputResponse
    {
        typealias getSdkContinuation = CheckedContinuation<GetSdkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSdkContinuation) in
            getSdk(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func getSdkType(input: GetSdkTypeInput) async throws -> GetSdkTypeOutputResponse
    {
        typealias getSdkTypeContinuation = CheckedContinuation<GetSdkTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSdkTypeContinuation) in
            getSdkType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func getSdkTypes(input: GetSdkTypesInput) async throws -> GetSdkTypesOutputResponse
    {
        typealias getSdkTypesContinuation = CheckedContinuation<GetSdkTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSdkTypesContinuation) in
            getSdkTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a Stage resource.
    func getStage(input: GetStageInput) async throws -> GetStageOutputResponse
    {
        typealias getStageContinuation = CheckedContinuation<GetStageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getStageContinuation) in
            getStage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about one or more Stage resources.
    func getStages(input: GetStagesInput) async throws -> GetStagesOutputResponse
    {
        typealias getStagesContinuation = CheckedContinuation<GetStagesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getStagesContinuation) in
            getStages(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the Tags collection for a given resource.
    func getTags(input: GetTagsInput) async throws -> GetTagsOutputResponse
    {
        typealias getTagsContinuation = CheckedContinuation<GetTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTagsContinuation) in
            getTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the usage data of a usage plan in a specified time interval.
    func getUsage(input: GetUsageInput) async throws -> GetUsageOutputResponse
    {
        typealias getUsageContinuation = CheckedContinuation<GetUsageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUsageContinuation) in
            getUsage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a usage plan of a given plan identifier.
    func getUsagePlan(input: GetUsagePlanInput) async throws -> GetUsagePlanOutputResponse
    {
        typealias getUsagePlanContinuation = CheckedContinuation<GetUsagePlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUsagePlanContinuation) in
            getUsagePlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a usage plan key of a given key identifier.
    func getUsagePlanKey(input: GetUsagePlanKeyInput) async throws -> GetUsagePlanKeyOutputResponse
    {
        typealias getUsagePlanKeyContinuation = CheckedContinuation<GetUsagePlanKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUsagePlanKeyContinuation) in
            getUsagePlanKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets all the usage plan keys representing the API keys added to a specified usage plan.
    func getUsagePlanKeys(input: GetUsagePlanKeysInput) async throws -> GetUsagePlanKeysOutputResponse
    {
        typealias getUsagePlanKeysContinuation = CheckedContinuation<GetUsagePlanKeysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUsagePlanKeysContinuation) in
            getUsagePlanKeys(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets all the usage plans of the caller's account.
    func getUsagePlans(input: GetUsagePlansInput) async throws -> GetUsagePlansOutputResponse
    {
        typealias getUsagePlansContinuation = CheckedContinuation<GetUsagePlansOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUsagePlansContinuation) in
            getUsagePlans(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a specified VPC link under the caller's account in a region.
    func getVpcLink(input: GetVpcLinkInput) async throws -> GetVpcLinkOutputResponse
    {
        typealias getVpcLinkContinuation = CheckedContinuation<GetVpcLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVpcLinkContinuation) in
            getVpcLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the VpcLinks collection under the caller's account in a selected region.
    func getVpcLinks(input: GetVpcLinksInput) async throws -> GetVpcLinksOutputResponse
    {
        typealias getVpcLinksContinuation = CheckedContinuation<GetVpcLinksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVpcLinksContinuation) in
            getVpcLinks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Import API keys from an external source, such as a CSV-formatted file.
    func importApiKeys(input: ImportApiKeysInput) async throws -> ImportApiKeysOutputResponse
    {
        typealias importApiKeysContinuation = CheckedContinuation<ImportApiKeysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importApiKeysContinuation) in
            importApiKeys(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func importDocumentationParts(input: ImportDocumentationPartsInput) async throws -> ImportDocumentationPartsOutputResponse
    {
        typealias importDocumentationPartsContinuation = CheckedContinuation<ImportDocumentationPartsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importDocumentationPartsContinuation) in
            importDocumentationParts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// A feature of the API Gateway control service for creating a new API from an external API definition file.
    func importRestApi(input: ImportRestApiInput) async throws -> ImportRestApiOutputResponse
    {
        typealias importRestApiContinuation = CheckedContinuation<ImportRestApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importRestApiContinuation) in
            importRestApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a customization of a GatewayResponse of a specified response type and status code on the given RestApi.
    func putGatewayResponse(input: PutGatewayResponseInput) async throws -> PutGatewayResponseOutputResponse
    {
        typealias putGatewayResponseContinuation = CheckedContinuation<PutGatewayResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putGatewayResponseContinuation) in
            putGatewayResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets up a method's integration.
    func putIntegration(input: PutIntegrationInput) async throws -> PutIntegrationOutputResponse
    {
        typealias putIntegrationContinuation = CheckedContinuation<PutIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putIntegrationContinuation) in
            putIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Represents a put integration.
    func putIntegrationResponse(input: PutIntegrationResponseInput) async throws -> PutIntegrationResponseOutputResponse
    {
        typealias putIntegrationResponseContinuation = CheckedContinuation<PutIntegrationResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putIntegrationResponseContinuation) in
            putIntegrationResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Add a method to an existing Resource resource.
    func putMethod(input: PutMethodInput) async throws -> PutMethodOutputResponse
    {
        typealias putMethodContinuation = CheckedContinuation<PutMethodOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putMethodContinuation) in
            putMethod(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a MethodResponse to an existing Method resource.
    func putMethodResponse(input: PutMethodResponseInput) async throws -> PutMethodResponseOutputResponse
    {
        typealias putMethodResponseContinuation = CheckedContinuation<PutMethodResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putMethodResponseContinuation) in
            putMethodResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// A feature of the API Gateway control service for updating an existing API with an input of external API definitions.
    ///             The update can take the form of merging the supplied definition into the existing API or overwriting the existing API.
    func putRestApi(input: PutRestApiInput) async throws -> PutRestApiOutputResponse
    {
        typealias putRestApiContinuation = CheckedContinuation<PutRestApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putRestApiContinuation) in
            putRestApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds or updates a tag on a given resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Simulate the execution of an Authorizer in your RestApi with headers, parameters, and an incoming request body.
    ///       <div class="seeAlso">
    ///         <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html">Use Lambda Function as Authorizer
    ///         <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html">Use Cognito User Pool as Authorizer
    ///       </div>
    func testInvokeAuthorizer(input: TestInvokeAuthorizerInput) async throws -> TestInvokeAuthorizerOutputResponse
    {
        typealias testInvokeAuthorizerContinuation = CheckedContinuation<TestInvokeAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testInvokeAuthorizerContinuation) in
            testInvokeAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Simulate the execution of a Method in your RestApi with headers, parameters, and an incoming request body.
    func testInvokeMethod(input: TestInvokeMethodInput) async throws -> TestInvokeMethodOutputResponse
    {
        typealias testInvokeMethodContinuation = CheckedContinuation<TestInvokeMethodOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testInvokeMethodContinuation) in
            testInvokeMethod(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a tag from a given resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes information about the current Account resource.
    func updateAccount(input: UpdateAccountInput) async throws -> UpdateAccountOutputResponse
    {
        typealias updateAccountContinuation = CheckedContinuation<UpdateAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAccountContinuation) in
            updateAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes information about an ApiKey resource.
    func updateApiKey(input: UpdateApiKeyInput) async throws -> UpdateApiKeyOutputResponse
    {
        typealias updateApiKeyContinuation = CheckedContinuation<UpdateApiKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApiKeyContinuation) in
            updateApiKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing Authorizer resource.
    ///         <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/update-authorizer.html">AWS CLI</div>
    func updateAuthorizer(input: UpdateAuthorizerInput) async throws -> UpdateAuthorizerOutputResponse
    {
        typealias updateAuthorizerContinuation = CheckedContinuation<UpdateAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAuthorizerContinuation) in
            updateAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes information about the BasePathMapping resource.
    func updateBasePathMapping(input: UpdateBasePathMappingInput) async throws -> UpdateBasePathMappingOutputResponse
    {
        typealias updateBasePathMappingContinuation = CheckedContinuation<UpdateBasePathMappingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBasePathMappingContinuation) in
            updateBasePathMapping(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes information about an ClientCertificate resource.
    func updateClientCertificate(input: UpdateClientCertificateInput) async throws -> UpdateClientCertificateOutputResponse
    {
        typealias updateClientCertificateContinuation = CheckedContinuation<UpdateClientCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateClientCertificateContinuation) in
            updateClientCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes information about a Deployment resource.
    func updateDeployment(input: UpdateDeploymentInput) async throws -> UpdateDeploymentOutputResponse
    {
        typealias updateDeploymentContinuation = CheckedContinuation<UpdateDeploymentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDeploymentContinuation) in
            updateDeployment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func updateDocumentationPart(input: UpdateDocumentationPartInput) async throws -> UpdateDocumentationPartOutputResponse
    {
        typealias updateDocumentationPartContinuation = CheckedContinuation<UpdateDocumentationPartOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDocumentationPartContinuation) in
            updateDocumentationPart(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func updateDocumentationVersion(input: UpdateDocumentationVersionInput) async throws -> UpdateDocumentationVersionOutputResponse
    {
        typealias updateDocumentationVersionContinuation = CheckedContinuation<UpdateDocumentationVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDocumentationVersionContinuation) in
            updateDocumentationVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes information about the DomainName resource.
    func updateDomainName(input: UpdateDomainNameInput) async throws -> UpdateDomainNameOutputResponse
    {
        typealias updateDomainNameContinuation = CheckedContinuation<UpdateDomainNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDomainNameContinuation) in
            updateDomainName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a GatewayResponse of a specified response type on the given RestApi.
    func updateGatewayResponse(input: UpdateGatewayResponseInput) async throws -> UpdateGatewayResponseOutputResponse
    {
        typealias updateGatewayResponseContinuation = CheckedContinuation<UpdateGatewayResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGatewayResponseContinuation) in
            updateGatewayResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Represents an update integration.
    func updateIntegration(input: UpdateIntegrationInput) async throws -> UpdateIntegrationOutputResponse
    {
        typealias updateIntegrationContinuation = CheckedContinuation<UpdateIntegrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateIntegrationContinuation) in
            updateIntegration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Represents an update integration response.
    func updateIntegrationResponse(input: UpdateIntegrationResponseInput) async throws -> UpdateIntegrationResponseOutputResponse
    {
        typealias updateIntegrationResponseContinuation = CheckedContinuation<UpdateIntegrationResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateIntegrationResponseContinuation) in
            updateIntegrationResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing Method resource.
    func updateMethod(input: UpdateMethodInput) async throws -> UpdateMethodOutputResponse
    {
        typealias updateMethodContinuation = CheckedContinuation<UpdateMethodOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMethodContinuation) in
            updateMethod(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing MethodResponse resource.
    func updateMethodResponse(input: UpdateMethodResponseInput) async throws -> UpdateMethodResponseOutputResponse
    {
        typealias updateMethodResponseContinuation = CheckedContinuation<UpdateMethodResponseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMethodResponseContinuation) in
            updateMethodResponse(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes information about a model.
    func updateModel(input: UpdateModelInput) async throws -> UpdateModelOutputResponse
    {
        typealias updateModelContinuation = CheckedContinuation<UpdateModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateModelContinuation) in
            updateModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a RequestValidator of a given RestApi.
    func updateRequestValidator(input: UpdateRequestValidatorInput) async throws -> UpdateRequestValidatorOutputResponse
    {
        typealias updateRequestValidatorContinuation = CheckedContinuation<UpdateRequestValidatorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRequestValidatorContinuation) in
            updateRequestValidator(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes information about a Resource resource.
    func updateResource(input: UpdateResourceInput) async throws -> UpdateResourceOutputResponse
    {
        typealias updateResourceContinuation = CheckedContinuation<UpdateResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateResourceContinuation) in
            updateResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes information about the specified API.
    func updateRestApi(input: UpdateRestApiInput) async throws -> UpdateRestApiOutputResponse
    {
        typealias updateRestApiContinuation = CheckedContinuation<UpdateRestApiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRestApiContinuation) in
            updateRestApi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes information about a Stage resource.
    func updateStage(input: UpdateStageInput) async throws -> UpdateStageOutputResponse
    {
        typealias updateStageContinuation = CheckedContinuation<UpdateStageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateStageContinuation) in
            updateStage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Grants a temporary extension to the remaining quota of a usage plan associated with a specified API key.
    func updateUsage(input: UpdateUsageInput) async throws -> UpdateUsageOutputResponse
    {
        typealias updateUsageContinuation = CheckedContinuation<UpdateUsageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUsageContinuation) in
            updateUsage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a usage plan of a given plan Id.
    func updateUsagePlan(input: UpdateUsagePlanInput) async throws -> UpdateUsagePlanOutputResponse
    {
        typealias updateUsagePlanContinuation = CheckedContinuation<UpdateUsagePlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUsagePlanContinuation) in
            updateUsagePlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing VpcLink of a specified identifier.
    func updateVpcLink(input: UpdateVpcLinkInput) async throws -> UpdateVpcLinkOutputResponse
    {
        typealias updateVpcLinkContinuation = CheckedContinuation<UpdateVpcLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateVpcLinkContinuation) in
            updateVpcLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
