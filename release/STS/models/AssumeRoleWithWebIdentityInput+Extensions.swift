// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct AssumeRoleWithWebIdentityInputHeadersMiddleware: Middleware {
    public let id: String = "AssumeRoleWithWebIdentityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssumeRoleWithWebIdentityInput>,
                  next: H) -> Swift.Result<OperationOutput<AssumeRoleWithWebIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssumeRoleWithWebIdentityInput>
    public typealias MOutput = OperationOutput<AssumeRoleWithWebIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssumeRoleWithWebIdentityOutputError>
}

public struct AssumeRoleWithWebIdentityInputQueryItemMiddleware: Middleware {
    public let id: String = "AssumeRoleWithWebIdentityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssumeRoleWithWebIdentityInput>,
                  next: H) -> Swift.Result<OperationOutput<AssumeRoleWithWebIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssumeRoleWithWebIdentityInput>
    public typealias MOutput = OperationOutput<AssumeRoleWithWebIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssumeRoleWithWebIdentityOutputError>
}

public struct AssumeRoleWithWebIdentityInputBodyMiddleware: Middleware {
    public let id: String = "AssumeRoleWithWebIdentityInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssumeRoleWithWebIdentityInput>,
                  next: H) -> Swift.Result<OperationOutput<AssumeRoleWithWebIdentityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssumeRoleWithWebIdentityInput>
    public typealias MOutput = OperationOutput<AssumeRoleWithWebIdentityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssumeRoleWithWebIdentityOutputError>
}

extension AssumeRoleWithWebIdentityInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let durationSeconds = durationSeconds {
            try container.encode(durationSeconds, forKey: Key("DurationSeconds"))
        }
        if let policy = policy {
            try container.encode(policy, forKey: Key("Policy"))
        }
        if let policyArns = policyArns {
            var policyArnsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PolicyArns"))
            for (index0, policydescriptortype0) in policyArns.enumerated() {
                try policyArnsContainer.encode(policydescriptortype0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let providerId = providerId {
            try container.encode(providerId, forKey: Key("ProviderId"))
        }
        if let roleArn = roleArn {
            try container.encode(roleArn, forKey: Key("RoleArn"))
        }
        if let roleSessionName = roleSessionName {
            try container.encode(roleSessionName, forKey: Key("RoleSessionName"))
        }
        if let webIdentityToken = webIdentityToken {
            try container.encode(webIdentityToken, forKey: Key("WebIdentityToken"))
        }
        try container.encode("AssumeRoleWithWebIdentity", forKey:Key("Action"))
        try container.encode("2011-06-15", forKey:Key("Version"))
    }
}
