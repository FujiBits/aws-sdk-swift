// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ChimeClient {
    /// Associates a phone number with the specified Amazon Chime user.
    func associatePhoneNumberWithUser(input: AssociatePhoneNumberWithUserInput) async throws -> AssociatePhoneNumberWithUserOutputResponse
    {
        typealias associatePhoneNumberWithUserContinuation = CheckedContinuation<AssociatePhoneNumberWithUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associatePhoneNumberWithUserContinuation) in
            associatePhoneNumberWithUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates phone numbers with the specified Amazon Chime Voice Connector.
    func associatePhoneNumbersWithVoiceConnector(input: AssociatePhoneNumbersWithVoiceConnectorInput) async throws -> AssociatePhoneNumbersWithVoiceConnectorOutputResponse
    {
        typealias associatePhoneNumbersWithVoiceConnectorContinuation = CheckedContinuation<AssociatePhoneNumbersWithVoiceConnectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associatePhoneNumbersWithVoiceConnectorContinuation) in
            associatePhoneNumbersWithVoiceConnector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates phone numbers with the specified Amazon Chime Voice Connector group.
    func associatePhoneNumbersWithVoiceConnectorGroup(input: AssociatePhoneNumbersWithVoiceConnectorGroupInput) async throws -> AssociatePhoneNumbersWithVoiceConnectorGroupOutputResponse
    {
        typealias associatePhoneNumbersWithVoiceConnectorGroupContinuation = CheckedContinuation<AssociatePhoneNumbersWithVoiceConnectorGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associatePhoneNumbersWithVoiceConnectorGroupContinuation) in
            associatePhoneNumbersWithVoiceConnectorGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates the specified sign-in delegate groups with the specified Amazon Chime account.
    func associateSigninDelegateGroupsWithAccount(input: AssociateSigninDelegateGroupsWithAccountInput) async throws -> AssociateSigninDelegateGroupsWithAccountOutputResponse
    {
        typealias associateSigninDelegateGroupsWithAccountContinuation = CheckedContinuation<AssociateSigninDelegateGroupsWithAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateSigninDelegateGroupsWithAccountContinuation) in
            associateSigninDelegateGroupsWithAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    /// Creates up to 100 new attendees for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK
    /// in the
    /// Amazon Chime Developer Guide.
    ///
    func batchCreateAttendee(input: BatchCreateAttendeeInput) async throws -> BatchCreateAttendeeOutputResponse
    {
        typealias batchCreateAttendeeContinuation = CheckedContinuation<BatchCreateAttendeeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchCreateAttendeeContinuation) in
            batchCreateAttendee(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a specified number of users to a channel.
    func batchCreateChannelMembership(input: BatchCreateChannelMembershipInput) async throws -> BatchCreateChannelMembershipOutputResponse
    {
        typealias batchCreateChannelMembershipContinuation = CheckedContinuation<BatchCreateChannelMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchCreateChannelMembershipContinuation) in
            batchCreateChannelMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be users or bots. The member role designates whether the member is a chat room administrator or a general chat room member.
    func batchCreateRoomMembership(input: BatchCreateRoomMembershipInput) async throws -> BatchCreateRoomMembershipOutputResponse
    {
        typealias batchCreateRoomMembershipContinuation = CheckedContinuation<BatchCreateRoomMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchCreateRoomMembershipContinuation) in
            batchCreateRoomMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    /// Moves phone numbers into the
    /// Deletion queue. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted.
    ///
    ///
    ///
    /// Phone numbers remain in the
    /// Deletion queue for 7 days before they are deleted permanently.
    ///
    func batchDeletePhoneNumber(input: BatchDeletePhoneNumberInput) async throws -> BatchDeletePhoneNumberOutputResponse
    {
        typealias batchDeletePhoneNumberContinuation = CheckedContinuation<BatchDeletePhoneNumberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDeletePhoneNumberContinuation) in
            batchDeletePhoneNumber(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Suspends up to 50 users from a Team or EnterpriseLWA Amazon Chime
    ///             account. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts in the Amazon Chime Administration
    ///                 Guide.
    ///
    ///          Users suspended from a Team account are disassociated from the account,but they
    ///             can continue to use Amazon Chime as free users. To remove the suspension from suspended
    ///                 Team account users, invite them to the Team account again.
    ///             You can use the InviteUsers action to do so.
    ///
    ///          Users suspended from an EnterpriseLWA account are immediately signed out of
    ///             Amazon Chime and can no longer sign in. To remove the suspension from suspended EnterpriseLWA account users, use the BatchUnsuspendUser action.
    ///
    ///
    /// To sign out users without suspending them, use the
    /// LogoutUser
    /// action.
    ///
    func batchSuspendUser(input: BatchSuspendUserInput) async throws -> BatchSuspendUserOutputResponse
    {
        typealias batchSuspendUserContinuation = CheckedContinuation<BatchSuspendUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchSuspendUserContinuation) in
            batchSuspendUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the suspension from up to 50 previously suspended users for the specified Amazon
    ///             Chime EnterpriseLWA account. Only users on EnterpriseLWA
    ///             accounts can be unsuspended using this action. For more information about different account types, see
    ///     <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">
    ///         Managing Your Amazon Chime Accounts
    ///      in the account types, in the Amazon Chime Administration Guide.
    ///
    ///
    ///
    /// Previously suspended users who are unsuspended using this action are returned to
    /// Registered
    /// status. Users who are not previously suspended are ignored.
    ///
    func batchUnsuspendUser(input: BatchUnsuspendUserInput) async throws -> BatchUnsuspendUserOutputResponse
    {
        typealias batchUnsuspendUserContinuation = CheckedContinuation<BatchUnsuspendUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchUnsuspendUserContinuation) in
            batchUnsuspendUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates phone number product types or calling names. You can update one attribute at a time for each UpdatePhoneNumberRequestItem. For example, you can update the product type or the calling name.
    ///          For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.
    ///          Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.
    func batchUpdatePhoneNumber(input: BatchUpdatePhoneNumberInput) async throws -> BatchUpdatePhoneNumberOutputResponse
    {
        typealias batchUpdatePhoneNumberContinuation = CheckedContinuation<BatchUpdatePhoneNumberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchUpdatePhoneNumberContinuation) in
            batchUpdatePhoneNumber(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates user details within the UpdateUserRequestItem object for up to 20 users for the specified Amazon Chime account. Currently, only LicenseType updates are supported for this action.
    func batchUpdateUser(input: BatchUpdateUserInput) async throws -> BatchUpdateUserOutputResponse
    {
        typealias batchUpdateUserContinuation = CheckedContinuation<BatchUpdateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchUpdateUserContinuation) in
            batchUpdateUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an Amazon Chime account under the administrator's AWS account. Only Team
    ///             account types are currently supported for this action. For more information about different account types, see
    ///     <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts in the Amazon Chime Administration Guide.
    func createAccount(input: CreateAccountInput) async throws -> CreateAccountOutputResponse
    {
        typealias createAccountContinuation = CheckedContinuation<CreateAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAccountContinuation) in
            createAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an Amazon Chime SDK messaging AppInstance under an AWS account. Only SDK messaging customers use this API.
    /// CreateAppInstance supports idempotency behavior as described in the AWS API Standard.
    func createAppInstance(input: CreateAppInstanceInput) async throws -> CreateAppInstanceOutputResponse
    {
        typealias createAppInstanceContinuation = CheckedContinuation<CreateAppInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAppInstanceContinuation) in
            createAppInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Promotes an AppInstanceUser to an AppInstanceAdmin. The promoted user can perform the following actions.
    ///
    ///
    ///
    ///
    ///
    ///                   ChannelModerator actions across all channels in the AppInstance.
    ///
    ///
    ///
    ///                   DeleteChannelMessage actions.
    ///
    ///
    ///
    ///          Only an AppInstanceUser can be promoted to an AppInstanceAdmin role.
    func createAppInstanceAdmin(input: CreateAppInstanceAdminInput) async throws -> CreateAppInstanceAdminOutputResponse
    {
        typealias createAppInstanceAdminContinuation = CheckedContinuation<CreateAppInstanceAdminOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAppInstanceAdminContinuation) in
            createAppInstanceAdmin(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a user under an Amazon Chime AppInstance. The request consists of a unique appInstanceUserId and
    /// Name for that user.
    func createAppInstanceUser(input: CreateAppInstanceUserInput) async throws -> CreateAppInstanceUserOutputResponse
    {
        typealias createAppInstanceUserContinuation = CheckedContinuation<CreateAppInstanceUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAppInstanceUserContinuation) in
            createAppInstanceUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    /// Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK
    /// in the
    /// Amazon Chime Developer Guide.
    ///
    func createAttendee(input: CreateAttendeeInput) async throws -> CreateAttendeeOutputResponse
    {
        typealias createAttendeeContinuation = CheckedContinuation<CreateAttendeeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAttendeeContinuation) in
            createAttendee(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a bot for an Amazon Chime Enterprise account.
    func createBot(input: CreateBotInput) async throws -> CreateBotOutputResponse
    {
        typealias createBotContinuation = CheckedContinuation<CreateBotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBotContinuation) in
            createBot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a channel to which you can add users and send messages.
    ///
    ///
    ///             Restriction: You can't change a channel's
    ///          privacy.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func createChannel(input: CreateChannelInput) async throws -> CreateChannelOutputResponse
    {
        typealias createChannelContinuation = CheckedContinuation<CreateChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createChannelContinuation) in
            createChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Permanently bans a member from a channel. Moderators can't add banned members to a
    ///          channel. To undo a ban, you first have to DeleteChannelBan, and then
    ///             CreateChannelMembership. Bans are cleaned up when you delete users or
    ///          channels.
    ///          If you ban a user who is already part of a channel, that user is automatically kicked
    ///          from the channel.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func createChannelBan(input: CreateChannelBanInput) async throws -> CreateChannelBanOutputResponse
    {
        typealias createChannelBanContinuation = CheckedContinuation<CreateChannelBanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createChannelBanContinuation) in
            createChannelBan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a user to a channel. The InvitedBy response field is derived from the
    ///          request header. A channel member can:
    ///
    ///
    ///
    ///                List messages
    ///
    ///
    ///                Send messages
    ///
    ///
    ///                Receive messages
    ///
    ///
    ///                Edit their own messages
    ///
    ///
    ///                Leave the channel
    ///
    ///
    ///
    ///          Privacy settings impact this action as follows:
    ///
    ///
    ///
    ///                Public Channels: You do not need to be a member to list messages, but you must be
    ///                a member to send messages.
    ///
    ///
    ///                Private Channels: You must be a member to list or send messages.
    ///
    ///
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func createChannelMembership(input: CreateChannelMembershipInput) async throws -> CreateChannelMembershipOutputResponse
    {
        typealias createChannelMembershipContinuation = CheckedContinuation<CreateChannelMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createChannelMembershipContinuation) in
            createChannelMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new ChannelModerator. A channel moderator can:
    ///
    ///
    ///
    ///                Add and remove other members of the channel.
    ///
    ///
    ///                Add and remove other moderators of the channel.
    ///
    ///
    ///                Add and remove user bans for the channel.
    ///
    ///
    ///                Redact messages in the channel.
    ///
    ///
    ///                List messages in the channel.
    ///
    ///
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func createChannelModerator(input: CreateChannelModeratorInput) async throws -> CreateChannelModeratorOutputResponse
    {
        typealias createChannelModeratorContinuation = CheckedContinuation<CreateChannelModeratorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createChannelModeratorContinuation) in
            createChannelModerator(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a media capture pipeline.
    func createMediaCapturePipeline(input: CreateMediaCapturePipelineInput) async throws -> CreateMediaCapturePipelineOutputResponse
    {
        typealias createMediaCapturePipelineContinuation = CheckedContinuation<CreateMediaCapturePipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMediaCapturePipelineContinuation) in
            createMediaCapturePipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    /// Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about specifying media Regions, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/chime-sdk-meetings-regions.html">Amazon Chime SDK Media Regions
    /// in the
    /// Amazon Chime Developer Guide
    /// . For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK
    /// in the
    /// Amazon Chime Developer Guide
    /// .
    ///
    func createMeeting(input: CreateMeetingInput) async throws -> CreateMeetingOutputResponse
    {
        typealias createMeetingContinuation = CheckedContinuation<CreateMeetingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMeetingContinuation) in
            createMeeting(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Uses the join token and call metadata in a meeting request (From number, To number, and so forth) to initiate an outbound call to a public
    ///     switched telephone network (PSTN) and join them into a Chime meeting. Also ensures that the From number belongs to the customer.
    ///
    ///          To play welcome audio or implement an interactive voice response (IVR), use the
    /// CreateSipMediaApplicationCall action with the corresponding SIP media application ID.
    func createMeetingDialOut(input: CreateMeetingDialOutInput) async throws -> CreateMeetingDialOutOutputResponse
    {
        typealias createMeetingDialOutContinuation = CheckedContinuation<CreateMeetingDialOutOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMeetingDialOutContinuation) in
            createMeetingDialOut(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    /// Creates a new Amazon Chime SDK meeting in the specified media Region, with attendees. For more information about specifying media Regions, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/chime-sdk-meetings-regions.html">Amazon Chime SDK Media Regions
    /// in the
    /// Amazon Chime Developer Guide
    /// . For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK
    /// in the
    /// Amazon Chime Developer Guide
    /// .
    ///
    func createMeetingWithAttendees(input: CreateMeetingWithAttendeesInput) async throws -> CreateMeetingWithAttendeesOutputResponse
    {
        typealias createMeetingWithAttendeesContinuation = CheckedContinuation<CreateMeetingWithAttendeesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMeetingWithAttendeesContinuation) in
            createMeetingWithAttendees(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an order for phone numbers to be provisioned. For toll-free numbers, you cannot use the Amazon Chime Business Calling product type.
    ///         For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.
    func createPhoneNumberOrder(input: CreatePhoneNumberOrderInput) async throws -> CreatePhoneNumberOrderOutputResponse
    {
        typealias createPhoneNumberOrderContinuation = CheckedContinuation<CreatePhoneNumberOrderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPhoneNumberOrderContinuation) in
            createPhoneNumberOrder(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a proxy session on the specified Amazon Chime Voice Connector for the specified participant phone numbers.
    func createProxySession(input: CreateProxySessionInput) async throws -> CreateProxySessionOutputResponse
    {
        typealias createProxySessionContinuation = CheckedContinuation<CreateProxySessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProxySessionContinuation) in
            createProxySession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a chat room for the specified Amazon Chime Enterprise account.
    func createRoom(input: CreateRoomInput) async throws -> CreateRoomOutputResponse
    {
        typealias createRoomContinuation = CheckedContinuation<CreateRoomOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRoomContinuation) in
            createRoom(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member.
    func createRoomMembership(input: CreateRoomMembershipInput) async throws -> CreateRoomMembershipOutputResponse
    {
        typealias createRoomMembershipContinuation = CheckedContinuation<CreateRoomMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRoomMembershipContinuation) in
            createRoomMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a SIP media application.
    func createSipMediaApplication(input: CreateSipMediaApplicationInput) async throws -> CreateSipMediaApplicationOutputResponse
    {
        typealias createSipMediaApplicationContinuation = CheckedContinuation<CreateSipMediaApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSipMediaApplicationContinuation) in
            createSipMediaApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an outbound call to a phone number from the phone number specified in the request, and it invokes the endpoint of the specified
    /// sipMediaApplicationId.
    func createSipMediaApplicationCall(input: CreateSipMediaApplicationCallInput) async throws -> CreateSipMediaApplicationCallOutputResponse
    {
        typealias createSipMediaApplicationCallContinuation = CheckedContinuation<CreateSipMediaApplicationCallOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSipMediaApplicationCallContinuation) in
            createSipMediaApplicationCall(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a SIP rule which can be used to run a SIP media application as a target for a specific trigger type.
    func createSipRule(input: CreateSipRuleInput) async throws -> CreateSipRuleOutputResponse
    {
        typealias createSipRuleContinuation = CheckedContinuation<CreateSipRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSipRuleContinuation) in
            createSipRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a user under the specified Amazon Chime account.
    func createUser(input: CreateUserInput) async throws -> CreateUserOutputResponse
    {
        typealias createUserContinuation = CheckedContinuation<CreateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserContinuation) in
            createUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an Amazon Chime Voice Connector under the administrator's AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region.
    ///
    ///
    /// Enabling
    /// CreateVoiceConnectorRequest$RequireEncryption
    /// configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked.
    ///
    func createVoiceConnector(input: CreateVoiceConnectorInput) async throws -> CreateVoiceConnectorOutputResponse
    {
        typealias createVoiceConnectorContinuation = CheckedContinuation<CreateVoiceConnectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createVoiceConnectorContinuation) in
            createVoiceConnector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an Amazon Chime Voice Connector group under the administrator's AWS account. You can
    ///             associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by
    ///             including VoiceConnectorItems in the request.
    ///          You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This
    ///             creates a fault tolerant mechanism for fallback in case of availability events.
    func createVoiceConnectorGroup(input: CreateVoiceConnectorGroupInput) async throws -> CreateVoiceConnectorGroupOutputResponse
    {
        typealias createVoiceConnectorGroupContinuation = CheckedContinuation<CreateVoiceConnectorGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createVoiceConnectorGroupContinuation) in
            createVoiceConnectorGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified Amazon Chime account. You must suspend all users before deleting
    ///                 Team account. You can use the BatchSuspendUser action
    ///             to dodo.
    ///
    ///          For EnterpriseLWA and EnterpriseAD accounts, you must release the
    ///             claimed domains for your Amazon Chime account before deletion. As soon as you release
    ///             the domain, all users under that account are suspended.
    ///
    ///          Deleted accounts appear in your Disabled accounts list for 90 days. To restore
    ///             deleted account from your Disabled accounts list, you must contact AWS
    ///             Support.
    ///
    ///          After 90 days, deleted accounts are permanently removed from your
    /// Disabled accounts list.
    func deleteAccount(input: DeleteAccountInput) async throws -> DeleteAccountOutputResponse
    {
        typealias deleteAccountContinuation = CheckedContinuation<DeleteAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAccountContinuation) in
            deleteAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an AppInstance and all associated data asynchronously.
    func deleteAppInstance(input: DeleteAppInstanceInput) async throws -> DeleteAppInstanceOutputResponse
    {
        typealias deleteAppInstanceContinuation = CheckedContinuation<DeleteAppInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAppInstanceContinuation) in
            deleteAppInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Demotes an AppInstanceAdmin to an AppInstanceUser. This action does not delete the user.
    func deleteAppInstanceAdmin(input: DeleteAppInstanceAdminInput) async throws -> DeleteAppInstanceAdminOutputResponse
    {
        typealias deleteAppInstanceAdminContinuation = CheckedContinuation<DeleteAppInstanceAdminOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAppInstanceAdminContinuation) in
            deleteAppInstanceAdmin(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the streaming configurations of an AppInstance.
    func deleteAppInstanceStreamingConfigurations(input: DeleteAppInstanceStreamingConfigurationsInput) async throws -> DeleteAppInstanceStreamingConfigurationsOutputResponse
    {
        typealias deleteAppInstanceStreamingConfigurationsContinuation = CheckedContinuation<DeleteAppInstanceStreamingConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAppInstanceStreamingConfigurationsContinuation) in
            deleteAppInstanceStreamingConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an AppInstanceUser.
    func deleteAppInstanceUser(input: DeleteAppInstanceUserInput) async throws -> DeleteAppInstanceUserOutputResponse
    {
        typealias deleteAppInstanceUserContinuation = CheckedContinuation<DeleteAppInstanceUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAppInstanceUserContinuation) in
            deleteAppInstanceUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their
    /// JoinToken. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK
    /// in the Amazon Chime Developer Guide.
    func deleteAttendee(input: DeleteAttendeeInput) async throws -> DeleteAttendeeOutputResponse
    {
        typealias deleteAttendeeContinuation = CheckedContinuation<DeleteAttendeeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAttendeeContinuation) in
            deleteAttendee(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Immediately makes a channel and its memberships inaccessible and marks them for
    ///          deletion. This is an irreversible process.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func deleteChannel(input: DeleteChannelInput) async throws -> DeleteChannelOutputResponse
    {
        typealias deleteChannelContinuation = CheckedContinuation<DeleteChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteChannelContinuation) in
            deleteChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a user from a channel's ban list.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func deleteChannelBan(input: DeleteChannelBanInput) async throws -> DeleteChannelBanOutputResponse
    {
        typealias deleteChannelBanContinuation = CheckedContinuation<DeleteChannelBanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteChannelBanContinuation) in
            deleteChannelBan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a member from a channel.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func deleteChannelMembership(input: DeleteChannelMembershipInput) async throws -> DeleteChannelMembershipOutputResponse
    {
        typealias deleteChannelMembershipContinuation = CheckedContinuation<DeleteChannelMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteChannelMembershipContinuation) in
            deleteChannelMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a channel message. Only admins can perform this action. Deletion makes messages
    ///          inaccessible immediately. A background process deletes any revisions created by
    ///             UpdateChannelMessage.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func deleteChannelMessage(input: DeleteChannelMessageInput) async throws -> DeleteChannelMessageOutputResponse
    {
        typealias deleteChannelMessageContinuation = CheckedContinuation<DeleteChannelMessageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteChannelMessageContinuation) in
            deleteChannelMessage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a channel moderator.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func deleteChannelModerator(input: DeleteChannelModeratorInput) async throws -> DeleteChannelModeratorOutputResponse
    {
        typealias deleteChannelModeratorContinuation = CheckedContinuation<DeleteChannelModeratorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteChannelModeratorContinuation) in
            deleteChannelModerator(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the events configuration that allows a bot to receive outgoing events.
    func deleteEventsConfiguration(input: DeleteEventsConfigurationInput) async throws -> DeleteEventsConfigurationOutputResponse
    {
        typealias deleteEventsConfigurationContinuation = CheckedContinuation<DeleteEventsConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEventsConfigurationContinuation) in
            deleteEventsConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the media capture pipeline.
    func deleteMediaCapturePipeline(input: DeleteMediaCapturePipelineInput) async throws -> DeleteMediaCapturePipelineOutputResponse
    {
        typealias deleteMediaCapturePipelineContinuation = CheckedContinuation<DeleteMediaCapturePipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMediaCapturePipelineContinuation) in
            deleteMediaCapturePipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified Amazon Chime SDK meeting. The operation deletes all attendees, disconnects all clients, and prevents new clients from
    ///     joining the meeting. For more information about the Amazon Chime SDK, see
    ///     <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK in the
    ///     Amazon Chime Developer Guide.
    func deleteMeeting(input: DeleteMeetingInput) async throws -> DeleteMeetingOutputResponse
    {
        typealias deleteMeetingContinuation = CheckedContinuation<DeleteMeetingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMeetingContinuation) in
            deleteMeeting(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Moves the specified phone number into the Deletion queue. A
    ///             phone number must be disassociated from any users or Amazon Chime Voice Connectors
    ///             before it can be deleted.
    ///
    ///          Deleted phone numbers remain in the
    /// Deletion queue
    /// for 7 days before they are deleted permanently.
    func deletePhoneNumber(input: DeletePhoneNumberInput) async throws -> DeletePhoneNumberOutputResponse
    {
        typealias deletePhoneNumberContinuation = CheckedContinuation<DeletePhoneNumberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePhoneNumberContinuation) in
            deletePhoneNumber(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified proxy session from the specified Amazon Chime Voice Connector.
    func deleteProxySession(input: DeleteProxySessionInput) async throws -> DeleteProxySessionOutputResponse
    {
        typealias deleteProxySessionContinuation = CheckedContinuation<DeleteProxySessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProxySessionContinuation) in
            deleteProxySession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a chat room in an Amazon Chime Enterprise account.
    func deleteRoom(input: DeleteRoomInput) async throws -> DeleteRoomOutputResponse
    {
        typealias deleteRoomContinuation = CheckedContinuation<DeleteRoomOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRoomContinuation) in
            deleteRoom(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a member from a chat room in an Amazon Chime Enterprise account.
    func deleteRoomMembership(input: DeleteRoomMembershipInput) async throws -> DeleteRoomMembershipOutputResponse
    {
        typealias deleteRoomMembershipContinuation = CheckedContinuation<DeleteRoomMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRoomMembershipContinuation) in
            deleteRoomMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a SIP media application.
    func deleteSipMediaApplication(input: DeleteSipMediaApplicationInput) async throws -> DeleteSipMediaApplicationOutputResponse
    {
        typealias deleteSipMediaApplicationContinuation = CheckedContinuation<DeleteSipMediaApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSipMediaApplicationContinuation) in
            deleteSipMediaApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a SIP rule. You must disable a SIP rule before you can delete it.
    func deleteSipRule(input: DeleteSipRuleInput) async throws -> DeleteSipRuleOutputResponse
    {
        typealias deleteSipRuleContinuation = CheckedContinuation<DeleteSipRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSipRuleContinuation) in
            deleteSipRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the
    ///             Amazon Chime Voice Connector must be disassociated from it before it can be
    ///             deleted.
    func deleteVoiceConnector(input: DeleteVoiceConnectorInput) async throws -> DeleteVoiceConnectorOutputResponse
    {
        typealias deleteVoiceConnectorContinuation = CheckedContinuation<DeleteVoiceConnectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVoiceConnectorContinuation) in
            deleteVoiceConnector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the emergency calling configuration details from the specified Amazon Chime Voice Connector.
    func deleteVoiceConnectorEmergencyCallingConfiguration(input: DeleteVoiceConnectorEmergencyCallingConfigurationInput) async throws -> DeleteVoiceConnectorEmergencyCallingConfigurationOutputResponse
    {
        typealias deleteVoiceConnectorEmergencyCallingConfigurationContinuation = CheckedContinuation<DeleteVoiceConnectorEmergencyCallingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVoiceConnectorEmergencyCallingConfigurationContinuation) in
            deleteVoiceConnectorEmergencyCallingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified Amazon Chime Voice Connector group. Any
    /// VoiceConnectorItems
    /// and phone numbers associated with the group must be removed before it can be deleted.
    func deleteVoiceConnectorGroup(input: DeleteVoiceConnectorGroupInput) async throws -> DeleteVoiceConnectorGroupOutputResponse
    {
        typealias deleteVoiceConnectorGroupContinuation = CheckedContinuation<DeleteVoiceConnectorGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVoiceConnectorGroupContinuation) in
            deleteVoiceConnectorGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the origination settings for the specified Amazon Chime Voice Connector.
    ///
    ///
    ///             If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the origination settings.
    ///
    func deleteVoiceConnectorOrigination(input: DeleteVoiceConnectorOriginationInput) async throws -> DeleteVoiceConnectorOriginationOutputResponse
    {
        typealias deleteVoiceConnectorOriginationContinuation = CheckedContinuation<DeleteVoiceConnectorOriginationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVoiceConnectorOriginationContinuation) in
            deleteVoiceConnectorOrigination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the proxy configuration from the specified Amazon Chime Voice Connector.
    func deleteVoiceConnectorProxy(input: DeleteVoiceConnectorProxyInput) async throws -> DeleteVoiceConnectorProxyOutputResponse
    {
        typealias deleteVoiceConnectorProxyContinuation = CheckedContinuation<DeleteVoiceConnectorProxyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVoiceConnectorProxyContinuation) in
            deleteVoiceConnectorProxy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the streaming configuration for the specified Amazon Chime Voice Connector.
    func deleteVoiceConnectorStreamingConfiguration(input: DeleteVoiceConnectorStreamingConfigurationInput) async throws -> DeleteVoiceConnectorStreamingConfigurationOutputResponse
    {
        typealias deleteVoiceConnectorStreamingConfigurationContinuation = CheckedContinuation<DeleteVoiceConnectorStreamingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVoiceConnectorStreamingConfigurationContinuation) in
            deleteVoiceConnectorStreamingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the termination settings for the specified Amazon Chime Voice Connector.
    ///
    ///
    ///             If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the termination settings.
    ///
    func deleteVoiceConnectorTermination(input: DeleteVoiceConnectorTerminationInput) async throws -> DeleteVoiceConnectorTerminationOutputResponse
    {
        typealias deleteVoiceConnectorTerminationContinuation = CheckedContinuation<DeleteVoiceConnectorTerminationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVoiceConnectorTerminationContinuation) in
            deleteVoiceConnectorTermination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified SIP credentials used by your equipment to authenticate during call termination.
    func deleteVoiceConnectorTerminationCredentials(input: DeleteVoiceConnectorTerminationCredentialsInput) async throws -> DeleteVoiceConnectorTerminationCredentialsOutputResponse
    {
        typealias deleteVoiceConnectorTerminationCredentialsContinuation = CheckedContinuation<DeleteVoiceConnectorTerminationCredentialsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVoiceConnectorTerminationCredentialsContinuation) in
            deleteVoiceConnectorTerminationCredentials(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the full details of an AppInstance.
    func describeAppInstance(input: DescribeAppInstanceInput) async throws -> DescribeAppInstanceOutputResponse
    {
        typealias describeAppInstanceContinuation = CheckedContinuation<DescribeAppInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAppInstanceContinuation) in
            describeAppInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the full details of an AppInstanceAdmin.
    func describeAppInstanceAdmin(input: DescribeAppInstanceAdminInput) async throws -> DescribeAppInstanceAdminOutputResponse
    {
        typealias describeAppInstanceAdminContinuation = CheckedContinuation<DescribeAppInstanceAdminOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAppInstanceAdminContinuation) in
            describeAppInstanceAdmin(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the full details of an AppInstanceUser.
    func describeAppInstanceUser(input: DescribeAppInstanceUserInput) async throws -> DescribeAppInstanceUserOutputResponse
    {
        typealias describeAppInstanceUserContinuation = CheckedContinuation<DescribeAppInstanceUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAppInstanceUserContinuation) in
            describeAppInstanceUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the full details of a channel in an Amazon Chime
    ///          AppInstance.
    ///
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func describeChannel(input: DescribeChannelInput) async throws -> DescribeChannelOutputResponse
    {
        typealias describeChannelContinuation = CheckedContinuation<DescribeChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChannelContinuation) in
            describeChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the full details of a channel ban.
    ///
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func describeChannelBan(input: DescribeChannelBanInput) async throws -> DescribeChannelBanOutputResponse
    {
        typealias describeChannelBanContinuation = CheckedContinuation<DescribeChannelBanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChannelBanContinuation) in
            describeChannelBan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the full details of a user's channel membership.
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func describeChannelMembership(input: DescribeChannelMembershipInput) async throws -> DescribeChannelMembershipOutputResponse
    {
        typealias describeChannelMembershipContinuation = CheckedContinuation<DescribeChannelMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChannelMembershipContinuation) in
            describeChannelMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///  Returns the details of a channel based on the membership of the specified
    ///             AppInstanceUser.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func describeChannelMembershipForAppInstanceUser(input: DescribeChannelMembershipForAppInstanceUserInput) async throws -> DescribeChannelMembershipForAppInstanceUserOutputResponse
    {
        typealias describeChannelMembershipForAppInstanceUserContinuation = CheckedContinuation<DescribeChannelMembershipForAppInstanceUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChannelMembershipForAppInstanceUserContinuation) in
            describeChannelMembershipForAppInstanceUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the full details of a channel moderated by the specified
    ///             AppInstanceUser.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func describeChannelModeratedByAppInstanceUser(input: DescribeChannelModeratedByAppInstanceUserInput) async throws -> DescribeChannelModeratedByAppInstanceUserOutputResponse
    {
        typealias describeChannelModeratedByAppInstanceUserContinuation = CheckedContinuation<DescribeChannelModeratedByAppInstanceUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChannelModeratedByAppInstanceUserContinuation) in
            describeChannelModeratedByAppInstanceUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the full details of a single ChannelModerator.
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func describeChannelModerator(input: DescribeChannelModeratorInput) async throws -> DescribeChannelModeratorOutputResponse
    {
        typealias describeChannelModeratorContinuation = CheckedContinuation<DescribeChannelModeratorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChannelModeratorContinuation) in
            describeChannelModerator(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates the primary provisioned phone number from the specified Amazon Chime user.
    func disassociatePhoneNumberFromUser(input: DisassociatePhoneNumberFromUserInput) async throws -> DisassociatePhoneNumberFromUserOutputResponse
    {
        typealias disassociatePhoneNumberFromUserContinuation = CheckedContinuation<DisassociatePhoneNumberFromUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociatePhoneNumberFromUserContinuation) in
            disassociatePhoneNumberFromUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.
    func disassociatePhoneNumbersFromVoiceConnector(input: DisassociatePhoneNumbersFromVoiceConnectorInput) async throws -> DisassociatePhoneNumbersFromVoiceConnectorOutputResponse
    {
        typealias disassociatePhoneNumbersFromVoiceConnectorContinuation = CheckedContinuation<DisassociatePhoneNumbersFromVoiceConnectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociatePhoneNumbersFromVoiceConnectorContinuation) in
            disassociatePhoneNumbersFromVoiceConnector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group.
    func disassociatePhoneNumbersFromVoiceConnectorGroup(input: DisassociatePhoneNumbersFromVoiceConnectorGroupInput) async throws -> DisassociatePhoneNumbersFromVoiceConnectorGroupOutputResponse
    {
        typealias disassociatePhoneNumbersFromVoiceConnectorGroupContinuation = CheckedContinuation<DisassociatePhoneNumbersFromVoiceConnectorGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociatePhoneNumbersFromVoiceConnectorGroupContinuation) in
            disassociatePhoneNumbersFromVoiceConnectorGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.
    func disassociateSigninDelegateGroupsFromAccount(input: DisassociateSigninDelegateGroupsFromAccountInput) async throws -> DisassociateSigninDelegateGroupsFromAccountOutputResponse
    {
        typealias disassociateSigninDelegateGroupsFromAccountContinuation = CheckedContinuation<DisassociateSigninDelegateGroupsFromAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateSigninDelegateGroupsFromAccountContinuation) in
            disassociateSigninDelegateGroupsFromAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves details for the specified Amazon Chime account, such as account type and supported
    ///             licenses.
    func getAccount(input: GetAccountInput) async throws -> GetAccountOutputResponse
    {
        typealias getAccountContinuation = CheckedContinuation<GetAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAccountContinuation) in
            getAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves account settings for the specified Amazon Chime account ID, such as remote control
    ///             and dialout settings. For more information about these settings, see
    ///     <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page in the Amazon Chime Administration Guide.
    ///
    func getAccountSettings(input: GetAccountSettingsInput) async throws -> GetAccountSettingsOutputResponse
    {
        typealias getAccountSettingsContinuation = CheckedContinuation<GetAccountSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAccountSettingsContinuation) in
            getAccountSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the retention settings for an AppInstance.
    func getAppInstanceRetentionSettings(input: GetAppInstanceRetentionSettingsInput) async throws -> GetAppInstanceRetentionSettingsOutputResponse
    {
        typealias getAppInstanceRetentionSettingsContinuation = CheckedContinuation<GetAppInstanceRetentionSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAppInstanceRetentionSettingsContinuation) in
            getAppInstanceRetentionSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the streaming settings for an AppInstance.
    func getAppInstanceStreamingConfigurations(input: GetAppInstanceStreamingConfigurationsInput) async throws -> GetAppInstanceStreamingConfigurationsOutputResponse
    {
        typealias getAppInstanceStreamingConfigurationsContinuation = CheckedContinuation<GetAppInstanceStreamingConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAppInstanceStreamingConfigurationsContinuation) in
            getAppInstanceStreamingConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    /// Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK
    /// in the
    /// Amazon Chime Developer Guide
    /// .
    ///
    func getAttendee(input: GetAttendeeInput) async throws -> GetAttendeeOutputResponse
    {
        typealias getAttendeeContinuation = CheckedContinuation<GetAttendeeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAttendeeContinuation) in
            getAttendee(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves details for the specified bot, such as bot email address, bot type, status, and display name.
    func getBot(input: GetBotInput) async throws -> GetBotOutputResponse
    {
        typealias getBotContinuation = CheckedContinuation<GetBotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBotContinuation) in
            getBot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the full details of a channel message.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func getChannelMessage(input: GetChannelMessageInput) async throws -> GetChannelMessageOutputResponse
    {
        typealias getChannelMessageContinuation = CheckedContinuation<GetChannelMessageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getChannelMessageContinuation) in
            getChannelMessage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN.
    func getEventsConfiguration(input: GetEventsConfigurationInput) async throws -> GetEventsConfigurationOutputResponse
    {
        typealias getEventsConfigurationContinuation = CheckedContinuation<GetEventsConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEventsConfigurationContinuation) in
            getEventsConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves global settings for the administrator's AWS account, such as Amazon Chime Business
    ///             Calling and Amazon Chime Voice Connector settings.
    func getGlobalSettings(input: GetGlobalSettingsInput) async throws -> GetGlobalSettingsOutputResponse
    {
        typealias getGlobalSettingsContinuation = CheckedContinuation<GetGlobalSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getGlobalSettingsContinuation) in
            getGlobalSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets an existing media capture pipeline.
    func getMediaCapturePipeline(input: GetMediaCapturePipelineInput) async throws -> GetMediaCapturePipelineOutputResponse
    {
        typealias getMediaCapturePipelineContinuation = CheckedContinuation<GetMediaCapturePipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMediaCapturePipelineContinuation) in
            getMediaCapturePipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    /// Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK
    /// in the
    /// Amazon Chime Developer Guide
    /// .
    ///
    func getMeeting(input: GetMeetingInput) async throws -> GetMeetingOutputResponse
    {
        typealias getMeetingContinuation = CheckedContinuation<GetMeetingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMeetingContinuation) in
            getMeeting(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// The details of the endpoint for the messaging session.
    func getMessagingSessionEndpoint(input: GetMessagingSessionEndpointInput) async throws -> GetMessagingSessionEndpointOutputResponse
    {
        typealias getMessagingSessionEndpointContinuation = CheckedContinuation<GetMessagingSessionEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMessagingSessionEndpointContinuation) in
            getMessagingSessionEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.
    func getPhoneNumber(input: GetPhoneNumberInput) async throws -> GetPhoneNumberOutputResponse
    {
        typealias getPhoneNumberContinuation = CheckedContinuation<GetPhoneNumberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPhoneNumberContinuation) in
            getPhoneNumber(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves details for the specified phone number order, such as the order creation timestamp, phone
    ///             numbers in E.164 format, product type, and order status.
    func getPhoneNumberOrder(input: GetPhoneNumberOrderInput) async throws -> GetPhoneNumberOrderOutputResponse
    {
        typealias getPhoneNumberOrderContinuation = CheckedContinuation<GetPhoneNumberOrderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPhoneNumberOrderContinuation) in
            getPhoneNumberOrder(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the phone number settings for the administrator's AWS account, such as the default outbound calling name.
    func getPhoneNumberSettings(input: GetPhoneNumberSettingsInput) async throws -> GetPhoneNumberSettingsOutputResponse
    {
        typealias getPhoneNumberSettingsContinuation = CheckedContinuation<GetPhoneNumberSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPhoneNumberSettingsContinuation) in
            getPhoneNumberSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the specified proxy session details for the specified Amazon Chime Voice Connector.
    func getProxySession(input: GetProxySessionInput) async throws -> GetProxySessionOutputResponse
    {
        typealias getProxySessionContinuation = CheckedContinuation<GetProxySessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getProxySessionContinuation) in
            getProxySession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    /// Gets the retention settings for the specified Amazon Chime Enterprise account. For more information about retention settings, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html">Managing Chat Retention Policies in the Amazon Chime Administration Guide.
    ///
    func getRetentionSettings(input: GetRetentionSettingsInput) async throws -> GetRetentionSettingsOutputResponse
    {
        typealias getRetentionSettingsContinuation = CheckedContinuation<GetRetentionSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRetentionSettingsContinuation) in
            getRetentionSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account.
    func getRoom(input: GetRoomInput) async throws -> GetRoomOutputResponse
    {
        typealias getRoomContinuation = CheckedContinuation<GetRoomOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRoomContinuation) in
            getRoom(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the information for a SIP media application, including name, AWS Region, and endpoints.
    func getSipMediaApplication(input: GetSipMediaApplicationInput) async throws -> GetSipMediaApplicationOutputResponse
    {
        typealias getSipMediaApplicationContinuation = CheckedContinuation<GetSipMediaApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSipMediaApplicationContinuation) in
            getSipMediaApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the logging configuration for the specified SIP media application.
    func getSipMediaApplicationLoggingConfiguration(input: GetSipMediaApplicationLoggingConfigurationInput) async throws -> GetSipMediaApplicationLoggingConfigurationOutputResponse
    {
        typealias getSipMediaApplicationLoggingConfigurationContinuation = CheckedContinuation<GetSipMediaApplicationLoggingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSipMediaApplicationLoggingConfigurationContinuation) in
            getSipMediaApplicationLoggingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the details of a SIP rule, such as the rule ID, name, triggers, and target endpoints.
    func getSipRule(input: GetSipRuleInput) async throws -> GetSipRuleOutputResponse
    {
        typealias getSipRuleContinuation = CheckedContinuation<GetSipRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSipRuleContinuation) in
            getSipRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves details for the specified user ID, such as primary email address, license type,and personal meeting PIN.
    ///
    ///
    /// To retrieve user details with an email address instead of a user ID, use the
    /// ListUsers action, and then filter by email address.
    ///
    func getUser(input: GetUserInput) async throws -> GetUserOutputResponse
    {
        typealias getUserContinuation = CheckedContinuation<GetUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUserContinuation) in
            getUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves settings for the specified user ID, such as any associated phone number settings.
    func getUserSettings(input: GetUserSettingsInput) async throws -> GetUserSettingsOutputResponse
    {
        typealias getUserSettingsContinuation = CheckedContinuation<GetUserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUserSettingsContinuation) in
            getUserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps,name, outbound host, and encryption requirements.
    func getVoiceConnector(input: GetVoiceConnectorInput) async throws -> GetVoiceConnectorOutputResponse
    {
        typealias getVoiceConnectorContinuation = CheckedContinuation<GetVoiceConnectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVoiceConnectorContinuation) in
            getVoiceConnector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the emergency calling configuration details for the specified Amazon Chime Voice Connector.
    func getVoiceConnectorEmergencyCallingConfiguration(input: GetVoiceConnectorEmergencyCallingConfigurationInput) async throws -> GetVoiceConnectorEmergencyCallingConfigurationOutputResponse
    {
        typealias getVoiceConnectorEmergencyCallingConfigurationContinuation = CheckedContinuation<GetVoiceConnectorEmergencyCallingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVoiceConnectorEmergencyCallingConfigurationContinuation) in
            getVoiceConnectorEmergencyCallingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    /// Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps,name, and associated VoiceConnectorItems.
    func getVoiceConnectorGroup(input: GetVoiceConnectorGroupInput) async throws -> GetVoiceConnectorGroupOutputResponse
    {
        typealias getVoiceConnectorGroupContinuation = CheckedContinuation<GetVoiceConnectorGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVoiceConnectorGroupContinuation) in
            getVoiceConnectorGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
    func getVoiceConnectorLoggingConfiguration(input: GetVoiceConnectorLoggingConfigurationInput) async throws -> GetVoiceConnectorLoggingConfigurationOutputResponse
    {
        typealias getVoiceConnectorLoggingConfigurationContinuation = CheckedContinuation<GetVoiceConnectorLoggingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVoiceConnectorLoggingConfigurationContinuation) in
            getVoiceConnectorLoggingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves origination setting details for the specified Amazon Chime Voice Connector.
    func getVoiceConnectorOrigination(input: GetVoiceConnectorOriginationInput) async throws -> GetVoiceConnectorOriginationOutputResponse
    {
        typealias getVoiceConnectorOriginationContinuation = CheckedContinuation<GetVoiceConnectorOriginationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVoiceConnectorOriginationContinuation) in
            getVoiceConnectorOrigination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the proxy configuration details for the specified Amazon Chime Voice Connector.
    func getVoiceConnectorProxy(input: GetVoiceConnectorProxyInput) async throws -> GetVoiceConnectorProxyOutputResponse
    {
        typealias getVoiceConnectorProxyContinuation = CheckedContinuation<GetVoiceConnectorProxyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVoiceConnectorProxyContinuation) in
            getVoiceConnectorProxy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector.
    ///             Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows
    ///             the retention period, in hours, for the Amazon Kinesis data.
    func getVoiceConnectorStreamingConfiguration(input: GetVoiceConnectorStreamingConfigurationInput) async throws -> GetVoiceConnectorStreamingConfigurationOutputResponse
    {
        typealias getVoiceConnectorStreamingConfigurationContinuation = CheckedContinuation<GetVoiceConnectorStreamingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVoiceConnectorStreamingConfigurationContinuation) in
            getVoiceConnectorStreamingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves termination setting details for the specified Amazon Chime Voice Connector.
    func getVoiceConnectorTermination(input: GetVoiceConnectorTerminationInput) async throws -> GetVoiceConnectorTerminationOutputResponse
    {
        typealias getVoiceConnectorTerminationContinuation = CheckedContinuation<GetVoiceConnectorTerminationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVoiceConnectorTerminationContinuation) in
            getVoiceConnectorTermination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about the last time a SIP OPTIONS ping was received from
    ///             your SIP infrastructure for the specified Amazon Chime Voice Connector.
    func getVoiceConnectorTerminationHealth(input: GetVoiceConnectorTerminationHealthInput) async throws -> GetVoiceConnectorTerminationHealthOutputResponse
    {
        typealias getVoiceConnectorTerminationHealthContinuation = CheckedContinuation<GetVoiceConnectorTerminationHealthOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVoiceConnectorTerminationHealthContinuation) in
            getVoiceConnectorTerminationHealth(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime
    ///                 Team account. Only Team account types are currently
    ///             supported for this action.
    func inviteUsers(input: InviteUsersInput) async throws -> InviteUsersOutputResponse
    {
        typealias inviteUsersContinuation = CheckedContinuation<InviteUsersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: inviteUsersContinuation) in
            inviteUsers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the Amazon Chime accounts under the administrator's AWS account. You can filter accounts
    ///             by account name prefix. To find out which Amazon Chime account a user belongs to, you can
    ///             filter by the user's email address, which returns one account result.
    func listAccounts(input: ListAccountsInput) async throws -> ListAccountsOutputResponse
    {
        typealias listAccountsContinuation = CheckedContinuation<ListAccountsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAccountsContinuation) in
            listAccounts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the administrators in the AppInstance.
    func listAppInstanceAdmins(input: ListAppInstanceAdminsInput) async throws -> ListAppInstanceAdminsOutputResponse
    {
        typealias listAppInstanceAdminsContinuation = CheckedContinuation<ListAppInstanceAdminsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAppInstanceAdminsContinuation) in
            listAppInstanceAdmins(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List all AppInstanceUsers
    ///             created under a single AppInstance.
    ///
    func listAppInstanceUsers(input: ListAppInstanceUsersInput) async throws -> ListAppInstanceUsersOutputResponse
    {
        typealias listAppInstanceUsersContinuation = CheckedContinuation<ListAppInstanceUsersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAppInstanceUsersContinuation) in
            listAppInstanceUsers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all Amazon Chime AppInstances created under a single AWS account.
    func listAppInstances(input: ListAppInstancesInput) async throws -> ListAppInstancesOutputResponse
    {
        typealias listAppInstancesContinuation = CheckedContinuation<ListAppInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAppInstancesContinuation) in
            listAppInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags applied to an Amazon Chime SDK attendee resource.
    func listAttendeeTags(input: ListAttendeeTagsInput) async throws -> ListAttendeeTagsOutputResponse
    {
        typealias listAttendeeTagsContinuation = CheckedContinuation<ListAttendeeTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAttendeeTagsContinuation) in
            listAttendeeTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    /// Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK
    /// in the Amazon Chime Developer Guide.
    ///
    func listAttendees(input: ListAttendeesInput) async throws -> ListAttendeesOutputResponse
    {
        typealias listAttendeesContinuation = CheckedContinuation<ListAttendeesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAttendeesContinuation) in
            listAttendees(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the bots associated with the administrator's Amazon Chime Enterprise account ID.
    func listBots(input: ListBotsInput) async throws -> ListBotsOutputResponse
    {
        typealias listBotsContinuation = CheckedContinuation<ListBotsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBotsContinuation) in
            listBots(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all the users banned from a particular channel.
    ///
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func listChannelBans(input: ListChannelBansInput) async throws -> ListChannelBansOutputResponse
    {
        typealias listChannelBansContinuation = CheckedContinuation<ListChannelBansOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelBansContinuation) in
            listChannelBans(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all channel memberships in a channel.
    ///
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func listChannelMemberships(input: ListChannelMembershipsInput) async throws -> ListChannelMembershipsOutputResponse
    {
        typealias listChannelMembershipsContinuation = CheckedContinuation<ListChannelMembershipsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelMembershipsContinuation) in
            listChannelMemberships(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///  Lists all channels that a particular AppInstanceUser is a part of. Only an
    ///             AppInstanceAdmin can call the API with a user ARN that is not their own.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func listChannelMembershipsForAppInstanceUser(input: ListChannelMembershipsForAppInstanceUserInput) async throws -> ListChannelMembershipsForAppInstanceUserOutputResponse
    {
        typealias listChannelMembershipsForAppInstanceUserContinuation = CheckedContinuation<ListChannelMembershipsForAppInstanceUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelMembershipsForAppInstanceUserContinuation) in
            listChannelMembershipsForAppInstanceUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List all the messages in a channel. Returns a paginated list of
    ///             ChannelMessages. By default, sorted by creation timestamp in descending
    ///          order.
    ///
    ///             Redacted messages appear in the results as empty, since they are only redacted, not
    ///             deleted. Deleted messages do not appear in the results. This action always returns the
    ///             latest version of an edited message.
    ///             Also, the x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func listChannelMessages(input: ListChannelMessagesInput) async throws -> ListChannelMessagesOutputResponse
    {
        typealias listChannelMessagesContinuation = CheckedContinuation<ListChannelMessagesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelMessagesContinuation) in
            listChannelMessages(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all the moderators for a channel.
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func listChannelModerators(input: ListChannelModeratorsInput) async throws -> ListChannelModeratorsOutputResponse
    {
        typealias listChannelModeratorsContinuation = CheckedContinuation<ListChannelModeratorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelModeratorsContinuation) in
            listChannelModerators(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all Channels created under a single Chime App as a paginated list. You can specify
    ///          filters to narrow results.
    ///
    ///          <p class="title">
    ///             Functionality & restrictions
    ///
    ///
    ///
    ///                Use privacy = PUBLIC to retrieve all public channels in the
    ///                account.
    ///
    ///
    ///                Only an AppInstanceAdmin can set privacy = PRIVATE to
    ///                list the private channels in an account.
    ///
    ///
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func listChannels(input: ListChannelsInput) async throws -> ListChannelsOutputResponse
    {
        typealias listChannelsContinuation = CheckedContinuation<ListChannelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelsContinuation) in
            listChannels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// A list of the channels moderated by an AppInstanceUser.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func listChannelsModeratedByAppInstanceUser(input: ListChannelsModeratedByAppInstanceUserInput) async throws -> ListChannelsModeratedByAppInstanceUserOutputResponse
    {
        typealias listChannelsModeratedByAppInstanceUserContinuation = CheckedContinuation<ListChannelsModeratedByAppInstanceUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelsModeratedByAppInstanceUserContinuation) in
            listChannelsModeratedByAppInstanceUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of media capture pipelines.
    func listMediaCapturePipelines(input: ListMediaCapturePipelinesInput) async throws -> ListMediaCapturePipelinesOutputResponse
    {
        typealias listMediaCapturePipelinesContinuation = CheckedContinuation<ListMediaCapturePipelinesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMediaCapturePipelinesContinuation) in
            listMediaCapturePipelines(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags applied to an Amazon Chime SDK meeting resource.
    func listMeetingTags(input: ListMeetingTagsInput) async throws -> ListMeetingTagsOutputResponse
    {
        typealias listMeetingTagsContinuation = CheckedContinuation<ListMeetingTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMeetingTagsContinuation) in
            listMeetingTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    /// Lists up to 100 active Amazon Chime SDK meetings. For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK
    /// in the Amazon Chime Developer Guide.
    func listMeetings(input: ListMeetingsInput) async throws -> ListMeetingsOutputResponse
    {
        typealias listMeetingsContinuation = CheckedContinuation<ListMeetingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMeetingsContinuation) in
            listMeetings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the phone number orders for the administrator's Amazon Chime account.
    func listPhoneNumberOrders(input: ListPhoneNumberOrdersInput) async throws -> ListPhoneNumberOrdersOutputResponse
    {
        typealias listPhoneNumberOrdersContinuation = CheckedContinuation<ListPhoneNumberOrdersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPhoneNumberOrdersContinuation) in
            listPhoneNumberOrders(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group.
    func listPhoneNumbers(input: ListPhoneNumbersInput) async throws -> ListPhoneNumbersOutputResponse
    {
        typealias listPhoneNumbersContinuation = CheckedContinuation<ListPhoneNumbersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPhoneNumbersContinuation) in
            listPhoneNumbers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the proxy sessions for the specified Amazon Chime Voice Connector.
    func listProxySessions(input: ListProxySessionsInput) async throws -> ListProxySessionsOutputResponse
    {
        typealias listProxySessionsContinuation = CheckedContinuation<ListProxySessionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProxySessionsContinuation) in
            listProxySessions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the membership details for the specified room in an Amazon Chime Enterprise account,
    ///             such as the members' IDs, email addresses, and names.
    func listRoomMemberships(input: ListRoomMembershipsInput) async throws -> ListRoomMembershipsOutputResponse
    {
        typealias listRoomMembershipsContinuation = CheckedContinuation<ListRoomMembershipsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRoomMembershipsContinuation) in
            listRoomMemberships(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to.
    func listRooms(input: ListRoomsInput) async throws -> ListRoomsOutputResponse
    {
        typealias listRoomsContinuation = CheckedContinuation<ListRoomsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRoomsContinuation) in
            listRooms(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the SIP media applications under the administrator's AWS account.
    func listSipMediaApplications(input: ListSipMediaApplicationsInput) async throws -> ListSipMediaApplicationsOutputResponse
    {
        typealias listSipMediaApplicationsContinuation = CheckedContinuation<ListSipMediaApplicationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSipMediaApplicationsContinuation) in
            listSipMediaApplications(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the SIP rules under the administrator's AWS account.
    func listSipRules(input: ListSipRulesInput) async throws -> ListSipRulesOutputResponse
    {
        typealias listSipRulesContinuation = CheckedContinuation<ListSipRulesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSipRulesContinuation) in
            listSipRules(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists supported phone number countries.
    func listSupportedPhoneNumberCountries(input: ListSupportedPhoneNumberCountriesInput) async throws -> ListSupportedPhoneNumberCountriesOutputResponse
    {
        typealias listSupportedPhoneNumberCountriesContinuation = CheckedContinuation<ListSupportedPhoneNumberCountriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSupportedPhoneNumberCountriesContinuation) in
            listSupportedPhoneNumberCountries(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags applied to an Amazon Chime SDK meeting resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the users that belong to the specified Amazon Chime account. You can specify an email
    ///             address to list only the user that the email address belongs to.
    func listUsers(input: ListUsersInput) async throws -> ListUsersOutputResponse
    {
        typealias listUsersContinuation = CheckedContinuation<ListUsersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUsersContinuation) in
            listUsers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the Amazon Chime Voice Connector groups for the administrator's AWS account.
    func listVoiceConnectorGroups(input: ListVoiceConnectorGroupsInput) async throws -> ListVoiceConnectorGroupsOutputResponse
    {
        typealias listVoiceConnectorGroupsContinuation = CheckedContinuation<ListVoiceConnectorGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listVoiceConnectorGroupsContinuation) in
            listVoiceConnectorGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the SIP credentials for the specified Amazon Chime Voice Connector.
    func listVoiceConnectorTerminationCredentials(input: ListVoiceConnectorTerminationCredentialsInput) async throws -> ListVoiceConnectorTerminationCredentialsOutputResponse
    {
        typealias listVoiceConnectorTerminationCredentialsContinuation = CheckedContinuation<ListVoiceConnectorTerminationCredentialsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listVoiceConnectorTerminationCredentialsContinuation) in
            listVoiceConnectorTerminationCredentials(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the Amazon Chime Voice Connectors for the administrator's AWS account.
    func listVoiceConnectors(input: ListVoiceConnectorsInput) async throws -> ListVoiceConnectorsOutputResponse
    {
        typealias listVoiceConnectorsContinuation = CheckedContinuation<ListVoiceConnectorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listVoiceConnectorsContinuation) in
            listVoiceConnectors(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Logs out the specified user from all of the devices they are currently logged into.
    func logoutUser(input: LogoutUserInput) async throws -> LogoutUserOutputResponse
    {
        typealias logoutUserContinuation = CheckedContinuation<LogoutUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: logoutUserContinuation) in
            logoutUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the amount of time in days that a given AppInstance retains data.
    func putAppInstanceRetentionSettings(input: PutAppInstanceRetentionSettingsInput) async throws -> PutAppInstanceRetentionSettingsOutputResponse
    {
        typealias putAppInstanceRetentionSettingsContinuation = CheckedContinuation<PutAppInstanceRetentionSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putAppInstanceRetentionSettingsContinuation) in
            putAppInstanceRetentionSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// The data streaming configurations of an AppInstance.
    func putAppInstanceStreamingConfigurations(input: PutAppInstanceStreamingConfigurationsInput) async throws -> PutAppInstanceStreamingConfigurationsOutputResponse
    {
        typealias putAppInstanceStreamingConfigurationsContinuation = CheckedContinuation<PutAppInstanceStreamingConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putAppInstanceStreamingConfigurationsContinuation) in
            putAppInstanceStreamingConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an events configuration that allows a bot to receive outgoing events sent by Amazon
    ///             Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information,
    ///             see Bot.
    func putEventsConfiguration(input: PutEventsConfigurationInput) async throws -> PutEventsConfigurationOutputResponse
    {
        typealias putEventsConfigurationContinuation = CheckedContinuation<PutEventsConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putEventsConfigurationContinuation) in
            putEventsConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    /// Puts retention settings for the specified Amazon Chime Enterprise account. We recommend using AWS CloudTrail to monitor usage of this API for your account. For more information, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/ag/cloudtrail.html">Logging Amazon Chime API Calls with AWS CloudTrail
    /// in the Amazon Chime Administration Guide.
    ///
    ///
    /// To turn off existing retention settings, remove the number of days from the corresponding
    /// RetentionDays
    /// field in the
    /// RetentionSettings
    /// object. For more information about retention settings, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html">Managing Chat Retention Policies
    /// in the Amazon Chime Administration Guide.
    func putRetentionSettings(input: PutRetentionSettingsInput) async throws -> PutRetentionSettingsOutputResponse
    {
        typealias putRetentionSettingsContinuation = CheckedContinuation<PutRetentionSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putRetentionSettingsContinuation) in
            putRetentionSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the logging configuration for the specified SIP media application.
    func putSipMediaApplicationLoggingConfiguration(input: PutSipMediaApplicationLoggingConfigurationInput) async throws -> PutSipMediaApplicationLoggingConfigurationOutputResponse
    {
        typealias putSipMediaApplicationLoggingConfigurationContinuation = CheckedContinuation<PutSipMediaApplicationLoggingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putSipMediaApplicationLoggingConfigurationContinuation) in
            putSipMediaApplicationLoggingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Puts emergency calling configuration details to the specified Amazon Chime Voice Connector, such as emergency phone numbers and calling countries. Origination and termination settings must be enabled for
    ///     the Amazon Chime Voice Connector before emergency calling can be configured.
    func putVoiceConnectorEmergencyCallingConfiguration(input: PutVoiceConnectorEmergencyCallingConfigurationInput) async throws -> PutVoiceConnectorEmergencyCallingConfigurationOutputResponse
    {
        typealias putVoiceConnectorEmergencyCallingConfigurationContinuation = CheckedContinuation<PutVoiceConnectorEmergencyCallingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putVoiceConnectorEmergencyCallingConfigurationContinuation) in
            putVoiceConnectorEmergencyCallingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
    func putVoiceConnectorLoggingConfiguration(input: PutVoiceConnectorLoggingConfigurationInput) async throws -> PutVoiceConnectorLoggingConfigurationOutputResponse
    {
        typealias putVoiceConnectorLoggingConfigurationContinuation = CheckedContinuation<PutVoiceConnectorLoggingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putVoiceConnectorLoggingConfigurationContinuation) in
            putVoiceConnectorLoggingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds origination settings for the specified Amazon Chime Voice Connector.
    ///
    ///
    ///             If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off origination settings.
    ///
    func putVoiceConnectorOrigination(input: PutVoiceConnectorOriginationInput) async throws -> PutVoiceConnectorOriginationOutputResponse
    {
        typealias putVoiceConnectorOriginationContinuation = CheckedContinuation<PutVoiceConnectorOriginationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putVoiceConnectorOriginationContinuation) in
            putVoiceConnectorOrigination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Puts the specified proxy configuration to the specified Amazon Chime Voice Connector.
    func putVoiceConnectorProxy(input: PutVoiceConnectorProxyInput) async throws -> PutVoiceConnectorProxyOutputResponse
    {
        typealias putVoiceConnectorProxyContinuation = CheckedContinuation<PutVoiceConnectorProxyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putVoiceConnectorProxyContinuation) in
            putVoiceConnectorProxy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming
    ///             configuration specifies whether media streaming is enabled for sending to Indonesians.
    ///             It also sets the retention period, in hours, for the Amazon Kinesis data.
    func putVoiceConnectorStreamingConfiguration(input: PutVoiceConnectorStreamingConfigurationInput) async throws -> PutVoiceConnectorStreamingConfigurationOutputResponse
    {
        typealias putVoiceConnectorStreamingConfigurationContinuation = CheckedContinuation<PutVoiceConnectorStreamingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putVoiceConnectorStreamingConfigurationContinuation) in
            putVoiceConnectorStreamingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds termination settings for the specified Amazon Chime Voice Connector.
    ///
    ///
    ///             If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off termination settings.
    ///
    func putVoiceConnectorTermination(input: PutVoiceConnectorTerminationInput) async throws -> PutVoiceConnectorTerminationOutputResponse
    {
        typealias putVoiceConnectorTerminationContinuation = CheckedContinuation<PutVoiceConnectorTerminationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putVoiceConnectorTerminationContinuation) in
            putVoiceConnectorTermination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds termination SIP credentials for the specified Amazon Chime Voice Connector.
    func putVoiceConnectorTerminationCredentials(input: PutVoiceConnectorTerminationCredentialsInput) async throws -> PutVoiceConnectorTerminationCredentialsOutputResponse
    {
        typealias putVoiceConnectorTerminationCredentialsContinuation = CheckedContinuation<PutVoiceConnectorTerminationCredentialsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putVoiceConnectorTerminationCredentialsContinuation) in
            putVoiceConnectorTerminationCredentials(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Redacts message content, but not metadata. The message exists in the back end, but the
    ///          action returns null content, and the state shows as redacted.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func redactChannelMessage(input: RedactChannelMessageInput) async throws -> RedactChannelMessageOutputResponse
    {
        typealias redactChannelMessageContinuation = CheckedContinuation<RedactChannelMessageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: redactChannelMessageContinuation) in
            redactChannelMessage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Redacts the specified message from the specified Amazon Chime conversation.
    func redactConversationMessage(input: RedactConversationMessageInput) async throws -> RedactConversationMessageOutputResponse
    {
        typealias redactConversationMessageContinuation = CheckedContinuation<RedactConversationMessageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: redactConversationMessageContinuation) in
            redactConversationMessage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Redacts the specified message from the specified Amazon Chime channel.
    func redactRoomMessage(input: RedactRoomMessageInput) async throws -> RedactRoomMessageOutputResponse
    {
        typealias redactRoomMessageContinuation = CheckedContinuation<RedactRoomMessageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: redactRoomMessageContinuation) in
            redactRoomMessage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Regenerates the security token for a bot.
    func regenerateSecurityToken(input: RegenerateSecurityTokenInput) async throws -> RegenerateSecurityTokenOutputResponse
    {
        typealias regenerateSecurityTokenContinuation = CheckedContinuation<RegenerateSecurityTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: regenerateSecurityTokenContinuation) in
            regenerateSecurityToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns
    ///             the User object with the updated personal meeting PIN.
    func resetPersonalPIN(input: ResetPersonalPINInput) async throws -> ResetPersonalPINOutputResponse
    {
        typealias resetPersonalPINContinuation = CheckedContinuation<ResetPersonalPINOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resetPersonalPINContinuation) in
            resetPersonalPIN(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Moves a phone number from the Deletion queue back into the
    ///             phone number Inventory.
    func restorePhoneNumber(input: RestorePhoneNumberInput) async throws -> RestorePhoneNumberOutputResponse
    {
        typealias restorePhoneNumberContinuation = CheckedContinuation<RestorePhoneNumberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: restorePhoneNumberContinuation) in
            restorePhoneNumber(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Searches for phone numbers that can be ordered. For US numbers, provide at least one of
    ///             the following search filters: AreaCode, City,
    ///                 State, or TollFreePrefix. If you provide
    ///             City, you must also provide State. Numbers outside the US only
    ///             support the PhoneNumberType filter, which you must use.
    func searchAvailablePhoneNumbers(input: SearchAvailablePhoneNumbersInput) async throws -> SearchAvailablePhoneNumbersOutputResponse
    {
        typealias searchAvailablePhoneNumbersContinuation = CheckedContinuation<SearchAvailablePhoneNumbersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchAvailablePhoneNumbersContinuation) in
            searchAvailablePhoneNumbers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends a message to a particular channel that the member is a part of.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    ///             Also, STANDARD messages can contain 4KB of data and the 1KB of metadata.
    ///                CONTROL messages can contain 30 bytes of data and no metadata.
    ///
    func sendChannelMessage(input: SendChannelMessageInput) async throws -> SendChannelMessageOutputResponse
    {
        typealias sendChannelMessageContinuation = CheckedContinuation<SendChannelMessageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendChannelMessageContinuation) in
            sendChannelMessage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Start transcription for the specified meetingId.
    func startMeetingTranscription(input: StartMeetingTranscriptionInput) async throws -> StartMeetingTranscriptionOutputResponse
    {
        typealias startMeetingTranscriptionContinuation = CheckedContinuation<StartMeetingTranscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startMeetingTranscriptionContinuation) in
            startMeetingTranscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops transcription for the specified meetingId.
    func stopMeetingTranscription(input: StopMeetingTranscriptionInput) async throws -> StopMeetingTranscriptionOutputResponse
    {
        typealias stopMeetingTranscriptionContinuation = CheckedContinuation<StopMeetingTranscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopMeetingTranscriptionContinuation) in
            stopMeetingTranscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Applies the specified tags to the specified Amazon Chime SDK attendee.
    func tagAttendee(input: TagAttendeeInput) async throws -> TagAttendeeOutputResponse
    {
        typealias tagAttendeeContinuation = CheckedContinuation<TagAttendeeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagAttendeeContinuation) in
            tagAttendee(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Applies the specified tags to the specified Amazon Chime SDK meeting.
    func tagMeeting(input: TagMeetingInput) async throws -> TagMeetingOutputResponse
    {
        typealias tagMeetingContinuation = CheckedContinuation<TagMeetingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagMeetingContinuation) in
            tagMeeting(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Applies the specified tags to the specified Amazon Chime SDK meeting resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Untags the specified tags from the specified Amazon Chime SDK attendee.
    func untagAttendee(input: UntagAttendeeInput) async throws -> UntagAttendeeOutputResponse
    {
        typealias untagAttendeeContinuation = CheckedContinuation<UntagAttendeeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagAttendeeContinuation) in
            untagAttendee(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Untags the specified tags from the specified Amazon Chime SDK meeting.
    func untagMeeting(input: UntagMeetingInput) async throws -> UntagMeetingOutputResponse
    {
        typealias untagMeetingContinuation = CheckedContinuation<UntagMeetingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagMeetingContinuation) in
            untagMeeting(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Untags the specified tags from the specified Amazon Chime SDK meeting resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates account details for the specified Amazon Chime account. Currently, only account name and default license updates are supported for this action.
    func updateAccount(input: UpdateAccountInput) async throws -> UpdateAccountOutputResponse
    {
        typealias updateAccountContinuation = CheckedContinuation<UpdateAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAccountContinuation) in
            updateAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the settings for the specified Amazon Chime account. You can update settings for
    ///             remote control of shared screens, or for the dial-out option. For more information about
    ///             these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use
    ///                 the Policies Page in the Amazon Chime Administration
    ///                 Guide.
    func updateAccountSettings(input: UpdateAccountSettingsInput) async throws -> UpdateAccountSettingsOutputResponse
    {
        typealias updateAccountSettingsContinuation = CheckedContinuation<UpdateAccountSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAccountSettingsContinuation) in
            updateAccountSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates AppInstance metadata.
    func updateAppInstance(input: UpdateAppInstanceInput) async throws -> UpdateAppInstanceOutputResponse
    {
        typealias updateAppInstanceContinuation = CheckedContinuation<UpdateAppInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAppInstanceContinuation) in
            updateAppInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the details of an AppInstanceUser. You can update names and metadata.
    func updateAppInstanceUser(input: UpdateAppInstanceUserInput) async throws -> UpdateAppInstanceUserOutputResponse
    {
        typealias updateAppInstanceUserContinuation = CheckedContinuation<UpdateAppInstanceUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAppInstanceUserContinuation) in
            updateAppInstanceUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account.
    func updateBot(input: UpdateBotInput) async throws -> UpdateBotOutputResponse
    {
        typealias updateBotContinuation = CheckedContinuation<UpdateBotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBotContinuation) in
            updateBot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update a channel's attributes.
    ///
    ///             Restriction: You can't change a channel's privacy.
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func updateChannel(input: UpdateChannelInput) async throws -> UpdateChannelOutputResponse
    {
        typealias updateChannelContinuation = CheckedContinuation<UpdateChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateChannelContinuation) in
            updateChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the content of a message.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func updateChannelMessage(input: UpdateChannelMessageInput) async throws -> UpdateChannelMessageOutputResponse
    {
        typealias updateChannelMessageContinuation = CheckedContinuation<UpdateChannelMessageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateChannelMessageContinuation) in
            updateChannelMessage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// The details of the time when a user last read messages in a channel.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func updateChannelReadMarker(input: UpdateChannelReadMarkerInput) async throws -> UpdateChannelReadMarkerOutputResponse
    {
        typealias updateChannelReadMarkerContinuation = CheckedContinuation<UpdateChannelReadMarkerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateChannelReadMarkerContinuation) in
            updateChannelReadMarker(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
    func updateGlobalSettings(input: UpdateGlobalSettingsInput) async throws -> UpdateGlobalSettingsOutputResponse
    {
        typealias updateGlobalSettingsContinuation = CheckedContinuation<UpdateGlobalSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGlobalSettingsContinuation) in
            updateGlobalSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action.
    ///          For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.
    ///          Updates to outbound calling names can take 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.
    func updatePhoneNumber(input: UpdatePhoneNumberInput) async throws -> UpdatePhoneNumberOutputResponse
    {
        typealias updatePhoneNumberContinuation = CheckedContinuation<UpdatePhoneNumberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePhoneNumberContinuation) in
            updatePhoneNumber(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the phone number settings for the administrator's AWS account, such as the default
    ///             outbound calling name. You can update the default outbound calling name once every seven
    ///             days. Outbound calling names can take up to 72 hours to update.
    func updatePhoneNumberSettings(input: UpdatePhoneNumberSettingsInput) async throws -> UpdatePhoneNumberSettingsOutputResponse
    {
        typealias updatePhoneNumberSettingsContinuation = CheckedContinuation<UpdatePhoneNumberSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePhoneNumberSettingsContinuation) in
            updatePhoneNumberSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified proxy session details, such as voice or SMS capabilities.
    func updateProxySession(input: UpdateProxySessionInput) async throws -> UpdateProxySessionOutputResponse
    {
        typealias updateProxySessionContinuation = CheckedContinuation<UpdateProxySessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProxySessionContinuation) in
            updateProxySession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account.
    func updateRoom(input: UpdateRoomInput) async throws -> UpdateRoomOutputResponse
    {
        typealias updateRoomContinuation = CheckedContinuation<UpdateRoomOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRoomContinuation) in
            updateRoom(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates room membership details, such as the member role, for a room in an Amazon Chime
    ///             Enterprise account. The member role designates whether the member is a chat room
    ///             administrator or a general chat room member. The member role can be updated only for
    ///             user IDs.
    func updateRoomMembership(input: UpdateRoomMembershipInput) async throws -> UpdateRoomMembershipOutputResponse
    {
        typealias updateRoomMembershipContinuation = CheckedContinuation<UpdateRoomMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRoomMembershipContinuation) in
            updateRoomMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the details of the specified SIP media application.
    func updateSipMediaApplication(input: UpdateSipMediaApplicationInput) async throws -> UpdateSipMediaApplicationOutputResponse
    {
        typealias updateSipMediaApplicationContinuation = CheckedContinuation<UpdateSipMediaApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSipMediaApplicationContinuation) in
            updateSipMediaApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Allows you to trigger a Lambda function at any time while a call is active, and replace the current actions with new actions returned by the invocation.
    func updateSipMediaApplicationCall(input: UpdateSipMediaApplicationCallInput) async throws -> UpdateSipMediaApplicationCallOutputResponse
    {
        typealias updateSipMediaApplicationCallContinuation = CheckedContinuation<UpdateSipMediaApplicationCallOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSipMediaApplicationCallContinuation) in
            updateSipMediaApplicationCall(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the details of the specified SIP rule.
    func updateSipRule(input: UpdateSipRuleInput) async throws -> UpdateSipRuleOutputResponse
    {
        typealias updateSipRuleContinuation = CheckedContinuation<UpdateSipRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSipRuleContinuation) in
            updateSipRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates user details for a specified user ID. Currently, only LicenseType updates are supported for this action.
    func updateUser(input: UpdateUserInput) async throws -> UpdateUserOutputResponse
    {
        typealias updateUserContinuation = CheckedContinuation<UpdateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserContinuation) in
            updateUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the settings for the specified user, such as phone number settings.
    func updateUserSettings(input: UpdateUserSettingsInput) async throws -> UpdateUserSettingsOutputResponse
    {
        typealias updateUserSettingsContinuation = CheckedContinuation<UpdateUserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserSettingsContinuation) in
            updateUserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates details for the specified Amazon Chime Voice Connector.
    func updateVoiceConnector(input: UpdateVoiceConnectorInput) async throws -> UpdateVoiceConnectorOutputResponse
    {
        typealias updateVoiceConnectorContinuation = CheckedContinuation<UpdateVoiceConnectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateVoiceConnectorContinuation) in
            updateVoiceConnector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates details of the specified Amazon Chime Voice Connector group, such as the name and
    ///             Amazon Chime Voice Connector priority ranking.
    func updateVoiceConnectorGroup(input: UpdateVoiceConnectorGroupInput) async throws -> UpdateVoiceConnectorGroupOutputResponse
    {
        typealias updateVoiceConnectorGroupContinuation = CheckedContinuation<UpdateVoiceConnectorGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateVoiceConnectorGroupContinuation) in
            updateVoiceConnectorGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
