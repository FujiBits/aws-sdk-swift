// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct BatchDeletePhoneNumberInputHeadersMiddleware: Middleware {
    public let id: String = "BatchDeletePhoneNumberInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchDeletePhoneNumberInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchDeletePhoneNumberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchDeletePhoneNumberInput>
    public typealias MOutput = OperationOutput<BatchDeletePhoneNumberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchDeletePhoneNumberOutputError>
}

public struct BatchDeletePhoneNumberInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchDeletePhoneNumberInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchDeletePhoneNumberInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchDeletePhoneNumberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(URLQueryItem(name: "operation", value: "batch-delete"))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchDeletePhoneNumberInput>
    public typealias MOutput = OperationOutput<BatchDeletePhoneNumberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchDeletePhoneNumberOutputError>
}

public struct BatchDeletePhoneNumberInputBodyMiddleware: Middleware {
    public let id: String = "BatchDeletePhoneNumberInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchDeletePhoneNumberInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchDeletePhoneNumberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchDeletePhoneNumberInput>
    public typealias MOutput = OperationOutput<BatchDeletePhoneNumberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchDeletePhoneNumberOutputError>
}

extension BatchDeletePhoneNumberInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case phoneNumberIds = "PhoneNumberIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let phoneNumberIds = phoneNumberIds {
            var phoneNumberIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .phoneNumberIds)
            for nonemptystringlist0 in phoneNumberIds {
                try phoneNumberIdsContainer.encode(nonemptystringlist0)
            }
        }
    }
}
