// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreatePhoneNumberOrderInputHeadersMiddleware: Middleware {
    public let id: String = "CreatePhoneNumberOrderInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePhoneNumberOrderInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePhoneNumberOrderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePhoneNumberOrderInput>
    public typealias MOutput = OperationOutput<CreatePhoneNumberOrderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePhoneNumberOrderOutputError>
}

public struct CreatePhoneNumberOrderInputQueryItemMiddleware: Middleware {
    public let id: String = "CreatePhoneNumberOrderInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePhoneNumberOrderInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePhoneNumberOrderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePhoneNumberOrderInput>
    public typealias MOutput = OperationOutput<CreatePhoneNumberOrderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePhoneNumberOrderOutputError>
}

public struct CreatePhoneNumberOrderInputBodyMiddleware: Middleware {
    public let id: String = "CreatePhoneNumberOrderInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePhoneNumberOrderInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePhoneNumberOrderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePhoneNumberOrderInput>
    public typealias MOutput = OperationOutput<CreatePhoneNumberOrderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePhoneNumberOrderOutputError>
}

extension CreatePhoneNumberOrderInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case e164PhoneNumbers = "E164PhoneNumbers"
        case productType = "ProductType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let e164PhoneNumbers = e164PhoneNumbers {
            var e164PhoneNumbersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .e164PhoneNumbers)
            for e164phonenumberlist0 in e164PhoneNumbers {
                try e164PhoneNumbersContainer.encode(e164phonenumberlist0)
            }
        }
        if let productType = productType {
            try encodeContainer.encode(productType.rawValue, forKey: .productType)
        }
    }
}
