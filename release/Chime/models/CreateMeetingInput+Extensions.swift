// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateMeetingInputHeadersMiddleware: Middleware {
    public let id: String = "CreateMeetingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMeetingInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMeetingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMeetingInput>
    public typealias MOutput = OperationOutput<CreateMeetingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMeetingOutputError>
}

public struct CreateMeetingInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateMeetingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMeetingInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMeetingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMeetingInput>
    public typealias MOutput = OperationOutput<CreateMeetingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMeetingOutputError>
}

public struct CreateMeetingInputBodyMiddleware: Middleware {
    public let id: String = "CreateMeetingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMeetingInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMeetingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMeetingInput>
    public typealias MOutput = OperationOutput<CreateMeetingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMeetingOutputError>
}

extension CreateMeetingInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case externalMeetingId = "ExternalMeetingId"
        case mediaRegion = "MediaRegion"
        case meetingHostId = "MeetingHostId"
        case notificationsConfiguration = "NotificationsConfiguration"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let externalMeetingId = externalMeetingId {
            try encodeContainer.encode(externalMeetingId, forKey: .externalMeetingId)
        }
        if let mediaRegion = mediaRegion {
            try encodeContainer.encode(mediaRegion, forKey: .mediaRegion)
        }
        if let meetingHostId = meetingHostId {
            try encodeContainer.encode(meetingHostId, forKey: .meetingHostId)
        }
        if let notificationsConfiguration = notificationsConfiguration {
            try encodeContainer.encode(notificationsConfiguration, forKey: .notificationsConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for meetingtaglist0 in tags {
                try tagsContainer.encode(meetingtaglist0)
            }
        }
    }
}
