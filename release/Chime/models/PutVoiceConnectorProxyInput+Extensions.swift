// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutVoiceConnectorProxyInputHeadersMiddleware: Middleware {
    public let id: String = "PutVoiceConnectorProxyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutVoiceConnectorProxyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutVoiceConnectorProxyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutVoiceConnectorProxyInput>
    public typealias MOutput = OperationOutput<PutVoiceConnectorProxyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutVoiceConnectorProxyOutputError>
}

public struct PutVoiceConnectorProxyInputQueryItemMiddleware: Middleware {
    public let id: String = "PutVoiceConnectorProxyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutVoiceConnectorProxyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutVoiceConnectorProxyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutVoiceConnectorProxyInput>
    public typealias MOutput = OperationOutput<PutVoiceConnectorProxyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutVoiceConnectorProxyOutputError>
}

public struct PutVoiceConnectorProxyInputBodyMiddleware: Middleware {
    public let id: String = "PutVoiceConnectorProxyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutVoiceConnectorProxyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutVoiceConnectorProxyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutVoiceConnectorProxyInput>
    public typealias MOutput = OperationOutput<PutVoiceConnectorProxyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutVoiceConnectorProxyOutputError>
}

extension PutVoiceConnectorProxyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultSessionExpiryMinutes = "DefaultSessionExpiryMinutes"
        case disabled = "Disabled"
        case fallBackPhoneNumber = "FallBackPhoneNumber"
        case phoneNumberPoolCountries = "PhoneNumberPoolCountries"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultSessionExpiryMinutes = defaultSessionExpiryMinutes {
            try encodeContainer.encode(defaultSessionExpiryMinutes, forKey: .defaultSessionExpiryMinutes)
        }
        if let disabled = disabled {
            try encodeContainer.encode(disabled, forKey: .disabled)
        }
        if let fallBackPhoneNumber = fallBackPhoneNumber {
            try encodeContainer.encode(fallBackPhoneNumber, forKey: .fallBackPhoneNumber)
        }
        if let phoneNumberPoolCountries = phoneNumberPoolCountries {
            var phoneNumberPoolCountriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .phoneNumberPoolCountries)
            for countrylist0 in phoneNumberPoolCountries {
                try phoneNumberPoolCountriesContainer.encode(countrylist0)
            }
        }
    }
}
