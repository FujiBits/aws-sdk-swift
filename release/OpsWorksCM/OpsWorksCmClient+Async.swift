// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension OpsWorksCmClient {
    /// <p> Associates a new node with the server. For more information about how to disassociate a node, see <a>DisassociateNode</a>.</p>
    ///          <p>
    ///       On a Chef server: This command is an alternative to  <code>knife bootstrap</code>.</p>
    ///          <p>
    ///         Example (Chef): <code>aws opsworks-cm associate-node --server-name <i>MyServer</i> --node-name <i>MyManagedNode</i> --engine-attributes "Name=<i>CHEF_ORGANIZATION</i>,Value=default" "Name=<i>CHEF_NODE_PUBLIC_KEY</i>,Value=<i>public-key-pem</i>"</code>
    ///          </p>
    ///          <p>
    ///       On a Puppet server, this command is an alternative to the <code>puppet cert sign</code> command that signs a Puppet node CSR.
    ///     </p>
    ///          <p>
    ///         Example (Puppet): <code>aws opsworks-cm associate-node --server-name <i>MyServer</i> --node-name <i>MyManagedNode</i> --engine-attributes "Name=<i>PUPPET_NODE_CSR</i>,Value=<i>csr-pem</i>"</code>
    ///          </p>
    ///          <p>
    ///       A node can can only be associated with servers that are in a <code>HEALTHY</code> state. Otherwise, an <code>InvalidStateException</code> is thrown.
    ///       A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
    ///       The AssociateNode API call can be integrated into Auto Scaling configurations, AWS Cloudformation templates, or the user data of a server's instance.
    ///     </p>
    func associateNode(input: AssociateNodeInput) async throws -> AssociateNodeOutputResponse
    {
        typealias associateNodeContinuation = CheckedContinuation<AssociateNodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateNodeContinuation) in
            associateNode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Creates an application-level backup of a server. While the
    ///       server is in the <code>BACKING_UP</code> state, the server cannot be
    ///       changed, and no additional backup can be created.
    ///     </p>
    ///          <p>
    ///       Backups can be created for servers in <code>RUNNING</code>, <code>HEALTHY</code>, and <code>UNHEALTHY</code> states. By default, you can create a maximum of 50
    ///       manual backups.
    ///     </p>
    ///          <p>
    ///       This operation is asynchronous.
    ///     </p>
    ///          <p>
    ///       A <code>LimitExceededException</code> is thrown when the maximum number of manual backups is reached.
    ///       An <code>InvalidStateException</code> is thrown when the server is not in any of the following states: RUNNING, HEALTHY, or UNHEALTHY.
    ///       A <code>ResourceNotFoundException</code> is thrown when the server is not found.
    ///       A <code>ValidationException</code> is thrown when parameters of the request are not valid.
    ///     </p>
    func createBackup(input: CreateBackupInput) async throws -> CreateBackupOutputResponse
    {
        typealias createBackupContinuation = CheckedContinuation<CreateBackupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBackupContinuation) in
            createBackup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Creates and immedately starts a new server. The server is ready to use when it is in the <code>HEALTHY</code> state. By default, you can create a maximum of 10 servers.
    ///     </p>
    ///          <p>
    ///       This operation is asynchronous.
    ///     </p>
    ///          <p>
    ///       A <code>LimitExceededException</code> is thrown when you have created the maximum number of servers (10). A <code>ResourceAlreadyExistsException</code>
    ///       is thrown when a server with the same name already exists in the account. A <code>ResourceNotFoundException</code> is thrown when you
    ///       specify a backup ID that is not valid or is for a backup that does not exist. A <code>ValidationException</code> is thrown when parameters
    ///       of the request are not valid.
    ///     </p>
    ///          <p>
    ///       If you do not specify a security group by adding the <code>SecurityGroupIds</code> parameter, AWS OpsWorks creates a new security group.
    ///     </p>
    ///          <p>
    ///             <i>Chef Automate:</i> The default security group opens the Chef server to the world on TCP port 443. If a KeyName is present, AWS OpsWorks enables SSH access. SSH is also open to the world on TCP port 22.
    ///     </p>
    ///          <p>
    ///             <i>Puppet Enterprise:</i> The default security group opens TCP ports 22, 443, 4433, 8140, 8142, 8143, and 8170. If a KeyName is present, AWS OpsWorks enables SSH access. SSH is also open to the world on TCP port 22.
    ///     </p>
    ///          <p>By default, your server is accessible from any IP address. We
    ///       recommend that you update your security group rules to allow
    ///       access from known IP addresses and address ranges only. To edit security group rules, open Security Groups
    ///       in the navigation pane of the EC2 management console.
    ///     </p>
    ///          <p>To specify your own domain for a server, and provide your own self-signed or CA-signed certificate and private key, specify values for <code>CustomDomain</code>,
    ///       <code>CustomCertificate</code>, and <code>CustomPrivateKey</code>.</p>
    func createServer(input: CreateServerInput) async throws -> CreateServerOutputResponse
    {
        typealias createServerContinuation = CheckedContinuation<CreateServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createServerContinuation) in
            createServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Deletes a backup. You can delete both manual and automated backups. This operation is asynchronous.
    ///     </p>
    ///          <p>
    ///       An <code>InvalidStateException</code> is thrown when a backup deletion is already in progress.
    ///       A <code>ResourceNotFoundException</code> is thrown when the backup does not exist.
    ///       A <code>ValidationException</code> is thrown when parameters of the request are not valid.
    ///     </p>
    func deleteBackup(input: DeleteBackupInput) async throws -> DeleteBackupOutputResponse
    {
        typealias deleteBackupContinuation = CheckedContinuation<DeleteBackupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBackupContinuation) in
            deleteBackup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Deletes the server and the underlying AWS CloudFormation stacks
    ///       (including the server's EC2 instance). When you run this command, the server state is updated
    ///       to <code>DELETING</code>. After the server is deleted, it is no longer returned by
    ///       <code>DescribeServer</code> requests. If the AWS CloudFormation stack cannot be deleted, the server cannot be deleted.
    ///     </p>
    ///          <p>
    ///       This operation is asynchronous.
    ///     </p>
    ///          <p>
    ///       An <code>InvalidStateException</code> is thrown when a server deletion is already in progress.
    ///       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
    ///       A <code>ValidationException</code> is raised when parameters of the request are not valid.
    ///     </p>
    ///          <p>
    ///     </p>
    func deleteServer(input: DeleteServerInput) async throws -> DeleteServerOutputResponse
    {
        typealias deleteServerContinuation = CheckedContinuation<DeleteServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteServerContinuation) in
            deleteServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Describes your OpsWorks-CM account attributes.
    ///     </p>
    ///          <p>
    ///       This operation is synchronous.
    ///     </p>
    func describeAccountAttributes(input: DescribeAccountAttributesInput) async throws -> DescribeAccountAttributesOutputResponse
    {
        typealias describeAccountAttributesContinuation = CheckedContinuation<DescribeAccountAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccountAttributesContinuation) in
            describeAccountAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Describes backups. The results are ordered by time, with newest backups first.
    ///       If you do not specify a BackupId or ServerName, the command returns all backups.
    ///     </p>
    ///          <p>
    ///       This operation is synchronous.
    ///     </p>
    ///          <p>
    ///       A <code>ResourceNotFoundException</code> is thrown when the backup does not exist.
    ///       A <code>ValidationException</code> is raised when parameters of the request are not valid.
    ///     </p>
    func describeBackups(input: DescribeBackupsInput) async throws -> DescribeBackupsOutputResponse
    {
        typealias describeBackupsContinuation = CheckedContinuation<DescribeBackupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeBackupsContinuation) in
            describeBackups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Describes events for a specified server. Results are ordered by time, with newest events first.
    ///     </p>
    ///          <p>
    ///       This operation is synchronous.
    ///     </p>
    ///          <p>
    ///       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
    ///       A <code>ValidationException</code> is raised when parameters of the request are not valid.
    ///     </p>
    func describeEvents(input: DescribeEventsInput) async throws -> DescribeEventsOutputResponse
    {
        typealias describeEventsContinuation = CheckedContinuation<DescribeEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEventsContinuation) in
            describeEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Returns the current status of an existing association or disassociation request.
    ///     </p>
    ///          <p>
    ///       A <code>ResourceNotFoundException</code> is thrown when no recent association or disassociation request with the specified token is found,
    ///       or when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
    ///     </p>
    func describeNodeAssociationStatus(input: DescribeNodeAssociationStatusInput) async throws -> DescribeNodeAssociationStatusOutputResponse
    {
        typealias describeNodeAssociationStatusContinuation = CheckedContinuation<DescribeNodeAssociationStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeNodeAssociationStatusContinuation) in
            describeNodeAssociationStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Lists all configuration management servers that are identified with your account.
    ///       Only the stored results from Amazon DynamoDB
    ///       are returned. AWS OpsWorks CM does not query other services.
    ///     </p>
    ///          <p>
    ///       This operation is synchronous.
    ///     </p>
    ///          <p>
    ///       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
    ///       A <code>ValidationException</code> is raised when parameters of the request are not valid.
    ///     </p>
    func describeServers(input: DescribeServersInput) async throws -> DescribeServersOutputResponse
    {
        typealias describeServersContinuation = CheckedContinuation<DescribeServersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeServersContinuation) in
            describeServers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Disassociates a node from an AWS OpsWorks CM server, and removes the node from the server's managed nodes. After a node is disassociated,
    ///       the node key pair is no longer valid for accessing the configuration manager's API. For more information about how to associate a node, see <a>AssociateNode</a>.
    ///     </p>
    ///          <p>A node can can only be disassociated from a server that is in a <code>HEALTHY</code> state. Otherwise, an <code>InvalidStateException</code> is thrown.
    ///       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
    ///       A <code>ValidationException</code> is raised when parameters of the request are not valid.
    ///     </p>
    func disassociateNode(input: DisassociateNodeInput) async throws -> DisassociateNodeOutputResponse
    {
        typealias disassociateNodeContinuation = CheckedContinuation<DisassociateNodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateNodeContinuation) in
            disassociateNode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Exports a specified server engine attribute as a base64-encoded string. For example, you can export user data that you can use in EC2 to associate nodes with a server.
    ///     </p>
    ///          <p>
    ///       This operation is synchronous.
    ///     </p>
    ///          <p>
    ///       A <code>ValidationException</code> is raised when parameters of the request are not valid.
    ///       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
    ///       An <code>InvalidStateException</code> is thrown when the server is in any of the following states: CREATING, TERMINATED,
    ///       FAILED or DELETING.
    ///     </p>
    func exportServerEngineAttribute(input: ExportServerEngineAttributeInput) async throws -> ExportServerEngineAttributeOutputResponse
    {
        typealias exportServerEngineAttributeContinuation = CheckedContinuation<ExportServerEngineAttributeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportServerEngineAttributeContinuation) in
            exportServerEngineAttribute(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of tags that are applied to the specified AWS OpsWorks for Chef Automate or
    ///       AWS OpsWorks for Puppet Enterprise servers or backups.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Restores a backup to a server that is in a <code>CONNECTION_LOST</code>, <code>HEALTHY</code>, <code>RUNNING</code>, <code>UNHEALTHY</code>, or <code>TERMINATED</code> state.
    ///       When you run RestoreServer, the server's EC2 instance is deleted, and a new EC2 instance is configured. RestoreServer maintains
    ///       the existing server endpoint, so configuration management of the server's client devices (nodes) should continue to work.
    ///     </p>
    ///          <p>Restoring from a backup is performed by creating a new EC2 instance. If restoration is successful, and the server is in a <code>HEALTHY</code> state,
    ///       AWS OpsWorks CM switches traffic over to the new instance. After restoration is finished, the old EC2 instance is maintained in a
    ///       <code>Running</code> or <code>Stopped</code> state, but is eventually terminated.</p>
    ///          <p>
    ///       This operation is asynchronous.
    ///     </p>
    ///          <p>
    ///       An <code>InvalidStateException</code> is thrown when the server is not in a valid state. A <code>ResourceNotFoundException</code> is thrown
    ///       when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
    ///     </p>
    func restoreServer(input: RestoreServerInput) async throws -> RestoreServerOutputResponse
    {
        typealias restoreServerContinuation = CheckedContinuation<RestoreServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: restoreServerContinuation) in
            restoreServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Manually starts server maintenance. This command can be useful if an earlier maintenance attempt failed, and the underlying
    ///       cause of maintenance failure has been resolved. The server is in an <code>UNDER_MAINTENANCE</code> state while maintenance is in progress.
    ///     </p>
    ///          <p>
    ///       Maintenance can only be started on servers in <code>HEALTHY</code> and <code>UNHEALTHY</code> states. Otherwise, an <code>InvalidStateException</code> is thrown.
    ///       A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
    ///     </p>
    func startMaintenance(input: StartMaintenanceInput) async throws -> StartMaintenanceOutputResponse
    {
        typealias startMaintenanceContinuation = CheckedContinuation<StartMaintenanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startMaintenanceContinuation) in
            startMaintenance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Applies tags to an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server, or to server backups.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes specified tags from an AWS OpsWorks-CM server or backup.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Updates settings for a server.
    ///     </p>
    ///          <p>
    ///       This operation is synchronous.
    ///     </p>
    func updateServer(input: UpdateServerInput) async throws -> UpdateServerOutputResponse
    {
        typealias updateServerContinuation = CheckedContinuation<UpdateServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateServerContinuation) in
            updateServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Updates engine-specific attributes on a specified server. The server
    ///       enters the <code>MODIFYING</code> state when this operation
    ///       is in progress. Only one update can occur at a time.
    ///       You can use this command to reset a Chef server's public key (<code>CHEF_PIVOTAL_KEY</code>) or a Puppet server's
    ///       admin password (<code>PUPPET_ADMIN_PASSWORD</code>).
    ///     </p>
    ///          <p>
    ///       This operation is asynchronous.
    ///     </p>
    ///          <p>
    ///       This operation can only be called for servers in <code>HEALTHY</code> or <code>UNHEALTHY</code> states. Otherwise, an <code>InvalidStateException</code> is raised.
    ///       A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
    ///     </p>
    func updateServerEngineAttributes(input: UpdateServerEngineAttributesInput) async throws -> UpdateServerEngineAttributesOutputResponse
    {
        typealias updateServerEngineAttributesContinuation = CheckedContinuation<UpdateServerEngineAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateServerEngineAttributesContinuation) in
            updateServerEngineAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
