// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension LookoutMetricsClient {
    /// Activates an anomaly detector.
    func activateAnomalyDetector(input: ActivateAnomalyDetectorInput) async throws -> ActivateAnomalyDetectorOutputResponse
    {
        typealias activateAnomalyDetectorContinuation = CheckedContinuation<ActivateAnomalyDetectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: activateAnomalyDetectorContinuation) in
            activateAnomalyDetector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Runs a backtest for anomaly detection for the specified resource.
    func backTestAnomalyDetector(input: BackTestAnomalyDetectorInput) async throws -> BackTestAnomalyDetectorOutputResponse
    {
        typealias backTestAnomalyDetectorContinuation = CheckedContinuation<BackTestAnomalyDetectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: backTestAnomalyDetectorContinuation) in
            backTestAnomalyDetector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an alert for an anomaly detector.
    func createAlert(input: CreateAlertInput) async throws -> CreateAlertOutputResponse
    {
        typealias createAlertContinuation = CheckedContinuation<CreateAlertOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAlertContinuation) in
            createAlert(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an anomaly detector.
    func createAnomalyDetector(input: CreateAnomalyDetectorInput) async throws -> CreateAnomalyDetectorOutputResponse
    {
        typealias createAnomalyDetectorContinuation = CheckedContinuation<CreateAnomalyDetectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAnomalyDetectorContinuation) in
            createAnomalyDetector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a dataset.
    func createMetricSet(input: CreateMetricSetInput) async throws -> CreateMetricSetOutputResponse
    {
        typealias createMetricSetContinuation = CheckedContinuation<CreateMetricSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMetricSetContinuation) in
            createMetricSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an alert.
    func deleteAlert(input: DeleteAlertInput) async throws -> DeleteAlertOutputResponse
    {
        typealias deleteAlertContinuation = CheckedContinuation<DeleteAlertOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAlertContinuation) in
            deleteAlert(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a detector. Deleting an anomaly detector will delete all of its corresponding resources including any
    ///       configured datasets and alerts.
    func deleteAnomalyDetector(input: DeleteAnomalyDetectorInput) async throws -> DeleteAnomalyDetectorOutputResponse
    {
        typealias deleteAnomalyDetectorContinuation = CheckedContinuation<DeleteAnomalyDetectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAnomalyDetectorContinuation) in
            deleteAnomalyDetector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an alert.
    ///          Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
    ///       immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    func describeAlert(input: DescribeAlertInput) async throws -> DescribeAlertOutputResponse
    {
        typealias describeAlertContinuation = CheckedContinuation<DescribeAlertOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAlertContinuation) in
            describeAlert(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the status of the specified anomaly detection jobs.
    func describeAnomalyDetectionExecutions(input: DescribeAnomalyDetectionExecutionsInput) async throws -> DescribeAnomalyDetectionExecutionsOutputResponse
    {
        typealias describeAnomalyDetectionExecutionsContinuation = CheckedContinuation<DescribeAnomalyDetectionExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAnomalyDetectionExecutionsContinuation) in
            describeAnomalyDetectionExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a detector.
    ///          Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
    ///       immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    func describeAnomalyDetector(input: DescribeAnomalyDetectorInput) async throws -> DescribeAnomalyDetectorOutputResponse
    {
        typealias describeAnomalyDetectorContinuation = CheckedContinuation<DescribeAnomalyDetectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAnomalyDetectorContinuation) in
            describeAnomalyDetector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a dataset.
    ///          Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
    ///       immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    func describeMetricSet(input: DescribeMetricSetInput) async throws -> DescribeMetricSetOutputResponse
    {
        typealias describeMetricSetContinuation = CheckedContinuation<DescribeMetricSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMetricSetContinuation) in
            describeMetricSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns details about a group of anomalous metrics.
    func getAnomalyGroup(input: GetAnomalyGroupInput) async throws -> GetAnomalyGroupOutputResponse
    {
        typealias getAnomalyGroupContinuation = CheckedContinuation<GetAnomalyGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAnomalyGroupContinuation) in
            getAnomalyGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get feedback for an anomaly group.
    func getFeedback(input: GetFeedbackInput) async throws -> GetFeedbackOutputResponse
    {
        typealias getFeedbackContinuation = CheckedContinuation<GetFeedbackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFeedbackContinuation) in
            getFeedback(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a selection of sample records from an Amazon S3 datasource.
    func getSampleData(input: GetSampleDataInput) async throws -> GetSampleDataOutputResponse
    {
        typealias getSampleDataContinuation = CheckedContinuation<GetSampleDataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSampleDataContinuation) in
            getSampleData(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the alerts attached to a detector.
    ///          Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
    ///       immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    func listAlerts(input: ListAlertsInput) async throws -> ListAlertsOutputResponse
    {
        typealias listAlertsContinuation = CheckedContinuation<ListAlertsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAlertsContinuation) in
            listAlerts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the detectors in the current AWS Region.
    ///          Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
    ///       immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    func listAnomalyDetectors(input: ListAnomalyDetectorsInput) async throws -> ListAnomalyDetectorsOutputResponse
    {
        typealias listAnomalyDetectorsContinuation = CheckedContinuation<ListAnomalyDetectorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAnomalyDetectorsContinuation) in
            listAnomalyDetectors(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of anomaly groups.
    func listAnomalyGroupSummaries(input: ListAnomalyGroupSummariesInput) async throws -> ListAnomalyGroupSummariesOutputResponse
    {
        typealias listAnomalyGroupSummariesContinuation = CheckedContinuation<ListAnomalyGroupSummariesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAnomalyGroupSummariesContinuation) in
            listAnomalyGroupSummaries(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of anomalous metrics for a measure in an anomaly group.
    func listAnomalyGroupTimeSeries(input: ListAnomalyGroupTimeSeriesInput) async throws -> ListAnomalyGroupTimeSeriesOutputResponse
    {
        typealias listAnomalyGroupTimeSeriesContinuation = CheckedContinuation<ListAnomalyGroupTimeSeriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAnomalyGroupTimeSeriesContinuation) in
            listAnomalyGroupTimeSeries(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the datasets in the current AWS Region.
    ///          Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
    ///       immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    func listMetricSets(input: ListMetricSetsInput) async throws -> ListMetricSetsOutputResponse
    {
        typealias listMetricSetsContinuation = CheckedContinuation<ListMetricSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMetricSetsContinuation) in
            listMetricSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags for a detector, dataset, or alert.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Add feedback for an anomalous metric.
    func putFeedback(input: PutFeedbackInput) async throws -> PutFeedbackOutputResponse
    {
        typealias putFeedbackContinuation = CheckedContinuation<PutFeedbackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putFeedbackContinuation) in
            putFeedback(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags to a detector, dataset, or alert.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags from a detector, dataset, or alert.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a detector. After activation, you can only change a detector's ingestion delay and description.
    func updateAnomalyDetector(input: UpdateAnomalyDetectorInput) async throws -> UpdateAnomalyDetectorOutputResponse
    {
        typealias updateAnomalyDetectorContinuation = CheckedContinuation<UpdateAnomalyDetectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAnomalyDetectorContinuation) in
            updateAnomalyDetector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a dataset.
    func updateMetricSet(input: UpdateMetricSetInput) async throws -> UpdateMetricSetOutputResponse
    {
        typealias updateMetricSetContinuation = CheckedContinuation<UpdateMetricSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMetricSetContinuation) in
            updateMetricSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
