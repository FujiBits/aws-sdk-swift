// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetLaunchProfileInitializationInputHeadersMiddleware: Middleware {
    public let id: String = "GetLaunchProfileInitializationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetLaunchProfileInitializationInput>,
                  next: H) -> Swift.Result<OperationOutput<GetLaunchProfileInitializationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetLaunchProfileInitializationInput>
    public typealias MOutput = OperationOutput<GetLaunchProfileInitializationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetLaunchProfileInitializationOutputError>
}

public struct GetLaunchProfileInitializationInputQueryItemMiddleware: Middleware {
    public let id: String = "GetLaunchProfileInitializationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetLaunchProfileInitializationInput>,
                  next: H) -> Swift.Result<OperationOutput<GetLaunchProfileInitializationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let launchProfileProtocolVersions = input.operationInput.launchProfileProtocolVersions {
            launchProfileProtocolVersions.forEach { queryItemValue in
                let queryItem = URLQueryItem(name: "launchProfileProtocolVersions".urlPercentEncoding(), value: String(queryItemValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        if let launchPurpose = input.operationInput.launchPurpose {
            let launchPurposeQueryItem = URLQueryItem(name: "launchPurpose".urlPercentEncoding(), value: String(launchPurpose).urlPercentEncoding())
            input.builder.withQueryItem(launchPurposeQueryItem)
        }
        if let platform = input.operationInput.platform {
            let platformQueryItem = URLQueryItem(name: "platform".urlPercentEncoding(), value: String(platform).urlPercentEncoding())
            input.builder.withQueryItem(platformQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetLaunchProfileInitializationInput>
    public typealias MOutput = OperationOutput<GetLaunchProfileInitializationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetLaunchProfileInitializationOutputError>
}

extension GetLaunchProfileInitializationInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
