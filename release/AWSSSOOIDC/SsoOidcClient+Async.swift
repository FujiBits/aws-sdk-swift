// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension SsoOidcClient {
    /// Creates and returns an access token for the authorized client. The access token issued
    ///       will be used to fetch short-term credentials for the assigned roles in the AWS
    ///       account.
    func createToken(input: CreateTokenInput) async throws -> CreateTokenOutputResponse
    {
        typealias createTokenContinuation = CheckedContinuation<CreateTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTokenContinuation) in
            createToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers a client with AWS SSO. This allows clients to initiate device authorization.
    ///       The output should be persisted for reuse through many authentication requests.
    func registerClient(input: RegisterClientInput) async throws -> RegisterClientOutputResponse
    {
        typealias registerClientContinuation = CheckedContinuation<RegisterClientOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerClientContinuation) in
            registerClient(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Initiates device authorization by requesting a pair of verification codes from the authorization service.
    func startDeviceAuthorization(input: StartDeviceAuthorizationInput) async throws -> StartDeviceAuthorizationOutputResponse
    {
        typealias startDeviceAuthorizationContinuation = CheckedContinuation<StartDeviceAuthorizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startDeviceAuthorizationContinuation) in
            startDeviceAuthorization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
