// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ShieldClient {
    /// <p>Authorizes the DDoS Response Team (DRT) to access the specified Amazon S3 bucket containing your AWS WAF logs. You can associate up to 10 Amazon S3 buckets with your subscription.</p>
    /// 	        <p>To use the services of the DRT and make an <code>AssociateDRTLogBucket</code> request, you must be subscribed to the <a href="https://aws.amazon.com/premiumsupport/business-support/">Business Support plan</a> or the <a href="https://aws.amazon.com/premiumsupport/enterprise-support/">Enterprise Support plan</a>.</p>
    func associateDRTLogBucket(input: AssociateDRTLogBucketInput) async throws -> AssociateDRTLogBucketOutputResponse
    {
        typealias associateDRTLogBucketContinuation = CheckedContinuation<AssociateDRTLogBucketOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateDRTLogBucketContinuation) in
            associateDRTLogBucket(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Authorizes the DDoS Response Team (DRT), using the specified role, to access your AWS account to assist with DDoS attack mitigation during potential attacks. This enables the DRT to inspect your AWS WAF configuration and create or update AWS WAF rules and web ACLs.</p>
    ///          <p>You can associate only one <code>RoleArn</code> with your subscription. If you submit an <code>AssociateDRTRole</code> request for an account that already has an associated role, the new <code>RoleArn</code> will replace the existing <code>RoleArn</code>. </p>
    ///          <p>Prior to making the <code>AssociateDRTRole</code> request, you must attach the <a href="https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/service-role/AWSShieldDRTAccessPolicy">AWSShieldDRTAccessPolicy</a> managed policy to the role you will specify in the request. For more information see <a href=" https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_manage-attach-detach.html">Attaching and Detaching IAM Policies</a>. The role must also trust the service principal <code> drt.shield.amazonaws.com</code>. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html">IAM JSON Policy Elements: Principal</a>.</p>
    ///
    ///          <p>The DRT will have access only to your AWS WAF and Shield resources. By submitting this request, you authorize the DRT to inspect your AWS WAF and Shield configuration and create and update AWS WAF rules and web ACLs on your behalf. The DRT takes these actions only if explicitly authorized by you.</p>
    ///          <p>You must have the <code>iam:PassRole</code> permission to make an <code>AssociateDRTRole</code> request. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html">Granting a User Permissions to Pass a Role to an AWS Service</a>. </p>
    ///          <p>To use the services of the DRT and make an <code>AssociateDRTRole</code> request, you must be subscribed to the <a href="https://aws.amazon.com/premiumsupport/business-support/">Business Support plan</a> or the <a href="https://aws.amazon.com/premiumsupport/enterprise-support/">Enterprise Support plan</a>.</p>
    func associateDRTRole(input: AssociateDRTRoleInput) async throws -> AssociateDRTRoleOutputResponse
    {
        typealias associateDRTRoleContinuation = CheckedContinuation<AssociateDRTRoleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateDRTRoleContinuation) in
            associateDRTRole(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds health-based detection to the Shield Advanced protection for a resource. Shield Advanced health-based detection uses the health of your AWS resource to improve responsiveness and accuracy in attack detection and mitigation.  </p>
    ///          <p>You define the health check in Route 53 and then associate it with your Shield Advanced protection. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/ddos-overview.html#ddos-advanced-health-check-option">Shield Advanced Health-Based Detection</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/">AWS WAF and AWS Shield Developer Guide</a>. </p>
    func associateHealthCheck(input: AssociateHealthCheckInput) async throws -> AssociateHealthCheckOutputResponse
    {
        typealias associateHealthCheckContinuation = CheckedContinuation<AssociateHealthCheckOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateHealthCheckContinuation) in
            associateHealthCheck(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Initializes proactive engagement and sets the list of contacts for the DDoS Response Team (DRT) to use. You must provide at least one phone number in the emergency contact list. </p>
    ///          <p>After you have initialized proactive engagement using this call, to disable or enable proactive engagement, use the calls <code>DisableProactiveEngagement</code> and <code>EnableProactiveEngagement</code>.  </p>
    ///          <note>
    ///             <p>This call defines the list of email addresses and phone numbers that the DDoS Response Team (DRT) can use to contact you for escalations to the DRT and to initiate proactive customer support.</p>
    ///             <p>The contacts that you provide in the request replace any contacts that were already defined. If you already have contacts defined and want to use them, retrieve the list using <code>DescribeEmergencyContactSettings</code> and then provide it to this call.  </p>
    ///          </note>
    func associateProactiveEngagementDetails(input: AssociateProactiveEngagementDetailsInput) async throws -> AssociateProactiveEngagementDetailsOutputResponse
    {
        typealias associateProactiveEngagementDetailsContinuation = CheckedContinuation<AssociateProactiveEngagementDetailsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateProactiveEngagementDetailsContinuation) in
            associateProactiveEngagementDetails(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables AWS Shield Advanced for a specific AWS resource. The resource can be an Amazon
    ///          CloudFront distribution, Elastic Load Balancing load balancer, AWS Global Accelerator accelerator, Elastic IP Address, or an Amazon Route 53 hosted zone.</p>
    ///          <p>You can add protection to only a single resource with each CreateProtection request. If you want to add protection to multiple resources at once, use the <a href="https://console.aws.amazon.com/waf/">AWS WAF console</a>. For more information see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/getting-started-ddos.html">Getting Started with AWS Shield Advanced</a> and <a href="https://docs.aws.amazon.com/waf/latest/developerguide/configure-new-protection.html">Add AWS Shield Advanced Protection to more AWS Resources</a>.</p>
    func createProtection(input: CreateProtectionInput) async throws -> CreateProtectionOutputResponse
    {
        typealias createProtectionContinuation = CheckedContinuation<CreateProtectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProtectionContinuation) in
            createProtection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a grouping of protected resources so they can be handled as a collective. This resource grouping improves the accuracy of detection and reduces false positives. </p>
    func createProtectionGroup(input: CreateProtectionGroupInput) async throws -> CreateProtectionGroupOutputResponse
    {
        typealias createProtectionGroupContinuation = CheckedContinuation<CreateProtectionGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProtectionGroupContinuation) in
            createProtectionGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Activates AWS Shield Advanced for an account.</p>
    ///
    ///          <p>When you initally create a subscription, your subscription is set to be automatically renewed at the end of the existing subscription period.  You can change this by submitting an <code>UpdateSubscription</code> request. </p>
    func createSubscription(input: CreateSubscriptionInput) async throws -> CreateSubscriptionOutputResponse
    {
        typealias createSubscriptionContinuation = CheckedContinuation<CreateSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSubscriptionContinuation) in
            createSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an AWS Shield Advanced <a>Protection</a>.</p>
    func deleteProtection(input: DeleteProtectionInput) async throws -> DeleteProtectionOutputResponse
    {
        typealias deleteProtectionContinuation = CheckedContinuation<DeleteProtectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProtectionContinuation) in
            deleteProtection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the specified protection group.</p>
    func deleteProtectionGroup(input: DeleteProtectionGroupInput) async throws -> DeleteProtectionGroupOutputResponse
    {
        typealias deleteProtectionGroupContinuation = CheckedContinuation<DeleteProtectionGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProtectionGroupContinuation) in
            deleteProtectionGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes AWS Shield Advanced from an account. AWS Shield Advanced requires a 1-year subscription commitment. You cannot delete a subscription prior to the completion of that commitment. </p>
    @available(*, deprecated)
    func deleteSubscription(input: DeleteSubscriptionInput) async throws -> DeleteSubscriptionOutputResponse
    {
        typealias deleteSubscriptionContinuation = CheckedContinuation<DeleteSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSubscriptionContinuation) in
            deleteSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the details of a DDoS attack. </p>
    func describeAttack(input: DescribeAttackInput) async throws -> DescribeAttackOutputResponse
    {
        typealias describeAttackContinuation = CheckedContinuation<DescribeAttackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAttackContinuation) in
            describeAttack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides information about the number and type of attacks AWS Shield has detected in the last year for all resources that belong to your account, regardless of whether you've defined Shield protections for them. This operation is available to Shield customers as well as to Shield Advanced customers.</p>
    ///          <p>The operation returns data for the time range of midnight UTC, one year ago, to midnight UTC, today. For example, if the current time is <code>2020-10-26 15:39:32 PDT</code>, equal to <code>2020-10-26 22:39:32 UTC</code>, then the time range for the attack data returned is from <code>2019-10-26 00:00:00 UTC</code> to <code>2020-10-26 00:00:00 UTC</code>. </p>
    ///          <p>The time range indicates the period covered by the attack statistics data items.</p>
    func describeAttackStatistics(input: DescribeAttackStatisticsInput) async throws -> DescribeAttackStatisticsOutputResponse
    {
        typealias describeAttackStatisticsContinuation = CheckedContinuation<DescribeAttackStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAttackStatisticsContinuation) in
            describeAttackStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the current role and list of Amazon S3 log buckets used by the DDoS Response Team (DRT) to access your AWS account while assisting with attack mitigation.</p>
    func describeDRTAccess(input: DescribeDRTAccessInput) async throws -> DescribeDRTAccessOutputResponse
    {
        typealias describeDRTAccessContinuation = CheckedContinuation<DescribeDRTAccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDRTAccessContinuation) in
            describeDRTAccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>A list of email addresses and phone numbers that the DDoS Response Team (DRT) can use to contact you if you have proactive engagement enabled, for escalations to the DRT and to initiate proactive customer support.</p>
    func describeEmergencyContactSettings(input: DescribeEmergencyContactSettingsInput) async throws -> DescribeEmergencyContactSettingsOutputResponse
    {
        typealias describeEmergencyContactSettingsContinuation = CheckedContinuation<DescribeEmergencyContactSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEmergencyContactSettingsContinuation) in
            describeEmergencyContactSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the details of a <a>Protection</a> object.</p>
    func describeProtection(input: DescribeProtectionInput) async throws -> DescribeProtectionOutputResponse
    {
        typealias describeProtectionContinuation = CheckedContinuation<DescribeProtectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProtectionContinuation) in
            describeProtection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the specification for the specified protection group.</p>
    func describeProtectionGroup(input: DescribeProtectionGroupInput) async throws -> DescribeProtectionGroupOutputResponse
    {
        typealias describeProtectionGroupContinuation = CheckedContinuation<DescribeProtectionGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProtectionGroupContinuation) in
            describeProtectionGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides details about the AWS Shield Advanced subscription for an account.</p>
    func describeSubscription(input: DescribeSubscriptionInput) async throws -> DescribeSubscriptionOutputResponse
    {
        typealias describeSubscriptionContinuation = CheckedContinuation<DescribeSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSubscriptionContinuation) in
            describeSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes authorization from the DDoS Response Team (DRT) to notify contacts about escalations to the DRT and to initiate proactive customer support.</p>
    func disableProactiveEngagement(input: DisableProactiveEngagementInput) async throws -> DisableProactiveEngagementOutputResponse
    {
        typealias disableProactiveEngagementContinuation = CheckedContinuation<DisableProactiveEngagementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableProactiveEngagementContinuation) in
            disableProactiveEngagement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the DDoS Response Team's (DRT) access to the specified Amazon S3 bucket containing your AWS WAF logs.</p>
    /// 	        <p>To make a <code>DisassociateDRTLogBucket</code> request, you must be subscribed to the <a href="https://aws.amazon.com/premiumsupport/business-support/">Business Support plan</a> or the <a href="https://aws.amazon.com/premiumsupport/enterprise-support/">Enterprise Support plan</a>. However, if you are not subscribed to one of these support plans, but had been previously and had granted the DRT access to your account, you can submit a <code>DisassociateDRTLogBucket</code> request to remove this access.</p>
    func disassociateDRTLogBucket(input: DisassociateDRTLogBucketInput) async throws -> DisassociateDRTLogBucketOutputResponse
    {
        typealias disassociateDRTLogBucketContinuation = CheckedContinuation<DisassociateDRTLogBucketOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateDRTLogBucketContinuation) in
            disassociateDRTLogBucket(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the DDoS Response Team's (DRT) access to your AWS account.</p>
    /// 	        <p>To make a <code>DisassociateDRTRole</code> request, you must be subscribed to the <a href="https://aws.amazon.com/premiumsupport/business-support/">Business Support plan</a> or the <a href="https://aws.amazon.com/premiumsupport/enterprise-support/">Enterprise Support plan</a>. However, if you are not subscribed to one of these support plans, but had been previously and had granted the DRT access to your account, you can submit a <code>DisassociateDRTRole</code> request to remove this access.</p>
    func disassociateDRTRole(input: DisassociateDRTRoleInput) async throws -> DisassociateDRTRoleOutputResponse
    {
        typealias disassociateDRTRoleContinuation = CheckedContinuation<DisassociateDRTRoleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateDRTRoleContinuation) in
            disassociateDRTRole(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes health-based detection from the Shield Advanced protection for a resource. Shield Advanced health-based detection uses the health of your AWS resource to improve responsiveness and accuracy in attack detection and mitigation. </p>
    ///          <p>You define the health check in Route 53 and then associate or disassociate it with your Shield Advanced protection. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/ddos-overview.html#ddos-advanced-health-check-option">Shield Advanced Health-Based Detection</a> in the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/">AWS WAF and AWS Shield Developer Guide</a>. </p>
    func disassociateHealthCheck(input: DisassociateHealthCheckInput) async throws -> DisassociateHealthCheckOutputResponse
    {
        typealias disassociateHealthCheckContinuation = CheckedContinuation<DisassociateHealthCheckOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateHealthCheckContinuation) in
            disassociateHealthCheck(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Authorizes the DDoS Response Team (DRT) to use email and phone to notify contacts about escalations to the DRT and to initiate proactive customer support.</p>
    func enableProactiveEngagement(input: EnableProactiveEngagementInput) async throws -> EnableProactiveEngagementOutputResponse
    {
        typealias enableProactiveEngagementContinuation = CheckedContinuation<EnableProactiveEngagementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableProactiveEngagementContinuation) in
            enableProactiveEngagement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the <code>SubscriptionState</code>, either <code>Active</code> or <code>Inactive</code>.</p>
    func getSubscriptionState(input: GetSubscriptionStateInput) async throws -> GetSubscriptionStateOutputResponse
    {
        typealias getSubscriptionStateContinuation = CheckedContinuation<GetSubscriptionStateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSubscriptionStateContinuation) in
            getSubscriptionState(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns all ongoing DDoS attacks or all DDoS attacks during a specified time
    ///          period.</p>
    func listAttacks(input: ListAttacksInput) async throws -> ListAttacksOutputResponse
    {
        typealias listAttacksContinuation = CheckedContinuation<ListAttacksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAttacksContinuation) in
            listAttacks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the <a>ProtectionGroup</a> objects for the account.</p>
    func listProtectionGroups(input: ListProtectionGroupsInput) async throws -> ListProtectionGroupsOutputResponse
    {
        typealias listProtectionGroupsContinuation = CheckedContinuation<ListProtectionGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProtectionGroupsContinuation) in
            listProtectionGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all <a>Protection</a> objects for the account.</p>
    func listProtections(input: ListProtectionsInput) async throws -> ListProtectionsOutputResponse
    {
        typealias listProtectionsContinuation = CheckedContinuation<ListProtectionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProtectionsContinuation) in
            listProtections(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the resources that are included in the protection group. </p>
    func listResourcesInProtectionGroup(input: ListResourcesInProtectionGroupInput) async throws -> ListResourcesInProtectionGroupOutputResponse
    {
        typealias listResourcesInProtectionGroupContinuation = CheckedContinuation<ListResourcesInProtectionGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResourcesInProtectionGroupContinuation) in
            listResourcesInProtectionGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS Shield.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds or updates tags for a resource in AWS Shield.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes tags from a resource in AWS Shield.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the details of the list of email addresses and phone numbers that the DDoS Response Team (DRT) can use to contact you if you have proactive engagement enabled, for escalations to the DRT and to initiate proactive customer support.</p>
    func updateEmergencyContactSettings(input: UpdateEmergencyContactSettingsInput) async throws -> UpdateEmergencyContactSettingsOutputResponse
    {
        typealias updateEmergencyContactSettingsContinuation = CheckedContinuation<UpdateEmergencyContactSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEmergencyContactSettingsContinuation) in
            updateEmergencyContactSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an existing protection group. A protection group is a grouping of protected resources so they can be handled as a collective. This resource grouping improves the accuracy of detection and reduces false positives. </p>
    func updateProtectionGroup(input: UpdateProtectionGroupInput) async throws -> UpdateProtectionGroupOutputResponse
    {
        typealias updateProtectionGroupContinuation = CheckedContinuation<UpdateProtectionGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProtectionGroupContinuation) in
            updateProtectionGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the details of an existing subscription. Only enter values for parameters you want to change. Empty parameters are not updated.</p>
    func updateSubscription(input: UpdateSubscriptionInput) async throws -> UpdateSubscriptionOutputResponse
    {
        typealias updateSubscriptionContinuation = CheckedContinuation<UpdateSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSubscriptionContinuation) in
            updateSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
