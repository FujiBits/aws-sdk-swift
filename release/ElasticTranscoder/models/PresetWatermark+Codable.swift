// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PresetWatermark: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case horizontalAlign = "HorizontalAlign"
        case horizontalOffset = "HorizontalOffset"
        case id = "Id"
        case maxHeight = "MaxHeight"
        case maxWidth = "MaxWidth"
        case opacity = "Opacity"
        case sizingPolicy = "SizingPolicy"
        case target = "Target"
        case verticalAlign = "VerticalAlign"
        case verticalOffset = "VerticalOffset"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let horizontalAlign = horizontalAlign {
            try encodeContainer.encode(horizontalAlign, forKey: .horizontalAlign)
        }
        if let horizontalOffset = horizontalOffset {
            try encodeContainer.encode(horizontalOffset, forKey: .horizontalOffset)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let maxHeight = maxHeight {
            try encodeContainer.encode(maxHeight, forKey: .maxHeight)
        }
        if let maxWidth = maxWidth {
            try encodeContainer.encode(maxWidth, forKey: .maxWidth)
        }
        if let opacity = opacity {
            try encodeContainer.encode(opacity, forKey: .opacity)
        }
        if let sizingPolicy = sizingPolicy {
            try encodeContainer.encode(sizingPolicy, forKey: .sizingPolicy)
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if let verticalAlign = verticalAlign {
            try encodeContainer.encode(verticalAlign, forKey: .verticalAlign)
        }
        if let verticalOffset = verticalOffset {
            try encodeContainer.encode(verticalOffset, forKey: .verticalOffset)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let maxWidthDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maxWidth)
        maxWidth = maxWidthDecoded
        let maxHeightDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maxHeight)
        maxHeight = maxHeightDecoded
        let sizingPolicyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sizingPolicy)
        sizingPolicy = sizingPolicyDecoded
        let horizontalAlignDecoded = try containerValues.decodeIfPresent(String.self, forKey: .horizontalAlign)
        horizontalAlign = horizontalAlignDecoded
        let horizontalOffsetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .horizontalOffset)
        horizontalOffset = horizontalOffsetDecoded
        let verticalAlignDecoded = try containerValues.decodeIfPresent(String.self, forKey: .verticalAlign)
        verticalAlign = verticalAlignDecoded
        let verticalOffsetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .verticalOffset)
        verticalOffset = verticalOffsetDecoded
        let opacityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .opacity)
        opacity = opacityDecoded
        let targetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .target)
        target = targetDecoded
    }
}
