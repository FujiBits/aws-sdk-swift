// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Notifications: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case completed = "Completed"
        case error = "Error"
        case progressing = "Progressing"
        case warning = "Warning"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completed = completed {
            try encodeContainer.encode(completed, forKey: .completed)
        }
        if let error = error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let progressing = progressing {
            try encodeContainer.encode(progressing, forKey: .progressing)
        }
        if let warning = warning {
            try encodeContainer.encode(warning, forKey: .warning)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let progressingDecoded = try containerValues.decodeIfPresent(String.self, forKey: .progressing)
        progressing = progressingDecoded
        let completedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .completed)
        completed = completedDecoded
        let warningDecoded = try containerValues.decodeIfPresent(String.self, forKey: .warning)
        warning = warningDecoded
        let errorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .error)
        error = errorDecoded
    }
}
