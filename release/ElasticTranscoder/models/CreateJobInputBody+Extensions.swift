// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateJobInputBody: Equatable {
    public let pipelineId: String?
    public let input: JobInput?
    public let inputs: [JobInput]?
    public let output: CreateJobOutput?
    public let outputs: [CreateJobOutput]?
    public let outputKeyPrefix: String?
    public let playlists: [CreateJobPlaylist]?
    public let userMetadata: [String:String]?
}

extension CreateJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case input = "Input"
        case inputs = "Inputs"
        case output = "Output"
        case outputKeyPrefix = "OutputKeyPrefix"
        case outputs = "Outputs"
        case pipelineId = "PipelineId"
        case playlists = "Playlists"
        case userMetadata = "UserMetadata"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let inputDecoded = try containerValues.decodeIfPresent(JobInput.self, forKey: .input)
        input = inputDecoded
        let inputsContainer = try containerValues.decodeIfPresent([JobInput?].self, forKey: .inputs)
        var inputsDecoded0:[JobInput]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [JobInput]()
            for structure0 in inputsContainer {
                if let structure0 = structure0 {
                    inputsDecoded0?.append(structure0)
                }
            }
        }
        inputs = inputsDecoded0
        let outputDecoded = try containerValues.decodeIfPresent(CreateJobOutput.self, forKey: .output)
        output = outputDecoded
        let outputsContainer = try containerValues.decodeIfPresent([CreateJobOutput?].self, forKey: .outputs)
        var outputsDecoded0:[CreateJobOutput]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [CreateJobOutput]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
        let outputKeyPrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputKeyPrefix)
        outputKeyPrefix = outputKeyPrefixDecoded
        let playlistsContainer = try containerValues.decodeIfPresent([CreateJobPlaylist?].self, forKey: .playlists)
        var playlistsDecoded0:[CreateJobPlaylist]? = nil
        if let playlistsContainer = playlistsContainer {
            playlistsDecoded0 = [CreateJobPlaylist]()
            for structure0 in playlistsContainer {
                if let structure0 = structure0 {
                    playlistsDecoded0?.append(structure0)
                }
            }
        }
        playlists = playlistsDecoded0
        let userMetadataContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .userMetadata)
        var userMetadataDecoded0: [String:String]? = nil
        if let userMetadataContainer = userMetadataContainer {
            userMetadataDecoded0 = [String:String]()
            for (key0, string0) in userMetadataContainer {
                if let string0 = string0 {
                    userMetadataDecoded0?[key0] = string0
                }
            }
        }
        userMetadata = userMetadataDecoded0
    }
}
