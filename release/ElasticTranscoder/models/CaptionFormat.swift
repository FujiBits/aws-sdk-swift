// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The file format of the output captions. If you leave this value blank, Elastic Transcoder returns an error.</p>
public struct CaptionFormat: Equatable {
    /// <p>The encryption settings, if any, that you want Elastic Transcoder to apply to your caption formats.</p>
    public let encryption: Encryption?
    /// <p>The format you specify determines whether Elastic Transcoder generates an embedded or sidecar caption for this output.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Valid Embedded Caption Formats:</b>
    ///                </p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <b>for FLAC</b>: None</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <b>For MP3</b>: None</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <b>For MP4</b>: mov-text</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <b>For MPEG-TS</b>: None</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <b>For ogg</b>: None</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <b>For webm</b>: None</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Valid Sidecar Caption Formats:</b> Elastic Transcoder
    ///             supports dfxp (first div element only), scc, srt, and webvtt.
    ///             If you want ttml or smpte-tt
    ///             compatible captions, specify dfxp as your output format.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <b>For FMP4</b>: dfxp</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <b>Non-FMP4 outputs</b>: All sidecar types</p>
    ///                   </li>
    ///                </ul>
    ///                <p>
    ///                   <code>fmp4</code> captions have an extension of <code>.ismt</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let format: String?
    /// <p>The prefix for caption filenames, in the form <i>description</i>-<code>{language}</code>, where:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <i>description</i> is a description of the video.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>{language}</code> is a literal value that Elastic Transcoder replaces with the two- or three-letter
    ///             code for the language of the caption in the output file names.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If you don't include <code>{language}</code> in the file name pattern, Elastic Transcoder automatically
    ///          appends "<code>{language}</code>" to the value that you specify for the description.  In addition,
    ///          Elastic Transcoder automatically appends the count to the end of the segment files.</p>
    ///          <p>For example, suppose you're transcoding into srt format. When you enter "Sydney-{language}-sunrise",
    ///           and the language of the captions is English (en), the name of the first caption file is be
    ///           Sydney-en-sunrise00000.srt.</p>
    public let pattern: String?

    public init (
        encryption: Encryption? = nil,
        format: String? = nil,
        pattern: String? = nil
    )
    {
        self.encryption = encryption
        self.format = format
        self.pattern = pattern
    }
}

extension CaptionFormat: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CaptionFormat(encryption: \(String(describing: encryption)), format: \(String(describing: format)), pattern: \(String(describing: pattern)))"}
}
