// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CaptionSource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case encryption = "Encryption"
        case key = "Key"
        case label = "Label"
        case language = "Language"
        case timeOffset = "TimeOffset"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryption = encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let label = label {
            try encodeContainer.encode(label, forKey: .label)
        }
        if let language = language {
            try encodeContainer.encode(language, forKey: .language)
        }
        if let timeOffset = timeOffset {
            try encodeContainer.encode(timeOffset, forKey: .timeOffset)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let languageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .language)
        language = languageDecoded
        let timeOffsetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timeOffset)
        timeOffset = timeOffsetDecoded
        let labelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .label)
        label = labelDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(Encryption.self, forKey: .encryption)
        encryption = encryptionDecoded
    }
}
