// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct TestRoleInputHeadersMiddleware: Middleware {
    public let id: String = "TestRoleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TestRoleInput>,
                  next: H) -> Swift.Result<OperationOutput<TestRoleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TestRoleInput>
    public typealias MOutput = OperationOutput<TestRoleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TestRoleOutputError>
}

public struct TestRoleInputQueryItemMiddleware: Middleware {
    public let id: String = "TestRoleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TestRoleInput>,
                  next: H) -> Swift.Result<OperationOutput<TestRoleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TestRoleInput>
    public typealias MOutput = OperationOutput<TestRoleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TestRoleOutputError>
}

public struct TestRoleInputBodyMiddleware: Middleware {
    public let id: String = "TestRoleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TestRoleInput>,
                  next: H) -> Swift.Result<OperationOutput<TestRoleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TestRoleInput>
    public typealias MOutput = OperationOutput<TestRoleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TestRoleOutputError>
}

extension TestRoleInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inputBucket = "InputBucket"
        case outputBucket = "OutputBucket"
        case role = "Role"
        case topics = "Topics"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputBucket = inputBucket {
            try encodeContainer.encode(inputBucket, forKey: .inputBucket)
        }
        if let outputBucket = outputBucket {
            try encodeContainer.encode(outputBucket, forKey: .outputBucket)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let topics = topics {
            var topicsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topics)
            for snstopics0 in topics {
                try topicsContainer.encode(snstopics0)
            }
        }
    }
}
