// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListJobsByPipelineInputHeadersMiddleware: Middleware {
    public let id: String = "ListJobsByPipelineInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListJobsByPipelineInput>,
                  next: H) -> Swift.Result<OperationOutput<ListJobsByPipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListJobsByPipelineInput>
    public typealias MOutput = OperationOutput<ListJobsByPipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListJobsByPipelineOutputError>
}

public struct ListJobsByPipelineInputQueryItemMiddleware: Middleware {
    public let id: String = "ListJobsByPipelineInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListJobsByPipelineInput>,
                  next: H) -> Swift.Result<OperationOutput<ListJobsByPipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let pageToken = input.operationInput.pageToken {
            let pageTokenQueryItem = URLQueryItem(name: "PageToken".urlPercentEncoding(), value: String(pageToken).urlPercentEncoding())
            input.builder.withQueryItem(pageTokenQueryItem)
        }
        if let ascending = input.operationInput.ascending {
            let ascendingQueryItem = URLQueryItem(name: "Ascending".urlPercentEncoding(), value: String(ascending).urlPercentEncoding())
            input.builder.withQueryItem(ascendingQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListJobsByPipelineInput>
    public typealias MOutput = OperationOutput<ListJobsByPipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListJobsByPipelineOutputError>
}

extension ListJobsByPipelineInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
