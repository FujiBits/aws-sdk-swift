// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Timing: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case finishTimeMillis = "FinishTimeMillis"
        case startTimeMillis = "StartTimeMillis"
        case submitTimeMillis = "SubmitTimeMillis"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let finishTimeMillis = finishTimeMillis {
            try encodeContainer.encode(finishTimeMillis, forKey: .finishTimeMillis)
        }
        if let startTimeMillis = startTimeMillis {
            try encodeContainer.encode(startTimeMillis, forKey: .startTimeMillis)
        }
        if let submitTimeMillis = submitTimeMillis {
            try encodeContainer.encode(submitTimeMillis, forKey: .submitTimeMillis)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let submitTimeMillisDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .submitTimeMillis)
        submitTimeMillis = submitTimeMillisDecoded
        let startTimeMillisDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .startTimeMillis)
        startTimeMillis = startTimeMillisDecoded
        let finishTimeMillisDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .finishTimeMillis)
        finishTimeMillis = finishTimeMillisDecoded
    }
}
