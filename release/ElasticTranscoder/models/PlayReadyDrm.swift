// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The PlayReady DRM settings, if any, that you want Elastic Transcoder to apply to the output files associated with this playlist.</p>
///          <p>PlayReady DRM encrypts your media files
/// using <code>aes-ctr</code> encryption.</p>
///          <p>If you use DRM for an <code>HLSv3</code> playlist, your outputs must have a master playlist.</p>
public struct PlayReadyDrm: Equatable {
    /// <p>The type of DRM, if any, that you want Elastic Transcoder to apply to the output files associated with this playlist.</p>
    public let format: String?
    /// <p>The series of random bits created by a random bit generator, unique for every encryption operation,
    ///     that you want Elastic Transcoder to use to encrypt your files. The initialization vector must be base64-encoded, and it
    ///     must be exactly 8 bytes long before being base64-encoded. If no initialization vector is provided, Elastic Transcoder
    ///     generates one for you.</p>
    public let initializationVector: String?
    /// <p>The DRM key for your file, provided by your DRM license provider. The key must be base64-encoded,
    ///     and it must be one of the following bit lengths before being base64-encoded:</p>
    ///          <p>
    ///             <code>128</code>, <code>192</code>, or <code>256</code>. </p>
    ///          <p>The key must also be encrypted by using AWS KMS.</p>
    public let key: String?
    /// <p>The ID for your DRM key, so that your DRM license provider knows which key to provide.</p>
    ///          <p>The key ID must be provided in big endian, and Elastic Transcoder converts it to little endian before inserting
    ///     it into the PlayReady DRM headers. If you are unsure whether your license server provides your key ID in
    ///     big or little endian, check with your DRM provider.</p>
    public let keyId: String?
    /// <p>The MD5 digest of the key used for DRM on your file, and that you want Elastic Transcoder to use as a checksum
    ///     to make sure your key was not corrupted in transit. The key MD5 must be base64-encoded, and it must be
    ///     exactly 16 bytes before being base64-encoded.</p>
    public let keyMd5: String?
    /// <p>The location of the license key required to play DRM content. The URL must be an absolute path,
    /// and is referenced by the PlayReady header. The PlayReady header is referenced in the protection
    /// header of the client manifest for Smooth Streaming outputs, and in the EXT-X-DXDRM and EXT-XDXDRMINFO
    /// metadata tags for HLS playlist outputs. An example URL looks like this:
    /// <code>https://www.example.com/exampleKey/</code>
    ///          </p>
    public let licenseAcquisitionUrl: String?

    public init (
        format: String? = nil,
        initializationVector: String? = nil,
        key: String? = nil,
        keyId: String? = nil,
        keyMd5: String? = nil,
        licenseAcquisitionUrl: String? = nil
    )
    {
        self.format = format
        self.initializationVector = initializationVector
        self.key = key
        self.keyId = keyId
        self.keyMd5 = keyMd5
        self.licenseAcquisitionUrl = licenseAcquisitionUrl
    }
}

extension PlayReadyDrm: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PlayReadyDrm(format: \(String(describing: format)), initializationVector: \(String(describing: initializationVector)), key: \(String(describing: key)), keyId: \(String(describing: keyId)), keyMd5: \(String(describing: keyMd5)), licenseAcquisitionUrl: \(String(describing: licenseAcquisitionUrl)))"}
}
