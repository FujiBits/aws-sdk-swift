// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdatePipelineInputHeadersMiddleware: Middleware {
    public let id: String = "UpdatePipelineInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdatePipelineInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdatePipelineInput>
    public typealias MOutput = OperationOutput<UpdatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdatePipelineOutputError>
}

public struct UpdatePipelineInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdatePipelineInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdatePipelineInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdatePipelineInput>
    public typealias MOutput = OperationOutput<UpdatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdatePipelineOutputError>
}

public struct UpdatePipelineInputBodyMiddleware: Middleware {
    public let id: String = "UpdatePipelineInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdatePipelineInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdatePipelineInput>
    public typealias MOutput = OperationOutput<UpdatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdatePipelineOutputError>
}

extension UpdatePipelineInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case awsKmsKeyArn = "AwsKmsKeyArn"
        case contentConfig = "ContentConfig"
        case inputBucket = "InputBucket"
        case name = "Name"
        case notifications = "Notifications"
        case role = "Role"
        case thumbnailConfig = "ThumbnailConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsKmsKeyArn = awsKmsKeyArn {
            try encodeContainer.encode(awsKmsKeyArn, forKey: .awsKmsKeyArn)
        }
        if let contentConfig = contentConfig {
            try encodeContainer.encode(contentConfig, forKey: .contentConfig)
        }
        if let inputBucket = inputBucket {
            try encodeContainer.encode(inputBucket, forKey: .inputBucket)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notifications = notifications {
            try encodeContainer.encode(notifications, forKey: .notifications)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let thumbnailConfig = thumbnailConfig {
            try encodeContainer.encode(thumbnailConfig, forKey: .thumbnailConfig)
        }
    }
}
