// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The .jpg or .png file associated with an audio file.</p>
public struct JobAlbumArt: Equatable {
    /// <p>The file to be used as album art. There can be multiple artworks associated with an audio file,
    ///             to a maximum of 20. Valid formats are <code>.jpg</code> and <code>.png</code>
    ///          </p>
    public let artwork: [Artwork]?
    /// <p>A policy that determines how Elastic Transcoder handles the existence of multiple album artwork files.</p>
    ///
    ///             <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Replace:</code> The specified album art replaces any existing album art.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Prepend:</code> The specified album art is placed in front of any existing
    ///                     album art.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Append:</code> The specified album art is placed after any existing album art.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Fallback:</code> If the original input file contains artwork, Elastic Transcoder uses that
    ///                     artwork for the output. If the original input does not contain artwork, Elastic Transcoder uses the
    ///                     specified album art file.</p>
    ///             </li>
    ///          </ul>
    public let mergePolicy: String?

    public init (
        artwork: [Artwork]? = nil,
        mergePolicy: String? = nil
    )
    {
        self.artwork = artwork
        self.mergePolicy = mergePolicy
    }
}

extension JobAlbumArt: CustomDebugStringConvertible {
    public var debugDescription: String {
        "JobAlbumArt(artwork: \(String(describing: artwork)), mergePolicy: \(String(describing: mergePolicy)))"}
}
