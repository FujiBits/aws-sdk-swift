// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Amazon OpenSearch Configuration Service Use the Amazon OpenSearch configuration API to create, configure, and manage Amazon OpenSearch Service domains. For sample code that uses the configuration API, see the [ Amazon OpenSearch Service Developer Guide](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html). The guide also contains [ sample code for sending signed HTTP requests to the OpenSearch APIs](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html). The endpoint for configuration service requests is region-specific: es.region.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see [Regions and Endpoints](http://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions).
public protocol OpenSearchClientProtocol {
    /// Allows the remote domain owner to accept an inbound cross-cluster connection request.
    func acceptInboundConnection(input: AcceptInboundConnectionInput, completion: @escaping (ClientRuntime.SdkResult<AcceptInboundConnectionOutputResponse, AcceptInboundConnectionOutputError>) -> Void)
    /// Attaches tags to an existing domain. Tags are a set of case-sensitive key value pairs. An domain can have up to 10 tags. See [ Tagging Amazon OpenSearch Service domains](http://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains.html#managedomains-awsresorcetagging) for more information.
    func addTags(input: AddTagsInput, completion: @escaping (ClientRuntime.SdkResult<AddTagsOutputResponse, AddTagsOutputError>) -> Void)
    /// Associates a package with an Amazon OpenSearch Service domain.
    func associatePackage(input: AssociatePackageInput, completion: @escaping (ClientRuntime.SdkResult<AssociatePackageOutputResponse, AssociatePackageOutputError>) -> Void)
    /// Cancels a scheduled service software update for an Amazon OpenSearch Service domain. You can only perform this operation before the AutomatedUpdateDate and when the UpdateStatus is in the PENDING_UPDATE state.
    func cancelServiceSoftwareUpdate(input: CancelServiceSoftwareUpdateInput, completion: @escaping (ClientRuntime.SdkResult<CancelServiceSoftwareUpdateOutputResponse, CancelServiceSoftwareUpdateOutputError>) -> Void)
    /// Creates a new Amazon OpenSearch Service domain. For more information, see [Creating and managing Amazon OpenSearch Service domains ](http://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html) in the Amazon OpenSearch Service Developer Guide.
    func createDomain(input: CreateDomainInput, completion: @escaping (ClientRuntime.SdkResult<CreateDomainOutputResponse, CreateDomainOutputError>) -> Void)
    /// Creates a new cross-cluster connection from a local OpenSearch domain to a remote OpenSearch domain.
    func createOutboundConnection(input: CreateOutboundConnectionInput, completion: @escaping (ClientRuntime.SdkResult<CreateOutboundConnectionOutputResponse, CreateOutboundConnectionOutputError>) -> Void)
    /// Create a package for use with Amazon OpenSearch Service domains.
    func createPackage(input: CreatePackageInput, completion: @escaping (ClientRuntime.SdkResult<CreatePackageOutputResponse, CreatePackageOutputError>) -> Void)
    /// Permanently deletes the specified domain and all of its data. Once a domain is deleted, it cannot be recovered.
    func deleteDomain(input: DeleteDomainInput, completion: @escaping (ClientRuntime.SdkResult<DeleteDomainOutputResponse, DeleteDomainOutputError>) -> Void)
    /// Allows the remote domain owner to delete an existing inbound cross-cluster connection.
    func deleteInboundConnection(input: DeleteInboundConnectionInput, completion: @escaping (ClientRuntime.SdkResult<DeleteInboundConnectionOutputResponse, DeleteInboundConnectionOutputError>) -> Void)
    /// Allows the local domain owner to delete an existing outbound cross-cluster connection.
    func deleteOutboundConnection(input: DeleteOutboundConnectionInput, completion: @escaping (ClientRuntime.SdkResult<DeleteOutboundConnectionOutputResponse, DeleteOutboundConnectionOutputError>) -> Void)
    /// Deletes the package.
    func deletePackage(input: DeletePackageInput, completion: @escaping (ClientRuntime.SdkResult<DeletePackageOutputResponse, DeletePackageOutputError>) -> Void)
    /// Returns domain configuration information about the specified domain, including the domain ID, domain endpoint, and domain ARN.
    func describeDomain(input: DescribeDomainInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDomainOutputResponse, DescribeDomainOutputError>) -> Void)
    /// Provides scheduled Auto-Tune action details for the domain, such as Auto-Tune action type, description, severity, and scheduled date.
    func describeDomainAutoTunes(input: DescribeDomainAutoTunesInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDomainAutoTunesOutputResponse, DescribeDomainAutoTunesOutputError>) -> Void)
    /// Provides cluster configuration information about the specified domain, such as the state, creation date, update version, and update date for cluster options.
    func describeDomainConfig(input: DescribeDomainConfigInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDomainConfigOutputResponse, DescribeDomainConfigOutputError>) -> Void)
    /// Returns domain configuration information about the specified domains, including the domain ID, domain endpoint, and domain ARN.
    func describeDomains(input: DescribeDomainsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDomainsOutputResponse, DescribeDomainsOutputError>) -> Void)
    /// Lists all the inbound cross-cluster connections for a remote domain.
    func describeInboundConnections(input: DescribeInboundConnectionsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeInboundConnectionsOutputResponse, DescribeInboundConnectionsOutputError>) -> Void)
    /// Describe the limits for a given instance type and OpenSearch or Elasticsearch version. When modifying an existing domain, specify the [DomainName] to see which limits you can modify.
    func describeInstanceTypeLimits(input: DescribeInstanceTypeLimitsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeInstanceTypeLimitsOutputResponse, DescribeInstanceTypeLimitsOutputError>) -> Void)
    /// Lists all the outbound cross-cluster connections for a local domain.
    func describeOutboundConnections(input: DescribeOutboundConnectionsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeOutboundConnectionsOutputResponse, DescribeOutboundConnectionsOutputError>) -> Void)
    /// Describes all packages available to Amazon OpenSearch Service domains. Includes options for filtering, limiting the number of results, and pagination.
    func describePackages(input: DescribePackagesInput, completion: @escaping (ClientRuntime.SdkResult<DescribePackagesOutputResponse, DescribePackagesOutputError>) -> Void)
    /// Lists available reserved OpenSearch instance offerings.
    func describeReservedInstanceOfferings(input: DescribeReservedInstanceOfferingsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeReservedInstanceOfferingsOutputResponse, DescribeReservedInstanceOfferingsOutputError>) -> Void)
    /// Returns information about reserved OpenSearch instances for this account.
    func describeReservedInstances(input: DescribeReservedInstancesInput, completion: @escaping (ClientRuntime.SdkResult<DescribeReservedInstancesOutputResponse, DescribeReservedInstancesOutputError>) -> Void)
    /// Dissociates a package from the Amazon OpenSearch Service domain.
    func dissociatePackage(input: DissociatePackageInput, completion: @escaping (ClientRuntime.SdkResult<DissociatePackageOutputResponse, DissociatePackageOutputError>) -> Void)
    /// Returns a list of upgrade-compatible versions of OpenSearch/Elasticsearch. You can optionally pass a [DomainName] to get all upgrade-compatible versions of OpenSearch/Elasticsearch for that specific domain.
    func getCompatibleVersions(input: GetCompatibleVersionsInput, completion: @escaping (ClientRuntime.SdkResult<GetCompatibleVersionsOutputResponse, GetCompatibleVersionsOutputError>) -> Void)
    /// Returns a list of package versions, along with their creation time and commit message.
    func getPackageVersionHistory(input: GetPackageVersionHistoryInput, completion: @escaping (ClientRuntime.SdkResult<GetPackageVersionHistoryOutputResponse, GetPackageVersionHistoryOutputError>) -> Void)
    /// Retrieves the complete history of the last 10 upgrades performed on the domain.
    func getUpgradeHistory(input: GetUpgradeHistoryInput, completion: @escaping (ClientRuntime.SdkResult<GetUpgradeHistoryOutputResponse, GetUpgradeHistoryOutputError>) -> Void)
    /// Retrieves the latest status of the last upgrade or upgrade eligibility check performed on the domain.
    func getUpgradeStatus(input: GetUpgradeStatusInput, completion: @escaping (ClientRuntime.SdkResult<GetUpgradeStatusOutputResponse, GetUpgradeStatusOutputError>) -> Void)
    /// Returns the names of all domains owned by the current user's account.
    func listDomainNames(input: ListDomainNamesInput, completion: @escaping (ClientRuntime.SdkResult<ListDomainNamesOutputResponse, ListDomainNamesOutputError>) -> Void)
    /// Lists all Amazon OpenSearch Service domains associated with the package.
    func listDomainsForPackage(input: ListDomainsForPackageInput, completion: @escaping (ClientRuntime.SdkResult<ListDomainsForPackageOutputResponse, ListDomainsForPackageOutputError>) -> Void)
    func listInstanceTypeDetails(input: ListInstanceTypeDetailsInput, completion: @escaping (ClientRuntime.SdkResult<ListInstanceTypeDetailsOutputResponse, ListInstanceTypeDetailsOutputError>) -> Void)
    /// Lists all packages associated with the Amazon OpenSearch Service domain.
    func listPackagesForDomain(input: ListPackagesForDomainInput, completion: @escaping (ClientRuntime.SdkResult<ListPackagesForDomainOutputResponse, ListPackagesForDomainOutputError>) -> Void)
    /// Returns all tags for the given domain.
    func listTags(input: ListTagsInput, completion: @escaping (ClientRuntime.SdkResult<ListTagsOutputResponse, ListTagsOutputError>) -> Void)
    /// List all supported versions of OpenSearch and Elasticsearch.
    func listVersions(input: ListVersionsInput, completion: @escaping (ClientRuntime.SdkResult<ListVersionsOutputResponse, ListVersionsOutputError>) -> Void)
    /// Allows you to purchase reserved OpenSearch instances.
    func purchaseReservedInstanceOffering(input: PurchaseReservedInstanceOfferingInput, completion: @escaping (ClientRuntime.SdkResult<PurchaseReservedInstanceOfferingOutputResponse, PurchaseReservedInstanceOfferingOutputError>) -> Void)
    /// Allows the remote domain owner to reject an inbound cross-cluster connection request.
    func rejectInboundConnection(input: RejectInboundConnectionInput, completion: @escaping (ClientRuntime.SdkResult<RejectInboundConnectionOutputResponse, RejectInboundConnectionOutputError>) -> Void)
    /// Removes the specified set of tags from the given domain.
    func removeTags(input: RemoveTagsInput, completion: @escaping (ClientRuntime.SdkResult<RemoveTagsOutputResponse, RemoveTagsOutputError>) -> Void)
    /// Schedules a service software update for an Amazon OpenSearch Service domain.
    func startServiceSoftwareUpdate(input: StartServiceSoftwareUpdateInput, completion: @escaping (ClientRuntime.SdkResult<StartServiceSoftwareUpdateOutputResponse, StartServiceSoftwareUpdateOutputError>) -> Void)
    /// Modifies the cluster configuration of the specified domain, such as setting the instance type and the number of instances.
    func updateDomainConfig(input: UpdateDomainConfigInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDomainConfigOutputResponse, UpdateDomainConfigOutputError>) -> Void)
    /// Updates a package for use with Amazon OpenSearch Service domains.
    func updatePackage(input: UpdatePackageInput, completion: @escaping (ClientRuntime.SdkResult<UpdatePackageOutputResponse, UpdatePackageOutputError>) -> Void)
    /// Allows you to either upgrade your domain or perform an upgrade eligibility check to a compatible version of OpenSearch or Elasticsearch.
    func upgradeDomain(input: UpgradeDomainInput, completion: @escaping (ClientRuntime.SdkResult<UpgradeDomainOutputResponse, UpgradeDomainOutputError>) -> Void)
}

public enum OpenSearchClientTypes {}
