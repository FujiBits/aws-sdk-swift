// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension IoTTwinMakerClient {
    /// Sets values for multiple time series properties.
    func batchPutPropertyValues(input: BatchPutPropertyValuesInput) async throws -> BatchPutPropertyValuesOutputResponse
    {
        typealias batchPutPropertyValuesContinuation = CheckedContinuation<BatchPutPropertyValuesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchPutPropertyValuesContinuation) in
            batchPutPropertyValues(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a component type. TwinMaker is in public preview and is subject to change.
    func createComponentType(input: CreateComponentTypeInput) async throws -> CreateComponentTypeOutputResponse
    {
        typealias createComponentTypeContinuation = CheckedContinuation<CreateComponentTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createComponentTypeContinuation) in
            createComponentType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an entity.
    func createEntity(input: CreateEntityInput) async throws -> CreateEntityOutputResponse
    {
        typealias createEntityContinuation = CheckedContinuation<CreateEntityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEntityContinuation) in
            createEntity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a scene.
    func createScene(input: CreateSceneInput) async throws -> CreateSceneOutputResponse
    {
        typealias createSceneContinuation = CheckedContinuation<CreateSceneOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSceneContinuation) in
            createScene(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a workplace.
    func createWorkspace(input: CreateWorkspaceInput) async throws -> CreateWorkspaceOutputResponse
    {
        typealias createWorkspaceContinuation = CheckedContinuation<CreateWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWorkspaceContinuation) in
            createWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a component type.
    func deleteComponentType(input: DeleteComponentTypeInput) async throws -> DeleteComponentTypeOutputResponse
    {
        typealias deleteComponentTypeContinuation = CheckedContinuation<DeleteComponentTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteComponentTypeContinuation) in
            deleteComponentType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an entity.
    func deleteEntity(input: DeleteEntityInput) async throws -> DeleteEntityOutputResponse
    {
        typealias deleteEntityContinuation = CheckedContinuation<DeleteEntityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEntityContinuation) in
            deleteEntity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a scene.
    func deleteScene(input: DeleteSceneInput) async throws -> DeleteSceneOutputResponse
    {
        typealias deleteSceneContinuation = CheckedContinuation<DeleteSceneOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSceneContinuation) in
            deleteScene(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a workspace.
    func deleteWorkspace(input: DeleteWorkspaceInput) async throws -> DeleteWorkspaceOutputResponse
    {
        typealias deleteWorkspaceContinuation = CheckedContinuation<DeleteWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWorkspaceContinuation) in
            deleteWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about a component type.
    func getComponentType(input: GetComponentTypeInput) async throws -> GetComponentTypeOutputResponse
    {
        typealias getComponentTypeContinuation = CheckedContinuation<GetComponentTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getComponentTypeContinuation) in
            getComponentType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about an entity.
    func getEntity(input: GetEntityInput) async throws -> GetEntityOutputResponse
    {
        typealias getEntityContinuation = CheckedContinuation<GetEntityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEntityContinuation) in
            getEntity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the property values for a component, component type, entity, or workspace. You must specify a value for either componentName, componentTypeId, entityId, or workspaceId.
    func getPropertyValue(input: GetPropertyValueInput) async throws -> GetPropertyValueOutputResponse
    {
        typealias getPropertyValueContinuation = CheckedContinuation<GetPropertyValueOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPropertyValueContinuation) in
            getPropertyValue(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about the history of a time series property value for a component, component type, entity, or workspace. You must specify a value for workspaceId. For entity-specific queries, specify values for componentName and entityId. For cross-entity quries, specify a value for componentTypeId.
    func getPropertyValueHistory(input: GetPropertyValueHistoryInput) async throws -> GetPropertyValueHistoryOutputResponse
    {
        typealias getPropertyValueHistoryContinuation = CheckedContinuation<GetPropertyValueHistoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPropertyValueHistoryContinuation) in
            getPropertyValueHistory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about a scene.
    func getScene(input: GetSceneInput) async throws -> GetSceneOutputResponse
    {
        typealias getSceneContinuation = CheckedContinuation<GetSceneOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSceneContinuation) in
            getScene(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about a workspace.
    func getWorkspace(input: GetWorkspaceInput) async throws -> GetWorkspaceOutputResponse
    {
        typealias getWorkspaceContinuation = CheckedContinuation<GetWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWorkspaceContinuation) in
            getWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all component types in a workspace.
    func listComponentTypes(input: ListComponentTypesInput) async throws -> ListComponentTypesOutputResponse
    {
        typealias listComponentTypesContinuation = CheckedContinuation<ListComponentTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listComponentTypesContinuation) in
            listComponentTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all entities in a workspace.
    func listEntities(input: ListEntitiesInput) async throws -> ListEntitiesOutputResponse
    {
        typealias listEntitiesContinuation = CheckedContinuation<ListEntitiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEntitiesContinuation) in
            listEntities(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all scenes in a workspace.
    func listScenes(input: ListScenesInput) async throws -> ListScenesOutputResponse
    {
        typealias listScenesContinuation = CheckedContinuation<ListScenesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listScenesContinuation) in
            listScenes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all tags associated with a resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about workspaces in the current account.
    func listWorkspaces(input: ListWorkspacesInput) async throws -> ListWorkspacesOutputResponse
    {
        typealias listWorkspacesContinuation = CheckedContinuation<ListWorkspacesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWorkspacesContinuation) in
            listWorkspaces(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds tags to a resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes tags from a resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates information in a component type.
    func updateComponentType(input: UpdateComponentTypeInput) async throws -> UpdateComponentTypeOutputResponse
    {
        typealias updateComponentTypeContinuation = CheckedContinuation<UpdateComponentTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateComponentTypeContinuation) in
            updateComponentType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an entity.
    func updateEntity(input: UpdateEntityInput) async throws -> UpdateEntityOutputResponse
    {
        typealias updateEntityContinuation = CheckedContinuation<UpdateEntityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEntityContinuation) in
            updateEntity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a scene.
    func updateScene(input: UpdateSceneInput) async throws -> UpdateSceneOutputResponse
    {
        typealias updateSceneContinuation = CheckedContinuation<UpdateSceneOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSceneContinuation) in
            updateScene(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a workspace.
    func updateWorkspace(input: UpdateWorkspaceInput) async throws -> UpdateWorkspaceOutputResponse
    {
        typealias updateWorkspaceContinuation = CheckedContinuation<UpdateWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateWorkspaceContinuation) in
            updateWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
