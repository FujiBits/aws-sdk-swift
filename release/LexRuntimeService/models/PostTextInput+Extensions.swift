// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PostTextInputHeadersMiddleware: Middleware {
    public let id: String = "PostTextInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PostTextInput>,
                  next: H) -> Swift.Result<OperationOutput<PostTextOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PostTextInput>
    public typealias MOutput = OperationOutput<PostTextOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PostTextOutputError>
}

public struct PostTextInputQueryItemMiddleware: Middleware {
    public let id: String = "PostTextInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PostTextInput>,
                  next: H) -> Swift.Result<OperationOutput<PostTextOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PostTextInput>
    public typealias MOutput = OperationOutput<PostTextOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PostTextOutputError>
}

public struct PostTextInputBodyMiddleware: Middleware {
    public let id: String = "PostTextInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PostTextInput>,
                  next: H) -> Swift.Result<OperationOutput<PostTextOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PostTextInput>
    public typealias MOutput = OperationOutput<PostTextOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PostTextOutputError>
}

extension PostTextInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activeContexts
        case inputText
        case requestAttributes
        case sessionAttributes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeContexts = activeContexts {
            var activeContextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .activeContexts)
            for activecontextslist0 in activeContexts {
                try activeContextsContainer.encode(activecontextslist0)
            }
        }
        if let inputText = inputText {
            try encodeContainer.encode(inputText, forKey: .inputText)
        }
        if let requestAttributes = requestAttributes {
            var requestAttributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .requestAttributes)
            for (dictKey0, stringmap0) in requestAttributes {
                try requestAttributesContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let sessionAttributes = sessionAttributes {
            var sessionAttributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .sessionAttributes)
            for (dictKey0, stringmap0) in sessionAttributes {
                try sessionAttributesContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
