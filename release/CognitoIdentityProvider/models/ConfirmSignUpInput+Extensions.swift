// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ConfirmSignUpInputHeadersMiddleware: Middleware {
    public let id: String = "ConfirmSignUpInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ConfirmSignUpInput>,
                  next: H) -> Swift.Result<OperationOutput<ConfirmSignUpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ConfirmSignUpInput>
    public typealias MOutput = OperationOutput<ConfirmSignUpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ConfirmSignUpOutputError>
}

public struct ConfirmSignUpInputQueryItemMiddleware: Middleware {
    public let id: String = "ConfirmSignUpInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ConfirmSignUpInput>,
                  next: H) -> Swift.Result<OperationOutput<ConfirmSignUpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ConfirmSignUpInput>
    public typealias MOutput = OperationOutput<ConfirmSignUpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ConfirmSignUpOutputError>
}

public struct ConfirmSignUpInputBodyMiddleware: Middleware {
    public let id: String = "ConfirmSignUpInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ConfirmSignUpInput>,
                  next: H) -> Swift.Result<OperationOutput<ConfirmSignUpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ConfirmSignUpInput>
    public typealias MOutput = OperationOutput<ConfirmSignUpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ConfirmSignUpOutputError>
}

extension ConfirmSignUpInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case confirmationCode = "ConfirmationCode"
        case forceAliasCreation = "ForceAliasCreation"
        case secretHash = "SecretHash"
        case userContextData = "UserContextData"
        case username = "Username"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsMetadata = analyticsMetadata {
            try encodeContainer.encode(analyticsMetadata, forKey: .analyticsMetadata)
        }
        if let clientId = clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .clientMetadata)
            for (dictKey0, clientmetadatatype0) in clientMetadata {
                try clientMetadataContainer.encode(clientmetadatatype0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let confirmationCode = confirmationCode {
            try encodeContainer.encode(confirmationCode, forKey: .confirmationCode)
        }
        if forceAliasCreation != false {
            try encodeContainer.encode(forceAliasCreation, forKey: .forceAliasCreation)
        }
        if let secretHash = secretHash {
            try encodeContainer.encode(secretHash, forKey: .secretHash)
        }
        if let userContextData = userContextData {
            try encodeContainer.encode(userContextData, forKey: .userContextData)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}
