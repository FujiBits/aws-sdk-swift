// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateUserPoolClientInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateUserPoolClientInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateUserPoolClientInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateUserPoolClientOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateUserPoolClientInput>
    public typealias MOutput = OperationOutput<UpdateUserPoolClientOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateUserPoolClientOutputError>
}

public struct UpdateUserPoolClientInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateUserPoolClientInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateUserPoolClientInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateUserPoolClientOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateUserPoolClientInput>
    public typealias MOutput = OperationOutput<UpdateUserPoolClientOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateUserPoolClientOutputError>
}

public struct UpdateUserPoolClientInputBodyMiddleware: Middleware {
    public let id: String = "UpdateUserPoolClientInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateUserPoolClientInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateUserPoolClientOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateUserPoolClientInput>
    public typealias MOutput = OperationOutput<UpdateUserPoolClientOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateUserPoolClientOutputError>
}

extension UpdateUserPoolClientInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessTokenValidity = "AccessTokenValidity"
        case allowedOAuthFlows = "AllowedOAuthFlows"
        case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
        case allowedOAuthScopes = "AllowedOAuthScopes"
        case analyticsConfiguration = "AnalyticsConfiguration"
        case callbackURLs = "CallbackURLs"
        case clientId = "ClientId"
        case clientName = "ClientName"
        case defaultRedirectURI = "DefaultRedirectURI"
        case explicitAuthFlows = "ExplicitAuthFlows"
        case idTokenValidity = "IdTokenValidity"
        case logoutURLs = "LogoutURLs"
        case preventUserExistenceErrors = "PreventUserExistenceErrors"
        case readAttributes = "ReadAttributes"
        case refreshTokenValidity = "RefreshTokenValidity"
        case supportedIdentityProviders = "SupportedIdentityProviders"
        case tokenValidityUnits = "TokenValidityUnits"
        case userPoolId = "UserPoolId"
        case writeAttributes = "WriteAttributes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessTokenValidity = accessTokenValidity {
            try encodeContainer.encode(accessTokenValidity, forKey: .accessTokenValidity)
        }
        if let allowedOAuthFlows = allowedOAuthFlows {
            var allowedOAuthFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedOAuthFlows)
            for oauthflowstype0 in allowedOAuthFlows {
                try allowedOAuthFlowsContainer.encode(oauthflowstype0.rawValue)
            }
        }
        if allowedOAuthFlowsUserPoolClient != false {
            try encodeContainer.encode(allowedOAuthFlowsUserPoolClient, forKey: .allowedOAuthFlowsUserPoolClient)
        }
        if let allowedOAuthScopes = allowedOAuthScopes {
            var allowedOAuthScopesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedOAuthScopes)
            for scopelisttype0 in allowedOAuthScopes {
                try allowedOAuthScopesContainer.encode(scopelisttype0)
            }
        }
        if let analyticsConfiguration = analyticsConfiguration {
            try encodeContainer.encode(analyticsConfiguration, forKey: .analyticsConfiguration)
        }
        if let callbackURLs = callbackURLs {
            var callbackURLsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .callbackURLs)
            for callbackurlslisttype0 in callbackURLs {
                try callbackURLsContainer.encode(callbackurlslisttype0)
            }
        }
        if let clientId = clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientName = clientName {
            try encodeContainer.encode(clientName, forKey: .clientName)
        }
        if let defaultRedirectURI = defaultRedirectURI {
            try encodeContainer.encode(defaultRedirectURI, forKey: .defaultRedirectURI)
        }
        if let explicitAuthFlows = explicitAuthFlows {
            var explicitAuthFlowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .explicitAuthFlows)
            for explicitauthflowslisttype0 in explicitAuthFlows {
                try explicitAuthFlowsContainer.encode(explicitauthflowslisttype0.rawValue)
            }
        }
        if let idTokenValidity = idTokenValidity {
            try encodeContainer.encode(idTokenValidity, forKey: .idTokenValidity)
        }
        if let logoutURLs = logoutURLs {
            var logoutURLsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logoutURLs)
            for logouturlslisttype0 in logoutURLs {
                try logoutURLsContainer.encode(logouturlslisttype0)
            }
        }
        if let preventUserExistenceErrors = preventUserExistenceErrors {
            try encodeContainer.encode(preventUserExistenceErrors.rawValue, forKey: .preventUserExistenceErrors)
        }
        if let readAttributes = readAttributes {
            var readAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readAttributes)
            for clientpermissionlisttype0 in readAttributes {
                try readAttributesContainer.encode(clientpermissionlisttype0)
            }
        }
        if refreshTokenValidity != 0 {
            try encodeContainer.encode(refreshTokenValidity, forKey: .refreshTokenValidity)
        }
        if let supportedIdentityProviders = supportedIdentityProviders {
            var supportedIdentityProvidersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedIdentityProviders)
            for supportedidentityproviderslisttype0 in supportedIdentityProviders {
                try supportedIdentityProvidersContainer.encode(supportedidentityproviderslisttype0)
            }
        }
        if let tokenValidityUnits = tokenValidityUnits {
            try encodeContainer.encode(tokenValidityUnits, forKey: .tokenValidityUnits)
        }
        if let userPoolId = userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
        if let writeAttributes = writeAttributes {
            var writeAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .writeAttributes)
            for clientpermissionlisttype0 in writeAttributes {
                try writeAttributesContainer.encode(clientpermissionlisttype0)
            }
        }
    }
}
