// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension SecurityHubClient {
    /// Accepts the invitation to be a member account and be monitored by the Security Hub administrator
    ///          account that the invitation was sent from.
    ///          This operation is only used by member accounts that are not added through
    ///          Organizations.
    ///          When the member account accepts the invitation, permission is granted to the administrator
    ///          account to view findings generated in the member account.
    func acceptAdministratorInvitation(input: AcceptAdministratorInvitationInput) async throws -> AcceptAdministratorInvitationOutputResponse
    {
        typealias acceptAdministratorInvitationContinuation = CheckedContinuation<AcceptAdministratorInvitationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acceptAdministratorInvitationContinuation) in
            acceptAdministratorInvitation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This method is deprecated. Instead, use AcceptAdministratorInvitation.
    ///          The Security Hub console continues to use AcceptInvitation. It will eventually change to use AcceptAdministratorInvitation. Any IAM policies that specifically control access to this function must continue to use AcceptInvitation. You should also add AcceptAdministratorInvitation to your policies to ensure that the correct permissions are in place after the console begins to use AcceptAdministratorInvitation.
    ///          Accepts the invitation to be a member account and be monitored by the Security Hub administrator
    ///          account that the invitation was sent from.
    ///          This operation is only used by member accounts that are not added through
    ///          Organizations.
    ///          When the member account accepts the invitation, permission is granted to the administrator
    ///          account to view findings generated in the member account.
    @available(*, deprecated, message: "This API has been deprecated, use AcceptAdministratorInvitation API instead.")
    func acceptInvitation(input: AcceptInvitationInput) async throws -> AcceptInvitationOutputResponse
    {
        typealias acceptInvitationContinuation = CheckedContinuation<AcceptInvitationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acceptInvitationContinuation) in
            acceptInvitation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables the standards specified by the provided
    ///          StandardsSubscriptionArns.
    ///          For more information, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards.html">Security Standards section of the Security Hub User
    ///          Guide.
    func batchDisableStandards(input: BatchDisableStandardsInput) async throws -> BatchDisableStandardsOutputResponse
    {
        typealias batchDisableStandardsContinuation = CheckedContinuation<BatchDisableStandardsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDisableStandardsContinuation) in
            batchDisableStandards(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables the standards specified by the provided StandardsArn. To obtain the
    ///          ARN for a standard, use the DescribeStandards
    ///          operation.
    ///          For more information, see the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards.html">Security Standards
    ///          section of the Security Hub User Guide.
    func batchEnableStandards(input: BatchEnableStandardsInput) async throws -> BatchEnableStandardsOutputResponse
    {
        typealias batchEnableStandardsContinuation = CheckedContinuation<BatchEnableStandardsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchEnableStandardsContinuation) in
            batchEnableStandards(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Imports security findings generated from an integrated product into Security Hub.
    ///          This action is requested by the integrated product to import its findings into
    ///          Security Hub.
    ///          The maximum allowed size for a finding is 240 Kb. An error is returned for any finding
    ///          larger than 240 Kb.
    ///          After a finding is created, BatchImportFindings cannot be used to update
    ///          the following finding fields and objects, which Security Hub customers use to manage their
    ///          investigation workflow.
    ///
    ///
    ///
    ///                   Note
    ///
    ///
    ///
    ///
    ///                   UserDefinedFields
    ///
    ///
    ///
    ///
    ///                   VerificationState
    ///
    ///
    ///
    ///
    ///                   Workflow
    ///
    ///
    ///
    ///          Finding providers also should not use BatchImportFindings to update the following attributes.
    ///
    ///
    ///
    ///                   Confidence
    ///
    ///
    ///
    ///
    ///                   Criticality
    ///
    ///
    ///
    ///
    ///                   RelatedFindings
    ///
    ///
    ///
    ///
    ///                   Severity
    ///
    ///
    ///
    ///
    ///                   Types
    ///
    ///
    ///
    ///          Instead, finding providers use FindingProviderFields to provide values for these attributes.
    func batchImportFindings(input: BatchImportFindingsInput) async throws -> BatchImportFindingsOutputResponse
    {
        typealias batchImportFindingsContinuation = CheckedContinuation<BatchImportFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchImportFindingsContinuation) in
            batchImportFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used by Security Hub customers to update information about their investigation into a finding.
    ///          Requested by administrator accounts or member accounts. Administrator accounts can update findings for
    ///          their account and their member accounts. Member accounts can update findings for their
    ///          account.
    ///          Updates from BatchUpdateFindings do not affect the value of
    ///             UpdatedAt for a finding.
    ///          Administrator and member accounts can use BatchUpdateFindings to update the
    ///          following finding fields and objects.
    ///
    ///
    ///
    ///                   Confidence
    ///
    ///
    ///
    ///
    ///                   Criticality
    ///
    ///
    ///
    ///
    ///                   Note
    ///
    ///
    ///
    ///
    ///                   RelatedFindings
    ///
    ///
    ///
    ///
    ///                   Severity
    ///
    ///
    ///
    ///
    ///                   Types
    ///
    ///
    ///
    ///
    ///                   UserDefinedFields
    ///
    ///
    ///
    ///
    ///                   VerificationState
    ///
    ///
    ///
    ///
    ///                   Workflow
    ///
    ///
    ///
    ///          You can configure IAM policies to restrict access to fields and field values. For
    ///          example, you might not want member accounts to be able to suppress findings or change the
    ///          finding severity. See <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/finding-update-batchupdatefindings.html#batchupdatefindings-configure-access">Configuring access to BatchUpdateFindings in the
    ///          Security Hub User Guide.
    func batchUpdateFindings(input: BatchUpdateFindingsInput) async throws -> BatchUpdateFindingsOutputResponse
    {
        typealias batchUpdateFindingsContinuation = CheckedContinuation<BatchUpdateFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchUpdateFindingsContinuation) in
            batchUpdateFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a custom action target in Security Hub.
    ///          You can use custom actions on findings and insights in Security Hub to trigger target actions
    ///          in Amazon CloudWatch Events.
    func createActionTarget(input: CreateActionTargetInput) async throws -> CreateActionTargetOutputResponse
    {
        typealias createActionTargetContinuation = CheckedContinuation<CreateActionTargetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createActionTargetContinuation) in
            createActionTarget(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a custom insight in Security Hub. An insight is a consolidation of findings that relate
    ///          to a security issue that requires attention or remediation.
    ///          To group the related findings in the insight, use the
    ///          GroupByAttribute.
    func createInsight(input: CreateInsightInput) async throws -> CreateInsightOutputResponse
    {
        typealias createInsightContinuation = CheckedContinuation<CreateInsightOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createInsightContinuation) in
            createInsight(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a member association in Security Hub between the specified accounts and the account
    ///          used to make the request, which is the administrator account. If you are integrated with
    ///          Organizations, then the administrator account is designated by the organization management account.
    ///
    ///             CreateMembers is always used to add accounts that are not organization
    ///          members.
    ///          For accounts that are managed using Organizations, CreateMembers is only used
    ///          in the following cases:
    ///
    ///
    ///                Security Hub is not configured to automatically add new organization accounts.
    ///
    ///
    ///                The account was disassociated or deleted in Security Hub.
    ///
    ///
    ///          This action can only be used by an account that has Security Hub enabled. To enable Security Hub, you
    ///          can use the EnableSecurityHub operation.
    ///          For accounts that are not organization members, you create the account association and
    ///          then send an invitation to the member account. To send the invitation, you use the
    ///                InviteMembers operation. If the account owner accepts
    ///          the invitation, the account becomes a member account in Security Hub.
    ///          Accounts that are managed using Organizations do not receive an invitation. They
    ///          automatically become a member account in Security Hub, and Security Hub is automatically enabled for those accounts. Note that Security Hub cannot be enabled automatically for the organization management account. The organization management account must enable Security Hub before the administrator account enables it as a member account.
    ///          A permissions policy is added that permits the administrator account to view the findings
    ///          generated in the member account. When Security Hub is enabled in a member account, the member account findings are
    ///          also visible to the administrator account.
    ///          To remove the association between the administrator and member accounts, use the DisassociateFromMasterAccount or DisassociateMembers operation.
    func createMembers(input: CreateMembersInput) async throws -> CreateMembersOutputResponse
    {
        typealias createMembersContinuation = CheckedContinuation<CreateMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMembersContinuation) in
            createMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Declines invitations to become a member account.
    ///          This operation is only used by accounts that are not part of an organization.
    ///          Organization accounts do not receive invitations.
    func declineInvitations(input: DeclineInvitationsInput) async throws -> DeclineInvitationsOutputResponse
    {
        typealias declineInvitationsContinuation = CheckedContinuation<DeclineInvitationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: declineInvitationsContinuation) in
            declineInvitations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a custom action target from Security Hub.
    ///          Deleting a custom action target does not affect any findings or insights that were
    ///          already sent to Amazon CloudWatch Events using the custom action.
    func deleteActionTarget(input: DeleteActionTargetInput) async throws -> DeleteActionTargetOutputResponse
    {
        typealias deleteActionTargetContinuation = CheckedContinuation<DeleteActionTargetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteActionTargetContinuation) in
            deleteActionTarget(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the insight specified by the InsightArn.
    func deleteInsight(input: DeleteInsightInput) async throws -> DeleteInsightOutputResponse
    {
        typealias deleteInsightContinuation = CheckedContinuation<DeleteInsightOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteInsightContinuation) in
            deleteInsight(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes invitations received by the Amazon Web Services account to become a member account.
    ///          This operation is only used by accounts that are not part of an organization.
    ///          Organization accounts do not receive invitations.
    func deleteInvitations(input: DeleteInvitationsInput) async throws -> DeleteInvitationsOutputResponse
    {
        typealias deleteInvitationsContinuation = CheckedContinuation<DeleteInvitationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteInvitationsContinuation) in
            deleteInvitations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified member accounts from Security Hub.
    ///          Can be used to delete member accounts that belong to an organization as well as member
    ///          accounts that were invited manually.
    func deleteMembers(input: DeleteMembersInput) async throws -> DeleteMembersOutputResponse
    {
        typealias deleteMembersContinuation = CheckedContinuation<DeleteMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMembersContinuation) in
            deleteMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the custom action targets in Security Hub in your account.
    func describeActionTargets(input: DescribeActionTargetsInput) async throws -> DescribeActionTargetsOutputResponse
    {
        typealias describeActionTargetsContinuation = CheckedContinuation<DescribeActionTargetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeActionTargetsContinuation) in
            describeActionTargets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns details about the Hub resource in your account, including the
    ///          HubArn and the time when you enabled Security Hub.
    func describeHub(input: DescribeHubInput) async throws -> DescribeHubOutputResponse
    {
        typealias describeHubContinuation = CheckedContinuation<DescribeHubOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeHubContinuation) in
            describeHub(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the Organizations configuration for Security Hub. Can only be
    ///          called from a Security Hub administrator account.
    func describeOrganizationConfiguration(input: DescribeOrganizationConfigurationInput) async throws -> DescribeOrganizationConfigurationOutputResponse
    {
        typealias describeOrganizationConfigurationContinuation = CheckedContinuation<DescribeOrganizationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeOrganizationConfigurationContinuation) in
            describeOrganizationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about product integrations in Security Hub.
    ///          You can optionally provide an integration ARN. If you provide an integration ARN, then
    ///          the results only include that integration.
    ///          If you do not provide an integration ARN, then the results include all of the available
    ///          product integrations.
    func describeProducts(input: DescribeProductsInput) async throws -> DescribeProductsOutputResponse
    {
        typealias describeProductsContinuation = CheckedContinuation<DescribeProductsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProductsContinuation) in
            describeProducts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the available standards in Security Hub.
    ///          For each standard, the results include the standard ARN, the name, and a description.
    func describeStandards(input: DescribeStandardsInput) async throws -> DescribeStandardsOutputResponse
    {
        typealias describeStandardsContinuation = CheckedContinuation<DescribeStandardsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStandardsContinuation) in
            describeStandards(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of security standards controls.
    ///          For each control, the results include information about whether it is currently enabled,
    ///          the severity, and a link to remediation information.
    func describeStandardsControls(input: DescribeStandardsControlsInput) async throws -> DescribeStandardsControlsOutputResponse
    {
        typealias describeStandardsControlsContinuation = CheckedContinuation<DescribeStandardsControlsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStandardsControlsContinuation) in
            describeStandardsControls(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables the integration of the specified product with Security Hub. After the integration is
    ///          disabled, findings from that product are no longer sent to Security Hub.
    func disableImportFindingsForProduct(input: DisableImportFindingsForProductInput) async throws -> DisableImportFindingsForProductOutputResponse
    {
        typealias disableImportFindingsForProductContinuation = CheckedContinuation<DisableImportFindingsForProductOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableImportFindingsForProductContinuation) in
            disableImportFindingsForProduct(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables a Security Hub administrator account. Can only be called by the organization
    ///          management account.
    func disableOrganizationAdminAccount(input: DisableOrganizationAdminAccountInput) async throws -> DisableOrganizationAdminAccountOutputResponse
    {
        typealias disableOrganizationAdminAccountContinuation = CheckedContinuation<DisableOrganizationAdminAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableOrganizationAdminAccountContinuation) in
            disableOrganizationAdminAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables Security Hub in your account only in the current Region. To disable Security Hub in all
    ///          Regions, you must submit one request per Region where you have enabled Security Hub.
    ///          When you disable Security Hub for an administrator account, it doesn't disable Security Hub for any associated
    ///          member accounts.
    ///          When you disable Security Hub, your existing findings and insights and any Security Hub configuration
    ///          settings are deleted after 90 days and cannot be recovered. Any standards that were enabled
    ///          are disabled, and your administrator and member account associations are removed.
    ///          If you want to save your existing findings, you must export them before you disable
    ///          Security Hub.
    func disableSecurityHub(input: DisableSecurityHubInput) async throws -> DisableSecurityHubOutputResponse
    {
        typealias disableSecurityHubContinuation = CheckedContinuation<DisableSecurityHubOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableSecurityHubContinuation) in
            disableSecurityHub(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates the current Security Hub member account from the associated administrator
    ///          account.
    ///          This operation is only used by accounts that are not part of an organization. For
    ///          organization accounts, only the administrator account can
    ///          disassociate a member account.
    func disassociateFromAdministratorAccount(input: DisassociateFromAdministratorAccountInput) async throws -> DisassociateFromAdministratorAccountOutputResponse
    {
        typealias disassociateFromAdministratorAccountContinuation = CheckedContinuation<DisassociateFromAdministratorAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateFromAdministratorAccountContinuation) in
            disassociateFromAdministratorAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This method is deprecated. Instead, use DisassociateFromAdministratorAccount.
    ///          The Security Hub console continues to use DisassociateFromMasterAccount. It will eventually change to use DisassociateFromAdministratorAccount. Any IAM policies that specifically control access to this function must continue to use DisassociateFromMasterAccount. You should also add DisassociateFromAdministratorAccount to your policies to ensure that the correct permissions are in place after the console begins to use DisassociateFromAdministratorAccount.
    ///          Disassociates the current Security Hub member account from the associated administrator
    ///          account.
    ///          This operation is only used by accounts that are not part of an organization. For
    ///          organization accounts, only the administrator account can
    ///          disassociate a member account.
    @available(*, deprecated, message: "This API has been deprecated, use DisassociateFromAdministratorAccount API instead.")
    func disassociateFromMasterAccount(input: DisassociateFromMasterAccountInput) async throws -> DisassociateFromMasterAccountOutputResponse
    {
        typealias disassociateFromMasterAccountContinuation = CheckedContinuation<DisassociateFromMasterAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateFromMasterAccountContinuation) in
            disassociateFromMasterAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates the specified member accounts from the associated administrator account.
    ///          Can be used to disassociate both accounts that are managed using Organizations and accounts that
    ///          were invited manually.
    func disassociateMembers(input: DisassociateMembersInput) async throws -> DisassociateMembersOutputResponse
    {
        typealias disassociateMembersContinuation = CheckedContinuation<DisassociateMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateMembersContinuation) in
            disassociateMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables the integration of a partner product with Security Hub. Integrated products send
    ///          findings to Security Hub.
    ///          When you enable a product integration, a permissions policy that grants permission for
    ///          the product to send findings to Security Hub is applied.
    func enableImportFindingsForProduct(input: EnableImportFindingsForProductInput) async throws -> EnableImportFindingsForProductOutputResponse
    {
        typealias enableImportFindingsForProductContinuation = CheckedContinuation<EnableImportFindingsForProductOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableImportFindingsForProductContinuation) in
            enableImportFindingsForProduct(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Designates the Security Hub administrator account for an organization. Can only be called by
    ///          the organization management account.
    func enableOrganizationAdminAccount(input: EnableOrganizationAdminAccountInput) async throws -> EnableOrganizationAdminAccountOutputResponse
    {
        typealias enableOrganizationAdminAccountContinuation = CheckedContinuation<EnableOrganizationAdminAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableOrganizationAdminAccountContinuation) in
            enableOrganizationAdminAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables Security Hub for your account in the current Region or the Region you specify in the
    ///          request.
    ///          When you enable Security Hub, you grant to Security Hub the permissions necessary to gather findings
    ///          from other services that are integrated with Security Hub.
    ///          When you use the EnableSecurityHub operation to enable Security Hub, you also
    ///          automatically enable the following standards.
    ///
    ///
    ///                CIS Amazon Web Services Foundations
    ///
    ///
    ///                Amazon Web Services Foundational Security Best Practices
    ///
    ///
    ///          You do not enable the Payment Card Industry Data Security Standard (PCI DSS) standard.
    ///          To not enable the automatically enabled standards, set
    ///             EnableDefaultStandards to false.
    ///          After you enable Security Hub, to enable a standard, use the BatchEnableStandards operation. To disable a standard, use the
    ///                BatchDisableStandards operation.
    ///          To learn more, see the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-settingup.html">setup information in the Security Hub User Guide.
    func enableSecurityHub(input: EnableSecurityHubInput) async throws -> EnableSecurityHubOutputResponse
    {
        typealias enableSecurityHubContinuation = CheckedContinuation<EnableSecurityHubOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableSecurityHubContinuation) in
            enableSecurityHub(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides the details for the Security Hub administrator account for the current member account.
    ///          Can be used by both member accounts that are managed using Organizations and accounts that were
    ///          invited manually.
    func getAdministratorAccount(input: GetAdministratorAccountInput) async throws -> GetAdministratorAccountOutputResponse
    {
        typealias getAdministratorAccountContinuation = CheckedContinuation<GetAdministratorAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAdministratorAccountContinuation) in
            getAdministratorAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the standards that are currently enabled.
    func getEnabledStandards(input: GetEnabledStandardsInput) async throws -> GetEnabledStandardsOutputResponse
    {
        typealias getEnabledStandardsContinuation = CheckedContinuation<GetEnabledStandardsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEnabledStandardsContinuation) in
            getEnabledStandards(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of findings that match the specified criteria.
    func getFindings(input: GetFindingsInput) async throws -> GetFindingsOutputResponse
    {
        typealias getFindingsContinuation = CheckedContinuation<GetFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFindingsContinuation) in
            getFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the results of the Security Hub insight specified by the insight ARN.
    func getInsightResults(input: GetInsightResultsInput) async throws -> GetInsightResultsOutputResponse
    {
        typealias getInsightResultsContinuation = CheckedContinuation<GetInsightResultsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInsightResultsContinuation) in
            getInsightResults(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists and describes insights for the specified insight ARNs.
    func getInsights(input: GetInsightsInput) async throws -> GetInsightsOutputResponse
    {
        typealias getInsightsContinuation = CheckedContinuation<GetInsightsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInsightsContinuation) in
            getInsights(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the count of all Security Hub membership invitations that were sent to the
    ///          current member account, not including the currently accepted invitation.
    func getInvitationsCount(input: GetInvitationsCountInput) async throws -> GetInvitationsCountOutputResponse
    {
        typealias getInvitationsCountContinuation = CheckedContinuation<GetInvitationsCountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInvitationsCountContinuation) in
            getInvitationsCount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This method is deprecated. Instead, use GetAdministratorAccount.
    ///          The Security Hub console continues to use GetMasterAccount. It will eventually change to use GetAdministratorAccount. Any IAM policies that specifically control access to this function must continue to use GetMasterAccount. You should also add GetAdministratorAccount to your policies to ensure that the correct permissions are in place after the console begins to use GetAdministratorAccount.
    ///          Provides the details for the Security Hub administrator account for the current member account.
    ///          Can be used by both member accounts that are managed using Organizations and accounts that were
    ///          invited manually.
    @available(*, deprecated, message: "This API has been deprecated, use GetAdministratorAccount API instead.")
    func getMasterAccount(input: GetMasterAccountInput) async throws -> GetMasterAccountOutputResponse
    {
        typealias getMasterAccountContinuation = CheckedContinuation<GetMasterAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMasterAccountContinuation) in
            getMasterAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the details for the Security Hub member accounts for the specified account IDs.
    ///          An administrator account can be either the delegated Security Hub administrator account for an
    ///          organization or an administrator account that enabled Security Hub manually.
    ///          The results include both member accounts that are managed using Organizations and accounts that
    ///          were invited manually.
    func getMembers(input: GetMembersInput) async throws -> GetMembersOutputResponse
    {
        typealias getMembersContinuation = CheckedContinuation<GetMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMembersContinuation) in
            getMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Invites other Amazon Web Services accounts to become member accounts for the Security Hub administrator account that
    ///          the invitation is sent from.
    ///          This operation is only used to invite accounts that do not belong to an organization.
    ///          Organization accounts do not receive invitations.
    ///          Before you can use this action to invite a member, you must first use the CreateMembers action to create the member account in Security Hub.
    ///          When the account owner enables Security Hub and accepts the invitation to become a member
    ///          account, the administrator account can view the findings generated from the member account.
    func inviteMembers(input: InviteMembersInput) async throws -> InviteMembersOutputResponse
    {
        typealias inviteMembersContinuation = CheckedContinuation<InviteMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: inviteMembersContinuation) in
            inviteMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all findings-generating solutions (products) that you are subscribed to receive
    ///          findings from in Security Hub.
    func listEnabledProductsForImport(input: ListEnabledProductsForImportInput) async throws -> ListEnabledProductsForImportOutputResponse
    {
        typealias listEnabledProductsForImportContinuation = CheckedContinuation<ListEnabledProductsForImportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEnabledProductsForImportContinuation) in
            listEnabledProductsForImport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all Security Hub membership invitations that were sent to the current Amazon Web Services account.
    ///          This operation is only used by accounts that are managed by invitation.
    ///          Accounts that are managed using the integration with Organizations do not receive invitations.
    func listInvitations(input: ListInvitationsInput) async throws -> ListInvitationsOutputResponse
    {
        typealias listInvitationsContinuation = CheckedContinuation<ListInvitationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInvitationsContinuation) in
            listInvitations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists details about all member accounts for the current Security Hub administrator
    ///          account.
    ///          The results include both member accounts that belong to an organization and member
    ///          accounts that were invited manually.
    func listMembers(input: ListMembersInput) async throws -> ListMembersOutputResponse
    {
        typealias listMembersContinuation = CheckedContinuation<ListMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMembersContinuation) in
            listMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the Security Hub administrator accounts. Can only be called by the organization
    ///          management account.
    func listOrganizationAdminAccounts(input: ListOrganizationAdminAccountsInput) async throws -> ListOrganizationAdminAccountsOutputResponse
    {
        typealias listOrganizationAdminAccountsContinuation = CheckedContinuation<ListOrganizationAdminAccountsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOrganizationAdminAccountsContinuation) in
            listOrganizationAdminAccounts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of tags associated with a resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds one or more tags to a resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes one or more tags from a resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the name and description of a custom action target in Security Hub.
    func updateActionTarget(input: UpdateActionTargetInput) async throws -> UpdateActionTargetOutputResponse
    {
        typealias updateActionTargetContinuation = CheckedContinuation<UpdateActionTargetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateActionTargetContinuation) in
            updateActionTarget(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             UpdateFindings is deprecated. Instead of UpdateFindings, use
    ///             BatchUpdateFindings.
    ///          Updates the Note and RecordState of the Security Hub-aggregated
    ///          findings that the filter attributes specify. Any member account that can view the finding
    ///          also sees the update to the finding.
    func updateFindings(input: UpdateFindingsInput) async throws -> UpdateFindingsOutputResponse
    {
        typealias updateFindingsContinuation = CheckedContinuation<UpdateFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFindingsContinuation) in
            updateFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the Security Hub insight identified by the specified insight ARN.
    func updateInsight(input: UpdateInsightInput) async throws -> UpdateInsightOutputResponse
    {
        typealias updateInsightContinuation = CheckedContinuation<UpdateInsightOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateInsightContinuation) in
            updateInsight(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used to update the configuration related to Organizations. Can only be called from a
    ///          Security Hub administrator account.
    func updateOrganizationConfiguration(input: UpdateOrganizationConfigurationInput) async throws -> UpdateOrganizationConfigurationOutputResponse
    {
        typealias updateOrganizationConfigurationContinuation = CheckedContinuation<UpdateOrganizationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateOrganizationConfigurationContinuation) in
            updateOrganizationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates configuration options for Security Hub.
    func updateSecurityHubConfiguration(input: UpdateSecurityHubConfigurationInput) async throws -> UpdateSecurityHubConfigurationOutputResponse
    {
        typealias updateSecurityHubConfigurationContinuation = CheckedContinuation<UpdateSecurityHubConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSecurityHubConfigurationContinuation) in
            updateSecurityHubConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used to control whether an individual security standard control is enabled or
    ///          disabled.
    func updateStandardsControl(input: UpdateStandardsControlInput) async throws -> UpdateStandardsControlOutputResponse
    {
        typealias updateStandardsControlContinuation = CheckedContinuation<UpdateStandardsControlOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateStandardsControlContinuation) in
            updateStandardsControl(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
