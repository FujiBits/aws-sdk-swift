// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension DrsClient {
    /// Creates a new ReplicationConfigurationTemplate.
    func createReplicationConfigurationTemplate(input: CreateReplicationConfigurationTemplateInput) async throws -> CreateReplicationConfigurationTemplateOutputResponse
    {
        typealias createReplicationConfigurationTemplateContinuation = CheckedContinuation<CreateReplicationConfigurationTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createReplicationConfigurationTemplateContinuation) in
            createReplicationConfigurationTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a single Job by ID.
    func deleteJob(input: DeleteJobInput) async throws -> DeleteJobOutputResponse
    {
        typealias deleteJobContinuation = CheckedContinuation<DeleteJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteJobContinuation) in
            deleteJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a single Recovery Instance by ID. This deletes the Recovery Instance resource from Elastic Disaster Recovery. The Recovery Instance must be disconnected first in order to delete it.
    func deleteRecoveryInstance(input: DeleteRecoveryInstanceInput) async throws -> DeleteRecoveryInstanceOutputResponse
    {
        typealias deleteRecoveryInstanceContinuation = CheckedContinuation<DeleteRecoveryInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRecoveryInstanceContinuation) in
            deleteRecoveryInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a single Replication Configuration Template by ID
    func deleteReplicationConfigurationTemplate(input: DeleteReplicationConfigurationTemplateInput) async throws -> DeleteReplicationConfigurationTemplateOutputResponse
    {
        typealias deleteReplicationConfigurationTemplateContinuation = CheckedContinuation<DeleteReplicationConfigurationTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteReplicationConfigurationTemplateContinuation) in
            deleteReplicationConfigurationTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a single Source Server by ID. The Source Server must be disconnected first.
    func deleteSourceServer(input: DeleteSourceServerInput) async throws -> DeleteSourceServerOutputResponse
    {
        typealias deleteSourceServerContinuation = CheckedContinuation<DeleteSourceServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSourceServerContinuation) in
            deleteSourceServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a detailed Job log with pagination.
    func describeJobLogItems(input: DescribeJobLogItemsInput) async throws -> DescribeJobLogItemsOutputResponse
    {
        typealias describeJobLogItemsContinuation = CheckedContinuation<DescribeJobLogItemsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeJobLogItemsContinuation) in
            describeJobLogItems(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of Jobs. Use the JobsID and fromDate and toDate filters to limit which jobs are returned. The response is sorted by creationDataTime - latest date first. Jobs are created by the StartRecovery, TerminateRecoveryInstances and StartFailbackLaunch APIs. Jobs are also created by DiagnosticLaunch and TerminateDiagnosticInstances, which are APIs available only to *Support* and only used in response to relevant support tickets.
    func describeJobs(input: DescribeJobsInput) async throws -> DescribeJobsOutputResponse
    {
        typealias describeJobsContinuation = CheckedContinuation<DescribeJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeJobsContinuation) in
            describeJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all Recovery Instances or multiple Recovery Instances by ID.
    func describeRecoveryInstances(input: DescribeRecoveryInstancesInput) async throws -> DescribeRecoveryInstancesOutputResponse
    {
        typealias describeRecoveryInstancesContinuation = CheckedContinuation<DescribeRecoveryInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRecoveryInstancesContinuation) in
            describeRecoveryInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all Recovery Snapshots for a single Source Server.
    func describeRecoverySnapshots(input: DescribeRecoverySnapshotsInput) async throws -> DescribeRecoverySnapshotsOutputResponse
    {
        typealias describeRecoverySnapshotsContinuation = CheckedContinuation<DescribeRecoverySnapshotsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRecoverySnapshotsContinuation) in
            describeRecoverySnapshots(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all ReplicationConfigurationTemplates, filtered by Source Server IDs.
    func describeReplicationConfigurationTemplates(input: DescribeReplicationConfigurationTemplatesInput) async throws -> DescribeReplicationConfigurationTemplatesOutputResponse
    {
        typealias describeReplicationConfigurationTemplatesContinuation = CheckedContinuation<DescribeReplicationConfigurationTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeReplicationConfigurationTemplatesContinuation) in
            describeReplicationConfigurationTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all Source Servers or multiple Source Servers filtered by ID.
    func describeSourceServers(input: DescribeSourceServersInput) async throws -> DescribeSourceServersOutputResponse
    {
        typealias describeSourceServersContinuation = CheckedContinuation<DescribeSourceServersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSourceServersContinuation) in
            describeSourceServers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disconnect a Recovery Instance from Elastic Disaster Recovery. Data replication is stopped immediately. All AWS resources created by Elastic Disaster Recovery for enabling the replication of the Recovery Instance will be terminated / deleted within 90 minutes. If the agent on the Recovery Instance has not been prevented from communicating with the Elastic Disaster Recovery service, then it will receive a command to uninstall itself (within approximately 10 minutes). The following properties of the Recovery Instance will be changed immediately: dataReplicationInfo.dataReplicationState will be set to DISCONNECTED; The totalStorageBytes property for each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.
    func disconnectRecoveryInstance(input: DisconnectRecoveryInstanceInput) async throws -> DisconnectRecoveryInstanceOutputResponse
    {
        typealias disconnectRecoveryInstanceContinuation = CheckedContinuation<DisconnectRecoveryInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disconnectRecoveryInstanceContinuation) in
            disconnectRecoveryInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disconnects a specific Source Server from Elastic Disaster Recovery. Data replication is stopped immediately. All AWS resources created by Elastic Disaster Recovery for enabling the replication of the Source Server will be terminated / deleted within 90 minutes. You cannot disconnect a Source Server if it has a Recovery Instance. If the agent on the Source Server has not been prevented from communicating with the Elastic Disaster Recovery service, then it will receive a command to uninstall itself (within approximately 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be set to DISCONNECTED; The totalStorageBytes property for each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.
    func disconnectSourceServer(input: DisconnectSourceServerInput) async throws -> DisconnectSourceServerOutputResponse
    {
        typealias disconnectSourceServerContinuation = CheckedContinuation<DisconnectSourceServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disconnectSourceServerContinuation) in
            disconnectSourceServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all Failback ReplicationConfigurations, filtered by Recovery Instance ID.
    func getFailbackReplicationConfiguration(input: GetFailbackReplicationConfigurationInput) async throws -> GetFailbackReplicationConfigurationOutputResponse
    {
        typealias getFailbackReplicationConfigurationContinuation = CheckedContinuation<GetFailbackReplicationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFailbackReplicationConfigurationContinuation) in
            getFailbackReplicationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a LaunchConfiguration, filtered by Source Server IDs.
    func getLaunchConfiguration(input: GetLaunchConfigurationInput) async throws -> GetLaunchConfigurationOutputResponse
    {
        typealias getLaunchConfigurationContinuation = CheckedContinuation<GetLaunchConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLaunchConfigurationContinuation) in
            getLaunchConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a ReplicationConfiguration, filtered by Source Server ID.
    func getReplicationConfiguration(input: GetReplicationConfigurationInput) async throws -> GetReplicationConfigurationOutputResponse
    {
        typealias getReplicationConfigurationContinuation = CheckedContinuation<GetReplicationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getReplicationConfigurationContinuation) in
            getReplicationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Initialize Elastic Disaster Recovery.
    func initializeService(input: InitializeServiceInput) async throws -> InitializeServiceOutputResponse
    {
        typealias initializeServiceContinuation = CheckedContinuation<InitializeServiceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: initializeServiceContinuation) in
            initializeService(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List all tags for your Elastic Disaster Recovery resources.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Causes the data replication initiation sequence to begin immediately upon next Handshake for the specified Source Server ID, regardless of when the previous initiation started. This command will work only if the Source Server is stalled or is in a DISCONNECTED or STOPPED state.
    func retryDataReplication(input: RetryDataReplicationInput) async throws -> RetryDataReplicationOutputResponse
    {
        typealias retryDataReplicationContinuation = CheckedContinuation<RetryDataReplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: retryDataReplicationContinuation) in
            retryDataReplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Initiates a Job for launching the machine that is being failed back to from the specified Recovery Instance. This will run conversion on the failback client and will reboot your machine, thus completing the failback process.
    func startFailbackLaunch(input: StartFailbackLaunchInput) async throws -> StartFailbackLaunchOutputResponse
    {
        typealias startFailbackLaunchContinuation = CheckedContinuation<StartFailbackLaunchOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startFailbackLaunchContinuation) in
            startFailbackLaunch(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Launches Recovery Instances for the specified Source Servers. For each Source Server you may choose a point in time snapshot to launch from, or use an on demand snapshot.
    func startRecovery(input: StartRecoveryInput) async throws -> StartRecoveryOutputResponse
    {
        typealias startRecoveryContinuation = CheckedContinuation<StartRecoveryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startRecoveryContinuation) in
            startRecovery(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops the failback process for a specified Recovery Instance. This changes the Failback State of the Recovery Instance back to FAILBACK_NOT_STARTED.
    func stopFailback(input: StopFailbackInput) async throws -> StopFailbackOutputResponse
    {
        typealias stopFailbackContinuation = CheckedContinuation<StopFailbackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopFailbackContinuation) in
            stopFailback(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds or overwrites only the specified tags for the specified Elastic Disaster Recovery resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Initiates a Job for terminating the EC2 resources associated with the specified Recovery Instances, and then will delete the Recovery Instances from the Elastic Disaster Recovery service.
    func terminateRecoveryInstances(input: TerminateRecoveryInstancesInput) async throws -> TerminateRecoveryInstancesOutputResponse
    {
        typealias terminateRecoveryInstancesContinuation = CheckedContinuation<TerminateRecoveryInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: terminateRecoveryInstancesContinuation) in
            terminateRecoveryInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified set of tags from the specified set of Elastic Disaster Recovery resources.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Allows you to update the failback replication configuration of a Recovery Instance by ID.
    func updateFailbackReplicationConfiguration(input: UpdateFailbackReplicationConfigurationInput) async throws -> UpdateFailbackReplicationConfigurationOutputResponse
    {
        typealias updateFailbackReplicationConfigurationContinuation = CheckedContinuation<UpdateFailbackReplicationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFailbackReplicationConfigurationContinuation) in
            updateFailbackReplicationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a LaunchConfiguration by Source Server ID.
    func updateLaunchConfiguration(input: UpdateLaunchConfigurationInput) async throws -> UpdateLaunchConfigurationOutputResponse
    {
        typealias updateLaunchConfigurationContinuation = CheckedContinuation<UpdateLaunchConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateLaunchConfigurationContinuation) in
            updateLaunchConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Allows you to update a ReplicationConfiguration by Source Server ID.
    func updateReplicationConfiguration(input: UpdateReplicationConfigurationInput) async throws -> UpdateReplicationConfigurationOutputResponse
    {
        typealias updateReplicationConfigurationContinuation = CheckedContinuation<UpdateReplicationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateReplicationConfigurationContinuation) in
            updateReplicationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a ReplicationConfigurationTemplate by ID.
    func updateReplicationConfigurationTemplate(input: UpdateReplicationConfigurationTemplateInput) async throws -> UpdateReplicationConfigurationTemplateOutputResponse
    {
        typealias updateReplicationConfigurationTemplateContinuation = CheckedContinuation<UpdateReplicationConfigurationTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateReplicationConfigurationTemplateContinuation) in
            updateReplicationConfigurationTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
