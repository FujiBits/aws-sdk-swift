// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAccessesOutputResponseBody: Equatable {
    public let nextToken: String?
    public let serverId: String?
    public let accesses: [ListedAccess]?
}

extension ListAccessesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accesses = "Accesses"
        case nextToken = "NextToken"
        case serverId = "ServerId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let serverIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverId)
        serverId = serverIdDecoded
        let accessesContainer = try containerValues.decodeIfPresent([ListedAccess?].self, forKey: .accesses)
        var accessesDecoded0:[ListedAccess]? = nil
        if let accessesContainer = accessesContainer {
            accessesDecoded0 = [ListedAccess]()
            for structure0 in accessesContainer {
                if let structure0 = structure0 {
                    accessesDecoded0?.append(structure0)
                }
            }
        }
        accesses = accessesDecoded0
    }
}
