// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct TransferDomainInputHeadersMiddleware: Middleware {
    public let id: String = "TransferDomainInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TransferDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<TransferDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TransferDomainInput>
    public typealias MOutput = OperationOutput<TransferDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TransferDomainOutputError>
}

public struct TransferDomainInputQueryItemMiddleware: Middleware {
    public let id: String = "TransferDomainInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TransferDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<TransferDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TransferDomainInput>
    public typealias MOutput = OperationOutput<TransferDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TransferDomainOutputError>
}

public struct TransferDomainInputBodyMiddleware: Middleware {
    public let id: String = "TransferDomainInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TransferDomainInput>,
                  next: H) -> Swift.Result<OperationOutput<TransferDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TransferDomainInput>
    public typealias MOutput = OperationOutput<TransferDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TransferDomainOutputError>
}

extension TransferDomainInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adminContact = "AdminContact"
        case authCode = "AuthCode"
        case autoRenew = "AutoRenew"
        case domainName = "DomainName"
        case durationInYears = "DurationInYears"
        case idnLangCode = "IdnLangCode"
        case nameservers = "Nameservers"
        case privacyProtectAdminContact = "PrivacyProtectAdminContact"
        case privacyProtectRegistrantContact = "PrivacyProtectRegistrantContact"
        case privacyProtectTechContact = "PrivacyProtectTechContact"
        case registrantContact = "RegistrantContact"
        case techContact = "TechContact"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adminContact = adminContact {
            try encodeContainer.encode(adminContact, forKey: .adminContact)
        }
        if let authCode = authCode {
            try encodeContainer.encode(authCode, forKey: .authCode)
        }
        if let autoRenew = autoRenew {
            try encodeContainer.encode(autoRenew, forKey: .autoRenew)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let durationInYears = durationInYears {
            try encodeContainer.encode(durationInYears, forKey: .durationInYears)
        }
        if let idnLangCode = idnLangCode {
            try encodeContainer.encode(idnLangCode, forKey: .idnLangCode)
        }
        if let nameservers = nameservers {
            var nameserversContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nameservers)
            for nameserverlist0 in nameservers {
                try nameserversContainer.encode(nameserverlist0)
            }
        }
        if let privacyProtectAdminContact = privacyProtectAdminContact {
            try encodeContainer.encode(privacyProtectAdminContact, forKey: .privacyProtectAdminContact)
        }
        if let privacyProtectRegistrantContact = privacyProtectRegistrantContact {
            try encodeContainer.encode(privacyProtectRegistrantContact, forKey: .privacyProtectRegistrantContact)
        }
        if let privacyProtectTechContact = privacyProtectTechContact {
            try encodeContainer.encode(privacyProtectTechContact, forKey: .privacyProtectTechContact)
        }
        if let registrantContact = registrantContact {
            try encodeContainer.encode(registrantContact, forKey: .registrantContact)
        }
        if let techContact = techContact {
            try encodeContainer.encode(techContact, forKey: .techContact)
        }
    }
}
