// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ServerlessApplicationRepositoryClient {
    /// <p>Creates an application, optionally including an AWS SAM file to create the first application version in the same call.</p>
    func createApplication(input: CreateApplicationInput) async throws -> CreateApplicationOutputResponse
    {
        typealias createApplicationContinuation = CheckedContinuation<CreateApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createApplicationContinuation) in
            createApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an application version.</p>
    func createApplicationVersion(input: CreateApplicationVersionInput) async throws -> CreateApplicationVersionOutputResponse
    {
        typealias createApplicationVersionContinuation = CheckedContinuation<CreateApplicationVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createApplicationVersionContinuation) in
            createApplicationVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an AWS CloudFormation change set for the given application.</p>
    func createCloudFormationChangeSet(input: CreateCloudFormationChangeSetInput) async throws -> CreateCloudFormationChangeSetOutputResponse
    {
        typealias createCloudFormationChangeSetContinuation = CheckedContinuation<CreateCloudFormationChangeSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCloudFormationChangeSetContinuation) in
            createCloudFormationChangeSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an AWS CloudFormation template.</p>
    func createCloudFormationTemplate(input: CreateCloudFormationTemplateInput) async throws -> CreateCloudFormationTemplateOutputResponse
    {
        typealias createCloudFormationTemplateContinuation = CheckedContinuation<CreateCloudFormationTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCloudFormationTemplateContinuation) in
            createCloudFormationTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified application.</p>
    func deleteApplication(input: DeleteApplicationInput) async throws -> DeleteApplicationOutputResponse
    {
        typealias deleteApplicationContinuation = CheckedContinuation<DeleteApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteApplicationContinuation) in
            deleteApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the specified application.</p>
    func getApplication(input: GetApplicationInput) async throws -> GetApplicationOutputResponse
    {
        typealias getApplicationContinuation = CheckedContinuation<GetApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApplicationContinuation) in
            getApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the policy for the application.</p>
    func getApplicationPolicy(input: GetApplicationPolicyInput) async throws -> GetApplicationPolicyOutputResponse
    {
        typealias getApplicationPolicyContinuation = CheckedContinuation<GetApplicationPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApplicationPolicyContinuation) in
            getApplicationPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the specified AWS CloudFormation template.</p>
    func getCloudFormationTemplate(input: GetCloudFormationTemplateInput) async throws -> GetCloudFormationTemplateOutputResponse
    {
        typealias getCloudFormationTemplateContinuation = CheckedContinuation<GetCloudFormationTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCloudFormationTemplateContinuation) in
            getCloudFormationTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the list of applications nested in the containing application.</p>
    func listApplicationDependencies(input: ListApplicationDependenciesInput) async throws -> ListApplicationDependenciesOutputResponse
    {
        typealias listApplicationDependenciesContinuation = CheckedContinuation<ListApplicationDependenciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listApplicationDependenciesContinuation) in
            listApplicationDependencies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists versions for the specified application.</p>
    func listApplicationVersions(input: ListApplicationVersionsInput) async throws -> ListApplicationVersionsOutputResponse
    {
        typealias listApplicationVersionsContinuation = CheckedContinuation<ListApplicationVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listApplicationVersionsContinuation) in
            listApplicationVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists applications owned by the requester.</p>
    func listApplications(input: ListApplicationsInput) async throws -> ListApplicationsOutputResponse
    {
        typealias listApplicationsContinuation = CheckedContinuation<ListApplicationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listApplicationsContinuation) in
            listApplications(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets the permission policy for an application. For the list of actions supported for this operation, see
    ///  <a href="https://docs.aws.amazon.com/serverlessrepo/latest/devguide/access-control-resource-based.html#application-permissions">Application
    ///  Permissions</a>
    ///  .</p>
    func putApplicationPolicy(input: PutApplicationPolicyInput) async throws -> PutApplicationPolicyOutputResponse
    {
        typealias putApplicationPolicyContinuation = CheckedContinuation<PutApplicationPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putApplicationPolicyContinuation) in
            putApplicationPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Unshares an application from an AWS Organization.</p><p>This operation can be called only from the organization's master account.</p>
    func unshareApplication(input: UnshareApplicationInput) async throws -> UnshareApplicationOutputResponse
    {
        typealias unshareApplicationContinuation = CheckedContinuation<UnshareApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: unshareApplicationContinuation) in
            unshareApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the specified application.</p>
    func updateApplication(input: UpdateApplicationInput) async throws -> UpdateApplicationOutputResponse
    {
        typealias updateApplicationContinuation = CheckedContinuation<UpdateApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApplicationContinuation) in
            updateApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
