// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension GuardDutyClient {
    /// Accepts the invitation to be monitored by a GuardDuty administrator account.
    func acceptInvitation(input: AcceptInvitationInput) async throws -> AcceptInvitationOutputResponse
    {
        typealias acceptInvitationContinuation = CheckedContinuation<AcceptInvitationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acceptInvitationContinuation) in
            acceptInvitation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Archives GuardDuty findings that are specified by the list of finding IDs. Only the administrator account can archive findings. Member accounts don't have permission to archive findings from their accounts.
    func archiveFindings(input: ArchiveFindingsInput) async throws -> ArchiveFindingsOutputResponse
    {
        typealias archiveFindingsContinuation = CheckedContinuation<ArchiveFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: archiveFindingsContinuation) in
            archiveFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a single Amazon GuardDuty detector. A detector is a resource that represents the GuardDuty service. To start using GuardDuty, you must create a detector in each Region where you enable the service. You can have only one detector per account per Region. All data sources are enabled in a new detector by default.
    func createDetector(input: CreateDetectorInput) async throws -> CreateDetectorOutputResponse
    {
        typealias createDetectorContinuation = CheckedContinuation<CreateDetectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDetectorContinuation) in
            createDetector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a filter using the specified finding criteria.
    func createFilter(input: CreateFilterInput) async throws -> CreateFilterOutputResponse
    {
        typealias createFilterContinuation = CheckedContinuation<CreateFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFilterContinuation) in
            createFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new IPSet, which is called a trusted IP list in the console user interface. An IPSet is a list of IP addresses that are trusted for secure communication with AWS infrastructure and applications. GuardDuty doesn't generate findings for IP addresses that are included in IPSets. Only users from the administrator account can use this operation.
    func createIPSet(input: CreateIPSetInput) async throws -> CreateIPSetOutputResponse
    {
        typealias createIPSetContinuation = CheckedContinuation<CreateIPSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createIPSetContinuation) in
            createIPSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates member accounts of the current AWS account by specifying a list of AWS account IDs. This step is a prerequisite for managing the associated member accounts either by invitation or through an organization. When using Create Members as an organizations delegated administrator this action will enable GuardDuty in the added member accounts, with the exception of the organization delegated administrator account, which must enable GuardDuty prior to being added as a member. If you are adding accounts by invitation use this action after GuardDuty has been enabled in potential member accounts and before using [Invite Members](https://docs.aws.amazon.com/guardduty/latest/APIReference/API_InviteMembers.html).
    func createMembers(input: CreateMembersInput) async throws -> CreateMembersOutputResponse
    {
        typealias createMembersContinuation = CheckedContinuation<CreateMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMembersContinuation) in
            createMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a publishing destination to export findings to. The resource to export findings to must exist before you use this operation.
    func createPublishingDestination(input: CreatePublishingDestinationInput) async throws -> CreatePublishingDestinationOutputResponse
    {
        typealias createPublishingDestinationContinuation = CheckedContinuation<CreatePublishingDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPublishingDestinationContinuation) in
            createPublishingDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Generates example findings of types specified by the list of finding types. If 'NULL' is specified for findingTypes, the API generates example findings of all supported finding types.
    func createSampleFindings(input: CreateSampleFindingsInput) async throws -> CreateSampleFindingsOutputResponse
    {
        typealias createSampleFindingsContinuation = CheckedContinuation<CreateSampleFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSampleFindingsContinuation) in
            createSampleFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new ThreatIntelSet. ThreatIntelSets consist of known malicious IP addresses. GuardDuty generates findings based on ThreatIntelSets. Only users of the administrator account can use this operation.
    func createThreatIntelSet(input: CreateThreatIntelSetInput) async throws -> CreateThreatIntelSetOutputResponse
    {
        typealias createThreatIntelSetContinuation = CheckedContinuation<CreateThreatIntelSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createThreatIntelSetContinuation) in
            createThreatIntelSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Declines invitations sent to the current member account by AWS accounts specified by their account IDs.
    func declineInvitations(input: DeclineInvitationsInput) async throws -> DeclineInvitationsOutputResponse
    {
        typealias declineInvitationsContinuation = CheckedContinuation<DeclineInvitationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: declineInvitationsContinuation) in
            declineInvitations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an Amazon GuardDuty detector that is specified by the detector ID.
    func deleteDetector(input: DeleteDetectorInput) async throws -> DeleteDetectorOutputResponse
    {
        typealias deleteDetectorContinuation = CheckedContinuation<DeleteDetectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDetectorContinuation) in
            deleteDetector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the filter specified by the filter name.
    func deleteFilter(input: DeleteFilterInput) async throws -> DeleteFilterOutputResponse
    {
        typealias deleteFilterContinuation = CheckedContinuation<DeleteFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFilterContinuation) in
            deleteFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the IPSet specified by the ipSetId. IPSets are called trusted IP lists in the console user interface.
    func deleteIPSet(input: DeleteIPSetInput) async throws -> DeleteIPSetOutputResponse
    {
        typealias deleteIPSetContinuation = CheckedContinuation<DeleteIPSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIPSetContinuation) in
            deleteIPSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes invitations sent to the current member account by AWS accounts specified by their account IDs.
    func deleteInvitations(input: DeleteInvitationsInput) async throws -> DeleteInvitationsOutputResponse
    {
        typealias deleteInvitationsContinuation = CheckedContinuation<DeleteInvitationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteInvitationsContinuation) in
            deleteInvitations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes GuardDuty member accounts (to the current GuardDuty administrator account) specified by the account IDs.
    func deleteMembers(input: DeleteMembersInput) async throws -> DeleteMembersOutputResponse
    {
        typealias deleteMembersContinuation = CheckedContinuation<DeleteMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMembersContinuation) in
            deleteMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the publishing definition with the specified destinationId.
    func deletePublishingDestination(input: DeletePublishingDestinationInput) async throws -> DeletePublishingDestinationOutputResponse
    {
        typealias deletePublishingDestinationContinuation = CheckedContinuation<DeletePublishingDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePublishingDestinationContinuation) in
            deletePublishingDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the ThreatIntelSet specified by the ThreatIntelSet ID.
    func deleteThreatIntelSet(input: DeleteThreatIntelSetInput) async throws -> DeleteThreatIntelSetOutputResponse
    {
        typealias deleteThreatIntelSetContinuation = CheckedContinuation<DeleteThreatIntelSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteThreatIntelSetContinuation) in
            deleteThreatIntelSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the account selected as the delegated administrator for GuardDuty.
    func describeOrganizationConfiguration(input: DescribeOrganizationConfigurationInput) async throws -> DescribeOrganizationConfigurationOutputResponse
    {
        typealias describeOrganizationConfigurationContinuation = CheckedContinuation<DescribeOrganizationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeOrganizationConfigurationContinuation) in
            describeOrganizationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the publishing destination specified by the provided destinationId.
    func describePublishingDestination(input: DescribePublishingDestinationInput) async throws -> DescribePublishingDestinationOutputResponse
    {
        typealias describePublishingDestinationContinuation = CheckedContinuation<DescribePublishingDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePublishingDestinationContinuation) in
            describePublishingDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables an AWS account within the Organization as the GuardDuty delegated administrator.
    func disableOrganizationAdminAccount(input: DisableOrganizationAdminAccountInput) async throws -> DisableOrganizationAdminAccountOutputResponse
    {
        typealias disableOrganizationAdminAccountContinuation = CheckedContinuation<DisableOrganizationAdminAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableOrganizationAdminAccountContinuation) in
            disableOrganizationAdminAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates the current GuardDuty member account from its administrator account.
    func disassociateFromMasterAccount(input: DisassociateFromMasterAccountInput) async throws -> DisassociateFromMasterAccountOutputResponse
    {
        typealias disassociateFromMasterAccountContinuation = CheckedContinuation<DisassociateFromMasterAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateFromMasterAccountContinuation) in
            disassociateFromMasterAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates GuardDuty member accounts (to the current GuardDuty administrator account) specified by the account IDs.
    func disassociateMembers(input: DisassociateMembersInput) async throws -> DisassociateMembersOutputResponse
    {
        typealias disassociateMembersContinuation = CheckedContinuation<DisassociateMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateMembersContinuation) in
            disassociateMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables an AWS account within the organization as the GuardDuty delegated administrator.
    func enableOrganizationAdminAccount(input: EnableOrganizationAdminAccountInput) async throws -> EnableOrganizationAdminAccountOutputResponse
    {
        typealias enableOrganizationAdminAccountContinuation = CheckedContinuation<EnableOrganizationAdminAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableOrganizationAdminAccountContinuation) in
            enableOrganizationAdminAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves an Amazon GuardDuty detector specified by the detectorId.
    func getDetector(input: GetDetectorInput) async throws -> GetDetectorOutputResponse
    {
        typealias getDetectorContinuation = CheckedContinuation<GetDetectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDetectorContinuation) in
            getDetector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the details of the filter specified by the filter name.
    func getFilter(input: GetFilterInput) async throws -> GetFilterOutputResponse
    {
        typealias getFilterContinuation = CheckedContinuation<GetFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFilterContinuation) in
            getFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes Amazon GuardDuty findings specified by finding IDs.
    func getFindings(input: GetFindingsInput) async throws -> GetFindingsOutputResponse
    {
        typealias getFindingsContinuation = CheckedContinuation<GetFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFindingsContinuation) in
            getFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists Amazon GuardDuty findings statistics for the specified detector ID.
    func getFindingsStatistics(input: GetFindingsStatisticsInput) async throws -> GetFindingsStatisticsOutputResponse
    {
        typealias getFindingsStatisticsContinuation = CheckedContinuation<GetFindingsStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFindingsStatisticsContinuation) in
            getFindingsStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the IPSet specified by the ipSetId.
    func getIPSet(input: GetIPSetInput) async throws -> GetIPSetOutputResponse
    {
        typealias getIPSetContinuation = CheckedContinuation<GetIPSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIPSetContinuation) in
            getIPSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the count of all GuardDuty membership invitations that were sent to the current member account except the currently accepted invitation.
    func getInvitationsCount(input: GetInvitationsCountInput) async throws -> GetInvitationsCountOutputResponse
    {
        typealias getInvitationsCountContinuation = CheckedContinuation<GetInvitationsCountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInvitationsCountContinuation) in
            getInvitationsCount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides the details for the GuardDuty administrator account associated with the current GuardDuty member account.
    func getMasterAccount(input: GetMasterAccountInput) async throws -> GetMasterAccountOutputResponse
    {
        typealias getMasterAccountContinuation = CheckedContinuation<GetMasterAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMasterAccountContinuation) in
            getMasterAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes which data sources are enabled for the member account's detector.
    func getMemberDetectors(input: GetMemberDetectorsInput) async throws -> GetMemberDetectorsOutputResponse
    {
        typealias getMemberDetectorsContinuation = CheckedContinuation<GetMemberDetectorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMemberDetectorsContinuation) in
            getMemberDetectors(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves GuardDuty member accounts (of the current GuardDuty administrator account) specified by the account IDs.
    func getMembers(input: GetMembersInput) async throws -> GetMembersOutputResponse
    {
        typealias getMembersContinuation = CheckedContinuation<GetMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMembersContinuation) in
            getMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the ThreatIntelSet that is specified by the ThreatIntelSet ID.
    func getThreatIntelSet(input: GetThreatIntelSetInput) async throws -> GetThreatIntelSetOutputResponse
    {
        typealias getThreatIntelSetContinuation = CheckedContinuation<GetThreatIntelSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getThreatIntelSetContinuation) in
            getThreatIntelSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists Amazon GuardDuty usage statistics over the last 30 days for the specified detector ID. For newly enabled detectors or data sources the cost returned will include only the usage so far under 30 days, this may differ from the cost metrics in the console, which projects usage over 30 days to provide a monthly cost estimate. For more information see [Understanding How Usage Costs are Calculated](https://docs.aws.amazon.com/guardduty/latest/ug/monitoring_costs.html#usage-calculations).
    func getUsageStatistics(input: GetUsageStatisticsInput) async throws -> GetUsageStatisticsOutputResponse
    {
        typealias getUsageStatisticsContinuation = CheckedContinuation<GetUsageStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUsageStatisticsContinuation) in
            getUsageStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Invites other AWS accounts (created as members of the current AWS account by CreateMembers) to enable GuardDuty, and allow the current AWS account to view and manage these accounts' findings on their behalf as the GuardDuty administrator account.
    func inviteMembers(input: InviteMembersInput) async throws -> InviteMembersOutputResponse
    {
        typealias inviteMembersContinuation = CheckedContinuation<InviteMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: inviteMembersContinuation) in
            inviteMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists detectorIds of all the existing Amazon GuardDuty detector resources.
    func listDetectors(input: ListDetectorsInput) async throws -> ListDetectorsOutputResponse
    {
        typealias listDetectorsContinuation = CheckedContinuation<ListDetectorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDetectorsContinuation) in
            listDetectors(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a paginated list of the current filters.
    func listFilters(input: ListFiltersInput) async throws -> ListFiltersOutputResponse
    {
        typealias listFiltersContinuation = CheckedContinuation<ListFiltersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFiltersContinuation) in
            listFilters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists Amazon GuardDuty findings for the specified detector ID.
    func listFindings(input: ListFindingsInput) async throws -> ListFindingsOutputResponse
    {
        typealias listFindingsContinuation = CheckedContinuation<ListFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFindingsContinuation) in
            listFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the IPSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the IPSets returned are the IPSets from the associated administrator account.
    func listIPSets(input: ListIPSetsInput) async throws -> ListIPSetsOutputResponse
    {
        typealias listIPSetsContinuation = CheckedContinuation<ListIPSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIPSetsContinuation) in
            listIPSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all GuardDuty membership invitations that were sent to the current AWS account.
    func listInvitations(input: ListInvitationsInput) async throws -> ListInvitationsOutputResponse
    {
        typealias listInvitationsContinuation = CheckedContinuation<ListInvitationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInvitationsContinuation) in
            listInvitations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists details about all member accounts for the current GuardDuty administrator account.
    func listMembers(input: ListMembersInput) async throws -> ListMembersOutputResponse
    {
        typealias listMembersContinuation = CheckedContinuation<ListMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMembersContinuation) in
            listMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the accounts configured as GuardDuty delegated administrators.
    func listOrganizationAdminAccounts(input: ListOrganizationAdminAccountsInput) async throws -> ListOrganizationAdminAccountsOutputResponse
    {
        typealias listOrganizationAdminAccountsContinuation = CheckedContinuation<ListOrganizationAdminAccountsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOrganizationAdminAccountsContinuation) in
            listOrganizationAdminAccounts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of publishing destinations associated with the specified dectectorId.
    func listPublishingDestinations(input: ListPublishingDestinationsInput) async throws -> ListPublishingDestinationsOutputResponse
    {
        typealias listPublishingDestinationsContinuation = CheckedContinuation<ListPublishingDestinationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPublishingDestinationsContinuation) in
            listPublishingDestinations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists tags for a resource. Tagging is currently supported for detectors, finding filters, IP sets, and threat intel sets, with a limit of 50 tags per resource. When invoked, this operation returns all assigned tags for a given resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the ThreatIntelSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the ThreatIntelSets associated with the administrator account are returned.
    func listThreatIntelSets(input: ListThreatIntelSetsInput) async throws -> ListThreatIntelSetsOutputResponse
    {
        typealias listThreatIntelSetsContinuation = CheckedContinuation<ListThreatIntelSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThreatIntelSetsContinuation) in
            listThreatIntelSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Turns on GuardDuty monitoring of the specified member accounts. Use this operation to restart monitoring of accounts that you stopped monitoring with the StopMonitoringMembers operation.
    func startMonitoringMembers(input: StartMonitoringMembersInput) async throws -> StartMonitoringMembersOutputResponse
    {
        typealias startMonitoringMembersContinuation = CheckedContinuation<StartMonitoringMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startMonitoringMembersContinuation) in
            startMonitoringMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops GuardDuty monitoring for the specified member accounts. Use the StartMonitoringMembers operation to restart monitoring for those accounts.
    func stopMonitoringMembers(input: StopMonitoringMembersInput) async throws -> StopMonitoringMembersOutputResponse
    {
        typealias stopMonitoringMembersContinuation = CheckedContinuation<StopMonitoringMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopMonitoringMembersContinuation) in
            stopMonitoringMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds tags to a resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Unarchives GuardDuty findings specified by the findingIds.
    func unarchiveFindings(input: UnarchiveFindingsInput) async throws -> UnarchiveFindingsOutputResponse
    {
        typealias unarchiveFindingsContinuation = CheckedContinuation<UnarchiveFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: unarchiveFindingsContinuation) in
            unarchiveFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes tags from a resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the Amazon GuardDuty detector specified by the detectorId.
    func updateDetector(input: UpdateDetectorInput) async throws -> UpdateDetectorOutputResponse
    {
        typealias updateDetectorContinuation = CheckedContinuation<UpdateDetectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDetectorContinuation) in
            updateDetector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the filter specified by the filter name.
    func updateFilter(input: UpdateFilterInput) async throws -> UpdateFilterOutputResponse
    {
        typealias updateFilterContinuation = CheckedContinuation<UpdateFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFilterContinuation) in
            updateFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Marks the specified GuardDuty findings as useful or not useful.
    func updateFindingsFeedback(input: UpdateFindingsFeedbackInput) async throws -> UpdateFindingsFeedbackOutputResponse
    {
        typealias updateFindingsFeedbackContinuation = CheckedContinuation<UpdateFindingsFeedbackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFindingsFeedbackContinuation) in
            updateFindingsFeedback(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the IPSet specified by the IPSet ID.
    func updateIPSet(input: UpdateIPSetInput) async throws -> UpdateIPSetOutputResponse
    {
        typealias updateIPSetContinuation = CheckedContinuation<UpdateIPSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateIPSetContinuation) in
            updateIPSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Contains information on member accounts to be updated.
    func updateMemberDetectors(input: UpdateMemberDetectorsInput) async throws -> UpdateMemberDetectorsOutputResponse
    {
        typealias updateMemberDetectorsContinuation = CheckedContinuation<UpdateMemberDetectorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMemberDetectorsContinuation) in
            updateMemberDetectors(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the delegated administrator account with the values provided.
    func updateOrganizationConfiguration(input: UpdateOrganizationConfigurationInput) async throws -> UpdateOrganizationConfigurationOutputResponse
    {
        typealias updateOrganizationConfigurationContinuation = CheckedContinuation<UpdateOrganizationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateOrganizationConfigurationContinuation) in
            updateOrganizationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates information about the publishing destination specified by the destinationId.
    func updatePublishingDestination(input: UpdatePublishingDestinationInput) async throws -> UpdatePublishingDestinationOutputResponse
    {
        typealias updatePublishingDestinationContinuation = CheckedContinuation<UpdatePublishingDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePublishingDestinationContinuation) in
            updatePublishingDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the ThreatIntelSet specified by the ThreatIntelSet ID.
    func updateThreatIntelSet(input: UpdateThreatIntelSetInput) async throws -> UpdateThreatIntelSetOutputResponse
    {
        typealias updateThreatIntelSetContinuation = CheckedContinuation<UpdateThreatIntelSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateThreatIntelSetContinuation) in
            updateThreatIntelSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
