// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInstanceGroupsOutputResponseBody: Equatable {
    public let instanceGroups: [InstanceGroup]?
    public let marker: String?
}

extension ListInstanceGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceGroups = "InstanceGroups"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceGroupsContainer = try containerValues.decodeIfPresent([InstanceGroup?].self, forKey: .instanceGroups)
        var instanceGroupsDecoded0:[InstanceGroup]? = nil
        if let instanceGroupsContainer = instanceGroupsContainer {
            instanceGroupsDecoded0 = [InstanceGroup]()
            for structure0 in instanceGroupsContainer {
                if let structure0 = structure0 {
                    instanceGroupsDecoded0?.append(structure0)
                }
            }
        }
        instanceGroups = instanceGroupsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
