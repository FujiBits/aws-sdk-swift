// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartNotebookExecutionInputHeadersMiddleware: Middleware {
    public let id: String = "StartNotebookExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartNotebookExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartNotebookExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartNotebookExecutionInput>
    public typealias MOutput = OperationOutput<StartNotebookExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartNotebookExecutionOutputError>
}

public struct StartNotebookExecutionInputQueryItemMiddleware: Middleware {
    public let id: String = "StartNotebookExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartNotebookExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartNotebookExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartNotebookExecutionInput>
    public typealias MOutput = OperationOutput<StartNotebookExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartNotebookExecutionOutputError>
}

public struct StartNotebookExecutionInputBodyMiddleware: Middleware {
    public let id: String = "StartNotebookExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartNotebookExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartNotebookExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartNotebookExecutionInput>
    public typealias MOutput = OperationOutput<StartNotebookExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartNotebookExecutionOutputError>
}

extension StartNotebookExecutionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case editorId = "EditorId"
        case executionEngine = "ExecutionEngine"
        case notebookExecutionName = "NotebookExecutionName"
        case notebookInstanceSecurityGroupId = "NotebookInstanceSecurityGroupId"
        case notebookParams = "NotebookParams"
        case relativePath = "RelativePath"
        case serviceRole = "ServiceRole"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let editorId = editorId {
            try encodeContainer.encode(editorId, forKey: .editorId)
        }
        if let executionEngine = executionEngine {
            try encodeContainer.encode(executionEngine, forKey: .executionEngine)
        }
        if let notebookExecutionName = notebookExecutionName {
            try encodeContainer.encode(notebookExecutionName, forKey: .notebookExecutionName)
        }
        if let notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupId {
            try encodeContainer.encode(notebookInstanceSecurityGroupId, forKey: .notebookInstanceSecurityGroupId)
        }
        if let notebookParams = notebookParams {
            try encodeContainer.encode(notebookParams, forKey: .notebookParams)
        }
        if let relativePath = relativePath {
            try encodeContainer.encode(relativePath, forKey: .relativePath)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
