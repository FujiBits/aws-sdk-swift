// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension KafkaConnectClient {
    /// Creates a connector using the specified properties.
    func createConnector(input: CreateConnectorInput) async throws -> CreateConnectorOutputResponse
    {
        typealias createConnectorContinuation = CheckedContinuation<CreateConnectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConnectorContinuation) in
            createConnector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a custom plugin using the specified properties.
    func createCustomPlugin(input: CreateCustomPluginInput) async throws -> CreateCustomPluginOutputResponse
    {
        typealias createCustomPluginContinuation = CheckedContinuation<CreateCustomPluginOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCustomPluginContinuation) in
            createCustomPlugin(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a worker configuration using the specified properties.
    func createWorkerConfiguration(input: CreateWorkerConfigurationInput) async throws -> CreateWorkerConfigurationOutputResponse
    {
        typealias createWorkerConfigurationContinuation = CheckedContinuation<CreateWorkerConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWorkerConfigurationContinuation) in
            createWorkerConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified connector.
    func deleteConnector(input: DeleteConnectorInput) async throws -> DeleteConnectorOutputResponse
    {
        typealias deleteConnectorContinuation = CheckedContinuation<DeleteConnectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConnectorContinuation) in
            deleteConnector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns summary information about the connector.
    func describeConnector(input: DescribeConnectorInput) async throws -> DescribeConnectorOutputResponse
    {
        typealias describeConnectorContinuation = CheckedContinuation<DescribeConnectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeConnectorContinuation) in
            describeConnector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// A summary description of the custom plugin.
    func describeCustomPlugin(input: DescribeCustomPluginInput) async throws -> DescribeCustomPluginOutputResponse
    {
        typealias describeCustomPluginContinuation = CheckedContinuation<DescribeCustomPluginOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCustomPluginContinuation) in
            describeCustomPlugin(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a worker configuration.
    func describeWorkerConfiguration(input: DescribeWorkerConfigurationInput) async throws -> DescribeWorkerConfigurationOutputResponse
    {
        typealias describeWorkerConfigurationContinuation = CheckedContinuation<DescribeWorkerConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeWorkerConfigurationContinuation) in
            describeWorkerConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of all the connectors in this account and Region. The list is limited to connectors whose name starts with the specified prefix. The response also includes a description of each of the listed connectors.
    func listConnectors(input: ListConnectorsInput) async throws -> ListConnectorsOutputResponse
    {
        typealias listConnectorsContinuation = CheckedContinuation<ListConnectorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listConnectorsContinuation) in
            listConnectors(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of all of the custom plugins in this account and Region.
    func listCustomPlugins(input: ListCustomPluginsInput) async throws -> ListCustomPluginsOutputResponse
    {
        typealias listCustomPluginsContinuation = CheckedContinuation<ListCustomPluginsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCustomPluginsContinuation) in
            listCustomPlugins(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of all of the worker configurations in this account and Region.
    func listWorkerConfigurations(input: ListWorkerConfigurationsInput) async throws -> ListWorkerConfigurationsOutputResponse
    {
        typealias listWorkerConfigurationsContinuation = CheckedContinuation<ListWorkerConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWorkerConfigurationsContinuation) in
            listWorkerConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified connector.
    func updateConnector(input: UpdateConnectorInput) async throws -> UpdateConnectorOutputResponse
    {
        typealias updateConnectorContinuation = CheckedContinuation<UpdateConnectorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConnectorContinuation) in
            updateConnector(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
