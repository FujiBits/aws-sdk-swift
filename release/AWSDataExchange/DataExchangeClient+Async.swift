// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension DataExchangeClient {
    /// This operation cancels a job. Jobs can be cancelled only when they are in the WAITING state.
    func cancelJob(input: CancelJobInput) async throws -> CancelJobOutputResponse
    {
        typealias cancelJobContinuation = CheckedContinuation<CancelJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelJobContinuation) in
            cancelJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation creates a data set.
    func createDataSet(input: CreateDataSetInput) async throws -> CreateDataSetOutputResponse
    {
        typealias createDataSetContinuation = CheckedContinuation<CreateDataSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDataSetContinuation) in
            createDataSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation creates a job.
    func createJob(input: CreateJobInput) async throws -> CreateJobOutputResponse
    {
        typealias createJobContinuation = CheckedContinuation<CreateJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createJobContinuation) in
            createJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation creates a revision for a data set.
    func createRevision(input: CreateRevisionInput) async throws -> CreateRevisionOutputResponse
    {
        typealias createRevisionContinuation = CheckedContinuation<CreateRevisionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRevisionContinuation) in
            createRevision(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation deletes an asset.
    func deleteAsset(input: DeleteAssetInput) async throws -> DeleteAssetOutputResponse
    {
        typealias deleteAssetContinuation = CheckedContinuation<DeleteAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAssetContinuation) in
            deleteAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation deletes a data set.
    func deleteDataSet(input: DeleteDataSetInput) async throws -> DeleteDataSetOutputResponse
    {
        typealias deleteDataSetContinuation = CheckedContinuation<DeleteDataSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDataSetContinuation) in
            deleteDataSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation deletes a revision.
    func deleteRevision(input: DeleteRevisionInput) async throws -> DeleteRevisionOutputResponse
    {
        typealias deleteRevisionContinuation = CheckedContinuation<DeleteRevisionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRevisionContinuation) in
            deleteRevision(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation returns information about an asset.
    func getAsset(input: GetAssetInput) async throws -> GetAssetOutputResponse
    {
        typealias getAssetContinuation = CheckedContinuation<GetAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAssetContinuation) in
            getAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation returns information about a data set.
    func getDataSet(input: GetDataSetInput) async throws -> GetDataSetOutputResponse
    {
        typealias getDataSetContinuation = CheckedContinuation<GetDataSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDataSetContinuation) in
            getDataSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation returns information about a job.
    func getJob(input: GetJobInput) async throws -> GetJobOutputResponse
    {
        typealias getJobContinuation = CheckedContinuation<GetJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getJobContinuation) in
            getJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation returns information about a revision.
    func getRevision(input: GetRevisionInput) async throws -> GetRevisionOutputResponse
    {
        typealias getRevisionContinuation = CheckedContinuation<GetRevisionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRevisionContinuation) in
            getRevision(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation lists a data set's revisions sorted by CreatedAt in descending order.
    func listDataSetRevisions(input: ListDataSetRevisionsInput) async throws -> ListDataSetRevisionsOutputResponse
    {
        typealias listDataSetRevisionsContinuation = CheckedContinuation<ListDataSetRevisionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDataSetRevisionsContinuation) in
            listDataSetRevisions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation lists your data sets. When listing by origin OWNED, results are sorted by CreatedAt in descending order. When listing by origin ENTITLED, there is no order and the maxResults parameter is ignored.
    func listDataSets(input: ListDataSetsInput) async throws -> ListDataSetsOutputResponse
    {
        typealias listDataSetsContinuation = CheckedContinuation<ListDataSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDataSetsContinuation) in
            listDataSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation lists your jobs sorted by CreatedAt in descending order.
    func listJobs(input: ListJobsInput) async throws -> ListJobsOutputResponse
    {
        typealias listJobsContinuation = CheckedContinuation<ListJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJobsContinuation) in
            listJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation lists a revision's assets sorted alphabetically in descending order.
    func listRevisionAssets(input: ListRevisionAssetsInput) async throws -> ListRevisionAssetsOutputResponse
    {
        typealias listRevisionAssetsContinuation = CheckedContinuation<ListRevisionAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRevisionAssetsContinuation) in
            listRevisionAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation lists the tags on the resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation starts a job.
    func startJob(input: StartJobInput) async throws -> StartJobOutputResponse
    {
        typealias startJobContinuation = CheckedContinuation<StartJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startJobContinuation) in
            startJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation tags a resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation removes one or more tags from a resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation updates an asset.
    func updateAsset(input: UpdateAssetInput) async throws -> UpdateAssetOutputResponse
    {
        typealias updateAssetContinuation = CheckedContinuation<UpdateAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAssetContinuation) in
            updateAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation updates a data set.
    func updateDataSet(input: UpdateDataSetInput) async throws -> UpdateDataSetOutputResponse
    {
        typealias updateDataSetContinuation = CheckedContinuation<UpdateDataSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDataSetContinuation) in
            updateDataSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation updates a revision.
    func updateRevision(input: UpdateRevisionInput) async throws -> UpdateRevisionOutputResponse
    {
        typealias updateRevisionContinuation = CheckedContinuation<UpdateRevisionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRevisionContinuation) in
            updateRevision(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
