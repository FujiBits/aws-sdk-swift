// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension BackupClient {
    /// Creates a backup plan using a backup plan name and backup rules. A backup plan is a document that contains information that Backup uses to schedule tasks that create recovery points for resources. If you call CreateBackupPlan with a plan that already exists, you receive an AlreadyExistsException exception.
    func createBackupPlan(input: CreateBackupPlanInput) async throws -> CreateBackupPlanOutputResponse
    {
        typealias createBackupPlanContinuation = CheckedContinuation<CreateBackupPlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBackupPlanContinuation) in
            createBackupPlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a JSON document that specifies a set of resources to assign to a backup plan. Resources can be included by specifying patterns for a ListOfTags and selected Resources. For example, consider the following patterns:
    ///
    /// * Resources: "arn:aws:ec2:region:account-id:volume/volume-id"
    ///
    /// * ConditionKey:"department"ConditionValue:"finance"ConditionType:"StringEquals"
    ///
    /// * ConditionKey:"importance"ConditionValue:"critical"ConditionType:"StringEquals"
    ///
    ///
    /// Using these patterns would back up all Amazon Elastic Block Store (Amazon EBS) volumes that are tagged as "department=finance", "importance=critical", in addition to an EBS volume with the specified volume ID. Resources and conditions are additive in that all resources that match the pattern are selected. This shouldn't be confused with a logical AND, where all conditions must match. The matching patterns are logically put together using the OR operator. In other words, all patterns that match are selected for backup.
    func createBackupSelection(input: CreateBackupSelectionInput) async throws -> CreateBackupSelectionOutputResponse
    {
        typealias createBackupSelectionContinuation = CheckedContinuation<CreateBackupSelectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBackupSelectionContinuation) in
            createBackupSelection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a logical container where backups are stored. A CreateBackupVault request includes a name, optionally one or more resource tags, an encryption key, and a request ID. Do not include sensitive data, such as passport numbers, in the name of a backup vault.
    func createBackupVault(input: CreateBackupVaultInput) async throws -> CreateBackupVaultOutputResponse
    {
        typealias createBackupVaultContinuation = CheckedContinuation<CreateBackupVaultOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBackupVaultContinuation) in
            createBackupVault(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a framework with one or more controls. A framework is a collection of controls that you can use to evaluate your backup practices. By using pre-built customizable controls to define your policies, you can evaluate whether your backup practices comply with your policies. To get insights into the compliance status of your frameworks, you can set up automatic daily reports.
    func createFramework(input: CreateFrameworkInput) async throws -> CreateFrameworkOutputResponse
    {
        typealias createFrameworkContinuation = CheckedContinuation<CreateFrameworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFrameworkContinuation) in
            createFramework(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a report plan. A report plan is a document that contains information about the contents of the report and where Backup will deliver it. If you call CreateReportPlan with a plan that already exists, you receive an AlreadyExistsException exception.
    func createReportPlan(input: CreateReportPlanInput) async throws -> CreateReportPlanOutputResponse
    {
        typealias createReportPlanContinuation = CheckedContinuation<CreateReportPlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createReportPlanContinuation) in
            createReportPlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a backup plan. A backup plan can only be deleted after all associated selections of resources have been deleted. Deleting a backup plan deletes the current version of a backup plan. Previous versions, if any, will still exist.
    func deleteBackupPlan(input: DeleteBackupPlanInput) async throws -> DeleteBackupPlanOutputResponse
    {
        typealias deleteBackupPlanContinuation = CheckedContinuation<DeleteBackupPlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBackupPlanContinuation) in
            deleteBackupPlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the resource selection associated with a backup plan that is specified by the SelectionId.
    func deleteBackupSelection(input: DeleteBackupSelectionInput) async throws -> DeleteBackupSelectionOutputResponse
    {
        typealias deleteBackupSelectionContinuation = CheckedContinuation<DeleteBackupSelectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBackupSelectionContinuation) in
            deleteBackupSelection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the backup vault identified by its name. A vault can be deleted only if it is empty.
    func deleteBackupVault(input: DeleteBackupVaultInput) async throws -> DeleteBackupVaultOutputResponse
    {
        typealias deleteBackupVaultContinuation = CheckedContinuation<DeleteBackupVaultOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBackupVaultContinuation) in
            deleteBackupVault(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the policy document that manages permissions on a backup vault.
    func deleteBackupVaultAccessPolicy(input: DeleteBackupVaultAccessPolicyInput) async throws -> DeleteBackupVaultAccessPolicyOutputResponse
    {
        typealias deleteBackupVaultAccessPolicyContinuation = CheckedContinuation<DeleteBackupVaultAccessPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBackupVaultAccessPolicyContinuation) in
            deleteBackupVaultAccessPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes event notifications for the specified backup vault.
    func deleteBackupVaultNotifications(input: DeleteBackupVaultNotificationsInput) async throws -> DeleteBackupVaultNotificationsOutputResponse
    {
        typealias deleteBackupVaultNotificationsContinuation = CheckedContinuation<DeleteBackupVaultNotificationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBackupVaultNotificationsContinuation) in
            deleteBackupVaultNotifications(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the framework specified by a framework name.
    func deleteFramework(input: DeleteFrameworkInput) async throws -> DeleteFrameworkOutputResponse
    {
        typealias deleteFrameworkContinuation = CheckedContinuation<DeleteFrameworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFrameworkContinuation) in
            deleteFramework(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the recovery point specified by a recovery point ID. If the recovery point ID belongs to a continuous backup, calling this endpoint deletes the existing continuous backup and stops future continuous backup.
    func deleteRecoveryPoint(input: DeleteRecoveryPointInput) async throws -> DeleteRecoveryPointOutputResponse
    {
        typealias deleteRecoveryPointContinuation = CheckedContinuation<DeleteRecoveryPointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRecoveryPointContinuation) in
            deleteRecoveryPoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the report plan specified by a report plan name.
    func deleteReportPlan(input: DeleteReportPlanInput) async throws -> DeleteReportPlanOutputResponse
    {
        typealias deleteReportPlanContinuation = CheckedContinuation<DeleteReportPlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteReportPlanContinuation) in
            deleteReportPlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns backup job details for the specified BackupJobId.
    func describeBackupJob(input: DescribeBackupJobInput) async throws -> DescribeBackupJobOutputResponse
    {
        typealias describeBackupJobContinuation = CheckedContinuation<DescribeBackupJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeBackupJobContinuation) in
            describeBackupJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns metadata about a backup vault specified by its name.
    func describeBackupVault(input: DescribeBackupVaultInput) async throws -> DescribeBackupVaultOutputResponse
    {
        typealias describeBackupVaultContinuation = CheckedContinuation<DescribeBackupVaultOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeBackupVaultContinuation) in
            describeBackupVault(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns metadata associated with creating a copy of a resource.
    func describeCopyJob(input: DescribeCopyJobInput) async throws -> DescribeCopyJobOutputResponse
    {
        typealias describeCopyJobContinuation = CheckedContinuation<DescribeCopyJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCopyJobContinuation) in
            describeCopyJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the framework details for the specified FrameworkName.
    func describeFramework(input: DescribeFrameworkInput) async throws -> DescribeFrameworkOutputResponse
    {
        typealias describeFrameworkContinuation = CheckedContinuation<DescribeFrameworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeFrameworkContinuation) in
            describeFramework(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes whether the Amazon Web Services account is opted in to cross-account backup. Returns an error if the account is not a member of an Organizations organization. Example: describe-global-settings --region us-west-2
    func describeGlobalSettings(input: DescribeGlobalSettingsInput) async throws -> DescribeGlobalSettingsOutputResponse
    {
        typealias describeGlobalSettingsContinuation = CheckedContinuation<DescribeGlobalSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeGlobalSettingsContinuation) in
            describeGlobalSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a saved resource, including the last time it was backed up, its Amazon Resource Name (ARN), and the Amazon Web Services service type of the saved resource.
    func describeProtectedResource(input: DescribeProtectedResourceInput) async throws -> DescribeProtectedResourceOutputResponse
    {
        typealias describeProtectedResourceContinuation = CheckedContinuation<DescribeProtectedResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProtectedResourceContinuation) in
            describeProtectedResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns metadata associated with a recovery point, including ID, status, encryption, and lifecycle.
    func describeRecoveryPoint(input: DescribeRecoveryPointInput) async throws -> DescribeRecoveryPointOutputResponse
    {
        typealias describeRecoveryPointContinuation = CheckedContinuation<DescribeRecoveryPointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRecoveryPointContinuation) in
            describeRecoveryPoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the current service opt-in settings for the Region. If service opt-in is enabled for a service, Backup tries to protect that service's resources in this Region, when the resource is included in an on-demand backup or scheduled backup plan. Otherwise, Backup does not try to protect that service's resources in this Region.
    func describeRegionSettings(input: DescribeRegionSettingsInput) async throws -> DescribeRegionSettingsOutputResponse
    {
        typealias describeRegionSettingsContinuation = CheckedContinuation<DescribeRegionSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRegionSettingsContinuation) in
            describeRegionSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the details associated with creating a report as specified by its ReportJobId.
    func describeReportJob(input: DescribeReportJobInput) async throws -> DescribeReportJobOutputResponse
    {
        typealias describeReportJobContinuation = CheckedContinuation<DescribeReportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeReportJobContinuation) in
            describeReportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of all report plans for an Amazon Web Services account and Amazon Web Services Region.
    func describeReportPlan(input: DescribeReportPlanInput) async throws -> DescribeReportPlanOutputResponse
    {
        typealias describeReportPlanContinuation = CheckedContinuation<DescribeReportPlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeReportPlanContinuation) in
            describeReportPlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns metadata associated with a restore job that is specified by a job ID.
    func describeRestoreJob(input: DescribeRestoreJobInput) async throws -> DescribeRestoreJobOutputResponse
    {
        typealias describeRestoreJobContinuation = CheckedContinuation<DescribeRestoreJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRestoreJobContinuation) in
            describeRestoreJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified continuous backup recovery point from Backup and releases control of that continuous backup to the source service, such as Amazon RDS. The source service will continue to create and retain continuous backups using the lifecycle that you specified in your original backup plan. Does not support snapshot backup recovery points.
    func disassociateRecoveryPoint(input: DisassociateRecoveryPointInput) async throws -> DisassociateRecoveryPointOutputResponse
    {
        typealias disassociateRecoveryPointContinuation = CheckedContinuation<DisassociateRecoveryPointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateRecoveryPointContinuation) in
            disassociateRecoveryPoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the backup plan that is specified by the plan ID as a backup template.
    func exportBackupPlanTemplate(input: ExportBackupPlanTemplateInput) async throws -> ExportBackupPlanTemplateOutputResponse
    {
        typealias exportBackupPlanTemplateContinuation = CheckedContinuation<ExportBackupPlanTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportBackupPlanTemplateContinuation) in
            exportBackupPlanTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns BackupPlan details for the specified BackupPlanId. The details are the body of a backup plan in JSON format, in addition to plan metadata.
    func getBackupPlan(input: GetBackupPlanInput) async throws -> GetBackupPlanOutputResponse
    {
        typealias getBackupPlanContinuation = CheckedContinuation<GetBackupPlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackupPlanContinuation) in
            getBackupPlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a valid JSON document specifying a backup plan or an error.
    func getBackupPlanFromJSON(input: GetBackupPlanFromJSONInput) async throws -> GetBackupPlanFromJSONOutputResponse
    {
        typealias getBackupPlanFromJSONContinuation = CheckedContinuation<GetBackupPlanFromJSONOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackupPlanFromJSONContinuation) in
            getBackupPlanFromJSON(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the template specified by its templateId as a backup plan.
    func getBackupPlanFromTemplate(input: GetBackupPlanFromTemplateInput) async throws -> GetBackupPlanFromTemplateOutputResponse
    {
        typealias getBackupPlanFromTemplateContinuation = CheckedContinuation<GetBackupPlanFromTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackupPlanFromTemplateContinuation) in
            getBackupPlanFromTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns selection metadata and a document in JSON format that specifies a list of resources that are associated with a backup plan.
    func getBackupSelection(input: GetBackupSelectionInput) async throws -> GetBackupSelectionOutputResponse
    {
        typealias getBackupSelectionContinuation = CheckedContinuation<GetBackupSelectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackupSelectionContinuation) in
            getBackupSelection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the access policy document that is associated with the named backup vault.
    func getBackupVaultAccessPolicy(input: GetBackupVaultAccessPolicyInput) async throws -> GetBackupVaultAccessPolicyOutputResponse
    {
        typealias getBackupVaultAccessPolicyContinuation = CheckedContinuation<GetBackupVaultAccessPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackupVaultAccessPolicyContinuation) in
            getBackupVaultAccessPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns event notifications for the specified backup vault.
    func getBackupVaultNotifications(input: GetBackupVaultNotificationsInput) async throws -> GetBackupVaultNotificationsOutputResponse
    {
        typealias getBackupVaultNotificationsContinuation = CheckedContinuation<GetBackupVaultNotificationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackupVaultNotificationsContinuation) in
            getBackupVaultNotifications(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a set of metadata key-value pairs that were used to create the backup.
    func getRecoveryPointRestoreMetadata(input: GetRecoveryPointRestoreMetadataInput) async throws -> GetRecoveryPointRestoreMetadataOutputResponse
    {
        typealias getRecoveryPointRestoreMetadataContinuation = CheckedContinuation<GetRecoveryPointRestoreMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRecoveryPointRestoreMetadataContinuation) in
            getRecoveryPointRestoreMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the Amazon Web Services resource types supported by Backup.
    func getSupportedResourceTypes(input: GetSupportedResourceTypesInput) async throws -> GetSupportedResourceTypesOutputResponse
    {
        typealias getSupportedResourceTypesContinuation = CheckedContinuation<GetSupportedResourceTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSupportedResourceTypesContinuation) in
            getSupportedResourceTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of existing backup jobs for an authenticated account for the last 30 days. For a longer period of time, consider using these [monitoring tools](https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html).
    func listBackupJobs(input: ListBackupJobsInput) async throws -> ListBackupJobsOutputResponse
    {
        typealias listBackupJobsContinuation = CheckedContinuation<ListBackupJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBackupJobsContinuation) in
            listBackupJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns metadata of your saved backup plan templates, including the template ID, name, and the creation and deletion dates.
    func listBackupPlanTemplates(input: ListBackupPlanTemplatesInput) async throws -> ListBackupPlanTemplatesOutputResponse
    {
        typealias listBackupPlanTemplatesContinuation = CheckedContinuation<ListBackupPlanTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBackupPlanTemplatesContinuation) in
            listBackupPlanTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns version metadata of your backup plans, including Amazon Resource Names (ARNs), backup plan IDs, creation and deletion dates, plan names, and version IDs.
    func listBackupPlanVersions(input: ListBackupPlanVersionsInput) async throws -> ListBackupPlanVersionsOutputResponse
    {
        typealias listBackupPlanVersionsContinuation = CheckedContinuation<ListBackupPlanVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBackupPlanVersionsContinuation) in
            listBackupPlanVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of all active backup plans for an authenticated account. The list contains information such as Amazon Resource Names (ARNs), plan IDs, creation and deletion dates, version IDs, plan names, and creator request IDs.
    func listBackupPlans(input: ListBackupPlansInput) async throws -> ListBackupPlansOutputResponse
    {
        typealias listBackupPlansContinuation = CheckedContinuation<ListBackupPlansOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBackupPlansContinuation) in
            listBackupPlans(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns an array containing metadata of the resources associated with the target backup plan.
    func listBackupSelections(input: ListBackupSelectionsInput) async throws -> ListBackupSelectionsOutputResponse
    {
        typealias listBackupSelectionsContinuation = CheckedContinuation<ListBackupSelectionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBackupSelectionsContinuation) in
            listBackupSelections(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of recovery point storage containers along with information about them.
    func listBackupVaults(input: ListBackupVaultsInput) async throws -> ListBackupVaultsOutputResponse
    {
        typealias listBackupVaultsContinuation = CheckedContinuation<ListBackupVaultsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBackupVaultsContinuation) in
            listBackupVaults(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns metadata about your copy jobs.
    func listCopyJobs(input: ListCopyJobsInput) async throws -> ListCopyJobsOutputResponse
    {
        typealias listCopyJobsContinuation = CheckedContinuation<ListCopyJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCopyJobsContinuation) in
            listCopyJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of all frameworks for an Amazon Web Services account and Amazon Web Services Region.
    func listFrameworks(input: ListFrameworksInput) async throws -> ListFrameworksOutputResponse
    {
        typealias listFrameworksContinuation = CheckedContinuation<ListFrameworksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFrameworksContinuation) in
            listFrameworks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns an array of resources successfully backed up by Backup, including the time the resource was saved, an Amazon Resource Name (ARN) of the resource, and a resource type.
    func listProtectedResources(input: ListProtectedResourcesInput) async throws -> ListProtectedResourcesOutputResponse
    {
        typealias listProtectedResourcesContinuation = CheckedContinuation<ListProtectedResourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProtectedResourcesContinuation) in
            listProtectedResources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns detailed information about the recovery points stored in a backup vault.
    func listRecoveryPointsByBackupVault(input: ListRecoveryPointsByBackupVaultInput) async throws -> ListRecoveryPointsByBackupVaultOutputResponse
    {
        typealias listRecoveryPointsByBackupVaultContinuation = CheckedContinuation<ListRecoveryPointsByBackupVaultOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRecoveryPointsByBackupVaultContinuation) in
            listRecoveryPointsByBackupVault(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns detailed information about all the recovery points of the type specified by a resource Amazon Resource Name (ARN). For Amazon EFS and Amazon EC2, this action only lists recovery points created by Backup.
    func listRecoveryPointsByResource(input: ListRecoveryPointsByResourceInput) async throws -> ListRecoveryPointsByResourceOutputResponse
    {
        typealias listRecoveryPointsByResourceContinuation = CheckedContinuation<ListRecoveryPointsByResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRecoveryPointsByResourceContinuation) in
            listRecoveryPointsByResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns details about your report jobs.
    func listReportJobs(input: ListReportJobsInput) async throws -> ListReportJobsOutputResponse
    {
        typealias listReportJobsContinuation = CheckedContinuation<ListReportJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listReportJobsContinuation) in
            listReportJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of your report plans. For detailed information about a single report plan, use DescribeReportPlan.
    func listReportPlans(input: ListReportPlansInput) async throws -> ListReportPlansOutputResponse
    {
        typealias listReportPlansContinuation = CheckedContinuation<ListReportPlansOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listReportPlansContinuation) in
            listReportPlans(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of jobs that Backup initiated to restore a saved resource, including details about the recovery process.
    func listRestoreJobs(input: ListRestoreJobsInput) async throws -> ListRestoreJobsOutputResponse
    {
        typealias listRestoreJobsContinuation = CheckedContinuation<ListRestoreJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRestoreJobsContinuation) in
            listRestoreJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of key-value pairs assigned to a target recovery point, backup plan, or backup vault. ListTags are currently only supported with Amazon EFS backups.
    func listTags(input: ListTagsInput) async throws -> ListTagsOutputResponse
    {
        typealias listTagsContinuation = CheckedContinuation<ListTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsContinuation) in
            listTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets a resource-based policy that is used to manage access permissions on the target backup vault. Requires a backup vault name and an access policy document in JSON format.
    func putBackupVaultAccessPolicy(input: PutBackupVaultAccessPolicyInput) async throws -> PutBackupVaultAccessPolicyOutputResponse
    {
        typealias putBackupVaultAccessPolicyContinuation = CheckedContinuation<PutBackupVaultAccessPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putBackupVaultAccessPolicyContinuation) in
            putBackupVaultAccessPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Turns on notifications on a backup vault for the specified topic and events.
    func putBackupVaultNotifications(input: PutBackupVaultNotificationsInput) async throws -> PutBackupVaultNotificationsOutputResponse
    {
        typealias putBackupVaultNotificationsContinuation = CheckedContinuation<PutBackupVaultNotificationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putBackupVaultNotificationsContinuation) in
            putBackupVaultNotifications(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an on-demand backup job for the specified resource.
    func startBackupJob(input: StartBackupJobInput) async throws -> StartBackupJobOutputResponse
    {
        typealias startBackupJobContinuation = CheckedContinuation<StartBackupJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startBackupJobContinuation) in
            startBackupJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts a job to create a one-time copy of the specified resource. Does not support continuous backups.
    func startCopyJob(input: StartCopyJobInput) async throws -> StartCopyJobOutputResponse
    {
        typealias startCopyJobContinuation = CheckedContinuation<StartCopyJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startCopyJobContinuation) in
            startCopyJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an on-demand report job for the specified report plan.
    func startReportJob(input: StartReportJobInput) async throws -> StartReportJobOutputResponse
    {
        typealias startReportJobContinuation = CheckedContinuation<StartReportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startReportJobContinuation) in
            startReportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Recovers the saved resource identified by an Amazon Resource Name (ARN).
    func startRestoreJob(input: StartRestoreJobInput) async throws -> StartRestoreJobOutputResponse
    {
        typealias startRestoreJobContinuation = CheckedContinuation<StartRestoreJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startRestoreJobContinuation) in
            startRestoreJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Attempts to cancel a job to create a one-time backup of a resource.
    func stopBackupJob(input: StopBackupJobInput) async throws -> StopBackupJobOutputResponse
    {
        typealias stopBackupJobContinuation = CheckedContinuation<StopBackupJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopBackupJobContinuation) in
            stopBackupJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Assigns a set of key-value pairs to a recovery point, backup plan, or backup vault identified by an Amazon Resource Name (ARN).
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a set of key-value pairs from a recovery point, backup plan, or backup vault identified by an Amazon Resource Name (ARN)
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing backup plan identified by its backupPlanId with the input document in JSON format. The new version is uniquely identified by a VersionId.
    func updateBackupPlan(input: UpdateBackupPlanInput) async throws -> UpdateBackupPlanOutputResponse
    {
        typealias updateBackupPlanContinuation = CheckedContinuation<UpdateBackupPlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBackupPlanContinuation) in
            updateBackupPlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing framework identified by its FrameworkName with the input document in JSON format.
    func updateFramework(input: UpdateFrameworkInput) async throws -> UpdateFrameworkOutputResponse
    {
        typealias updateFrameworkContinuation = CheckedContinuation<UpdateFrameworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFrameworkContinuation) in
            updateFramework(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates whether the Amazon Web Services account is opted in to cross-account backup. Returns an error if the account is not an Organizations management account. Use the DescribeGlobalSettings API to determine the current settings.
    func updateGlobalSettings(input: UpdateGlobalSettingsInput) async throws -> UpdateGlobalSettingsOutputResponse
    {
        typealias updateGlobalSettingsContinuation = CheckedContinuation<UpdateGlobalSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGlobalSettingsContinuation) in
            updateGlobalSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the transition lifecycle of a recovery point. The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. Backup transitions and expires backups automatically according to the lifecycle that you define. Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, the “expire after days” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold. Only Amazon EFS file system backups can be transitioned to cold storage. Does not support continuous backups.
    func updateRecoveryPointLifecycle(input: UpdateRecoveryPointLifecycleInput) async throws -> UpdateRecoveryPointLifecycleOutputResponse
    {
        typealias updateRecoveryPointLifecycleContinuation = CheckedContinuation<UpdateRecoveryPointLifecycleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRecoveryPointLifecycleContinuation) in
            updateRecoveryPointLifecycle(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the current service opt-in settings for the Region. If service-opt-in is enabled for a service, Backup tries to protect that service's resources in this Region, when the resource is included in an on-demand backup or scheduled backup plan. Otherwise, Backup does not try to protect that service's resources in this Region. Use the DescribeRegionSettings API to determine the resource types that are supported.
    func updateRegionSettings(input: UpdateRegionSettingsInput) async throws -> UpdateRegionSettingsOutputResponse
    {
        typealias updateRegionSettingsContinuation = CheckedContinuation<UpdateRegionSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRegionSettingsContinuation) in
            updateRegionSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing report plan identified by its ReportPlanName with the input document in JSON format.
    func updateReportPlan(input: UpdateReportPlanInput) async throws -> UpdateReportPlanOutputResponse
    {
        typealias updateReportPlanContinuation = CheckedContinuation<UpdateReportPlanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateReportPlanContinuation) in
            updateReportPlan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
