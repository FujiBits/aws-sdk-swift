// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AppMeshClientTypes.AccessLog: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case file
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .file(file):
                try container.encode(file, forKey: .file)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let fileDecoded = try values.decodeIfPresent(AppMeshClientTypes.FileAccessLog.self, forKey: .file)
        if let file = fileDecoded {
            self = .file(file)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents the access logging information for a virtual node.</p>
    public enum AccessLog: Swift.Equatable {
        /// <p>The file object to send virtual node access logs to.</p>
        case file(AppMeshClientTypes.FileAccessLog)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.AwsCloudMapInstanceAttribute: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension AppMeshClientTypes.AwsCloudMapInstanceAttribute: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudMapInstanceAttribute(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the AWS Cloud Map attribute information for your virtual
    ///          node.</p>
    ///          <note>
    ///             <p>AWS Cloud Map is not available in the eu-south-1 Region.</p>
    ///          </note>
    public struct AwsCloudMapInstanceAttribute: Swift.Equatable {
        /// <p>The name of an AWS Cloud Map service instance attribute key. Any AWS Cloud Map service
        ///          instance that contains the specified key and value is returned.</p>
        public let key: Swift.String?
        /// <p>The value of an AWS Cloud Map service instance attribute key. Any AWS Cloud Map service
        ///          instance that contains the specified key and value is returned.</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension AppMeshClientTypes.AwsCloudMapServiceDiscovery: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case namespaceName
        case serviceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for awscloudmapinstanceattributes0 in attributes {
                try attributesContainer.encode(awscloudmapinstanceattributes0)
            }
        }
        if let namespaceName = namespaceName {
            try encodeContainer.encode(namespaceName, forKey: .namespaceName)
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceName)
        namespaceName = namespaceNameDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.AwsCloudMapInstanceAttribute?].self, forKey: .attributes)
        var attributesDecoded0:[AppMeshClientTypes.AwsCloudMapInstanceAttribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [AppMeshClientTypes.AwsCloudMapInstanceAttribute]()
            for structure0 in attributesContainer {
                if let structure0 = structure0 {
                    attributesDecoded0?.append(structure0)
                }
            }
        }
        attributes = attributesDecoded0
    }
}

extension AppMeshClientTypes.AwsCloudMapServiceDiscovery: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudMapServiceDiscovery(attributes: \(Swift.String(describing: attributes)), namespaceName: \(Swift.String(describing: namespaceName)), serviceName: \(Swift.String(describing: serviceName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the AWS Cloud Map service discovery information for your virtual
    ///          node.</p>
    ///          <note>
    ///             <p>AWS Cloud Map is not available in the eu-south-1 Region.</p>
    ///          </note>
    public struct AwsCloudMapServiceDiscovery: Swift.Equatable {
        /// <p>A string map that contains attributes with values that you can use to filter instances
        ///          by any custom attribute that you specified when you registered the instance. Only instances
        ///          that match all of the specified key/value pairs will be returned.</p>
        public let attributes: [AppMeshClientTypes.AwsCloudMapInstanceAttribute]?
        /// <p>The name of the AWS Cloud Map namespace to use.</p>
        public let namespaceName: Swift.String?
        /// <p>The name of the AWS Cloud Map service to use.</p>
        public let serviceName: Swift.String?

        public init (
            attributes: [AppMeshClientTypes.AwsCloudMapInstanceAttribute]? = nil,
            namespaceName: Swift.String? = nil,
            serviceName: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.namespaceName = namespaceName
            self.serviceName = serviceName
        }
    }

}

extension AppMeshClientTypes.Backend: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sdkUnknown
        case virtualservice = "virtualService"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .virtualservice(virtualservice):
                try container.encode(virtualservice, forKey: .virtualservice)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let virtualserviceDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualServiceBackend.self, forKey: .virtualservice)
        if let virtualservice = virtualserviceDecoded {
            self = .virtualservice(virtualservice)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents the backends that a virtual node is expected to send outbound
    ///          traffic to.</p>
    public enum Backend: Swift.Equatable {
        /// <p>Specifies a virtual service to use as a backend.  </p>
        case virtualservice(AppMeshClientTypes.VirtualServiceBackend)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.BackendDefaults: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientPolicy
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientPolicy = clientPolicy {
            try encodeContainer.encode(clientPolicy, forKey: .clientPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientPolicyDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ClientPolicy.self, forKey: .clientPolicy)
        clientPolicy = clientPolicyDecoded
    }
}

extension AppMeshClientTypes.BackendDefaults: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BackendDefaults(clientPolicy: \(Swift.String(describing: clientPolicy)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the default properties for a backend.</p>
    public struct BackendDefaults: Swift.Equatable {
        /// <p>A reference to an object that represents a client policy.</p>
        public let clientPolicy: AppMeshClientTypes.ClientPolicy?

        public init (
            clientPolicy: AppMeshClientTypes.ClientPolicy? = nil
        )
        {
            self.clientPolicy = clientPolicy
        }
    }

}

extension BadRequestException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BadRequestException(message: \(Swift.String(describing: message)))"}
}

extension BadRequestException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BadRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request syntax was malformed. Check your request syntax and try again.</p>
public struct BadRequestException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BadRequestExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension BadRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AppMeshClientTypes.ClientPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tls
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tls = tls {
            try encodeContainer.encode(tls, forKey: .tls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tlsDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ClientPolicyTls.self, forKey: .tls)
        tls = tlsDecoded
    }
}

extension AppMeshClientTypes.ClientPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ClientPolicy(tls: \(Swift.String(describing: tls)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a client policy.</p>
    public struct ClientPolicy: Swift.Equatable {
        /// <p>A reference to an object that represents a Transport Layer Security (TLS) client policy.</p>
        public let tls: AppMeshClientTypes.ClientPolicyTls?

        public init (
            tls: AppMeshClientTypes.ClientPolicyTls? = nil
        )
        {
            self.tls = tls
        }
    }

}

extension AppMeshClientTypes.ClientPolicyTls: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate
        case enforce
        case ports
        case validation
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificate = certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let enforce = enforce {
            try encodeContainer.encode(enforce, forKey: .enforce)
        }
        if let ports = ports {
            var portsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ports)
            for portset0 in ports {
                try portsContainer.encode(portset0)
            }
        }
        if let validation = validation {
            try encodeContainer.encode(validation, forKey: .validation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enforceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enforce)
        enforce = enforceDecoded
        let portsContainer = try containerValues.decodeIfPresent(Swift.Set<Swift.Int>.self, forKey: .ports)
        var portsDecoded0:Swift.Set<Swift.Int>? = nil
        if let portsContainer = portsContainer {
            portsDecoded0 = Swift.Set<Swift.Int>()
            for integer0 in portsContainer {
                portsDecoded0?.insert(integer0)
            }
        }
        ports = portsDecoded0
        let certificateDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ClientTlsCertificate.self, forKey: .certificate)
        certificate = certificateDecoded
        let validationDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.TlsValidationContext.self, forKey: .validation)
        validation = validationDecoded
    }
}

extension AppMeshClientTypes.ClientPolicyTls: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ClientPolicyTls(certificate: \(Swift.String(describing: certificate)), enforce: \(Swift.String(describing: enforce)), ports: \(Swift.String(describing: ports)), validation: \(Swift.String(describing: validation)))"}
}

extension AppMeshClientTypes {
    /// <p>A reference to an object that represents a Transport Layer Security (TLS) client policy.</p>
    public struct ClientPolicyTls: Swift.Equatable {
        /// <p>A reference to an object that represents a client's TLS certificate.</p>
        public let certificate: AppMeshClientTypes.ClientTlsCertificate?
        /// <p>Whether the policy is enforced. The default is <code>True</code>, if a value isn't specified.</p>
        public let enforce: Swift.Bool?
        /// <p>One or more ports that the policy is enforced for.</p>
        public let ports: Swift.Set<Swift.Int>?
        /// <p>A reference to an object that represents a TLS validation context.</p>
        public let validation: AppMeshClientTypes.TlsValidationContext?

        public init (
            certificate: AppMeshClientTypes.ClientTlsCertificate? = nil,
            enforce: Swift.Bool? = nil,
            ports: Swift.Set<Swift.Int>? = nil,
            validation: AppMeshClientTypes.TlsValidationContext? = nil
        )
        {
            self.certificate = certificate
            self.enforce = enforce
            self.ports = ports
            self.validation = validation
        }
    }

}

extension AppMeshClientTypes.ClientTlsCertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case file
        case sdkUnknown
        case sds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .file(file):
                try container.encode(file, forKey: .file)
            case let .sds(sds):
                try container.encode(sds, forKey: .sds)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let fileDecoded = try values.decodeIfPresent(AppMeshClientTypes.ListenerTlsFileCertificate.self, forKey: .file)
        if let file = fileDecoded {
            self = .file(file)
            return
        }
        let sdsDecoded = try values.decodeIfPresent(AppMeshClientTypes.ListenerTlsSdsCertificate.self, forKey: .sds)
        if let sds = sdsDecoded {
            self = .sds(sds)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents the client's certificate.</p>
    public enum ClientTlsCertificate: Swift.Equatable {
        /// <p>An object that represents a local file certificate.
        ///          The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.</p>
        case file(AppMeshClientTypes.ListenerTlsFileCertificate)
        /// <p>A reference to an object that represents a client's TLS Secret Discovery Service
        ///          certificate.</p>
        case sds(AppMeshClientTypes.ListenerTlsSdsCertificate)
        case sdkUnknown(Swift.String)
    }

}

extension ConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConflictException(message: \(Swift.String(describing: message)))"}
}

extension ConflictException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request contains a client token that was used for a previous update resource call
///          with different specifications. Try the request again with a new client token.</p>
public struct ConflictException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct CreateGatewayRouteInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateGatewayRouteInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateGatewayRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateGatewayRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateGatewayRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateGatewayRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateGatewayRouteOutputError>
}

extension CreateGatewayRouteInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateGatewayRouteInput(clientToken: \(Swift.String(describing: clientToken)), gatewayRouteName: \(Swift.String(describing: gatewayRouteName)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), spec: \(Swift.String(describing: spec)), tags: \(Swift.String(describing: tags)), virtualGatewayName: \(Swift.String(describing: virtualGatewayName)))"}
}

extension CreateGatewayRouteInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case gatewayRouteName
        case spec
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let gatewayRouteName = gatewayRouteName {
            try encodeContainer.encode(gatewayRouteName, forKey: .gatewayRouteName)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateGatewayRouteInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateGatewayRouteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateGatewayRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateGatewayRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateGatewayRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateGatewayRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateGatewayRouteOutputError>
}

public struct CreateGatewayRouteInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateGatewayRouteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateGatewayRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateGatewayRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateGatewayRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateGatewayRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateGatewayRouteOutputError>
}

public struct CreateGatewayRouteInput: Swift.Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    public var clientToken: Swift.String?
    /// <p>The name to use for the gateway route.</p>
    public let gatewayRouteName: Swift.String?
    /// <p>The name of the service mesh to create the gateway route in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
    ///                the account that you specify must share the mesh with your account before you can create
    ///              the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The gateway route specification to apply.</p>
    public let spec: AppMeshClientTypes.GatewayRouteSpec?
    /// <p>Optional metadata that you can apply to the gateway route to assist with categorization
    ///          and organization. Each tag consists of a key and an optional value, both of which you
    ///          define. Tag keys can have a maximum character length of 128 characters, and tag values can have
    ///             a maximum length of 256 characters.</p>
    public let tags: [AppMeshClientTypes.TagRef]?
    /// <p>The name of the virtual gateway to associate the gateway route with. If the virtual
    ///          gateway is in a shared mesh, then you must be the owner of the virtual gateway
    ///          resource.</p>
    public let virtualGatewayName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        gatewayRouteName: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        spec: AppMeshClientTypes.GatewayRouteSpec? = nil,
        tags: [AppMeshClientTypes.TagRef]? = nil,
        virtualGatewayName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.gatewayRouteName = gatewayRouteName
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.spec = spec
        self.tags = tags
        self.virtualGatewayName = virtualGatewayName
    }
}

struct CreateGatewayRouteInputBody: Swift.Equatable {
    public let gatewayRouteName: Swift.String?
    public let spec: AppMeshClientTypes.GatewayRouteSpec?
    public let tags: [AppMeshClientTypes.TagRef]?
    public let clientToken: Swift.String?
}

extension CreateGatewayRouteInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case gatewayRouteName
        case spec
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayRouteNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayRouteName)
        gatewayRouteName = gatewayRouteNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GatewayRouteSpec.self, forKey: .spec)
        spec = specDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.TagRef?].self, forKey: .tags)
        var tagsDecoded0:[AppMeshClientTypes.TagRef]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AppMeshClientTypes.TagRef]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension CreateGatewayRouteOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGatewayRouteOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateGatewayRouteOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGatewayRouteOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateGatewayRouteOutputResponse(gatewayRoute: \(Swift.String(describing: gatewayRoute)))"}
}

extension CreateGatewayRouteOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.GatewayRouteData = try responseDecoder.decode(responseBody: data)
                self.gatewayRoute = output
            } else {
                self.gatewayRoute = nil
            }
        } else {
            self.gatewayRoute = nil
        }
    }
}

public struct CreateGatewayRouteOutputResponse: Swift.Equatable {
    /// <p>The full description of your gateway route following the create call.</p>
    public let gatewayRoute: AppMeshClientTypes.GatewayRouteData?

    public init (
        gatewayRoute: AppMeshClientTypes.GatewayRouteData? = nil
    )
    {
        self.gatewayRoute = gatewayRoute
    }
}

struct CreateGatewayRouteOutputResponseBody: Swift.Equatable {
    public let gatewayRoute: AppMeshClientTypes.GatewayRouteData?
}

extension CreateGatewayRouteOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gatewayRoute
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayRouteDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GatewayRouteData.self, forKey: .gatewayRoute)
        gatewayRoute = gatewayRouteDecoded
    }
}

public struct CreateMeshInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMeshInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMeshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMeshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMeshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMeshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMeshOutputError>
}

extension CreateMeshInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMeshInput(clientToken: \(Swift.String(describing: clientToken)), meshName: \(Swift.String(describing: meshName)), spec: \(Swift.String(describing: spec)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateMeshInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case meshName
        case spec
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateMeshInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMeshInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMeshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMeshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMeshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMeshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMeshOutputError>
}

public struct CreateMeshInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMeshInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMeshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMeshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMeshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMeshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMeshOutputError>
}

///
public struct CreateMeshInput: Swift.Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    public var clientToken: Swift.String?
    /// <p>The name to use for the service mesh.</p>
    public let meshName: Swift.String?
    /// <p>The service mesh specification to apply.</p>
    public let spec: AppMeshClientTypes.MeshSpec?
    /// <p>Optional metadata that you can apply to the service mesh to assist with categorization
    ///          and organization. Each tag consists of a key and an optional value, both of which you
    ///          define. Tag keys can have a maximum character length of 128 characters, and tag values can have
    ///             a maximum length of 256 characters.</p>
    public let tags: [AppMeshClientTypes.TagRef]?

    public init (
        clientToken: Swift.String? = nil,
        meshName: Swift.String? = nil,
        spec: AppMeshClientTypes.MeshSpec? = nil,
        tags: [AppMeshClientTypes.TagRef]? = nil
    )
    {
        self.clientToken = clientToken
        self.meshName = meshName
        self.spec = spec
        self.tags = tags
    }
}

struct CreateMeshInputBody: Swift.Equatable {
    public let meshName: Swift.String?
    public let spec: AppMeshClientTypes.MeshSpec?
    public let tags: [AppMeshClientTypes.TagRef]?
    public let clientToken: Swift.String?
}

extension CreateMeshInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case meshName
        case spec
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.MeshSpec.self, forKey: .spec)
        spec = specDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.TagRef?].self, forKey: .tags)
        var tagsDecoded0:[AppMeshClientTypes.TagRef]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AppMeshClientTypes.TagRef]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension CreateMeshOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMeshOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMeshOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMeshOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMeshOutputResponse(mesh: \(Swift.String(describing: mesh)))"}
}

extension CreateMeshOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.MeshData = try responseDecoder.decode(responseBody: data)
                self.mesh = output
            } else {
                self.mesh = nil
            }
        } else {
            self.mesh = nil
        }
    }
}

///
public struct CreateMeshOutputResponse: Swift.Equatable {
    /// <p>The full description of your service mesh following the create call.</p>
    public let mesh: AppMeshClientTypes.MeshData?

    public init (
        mesh: AppMeshClientTypes.MeshData? = nil
    )
    {
        self.mesh = mesh
    }
}

struct CreateMeshOutputResponseBody: Swift.Equatable {
    public let mesh: AppMeshClientTypes.MeshData?
}

extension CreateMeshOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mesh
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.MeshData.self, forKey: .mesh)
        mesh = meshDecoded
    }
}

public struct CreateRouteInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRouteInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRouteOutputError>
}

extension CreateRouteInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRouteInput(clientToken: \(Swift.String(describing: clientToken)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), routeName: \(Swift.String(describing: routeName)), spec: \(Swift.String(describing: spec)), tags: \(Swift.String(describing: tags)), virtualRouterName: \(Swift.String(describing: virtualRouterName)))"}
}

extension CreateRouteInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case routeName
        case spec
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let routeName = routeName {
            try encodeContainer.encode(routeName, forKey: .routeName)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateRouteInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRouteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRouteOutputError>
}

public struct CreateRouteInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRouteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRouteOutputError>
}

///
public struct CreateRouteInput: Swift.Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    public var clientToken: Swift.String?
    /// <p>The name of the service mesh to create the route in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
    ///                the account that you specify must share the mesh with your account before you can create
    ///              the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The name to use for the route.</p>
    public let routeName: Swift.String?
    /// <p>The route specification to apply.</p>
    public let spec: AppMeshClientTypes.RouteSpec?
    /// <p>Optional metadata that you can apply to the route to assist with categorization and
    ///          organization. Each tag consists of a key and an optional value, both of which you define.
    ///          Tag keys can have a maximum character length of 128 characters, and tag values can have
    ///             a maximum length of 256 characters.</p>
    public let tags: [AppMeshClientTypes.TagRef]?
    /// <p>The name of the virtual router in which to create the route. If the virtual router is in
    ///          a shared mesh, then you must be the owner of the virtual router resource.</p>
    public let virtualRouterName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        routeName: Swift.String? = nil,
        spec: AppMeshClientTypes.RouteSpec? = nil,
        tags: [AppMeshClientTypes.TagRef]? = nil,
        virtualRouterName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.routeName = routeName
        self.spec = spec
        self.tags = tags
        self.virtualRouterName = virtualRouterName
    }
}

struct CreateRouteInputBody: Swift.Equatable {
    public let routeName: Swift.String?
    public let spec: AppMeshClientTypes.RouteSpec?
    public let tags: [AppMeshClientTypes.TagRef]?
    public let clientToken: Swift.String?
}

extension CreateRouteInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case routeName
        case spec
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routeName)
        routeName = routeNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.RouteSpec.self, forKey: .spec)
        spec = specDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.TagRef?].self, forKey: .tags)
        var tagsDecoded0:[AppMeshClientTypes.TagRef]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AppMeshClientTypes.TagRef]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension CreateRouteOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRouteOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateRouteOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRouteOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRouteOutputResponse(route: \(Swift.String(describing: route)))"}
}

extension CreateRouteOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.RouteData = try responseDecoder.decode(responseBody: data)
                self.route = output
            } else {
                self.route = nil
            }
        } else {
            self.route = nil
        }
    }
}

///
public struct CreateRouteOutputResponse: Swift.Equatable {
    /// <p>The full description of your mesh following the create call.</p>
    public let route: AppMeshClientTypes.RouteData?

    public init (
        route: AppMeshClientTypes.RouteData? = nil
    )
    {
        self.route = route
    }
}

struct CreateRouteOutputResponseBody: Swift.Equatable {
    public let route: AppMeshClientTypes.RouteData?
}

extension CreateRouteOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case route
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routeDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.RouteData.self, forKey: .route)
        route = routeDecoded
    }
}

public struct CreateVirtualGatewayInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVirtualGatewayInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVirtualGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVirtualGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVirtualGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVirtualGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVirtualGatewayOutputError>
}

extension CreateVirtualGatewayInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVirtualGatewayInput(clientToken: \(Swift.String(describing: clientToken)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), spec: \(Swift.String(describing: spec)), tags: \(Swift.String(describing: tags)), virtualGatewayName: \(Swift.String(describing: virtualGatewayName)))"}
}

extension CreateVirtualGatewayInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
        case tags
        case virtualGatewayName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let virtualGatewayName = virtualGatewayName {
            try encodeContainer.encode(virtualGatewayName, forKey: .virtualGatewayName)
        }
    }
}

public struct CreateVirtualGatewayInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVirtualGatewayInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVirtualGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVirtualGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVirtualGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVirtualGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVirtualGatewayOutputError>
}

public struct CreateVirtualGatewayInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVirtualGatewayInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVirtualGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVirtualGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVirtualGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVirtualGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVirtualGatewayOutputError>
}

public struct CreateVirtualGatewayInput: Swift.Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    public var clientToken: Swift.String?
    /// <p>The name of the service mesh to create the virtual gateway in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
    ///                the account that you specify must share the mesh with your account before you can create
    ///              the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The virtual gateway specification to apply.</p>
    public let spec: AppMeshClientTypes.VirtualGatewaySpec?
    /// <p>Optional metadata that you can apply to the virtual gateway to assist with
    ///          categorization and organization. Each tag consists of a key and an optional value, both of
    ///          which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have
    ///             a maximum length of 256 characters.</p>
    public let tags: [AppMeshClientTypes.TagRef]?
    /// <p>The name to use for the virtual gateway.</p>
    public let virtualGatewayName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        spec: AppMeshClientTypes.VirtualGatewaySpec? = nil,
        tags: [AppMeshClientTypes.TagRef]? = nil,
        virtualGatewayName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.spec = spec
        self.tags = tags
        self.virtualGatewayName = virtualGatewayName
    }
}

struct CreateVirtualGatewayInputBody: Swift.Equatable {
    public let virtualGatewayName: Swift.String?
    public let spec: AppMeshClientTypes.VirtualGatewaySpec?
    public let tags: [AppMeshClientTypes.TagRef]?
    public let clientToken: Swift.String?
}

extension CreateVirtualGatewayInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
        case tags
        case virtualGatewayName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualGatewayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayName)
        virtualGatewayName = virtualGatewayNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewaySpec.self, forKey: .spec)
        spec = specDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.TagRef?].self, forKey: .tags)
        var tagsDecoded0:[AppMeshClientTypes.TagRef]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AppMeshClientTypes.TagRef]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension CreateVirtualGatewayOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVirtualGatewayOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateVirtualGatewayOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVirtualGatewayOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVirtualGatewayOutputResponse(virtualGateway: \(Swift.String(describing: virtualGateway)))"}
}

extension CreateVirtualGatewayOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualGatewayData = try responseDecoder.decode(responseBody: data)
                self.virtualGateway = output
            } else {
                self.virtualGateway = nil
            }
        } else {
            self.virtualGateway = nil
        }
    }
}

public struct CreateVirtualGatewayOutputResponse: Swift.Equatable {
    /// <p>The full description of your virtual gateway following the create call.</p>
    public let virtualGateway: AppMeshClientTypes.VirtualGatewayData?

    public init (
        virtualGateway: AppMeshClientTypes.VirtualGatewayData? = nil
    )
    {
        self.virtualGateway = virtualGateway
    }
}

struct CreateVirtualGatewayOutputResponseBody: Swift.Equatable {
    public let virtualGateway: AppMeshClientTypes.VirtualGatewayData?
}

extension CreateVirtualGatewayOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualGateway
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualGatewayDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayData.self, forKey: .virtualGateway)
        virtualGateway = virtualGatewayDecoded
    }
}

public struct CreateVirtualNodeInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVirtualNodeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVirtualNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVirtualNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVirtualNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVirtualNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVirtualNodeOutputError>
}

extension CreateVirtualNodeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVirtualNodeInput(clientToken: \(Swift.String(describing: clientToken)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), spec: \(Swift.String(describing: spec)), tags: \(Swift.String(describing: tags)), virtualNodeName: \(Swift.String(describing: virtualNodeName)))"}
}

extension CreateVirtualNodeInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
        case tags
        case virtualNodeName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let virtualNodeName = virtualNodeName {
            try encodeContainer.encode(virtualNodeName, forKey: .virtualNodeName)
        }
    }
}

public struct CreateVirtualNodeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVirtualNodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVirtualNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVirtualNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVirtualNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVirtualNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVirtualNodeOutputError>
}

public struct CreateVirtualNodeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVirtualNodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVirtualNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVirtualNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVirtualNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVirtualNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVirtualNodeOutputError>
}

///
public struct CreateVirtualNodeInput: Swift.Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    public var clientToken: Swift.String?
    /// <p>The name of the service mesh to create the virtual node in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
    ///                the account that you specify must share the mesh with your account before you can create
    ///              the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The virtual node specification to apply.</p>
    public let spec: AppMeshClientTypes.VirtualNodeSpec?
    /// <p>Optional metadata that you can apply to the virtual node to assist with categorization
    ///          and organization. Each tag consists of a key and an optional value, both of which you
    ///          define. Tag keys can have a maximum character length of 128 characters, and tag values can have
    ///             a maximum length of 256 characters.</p>
    public let tags: [AppMeshClientTypes.TagRef]?
    /// <p>The name to use for the virtual node.</p>
    public let virtualNodeName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        spec: AppMeshClientTypes.VirtualNodeSpec? = nil,
        tags: [AppMeshClientTypes.TagRef]? = nil,
        virtualNodeName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.spec = spec
        self.tags = tags
        self.virtualNodeName = virtualNodeName
    }
}

struct CreateVirtualNodeInputBody: Swift.Equatable {
    public let virtualNodeName: Swift.String?
    public let spec: AppMeshClientTypes.VirtualNodeSpec?
    public let tags: [AppMeshClientTypes.TagRef]?
    public let clientToken: Swift.String?
}

extension CreateVirtualNodeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
        case tags
        case virtualNodeName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualNodeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualNodeName)
        virtualNodeName = virtualNodeNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualNodeSpec.self, forKey: .spec)
        spec = specDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.TagRef?].self, forKey: .tags)
        var tagsDecoded0:[AppMeshClientTypes.TagRef]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AppMeshClientTypes.TagRef]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension CreateVirtualNodeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVirtualNodeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateVirtualNodeOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVirtualNodeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVirtualNodeOutputResponse(virtualNode: \(Swift.String(describing: virtualNode)))"}
}

extension CreateVirtualNodeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualNodeData = try responseDecoder.decode(responseBody: data)
                self.virtualNode = output
            } else {
                self.virtualNode = nil
            }
        } else {
            self.virtualNode = nil
        }
    }
}

///
public struct CreateVirtualNodeOutputResponse: Swift.Equatable {
    /// <p>The full description of your virtual node following the create call.</p>
    public let virtualNode: AppMeshClientTypes.VirtualNodeData?

    public init (
        virtualNode: AppMeshClientTypes.VirtualNodeData? = nil
    )
    {
        self.virtualNode = virtualNode
    }
}

struct CreateVirtualNodeOutputResponseBody: Swift.Equatable {
    public let virtualNode: AppMeshClientTypes.VirtualNodeData?
}

extension CreateVirtualNodeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualNode
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualNodeDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualNodeData.self, forKey: .virtualNode)
        virtualNode = virtualNodeDecoded
    }
}

public struct CreateVirtualRouterInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVirtualRouterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVirtualRouterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVirtualRouterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVirtualRouterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVirtualRouterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVirtualRouterOutputError>
}

extension CreateVirtualRouterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVirtualRouterInput(clientToken: \(Swift.String(describing: clientToken)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), spec: \(Swift.String(describing: spec)), tags: \(Swift.String(describing: tags)), virtualRouterName: \(Swift.String(describing: virtualRouterName)))"}
}

extension CreateVirtualRouterInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
        case tags
        case virtualRouterName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let virtualRouterName = virtualRouterName {
            try encodeContainer.encode(virtualRouterName, forKey: .virtualRouterName)
        }
    }
}

public struct CreateVirtualRouterInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVirtualRouterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVirtualRouterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVirtualRouterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVirtualRouterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVirtualRouterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVirtualRouterOutputError>
}

public struct CreateVirtualRouterInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVirtualRouterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVirtualRouterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVirtualRouterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVirtualRouterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVirtualRouterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVirtualRouterOutputError>
}

///
public struct CreateVirtualRouterInput: Swift.Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    public var clientToken: Swift.String?
    /// <p>The name of the service mesh to create the virtual router in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
    ///                the account that you specify must share the mesh with your account before you can create
    ///              the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The virtual router specification to apply.</p>
    public let spec: AppMeshClientTypes.VirtualRouterSpec?
    /// <p>Optional metadata that you can apply to the virtual router to assist with categorization
    ///          and organization. Each tag consists of a key and an optional value, both of which you
    ///          define. Tag keys can have a maximum character length of 128 characters, and tag values can have
    ///             a maximum length of 256 characters.</p>
    public let tags: [AppMeshClientTypes.TagRef]?
    /// <p>The name to use for the virtual router.</p>
    public let virtualRouterName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        spec: AppMeshClientTypes.VirtualRouterSpec? = nil,
        tags: [AppMeshClientTypes.TagRef]? = nil,
        virtualRouterName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.spec = spec
        self.tags = tags
        self.virtualRouterName = virtualRouterName
    }
}

struct CreateVirtualRouterInputBody: Swift.Equatable {
    public let virtualRouterName: Swift.String?
    public let spec: AppMeshClientTypes.VirtualRouterSpec?
    public let tags: [AppMeshClientTypes.TagRef]?
    public let clientToken: Swift.String?
}

extension CreateVirtualRouterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
        case tags
        case virtualRouterName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualRouterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualRouterName)
        virtualRouterName = virtualRouterNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualRouterSpec.self, forKey: .spec)
        spec = specDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.TagRef?].self, forKey: .tags)
        var tagsDecoded0:[AppMeshClientTypes.TagRef]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AppMeshClientTypes.TagRef]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension CreateVirtualRouterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVirtualRouterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateVirtualRouterOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVirtualRouterOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVirtualRouterOutputResponse(virtualRouter: \(Swift.String(describing: virtualRouter)))"}
}

extension CreateVirtualRouterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualRouterData = try responseDecoder.decode(responseBody: data)
                self.virtualRouter = output
            } else {
                self.virtualRouter = nil
            }
        } else {
            self.virtualRouter = nil
        }
    }
}

///
public struct CreateVirtualRouterOutputResponse: Swift.Equatable {
    /// <p>The full description of your virtual router following the create call.</p>
    public let virtualRouter: AppMeshClientTypes.VirtualRouterData?

    public init (
        virtualRouter: AppMeshClientTypes.VirtualRouterData? = nil
    )
    {
        self.virtualRouter = virtualRouter
    }
}

struct CreateVirtualRouterOutputResponseBody: Swift.Equatable {
    public let virtualRouter: AppMeshClientTypes.VirtualRouterData?
}

extension CreateVirtualRouterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualRouter
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualRouterDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualRouterData.self, forKey: .virtualRouter)
        virtualRouter = virtualRouterDecoded
    }
}

public struct CreateVirtualServiceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVirtualServiceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVirtualServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVirtualServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVirtualServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVirtualServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVirtualServiceOutputError>
}

extension CreateVirtualServiceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVirtualServiceInput(clientToken: \(Swift.String(describing: clientToken)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), spec: \(Swift.String(describing: spec)), tags: \(Swift.String(describing: tags)), virtualServiceName: \(Swift.String(describing: virtualServiceName)))"}
}

extension CreateVirtualServiceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
        case tags
        case virtualServiceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let virtualServiceName = virtualServiceName {
            try encodeContainer.encode(virtualServiceName, forKey: .virtualServiceName)
        }
    }
}

public struct CreateVirtualServiceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVirtualServiceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVirtualServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVirtualServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVirtualServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVirtualServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVirtualServiceOutputError>
}

public struct CreateVirtualServiceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVirtualServiceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVirtualServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVirtualServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVirtualServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVirtualServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVirtualServiceOutputError>
}

///
public struct CreateVirtualServiceInput: Swift.Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    public var clientToken: Swift.String?
    /// <p>The name of the service mesh to create the virtual service in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
    ///                the account that you specify must share the mesh with your account before you can create
    ///              the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The virtual service specification to apply.</p>
    public let spec: AppMeshClientTypes.VirtualServiceSpec?
    /// <p>Optional metadata that you can apply to the virtual service to assist with
    ///          categorization and organization. Each tag consists of a key and an optional value, both of
    ///          which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have
    ///             a maximum length of 256 characters.</p>
    public let tags: [AppMeshClientTypes.TagRef]?
    /// <p>The name to use for the virtual service.</p>
    public let virtualServiceName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        spec: AppMeshClientTypes.VirtualServiceSpec? = nil,
        tags: [AppMeshClientTypes.TagRef]? = nil,
        virtualServiceName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.spec = spec
        self.tags = tags
        self.virtualServiceName = virtualServiceName
    }
}

struct CreateVirtualServiceInputBody: Swift.Equatable {
    public let virtualServiceName: Swift.String?
    public let spec: AppMeshClientTypes.VirtualServiceSpec?
    public let tags: [AppMeshClientTypes.TagRef]?
    public let clientToken: Swift.String?
}

extension CreateVirtualServiceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
        case tags
        case virtualServiceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualServiceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualServiceName)
        virtualServiceName = virtualServiceNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualServiceSpec.self, forKey: .spec)
        spec = specDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.TagRef?].self, forKey: .tags)
        var tagsDecoded0:[AppMeshClientTypes.TagRef]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AppMeshClientTypes.TagRef]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension CreateVirtualServiceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVirtualServiceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateVirtualServiceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVirtualServiceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVirtualServiceOutputResponse(virtualService: \(Swift.String(describing: virtualService)))"}
}

extension CreateVirtualServiceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualServiceData = try responseDecoder.decode(responseBody: data)
                self.virtualService = output
            } else {
                self.virtualService = nil
            }
        } else {
            self.virtualService = nil
        }
    }
}

///
public struct CreateVirtualServiceOutputResponse: Swift.Equatable {
    /// <p>The full description of your virtual service following the create call.</p>
    public let virtualService: AppMeshClientTypes.VirtualServiceData?

    public init (
        virtualService: AppMeshClientTypes.VirtualServiceData? = nil
    )
    {
        self.virtualService = virtualService
    }
}

struct CreateVirtualServiceOutputResponseBody: Swift.Equatable {
    public let virtualService: AppMeshClientTypes.VirtualServiceData?
}

extension CreateVirtualServiceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualService
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualServiceDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualServiceData.self, forKey: .virtualService)
        virtualService = virtualServiceDecoded
    }
}

extension DeleteGatewayRouteInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteGatewayRouteInput(gatewayRouteName: \(Swift.String(describing: gatewayRouteName)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), virtualGatewayName: \(Swift.String(describing: virtualGatewayName)))"}
}

extension DeleteGatewayRouteInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteGatewayRouteInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteGatewayRouteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteGatewayRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteGatewayRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteGatewayRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteGatewayRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteGatewayRouteOutputError>
}

public struct DeleteGatewayRouteInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteGatewayRouteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteGatewayRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteGatewayRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteGatewayRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteGatewayRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteGatewayRouteOutputError>
}

public struct DeleteGatewayRouteInput: Swift.Equatable {
    /// <p>The name of the gateway route to delete.</p>
    public let gatewayRouteName: Swift.String?
    /// <p>The name of the service mesh to delete the gateway route from.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The name of the virtual gateway to delete the route from.</p>
    public let virtualGatewayName: Swift.String?

    public init (
        gatewayRouteName: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        virtualGatewayName: Swift.String? = nil
    )
    {
        self.gatewayRouteName = gatewayRouteName
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.virtualGatewayName = virtualGatewayName
    }
}

struct DeleteGatewayRouteInputBody: Swift.Equatable {
}

extension DeleteGatewayRouteInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteGatewayRouteOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteGatewayRouteOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteGatewayRouteOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case resourceInUseException(ResourceInUseException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGatewayRouteOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteGatewayRouteOutputResponse(gatewayRoute: \(Swift.String(describing: gatewayRoute)))"}
}

extension DeleteGatewayRouteOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.GatewayRouteData = try responseDecoder.decode(responseBody: data)
                self.gatewayRoute = output
            } else {
                self.gatewayRoute = nil
            }
        } else {
            self.gatewayRoute = nil
        }
    }
}

public struct DeleteGatewayRouteOutputResponse: Swift.Equatable {
    /// <p>The gateway route that was deleted.</p>
    public let gatewayRoute: AppMeshClientTypes.GatewayRouteData?

    public init (
        gatewayRoute: AppMeshClientTypes.GatewayRouteData? = nil
    )
    {
        self.gatewayRoute = gatewayRoute
    }
}

struct DeleteGatewayRouteOutputResponseBody: Swift.Equatable {
    public let gatewayRoute: AppMeshClientTypes.GatewayRouteData?
}

extension DeleteGatewayRouteOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gatewayRoute
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayRouteDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GatewayRouteData.self, forKey: .gatewayRoute)
        gatewayRoute = gatewayRouteDecoded
    }
}

extension DeleteMeshInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMeshInput(meshName: \(Swift.String(describing: meshName)))"}
}

extension DeleteMeshInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteMeshInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMeshInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMeshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMeshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMeshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMeshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMeshOutputError>
}

public struct DeleteMeshInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMeshInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMeshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMeshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMeshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMeshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMeshOutputError>
}

///
public struct DeleteMeshInput: Swift.Equatable {
    /// <p>The name of the service mesh to delete.</p>
    public let meshName: Swift.String?

    public init (
        meshName: Swift.String? = nil
    )
    {
        self.meshName = meshName
    }
}

struct DeleteMeshInputBody: Swift.Equatable {
}

extension DeleteMeshInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteMeshOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMeshOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMeshOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case resourceInUseException(ResourceInUseException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMeshOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMeshOutputResponse(mesh: \(Swift.String(describing: mesh)))"}
}

extension DeleteMeshOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.MeshData = try responseDecoder.decode(responseBody: data)
                self.mesh = output
            } else {
                self.mesh = nil
            }
        } else {
            self.mesh = nil
        }
    }
}

///
public struct DeleteMeshOutputResponse: Swift.Equatable {
    /// <p>The service mesh that was deleted.</p>
    public let mesh: AppMeshClientTypes.MeshData?

    public init (
        mesh: AppMeshClientTypes.MeshData? = nil
    )
    {
        self.mesh = mesh
    }
}

struct DeleteMeshOutputResponseBody: Swift.Equatable {
    public let mesh: AppMeshClientTypes.MeshData?
}

extension DeleteMeshOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mesh
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.MeshData.self, forKey: .mesh)
        mesh = meshDecoded
    }
}

extension DeleteRouteInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRouteInput(meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), routeName: \(Swift.String(describing: routeName)), virtualRouterName: \(Swift.String(describing: virtualRouterName)))"}
}

extension DeleteRouteInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteRouteInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRouteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRouteOutputError>
}

public struct DeleteRouteInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRouteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRouteOutputError>
}

///
public struct DeleteRouteInput: Swift.Equatable {
    /// <p>The name of the service mesh to delete the route in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The name of the route to delete.</p>
    public let routeName: Swift.String?
    /// <p>The name of the virtual router to delete the route in.</p>
    public let virtualRouterName: Swift.String?

    public init (
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        routeName: Swift.String? = nil,
        virtualRouterName: Swift.String? = nil
    )
    {
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.routeName = routeName
        self.virtualRouterName = virtualRouterName
    }
}

struct DeleteRouteInputBody: Swift.Equatable {
}

extension DeleteRouteInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteRouteOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRouteOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRouteOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case resourceInUseException(ResourceInUseException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRouteOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRouteOutputResponse(route: \(Swift.String(describing: route)))"}
}

extension DeleteRouteOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.RouteData = try responseDecoder.decode(responseBody: data)
                self.route = output
            } else {
                self.route = nil
            }
        } else {
            self.route = nil
        }
    }
}

///
public struct DeleteRouteOutputResponse: Swift.Equatable {
    /// <p>The route that was deleted.</p>
    public let route: AppMeshClientTypes.RouteData?

    public init (
        route: AppMeshClientTypes.RouteData? = nil
    )
    {
        self.route = route
    }
}

struct DeleteRouteOutputResponseBody: Swift.Equatable {
    public let route: AppMeshClientTypes.RouteData?
}

extension DeleteRouteOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case route
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routeDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.RouteData.self, forKey: .route)
        route = routeDecoded
    }
}

extension DeleteVirtualGatewayInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVirtualGatewayInput(meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), virtualGatewayName: \(Swift.String(describing: virtualGatewayName)))"}
}

extension DeleteVirtualGatewayInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteVirtualGatewayInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVirtualGatewayInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVirtualGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVirtualGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVirtualGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVirtualGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVirtualGatewayOutputError>
}

public struct DeleteVirtualGatewayInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVirtualGatewayInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVirtualGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVirtualGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVirtualGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVirtualGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVirtualGatewayOutputError>
}

public struct DeleteVirtualGatewayInput: Swift.Equatable {
    /// <p>The name of the service mesh to delete the virtual gateway from.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The name of the virtual gateway to delete.</p>
    public let virtualGatewayName: Swift.String?

    public init (
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        virtualGatewayName: Swift.String? = nil
    )
    {
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.virtualGatewayName = virtualGatewayName
    }
}

struct DeleteVirtualGatewayInputBody: Swift.Equatable {
}

extension DeleteVirtualGatewayInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteVirtualGatewayOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVirtualGatewayOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteVirtualGatewayOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case resourceInUseException(ResourceInUseException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVirtualGatewayOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVirtualGatewayOutputResponse(virtualGateway: \(Swift.String(describing: virtualGateway)))"}
}

extension DeleteVirtualGatewayOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualGatewayData = try responseDecoder.decode(responseBody: data)
                self.virtualGateway = output
            } else {
                self.virtualGateway = nil
            }
        } else {
            self.virtualGateway = nil
        }
    }
}

public struct DeleteVirtualGatewayOutputResponse: Swift.Equatable {
    /// <p>The virtual gateway that was deleted.</p>
    public let virtualGateway: AppMeshClientTypes.VirtualGatewayData?

    public init (
        virtualGateway: AppMeshClientTypes.VirtualGatewayData? = nil
    )
    {
        self.virtualGateway = virtualGateway
    }
}

struct DeleteVirtualGatewayOutputResponseBody: Swift.Equatable {
    public let virtualGateway: AppMeshClientTypes.VirtualGatewayData?
}

extension DeleteVirtualGatewayOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualGateway
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualGatewayDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayData.self, forKey: .virtualGateway)
        virtualGateway = virtualGatewayDecoded
    }
}

extension DeleteVirtualNodeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVirtualNodeInput(meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), virtualNodeName: \(Swift.String(describing: virtualNodeName)))"}
}

extension DeleteVirtualNodeInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteVirtualNodeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVirtualNodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVirtualNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVirtualNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVirtualNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVirtualNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVirtualNodeOutputError>
}

public struct DeleteVirtualNodeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVirtualNodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVirtualNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVirtualNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVirtualNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVirtualNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVirtualNodeOutputError>
}

///
public struct DeleteVirtualNodeInput: Swift.Equatable {
    /// <p>The name of the service mesh to delete the virtual node in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The name of the virtual node to delete.</p>
    public let virtualNodeName: Swift.String?

    public init (
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        virtualNodeName: Swift.String? = nil
    )
    {
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.virtualNodeName = virtualNodeName
    }
}

struct DeleteVirtualNodeInputBody: Swift.Equatable {
}

extension DeleteVirtualNodeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteVirtualNodeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVirtualNodeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteVirtualNodeOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case resourceInUseException(ResourceInUseException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVirtualNodeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVirtualNodeOutputResponse(virtualNode: \(Swift.String(describing: virtualNode)))"}
}

extension DeleteVirtualNodeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualNodeData = try responseDecoder.decode(responseBody: data)
                self.virtualNode = output
            } else {
                self.virtualNode = nil
            }
        } else {
            self.virtualNode = nil
        }
    }
}

///
public struct DeleteVirtualNodeOutputResponse: Swift.Equatable {
    /// <p>The virtual node that was deleted.</p>
    public let virtualNode: AppMeshClientTypes.VirtualNodeData?

    public init (
        virtualNode: AppMeshClientTypes.VirtualNodeData? = nil
    )
    {
        self.virtualNode = virtualNode
    }
}

struct DeleteVirtualNodeOutputResponseBody: Swift.Equatable {
    public let virtualNode: AppMeshClientTypes.VirtualNodeData?
}

extension DeleteVirtualNodeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualNode
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualNodeDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualNodeData.self, forKey: .virtualNode)
        virtualNode = virtualNodeDecoded
    }
}

extension DeleteVirtualRouterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVirtualRouterInput(meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), virtualRouterName: \(Swift.String(describing: virtualRouterName)))"}
}

extension DeleteVirtualRouterInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteVirtualRouterInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVirtualRouterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVirtualRouterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVirtualRouterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVirtualRouterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVirtualRouterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVirtualRouterOutputError>
}

public struct DeleteVirtualRouterInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVirtualRouterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVirtualRouterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVirtualRouterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVirtualRouterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVirtualRouterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVirtualRouterOutputError>
}

///
public struct DeleteVirtualRouterInput: Swift.Equatable {
    /// <p>The name of the service mesh to delete the virtual router in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The name of the virtual router to delete.</p>
    public let virtualRouterName: Swift.String?

    public init (
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        virtualRouterName: Swift.String? = nil
    )
    {
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.virtualRouterName = virtualRouterName
    }
}

struct DeleteVirtualRouterInputBody: Swift.Equatable {
}

extension DeleteVirtualRouterInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteVirtualRouterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVirtualRouterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteVirtualRouterOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case resourceInUseException(ResourceInUseException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVirtualRouterOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVirtualRouterOutputResponse(virtualRouter: \(Swift.String(describing: virtualRouter)))"}
}

extension DeleteVirtualRouterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualRouterData = try responseDecoder.decode(responseBody: data)
                self.virtualRouter = output
            } else {
                self.virtualRouter = nil
            }
        } else {
            self.virtualRouter = nil
        }
    }
}

///
public struct DeleteVirtualRouterOutputResponse: Swift.Equatable {
    /// <p>The virtual router that was deleted.</p>
    public let virtualRouter: AppMeshClientTypes.VirtualRouterData?

    public init (
        virtualRouter: AppMeshClientTypes.VirtualRouterData? = nil
    )
    {
        self.virtualRouter = virtualRouter
    }
}

struct DeleteVirtualRouterOutputResponseBody: Swift.Equatable {
    public let virtualRouter: AppMeshClientTypes.VirtualRouterData?
}

extension DeleteVirtualRouterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualRouter
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualRouterDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualRouterData.self, forKey: .virtualRouter)
        virtualRouter = virtualRouterDecoded
    }
}

extension DeleteVirtualServiceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVirtualServiceInput(meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), virtualServiceName: \(Swift.String(describing: virtualServiceName)))"}
}

extension DeleteVirtualServiceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteVirtualServiceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVirtualServiceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVirtualServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVirtualServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVirtualServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVirtualServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVirtualServiceOutputError>
}

public struct DeleteVirtualServiceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVirtualServiceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVirtualServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVirtualServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVirtualServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVirtualServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVirtualServiceOutputError>
}

///
public struct DeleteVirtualServiceInput: Swift.Equatable {
    /// <p>The name of the service mesh to delete the virtual service in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The name of the virtual service to delete.</p>
    public let virtualServiceName: Swift.String?

    public init (
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        virtualServiceName: Swift.String? = nil
    )
    {
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.virtualServiceName = virtualServiceName
    }
}

struct DeleteVirtualServiceInputBody: Swift.Equatable {
}

extension DeleteVirtualServiceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteVirtualServiceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVirtualServiceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteVirtualServiceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case resourceInUseException(ResourceInUseException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVirtualServiceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVirtualServiceOutputResponse(virtualService: \(Swift.String(describing: virtualService)))"}
}

extension DeleteVirtualServiceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualServiceData = try responseDecoder.decode(responseBody: data)
                self.virtualService = output
            } else {
                self.virtualService = nil
            }
        } else {
            self.virtualService = nil
        }
    }
}

///
public struct DeleteVirtualServiceOutputResponse: Swift.Equatable {
    /// <p>The virtual service that was deleted.</p>
    public let virtualService: AppMeshClientTypes.VirtualServiceData?

    public init (
        virtualService: AppMeshClientTypes.VirtualServiceData? = nil
    )
    {
        self.virtualService = virtualService
    }
}

struct DeleteVirtualServiceOutputResponseBody: Swift.Equatable {
    public let virtualService: AppMeshClientTypes.VirtualServiceData?
}

extension DeleteVirtualServiceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualService
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualServiceDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualServiceData.self, forKey: .virtualService)
        virtualService = virtualServiceDecoded
    }
}

extension DescribeGatewayRouteInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeGatewayRouteInput(gatewayRouteName: \(Swift.String(describing: gatewayRouteName)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), virtualGatewayName: \(Swift.String(describing: virtualGatewayName)))"}
}

extension DescribeGatewayRouteInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeGatewayRouteInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeGatewayRouteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeGatewayRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeGatewayRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeGatewayRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeGatewayRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeGatewayRouteOutputError>
}

public struct DescribeGatewayRouteInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeGatewayRouteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeGatewayRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeGatewayRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeGatewayRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeGatewayRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeGatewayRouteOutputError>
}

public struct DescribeGatewayRouteInput: Swift.Equatable {
    /// <p>The name of the gateway route to describe.</p>
    public let gatewayRouteName: Swift.String?
    /// <p>The name of the service mesh that the gateway route resides in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The name of the virtual gateway that the gateway route is associated with.</p>
    public let virtualGatewayName: Swift.String?

    public init (
        gatewayRouteName: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        virtualGatewayName: Swift.String? = nil
    )
    {
        self.gatewayRouteName = gatewayRouteName
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.virtualGatewayName = virtualGatewayName
    }
}

struct DescribeGatewayRouteInputBody: Swift.Equatable {
}

extension DescribeGatewayRouteInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeGatewayRouteOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGatewayRouteOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeGatewayRouteOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGatewayRouteOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeGatewayRouteOutputResponse(gatewayRoute: \(Swift.String(describing: gatewayRoute)))"}
}

extension DescribeGatewayRouteOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.GatewayRouteData = try responseDecoder.decode(responseBody: data)
                self.gatewayRoute = output
            } else {
                self.gatewayRoute = nil
            }
        } else {
            self.gatewayRoute = nil
        }
    }
}

public struct DescribeGatewayRouteOutputResponse: Swift.Equatable {
    /// <p>The full description of your gateway route.</p>
    public let gatewayRoute: AppMeshClientTypes.GatewayRouteData?

    public init (
        gatewayRoute: AppMeshClientTypes.GatewayRouteData? = nil
    )
    {
        self.gatewayRoute = gatewayRoute
    }
}

struct DescribeGatewayRouteOutputResponseBody: Swift.Equatable {
    public let gatewayRoute: AppMeshClientTypes.GatewayRouteData?
}

extension DescribeGatewayRouteOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gatewayRoute
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayRouteDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GatewayRouteData.self, forKey: .gatewayRoute)
        gatewayRoute = gatewayRouteDecoded
    }
}

extension DescribeMeshInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeMeshInput(meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)))"}
}

extension DescribeMeshInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeMeshInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeMeshInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeMeshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeMeshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeMeshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeMeshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeMeshOutputError>
}

public struct DescribeMeshInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeMeshInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeMeshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeMeshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeMeshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeMeshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeMeshOutputError>
}

///
public struct DescribeMeshInput: Swift.Equatable {
    /// <p>The name of the service mesh to describe.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?

    public init (
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil
    )
    {
        self.meshName = meshName
        self.meshOwner = meshOwner
    }
}

struct DescribeMeshInputBody: Swift.Equatable {
}

extension DescribeMeshInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeMeshOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMeshOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeMeshOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMeshOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeMeshOutputResponse(mesh: \(Swift.String(describing: mesh)))"}
}

extension DescribeMeshOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.MeshData = try responseDecoder.decode(responseBody: data)
                self.mesh = output
            } else {
                self.mesh = nil
            }
        } else {
            self.mesh = nil
        }
    }
}

///
public struct DescribeMeshOutputResponse: Swift.Equatable {
    /// <p>The full description of your service mesh.</p>
    public let mesh: AppMeshClientTypes.MeshData?

    public init (
        mesh: AppMeshClientTypes.MeshData? = nil
    )
    {
        self.mesh = mesh
    }
}

struct DescribeMeshOutputResponseBody: Swift.Equatable {
    public let mesh: AppMeshClientTypes.MeshData?
}

extension DescribeMeshOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mesh
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.MeshData.self, forKey: .mesh)
        mesh = meshDecoded
    }
}

extension DescribeRouteInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRouteInput(meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), routeName: \(Swift.String(describing: routeName)), virtualRouterName: \(Swift.String(describing: virtualRouterName)))"}
}

extension DescribeRouteInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeRouteInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRouteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRouteOutputError>
}

public struct DescribeRouteInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRouteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRouteOutputError>
}

///
public struct DescribeRouteInput: Swift.Equatable {
    /// <p>The name of the service mesh that the route resides in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The name of the route to describe.</p>
    public let routeName: Swift.String?
    /// <p>The name of the virtual router that the route is associated with.</p>
    public let virtualRouterName: Swift.String?

    public init (
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        routeName: Swift.String? = nil,
        virtualRouterName: Swift.String? = nil
    )
    {
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.routeName = routeName
        self.virtualRouterName = virtualRouterName
    }
}

struct DescribeRouteInputBody: Swift.Equatable {
}

extension DescribeRouteInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeRouteOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRouteOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeRouteOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRouteOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRouteOutputResponse(route: \(Swift.String(describing: route)))"}
}

extension DescribeRouteOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.RouteData = try responseDecoder.decode(responseBody: data)
                self.route = output
            } else {
                self.route = nil
            }
        } else {
            self.route = nil
        }
    }
}

///
public struct DescribeRouteOutputResponse: Swift.Equatable {
    /// <p>The full description of your route.</p>
    public let route: AppMeshClientTypes.RouteData?

    public init (
        route: AppMeshClientTypes.RouteData? = nil
    )
    {
        self.route = route
    }
}

struct DescribeRouteOutputResponseBody: Swift.Equatable {
    public let route: AppMeshClientTypes.RouteData?
}

extension DescribeRouteOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case route
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routeDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.RouteData.self, forKey: .route)
        route = routeDecoded
    }
}

extension DescribeVirtualGatewayInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeVirtualGatewayInput(meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), virtualGatewayName: \(Swift.String(describing: virtualGatewayName)))"}
}

extension DescribeVirtualGatewayInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeVirtualGatewayInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVirtualGatewayInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVirtualGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVirtualGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVirtualGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVirtualGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVirtualGatewayOutputError>
}

public struct DescribeVirtualGatewayInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVirtualGatewayInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVirtualGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVirtualGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVirtualGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVirtualGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVirtualGatewayOutputError>
}

public struct DescribeVirtualGatewayInput: Swift.Equatable {
    /// <p>The name of the service mesh that the gateway route resides in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The name of the virtual gateway to describe.</p>
    public let virtualGatewayName: Swift.String?

    public init (
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        virtualGatewayName: Swift.String? = nil
    )
    {
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.virtualGatewayName = virtualGatewayName
    }
}

struct DescribeVirtualGatewayInputBody: Swift.Equatable {
}

extension DescribeVirtualGatewayInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeVirtualGatewayOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeVirtualGatewayOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeVirtualGatewayOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeVirtualGatewayOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeVirtualGatewayOutputResponse(virtualGateway: \(Swift.String(describing: virtualGateway)))"}
}

extension DescribeVirtualGatewayOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualGatewayData = try responseDecoder.decode(responseBody: data)
                self.virtualGateway = output
            } else {
                self.virtualGateway = nil
            }
        } else {
            self.virtualGateway = nil
        }
    }
}

public struct DescribeVirtualGatewayOutputResponse: Swift.Equatable {
    /// <p>The full description of your virtual gateway.</p>
    public let virtualGateway: AppMeshClientTypes.VirtualGatewayData?

    public init (
        virtualGateway: AppMeshClientTypes.VirtualGatewayData? = nil
    )
    {
        self.virtualGateway = virtualGateway
    }
}

struct DescribeVirtualGatewayOutputResponseBody: Swift.Equatable {
    public let virtualGateway: AppMeshClientTypes.VirtualGatewayData?
}

extension DescribeVirtualGatewayOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualGateway
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualGatewayDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayData.self, forKey: .virtualGateway)
        virtualGateway = virtualGatewayDecoded
    }
}

extension DescribeVirtualNodeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeVirtualNodeInput(meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), virtualNodeName: \(Swift.String(describing: virtualNodeName)))"}
}

extension DescribeVirtualNodeInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeVirtualNodeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVirtualNodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVirtualNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVirtualNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVirtualNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVirtualNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVirtualNodeOutputError>
}

public struct DescribeVirtualNodeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVirtualNodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVirtualNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVirtualNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVirtualNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVirtualNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVirtualNodeOutputError>
}

///
public struct DescribeVirtualNodeInput: Swift.Equatable {
    /// <p>The name of the service mesh that the virtual node resides in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The name of the virtual node to describe.</p>
    public let virtualNodeName: Swift.String?

    public init (
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        virtualNodeName: Swift.String? = nil
    )
    {
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.virtualNodeName = virtualNodeName
    }
}

struct DescribeVirtualNodeInputBody: Swift.Equatable {
}

extension DescribeVirtualNodeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeVirtualNodeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeVirtualNodeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeVirtualNodeOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeVirtualNodeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeVirtualNodeOutputResponse(virtualNode: \(Swift.String(describing: virtualNode)))"}
}

extension DescribeVirtualNodeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualNodeData = try responseDecoder.decode(responseBody: data)
                self.virtualNode = output
            } else {
                self.virtualNode = nil
            }
        } else {
            self.virtualNode = nil
        }
    }
}

///
public struct DescribeVirtualNodeOutputResponse: Swift.Equatable {
    /// <p>The full description of your virtual node.</p>
    public let virtualNode: AppMeshClientTypes.VirtualNodeData?

    public init (
        virtualNode: AppMeshClientTypes.VirtualNodeData? = nil
    )
    {
        self.virtualNode = virtualNode
    }
}

struct DescribeVirtualNodeOutputResponseBody: Swift.Equatable {
    public let virtualNode: AppMeshClientTypes.VirtualNodeData?
}

extension DescribeVirtualNodeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualNode
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualNodeDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualNodeData.self, forKey: .virtualNode)
        virtualNode = virtualNodeDecoded
    }
}

extension DescribeVirtualRouterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeVirtualRouterInput(meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), virtualRouterName: \(Swift.String(describing: virtualRouterName)))"}
}

extension DescribeVirtualRouterInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeVirtualRouterInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVirtualRouterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVirtualRouterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVirtualRouterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVirtualRouterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVirtualRouterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVirtualRouterOutputError>
}

public struct DescribeVirtualRouterInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVirtualRouterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVirtualRouterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVirtualRouterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVirtualRouterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVirtualRouterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVirtualRouterOutputError>
}

///
public struct DescribeVirtualRouterInput: Swift.Equatable {
    /// <p>The name of the service mesh that the virtual router resides in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The name of the virtual router to describe.</p>
    public let virtualRouterName: Swift.String?

    public init (
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        virtualRouterName: Swift.String? = nil
    )
    {
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.virtualRouterName = virtualRouterName
    }
}

struct DescribeVirtualRouterInputBody: Swift.Equatable {
}

extension DescribeVirtualRouterInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeVirtualRouterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeVirtualRouterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeVirtualRouterOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeVirtualRouterOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeVirtualRouterOutputResponse(virtualRouter: \(Swift.String(describing: virtualRouter)))"}
}

extension DescribeVirtualRouterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualRouterData = try responseDecoder.decode(responseBody: data)
                self.virtualRouter = output
            } else {
                self.virtualRouter = nil
            }
        } else {
            self.virtualRouter = nil
        }
    }
}

///
public struct DescribeVirtualRouterOutputResponse: Swift.Equatable {
    /// <p>The full description of your virtual router.</p>
    public let virtualRouter: AppMeshClientTypes.VirtualRouterData?

    public init (
        virtualRouter: AppMeshClientTypes.VirtualRouterData? = nil
    )
    {
        self.virtualRouter = virtualRouter
    }
}

struct DescribeVirtualRouterOutputResponseBody: Swift.Equatable {
    public let virtualRouter: AppMeshClientTypes.VirtualRouterData?
}

extension DescribeVirtualRouterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualRouter
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualRouterDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualRouterData.self, forKey: .virtualRouter)
        virtualRouter = virtualRouterDecoded
    }
}

extension DescribeVirtualServiceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeVirtualServiceInput(meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), virtualServiceName: \(Swift.String(describing: virtualServiceName)))"}
}

extension DescribeVirtualServiceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeVirtualServiceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVirtualServiceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVirtualServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVirtualServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVirtualServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVirtualServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVirtualServiceOutputError>
}

public struct DescribeVirtualServiceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeVirtualServiceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeVirtualServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeVirtualServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeVirtualServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeVirtualServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeVirtualServiceOutputError>
}

///
public struct DescribeVirtualServiceInput: Swift.Equatable {
    /// <p>The name of the service mesh that the virtual service resides in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The name of the virtual service to describe.</p>
    public let virtualServiceName: Swift.String?

    public init (
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        virtualServiceName: Swift.String? = nil
    )
    {
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.virtualServiceName = virtualServiceName
    }
}

struct DescribeVirtualServiceInputBody: Swift.Equatable {
}

extension DescribeVirtualServiceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeVirtualServiceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeVirtualServiceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeVirtualServiceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeVirtualServiceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeVirtualServiceOutputResponse(virtualService: \(Swift.String(describing: virtualService)))"}
}

extension DescribeVirtualServiceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualServiceData = try responseDecoder.decode(responseBody: data)
                self.virtualService = output
            } else {
                self.virtualService = nil
            }
        } else {
            self.virtualService = nil
        }
    }
}

///
public struct DescribeVirtualServiceOutputResponse: Swift.Equatable {
    /// <p>The full description of your virtual service.</p>
    public let virtualService: AppMeshClientTypes.VirtualServiceData?

    public init (
        virtualService: AppMeshClientTypes.VirtualServiceData? = nil
    )
    {
        self.virtualService = virtualService
    }
}

struct DescribeVirtualServiceOutputResponseBody: Swift.Equatable {
    public let virtualService: AppMeshClientTypes.VirtualServiceData?
}

extension DescribeVirtualServiceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualService
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualServiceDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualServiceData.self, forKey: .virtualService)
        virtualService = virtualServiceDecoded
    }
}

extension AppMeshClientTypes.DnsServiceDiscovery: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostname
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hostname = hostname {
            try encodeContainer.encode(hostname, forKey: .hostname)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostname)
        hostname = hostnameDecoded
    }
}

extension AppMeshClientTypes.DnsServiceDiscovery: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DnsServiceDiscovery(hostname: \(Swift.String(describing: hostname)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the DNS service discovery information for your virtual
    ///          node.</p>
    public struct DnsServiceDiscovery: Swift.Equatable {
        /// <p>Specifies the DNS service discovery hostname for the virtual node. </p>
        public let hostname: Swift.String?

        public init (
            hostname: Swift.String? = nil
        )
        {
            self.hostname = hostname
        }
    }

}

extension AppMeshClientTypes.Duration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case unit
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .value)
        value = valueDecoded
        let unitDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.DurationUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension AppMeshClientTypes.Duration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Duration(unit: \(Swift.String(describing: unit)), value: \(Swift.String(describing: value)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a duration of time.</p>
    public struct Duration: Swift.Equatable {
        /// <p>A unit of time.</p>
        public let unit: AppMeshClientTypes.DurationUnit?
        /// <p>A number of time units.</p>
        public let value: Swift.Int?

        public init (
            unit: AppMeshClientTypes.DurationUnit? = nil,
            value: Swift.Int? = nil
        )
        {
            self.unit = unit
            self.value = value
        }
    }

}

extension AppMeshClientTypes {
    public enum DurationUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ms
        case s
        case sdkUnknown(Swift.String)

        public static var allCases: [DurationUnit] {
            return [
                .ms,
                .s,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ms: return "ms"
            case .s: return "s"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DurationUnit(rawValue: rawValue) ?? DurationUnit.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.EgressFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.EgressFilterType.self, forKey: .type)
        type = typeDecoded
    }
}

extension AppMeshClientTypes.EgressFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EgressFilter(type: \(Swift.String(describing: type)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the egress filter rules for a service mesh.</p>
    public struct EgressFilter: Swift.Equatable {
        /// <p>The egress filter type. By default, the type is <code>DROP_ALL</code>, which allows
        ///          egress only from virtual nodes to other defined resources in the service mesh (and any
        ///          traffic to <code>*.amazonaws.com</code> for AWS API calls). You can set the egress filter
        ///          type to <code>ALLOW_ALL</code> to allow egress to any endpoint inside or outside of the
        ///          service mesh.</p>
        public let type: AppMeshClientTypes.EgressFilterType?

        public init (
            type: AppMeshClientTypes.EgressFilterType? = nil
        )
        {
            self.type = type
        }
    }

}

extension AppMeshClientTypes {
    public enum EgressFilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allowAll
        case dropAll
        case sdkUnknown(Swift.String)

        public static var allCases: [EgressFilterType] {
            return [
                .allowAll,
                .dropAll,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allowAll: return "ALLOW_ALL"
            case .dropAll: return "DROP_ALL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EgressFilterType(rawValue: rawValue) ?? EgressFilterType.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.FileAccessLog: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case path
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
    }
}

extension AppMeshClientTypes.FileAccessLog: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FileAccessLog(path: \(Swift.String(describing: path)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents an access log file.</p>
    public struct FileAccessLog: Swift.Equatable {
        /// <p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send
        ///          access logs to standard out and configure your Envoy container to use a log driver, such as
        ///             <code>awslogs</code>, to export the access logs to a log storage service such as Amazon
        ///          CloudWatch Logs. You can also specify a path in the Envoy container's file system to write
        ///          the files to disk.</p>
        ///          <note>
        ///             <p>The Envoy process must have write permissions to the path that you specify here.
        ///             Otherwise, Envoy fails to bootstrap properly.</p>
        ///          </note>
        public let path: Swift.String?

        public init (
            path: Swift.String? = nil
        )
        {
            self.path = path
        }
    }

}

extension ForbiddenException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ForbiddenException(message: \(Swift.String(describing: message)))"}
}

extension ForbiddenException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ForbiddenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You don't have permissions to perform this action.</p>
public struct ForbiddenException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ForbiddenExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ForbiddenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AppMeshClientTypes.GatewayRouteData: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gatewayRouteName
        case meshName
        case metadata
        case spec
        case status
        case virtualGatewayName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gatewayRouteName = gatewayRouteName {
            try encodeContainer.encode(gatewayRouteName, forKey: .gatewayRouteName)
        }
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let metadata = metadata {
            try encodeContainer.encode(metadata, forKey: .metadata)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let virtualGatewayName = virtualGatewayName {
            try encodeContainer.encode(virtualGatewayName, forKey: .virtualGatewayName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let gatewayRouteNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayRouteName)
        gatewayRouteName = gatewayRouteNameDecoded
        let virtualGatewayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayName)
        virtualGatewayName = virtualGatewayNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GatewayRouteSpec.self, forKey: .spec)
        spec = specDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ResourceMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GatewayRouteStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension AppMeshClientTypes.GatewayRouteData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GatewayRouteData(gatewayRouteName: \(Swift.String(describing: gatewayRouteName)), meshName: \(Swift.String(describing: meshName)), metadata: \(Swift.String(describing: metadata)), spec: \(Swift.String(describing: spec)), status: \(Swift.String(describing: status)), virtualGatewayName: \(Swift.String(describing: virtualGatewayName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a gateway route returned by a describe operation.</p>
    public struct GatewayRouteData: Swift.Equatable {
        /// <p>The name of the gateway route.</p>
        public let gatewayRouteName: Swift.String?
        /// <p>The name of the service mesh that the resource resides in. </p>
        public let meshName: Swift.String?
        /// <p>An object that represents metadata for a resource.</p>
        public let metadata: AppMeshClientTypes.ResourceMetadata?
        /// <p>The specifications of the gateway route.</p>
        public let spec: AppMeshClientTypes.GatewayRouteSpec?
        /// <p>The status of the gateway route.</p>
        public let status: AppMeshClientTypes.GatewayRouteStatus?
        /// <p>The virtual gateway that the gateway route is associated with.</p>
        public let virtualGatewayName: Swift.String?

        public init (
            gatewayRouteName: Swift.String? = nil,
            meshName: Swift.String? = nil,
            metadata: AppMeshClientTypes.ResourceMetadata? = nil,
            spec: AppMeshClientTypes.GatewayRouteSpec? = nil,
            status: AppMeshClientTypes.GatewayRouteStatus? = nil,
            virtualGatewayName: Swift.String? = nil
        )
        {
            self.gatewayRouteName = gatewayRouteName
            self.meshName = meshName
            self.metadata = metadata
            self.spec = spec
            self.status = status
            self.virtualGatewayName = virtualGatewayName
        }
    }

}

extension AppMeshClientTypes.GatewayRouteRef: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case gatewayRouteName
        case lastUpdatedAt
        case meshName
        case meshOwner
        case resourceOwner
        case version
        case virtualGatewayName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let gatewayRouteName = gatewayRouteName {
            try encodeContainer.encode(gatewayRouteName, forKey: .gatewayRouteName)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let meshOwner = meshOwner {
            try encodeContainer.encode(meshOwner, forKey: .meshOwner)
        }
        if let resourceOwner = resourceOwner {
            try encodeContainer.encode(resourceOwner, forKey: .resourceOwner)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let virtualGatewayName = virtualGatewayName {
            try encodeContainer.encode(virtualGatewayName, forKey: .virtualGatewayName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let gatewayRouteNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayRouteName)
        gatewayRouteName = gatewayRouteNameDecoded
        let virtualGatewayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayName)
        virtualGatewayName = virtualGatewayNameDecoded
        let meshOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshOwner)
        meshOwner = meshOwnerDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
    }
}

extension AppMeshClientTypes.GatewayRouteRef: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GatewayRouteRef(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), gatewayRouteName: \(Swift.String(describing: gatewayRouteName)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), resourceOwner: \(Swift.String(describing: resourceOwner)), version: \(Swift.String(describing: version)), virtualGatewayName: \(Swift.String(describing: virtualGatewayName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a gateway route returned by a list operation.</p>
    public struct GatewayRouteRef: Swift.Equatable {
        /// <p>The full Amazon Resource Name (ARN) for the gateway route.</p>
        public let arn: Swift.String?
        /// <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The name of the gateway route.</p>
        public let gatewayRouteName: Swift.String?
        /// <p>The Unix epoch timestamp in seconds for when the resource was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The name of the service mesh that the resource resides in. </p>
        public let meshName: Swift.String?
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let meshOwner: Swift.String?
        /// <p>The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's
        ///                the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let resourceOwner: Swift.String?
        /// <p>The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.</p>
        public let version: Swift.Int?
        /// <p>The virtual gateway that the gateway route is associated with.</p>
        public let virtualGatewayName: Swift.String?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            gatewayRouteName: Swift.String? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            meshName: Swift.String? = nil,
            meshOwner: Swift.String? = nil,
            resourceOwner: Swift.String? = nil,
            version: Swift.Int? = nil,
            virtualGatewayName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.gatewayRouteName = gatewayRouteName
            self.lastUpdatedAt = lastUpdatedAt
            self.meshName = meshName
            self.meshOwner = meshOwner
            self.resourceOwner = resourceOwner
            self.version = version
            self.virtualGatewayName = virtualGatewayName
        }
    }

}

extension AppMeshClientTypes.GatewayRouteSpec: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grpcRoute
        case http2Route
        case httpRoute
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grpcRoute = grpcRoute {
            try encodeContainer.encode(grpcRoute, forKey: .grpcRoute)
        }
        if let http2Route = http2Route {
            try encodeContainer.encode(http2Route, forKey: .http2Route)
        }
        if let httpRoute = httpRoute {
            try encodeContainer.encode(httpRoute, forKey: .httpRoute)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let httpRouteDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpGatewayRoute.self, forKey: .httpRoute)
        httpRoute = httpRouteDecoded
        let http2RouteDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpGatewayRoute.self, forKey: .http2Route)
        http2Route = http2RouteDecoded
        let grpcRouteDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GrpcGatewayRoute.self, forKey: .grpcRoute)
        grpcRoute = grpcRouteDecoded
    }
}

extension AppMeshClientTypes.GatewayRouteSpec: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GatewayRouteSpec(grpcRoute: \(Swift.String(describing: grpcRoute)), http2Route: \(Swift.String(describing: http2Route)), httpRoute: \(Swift.String(describing: httpRoute)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a gateway route specification. Specify one gateway route
    ///          type.</p>
    public struct GatewayRouteSpec: Swift.Equatable {
        /// <p>An object that represents the specification of a gRPC gateway route.</p>
        public let grpcRoute: AppMeshClientTypes.GrpcGatewayRoute?
        /// <p>An object that represents the specification of an HTTP/2 gateway route.</p>
        public let http2Route: AppMeshClientTypes.HttpGatewayRoute?
        /// <p>An object that represents the specification of an HTTP gateway route.</p>
        public let httpRoute: AppMeshClientTypes.HttpGatewayRoute?

        public init (
            grpcRoute: AppMeshClientTypes.GrpcGatewayRoute? = nil,
            http2Route: AppMeshClientTypes.HttpGatewayRoute? = nil,
            httpRoute: AppMeshClientTypes.HttpGatewayRoute? = nil
        )
        {
            self.grpcRoute = grpcRoute
            self.http2Route = http2Route
            self.httpRoute = httpRoute
        }
    }

}

extension AppMeshClientTypes.GatewayRouteStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GatewayRouteStatusCode.self, forKey: .status)
        status = statusDecoded
    }
}

extension AppMeshClientTypes.GatewayRouteStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GatewayRouteStatus(status: \(Swift.String(describing: status)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the current status of a gateway route.</p>
    public struct GatewayRouteStatus: Swift.Equatable {
        /// <p>The current status for the gateway route.</p>
        public let status: AppMeshClientTypes.GatewayRouteStatusCode?

        public init (
            status: AppMeshClientTypes.GatewayRouteStatusCode? = nil
        )
        {
            self.status = status
        }
    }

}

extension AppMeshClientTypes {
    public enum GatewayRouteStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleted
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [GatewayRouteStatusCode] {
            return [
                .active,
                .deleted,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GatewayRouteStatusCode(rawValue: rawValue) ?? GatewayRouteStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.GatewayRouteTarget: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualService
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let virtualService = virtualService {
            try encodeContainer.encode(virtualService, forKey: .virtualService)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualServiceDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GatewayRouteVirtualService.self, forKey: .virtualService)
        virtualService = virtualServiceDecoded
    }
}

extension AppMeshClientTypes.GatewayRouteTarget: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GatewayRouteTarget(virtualService: \(Swift.String(describing: virtualService)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a gateway route target.</p>
    public struct GatewayRouteTarget: Swift.Equatable {
        /// <p>An object that represents a virtual service gateway route target.</p>
        public let virtualService: AppMeshClientTypes.GatewayRouteVirtualService?

        public init (
            virtualService: AppMeshClientTypes.GatewayRouteVirtualService? = nil
        )
        {
            self.virtualService = virtualService
        }
    }

}

extension AppMeshClientTypes.GatewayRouteVirtualService: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualServiceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let virtualServiceName = virtualServiceName {
            try encodeContainer.encode(virtualServiceName, forKey: .virtualServiceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualServiceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualServiceName)
        virtualServiceName = virtualServiceNameDecoded
    }
}

extension AppMeshClientTypes.GatewayRouteVirtualService: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GatewayRouteVirtualService(virtualServiceName: \(Swift.String(describing: virtualServiceName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the virtual service that traffic is routed to.</p>
    public struct GatewayRouteVirtualService: Swift.Equatable {
        /// <p>The name of the virtual service that traffic is routed to.</p>
        public let virtualServiceName: Swift.String?

        public init (
            virtualServiceName: Swift.String? = nil
        )
        {
            self.virtualServiceName = virtualServiceName
        }
    }

}

extension AppMeshClientTypes.GrpcGatewayRoute: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case match
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let match = match {
            try encodeContainer.encode(match, forKey: .match)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GrpcGatewayRouteMatch.self, forKey: .match)
        match = matchDecoded
        let actionDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GrpcGatewayRouteAction.self, forKey: .action)
        action = actionDecoded
    }
}

extension AppMeshClientTypes.GrpcGatewayRoute: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GrpcGatewayRoute(action: \(Swift.String(describing: action)), match: \(Swift.String(describing: match)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a gRPC gateway route.</p>
    public struct GrpcGatewayRoute: Swift.Equatable {
        /// <p>An object that represents the action to take if a match is determined.</p>
        public let action: AppMeshClientTypes.GrpcGatewayRouteAction?
        /// <p>An object that represents the criteria for determining a request match.</p>
        public let match: AppMeshClientTypes.GrpcGatewayRouteMatch?

        public init (
            action: AppMeshClientTypes.GrpcGatewayRouteAction? = nil,
            match: AppMeshClientTypes.GrpcGatewayRouteMatch? = nil
        )
        {
            self.action = action
            self.match = match
        }
    }

}

extension AppMeshClientTypes.GrpcGatewayRouteAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case target
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GatewayRouteTarget.self, forKey: .target)
        target = targetDecoded
    }
}

extension AppMeshClientTypes.GrpcGatewayRouteAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GrpcGatewayRouteAction(target: \(Swift.String(describing: target)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the action to take if a match is determined.</p>
    public struct GrpcGatewayRouteAction: Swift.Equatable {
        /// <p>An object that represents the target that traffic is routed to when a request matches the gateway route.</p>
        public let target: AppMeshClientTypes.GatewayRouteTarget?

        public init (
            target: AppMeshClientTypes.GatewayRouteTarget? = nil
        )
        {
            self.target = target
        }
    }

}

extension AppMeshClientTypes.GrpcGatewayRouteMatch: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
    }
}

extension AppMeshClientTypes.GrpcGatewayRouteMatch: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GrpcGatewayRouteMatch(serviceName: \(Swift.String(describing: serviceName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the criteria for determining a request match.</p>
    public struct GrpcGatewayRouteMatch: Swift.Equatable {
        /// <p>The fully qualified domain name for the service to match from the request.</p>
        public let serviceName: Swift.String?

        public init (
            serviceName: Swift.String? = nil
        )
        {
            self.serviceName = serviceName
        }
    }

}

extension AppMeshClientTypes.GrpcRetryPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grpcRetryEvents
        case httpRetryEvents
        case maxRetries
        case perRetryTimeout
        case tcpRetryEvents
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grpcRetryEvents = grpcRetryEvents {
            var grpcRetryEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grpcRetryEvents)
            for grpcretrypolicyevents0 in grpcRetryEvents {
                try grpcRetryEventsContainer.encode(grpcretrypolicyevents0.rawValue)
            }
        }
        if let httpRetryEvents = httpRetryEvents {
            var httpRetryEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .httpRetryEvents)
            for httpretrypolicyevents0 in httpRetryEvents {
                try httpRetryEventsContainer.encode(httpretrypolicyevents0)
            }
        }
        if let maxRetries = maxRetries {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let perRetryTimeout = perRetryTimeout {
            try encodeContainer.encode(perRetryTimeout, forKey: .perRetryTimeout)
        }
        if let tcpRetryEvents = tcpRetryEvents {
            var tcpRetryEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tcpRetryEvents)
            for tcpretrypolicyevents0 in tcpRetryEvents {
                try tcpRetryEventsContainer.encode(tcpretrypolicyevents0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let perRetryTimeoutDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.Duration.self, forKey: .perRetryTimeout)
        perRetryTimeout = perRetryTimeoutDecoded
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let httpRetryEventsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .httpRetryEvents)
        var httpRetryEventsDecoded0:[Swift.String]? = nil
        if let httpRetryEventsContainer = httpRetryEventsContainer {
            httpRetryEventsDecoded0 = [Swift.String]()
            for string0 in httpRetryEventsContainer {
                if let string0 = string0 {
                    httpRetryEventsDecoded0?.append(string0)
                }
            }
        }
        httpRetryEvents = httpRetryEventsDecoded0
        let tcpRetryEventsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.TcpRetryPolicyEvent?].self, forKey: .tcpRetryEvents)
        var tcpRetryEventsDecoded0:[AppMeshClientTypes.TcpRetryPolicyEvent]? = nil
        if let tcpRetryEventsContainer = tcpRetryEventsContainer {
            tcpRetryEventsDecoded0 = [AppMeshClientTypes.TcpRetryPolicyEvent]()
            for string0 in tcpRetryEventsContainer {
                if let string0 = string0 {
                    tcpRetryEventsDecoded0?.append(string0)
                }
            }
        }
        tcpRetryEvents = tcpRetryEventsDecoded0
        let grpcRetryEventsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.GrpcRetryPolicyEvent?].self, forKey: .grpcRetryEvents)
        var grpcRetryEventsDecoded0:[AppMeshClientTypes.GrpcRetryPolicyEvent]? = nil
        if let grpcRetryEventsContainer = grpcRetryEventsContainer {
            grpcRetryEventsDecoded0 = [AppMeshClientTypes.GrpcRetryPolicyEvent]()
            for string0 in grpcRetryEventsContainer {
                if let string0 = string0 {
                    grpcRetryEventsDecoded0?.append(string0)
                }
            }
        }
        grpcRetryEvents = grpcRetryEventsDecoded0
    }
}

extension AppMeshClientTypes.GrpcRetryPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GrpcRetryPolicy(grpcRetryEvents: \(Swift.String(describing: grpcRetryEvents)), httpRetryEvents: \(Swift.String(describing: httpRetryEvents)), maxRetries: \(Swift.String(describing: maxRetries)), perRetryTimeout: \(Swift.String(describing: perRetryTimeout)), tcpRetryEvents: \(Swift.String(describing: tcpRetryEvents)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>.</p>
    public struct GrpcRetryPolicy: Swift.Equatable {
        /// <p>Specify at least one of the valid values.</p>
        public let grpcRetryEvents: [AppMeshClientTypes.GrpcRetryPolicyEvent]?
        /// <p>Specify at least one of the following values.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>server-error</b> – HTTP status codes 500, 501,
        ///                   502, 503, 504, 505, 506, 507, 508, 510, and 511</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>gateway-error</b> – HTTP status codes 502,
        ///                   503, and 504</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>client-error</b> – HTTP status code 409</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>stream-error</b> – Retry on refused
        ///                   stream</p>
        ///             </li>
        ///          </ul>
        public let httpRetryEvents: [Swift.String]?
        /// <p>The maximum number of retry attempts.</p>
        public let maxRetries: Swift.Int?
        /// <p>The timeout for each retry attempt.</p>
        public let perRetryTimeout: AppMeshClientTypes.Duration?
        /// <p>Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.</p>
        public let tcpRetryEvents: [AppMeshClientTypes.TcpRetryPolicyEvent]?

        public init (
            grpcRetryEvents: [AppMeshClientTypes.GrpcRetryPolicyEvent]? = nil,
            httpRetryEvents: [Swift.String]? = nil,
            maxRetries: Swift.Int? = nil,
            perRetryTimeout: AppMeshClientTypes.Duration? = nil,
            tcpRetryEvents: [AppMeshClientTypes.TcpRetryPolicyEvent]? = nil
        )
        {
            self.grpcRetryEvents = grpcRetryEvents
            self.httpRetryEvents = httpRetryEvents
            self.maxRetries = maxRetries
            self.perRetryTimeout = perRetryTimeout
            self.tcpRetryEvents = tcpRetryEvents
        }
    }

}

extension AppMeshClientTypes {
    public enum GrpcRetryPolicyEvent: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case deadlineExceeded
        case `internal`
        case resourceExhausted
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [GrpcRetryPolicyEvent] {
            return [
                .cancelled,
                .deadlineExceeded,
                .internal,
                .resourceExhausted,
                .unavailable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "cancelled"
            case .deadlineExceeded: return "deadline-exceeded"
            case .internal: return "internal"
            case .resourceExhausted: return "resource-exhausted"
            case .unavailable: return "unavailable"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GrpcRetryPolicyEvent(rawValue: rawValue) ?? GrpcRetryPolicyEvent.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.GrpcRoute: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case match
        case retryPolicy
        case timeout
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let match = match {
            try encodeContainer.encode(match, forKey: .match)
        }
        if let retryPolicy = retryPolicy {
            try encodeContainer.encode(retryPolicy, forKey: .retryPolicy)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GrpcRouteAction.self, forKey: .action)
        action = actionDecoded
        let matchDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GrpcRouteMatch.self, forKey: .match)
        match = matchDecoded
        let retryPolicyDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GrpcRetryPolicy.self, forKey: .retryPolicy)
        retryPolicy = retryPolicyDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GrpcTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
    }
}

extension AppMeshClientTypes.GrpcRoute: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GrpcRoute(action: \(Swift.String(describing: action)), match: \(Swift.String(describing: match)), retryPolicy: \(Swift.String(describing: retryPolicy)), timeout: \(Swift.String(describing: timeout)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a gRPC route type.</p>
    public struct GrpcRoute: Swift.Equatable {
        /// <p>An object that represents the action to take if a match is determined.</p>
        public let action: AppMeshClientTypes.GrpcRouteAction?
        /// <p>An object that represents the criteria for determining a request match.</p>
        public let match: AppMeshClientTypes.GrpcRouteMatch?
        /// <p>An object that represents a retry policy.</p>
        public let retryPolicy: AppMeshClientTypes.GrpcRetryPolicy?
        /// <p>An object that represents types of timeouts. </p>
        public let timeout: AppMeshClientTypes.GrpcTimeout?

        public init (
            action: AppMeshClientTypes.GrpcRouteAction? = nil,
            match: AppMeshClientTypes.GrpcRouteMatch? = nil,
            retryPolicy: AppMeshClientTypes.GrpcRetryPolicy? = nil,
            timeout: AppMeshClientTypes.GrpcTimeout? = nil
        )
        {
            self.action = action
            self.match = match
            self.retryPolicy = retryPolicy
            self.timeout = timeout
        }
    }

}

extension AppMeshClientTypes.GrpcRouteAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case weightedTargets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let weightedTargets = weightedTargets {
            var weightedTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .weightedTargets)
            for weightedtargets0 in weightedTargets {
                try weightedTargetsContainer.encode(weightedtargets0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let weightedTargetsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.WeightedTarget?].self, forKey: .weightedTargets)
        var weightedTargetsDecoded0:[AppMeshClientTypes.WeightedTarget]? = nil
        if let weightedTargetsContainer = weightedTargetsContainer {
            weightedTargetsDecoded0 = [AppMeshClientTypes.WeightedTarget]()
            for structure0 in weightedTargetsContainer {
                if let structure0 = structure0 {
                    weightedTargetsDecoded0?.append(structure0)
                }
            }
        }
        weightedTargets = weightedTargetsDecoded0
    }
}

extension AppMeshClientTypes.GrpcRouteAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GrpcRouteAction(weightedTargets: \(Swift.String(describing: weightedTargets)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the action to take if a match is determined.</p>
    public struct GrpcRouteAction: Swift.Equatable {
        /// <p>An object that represents the targets that traffic is routed to when a request matches the route.</p>
        public let weightedTargets: [AppMeshClientTypes.WeightedTarget]?

        public init (
            weightedTargets: [AppMeshClientTypes.WeightedTarget]? = nil
        )
        {
            self.weightedTargets = weightedTargets
        }
    }

}

extension AppMeshClientTypes.GrpcRouteMatch: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadata
        case methodName
        case serviceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metadata = metadata {
            var metadataContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metadata)
            for grpcroutemetadatalist0 in metadata {
                try metadataContainer.encode(grpcroutemetadatalist0)
            }
        }
        if let methodName = methodName {
            try encodeContainer.encode(methodName, forKey: .methodName)
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let methodNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .methodName)
        methodName = methodNameDecoded
        let metadataContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.GrpcRouteMetadata?].self, forKey: .metadata)
        var metadataDecoded0:[AppMeshClientTypes.GrpcRouteMetadata]? = nil
        if let metadataContainer = metadataContainer {
            metadataDecoded0 = [AppMeshClientTypes.GrpcRouteMetadata]()
            for structure0 in metadataContainer {
                if let structure0 = structure0 {
                    metadataDecoded0?.append(structure0)
                }
            }
        }
        metadata = metadataDecoded0
    }
}

extension AppMeshClientTypes.GrpcRouteMatch: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GrpcRouteMatch(metadata: \(Swift.String(describing: metadata)), methodName: \(Swift.String(describing: methodName)), serviceName: \(Swift.String(describing: serviceName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the criteria for determining a request match.</p>
    public struct GrpcRouteMatch: Swift.Equatable {
        /// <p>An object that represents the data to match from the request.</p>
        public let metadata: [AppMeshClientTypes.GrpcRouteMetadata]?
        /// <p>The method name to match from the request. If you specify a name, you must also specify
        ///          a <code>serviceName</code>.</p>
        public let methodName: Swift.String?
        /// <p>The fully qualified domain name for the service to match from the request.</p>
        public let serviceName: Swift.String?

        public init (
            metadata: [AppMeshClientTypes.GrpcRouteMetadata]? = nil,
            methodName: Swift.String? = nil,
            serviceName: Swift.String? = nil
        )
        {
            self.metadata = metadata
            self.methodName = methodName
            self.serviceName = serviceName
        }
    }

}

extension AppMeshClientTypes.GrpcRouteMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invert
        case match
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invert = invert {
            try encodeContainer.encode(invert, forKey: .invert)
        }
        if let match = match {
            try encodeContainer.encode(match, forKey: .match)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let invertDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .invert)
        invert = invertDecoded
        let matchDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GrpcRouteMetadataMatchMethod.self, forKey: .match)
        match = matchDecoded
    }
}

extension AppMeshClientTypes.GrpcRouteMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GrpcRouteMetadata(invert: \(Swift.String(describing: invert)), match: \(Swift.String(describing: match)), name: \(Swift.String(describing: name)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the match metadata for the route.</p>
    public struct GrpcRouteMetadata: Swift.Equatable {
        /// <p>Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>.</p>
        public let invert: Swift.Bool?
        /// <p>An object that represents the data to match from the request.</p>
        public let match: AppMeshClientTypes.GrpcRouteMetadataMatchMethod?
        /// <p>The name of the route.</p>
        public let name: Swift.String?

        public init (
            invert: Swift.Bool? = nil,
            match: AppMeshClientTypes.GrpcRouteMetadataMatchMethod? = nil,
            name: Swift.String? = nil
        )
        {
            self.invert = invert
            self.match = match
            self.name = name
        }
    }

}

extension AppMeshClientTypes.GrpcRouteMetadataMatchMethod: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exact
        case prefix
        case range
        case regex
        case sdkUnknown
        case suffix
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .exact(exact):
                try container.encode(exact, forKey: .exact)
            case let .prefix(prefix):
                try container.encode(prefix, forKey: .prefix)
            case let .range(range):
                try container.encode(range, forKey: .range)
            case let .regex(regex):
                try container.encode(regex, forKey: .regex)
            case let .suffix(suffix):
                try container.encode(suffix, forKey: .suffix)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let exactDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .exact)
        if let exact = exactDecoded {
            self = .exact(exact)
            return
        }
        let regexDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .regex)
        if let regex = regexDecoded {
            self = .regex(regex)
            return
        }
        let rangeDecoded = try values.decodeIfPresent(AppMeshClientTypes.MatchRange.self, forKey: .range)
        if let range = rangeDecoded {
            self = .range(range)
            return
        }
        let prefixDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .prefix)
        if let prefix = prefixDecoded {
            self = .prefix(prefix)
            return
        }
        let suffixDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .suffix)
        if let suffix = suffixDecoded {
            self = .suffix(suffix)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents the match method. Specify one of the match values.</p>
    public enum GrpcRouteMetadataMatchMethod: Swift.Equatable {
        /// <p>The value sent by the client must match the specified value exactly.</p>
        case exact(Swift.String)
        /// <p>The value sent by the client must include the specified characters.</p>
        case regex(Swift.String)
        /// <p>An object that represents the range of values to match on.</p>
        case range(AppMeshClientTypes.MatchRange)
        /// <p>The value sent by the client must begin with the specified characters.</p>
        case prefix(Swift.String)
        /// <p>The value sent by the client must end with the specified characters.</p>
        case suffix(Swift.String)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.GrpcTimeout: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case idle
        case perRequest
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let idle = idle {
            try encodeContainer.encode(idle, forKey: .idle)
        }
        if let perRequest = perRequest {
            try encodeContainer.encode(perRequest, forKey: .perRequest)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let perRequestDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.Duration.self, forKey: .perRequest)
        perRequest = perRequestDecoded
        let idleDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.Duration.self, forKey: .idle)
        idle = idleDecoded
    }
}

extension AppMeshClientTypes.GrpcTimeout: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GrpcTimeout(idle: \(Swift.String(describing: idle)), perRequest: \(Swift.String(describing: perRequest)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents types of timeouts. </p>
    public struct GrpcTimeout: Swift.Equatable {
        /// <p>An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.</p>
        public let idle: AppMeshClientTypes.Duration?
        /// <p>An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh
        ///                                   resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15
        ///                                   seconds for the source and destination virtual node and the route.</p>
        public let perRequest: AppMeshClientTypes.Duration?

        public init (
            idle: AppMeshClientTypes.Duration? = nil,
            perRequest: AppMeshClientTypes.Duration? = nil
        )
        {
            self.idle = idle
            self.perRequest = perRequest
        }
    }

}

extension AppMeshClientTypes.HeaderMatchMethod: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exact
        case prefix
        case range
        case regex
        case sdkUnknown
        case suffix
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .exact(exact):
                try container.encode(exact, forKey: .exact)
            case let .prefix(prefix):
                try container.encode(prefix, forKey: .prefix)
            case let .range(range):
                try container.encode(range, forKey: .range)
            case let .regex(regex):
                try container.encode(regex, forKey: .regex)
            case let .suffix(suffix):
                try container.encode(suffix, forKey: .suffix)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let exactDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .exact)
        if let exact = exactDecoded {
            self = .exact(exact)
            return
        }
        let regexDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .regex)
        if let regex = regexDecoded {
            self = .regex(regex)
            return
        }
        let rangeDecoded = try values.decodeIfPresent(AppMeshClientTypes.MatchRange.self, forKey: .range)
        if let range = rangeDecoded {
            self = .range(range)
            return
        }
        let prefixDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .prefix)
        if let prefix = prefixDecoded {
            self = .prefix(prefix)
            return
        }
        let suffixDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .suffix)
        if let suffix = suffixDecoded {
            self = .suffix(suffix)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents the method and value to match with the header value sent in a
    ///          request. Specify one match method.</p>
    public enum HeaderMatchMethod: Swift.Equatable {
        /// <p>The value sent by the client must match the specified value exactly.</p>
        case exact(Swift.String)
        /// <p>The value sent by the client must include the specified characters.</p>
        case regex(Swift.String)
        /// <p>An object that represents the range of values to match on.</p>
        case range(AppMeshClientTypes.MatchRange)
        /// <p>The value sent by the client must begin with the specified characters.</p>
        case prefix(Swift.String)
        /// <p>The value sent by the client must end with the specified characters.</p>
        case suffix(Swift.String)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.HealthCheckPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthyThreshold
        case intervalMillis
        case path
        case port
        case `protocol` = "protocol"
        case timeoutMillis
        case unhealthyThreshold
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if healthyThreshold != 0 {
            try encodeContainer.encode(healthyThreshold, forKey: .healthyThreshold)
        }
        if let intervalMillis = intervalMillis {
            try encodeContainer.encode(intervalMillis, forKey: .intervalMillis)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let timeoutMillis = timeoutMillis {
            try encodeContainer.encode(timeoutMillis, forKey: .timeoutMillis)
        }
        if unhealthyThreshold != 0 {
            try encodeContainer.encode(unhealthyThreshold, forKey: .unhealthyThreshold)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutMillis)
        timeoutMillis = timeoutMillisDecoded
        let intervalMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .intervalMillis)
        intervalMillis = intervalMillisDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.PortProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let portDecoded = try containerValues.decode(Swift.Int.self, forKey: .port)
        port = portDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let healthyThresholdDecoded = try containerValues.decode(Swift.Int.self, forKey: .healthyThreshold)
        healthyThreshold = healthyThresholdDecoded
        let unhealthyThresholdDecoded = try containerValues.decode(Swift.Int.self, forKey: .unhealthyThreshold)
        unhealthyThreshold = unhealthyThresholdDecoded
    }
}

extension AppMeshClientTypes.HealthCheckPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HealthCheckPolicy(healthyThreshold: \(Swift.String(describing: healthyThreshold)), intervalMillis: \(Swift.String(describing: intervalMillis)), path: \(Swift.String(describing: path)), port: \(Swift.String(describing: port)), protocol: \(Swift.String(describing: `protocol`)), timeoutMillis: \(Swift.String(describing: timeoutMillis)), unhealthyThreshold: \(Swift.String(describing: unhealthyThreshold)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the health check policy for a virtual node's listener.</p>
    public struct HealthCheckPolicy: Swift.Equatable {
        /// <p>The protocol for the health check request. If you specify <code>grpc</code>, then your
        ///          service must conform to the <a href="https://github.com/grpc/grpc/blob/master/doc/health-checking.md">GRPC Health
        ///             Checking Protocol</a>.</p>
        public let `protocol`: AppMeshClientTypes.PortProtocol?
        /// <p>The number of consecutive successful health checks that must occur before declaring
        ///          listener healthy.</p>
        public let healthyThreshold: Swift.Int
        /// <p>The time period in milliseconds between each health check execution.</p>
        public let intervalMillis: Swift.Int?
        /// <p>The destination path for the health check request. This value is only used if the
        ///          specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.</p>
        public let path: Swift.String?
        /// <p>The destination port for the health check request. This port must match the port defined
        ///          in the <a>PortMapping</a> for the listener.</p>
        public let port: Swift.Int
        /// <p>The amount of time to wait when receiving a response from the health check, in
        ///          milliseconds.</p>
        public let timeoutMillis: Swift.Int?
        /// <p>The number of consecutive failed health checks that must occur before declaring a
        ///          virtual node unhealthy. </p>
        public let unhealthyThreshold: Swift.Int

        public init (
            `protocol`: AppMeshClientTypes.PortProtocol? = nil,
            healthyThreshold: Swift.Int = 0,
            intervalMillis: Swift.Int? = nil,
            path: Swift.String? = nil,
            port: Swift.Int = 0,
            timeoutMillis: Swift.Int? = nil,
            unhealthyThreshold: Swift.Int = 0
        )
        {
            self.`protocol` = `protocol`
            self.healthyThreshold = healthyThreshold
            self.intervalMillis = intervalMillis
            self.path = path
            self.port = port
            self.timeoutMillis = timeoutMillis
            self.unhealthyThreshold = unhealthyThreshold
        }
    }

}

extension AppMeshClientTypes.HttpGatewayRoute: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case match
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let match = match {
            try encodeContainer.encode(match, forKey: .match)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpGatewayRouteMatch.self, forKey: .match)
        match = matchDecoded
        let actionDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpGatewayRouteAction.self, forKey: .action)
        action = actionDecoded
    }
}

extension AppMeshClientTypes.HttpGatewayRoute: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpGatewayRoute(action: \(Swift.String(describing: action)), match: \(Swift.String(describing: match)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents an HTTP gateway route.</p>
    public struct HttpGatewayRoute: Swift.Equatable {
        /// <p>An object that represents the action to take if a match is determined.</p>
        public let action: AppMeshClientTypes.HttpGatewayRouteAction?
        /// <p>An object that represents the criteria for determining a request match.</p>
        public let match: AppMeshClientTypes.HttpGatewayRouteMatch?

        public init (
            action: AppMeshClientTypes.HttpGatewayRouteAction? = nil,
            match: AppMeshClientTypes.HttpGatewayRouteMatch? = nil
        )
        {
            self.action = action
            self.match = match
        }
    }

}

extension AppMeshClientTypes.HttpGatewayRouteAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case target
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GatewayRouteTarget.self, forKey: .target)
        target = targetDecoded
    }
}

extension AppMeshClientTypes.HttpGatewayRouteAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpGatewayRouteAction(target: \(Swift.String(describing: target)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the action to take if a match is determined.</p>
    public struct HttpGatewayRouteAction: Swift.Equatable {
        /// <p>An object that represents the target that traffic is routed to when a request matches the gateway route.</p>
        public let target: AppMeshClientTypes.GatewayRouteTarget?

        public init (
            target: AppMeshClientTypes.GatewayRouteTarget? = nil
        )
        {
            self.target = target
        }
    }

}

extension AppMeshClientTypes.HttpGatewayRouteMatch: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case prefix
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
    }
}

extension AppMeshClientTypes.HttpGatewayRouteMatch: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpGatewayRouteMatch(prefix: \(Swift.String(describing: prefix)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the criteria for determining a request match.</p>
    public struct HttpGatewayRouteMatch: Swift.Equatable {
        /// <p>Specifies the path to match requests with. This parameter must always start with
        ///             <code>/</code>, which by itself matches all requests to the virtual service name. You
        ///          can also match for path-based routing of requests. For example, if your virtual service
        ///          name is <code>my-service.local</code> and you want the route to match requests to
        ///             <code>my-service.local/metrics</code>, your prefix should be
        ///          <code>/metrics</code>.</p>
        public let prefix: Swift.String?

        public init (
            prefix: Swift.String? = nil
        )
        {
            self.prefix = prefix
        }
    }

}

extension AppMeshClientTypes {
    public enum HttpMethod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case connect
        case delete
        case `get`
        case head
        case options
        case patch
        case post
        case put
        case trace
        case sdkUnknown(Swift.String)

        public static var allCases: [HttpMethod] {
            return [
                .connect,
                .delete,
                .get,
                .head,
                .options,
                .patch,
                .post,
                .put,
                .trace,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .connect: return "CONNECT"
            case .delete: return "DELETE"
            case .get: return "GET"
            case .head: return "HEAD"
            case .options: return "OPTIONS"
            case .patch: return "PATCH"
            case .post: return "POST"
            case .put: return "PUT"
            case .trace: return "TRACE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HttpMethod(rawValue: rawValue) ?? HttpMethod.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.HttpRetryPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpRetryEvents
        case maxRetries
        case perRetryTimeout
        case tcpRetryEvents
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let httpRetryEvents = httpRetryEvents {
            var httpRetryEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .httpRetryEvents)
            for httpretrypolicyevents0 in httpRetryEvents {
                try httpRetryEventsContainer.encode(httpretrypolicyevents0)
            }
        }
        if let maxRetries = maxRetries {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let perRetryTimeout = perRetryTimeout {
            try encodeContainer.encode(perRetryTimeout, forKey: .perRetryTimeout)
        }
        if let tcpRetryEvents = tcpRetryEvents {
            var tcpRetryEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tcpRetryEvents)
            for tcpretrypolicyevents0 in tcpRetryEvents {
                try tcpRetryEventsContainer.encode(tcpretrypolicyevents0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let perRetryTimeoutDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.Duration.self, forKey: .perRetryTimeout)
        perRetryTimeout = perRetryTimeoutDecoded
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let httpRetryEventsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .httpRetryEvents)
        var httpRetryEventsDecoded0:[Swift.String]? = nil
        if let httpRetryEventsContainer = httpRetryEventsContainer {
            httpRetryEventsDecoded0 = [Swift.String]()
            for string0 in httpRetryEventsContainer {
                if let string0 = string0 {
                    httpRetryEventsDecoded0?.append(string0)
                }
            }
        }
        httpRetryEvents = httpRetryEventsDecoded0
        let tcpRetryEventsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.TcpRetryPolicyEvent?].self, forKey: .tcpRetryEvents)
        var tcpRetryEventsDecoded0:[AppMeshClientTypes.TcpRetryPolicyEvent]? = nil
        if let tcpRetryEventsContainer = tcpRetryEventsContainer {
            tcpRetryEventsDecoded0 = [AppMeshClientTypes.TcpRetryPolicyEvent]()
            for string0 in tcpRetryEventsContainer {
                if let string0 = string0 {
                    tcpRetryEventsDecoded0?.append(string0)
                }
            }
        }
        tcpRetryEvents = tcpRetryEventsDecoded0
    }
}

extension AppMeshClientTypes.HttpRetryPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpRetryPolicy(httpRetryEvents: \(Swift.String(describing: httpRetryEvents)), maxRetries: \(Swift.String(describing: maxRetries)), perRetryTimeout: \(Swift.String(describing: perRetryTimeout)), tcpRetryEvents: \(Swift.String(describing: tcpRetryEvents)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>.</p>
    public struct HttpRetryPolicy: Swift.Equatable {
        /// <p>Specify at least one of the following values.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>server-error</b> – HTTP status codes 500, 501,
        ///                   502, 503, 504, 505, 506, 507, 508, 510, and 511</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>gateway-error</b> – HTTP status codes 502,
        ///                   503, and 504</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>client-error</b> – HTTP status code 409</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>stream-error</b> – Retry on refused
        ///                   stream</p>
        ///             </li>
        ///          </ul>
        public let httpRetryEvents: [Swift.String]?
        /// <p>The maximum number of retry attempts.</p>
        public let maxRetries: Swift.Int?
        /// <p>The timeout for each retry attempt.</p>
        public let perRetryTimeout: AppMeshClientTypes.Duration?
        /// <p>Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.</p>
        public let tcpRetryEvents: [AppMeshClientTypes.TcpRetryPolicyEvent]?

        public init (
            httpRetryEvents: [Swift.String]? = nil,
            maxRetries: Swift.Int? = nil,
            perRetryTimeout: AppMeshClientTypes.Duration? = nil,
            tcpRetryEvents: [AppMeshClientTypes.TcpRetryPolicyEvent]? = nil
        )
        {
            self.httpRetryEvents = httpRetryEvents
            self.maxRetries = maxRetries
            self.perRetryTimeout = perRetryTimeout
            self.tcpRetryEvents = tcpRetryEvents
        }
    }

}

extension AppMeshClientTypes.HttpRoute: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case match
        case retryPolicy
        case timeout
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let match = match {
            try encodeContainer.encode(match, forKey: .match)
        }
        if let retryPolicy = retryPolicy {
            try encodeContainer.encode(retryPolicy, forKey: .retryPolicy)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpRouteMatch.self, forKey: .match)
        match = matchDecoded
        let actionDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpRouteAction.self, forKey: .action)
        action = actionDecoded
        let retryPolicyDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpRetryPolicy.self, forKey: .retryPolicy)
        retryPolicy = retryPolicyDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
    }
}

extension AppMeshClientTypes.HttpRoute: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpRoute(action: \(Swift.String(describing: action)), match: \(Swift.String(describing: match)), retryPolicy: \(Swift.String(describing: retryPolicy)), timeout: \(Swift.String(describing: timeout)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents an HTTP or HTTP/2 route type.</p>
    public struct HttpRoute: Swift.Equatable {
        /// <p>An object that represents the action to take if a match is determined.</p>
        public let action: AppMeshClientTypes.HttpRouteAction?
        /// <p>An object that represents the criteria for determining a request match.</p>
        public let match: AppMeshClientTypes.HttpRouteMatch?
        /// <p>An object that represents a retry policy.</p>
        public let retryPolicy: AppMeshClientTypes.HttpRetryPolicy?
        /// <p>An object that represents types of timeouts. </p>
        public let timeout: AppMeshClientTypes.HttpTimeout?

        public init (
            action: AppMeshClientTypes.HttpRouteAction? = nil,
            match: AppMeshClientTypes.HttpRouteMatch? = nil,
            retryPolicy: AppMeshClientTypes.HttpRetryPolicy? = nil,
            timeout: AppMeshClientTypes.HttpTimeout? = nil
        )
        {
            self.action = action
            self.match = match
            self.retryPolicy = retryPolicy
            self.timeout = timeout
        }
    }

}

extension AppMeshClientTypes.HttpRouteAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case weightedTargets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let weightedTargets = weightedTargets {
            var weightedTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .weightedTargets)
            for weightedtargets0 in weightedTargets {
                try weightedTargetsContainer.encode(weightedtargets0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let weightedTargetsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.WeightedTarget?].self, forKey: .weightedTargets)
        var weightedTargetsDecoded0:[AppMeshClientTypes.WeightedTarget]? = nil
        if let weightedTargetsContainer = weightedTargetsContainer {
            weightedTargetsDecoded0 = [AppMeshClientTypes.WeightedTarget]()
            for structure0 in weightedTargetsContainer {
                if let structure0 = structure0 {
                    weightedTargetsDecoded0?.append(structure0)
                }
            }
        }
        weightedTargets = weightedTargetsDecoded0
    }
}

extension AppMeshClientTypes.HttpRouteAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpRouteAction(weightedTargets: \(Swift.String(describing: weightedTargets)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the action to take if a match is determined.</p>
    public struct HttpRouteAction: Swift.Equatable {
        /// <p>An object that represents the targets that traffic is routed to when a request matches the route.</p>
        public let weightedTargets: [AppMeshClientTypes.WeightedTarget]?

        public init (
            weightedTargets: [AppMeshClientTypes.WeightedTarget]? = nil
        )
        {
            self.weightedTargets = weightedTargets
        }
    }

}

extension AppMeshClientTypes.HttpRouteHeader: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invert
        case match
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invert = invert {
            try encodeContainer.encode(invert, forKey: .invert)
        }
        if let match = match {
            try encodeContainer.encode(match, forKey: .match)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let invertDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .invert)
        invert = invertDecoded
        let matchDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HeaderMatchMethod.self, forKey: .match)
        match = matchDecoded
    }
}

extension AppMeshClientTypes.HttpRouteHeader: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpRouteHeader(invert: \(Swift.String(describing: invert)), match: \(Swift.String(describing: match)), name: \(Swift.String(describing: name)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the HTTP header in the request.</p>
    public struct HttpRouteHeader: Swift.Equatable {
        /// <p>Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>.</p>
        public let invert: Swift.Bool?
        /// <p>The <code>HeaderMatchMethod</code> object.</p>
        public let match: AppMeshClientTypes.HeaderMatchMethod?
        /// <p>A name for the HTTP header in the client request that will be matched on.</p>
        public let name: Swift.String?

        public init (
            invert: Swift.Bool? = nil,
            match: AppMeshClientTypes.HeaderMatchMethod? = nil,
            name: Swift.String? = nil
        )
        {
            self.invert = invert
            self.match = match
            self.name = name
        }
    }

}

extension AppMeshClientTypes.HttpRouteMatch: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case headers
        case method
        case prefix
        case scheme
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let headers = headers {
            var headersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .headers)
            for httprouteheaders0 in headers {
                try headersContainer.encode(httprouteheaders0)
            }
        }
        if let method = method {
            try encodeContainer.encode(method.rawValue, forKey: .method)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
        if let scheme = scheme {
            try encodeContainer.encode(scheme.rawValue, forKey: .scheme)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let methodDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpMethod.self, forKey: .method)
        method = methodDecoded
        let schemeDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpScheme.self, forKey: .scheme)
        scheme = schemeDecoded
        let headersContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.HttpRouteHeader?].self, forKey: .headers)
        var headersDecoded0:[AppMeshClientTypes.HttpRouteHeader]? = nil
        if let headersContainer = headersContainer {
            headersDecoded0 = [AppMeshClientTypes.HttpRouteHeader]()
            for structure0 in headersContainer {
                if let structure0 = structure0 {
                    headersDecoded0?.append(structure0)
                }
            }
        }
        headers = headersDecoded0
    }
}

extension AppMeshClientTypes.HttpRouteMatch: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpRouteMatch(headers: \(Swift.String(describing: headers)), method: \(Swift.String(describing: method)), prefix: \(Swift.String(describing: prefix)), scheme: \(Swift.String(describing: scheme)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the requirements for a route to match HTTP requests for a
    ///          virtual router.</p>
    public struct HttpRouteMatch: Swift.Equatable {
        /// <p>An object that represents the client request headers to match on.</p>
        public let headers: [AppMeshClientTypes.HttpRouteHeader]?
        /// <p>The client request method to match on. Specify only one.</p>
        public let method: AppMeshClientTypes.HttpMethod?
        /// <p>Specifies the path to match requests with. This parameter must always start with
        ///             <code>/</code>, which by itself matches all requests to the virtual service name. You
        ///          can also match for path-based routing of requests. For example, if your virtual service
        ///          name is <code>my-service.local</code> and you want the route to match requests to
        ///             <code>my-service.local/metrics</code>, your prefix should be
        ///          <code>/metrics</code>.</p>
        public let prefix: Swift.String?
        /// <p>The client request scheme to match on. Specify only one.</p>
        public let scheme: AppMeshClientTypes.HttpScheme?

        public init (
            headers: [AppMeshClientTypes.HttpRouteHeader]? = nil,
            method: AppMeshClientTypes.HttpMethod? = nil,
            prefix: Swift.String? = nil,
            scheme: AppMeshClientTypes.HttpScheme? = nil
        )
        {
            self.headers = headers
            self.method = method
            self.prefix = prefix
            self.scheme = scheme
        }
    }

}

extension AppMeshClientTypes {
    public enum HttpScheme: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case http
        case https
        case sdkUnknown(Swift.String)

        public static var allCases: [HttpScheme] {
            return [
                .http,
                .https,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .http: return "http"
            case .https: return "https"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HttpScheme(rawValue: rawValue) ?? HttpScheme.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.HttpTimeout: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case idle
        case perRequest
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let idle = idle {
            try encodeContainer.encode(idle, forKey: .idle)
        }
        if let perRequest = perRequest {
            try encodeContainer.encode(perRequest, forKey: .perRequest)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let perRequestDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.Duration.self, forKey: .perRequest)
        perRequest = perRequestDecoded
        let idleDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.Duration.self, forKey: .idle)
        idle = idleDecoded
    }
}

extension AppMeshClientTypes.HttpTimeout: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpTimeout(idle: \(Swift.String(describing: idle)), perRequest: \(Swift.String(describing: perRequest)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents types of timeouts. </p>
    public struct HttpTimeout: Swift.Equatable {
        /// <p>An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.</p>
        public let idle: AppMeshClientTypes.Duration?
        /// <p>An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh
        ///                                   resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15
        ///                                   seconds for the source and destination virtual node and the route.</p>
        public let perRequest: AppMeshClientTypes.Duration?

        public init (
            idle: AppMeshClientTypes.Duration? = nil,
            perRequest: AppMeshClientTypes.Duration? = nil
        )
        {
            self.idle = idle
            self.perRequest = perRequest
        }
    }

}

extension InternalServerErrorException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServerErrorException(message: \(Swift.String(describing: message)))"}
}

extension InternalServerErrorException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalServerErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request processing has failed because of an unknown error, exception, or
///          failure.</p>
public struct InternalServerErrorException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = true
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerErrorExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalServerErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You have exceeded a service limit for your account. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html">Service
///             Limits</a> in the <i>AWS App Mesh User Guide</i>.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListGatewayRoutesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListGatewayRoutesInput(limit: \(Swift.String(describing: limit)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), nextToken: \(Swift.String(describing: nextToken)), virtualGatewayName: \(Swift.String(describing: virtualGatewayName)))"}
}

extension ListGatewayRoutesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListGatewayRoutesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListGatewayRoutesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListGatewayRoutesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListGatewayRoutesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListGatewayRoutesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListGatewayRoutesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListGatewayRoutesOutputError>
}

public struct ListGatewayRoutesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListGatewayRoutesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListGatewayRoutesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListGatewayRoutesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let limit = input.operationInput.limit {
            let limitQueryItem = ClientRuntime.URLQueryItem(name: "limit".urlPercentEncoding(), value: Swift.String(limit).urlPercentEncoding())
            input.builder.withQueryItem(limitQueryItem)
        }
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListGatewayRoutesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListGatewayRoutesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListGatewayRoutesOutputError>
}

public struct ListGatewayRoutesInput: Swift.Equatable {
    /// <p>The maximum number of results returned by <code>ListGatewayRoutes</code> in paginated
    ///          output. When you use this parameter, <code>ListGatewayRoutes</code> returns only
    ///             <code>limit</code> results in a single page along with a <code>nextToken</code> response
    ///          element. You can see the remaining results of the initial request by sending another
    ///             <code>ListGatewayRoutes</code> request with the returned <code>nextToken</code> value.
    ///          This value can be between 1 and 100. If you don't use this
    ///          parameter, <code>ListGatewayRoutes</code> returns up to 100 results and a
    ///             <code>nextToken</code> value if applicable.</p>
    public let limit: Swift.Int?
    /// <p>The name of the service mesh to list gateway routes in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///             <code>ListGatewayRoutes</code> request where <code>limit</code> was used and the results
    ///          exceeded the value of that parameter. Pagination continues from the end of the previous
    ///          results that returned the <code>nextToken</code> value.</p>
    public let nextToken: Swift.String?
    /// <p>The name of the virtual gateway to list gateway routes in.</p>
    public let virtualGatewayName: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        virtualGatewayName: Swift.String? = nil
    )
    {
        self.limit = limit
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.nextToken = nextToken
        self.virtualGatewayName = virtualGatewayName
    }
}

struct ListGatewayRoutesInputBody: Swift.Equatable {
}

extension ListGatewayRoutesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListGatewayRoutesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGatewayRoutesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListGatewayRoutesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGatewayRoutesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListGatewayRoutesOutputResponse(gatewayRoutes: \(Swift.String(describing: gatewayRoutes)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListGatewayRoutesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListGatewayRoutesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gatewayRoutes = output.gatewayRoutes
            self.nextToken = output.nextToken
        } else {
            self.gatewayRoutes = nil
            self.nextToken = nil
        }
    }
}

public struct ListGatewayRoutesOutputResponse: Swift.Equatable {
    /// <p>The list of existing gateway routes for the specified service mesh and virtual
    ///          gateway.</p>
    public let gatewayRoutes: [AppMeshClientTypes.GatewayRouteRef]?
    /// <p>The <code>nextToken</code> value to include in a future <code>ListGatewayRoutes</code>
    ///          request. When the results of a <code>ListGatewayRoutes</code> request exceed
    ///             <code>limit</code>, you can use this value to retrieve the next page of results. This
    ///          value is <code>null</code> when there are no more results to return.</p>
    public let nextToken: Swift.String?

    public init (
        gatewayRoutes: [AppMeshClientTypes.GatewayRouteRef]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gatewayRoutes = gatewayRoutes
        self.nextToken = nextToken
    }
}

struct ListGatewayRoutesOutputResponseBody: Swift.Equatable {
    public let gatewayRoutes: [AppMeshClientTypes.GatewayRouteRef]?
    public let nextToken: Swift.String?
}

extension ListGatewayRoutesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gatewayRoutes
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayRoutesContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.GatewayRouteRef?].self, forKey: .gatewayRoutes)
        var gatewayRoutesDecoded0:[AppMeshClientTypes.GatewayRouteRef]? = nil
        if let gatewayRoutesContainer = gatewayRoutesContainer {
            gatewayRoutesDecoded0 = [AppMeshClientTypes.GatewayRouteRef]()
            for structure0 in gatewayRoutesContainer {
                if let structure0 = structure0 {
                    gatewayRoutesDecoded0?.append(structure0)
                }
            }
        }
        gatewayRoutes = gatewayRoutesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMeshesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMeshesInput(limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListMeshesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListMeshesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMeshesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMeshesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMeshesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMeshesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMeshesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMeshesOutputError>
}

public struct ListMeshesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMeshesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMeshesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMeshesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let limit = input.operationInput.limit {
            let limitQueryItem = ClientRuntime.URLQueryItem(name: "limit".urlPercentEncoding(), value: Swift.String(limit).urlPercentEncoding())
            input.builder.withQueryItem(limitQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMeshesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMeshesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMeshesOutputError>
}

///
public struct ListMeshesInput: Swift.Equatable {
    /// <p>The maximum number of results returned by <code>ListMeshes</code> in paginated output.
    ///          When you use this parameter, <code>ListMeshes</code> returns only <code>limit</code>
    ///          results in a single page along with a <code>nextToken</code> response element. You can see
    ///          the remaining results of the initial request by sending another <code>ListMeshes</code>
    ///          request with the returned <code>nextToken</code> value. This value can be between
    ///          1 and 100. If you don't use this parameter,
    ///             <code>ListMeshes</code> returns up to 100 results and a
    ///             <code>nextToken</code> value if applicable.</p>
    public let limit: Swift.Int?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///             <code>ListMeshes</code> request where <code>limit</code> was used and the results
    ///          exceeded the value of that parameter. Pagination continues from the end of the previous
    ///          results that returned the <code>nextToken</code> value.</p>
    ///          <note>
    ///             <p>This token should be treated as an opaque identifier that is used only to
    ///                 retrieve the next items in a list and not for other programmatic purposes.</p>
    ///         </note>
    public let nextToken: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct ListMeshesInputBody: Swift.Equatable {
}

extension ListMeshesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListMeshesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMeshesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMeshesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMeshesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMeshesOutputResponse(meshes: \(Swift.String(describing: meshes)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListMeshesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListMeshesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.meshes = output.meshes
            self.nextToken = output.nextToken
        } else {
            self.meshes = nil
            self.nextToken = nil
        }
    }
}

///
public struct ListMeshesOutputResponse: Swift.Equatable {
    /// <p>The list of existing service meshes.</p>
    public let meshes: [AppMeshClientTypes.MeshRef]?
    /// <p>The <code>nextToken</code> value to include in a future <code>ListMeshes</code> request.
    ///          When the results of a <code>ListMeshes</code> request exceed <code>limit</code>, you can
    ///          use this value to retrieve the next page of results. This value is <code>null</code> when
    ///          there are no more results to return.</p>
    public let nextToken: Swift.String?

    public init (
        meshes: [AppMeshClientTypes.MeshRef]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.meshes = meshes
        self.nextToken = nextToken
    }
}

struct ListMeshesOutputResponseBody: Swift.Equatable {
    public let meshes: [AppMeshClientTypes.MeshRef]?
    public let nextToken: Swift.String?
}

extension ListMeshesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case meshes
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshesContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.MeshRef?].self, forKey: .meshes)
        var meshesDecoded0:[AppMeshClientTypes.MeshRef]? = nil
        if let meshesContainer = meshesContainer {
            meshesDecoded0 = [AppMeshClientTypes.MeshRef]()
            for structure0 in meshesContainer {
                if let structure0 = structure0 {
                    meshesDecoded0?.append(structure0)
                }
            }
        }
        meshes = meshesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListRoutesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRoutesInput(limit: \(Swift.String(describing: limit)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), nextToken: \(Swift.String(describing: nextToken)), virtualRouterName: \(Swift.String(describing: virtualRouterName)))"}
}

extension ListRoutesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListRoutesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRoutesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRoutesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRoutesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRoutesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRoutesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRoutesOutputError>
}

public struct ListRoutesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRoutesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRoutesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRoutesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let limit = input.operationInput.limit {
            let limitQueryItem = ClientRuntime.URLQueryItem(name: "limit".urlPercentEncoding(), value: Swift.String(limit).urlPercentEncoding())
            input.builder.withQueryItem(limitQueryItem)
        }
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRoutesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRoutesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRoutesOutputError>
}

///
public struct ListRoutesInput: Swift.Equatable {
    /// <p>The maximum number of results returned by <code>ListRoutes</code> in paginated output.
    ///          When you use this parameter, <code>ListRoutes</code> returns only <code>limit</code>
    ///          results in a single page along with a <code>nextToken</code> response element. You can see
    ///          the remaining results of the initial request by sending another <code>ListRoutes</code>
    ///          request with the returned <code>nextToken</code> value. This value can be between
    ///          1 and 100. If you don't use this parameter,
    ///             <code>ListRoutes</code> returns up to 100 results and a
    ///             <code>nextToken</code> value if applicable.</p>
    public let limit: Swift.Int?
    /// <p>The name of the service mesh to list routes in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///             <code>ListRoutes</code> request where <code>limit</code> was used and the results
    ///          exceeded the value of that parameter. Pagination continues from the end of the previous
    ///          results that returned the <code>nextToken</code> value.</p>
    public let nextToken: Swift.String?
    /// <p>The name of the virtual router to list routes in.</p>
    public let virtualRouterName: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        virtualRouterName: Swift.String? = nil
    )
    {
        self.limit = limit
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.nextToken = nextToken
        self.virtualRouterName = virtualRouterName
    }
}

struct ListRoutesInputBody: Swift.Equatable {
}

extension ListRoutesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListRoutesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRoutesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListRoutesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRoutesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRoutesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), routes: \(Swift.String(describing: routes)))"}
}

extension ListRoutesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListRoutesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.routes = output.routes
        } else {
            self.nextToken = nil
            self.routes = nil
        }
    }
}

///
public struct ListRoutesOutputResponse: Swift.Equatable {
    /// <p>The <code>nextToken</code> value to include in a future <code>ListRoutes</code> request.
    ///          When the results of a <code>ListRoutes</code> request exceed <code>limit</code>, you can
    ///          use this value to retrieve the next page of results. This value is <code>null</code> when
    ///          there are no more results to return.</p>
    public let nextToken: Swift.String?
    /// <p>The list of existing routes for the specified service mesh and virtual router.</p>
    public let routes: [AppMeshClientTypes.RouteRef]?

    public init (
        nextToken: Swift.String? = nil,
        routes: [AppMeshClientTypes.RouteRef]? = nil
    )
    {
        self.nextToken = nextToken
        self.routes = routes
    }
}

struct ListRoutesOutputResponseBody: Swift.Equatable {
    public let routes: [AppMeshClientTypes.RouteRef]?
    public let nextToken: Swift.String?
}

extension ListRoutesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case routes
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routesContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.RouteRef?].self, forKey: .routes)
        var routesDecoded0:[AppMeshClientTypes.RouteRef]? = nil
        if let routesContainer = routesContainer {
            routesDecoded0 = [AppMeshClientTypes.RouteRef]()
            for structure0 in routesContainer {
                if let structure0 = structure0 {
                    routesDecoded0?.append(structure0)
                }
            }
        }
        routes = routesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let limit = input.operationInput.limit {
            let limitQueryItem = ClientRuntime.URLQueryItem(name: "limit".urlPercentEncoding(), value: Swift.String(limit).urlPercentEncoding())
            input.builder.withQueryItem(limitQueryItem)
        }
        if let resourceArn = input.operationInput.resourceArn {
            let resourceArnQueryItem = ClientRuntime.URLQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
            input.builder.withQueryItem(resourceArnQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

///
public struct ListTagsForResourceInput: Swift.Equatable {
    /// <p>The maximum number of tag results returned by <code>ListTagsForResource</code> in
    ///          paginated output. When this parameter is used, <code>ListTagsForResource</code> returns
    ///          only <code>limit</code> results in a single page along with a <code>nextToken</code>
    ///          response element. You can see the remaining results of the initial request by sending
    ///          another <code>ListTagsForResource</code> request with the returned <code>nextToken</code>
    ///          value. This value can be between 1 and 100. If you don't use
    ///          this parameter, <code>ListTagsForResource</code> returns up to 100
    ///          results and a <code>nextToken</code> value if applicable.</p>
    public let limit: Swift.Int?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///             <code>ListTagsForResource</code> request where <code>limit</code> was used and the
    ///          results exceeded the value of that parameter. Pagination continues from the end of the
    ///          previous results that returned the <code>nextToken</code> value.</p>
    public let nextToken: Swift.String?
    /// <p>The Amazon Resource Name (ARN) that identifies the resource to list the tags for.</p>
    public let resourceArn: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(nextToken: \(Swift.String(describing: nextToken)), tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

///
public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// <p>The <code>nextToken</code> value to include in a future <code>ListTagsForResource</code>
    ///          request. When the results of a <code>ListTagsForResource</code> request exceed
    ///             <code>limit</code>, you can use this value to retrieve the next page of results. This
    ///          value is <code>null</code> when there are no more results to return.</p>
    public let nextToken: Swift.String?
    /// <p>The tags for the resource.</p>
    public let tags: [AppMeshClientTypes.TagRef]?

    public init (
        nextToken: Swift.String? = nil,
        tags: [AppMeshClientTypes.TagRef]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let tags: [AppMeshClientTypes.TagRef]?
    public let nextToken: Swift.String?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.TagRef?].self, forKey: .tags)
        var tagsDecoded0:[AppMeshClientTypes.TagRef]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AppMeshClientTypes.TagRef]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListVirtualGatewaysInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVirtualGatewaysInput(limit: \(Swift.String(describing: limit)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListVirtualGatewaysInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListVirtualGatewaysInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVirtualGatewaysInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVirtualGatewaysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVirtualGatewaysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVirtualGatewaysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVirtualGatewaysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVirtualGatewaysOutputError>
}

public struct ListVirtualGatewaysInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVirtualGatewaysInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVirtualGatewaysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVirtualGatewaysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let limit = input.operationInput.limit {
            let limitQueryItem = ClientRuntime.URLQueryItem(name: "limit".urlPercentEncoding(), value: Swift.String(limit).urlPercentEncoding())
            input.builder.withQueryItem(limitQueryItem)
        }
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVirtualGatewaysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVirtualGatewaysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVirtualGatewaysOutputError>
}

public struct ListVirtualGatewaysInput: Swift.Equatable {
    /// <p>The maximum number of results returned by <code>ListVirtualGateways</code> in paginated
    ///          output. When you use this parameter, <code>ListVirtualGateways</code> returns only
    ///             <code>limit</code> results in a single page along with a <code>nextToken</code> response
    ///          element. You can see the remaining results of the initial request by sending another
    ///             <code>ListVirtualGateways</code> request with the returned <code>nextToken</code> value.
    ///          This value can be between 1 and 100. If you don't use this
    ///          parameter, <code>ListVirtualGateways</code> returns up to 100 results and
    ///          a <code>nextToken</code> value if applicable.</p>
    public let limit: Swift.Int?
    /// <p>The name of the service mesh to list virtual gateways in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///             <code>ListVirtualGateways</code> request where <code>limit</code> was used and the
    ///          results exceeded the value of that parameter. Pagination continues from the end of the
    ///          previous results that returned the <code>nextToken</code> value.</p>
    public let nextToken: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.nextToken = nextToken
    }
}

struct ListVirtualGatewaysInputBody: Swift.Equatable {
}

extension ListVirtualGatewaysInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListVirtualGatewaysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVirtualGatewaysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListVirtualGatewaysOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVirtualGatewaysOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVirtualGatewaysOutputResponse(nextToken: \(Swift.String(describing: nextToken)), virtualGateways: \(Swift.String(describing: virtualGateways)))"}
}

extension ListVirtualGatewaysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListVirtualGatewaysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.virtualGateways = output.virtualGateways
        } else {
            self.nextToken = nil
            self.virtualGateways = nil
        }
    }
}

public struct ListVirtualGatewaysOutputResponse: Swift.Equatable {
    /// <p>The <code>nextToken</code> value to include in a future <code>ListVirtualGateways</code>
    ///          request. When the results of a <code>ListVirtualGateways</code> request exceed
    ///             <code>limit</code>, you can use this value to retrieve the next page of results. This
    ///          value is <code>null</code> when there are no more results to return.</p>
    public let nextToken: Swift.String?
    /// <p>The list of existing virtual gateways for the specified service mesh.</p>
    public let virtualGateways: [AppMeshClientTypes.VirtualGatewayRef]?

    public init (
        nextToken: Swift.String? = nil,
        virtualGateways: [AppMeshClientTypes.VirtualGatewayRef]? = nil
    )
    {
        self.nextToken = nextToken
        self.virtualGateways = virtualGateways
    }
}

struct ListVirtualGatewaysOutputResponseBody: Swift.Equatable {
    public let virtualGateways: [AppMeshClientTypes.VirtualGatewayRef]?
    public let nextToken: Swift.String?
}

extension ListVirtualGatewaysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case virtualGateways
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualGatewaysContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.VirtualGatewayRef?].self, forKey: .virtualGateways)
        var virtualGatewaysDecoded0:[AppMeshClientTypes.VirtualGatewayRef]? = nil
        if let virtualGatewaysContainer = virtualGatewaysContainer {
            virtualGatewaysDecoded0 = [AppMeshClientTypes.VirtualGatewayRef]()
            for structure0 in virtualGatewaysContainer {
                if let structure0 = structure0 {
                    virtualGatewaysDecoded0?.append(structure0)
                }
            }
        }
        virtualGateways = virtualGatewaysDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListVirtualNodesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVirtualNodesInput(limit: \(Swift.String(describing: limit)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListVirtualNodesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListVirtualNodesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVirtualNodesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVirtualNodesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVirtualNodesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVirtualNodesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVirtualNodesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVirtualNodesOutputError>
}

public struct ListVirtualNodesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVirtualNodesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVirtualNodesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVirtualNodesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let limit = input.operationInput.limit {
            let limitQueryItem = ClientRuntime.URLQueryItem(name: "limit".urlPercentEncoding(), value: Swift.String(limit).urlPercentEncoding())
            input.builder.withQueryItem(limitQueryItem)
        }
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVirtualNodesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVirtualNodesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVirtualNodesOutputError>
}

///
public struct ListVirtualNodesInput: Swift.Equatable {
    /// <p>The maximum number of results returned by <code>ListVirtualNodes</code> in paginated
    ///          output. When you use this parameter, <code>ListVirtualNodes</code> returns only
    ///             <code>limit</code> results in a single page along with a <code>nextToken</code> response
    ///          element. You can see the remaining results of the initial request by sending another
    ///             <code>ListVirtualNodes</code> request with the returned <code>nextToken</code> value.
    ///          This value can be between 1 and 100. If you don't use this
    ///          parameter, <code>ListVirtualNodes</code> returns up to 100 results and a
    ///             <code>nextToken</code> value if applicable.</p>
    public let limit: Swift.Int?
    /// <p>The name of the service mesh to list virtual nodes in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///             <code>ListVirtualNodes</code> request where <code>limit</code> was used and the results
    ///          exceeded the value of that parameter. Pagination continues from the end of the previous
    ///          results that returned the <code>nextToken</code> value.</p>
    public let nextToken: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.nextToken = nextToken
    }
}

struct ListVirtualNodesInputBody: Swift.Equatable {
}

extension ListVirtualNodesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListVirtualNodesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVirtualNodesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListVirtualNodesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVirtualNodesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVirtualNodesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), virtualNodes: \(Swift.String(describing: virtualNodes)))"}
}

extension ListVirtualNodesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListVirtualNodesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.virtualNodes = output.virtualNodes
        } else {
            self.nextToken = nil
            self.virtualNodes = nil
        }
    }
}

///
public struct ListVirtualNodesOutputResponse: Swift.Equatable {
    /// <p>The <code>nextToken</code> value to include in a future <code>ListVirtualNodes</code>
    ///          request. When the results of a <code>ListVirtualNodes</code> request exceed
    ///             <code>limit</code>, you can use this value to retrieve the next page of results. This
    ///          value is <code>null</code> when there are no more results to return.</p>
    public let nextToken: Swift.String?
    /// <p>The list of existing virtual nodes for the specified service mesh.</p>
    public let virtualNodes: [AppMeshClientTypes.VirtualNodeRef]?

    public init (
        nextToken: Swift.String? = nil,
        virtualNodes: [AppMeshClientTypes.VirtualNodeRef]? = nil
    )
    {
        self.nextToken = nextToken
        self.virtualNodes = virtualNodes
    }
}

struct ListVirtualNodesOutputResponseBody: Swift.Equatable {
    public let virtualNodes: [AppMeshClientTypes.VirtualNodeRef]?
    public let nextToken: Swift.String?
}

extension ListVirtualNodesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case virtualNodes
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualNodesContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.VirtualNodeRef?].self, forKey: .virtualNodes)
        var virtualNodesDecoded0:[AppMeshClientTypes.VirtualNodeRef]? = nil
        if let virtualNodesContainer = virtualNodesContainer {
            virtualNodesDecoded0 = [AppMeshClientTypes.VirtualNodeRef]()
            for structure0 in virtualNodesContainer {
                if let structure0 = structure0 {
                    virtualNodesDecoded0?.append(structure0)
                }
            }
        }
        virtualNodes = virtualNodesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListVirtualRoutersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVirtualRoutersInput(limit: \(Swift.String(describing: limit)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListVirtualRoutersInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListVirtualRoutersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVirtualRoutersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVirtualRoutersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVirtualRoutersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVirtualRoutersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVirtualRoutersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVirtualRoutersOutputError>
}

public struct ListVirtualRoutersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVirtualRoutersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVirtualRoutersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVirtualRoutersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let limit = input.operationInput.limit {
            let limitQueryItem = ClientRuntime.URLQueryItem(name: "limit".urlPercentEncoding(), value: Swift.String(limit).urlPercentEncoding())
            input.builder.withQueryItem(limitQueryItem)
        }
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVirtualRoutersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVirtualRoutersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVirtualRoutersOutputError>
}

///
public struct ListVirtualRoutersInput: Swift.Equatable {
    /// <p>The maximum number of results returned by <code>ListVirtualRouters</code> in paginated
    ///          output. When you use this parameter, <code>ListVirtualRouters</code> returns only
    ///             <code>limit</code> results in a single page along with a <code>nextToken</code> response
    ///          element. You can see the remaining results of the initial request by sending another
    ///             <code>ListVirtualRouters</code> request with the returned <code>nextToken</code> value.
    ///          This value can be between 1 and 100. If you don't use this
    ///          parameter, <code>ListVirtualRouters</code> returns up to 100 results and
    ///          a <code>nextToken</code> value if applicable.</p>
    public let limit: Swift.Int?
    /// <p>The name of the service mesh to list virtual routers in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///             <code>ListVirtualRouters</code> request where <code>limit</code> was used and the
    ///          results exceeded the value of that parameter. Pagination continues from the end of the
    ///          previous results that returned the <code>nextToken</code> value.</p>
    public let nextToken: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.nextToken = nextToken
    }
}

struct ListVirtualRoutersInputBody: Swift.Equatable {
}

extension ListVirtualRoutersInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListVirtualRoutersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVirtualRoutersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListVirtualRoutersOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVirtualRoutersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVirtualRoutersOutputResponse(nextToken: \(Swift.String(describing: nextToken)), virtualRouters: \(Swift.String(describing: virtualRouters)))"}
}

extension ListVirtualRoutersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListVirtualRoutersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.virtualRouters = output.virtualRouters
        } else {
            self.nextToken = nil
            self.virtualRouters = nil
        }
    }
}

///
public struct ListVirtualRoutersOutputResponse: Swift.Equatable {
    /// <p>The <code>nextToken</code> value to include in a future <code>ListVirtualRouters</code>
    ///          request. When the results of a <code>ListVirtualRouters</code> request exceed
    ///             <code>limit</code>, you can use this value to retrieve the next page of results. This
    ///          value is <code>null</code> when there are no more results to return.</p>
    public let nextToken: Swift.String?
    /// <p>The list of existing virtual routers for the specified service mesh.</p>
    public let virtualRouters: [AppMeshClientTypes.VirtualRouterRef]?

    public init (
        nextToken: Swift.String? = nil,
        virtualRouters: [AppMeshClientTypes.VirtualRouterRef]? = nil
    )
    {
        self.nextToken = nextToken
        self.virtualRouters = virtualRouters
    }
}

struct ListVirtualRoutersOutputResponseBody: Swift.Equatable {
    public let virtualRouters: [AppMeshClientTypes.VirtualRouterRef]?
    public let nextToken: Swift.String?
}

extension ListVirtualRoutersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case virtualRouters
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualRoutersContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.VirtualRouterRef?].self, forKey: .virtualRouters)
        var virtualRoutersDecoded0:[AppMeshClientTypes.VirtualRouterRef]? = nil
        if let virtualRoutersContainer = virtualRoutersContainer {
            virtualRoutersDecoded0 = [AppMeshClientTypes.VirtualRouterRef]()
            for structure0 in virtualRoutersContainer {
                if let structure0 = structure0 {
                    virtualRoutersDecoded0?.append(structure0)
                }
            }
        }
        virtualRouters = virtualRoutersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListVirtualServicesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVirtualServicesInput(limit: \(Swift.String(describing: limit)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListVirtualServicesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListVirtualServicesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVirtualServicesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVirtualServicesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVirtualServicesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVirtualServicesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVirtualServicesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVirtualServicesOutputError>
}

public struct ListVirtualServicesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVirtualServicesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVirtualServicesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVirtualServicesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let limit = input.operationInput.limit {
            let limitQueryItem = ClientRuntime.URLQueryItem(name: "limit".urlPercentEncoding(), value: Swift.String(limit).urlPercentEncoding())
            input.builder.withQueryItem(limitQueryItem)
        }
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVirtualServicesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVirtualServicesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVirtualServicesOutputError>
}

///
public struct ListVirtualServicesInput: Swift.Equatable {
    /// <p>The maximum number of results returned by <code>ListVirtualServices</code> in paginated
    ///          output. When you use this parameter, <code>ListVirtualServices</code> returns only
    ///             <code>limit</code> results in a single page along with a <code>nextToken</code> response
    ///          element. You can see the remaining results of the initial request by sending another
    ///             <code>ListVirtualServices</code> request with the returned <code>nextToken</code> value.
    ///          This value can be between 1 and 100. If you don't use this
    ///          parameter, <code>ListVirtualServices</code> returns up to 100 results and
    ///          a <code>nextToken</code> value if applicable.</p>
    public let limit: Swift.Int?
    /// <p>The name of the service mesh to list virtual services in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The <code>nextToken</code> value returned from a previous paginated
    ///             <code>ListVirtualServices</code> request where <code>limit</code> was used and the
    ///          results exceeded the value of that parameter. Pagination continues from the end of the
    ///          previous results that returned the <code>nextToken</code> value.</p>
    public let nextToken: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.nextToken = nextToken
    }
}

struct ListVirtualServicesInputBody: Swift.Equatable {
}

extension ListVirtualServicesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListVirtualServicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVirtualServicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListVirtualServicesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVirtualServicesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVirtualServicesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), virtualServices: \(Swift.String(describing: virtualServices)))"}
}

extension ListVirtualServicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListVirtualServicesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.virtualServices = output.virtualServices
        } else {
            self.nextToken = nil
            self.virtualServices = nil
        }
    }
}

///
public struct ListVirtualServicesOutputResponse: Swift.Equatable {
    /// <p>The <code>nextToken</code> value to include in a future <code>ListVirtualServices</code>
    ///          request. When the results of a <code>ListVirtualServices</code> request exceed
    ///             <code>limit</code>, you can use this value to retrieve the next page of results. This
    ///          value is <code>null</code> when there are no more results to return.</p>
    public let nextToken: Swift.String?
    /// <p>The list of existing virtual services for the specified service mesh.</p>
    public let virtualServices: [AppMeshClientTypes.VirtualServiceRef]?

    public init (
        nextToken: Swift.String? = nil,
        virtualServices: [AppMeshClientTypes.VirtualServiceRef]? = nil
    )
    {
        self.nextToken = nextToken
        self.virtualServices = virtualServices
    }
}

struct ListVirtualServicesOutputResponseBody: Swift.Equatable {
    public let virtualServices: [AppMeshClientTypes.VirtualServiceRef]?
    public let nextToken: Swift.String?
}

extension ListVirtualServicesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case virtualServices
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualServicesContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.VirtualServiceRef?].self, forKey: .virtualServices)
        var virtualServicesDecoded0:[AppMeshClientTypes.VirtualServiceRef]? = nil
        if let virtualServicesContainer = virtualServicesContainer {
            virtualServicesDecoded0 = [AppMeshClientTypes.VirtualServiceRef]()
            for structure0 in virtualServicesContainer {
                if let structure0 = structure0 {
                    virtualServicesDecoded0?.append(structure0)
                }
            }
        }
        virtualServices = virtualServicesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension AppMeshClientTypes.Listener: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionPool
        case healthCheck
        case outlierDetection
        case portMapping
        case timeout
        case tls
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionPool = connectionPool {
            try encodeContainer.encode(connectionPool, forKey: .connectionPool)
        }
        if let healthCheck = healthCheck {
            try encodeContainer.encode(healthCheck, forKey: .healthCheck)
        }
        if let outlierDetection = outlierDetection {
            try encodeContainer.encode(outlierDetection, forKey: .outlierDetection)
        }
        if let portMapping = portMapping {
            try encodeContainer.encode(portMapping, forKey: .portMapping)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let tls = tls {
            try encodeContainer.encode(tls, forKey: .tls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portMappingDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.PortMapping.self, forKey: .portMapping)
        portMapping = portMappingDecoded
        let tlsDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ListenerTls.self, forKey: .tls)
        tls = tlsDecoded
        let healthCheckDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HealthCheckPolicy.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ListenerTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
        let outlierDetectionDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.OutlierDetection.self, forKey: .outlierDetection)
        outlierDetection = outlierDetectionDecoded
        let connectionPoolDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualNodeConnectionPool.self, forKey: .connectionPool)
        connectionPool = connectionPoolDecoded
    }
}

extension AppMeshClientTypes.Listener: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Listener(connectionPool: \(Swift.String(describing: connectionPool)), healthCheck: \(Swift.String(describing: healthCheck)), outlierDetection: \(Swift.String(describing: outlierDetection)), portMapping: \(Swift.String(describing: portMapping)), timeout: \(Swift.String(describing: timeout)), tls: \(Swift.String(describing: tls)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a listener for a virtual node.</p>
    public struct Listener: Swift.Equatable {
        /// <p>The connection pool information for the listener.</p>
        public let connectionPool: AppMeshClientTypes.VirtualNodeConnectionPool?
        /// <p>The health check information for the listener.</p>
        public let healthCheck: AppMeshClientTypes.HealthCheckPolicy?
        /// <p>The outlier detection information for the listener.</p>
        public let outlierDetection: AppMeshClientTypes.OutlierDetection?
        /// <p>The port mapping information for the listener.</p>
        public let portMapping: AppMeshClientTypes.PortMapping?
        /// <p>An object that represents timeouts for different protocols.</p>
        public let timeout: AppMeshClientTypes.ListenerTimeout?
        /// <p>A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.</p>
        public let tls: AppMeshClientTypes.ListenerTls?

        public init (
            connectionPool: AppMeshClientTypes.VirtualNodeConnectionPool? = nil,
            healthCheck: AppMeshClientTypes.HealthCheckPolicy? = nil,
            outlierDetection: AppMeshClientTypes.OutlierDetection? = nil,
            portMapping: AppMeshClientTypes.PortMapping? = nil,
            timeout: AppMeshClientTypes.ListenerTimeout? = nil,
            tls: AppMeshClientTypes.ListenerTls? = nil
        )
        {
            self.connectionPool = connectionPool
            self.healthCheck = healthCheck
            self.outlierDetection = outlierDetection
            self.portMapping = portMapping
            self.timeout = timeout
            self.tls = tls
        }
    }

}

extension AppMeshClientTypes.ListenerTimeout: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grpc
        case http
        case http2
        case sdkUnknown
        case tcp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .grpc(grpc):
                try container.encode(grpc, forKey: .grpc)
            case let .http(http):
                try container.encode(http, forKey: .http)
            case let .http2(http2):
                try container.encode(http2, forKey: .http2)
            case let .tcp(tcp):
                try container.encode(tcp, forKey: .tcp)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let tcpDecoded = try values.decodeIfPresent(AppMeshClientTypes.TcpTimeout.self, forKey: .tcp)
        if let tcp = tcpDecoded {
            self = .tcp(tcp)
            return
        }
        let httpDecoded = try values.decodeIfPresent(AppMeshClientTypes.HttpTimeout.self, forKey: .http)
        if let http = httpDecoded {
            self = .http(http)
            return
        }
        let http2Decoded = try values.decodeIfPresent(AppMeshClientTypes.HttpTimeout.self, forKey: .http2)
        if let http2 = http2Decoded {
            self = .http2(http2)
            return
        }
        let grpcDecoded = try values.decodeIfPresent(AppMeshClientTypes.GrpcTimeout.self, forKey: .grpc)
        if let grpc = grpcDecoded {
            self = .grpc(grpc)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents timeouts for different protocols.</p>
    public enum ListenerTimeout: Swift.Equatable {
        /// <p>An object that represents types of timeouts. </p>
        case tcp(AppMeshClientTypes.TcpTimeout)
        /// <p>An object that represents types of timeouts. </p>
        case http(AppMeshClientTypes.HttpTimeout)
        /// <p>An object that represents types of timeouts. </p>
        case http2(AppMeshClientTypes.HttpTimeout)
        /// <p>An object that represents types of timeouts. </p>
        case grpc(AppMeshClientTypes.GrpcTimeout)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.ListenerTls: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate
        case mode
        case validation
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificate = certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let mode = mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let validation = validation {
            try encodeContainer.encode(validation, forKey: .validation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modeDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ListenerTlsMode.self, forKey: .mode)
        mode = modeDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ListenerTlsCertificate.self, forKey: .certificate)
        certificate = certificateDecoded
        let validationDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ListenerTlsValidationContext.self, forKey: .validation)
        validation = validationDecoded
    }
}

extension AppMeshClientTypes.ListenerTls: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListenerTls(certificate: \(Swift.String(describing: certificate)), mode: \(Swift.String(describing: mode)), validation: \(Swift.String(describing: validation)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the Transport Layer Security (TLS) properties for a listener.</p>
    public struct ListenerTls: Swift.Equatable {
        /// <p>A reference to an object that represents a listener's Transport Layer Security (TLS) certificate.</p>
        public let certificate: AppMeshClientTypes.ListenerTlsCertificate?
        /// <p>Specify one of the following modes.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b/>STRICT – Listener only accepts connections with TLS
        ///                enabled. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b/>PERMISSIVE – Listener accepts connections with or
        ///                without TLS enabled.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b/>DISABLED – Listener only accepts connections without
        ///                TLS. </p>
        ///             </li>
        ///          </ul>
        public let mode: AppMeshClientTypes.ListenerTlsMode?
        /// <p>A reference to an object that represents a listener's Transport Layer Security (TLS) validation context.</p>
        public let validation: AppMeshClientTypes.ListenerTlsValidationContext?

        public init (
            certificate: AppMeshClientTypes.ListenerTlsCertificate? = nil,
            mode: AppMeshClientTypes.ListenerTlsMode? = nil,
            validation: AppMeshClientTypes.ListenerTlsValidationContext? = nil
        )
        {
            self.certificate = certificate
            self.mode = mode
            self.validation = validation
        }
    }

}

extension AppMeshClientTypes.ListenerTlsAcmCertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
    }
}

extension AppMeshClientTypes.ListenerTlsAcmCertificate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListenerTlsAcmCertificate(certificateArn: \(Swift.String(describing: certificateArn)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents an AWS Certicate Manager (ACM) certificate.</p>
    public struct ListenerTlsAcmCertificate: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.</p>
        public let certificateArn: Swift.String?

        public init (
            certificateArn: Swift.String? = nil
        )
        {
            self.certificateArn = certificateArn
        }
    }

}

extension AppMeshClientTypes.ListenerTlsCertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acm
        case file
        case sdkUnknown
        case sds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .acm(acm):
                try container.encode(acm, forKey: .acm)
            case let .file(file):
                try container.encode(file, forKey: .file)
            case let .sds(sds):
                try container.encode(sds, forKey: .sds)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let acmDecoded = try values.decodeIfPresent(AppMeshClientTypes.ListenerTlsAcmCertificate.self, forKey: .acm)
        if let acm = acmDecoded {
            self = .acm(acm)
            return
        }
        let fileDecoded = try values.decodeIfPresent(AppMeshClientTypes.ListenerTlsFileCertificate.self, forKey: .file)
        if let file = fileDecoded {
            self = .file(file)
            return
        }
        let sdsDecoded = try values.decodeIfPresent(AppMeshClientTypes.ListenerTlsSdsCertificate.self, forKey: .sds)
        if let sds = sdsDecoded {
            self = .sds(sds)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents a listener's Transport Layer Security (TLS) certificate.</p>
    public enum ListenerTlsCertificate: Swift.Equatable {
        /// <p>A reference to an object that represents an AWS Certicate Manager (ACM) certificate.</p>
        case acm(AppMeshClientTypes.ListenerTlsAcmCertificate)
        /// <p>A reference to an object that represents a local file certificate.</p>
        case file(AppMeshClientTypes.ListenerTlsFileCertificate)
        /// <p>A reference to an object that represents a listener's Secret Discovery Service
        ///          certificate.</p>
        case sds(AppMeshClientTypes.ListenerTlsSdsCertificate)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.ListenerTlsFileCertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateChain
        case privateKey
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateChain = certificateChain {
            try encodeContainer.encode(certificateChain, forKey: .certificateChain)
        }
        if let privateKey = privateKey {
            try encodeContainer.encode(privateKey, forKey: .privateKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateChainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateChain)
        certificateChain = certificateChainDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
    }
}

extension AppMeshClientTypes.ListenerTlsFileCertificate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListenerTlsFileCertificate(certificateChain: \(Swift.String(describing: certificateChain)), privateKey: \(Swift.String(describing: privateKey)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a local file certificate.
    ///          The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.</p>
    public struct ListenerTlsFileCertificate: Swift.Equatable {
        /// <p>The certificate chain for the certificate.</p>
        public let certificateChain: Swift.String?
        /// <p>The private key for a certificate stored on the file system of the virtual node that the
        ///          proxy is running on.</p>
        public let privateKey: Swift.String?

        public init (
            certificateChain: Swift.String? = nil,
            privateKey: Swift.String? = nil
        )
        {
            self.certificateChain = certificateChain
            self.privateKey = privateKey
        }
    }

}

extension AppMeshClientTypes {
    public enum ListenerTlsMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case permissive
        case strict
        case sdkUnknown(Swift.String)

        public static var allCases: [ListenerTlsMode] {
            return [
                .disabled,
                .permissive,
                .strict,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .permissive: return "PERMISSIVE"
            case .strict: return "STRICT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ListenerTlsMode(rawValue: rawValue) ?? ListenerTlsMode.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.ListenerTlsSdsCertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case secretName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let secretName = secretName {
            try encodeContainer.encode(secretName, forKey: .secretName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let secretNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretName)
        secretName = secretNameDecoded
    }
}

extension AppMeshClientTypes.ListenerTlsSdsCertificate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListenerTlsSdsCertificate(secretName: \(Swift.String(describing: secretName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the listener's Secret Discovery Service certificate. The proxy
    ///          must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS
    ///             documentation</a> for more info.</p>
    public struct ListenerTlsSdsCertificate: Swift.Equatable {
        /// <p>A reference to an object that represents the name of the secret requested from the
        ///          Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or
        ///          certificate chain.</p>
        public let secretName: Swift.String?

        public init (
            secretName: Swift.String? = nil
        )
        {
            self.secretName = secretName
        }
    }

}

extension AppMeshClientTypes.ListenerTlsValidationContext: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subjectAlternativeNames
        case trust
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let subjectAlternativeNames = subjectAlternativeNames {
            try encodeContainer.encode(subjectAlternativeNames, forKey: .subjectAlternativeNames)
        }
        if let trust = trust {
            try encodeContainer.encode(trust, forKey: .trust)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trustDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ListenerTlsValidationContextTrust.self, forKey: .trust)
        trust = trustDecoded
        let subjectAlternativeNamesDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.SubjectAlternativeNames.self, forKey: .subjectAlternativeNames)
        subjectAlternativeNames = subjectAlternativeNamesDecoded
    }
}

extension AppMeshClientTypes.ListenerTlsValidationContext: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListenerTlsValidationContext(subjectAlternativeNames: \(Swift.String(describing: subjectAlternativeNames)), trust: \(Swift.String(describing: trust)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a listener's Transport Layer Security (TLS) validation context.</p>
    public struct ListenerTlsValidationContext: Swift.Equatable {
        /// <p>A reference to an object that represents the SANs for a listener's Transport Layer Security (TLS) validation
        ///          context.</p>
        public let subjectAlternativeNames: AppMeshClientTypes.SubjectAlternativeNames?
        /// <p>A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS)
        ///          certificate.</p>
        public let trust: AppMeshClientTypes.ListenerTlsValidationContextTrust?

        public init (
            subjectAlternativeNames: AppMeshClientTypes.SubjectAlternativeNames? = nil,
            trust: AppMeshClientTypes.ListenerTlsValidationContextTrust? = nil
        )
        {
            self.subjectAlternativeNames = subjectAlternativeNames
            self.trust = trust
        }
    }

}

extension AppMeshClientTypes.ListenerTlsValidationContextTrust: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case file
        case sdkUnknown
        case sds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .file(file):
                try container.encode(file, forKey: .file)
            case let .sds(sds):
                try container.encode(sds, forKey: .sds)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let fileDecoded = try values.decodeIfPresent(AppMeshClientTypes.TlsValidationContextFileTrust.self, forKey: .file)
        if let file = fileDecoded {
            self = .file(file)
            return
        }
        let sdsDecoded = try values.decodeIfPresent(AppMeshClientTypes.TlsValidationContextSdsTrust.self, forKey: .sds)
        if let sds = sdsDecoded {
            self = .sds(sds)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents a listener's Transport Layer Security (TLS) validation context trust.</p>
    public enum ListenerTlsValidationContextTrust: Swift.Equatable {
        /// <p>An object that represents a Transport Layer Security (TLS) validation context trust for a local file.</p>
        case file(AppMeshClientTypes.TlsValidationContextFileTrust)
        /// <p>A reference to an object that represents a listener's Transport Layer Security (TLS) Secret Discovery Service
        ///          validation context trust.</p>
        case sds(AppMeshClientTypes.TlsValidationContextSdsTrust)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.Logging: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessLog
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessLog = accessLog {
            try encodeContainer.encode(accessLog, forKey: .accessLog)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessLogDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.AccessLog.self, forKey: .accessLog)
        accessLog = accessLogDecoded
    }
}

extension AppMeshClientTypes.Logging: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Logging(accessLog: \(Swift.String(describing: accessLog)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the logging information for a virtual node.</p>
    public struct Logging: Swift.Equatable {
        /// <p>The access log configuration for a virtual node.</p>
        public let accessLog: AppMeshClientTypes.AccessLog?

        public init (
            accessLog: AppMeshClientTypes.AccessLog? = nil
        )
        {
            self.accessLog = accessLog
        }
    }

}

extension AppMeshClientTypes.MatchRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case end
        case start
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let end = end {
            try encodeContainer.encode(end, forKey: .end)
        }
        if let start = start {
            try encodeContainer.encode(start, forKey: .start)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .start)
        start = startDecoded
        let endDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .end)
        end = endDecoded
    }
}

extension AppMeshClientTypes.MatchRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MatchRange(end: \(Swift.String(describing: end)), start: \(Swift.String(describing: start)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.</p>
    public struct MatchRange: Swift.Equatable {
        /// <p>The end of the range.</p>
        public let end: Swift.Int?
        /// <p>The start of the range.</p>
        public let start: Swift.Int?

        public init (
            end: Swift.Int? = nil,
            start: Swift.Int? = nil
        )
        {
            self.end = end
            self.start = start
        }
    }

}

extension AppMeshClientTypes.MeshData: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case meshName
        case metadata
        case spec
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let metadata = metadata {
            try encodeContainer.encode(metadata, forKey: .metadata)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.MeshSpec.self, forKey: .spec)
        spec = specDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ResourceMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.MeshStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension AppMeshClientTypes.MeshData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MeshData(meshName: \(Swift.String(describing: meshName)), metadata: \(Swift.String(describing: metadata)), spec: \(Swift.String(describing: spec)), status: \(Swift.String(describing: status)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a service mesh returned by a describe operation.</p>
    public struct MeshData: Swift.Equatable {
        /// <p>The name of the service mesh.</p>
        public let meshName: Swift.String?
        /// <p>The associated metadata for the service mesh.</p>
        public let metadata: AppMeshClientTypes.ResourceMetadata?
        /// <p>The associated specification for the service mesh.</p>
        public let spec: AppMeshClientTypes.MeshSpec?
        /// <p>The status of the service mesh.</p>
        public let status: AppMeshClientTypes.MeshStatus?

        public init (
            meshName: Swift.String? = nil,
            metadata: AppMeshClientTypes.ResourceMetadata? = nil,
            spec: AppMeshClientTypes.MeshSpec? = nil,
            status: AppMeshClientTypes.MeshStatus? = nil
        )
        {
            self.meshName = meshName
            self.metadata = metadata
            self.spec = spec
            self.status = status
        }
    }

}

extension AppMeshClientTypes.MeshRef: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case lastUpdatedAt
        case meshName
        case meshOwner
        case resourceOwner
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let meshOwner = meshOwner {
            try encodeContainer.encode(meshOwner, forKey: .meshOwner)
        }
        if let resourceOwner = resourceOwner {
            try encodeContainer.encode(resourceOwner, forKey: .resourceOwner)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let meshOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshOwner)
        meshOwner = meshOwnerDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
    }
}

extension AppMeshClientTypes.MeshRef: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MeshRef(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), resourceOwner: \(Swift.String(describing: resourceOwner)), version: \(Swift.String(describing: version)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a service mesh returned by a list operation.</p>
    public struct MeshRef: Swift.Equatable {
        /// <p>The full Amazon Resource Name (ARN) of the service mesh.</p>
        public let arn: Swift.String?
        /// <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The Unix epoch timestamp in seconds for when the resource was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The name of the service mesh.</p>
        public let meshName: Swift.String?
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let meshOwner: Swift.String?
        /// <p>The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's
        ///                the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let resourceOwner: Swift.String?
        /// <p>The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.</p>
        public let version: Swift.Int?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            meshName: Swift.String? = nil,
            meshOwner: Swift.String? = nil,
            resourceOwner: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.lastUpdatedAt = lastUpdatedAt
            self.meshName = meshName
            self.meshOwner = meshOwner
            self.resourceOwner = resourceOwner
            self.version = version
        }
    }

}

extension AppMeshClientTypes.MeshSpec: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case egressFilter
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let egressFilter = egressFilter {
            try encodeContainer.encode(egressFilter, forKey: .egressFilter)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let egressFilterDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.EgressFilter.self, forKey: .egressFilter)
        egressFilter = egressFilterDecoded
    }
}

extension AppMeshClientTypes.MeshSpec: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MeshSpec(egressFilter: \(Swift.String(describing: egressFilter)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the specification of a service mesh.</p>
    public struct MeshSpec: Swift.Equatable {
        /// <p>The egress filter rules for the service mesh.</p>
        public let egressFilter: AppMeshClientTypes.EgressFilter?

        public init (
            egressFilter: AppMeshClientTypes.EgressFilter? = nil
        )
        {
            self.egressFilter = egressFilter
        }
    }

}

extension AppMeshClientTypes.MeshStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.MeshStatusCode.self, forKey: .status)
        status = statusDecoded
    }
}

extension AppMeshClientTypes.MeshStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MeshStatus(status: \(Swift.String(describing: status)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the status of a service mesh.</p>
    public struct MeshStatus: Swift.Equatable {
        /// <p>The current mesh status.</p>
        public let status: AppMeshClientTypes.MeshStatusCode?

        public init (
            status: AppMeshClientTypes.MeshStatusCode? = nil
        )
        {
            self.status = status
        }
    }

}

extension AppMeshClientTypes {
    public enum MeshStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleted
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [MeshStatusCode] {
            return [
                .active,
                .deleted,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MeshStatusCode(rawValue: rawValue) ?? MeshStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension NotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotFoundException(message: \(Swift.String(describing: message)))"}
}

extension NotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified resource doesn't exist. Check your request syntax and try again.</p>
public struct NotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AppMeshClientTypes.OutlierDetection: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseEjectionDuration
        case interval
        case maxEjectionPercent
        case maxServerErrors
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseEjectionDuration = baseEjectionDuration {
            try encodeContainer.encode(baseEjectionDuration, forKey: .baseEjectionDuration)
        }
        if let interval = interval {
            try encodeContainer.encode(interval, forKey: .interval)
        }
        if let maxEjectionPercent = maxEjectionPercent {
            try encodeContainer.encode(maxEjectionPercent, forKey: .maxEjectionPercent)
        }
        if let maxServerErrors = maxServerErrors {
            try encodeContainer.encode(maxServerErrors, forKey: .maxServerErrors)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxServerErrorsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxServerErrors)
        maxServerErrors = maxServerErrorsDecoded
        let intervalDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.Duration.self, forKey: .interval)
        interval = intervalDecoded
        let baseEjectionDurationDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.Duration.self, forKey: .baseEjectionDuration)
        baseEjectionDuration = baseEjectionDurationDecoded
        let maxEjectionPercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxEjectionPercent)
        maxEjectionPercent = maxEjectionPercentDecoded
    }
}

extension AppMeshClientTypes.OutlierDetection: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OutlierDetection(baseEjectionDuration: \(Swift.String(describing: baseEjectionDuration)), interval: \(Swift.String(describing: interval)), maxEjectionPercent: \(Swift.String(describing: maxEjectionPercent)), maxServerErrors: \(Swift.String(describing: maxServerErrors)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the outlier detection for a virtual node's listener.</p>
    public struct OutlierDetection: Swift.Equatable {
        /// <p>The base amount of time for which a host is ejected.</p>
        public let baseEjectionDuration: AppMeshClientTypes.Duration?
        /// <p>The time interval between ejection sweep analysis.</p>
        public let interval: AppMeshClientTypes.Duration?
        /// <p>Maximum percentage of hosts in load balancing pool for upstream service that can be
        ///          ejected. Will eject at least one host regardless of the value.</p>
        public let maxEjectionPercent: Swift.Int?
        /// <p>Number of consecutive <code>5xx</code> errors required for ejection. </p>
        public let maxServerErrors: Swift.Int?

        public init (
            baseEjectionDuration: AppMeshClientTypes.Duration? = nil,
            interval: AppMeshClientTypes.Duration? = nil,
            maxEjectionPercent: Swift.Int? = nil,
            maxServerErrors: Swift.Int? = nil
        )
        {
            self.baseEjectionDuration = baseEjectionDuration
            self.interval = interval
            self.maxEjectionPercent = maxEjectionPercent
            self.maxServerErrors = maxServerErrors
        }
    }

}

extension AppMeshClientTypes.PortMapping: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case port
        case `protocol` = "protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portDecoded = try containerValues.decode(Swift.Int.self, forKey: .port)
        port = portDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.PortProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}

extension AppMeshClientTypes.PortMapping: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PortMapping(port: \(Swift.String(describing: port)), protocol: \(Swift.String(describing: `protocol`)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a port mapping.</p>
    public struct PortMapping: Swift.Equatable {
        /// <p>The protocol used for the port mapping. Specify one protocol.</p>
        public let `protocol`: AppMeshClientTypes.PortProtocol?
        /// <p>The port used for the port mapping.</p>
        public let port: Swift.Int

        public init (
            `protocol`: AppMeshClientTypes.PortProtocol? = nil,
            port: Swift.Int = 0
        )
        {
            self.`protocol` = `protocol`
            self.port = port
        }
    }

}

extension AppMeshClientTypes {
    public enum PortProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case grpc
        case http
        case http2
        case tcp
        case sdkUnknown(Swift.String)

        public static var allCases: [PortProtocol] {
            return [
                .grpc,
                .http,
                .http2,
                .tcp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .grpc: return "grpc"
            case .http: return "http"
            case .http2: return "http2"
            case .tcp: return "tcp"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PortProtocol(rawValue: rawValue) ?? PortProtocol.sdkUnknown(rawValue)
        }
    }
}

extension ResourceInUseException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceInUseException(message: \(Swift.String(describing: message)))"}
}

extension ResourceInUseException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You can't delete the specified resource because it's in use or required by another
///          resource.</p>
public struct ResourceInUseException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceInUseExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AppMeshClientTypes.ResourceMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case lastUpdatedAt
        case meshOwner
        case resourceOwner
        case uid
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let meshOwner = meshOwner {
            try encodeContainer.encode(meshOwner, forKey: .meshOwner)
        }
        if let resourceOwner = resourceOwner {
            try encodeContainer.encode(resourceOwner, forKey: .resourceOwner)
        }
        if let uid = uid {
            try encodeContainer.encode(uid, forKey: .uid)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let uidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uid)
        uid = uidDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let meshOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshOwner)
        meshOwner = meshOwnerDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
    }
}

extension AppMeshClientTypes.ResourceMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceMetadata(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), meshOwner: \(Swift.String(describing: meshOwner)), resourceOwner: \(Swift.String(describing: resourceOwner)), uid: \(Swift.String(describing: uid)), version: \(Swift.String(describing: version)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents metadata for a resource.</p>
    public struct ResourceMetadata: Swift.Equatable {
        /// <p>The full Amazon Resource Name (ARN) for the resource.</p>
        public let arn: Swift.String?
        /// <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The Unix epoch timestamp in seconds for when the resource was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let meshOwner: Swift.String?
        /// <p>The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's
        ///                the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let resourceOwner: Swift.String?
        /// <p>The unique identifier for the resource.</p>
        public let uid: Swift.String?
        /// <p>The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.</p>
        public let version: Swift.Int?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            meshOwner: Swift.String? = nil,
            resourceOwner: Swift.String? = nil,
            uid: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.lastUpdatedAt = lastUpdatedAt
            self.meshOwner = meshOwner
            self.resourceOwner = resourceOwner
            self.uid = uid
            self.version = version
        }
    }

}

extension AppMeshClientTypes.RouteData: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case meshName
        case metadata
        case routeName
        case spec
        case status
        case virtualRouterName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let metadata = metadata {
            try encodeContainer.encode(metadata, forKey: .metadata)
        }
        if let routeName = routeName {
            try encodeContainer.encode(routeName, forKey: .routeName)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let virtualRouterName = virtualRouterName {
            try encodeContainer.encode(virtualRouterName, forKey: .virtualRouterName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let virtualRouterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualRouterName)
        virtualRouterName = virtualRouterNameDecoded
        let routeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routeName)
        routeName = routeNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.RouteSpec.self, forKey: .spec)
        spec = specDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ResourceMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.RouteStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension AppMeshClientTypes.RouteData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RouteData(meshName: \(Swift.String(describing: meshName)), metadata: \(Swift.String(describing: metadata)), routeName: \(Swift.String(describing: routeName)), spec: \(Swift.String(describing: spec)), status: \(Swift.String(describing: status)), virtualRouterName: \(Swift.String(describing: virtualRouterName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a route returned by a describe operation.</p>
    public struct RouteData: Swift.Equatable {
        /// <p>The name of the service mesh that the route resides in.</p>
        public let meshName: Swift.String?
        /// <p>The associated metadata for the route.</p>
        public let metadata: AppMeshClientTypes.ResourceMetadata?
        /// <p>The name of the route.</p>
        public let routeName: Swift.String?
        /// <p>The specifications of the route.</p>
        public let spec: AppMeshClientTypes.RouteSpec?
        /// <p>The status of the route.</p>
        public let status: AppMeshClientTypes.RouteStatus?
        /// <p>The virtual router that the route is associated with.</p>
        public let virtualRouterName: Swift.String?

        public init (
            meshName: Swift.String? = nil,
            metadata: AppMeshClientTypes.ResourceMetadata? = nil,
            routeName: Swift.String? = nil,
            spec: AppMeshClientTypes.RouteSpec? = nil,
            status: AppMeshClientTypes.RouteStatus? = nil,
            virtualRouterName: Swift.String? = nil
        )
        {
            self.meshName = meshName
            self.metadata = metadata
            self.routeName = routeName
            self.spec = spec
            self.status = status
            self.virtualRouterName = virtualRouterName
        }
    }

}

extension AppMeshClientTypes.RouteRef: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case lastUpdatedAt
        case meshName
        case meshOwner
        case resourceOwner
        case routeName
        case version
        case virtualRouterName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let meshOwner = meshOwner {
            try encodeContainer.encode(meshOwner, forKey: .meshOwner)
        }
        if let resourceOwner = resourceOwner {
            try encodeContainer.encode(resourceOwner, forKey: .resourceOwner)
        }
        if let routeName = routeName {
            try encodeContainer.encode(routeName, forKey: .routeName)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let virtualRouterName = virtualRouterName {
            try encodeContainer.encode(virtualRouterName, forKey: .virtualRouterName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let virtualRouterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualRouterName)
        virtualRouterName = virtualRouterNameDecoded
        let routeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routeName)
        routeName = routeNameDecoded
        let meshOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshOwner)
        meshOwner = meshOwnerDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
    }
}

extension AppMeshClientTypes.RouteRef: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RouteRef(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), resourceOwner: \(Swift.String(describing: resourceOwner)), routeName: \(Swift.String(describing: routeName)), version: \(Swift.String(describing: version)), virtualRouterName: \(Swift.String(describing: virtualRouterName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a route returned by a list operation.</p>
    public struct RouteRef: Swift.Equatable {
        /// <p>The full Amazon Resource Name (ARN) for the route.</p>
        public let arn: Swift.String?
        /// <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The Unix epoch timestamp in seconds for when the resource was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The name of the service mesh that the route resides in.</p>
        public let meshName: Swift.String?
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let meshOwner: Swift.String?
        /// <p>The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's
        ///                the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let resourceOwner: Swift.String?
        /// <p>The name of the route.</p>
        public let routeName: Swift.String?
        /// <p>The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.</p>
        public let version: Swift.Int?
        /// <p>The virtual router that the route is associated with.</p>
        public let virtualRouterName: Swift.String?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            meshName: Swift.String? = nil,
            meshOwner: Swift.String? = nil,
            resourceOwner: Swift.String? = nil,
            routeName: Swift.String? = nil,
            version: Swift.Int? = nil,
            virtualRouterName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.lastUpdatedAt = lastUpdatedAt
            self.meshName = meshName
            self.meshOwner = meshOwner
            self.resourceOwner = resourceOwner
            self.routeName = routeName
            self.version = version
            self.virtualRouterName = virtualRouterName
        }
    }

}

extension AppMeshClientTypes.RouteSpec: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grpcRoute
        case http2Route
        case httpRoute
        case priority
        case tcpRoute
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grpcRoute = grpcRoute {
            try encodeContainer.encode(grpcRoute, forKey: .grpcRoute)
        }
        if let http2Route = http2Route {
            try encodeContainer.encode(http2Route, forKey: .http2Route)
        }
        if let httpRoute = httpRoute {
            try encodeContainer.encode(httpRoute, forKey: .httpRoute)
        }
        if let priority = priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let tcpRoute = tcpRoute {
            try encodeContainer.encode(tcpRoute, forKey: .tcpRoute)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let httpRouteDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpRoute.self, forKey: .httpRoute)
        httpRoute = httpRouteDecoded
        let tcpRouteDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.TcpRoute.self, forKey: .tcpRoute)
        tcpRoute = tcpRouteDecoded
        let http2RouteDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpRoute.self, forKey: .http2Route)
        http2Route = http2RouteDecoded
        let grpcRouteDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GrpcRoute.self, forKey: .grpcRoute)
        grpcRoute = grpcRouteDecoded
    }
}

extension AppMeshClientTypes.RouteSpec: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RouteSpec(grpcRoute: \(Swift.String(describing: grpcRoute)), http2Route: \(Swift.String(describing: http2Route)), httpRoute: \(Swift.String(describing: httpRoute)), priority: \(Swift.String(describing: priority)), tcpRoute: \(Swift.String(describing: tcpRoute)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a route specification. Specify one route type.</p>
    public struct RouteSpec: Swift.Equatable {
        /// <p>An object that represents the specification of a gRPC route.</p>
        public let grpcRoute: AppMeshClientTypes.GrpcRoute?
        /// <p>An object that represents the specification of an HTTP/2 route.</p>
        public let http2Route: AppMeshClientTypes.HttpRoute?
        /// <p>An object that represents the specification of an HTTP route.</p>
        public let httpRoute: AppMeshClientTypes.HttpRoute?
        /// <p>The priority for the route. Routes are matched based on the specified value, where 0 is
        ///          the highest priority.</p>
        public let priority: Swift.Int?
        /// <p>An object that represents the specification of a TCP route.</p>
        public let tcpRoute: AppMeshClientTypes.TcpRoute?

        public init (
            grpcRoute: AppMeshClientTypes.GrpcRoute? = nil,
            http2Route: AppMeshClientTypes.HttpRoute? = nil,
            httpRoute: AppMeshClientTypes.HttpRoute? = nil,
            priority: Swift.Int? = nil,
            tcpRoute: AppMeshClientTypes.TcpRoute? = nil
        )
        {
            self.grpcRoute = grpcRoute
            self.http2Route = http2Route
            self.httpRoute = httpRoute
            self.priority = priority
            self.tcpRoute = tcpRoute
        }
    }

}

extension AppMeshClientTypes.RouteStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.RouteStatusCode.self, forKey: .status)
        status = statusDecoded
    }
}

extension AppMeshClientTypes.RouteStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RouteStatus(status: \(Swift.String(describing: status)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the current status of a route.</p>
    public struct RouteStatus: Swift.Equatable {
        /// <p>The current status for the route.</p>
        public let status: AppMeshClientTypes.RouteStatusCode?

        public init (
            status: AppMeshClientTypes.RouteStatusCode? = nil
        )
        {
            self.status = status
        }
    }

}

extension AppMeshClientTypes {
    public enum RouteStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleted
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [RouteStatusCode] {
            return [
                .active,
                .deleted,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RouteStatusCode(rawValue: rawValue) ?? RouteStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.ServiceDiscovery: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awscloudmap = "awsCloudMap"
        case dns
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .awscloudmap(awscloudmap):
                try container.encode(awscloudmap, forKey: .awscloudmap)
            case let .dns(dns):
                try container.encode(dns, forKey: .dns)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let dnsDecoded = try values.decodeIfPresent(AppMeshClientTypes.DnsServiceDiscovery.self, forKey: .dns)
        if let dns = dnsDecoded {
            self = .dns(dns)
            return
        }
        let awscloudmapDecoded = try values.decodeIfPresent(AppMeshClientTypes.AwsCloudMapServiceDiscovery.self, forKey: .awscloudmap)
        if let awscloudmap = awscloudmapDecoded {
            self = .awscloudmap(awscloudmap)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents the service discovery information for a virtual node.</p>
    public enum ServiceDiscovery: Swift.Equatable {
        /// <p>Specifies the DNS information for the virtual node.</p>
        case dns(AppMeshClientTypes.DnsServiceDiscovery)
        /// <p>Specifies any AWS Cloud Map information for the virtual node.</p>
        case awscloudmap(AppMeshClientTypes.AwsCloudMapServiceDiscovery)
        case sdkUnknown(Swift.String)
    }

}

extension ServiceUnavailableException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceUnavailableException(message: \(Swift.String(describing: message)))"}
}

extension ServiceUnavailableException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request has failed due to a temporary failure of the service.</p>
public struct ServiceUnavailableException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = true
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceUnavailableExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ServiceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AppMeshClientTypes.SubjectAlternativeNameMatchers: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exact
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exact = exact {
            var exactContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exact)
            for subjectalternativenamelist0 in exact {
                try exactContainer.encode(subjectalternativenamelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exactContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exact)
        var exactDecoded0:[Swift.String]? = nil
        if let exactContainer = exactContainer {
            exactDecoded0 = [Swift.String]()
            for string0 in exactContainer {
                if let string0 = string0 {
                    exactDecoded0?.append(string0)
                }
            }
        }
        exact = exactDecoded0
    }
}

extension AppMeshClientTypes.SubjectAlternativeNameMatchers: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SubjectAlternativeNameMatchers(exact: \(Swift.String(describing: exact)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the methods by which a subject alternative name on a peer
    ///          Transport Layer Security (TLS) certificate can be matched.</p>
    public struct SubjectAlternativeNameMatchers: Swift.Equatable {
        /// <p>The values sent must match the specified values exactly.</p>
        public let exact: [Swift.String]?

        public init (
            exact: [Swift.String]? = nil
        )
        {
            self.exact = exact
        }
    }

}

extension AppMeshClientTypes.SubjectAlternativeNames: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case match
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let match = match {
            try encodeContainer.encode(match, forKey: .match)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.SubjectAlternativeNameMatchers.self, forKey: .match)
        match = matchDecoded
    }
}

extension AppMeshClientTypes.SubjectAlternativeNames: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SubjectAlternativeNames(match: \(Swift.String(describing: match)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the subject alternative names secured by the
    ///          certificate.</p>
    public struct SubjectAlternativeNames: Swift.Equatable {
        /// <p>An object that represents the criteria for determining a SANs match.</p>
        public let match: AppMeshClientTypes.SubjectAlternativeNameMatchers?

        public init (
            match: AppMeshClientTypes.SubjectAlternativeNameMatchers? = nil
        )
        {
            self.match = match
        }
    }

}

extension AppMeshClientTypes.TagRef: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension AppMeshClientTypes.TagRef: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagRef(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension AppMeshClientTypes {
    /// <p>Optional metadata that you apply to a resource to assist with categorization and
    ///          organization. Each tag consists of a key and an optional value, both of which you define.
    ///          Tag keys can have a maximum character length of 128 characters, and tag values can have
    ///             a maximum length of 256 characters.</p>
    public struct TagRef: Swift.Equatable {
        /// <p>One part of a key-value pair that make up a tag. A <code>key</code> is a general label
        ///          that acts like a category for more specific tag values.</p>
        public let key: Swift.String?
        /// <p>The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a
        ///          descriptor within a tag category (key).</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let resourceArn = input.operationInput.resourceArn {
            let resourceArnQueryItem = ClientRuntime.URLQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
            input.builder.withQueryItem(resourceArnQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

///
public struct TagResourceInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource to add tags to.</p>
    public let resourceArn: Swift.String?
    /// <p>The tags to add to the resource. A tag is an array of key-value pairs.
    ///          Tag keys can have a maximum character length of 128 characters, and tag values can have
    ///             a maximum length of 256 characters.</p>
    public let tags: [AppMeshClientTypes.TagRef]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [AppMeshClientTypes.TagRef]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let tags: [AppMeshClientTypes.TagRef]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.TagRef?].self, forKey: .tags)
        var tagsDecoded0:[AppMeshClientTypes.TagRef]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AppMeshClientTypes.TagRef]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

///
public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AppMeshClientTypes {
    public enum TcpRetryPolicyEvent: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case connectionError
        case sdkUnknown(Swift.String)

        public static var allCases: [TcpRetryPolicyEvent] {
            return [
                .connectionError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .connectionError: return "connection-error"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TcpRetryPolicyEvent(rawValue: rawValue) ?? TcpRetryPolicyEvent.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.TcpRoute: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case timeout
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.TcpRouteAction.self, forKey: .action)
        action = actionDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.TcpTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
    }
}

extension AppMeshClientTypes.TcpRoute: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TcpRoute(action: \(Swift.String(describing: action)), timeout: \(Swift.String(describing: timeout)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a TCP route type.</p>
    public struct TcpRoute: Swift.Equatable {
        /// <p>The action to take if a match is determined.</p>
        public let action: AppMeshClientTypes.TcpRouteAction?
        /// <p>An object that represents types of timeouts. </p>
        public let timeout: AppMeshClientTypes.TcpTimeout?

        public init (
            action: AppMeshClientTypes.TcpRouteAction? = nil,
            timeout: AppMeshClientTypes.TcpTimeout? = nil
        )
        {
            self.action = action
            self.timeout = timeout
        }
    }

}

extension AppMeshClientTypes.TcpRouteAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case weightedTargets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let weightedTargets = weightedTargets {
            var weightedTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .weightedTargets)
            for weightedtargets0 in weightedTargets {
                try weightedTargetsContainer.encode(weightedtargets0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let weightedTargetsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.WeightedTarget?].self, forKey: .weightedTargets)
        var weightedTargetsDecoded0:[AppMeshClientTypes.WeightedTarget]? = nil
        if let weightedTargetsContainer = weightedTargetsContainer {
            weightedTargetsDecoded0 = [AppMeshClientTypes.WeightedTarget]()
            for structure0 in weightedTargetsContainer {
                if let structure0 = structure0 {
                    weightedTargetsDecoded0?.append(structure0)
                }
            }
        }
        weightedTargets = weightedTargetsDecoded0
    }
}

extension AppMeshClientTypes.TcpRouteAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TcpRouteAction(weightedTargets: \(Swift.String(describing: weightedTargets)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the action to take if a match is determined.</p>
    public struct TcpRouteAction: Swift.Equatable {
        /// <p>An object that represents the targets that traffic is routed to when a request matches the route.</p>
        public let weightedTargets: [AppMeshClientTypes.WeightedTarget]?

        public init (
            weightedTargets: [AppMeshClientTypes.WeightedTarget]? = nil
        )
        {
            self.weightedTargets = weightedTargets
        }
    }

}

extension AppMeshClientTypes.TcpTimeout: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case idle
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let idle = idle {
            try encodeContainer.encode(idle, forKey: .idle)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idleDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.Duration.self, forKey: .idle)
        idle = idleDecoded
    }
}

extension AppMeshClientTypes.TcpTimeout: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TcpTimeout(idle: \(Swift.String(describing: idle)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents types of timeouts. </p>
    public struct TcpTimeout: Swift.Equatable {
        /// <p>An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.</p>
        public let idle: AppMeshClientTypes.Duration?

        public init (
            idle: AppMeshClientTypes.Duration? = nil
        )
        {
            self.idle = idle
        }
    }

}

extension AppMeshClientTypes.TlsValidationContext: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subjectAlternativeNames
        case trust
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let subjectAlternativeNames = subjectAlternativeNames {
            try encodeContainer.encode(subjectAlternativeNames, forKey: .subjectAlternativeNames)
        }
        if let trust = trust {
            try encodeContainer.encode(trust, forKey: .trust)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trustDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.TlsValidationContextTrust.self, forKey: .trust)
        trust = trustDecoded
        let subjectAlternativeNamesDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.SubjectAlternativeNames.self, forKey: .subjectAlternativeNames)
        subjectAlternativeNames = subjectAlternativeNamesDecoded
    }
}

extension AppMeshClientTypes.TlsValidationContext: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TlsValidationContext(subjectAlternativeNames: \(Swift.String(describing: subjectAlternativeNames)), trust: \(Swift.String(describing: trust)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents how the proxy will validate its peer during Transport Layer Security (TLS)
    ///          negotiation.</p>
    public struct TlsValidationContext: Swift.Equatable {
        /// <p>A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context.</p>
        public let subjectAlternativeNames: AppMeshClientTypes.SubjectAlternativeNames?
        /// <p>A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS)
        ///          certificate.</p>
        public let trust: AppMeshClientTypes.TlsValidationContextTrust?

        public init (
            subjectAlternativeNames: AppMeshClientTypes.SubjectAlternativeNames? = nil,
            trust: AppMeshClientTypes.TlsValidationContextTrust? = nil
        )
        {
            self.subjectAlternativeNames = subjectAlternativeNames
            self.trust = trust
        }
    }

}

extension AppMeshClientTypes.TlsValidationContextAcmTrust: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityArns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityArns = certificateAuthorityArns {
            var certificateAuthorityArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificateAuthorityArns)
            for certificateauthorityarns0 in certificateAuthorityArns {
                try certificateAuthorityArnsContainer.encode(certificateauthorityarns0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateAuthorityArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .certificateAuthorityArns)
        var certificateAuthorityArnsDecoded0:[Swift.String]? = nil
        if let certificateAuthorityArnsContainer = certificateAuthorityArnsContainer {
            certificateAuthorityArnsDecoded0 = [Swift.String]()
            for string0 in certificateAuthorityArnsContainer {
                if let string0 = string0 {
                    certificateAuthorityArnsDecoded0?.append(string0)
                }
            }
        }
        certificateAuthorityArns = certificateAuthorityArnsDecoded0
    }
}

extension AppMeshClientTypes.TlsValidationContextAcmTrust: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TlsValidationContextAcmTrust(certificateAuthorityArns: \(Swift.String(describing: certificateAuthorityArns)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a Transport Layer Security (TLS) validation context trust for an AWS Certicate Manager (ACM)
    ///          certificate.</p>
    public struct TlsValidationContextAcmTrust: Swift.Equatable {
        /// <p>One or more ACM Amazon Resource Name (ARN)s.</p>
        public let certificateAuthorityArns: [Swift.String]?

        public init (
            certificateAuthorityArns: [Swift.String]? = nil
        )
        {
            self.certificateAuthorityArns = certificateAuthorityArns
        }
    }

}

extension AppMeshClientTypes.TlsValidationContextFileTrust: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateChain
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateChain = certificateChain {
            try encodeContainer.encode(certificateChain, forKey: .certificateChain)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateChainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateChain)
        certificateChain = certificateChainDecoded
    }
}

extension AppMeshClientTypes.TlsValidationContextFileTrust: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TlsValidationContextFileTrust(certificateChain: \(Swift.String(describing: certificateChain)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a Transport Layer Security (TLS) validation context trust for a local file.</p>
    public struct TlsValidationContextFileTrust: Swift.Equatable {
        /// <p>The certificate trust chain for a certificate stored on the file system of the virtual
        ///          node that the proxy is running on.</p>
        public let certificateChain: Swift.String?

        public init (
            certificateChain: Swift.String? = nil
        )
        {
            self.certificateChain = certificateChain
        }
    }

}

extension AppMeshClientTypes.TlsValidationContextSdsTrust: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case secretName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let secretName = secretName {
            try encodeContainer.encode(secretName, forKey: .secretName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let secretNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretName)
        secretName = secretNameDecoded
    }
}

extension AppMeshClientTypes.TlsValidationContextSdsTrust: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TlsValidationContextSdsTrust(secretName: \(Swift.String(describing: secretName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust. The
    ///          proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh
    ///             <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS
    ///             documentation</a> for more info.</p>
    public struct TlsValidationContextSdsTrust: Swift.Equatable {
        /// <p>A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret
        ///          Discovery Service validation context trust.</p>
        public let secretName: Swift.String?

        public init (
            secretName: Swift.String? = nil
        )
        {
            self.secretName = secretName
        }
    }

}

extension AppMeshClientTypes.TlsValidationContextTrust: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acm
        case file
        case sdkUnknown
        case sds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .acm(acm):
                try container.encode(acm, forKey: .acm)
            case let .file(file):
                try container.encode(file, forKey: .file)
            case let .sds(sds):
                try container.encode(sds, forKey: .sds)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let acmDecoded = try values.decodeIfPresent(AppMeshClientTypes.TlsValidationContextAcmTrust.self, forKey: .acm)
        if let acm = acmDecoded {
            self = .acm(acm)
            return
        }
        let fileDecoded = try values.decodeIfPresent(AppMeshClientTypes.TlsValidationContextFileTrust.self, forKey: .file)
        if let file = fileDecoded {
            self = .file(file)
            return
        }
        let sdsDecoded = try values.decodeIfPresent(AppMeshClientTypes.TlsValidationContextSdsTrust.self, forKey: .sds)
        if let sds = sdsDecoded {
            self = .sds(sds)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents a Transport Layer Security (TLS) validation context trust.</p>
    public enum TlsValidationContextTrust: Swift.Equatable {
        /// <p>A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an
        ///          AWS Certicate Manager (ACM) certificate.</p>
        case acm(AppMeshClientTypes.TlsValidationContextAcmTrust)
        /// <p>An object that represents a Transport Layer Security (TLS) validation context trust for a local file.</p>
        case file(AppMeshClientTypes.TlsValidationContextFileTrust)
        /// <p>A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation
        ///          context trust.</p>
        case sds(AppMeshClientTypes.TlsValidationContextSdsTrust)
        case sdkUnknown(Swift.String)
    }

}

extension TooManyRequestsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TooManyRequestsException(message: \(Swift.String(describing: message)))"}
}

extension TooManyRequestsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TooManyRequestsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The maximum request rate permitted by the App Mesh APIs has been exceeded for your
///          account. For best results, use an increasing or variable sleep interval between
///          requests.</p>
public struct TooManyRequestsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = true
    public var _isThrottling: Swift.Bool = true
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyRequestsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TooManyRequestsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyTagsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TooManyTagsException(message: \(Swift.String(describing: message)))"}
}

extension TooManyTagsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TooManyTagsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request exceeds the maximum allowed number of tags allowed per resource. The current
///          limit is 50 user tags per resource. You must reduce the number of tags in the request. None
///          of the tags in this request were applied.</p>
public struct TooManyTagsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyTagsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TooManyTagsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UntagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let resourceArn = input.operationInput.resourceArn {
            let resourceArnQueryItem = ClientRuntime.URLQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
            input.builder.withQueryItem(resourceArnQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

///
public struct UntagResourceInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource to delete tags from.</p>
    public let resourceArn: Swift.String?
    /// <p>The keys of the tags to be removed.</p>
    public let tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    public let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

///
public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateGatewayRouteInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateGatewayRouteInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateGatewayRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateGatewayRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateGatewayRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateGatewayRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateGatewayRouteOutputError>
}

extension UpdateGatewayRouteInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateGatewayRouteInput(clientToken: \(Swift.String(describing: clientToken)), gatewayRouteName: \(Swift.String(describing: gatewayRouteName)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), spec: \(Swift.String(describing: spec)), virtualGatewayName: \(Swift.String(describing: virtualGatewayName)))"}
}

extension UpdateGatewayRouteInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
    }
}

public struct UpdateGatewayRouteInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateGatewayRouteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateGatewayRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateGatewayRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateGatewayRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateGatewayRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateGatewayRouteOutputError>
}

public struct UpdateGatewayRouteInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateGatewayRouteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateGatewayRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateGatewayRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateGatewayRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateGatewayRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateGatewayRouteOutputError>
}

public struct UpdateGatewayRouteInput: Swift.Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    public var clientToken: Swift.String?
    /// <p>The name of the gateway route to update.</p>
    public let gatewayRouteName: Swift.String?
    /// <p>The name of the service mesh that the gateway route resides in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The new gateway route specification to apply. This overwrites the existing data.</p>
    public let spec: AppMeshClientTypes.GatewayRouteSpec?
    /// <p>The name of the virtual gateway that the gateway route is associated with.</p>
    public let virtualGatewayName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        gatewayRouteName: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        spec: AppMeshClientTypes.GatewayRouteSpec? = nil,
        virtualGatewayName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.gatewayRouteName = gatewayRouteName
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.spec = spec
        self.virtualGatewayName = virtualGatewayName
    }
}

struct UpdateGatewayRouteInputBody: Swift.Equatable {
    public let spec: AppMeshClientTypes.GatewayRouteSpec?
    public let clientToken: Swift.String?
}

extension UpdateGatewayRouteInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GatewayRouteSpec.self, forKey: .spec)
        spec = specDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension UpdateGatewayRouteOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGatewayRouteOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateGatewayRouteOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGatewayRouteOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateGatewayRouteOutputResponse(gatewayRoute: \(Swift.String(describing: gatewayRoute)))"}
}

extension UpdateGatewayRouteOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.GatewayRouteData = try responseDecoder.decode(responseBody: data)
                self.gatewayRoute = output
            } else {
                self.gatewayRoute = nil
            }
        } else {
            self.gatewayRoute = nil
        }
    }
}

public struct UpdateGatewayRouteOutputResponse: Swift.Equatable {
    /// <p>A full description of the gateway route that was updated.</p>
    public let gatewayRoute: AppMeshClientTypes.GatewayRouteData?

    public init (
        gatewayRoute: AppMeshClientTypes.GatewayRouteData? = nil
    )
    {
        self.gatewayRoute = gatewayRoute
    }
}

struct UpdateGatewayRouteOutputResponseBody: Swift.Equatable {
    public let gatewayRoute: AppMeshClientTypes.GatewayRouteData?
}

extension UpdateGatewayRouteOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gatewayRoute
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayRouteDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GatewayRouteData.self, forKey: .gatewayRoute)
        gatewayRoute = gatewayRouteDecoded
    }
}

public struct UpdateMeshInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMeshInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMeshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMeshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMeshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMeshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMeshOutputError>
}

extension UpdateMeshInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateMeshInput(clientToken: \(Swift.String(describing: clientToken)), meshName: \(Swift.String(describing: meshName)), spec: \(Swift.String(describing: spec)))"}
}

extension UpdateMeshInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
    }
}

public struct UpdateMeshInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMeshInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMeshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMeshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMeshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMeshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMeshOutputError>
}

public struct UpdateMeshInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMeshInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMeshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMeshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMeshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMeshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMeshOutputError>
}

///
public struct UpdateMeshInput: Swift.Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    public var clientToken: Swift.String?
    /// <p>The name of the service mesh to update.</p>
    public let meshName: Swift.String?
    /// <p>The service mesh specification to apply.</p>
    public let spec: AppMeshClientTypes.MeshSpec?

    public init (
        clientToken: Swift.String? = nil,
        meshName: Swift.String? = nil,
        spec: AppMeshClientTypes.MeshSpec? = nil
    )
    {
        self.clientToken = clientToken
        self.meshName = meshName
        self.spec = spec
    }
}

struct UpdateMeshInputBody: Swift.Equatable {
    public let spec: AppMeshClientTypes.MeshSpec?
    public let clientToken: Swift.String?
}

extension UpdateMeshInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.MeshSpec.self, forKey: .spec)
        spec = specDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension UpdateMeshOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMeshOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateMeshOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMeshOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateMeshOutputResponse(mesh: \(Swift.String(describing: mesh)))"}
}

extension UpdateMeshOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.MeshData = try responseDecoder.decode(responseBody: data)
                self.mesh = output
            } else {
                self.mesh = nil
            }
        } else {
            self.mesh = nil
        }
    }
}

///
public struct UpdateMeshOutputResponse: Swift.Equatable {
    /// <p>An object that represents a service mesh returned by a describe operation.</p>
    public let mesh: AppMeshClientTypes.MeshData?

    public init (
        mesh: AppMeshClientTypes.MeshData? = nil
    )
    {
        self.mesh = mesh
    }
}

struct UpdateMeshOutputResponseBody: Swift.Equatable {
    public let mesh: AppMeshClientTypes.MeshData?
}

extension UpdateMeshOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mesh
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.MeshData.self, forKey: .mesh)
        mesh = meshDecoded
    }
}

public struct UpdateRouteInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRouteInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRouteOutputError>
}

extension UpdateRouteInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRouteInput(clientToken: \(Swift.String(describing: clientToken)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), routeName: \(Swift.String(describing: routeName)), spec: \(Swift.String(describing: spec)), virtualRouterName: \(Swift.String(describing: virtualRouterName)))"}
}

extension UpdateRouteInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
    }
}

public struct UpdateRouteInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRouteInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRouteOutputError>
}

public struct UpdateRouteInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRouteInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRouteInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRouteOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRouteInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRouteOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRouteOutputError>
}

///
public struct UpdateRouteInput: Swift.Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    public var clientToken: Swift.String?
    /// <p>The name of the service mesh that the route resides in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The name of the route to update.</p>
    public let routeName: Swift.String?
    /// <p>The new route specification to apply. This overwrites the existing data.</p>
    public let spec: AppMeshClientTypes.RouteSpec?
    /// <p>The name of the virtual router that the route is associated with.</p>
    public let virtualRouterName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        routeName: Swift.String? = nil,
        spec: AppMeshClientTypes.RouteSpec? = nil,
        virtualRouterName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.routeName = routeName
        self.spec = spec
        self.virtualRouterName = virtualRouterName
    }
}

struct UpdateRouteInputBody: Swift.Equatable {
    public let spec: AppMeshClientTypes.RouteSpec?
    public let clientToken: Swift.String?
}

extension UpdateRouteInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.RouteSpec.self, forKey: .spec)
        spec = specDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension UpdateRouteOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRouteOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRouteOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRouteOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRouteOutputResponse(route: \(Swift.String(describing: route)))"}
}

extension UpdateRouteOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.RouteData = try responseDecoder.decode(responseBody: data)
                self.route = output
            } else {
                self.route = nil
            }
        } else {
            self.route = nil
        }
    }
}

///
public struct UpdateRouteOutputResponse: Swift.Equatable {
    /// <p>A full description of the route that was updated.</p>
    public let route: AppMeshClientTypes.RouteData?

    public init (
        route: AppMeshClientTypes.RouteData? = nil
    )
    {
        self.route = route
    }
}

struct UpdateRouteOutputResponseBody: Swift.Equatable {
    public let route: AppMeshClientTypes.RouteData?
}

extension UpdateRouteOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case route
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routeDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.RouteData.self, forKey: .route)
        route = routeDecoded
    }
}

public struct UpdateVirtualGatewayInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualGatewayInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualGatewayOutputError>
}

extension UpdateVirtualGatewayInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateVirtualGatewayInput(clientToken: \(Swift.String(describing: clientToken)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), spec: \(Swift.String(describing: spec)), virtualGatewayName: \(Swift.String(describing: virtualGatewayName)))"}
}

extension UpdateVirtualGatewayInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
    }
}

public struct UpdateVirtualGatewayInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualGatewayInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualGatewayOutputError>
}

public struct UpdateVirtualGatewayInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualGatewayInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualGatewayInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualGatewayOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualGatewayInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualGatewayOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualGatewayOutputError>
}

public struct UpdateVirtualGatewayInput: Swift.Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    public var clientToken: Swift.String?
    /// <p>The name of the service mesh that the virtual gateway resides in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The new virtual gateway specification to apply. This overwrites the existing
    ///          data.</p>
    public let spec: AppMeshClientTypes.VirtualGatewaySpec?
    /// <p>The name of the virtual gateway to update.</p>
    public let virtualGatewayName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        spec: AppMeshClientTypes.VirtualGatewaySpec? = nil,
        virtualGatewayName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.spec = spec
        self.virtualGatewayName = virtualGatewayName
    }
}

struct UpdateVirtualGatewayInputBody: Swift.Equatable {
    public let spec: AppMeshClientTypes.VirtualGatewaySpec?
    public let clientToken: Swift.String?
}

extension UpdateVirtualGatewayInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewaySpec.self, forKey: .spec)
        spec = specDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension UpdateVirtualGatewayOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateVirtualGatewayOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateVirtualGatewayOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateVirtualGatewayOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateVirtualGatewayOutputResponse(virtualGateway: \(Swift.String(describing: virtualGateway)))"}
}

extension UpdateVirtualGatewayOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualGatewayData = try responseDecoder.decode(responseBody: data)
                self.virtualGateway = output
            } else {
                self.virtualGateway = nil
            }
        } else {
            self.virtualGateway = nil
        }
    }
}

public struct UpdateVirtualGatewayOutputResponse: Swift.Equatable {
    /// <p>A full description of the virtual gateway that was updated.</p>
    public let virtualGateway: AppMeshClientTypes.VirtualGatewayData?

    public init (
        virtualGateway: AppMeshClientTypes.VirtualGatewayData? = nil
    )
    {
        self.virtualGateway = virtualGateway
    }
}

struct UpdateVirtualGatewayOutputResponseBody: Swift.Equatable {
    public let virtualGateway: AppMeshClientTypes.VirtualGatewayData?
}

extension UpdateVirtualGatewayOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualGateway
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualGatewayDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayData.self, forKey: .virtualGateway)
        virtualGateway = virtualGatewayDecoded
    }
}

public struct UpdateVirtualNodeInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualNodeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualNodeOutputError>
}

extension UpdateVirtualNodeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateVirtualNodeInput(clientToken: \(Swift.String(describing: clientToken)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), spec: \(Swift.String(describing: spec)), virtualNodeName: \(Swift.String(describing: virtualNodeName)))"}
}

extension UpdateVirtualNodeInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
    }
}

public struct UpdateVirtualNodeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualNodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualNodeOutputError>
}

public struct UpdateVirtualNodeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualNodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualNodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualNodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualNodeOutputError>
}

///
public struct UpdateVirtualNodeInput: Swift.Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    public var clientToken: Swift.String?
    /// <p>The name of the service mesh that the virtual node resides in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The new virtual node specification to apply. This overwrites the existing data.</p>
    public let spec: AppMeshClientTypes.VirtualNodeSpec?
    /// <p>The name of the virtual node to update.</p>
    public let virtualNodeName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        spec: AppMeshClientTypes.VirtualNodeSpec? = nil,
        virtualNodeName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.spec = spec
        self.virtualNodeName = virtualNodeName
    }
}

struct UpdateVirtualNodeInputBody: Swift.Equatable {
    public let spec: AppMeshClientTypes.VirtualNodeSpec?
    public let clientToken: Swift.String?
}

extension UpdateVirtualNodeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualNodeSpec.self, forKey: .spec)
        spec = specDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension UpdateVirtualNodeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateVirtualNodeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateVirtualNodeOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateVirtualNodeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateVirtualNodeOutputResponse(virtualNode: \(Swift.String(describing: virtualNode)))"}
}

extension UpdateVirtualNodeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualNodeData = try responseDecoder.decode(responseBody: data)
                self.virtualNode = output
            } else {
                self.virtualNode = nil
            }
        } else {
            self.virtualNode = nil
        }
    }
}

///
public struct UpdateVirtualNodeOutputResponse: Swift.Equatable {
    /// <p>A full description of the virtual node that was updated.</p>
    public let virtualNode: AppMeshClientTypes.VirtualNodeData?

    public init (
        virtualNode: AppMeshClientTypes.VirtualNodeData? = nil
    )
    {
        self.virtualNode = virtualNode
    }
}

struct UpdateVirtualNodeOutputResponseBody: Swift.Equatable {
    public let virtualNode: AppMeshClientTypes.VirtualNodeData?
}

extension UpdateVirtualNodeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualNode
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualNodeDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualNodeData.self, forKey: .virtualNode)
        virtualNode = virtualNodeDecoded
    }
}

public struct UpdateVirtualRouterInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualRouterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualRouterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualRouterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualRouterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualRouterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualRouterOutputError>
}

extension UpdateVirtualRouterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateVirtualRouterInput(clientToken: \(Swift.String(describing: clientToken)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), spec: \(Swift.String(describing: spec)), virtualRouterName: \(Swift.String(describing: virtualRouterName)))"}
}

extension UpdateVirtualRouterInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
    }
}

public struct UpdateVirtualRouterInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualRouterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualRouterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualRouterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualRouterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualRouterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualRouterOutputError>
}

public struct UpdateVirtualRouterInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualRouterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualRouterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualRouterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualRouterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualRouterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualRouterOutputError>
}

///
public struct UpdateVirtualRouterInput: Swift.Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    public var clientToken: Swift.String?
    /// <p>The name of the service mesh that the virtual router resides in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The new virtual router specification to apply. This overwrites the existing data.</p>
    public let spec: AppMeshClientTypes.VirtualRouterSpec?
    /// <p>The name of the virtual router to update.</p>
    public let virtualRouterName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        spec: AppMeshClientTypes.VirtualRouterSpec? = nil,
        virtualRouterName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.spec = spec
        self.virtualRouterName = virtualRouterName
    }
}

struct UpdateVirtualRouterInputBody: Swift.Equatable {
    public let spec: AppMeshClientTypes.VirtualRouterSpec?
    public let clientToken: Swift.String?
}

extension UpdateVirtualRouterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualRouterSpec.self, forKey: .spec)
        spec = specDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension UpdateVirtualRouterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateVirtualRouterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateVirtualRouterOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateVirtualRouterOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateVirtualRouterOutputResponse(virtualRouter: \(Swift.String(describing: virtualRouter)))"}
}

extension UpdateVirtualRouterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualRouterData = try responseDecoder.decode(responseBody: data)
                self.virtualRouter = output
            } else {
                self.virtualRouter = nil
            }
        } else {
            self.virtualRouter = nil
        }
    }
}

///
public struct UpdateVirtualRouterOutputResponse: Swift.Equatable {
    /// <p>A full description of the virtual router that was updated.</p>
    public let virtualRouter: AppMeshClientTypes.VirtualRouterData?

    public init (
        virtualRouter: AppMeshClientTypes.VirtualRouterData? = nil
    )
    {
        self.virtualRouter = virtualRouter
    }
}

struct UpdateVirtualRouterOutputResponseBody: Swift.Equatable {
    public let virtualRouter: AppMeshClientTypes.VirtualRouterData?
}

extension UpdateVirtualRouterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualRouter
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualRouterDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualRouterData.self, forKey: .virtualRouter)
        virtualRouter = virtualRouterDecoded
    }
}

public struct UpdateVirtualServiceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualServiceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualServiceOutputError>
}

extension UpdateVirtualServiceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateVirtualServiceInput(clientToken: \(Swift.String(describing: clientToken)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), spec: \(Swift.String(describing: spec)), virtualServiceName: \(Swift.String(describing: virtualServiceName)))"}
}

extension UpdateVirtualServiceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
    }
}

public struct UpdateVirtualServiceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualServiceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualServiceOutputError>
}

public struct UpdateVirtualServiceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVirtualServiceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVirtualServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVirtualServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let meshOwner = input.operationInput.meshOwner {
            let meshOwnerQueryItem = ClientRuntime.URLQueryItem(name: "meshOwner".urlPercentEncoding(), value: Swift.String(meshOwner).urlPercentEncoding())
            input.builder.withQueryItem(meshOwnerQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVirtualServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVirtualServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVirtualServiceOutputError>
}

///
public struct UpdateVirtualServiceInput: Swift.Equatable {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    public var clientToken: Swift.String?
    /// <p>The name of the service mesh that the virtual service resides in.</p>
    public let meshName: Swift.String?
    /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
    ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    public let meshOwner: Swift.String?
    /// <p>The new virtual service specification to apply. This overwrites the existing
    ///          data.</p>
    public let spec: AppMeshClientTypes.VirtualServiceSpec?
    /// <p>The name of the virtual service to update.</p>
    public let virtualServiceName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        spec: AppMeshClientTypes.VirtualServiceSpec? = nil,
        virtualServiceName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.spec = spec
        self.virtualServiceName = virtualServiceName
    }
}

struct UpdateVirtualServiceInputBody: Swift.Equatable {
    public let spec: AppMeshClientTypes.VirtualServiceSpec?
    public let clientToken: Swift.String?
}

extension UpdateVirtualServiceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case spec
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualServiceSpec.self, forKey: .spec)
        spec = specDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension UpdateVirtualServiceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateVirtualServiceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateVirtualServiceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateVirtualServiceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateVirtualServiceOutputResponse(virtualService: \(Swift.String(describing: virtualService)))"}
}

extension UpdateVirtualServiceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body {
            let data = reader.toBytes().toData()
            if let responseDecoder = decoder {
                let output: AppMeshClientTypes.VirtualServiceData = try responseDecoder.decode(responseBody: data)
                self.virtualService = output
            } else {
                self.virtualService = nil
            }
        } else {
            self.virtualService = nil
        }
    }
}

///
public struct UpdateVirtualServiceOutputResponse: Swift.Equatable {
    /// <p>A full description of the virtual service that was updated.</p>
    public let virtualService: AppMeshClientTypes.VirtualServiceData?

    public init (
        virtualService: AppMeshClientTypes.VirtualServiceData? = nil
    )
    {
        self.virtualService = virtualService
    }
}

struct UpdateVirtualServiceOutputResponseBody: Swift.Equatable {
    public let virtualService: AppMeshClientTypes.VirtualServiceData?
}

extension UpdateVirtualServiceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualService
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualServiceDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualServiceData.self, forKey: .virtualService)
        virtualService = virtualServiceDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayAccessLog: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case file
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .file(file):
                try container.encode(file, forKey: .file)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let fileDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualGatewayFileAccessLog.self, forKey: .file)
        if let file = fileDecoded {
            self = .file(file)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>The access log configuration for a virtual gateway.</p>
    public enum VirtualGatewayAccessLog: Swift.Equatable {
        /// <p>The file object to send virtual gateway access logs to.</p>
        case file(AppMeshClientTypes.VirtualGatewayFileAccessLog)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.VirtualGatewayBackendDefaults: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientPolicy
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientPolicy = clientPolicy {
            try encodeContainer.encode(clientPolicy, forKey: .clientPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientPolicyDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayClientPolicy.self, forKey: .clientPolicy)
        clientPolicy = clientPolicyDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayBackendDefaults: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayBackendDefaults(clientPolicy: \(Swift.String(describing: clientPolicy)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the default properties for a backend.</p>
    public struct VirtualGatewayBackendDefaults: Swift.Equatable {
        /// <p>A reference to an object that represents a client policy.</p>
        public let clientPolicy: AppMeshClientTypes.VirtualGatewayClientPolicy?

        public init (
            clientPolicy: AppMeshClientTypes.VirtualGatewayClientPolicy? = nil
        )
        {
            self.clientPolicy = clientPolicy
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayClientPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tls
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tls = tls {
            try encodeContainer.encode(tls, forKey: .tls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tlsDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayClientPolicyTls.self, forKey: .tls)
        tls = tlsDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayClientPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayClientPolicy(tls: \(Swift.String(describing: tls)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a client policy.</p>
    public struct VirtualGatewayClientPolicy: Swift.Equatable {
        /// <p>A reference to an object that represents a Transport Layer Security (TLS) client policy.</p>
        public let tls: AppMeshClientTypes.VirtualGatewayClientPolicyTls?

        public init (
            tls: AppMeshClientTypes.VirtualGatewayClientPolicyTls? = nil
        )
        {
            self.tls = tls
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayClientPolicyTls: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate
        case enforce
        case ports
        case validation
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificate = certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let enforce = enforce {
            try encodeContainer.encode(enforce, forKey: .enforce)
        }
        if let ports = ports {
            var portsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ports)
            for portset0 in ports {
                try portsContainer.encode(portset0)
            }
        }
        if let validation = validation {
            try encodeContainer.encode(validation, forKey: .validation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enforceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enforce)
        enforce = enforceDecoded
        let portsContainer = try containerValues.decodeIfPresent(Swift.Set<Swift.Int>.self, forKey: .ports)
        var portsDecoded0:Swift.Set<Swift.Int>? = nil
        if let portsContainer = portsContainer {
            portsDecoded0 = Swift.Set<Swift.Int>()
            for integer0 in portsContainer {
                portsDecoded0?.insert(integer0)
            }
        }
        ports = portsDecoded0
        let certificateDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayClientTlsCertificate.self, forKey: .certificate)
        certificate = certificateDecoded
        let validationDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayTlsValidationContext.self, forKey: .validation)
        validation = validationDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayClientPolicyTls: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayClientPolicyTls(certificate: \(Swift.String(describing: certificate)), enforce: \(Swift.String(describing: enforce)), ports: \(Swift.String(describing: ports)), validation: \(Swift.String(describing: validation)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a Transport Layer Security (TLS) client policy.</p>
    public struct VirtualGatewayClientPolicyTls: Swift.Equatable {
        /// <p>A reference to an object that represents a virtual gateway's client's Transport Layer Security (TLS)
        ///          certificate.</p>
        public let certificate: AppMeshClientTypes.VirtualGatewayClientTlsCertificate?
        /// <p>Whether the policy is enforced. The default is <code>True</code>, if a value isn't
        ///          specified.</p>
        public let enforce: Swift.Bool?
        /// <p>One or more ports that the policy is enforced for.</p>
        public let ports: Swift.Set<Swift.Int>?
        /// <p>A reference to an object that represents a Transport Layer Security (TLS) validation context.</p>
        public let validation: AppMeshClientTypes.VirtualGatewayTlsValidationContext?

        public init (
            certificate: AppMeshClientTypes.VirtualGatewayClientTlsCertificate? = nil,
            enforce: Swift.Bool? = nil,
            ports: Swift.Set<Swift.Int>? = nil,
            validation: AppMeshClientTypes.VirtualGatewayTlsValidationContext? = nil
        )
        {
            self.certificate = certificate
            self.enforce = enforce
            self.ports = ports
            self.validation = validation
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayClientTlsCertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case file
        case sdkUnknown
        case sds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .file(file):
                try container.encode(file, forKey: .file)
            case let .sds(sds):
                try container.encode(sds, forKey: .sds)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let fileDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualGatewayListenerTlsFileCertificate.self, forKey: .file)
        if let file = fileDecoded {
            self = .file(file)
            return
        }
        let sdsDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualGatewayListenerTlsSdsCertificate.self, forKey: .sds)
        if let sds = sdsDecoded {
            self = .sds(sds)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents the virtual gateway's client's Transport Layer Security (TLS) certificate.</p>
    public enum VirtualGatewayClientTlsCertificate: Swift.Equatable {
        /// <p>An object that represents a local file certificate.
        ///          The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.</p>
        case file(AppMeshClientTypes.VirtualGatewayListenerTlsFileCertificate)
        /// <p>A reference to an object that represents a virtual gateway's client's Secret Discovery
        ///          Service certificate.</p>
        case sds(AppMeshClientTypes.VirtualGatewayListenerTlsSdsCertificate)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.VirtualGatewayConnectionPool: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grpc
        case http
        case http2
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .grpc(grpc):
                try container.encode(grpc, forKey: .grpc)
            case let .http(http):
                try container.encode(http, forKey: .http)
            case let .http2(http2):
                try container.encode(http2, forKey: .http2)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let httpDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualGatewayHttpConnectionPool.self, forKey: .http)
        if let http = httpDecoded {
            self = .http(http)
            return
        }
        let http2Decoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualGatewayHttp2ConnectionPool.self, forKey: .http2)
        if let http2 = http2Decoded {
            self = .http2(http2)
            return
        }
        let grpcDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualGatewayGrpcConnectionPool.self, forKey: .grpc)
        if let grpc = grpcDecoded {
            self = .grpc(grpc)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents the type of virtual gateway connection pool.</p>
    ///          <p>Only one protocol is used at a time and should be the same protocol as the one chosen
    ///          under port mapping.</p>
    ///          <p>If not present the default value for <code>maxPendingRequests</code> is
    ///             <code>2147483647</code>.</p>
    public enum VirtualGatewayConnectionPool: Swift.Equatable {
        /// <p>An object that represents a type of connection pool.</p>
        case http(AppMeshClientTypes.VirtualGatewayHttpConnectionPool)
        /// <p>An object that represents a type of connection pool.</p>
        case http2(AppMeshClientTypes.VirtualGatewayHttp2ConnectionPool)
        /// <p>An object that represents a type of connection pool. </p>
        case grpc(AppMeshClientTypes.VirtualGatewayGrpcConnectionPool)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.VirtualGatewayData: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case meshName
        case metadata
        case spec
        case status
        case virtualGatewayName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let metadata = metadata {
            try encodeContainer.encode(metadata, forKey: .metadata)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let virtualGatewayName = virtualGatewayName {
            try encodeContainer.encode(virtualGatewayName, forKey: .virtualGatewayName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let virtualGatewayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayName)
        virtualGatewayName = virtualGatewayNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewaySpec.self, forKey: .spec)
        spec = specDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ResourceMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayData(meshName: \(Swift.String(describing: meshName)), metadata: \(Swift.String(describing: metadata)), spec: \(Swift.String(describing: spec)), status: \(Swift.String(describing: status)), virtualGatewayName: \(Swift.String(describing: virtualGatewayName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual gateway returned by a describe operation.</p>
    public struct VirtualGatewayData: Swift.Equatable {
        /// <p>The name of the service mesh that the virtual gateway resides in.</p>
        public let meshName: Swift.String?
        /// <p>An object that represents metadata for a resource.</p>
        public let metadata: AppMeshClientTypes.ResourceMetadata?
        /// <p>The specifications of the virtual gateway.</p>
        public let spec: AppMeshClientTypes.VirtualGatewaySpec?
        /// <p>The current status of the virtual gateway.</p>
        public let status: AppMeshClientTypes.VirtualGatewayStatus?
        /// <p>The name of the virtual gateway.</p>
        public let virtualGatewayName: Swift.String?

        public init (
            meshName: Swift.String? = nil,
            metadata: AppMeshClientTypes.ResourceMetadata? = nil,
            spec: AppMeshClientTypes.VirtualGatewaySpec? = nil,
            status: AppMeshClientTypes.VirtualGatewayStatus? = nil,
            virtualGatewayName: Swift.String? = nil
        )
        {
            self.meshName = meshName
            self.metadata = metadata
            self.spec = spec
            self.status = status
            self.virtualGatewayName = virtualGatewayName
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayFileAccessLog: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case path
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayFileAccessLog: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayFileAccessLog(path: \(Swift.String(describing: path)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents an access log file.</p>
    public struct VirtualGatewayFileAccessLog: Swift.Equatable {
        /// <p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send
        ///          access logs to standard out and configure your Envoy container to use a log driver, such as
        ///             <code>awslogs</code>, to export the access logs to a log storage service such as Amazon
        ///          CloudWatch Logs. You can also specify a path in the Envoy container's file system to write
        ///          the files to disk.</p>
        public let path: Swift.String?

        public init (
            path: Swift.String? = nil
        )
        {
            self.path = path
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayGrpcConnectionPool: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxRequests
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxRequests != 0 {
            try encodeContainer.encode(maxRequests, forKey: .maxRequests)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxRequestsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxRequests)
        maxRequests = maxRequestsDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayGrpcConnectionPool: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayGrpcConnectionPool(maxRequests: \(Swift.String(describing: maxRequests)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a type of connection pool.</p>
    public struct VirtualGatewayGrpcConnectionPool: Swift.Equatable {
        /// <p>Maximum number of inflight requests Envoy can concurrently support across hosts in
        ///          upstream cluster.</p>
        public let maxRequests: Swift.Int

        public init (
            maxRequests: Swift.Int = 0
        )
        {
            self.maxRequests = maxRequests
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayHealthCheckPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthyThreshold
        case intervalMillis
        case path
        case port
        case `protocol` = "protocol"
        case timeoutMillis
        case unhealthyThreshold
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if healthyThreshold != 0 {
            try encodeContainer.encode(healthyThreshold, forKey: .healthyThreshold)
        }
        if let intervalMillis = intervalMillis {
            try encodeContainer.encode(intervalMillis, forKey: .intervalMillis)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let timeoutMillis = timeoutMillis {
            try encodeContainer.encode(timeoutMillis, forKey: .timeoutMillis)
        }
        if unhealthyThreshold != 0 {
            try encodeContainer.encode(unhealthyThreshold, forKey: .unhealthyThreshold)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutMillis)
        timeoutMillis = timeoutMillisDecoded
        let intervalMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .intervalMillis)
        intervalMillis = intervalMillisDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayPortProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let portDecoded = try containerValues.decode(Swift.Int.self, forKey: .port)
        port = portDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let healthyThresholdDecoded = try containerValues.decode(Swift.Int.self, forKey: .healthyThreshold)
        healthyThreshold = healthyThresholdDecoded
        let unhealthyThresholdDecoded = try containerValues.decode(Swift.Int.self, forKey: .unhealthyThreshold)
        unhealthyThreshold = unhealthyThresholdDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayHealthCheckPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayHealthCheckPolicy(healthyThreshold: \(Swift.String(describing: healthyThreshold)), intervalMillis: \(Swift.String(describing: intervalMillis)), path: \(Swift.String(describing: path)), port: \(Swift.String(describing: port)), protocol: \(Swift.String(describing: `protocol`)), timeoutMillis: \(Swift.String(describing: timeoutMillis)), unhealthyThreshold: \(Swift.String(describing: unhealthyThreshold)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the health check policy for a virtual gateway's
    ///          listener.</p>
    public struct VirtualGatewayHealthCheckPolicy: Swift.Equatable {
        /// <p>The protocol for the health check request. If you specify <code>grpc</code>, then your
        ///          service must conform to the <a href="https://github.com/grpc/grpc/blob/master/doc/health-checking.md">GRPC Health
        ///             Checking Protocol</a>.</p>
        public let `protocol`: AppMeshClientTypes.VirtualGatewayPortProtocol?
        /// <p>The number of consecutive successful health checks that must occur before declaring the
        ///          listener healthy.</p>
        public let healthyThreshold: Swift.Int
        /// <p>The time period in milliseconds between each health check execution.</p>
        public let intervalMillis: Swift.Int?
        /// <p>The destination path for the health check request. This value is only used if the
        ///          specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.</p>
        public let path: Swift.String?
        /// <p>The destination port for the health check request. This port must match the port defined
        ///          in the <a>PortMapping</a> for the listener.</p>
        public let port: Swift.Int
        /// <p>The amount of time to wait when receiving a response from the health check, in
        ///          milliseconds.</p>
        public let timeoutMillis: Swift.Int?
        /// <p>The number of consecutive failed health checks that must occur before declaring a
        ///          virtual gateway unhealthy.</p>
        public let unhealthyThreshold: Swift.Int

        public init (
            `protocol`: AppMeshClientTypes.VirtualGatewayPortProtocol? = nil,
            healthyThreshold: Swift.Int = 0,
            intervalMillis: Swift.Int? = nil,
            path: Swift.String? = nil,
            port: Swift.Int = 0,
            timeoutMillis: Swift.Int? = nil,
            unhealthyThreshold: Swift.Int = 0
        )
        {
            self.`protocol` = `protocol`
            self.healthyThreshold = healthyThreshold
            self.intervalMillis = intervalMillis
            self.path = path
            self.port = port
            self.timeoutMillis = timeoutMillis
            self.unhealthyThreshold = unhealthyThreshold
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayHttp2ConnectionPool: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxRequests
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxRequests != 0 {
            try encodeContainer.encode(maxRequests, forKey: .maxRequests)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxRequestsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxRequests)
        maxRequests = maxRequestsDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayHttp2ConnectionPool: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayHttp2ConnectionPool(maxRequests: \(Swift.String(describing: maxRequests)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a type of connection pool.</p>
    public struct VirtualGatewayHttp2ConnectionPool: Swift.Equatable {
        /// <p>Maximum number of inflight requests Envoy can concurrently support across hosts in
        ///          upstream cluster.</p>
        public let maxRequests: Swift.Int

        public init (
            maxRequests: Swift.Int = 0
        )
        {
            self.maxRequests = maxRequests
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayHttpConnectionPool: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxConnections
        case maxPendingRequests
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxConnections != 0 {
            try encodeContainer.encode(maxConnections, forKey: .maxConnections)
        }
        if maxPendingRequests != 0 {
            try encodeContainer.encode(maxPendingRequests, forKey: .maxPendingRequests)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxConnectionsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxConnections)
        maxConnections = maxConnectionsDecoded
        let maxPendingRequestsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxPendingRequests)
        maxPendingRequests = maxPendingRequestsDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayHttpConnectionPool: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayHttpConnectionPool(maxConnections: \(Swift.String(describing: maxConnections)), maxPendingRequests: \(Swift.String(describing: maxPendingRequests)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a type of connection pool.</p>
    public struct VirtualGatewayHttpConnectionPool: Swift.Equatable {
        /// <p>Maximum number of outbound TCP connections Envoy can establish concurrently with all
        ///          hosts in upstream cluster.</p>
        public let maxConnections: Swift.Int
        /// <p>Number of overflowing requests after <code>max_connections</code> Envoy will queue to
        ///          upstream cluster.</p>
        public let maxPendingRequests: Swift.Int

        public init (
            maxConnections: Swift.Int = 0,
            maxPendingRequests: Swift.Int = 0
        )
        {
            self.maxConnections = maxConnections
            self.maxPendingRequests = maxPendingRequests
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayListener: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionPool
        case healthCheck
        case portMapping
        case tls
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionPool = connectionPool {
            try encodeContainer.encode(connectionPool, forKey: .connectionPool)
        }
        if let healthCheck = healthCheck {
            try encodeContainer.encode(healthCheck, forKey: .healthCheck)
        }
        if let portMapping = portMapping {
            try encodeContainer.encode(portMapping, forKey: .portMapping)
        }
        if let tls = tls {
            try encodeContainer.encode(tls, forKey: .tls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let healthCheckDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayHealthCheckPolicy.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
        let portMappingDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayPortMapping.self, forKey: .portMapping)
        portMapping = portMappingDecoded
        let tlsDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayListenerTls.self, forKey: .tls)
        tls = tlsDecoded
        let connectionPoolDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayConnectionPool.self, forKey: .connectionPool)
        connectionPool = connectionPoolDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayListener: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayListener(connectionPool: \(Swift.String(describing: connectionPool)), healthCheck: \(Swift.String(describing: healthCheck)), portMapping: \(Swift.String(describing: portMapping)), tls: \(Swift.String(describing: tls)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a listener for a virtual gateway.</p>
    public struct VirtualGatewayListener: Swift.Equatable {
        /// <p>The connection pool information for the virtual gateway listener.</p>
        public let connectionPool: AppMeshClientTypes.VirtualGatewayConnectionPool?
        /// <p>The health check information for the listener.</p>
        public let healthCheck: AppMeshClientTypes.VirtualGatewayHealthCheckPolicy?
        /// <p>The port mapping information for the listener.</p>
        public let portMapping: AppMeshClientTypes.VirtualGatewayPortMapping?
        /// <p>A reference to an object that represents the Transport Layer Security (TLS) properties for the listener.</p>
        public let tls: AppMeshClientTypes.VirtualGatewayListenerTls?

        public init (
            connectionPool: AppMeshClientTypes.VirtualGatewayConnectionPool? = nil,
            healthCheck: AppMeshClientTypes.VirtualGatewayHealthCheckPolicy? = nil,
            portMapping: AppMeshClientTypes.VirtualGatewayPortMapping? = nil,
            tls: AppMeshClientTypes.VirtualGatewayListenerTls? = nil
        )
        {
            self.connectionPool = connectionPool
            self.healthCheck = healthCheck
            self.portMapping = portMapping
            self.tls = tls
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayListenerTls: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate
        case mode
        case validation
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificate = certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let mode = mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let validation = validation {
            try encodeContainer.encode(validation, forKey: .validation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modeDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayListenerTlsMode.self, forKey: .mode)
        mode = modeDecoded
        let validationDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayListenerTlsValidationContext.self, forKey: .validation)
        validation = validationDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayListenerTlsCertificate.self, forKey: .certificate)
        certificate = certificateDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayListenerTls: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayListenerTls(certificate: \(Swift.String(describing: certificate)), mode: \(Swift.String(describing: mode)), validation: \(Swift.String(describing: validation)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the Transport Layer Security (TLS) properties for a listener.</p>
    public struct VirtualGatewayListenerTls: Swift.Equatable {
        /// <p>An object that represents a Transport Layer Security (TLS) certificate.</p>
        public let certificate: AppMeshClientTypes.VirtualGatewayListenerTlsCertificate?
        /// <p>Specify one of the following modes.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b/>STRICT – Listener only accepts connections with TLS
        ///                enabled. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b/>PERMISSIVE – Listener accepts connections with or
        ///                without TLS enabled.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b/>DISABLED – Listener only accepts connections without
        ///                TLS. </p>
        ///             </li>
        ///          </ul>
        public let mode: AppMeshClientTypes.VirtualGatewayListenerTlsMode?
        /// <p>A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation
        ///          context.</p>
        public let validation: AppMeshClientTypes.VirtualGatewayListenerTlsValidationContext?

        public init (
            certificate: AppMeshClientTypes.VirtualGatewayListenerTlsCertificate? = nil,
            mode: AppMeshClientTypes.VirtualGatewayListenerTlsMode? = nil,
            validation: AppMeshClientTypes.VirtualGatewayListenerTlsValidationContext? = nil
        )
        {
            self.certificate = certificate
            self.mode = mode
            self.validation = validation
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayListenerTlsAcmCertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayListenerTlsAcmCertificate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayListenerTlsAcmCertificate(certificateArn: \(Swift.String(describing: certificateArn)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents an AWS Certicate Manager (ACM) certificate.</p>
    public struct VirtualGatewayListenerTlsAcmCertificate: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.</p>
        public let certificateArn: Swift.String?

        public init (
            certificateArn: Swift.String? = nil
        )
        {
            self.certificateArn = certificateArn
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayListenerTlsCertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acm
        case file
        case sdkUnknown
        case sds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .acm(acm):
                try container.encode(acm, forKey: .acm)
            case let .file(file):
                try container.encode(file, forKey: .file)
            case let .sds(sds):
                try container.encode(sds, forKey: .sds)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let acmDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualGatewayListenerTlsAcmCertificate.self, forKey: .acm)
        if let acm = acmDecoded {
            self = .acm(acm)
            return
        }
        let fileDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualGatewayListenerTlsFileCertificate.self, forKey: .file)
        if let file = fileDecoded {
            self = .file(file)
            return
        }
        let sdsDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualGatewayListenerTlsSdsCertificate.self, forKey: .sds)
        if let sds = sdsDecoded {
            self = .sds(sds)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents a listener's Transport Layer Security (TLS) certificate.</p>
    public enum VirtualGatewayListenerTlsCertificate: Swift.Equatable {
        /// <p>A reference to an object that represents an AWS Certicate Manager (ACM) certificate.</p>
        case acm(AppMeshClientTypes.VirtualGatewayListenerTlsAcmCertificate)
        /// <p>A reference to an object that represents a local file certificate.</p>
        case file(AppMeshClientTypes.VirtualGatewayListenerTlsFileCertificate)
        /// <p>A reference to an object that represents a virtual gateway's listener's Secret Discovery
        ///          Service certificate.</p>
        case sds(AppMeshClientTypes.VirtualGatewayListenerTlsSdsCertificate)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.VirtualGatewayListenerTlsFileCertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateChain
        case privateKey
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateChain = certificateChain {
            try encodeContainer.encode(certificateChain, forKey: .certificateChain)
        }
        if let privateKey = privateKey {
            try encodeContainer.encode(privateKey, forKey: .privateKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateChainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateChain)
        certificateChain = certificateChainDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayListenerTlsFileCertificate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayListenerTlsFileCertificate(certificateChain: \(Swift.String(describing: certificateChain)), privateKey: \(Swift.String(describing: privateKey)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a local file certificate.
    ///          The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.</p>
    public struct VirtualGatewayListenerTlsFileCertificate: Swift.Equatable {
        /// <p>The certificate chain for the certificate.</p>
        public let certificateChain: Swift.String?
        /// <p>The private key for a certificate stored on the file system of the mesh endpoint that
        ///          the proxy is running on.</p>
        public let privateKey: Swift.String?

        public init (
            certificateChain: Swift.String? = nil,
            privateKey: Swift.String? = nil
        )
        {
            self.certificateChain = certificateChain
            self.privateKey = privateKey
        }
    }

}

extension AppMeshClientTypes {
    public enum VirtualGatewayListenerTlsMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case permissive
        case strict
        case sdkUnknown(Swift.String)

        public static var allCases: [VirtualGatewayListenerTlsMode] {
            return [
                .disabled,
                .permissive,
                .strict,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .permissive: return "PERMISSIVE"
            case .strict: return "STRICT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VirtualGatewayListenerTlsMode(rawValue: rawValue) ?? VirtualGatewayListenerTlsMode.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.VirtualGatewayListenerTlsSdsCertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case secretName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let secretName = secretName {
            try encodeContainer.encode(secretName, forKey: .secretName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let secretNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretName)
        secretName = secretNameDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayListenerTlsSdsCertificate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayListenerTlsSdsCertificate(secretName: \(Swift.String(describing: secretName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the virtual gateway's listener's Secret Discovery Service
    ///          certificate.The proxy must be configured with a local SDS provider via a Unix Domain
    ///          Socket. See App Mesh <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS
    ///             documentation</a> for more info. </p>
    public struct VirtualGatewayListenerTlsSdsCertificate: Swift.Equatable {
        /// <p>A reference to an object that represents the name of the secret secret requested from
        ///          the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or
        ///          certificate chain.</p>
        public let secretName: Swift.String?

        public init (
            secretName: Swift.String? = nil
        )
        {
            self.secretName = secretName
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayListenerTlsValidationContext: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subjectAlternativeNames
        case trust
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let subjectAlternativeNames = subjectAlternativeNames {
            try encodeContainer.encode(subjectAlternativeNames, forKey: .subjectAlternativeNames)
        }
        if let trust = trust {
            try encodeContainer.encode(trust, forKey: .trust)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trustDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayListenerTlsValidationContextTrust.self, forKey: .trust)
        trust = trustDecoded
        let subjectAlternativeNamesDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.SubjectAlternativeNames.self, forKey: .subjectAlternativeNames)
        subjectAlternativeNames = subjectAlternativeNamesDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayListenerTlsValidationContext: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayListenerTlsValidationContext(subjectAlternativeNames: \(Swift.String(describing: subjectAlternativeNames)), trust: \(Swift.String(describing: trust)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation
    ///          context.</p>
    public struct VirtualGatewayListenerTlsValidationContext: Swift.Equatable {
        /// <p>A reference to an object that represents the SANs for a virtual gateway listener's Transport Layer Security (TLS)
        ///          validation context.</p>
        public let subjectAlternativeNames: AppMeshClientTypes.SubjectAlternativeNames?
        /// <p>A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS)
        ///          certificate.</p>
        public let trust: AppMeshClientTypes.VirtualGatewayListenerTlsValidationContextTrust?

        public init (
            subjectAlternativeNames: AppMeshClientTypes.SubjectAlternativeNames? = nil,
            trust: AppMeshClientTypes.VirtualGatewayListenerTlsValidationContextTrust? = nil
        )
        {
            self.subjectAlternativeNames = subjectAlternativeNames
            self.trust = trust
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayListenerTlsValidationContextTrust: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case file
        case sdkUnknown
        case sds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .file(file):
                try container.encode(file, forKey: .file)
            case let .sds(sds):
                try container.encode(sds, forKey: .sds)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let fileDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualGatewayTlsValidationContextFileTrust.self, forKey: .file)
        if let file = fileDecoded {
            self = .file(file)
            return
        }
        let sdsDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualGatewayTlsValidationContextSdsTrust.self, forKey: .sds)
        if let sds = sdsDecoded {
            self = .sds(sds)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context
    ///          trust.</p>
    public enum VirtualGatewayListenerTlsValidationContextTrust: Swift.Equatable {
        /// <p>An object that represents a Transport Layer Security (TLS) validation context trust for a local file.</p>
        case file(AppMeshClientTypes.VirtualGatewayTlsValidationContextFileTrust)
        /// <p>A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret
        ///          Discovery Service validation context trust.</p>
        case sds(AppMeshClientTypes.VirtualGatewayTlsValidationContextSdsTrust)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.VirtualGatewayLogging: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessLog
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessLog = accessLog {
            try encodeContainer.encode(accessLog, forKey: .accessLog)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessLogDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayAccessLog.self, forKey: .accessLog)
        accessLog = accessLogDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayLogging: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayLogging(accessLog: \(Swift.String(describing: accessLog)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents logging information.</p>
    public struct VirtualGatewayLogging: Swift.Equatable {
        /// <p>The access log configuration.</p>
        public let accessLog: AppMeshClientTypes.VirtualGatewayAccessLog?

        public init (
            accessLog: AppMeshClientTypes.VirtualGatewayAccessLog? = nil
        )
        {
            self.accessLog = accessLog
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayPortMapping: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case port
        case `protocol` = "protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portDecoded = try containerValues.decode(Swift.Int.self, forKey: .port)
        port = portDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayPortProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayPortMapping: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayPortMapping(port: \(Swift.String(describing: port)), protocol: \(Swift.String(describing: `protocol`)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a port mapping.</p>
    public struct VirtualGatewayPortMapping: Swift.Equatable {
        /// <p>The protocol used for the port mapping.</p>
        public let `protocol`: AppMeshClientTypes.VirtualGatewayPortProtocol?
        /// <p>The port used for the port mapping. Specify one protocol.</p>
        public let port: Swift.Int

        public init (
            `protocol`: AppMeshClientTypes.VirtualGatewayPortProtocol? = nil,
            port: Swift.Int = 0
        )
        {
            self.`protocol` = `protocol`
            self.port = port
        }
    }

}

extension AppMeshClientTypes {
    public enum VirtualGatewayPortProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case grpc
        case http
        case http2
        case sdkUnknown(Swift.String)

        public static var allCases: [VirtualGatewayPortProtocol] {
            return [
                .grpc,
                .http,
                .http2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .grpc: return "grpc"
            case .http: return "http"
            case .http2: return "http2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VirtualGatewayPortProtocol(rawValue: rawValue) ?? VirtualGatewayPortProtocol.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.VirtualGatewayRef: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case lastUpdatedAt
        case meshName
        case meshOwner
        case resourceOwner
        case version
        case virtualGatewayName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let meshOwner = meshOwner {
            try encodeContainer.encode(meshOwner, forKey: .meshOwner)
        }
        if let resourceOwner = resourceOwner {
            try encodeContainer.encode(resourceOwner, forKey: .resourceOwner)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let virtualGatewayName = virtualGatewayName {
            try encodeContainer.encode(virtualGatewayName, forKey: .virtualGatewayName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let virtualGatewayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayName)
        virtualGatewayName = virtualGatewayNameDecoded
        let meshOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshOwner)
        meshOwner = meshOwnerDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayRef: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayRef(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), resourceOwner: \(Swift.String(describing: resourceOwner)), version: \(Swift.String(describing: version)), virtualGatewayName: \(Swift.String(describing: virtualGatewayName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual gateway returned by a list operation.</p>
    public struct VirtualGatewayRef: Swift.Equatable {
        /// <p>The full Amazon Resource Name (ARN) for the resource.</p>
        public let arn: Swift.String?
        /// <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The Unix epoch timestamp in seconds for when the resource was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The name of the service mesh that the resource resides in.</p>
        public let meshName: Swift.String?
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let meshOwner: Swift.String?
        /// <p>The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's
        ///                the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let resourceOwner: Swift.String?
        /// <p>The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.</p>
        public let version: Swift.Int?
        /// <p>The name of the resource.</p>
        public let virtualGatewayName: Swift.String?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            meshName: Swift.String? = nil,
            meshOwner: Swift.String? = nil,
            resourceOwner: Swift.String? = nil,
            version: Swift.Int? = nil,
            virtualGatewayName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.lastUpdatedAt = lastUpdatedAt
            self.meshName = meshName
            self.meshOwner = meshOwner
            self.resourceOwner = resourceOwner
            self.version = version
            self.virtualGatewayName = virtualGatewayName
        }
    }

}

extension AppMeshClientTypes.VirtualGatewaySpec: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backendDefaults
        case listeners
        case logging
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backendDefaults = backendDefaults {
            try encodeContainer.encode(backendDefaults, forKey: .backendDefaults)
        }
        if let listeners = listeners {
            var listenersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .listeners)
            for virtualgatewaylisteners0 in listeners {
                try listenersContainer.encode(virtualgatewaylisteners0)
            }
        }
        if let logging = logging {
            try encodeContainer.encode(logging, forKey: .logging)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backendDefaultsDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayBackendDefaults.self, forKey: .backendDefaults)
        backendDefaults = backendDefaultsDecoded
        let listenersContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.VirtualGatewayListener?].self, forKey: .listeners)
        var listenersDecoded0:[AppMeshClientTypes.VirtualGatewayListener]? = nil
        if let listenersContainer = listenersContainer {
            listenersDecoded0 = [AppMeshClientTypes.VirtualGatewayListener]()
            for structure0 in listenersContainer {
                if let structure0 = structure0 {
                    listenersDecoded0?.append(structure0)
                }
            }
        }
        listeners = listenersDecoded0
        let loggingDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayLogging.self, forKey: .logging)
        logging = loggingDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewaySpec: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewaySpec(backendDefaults: \(Swift.String(describing: backendDefaults)), listeners: \(Swift.String(describing: listeners)), logging: \(Swift.String(describing: logging)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the specification of a service mesh resource.</p>
    public struct VirtualGatewaySpec: Swift.Equatable {
        /// <p>A reference to an object that represents the defaults for backends.</p>
        public let backendDefaults: AppMeshClientTypes.VirtualGatewayBackendDefaults?
        /// <p>The listeners that the mesh endpoint is expected to receive inbound traffic from. You
        ///          can specify one listener.</p>
        public let listeners: [AppMeshClientTypes.VirtualGatewayListener]?
        /// <p>An object that represents logging information.</p>
        public let logging: AppMeshClientTypes.VirtualGatewayLogging?

        public init (
            backendDefaults: AppMeshClientTypes.VirtualGatewayBackendDefaults? = nil,
            listeners: [AppMeshClientTypes.VirtualGatewayListener]? = nil,
            logging: AppMeshClientTypes.VirtualGatewayLogging? = nil
        )
        {
            self.backendDefaults = backendDefaults
            self.listeners = listeners
            self.logging = logging
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayStatusCode.self, forKey: .status)
        status = statusDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayStatus(status: \(Swift.String(describing: status)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the status of the mesh resource.</p>
    public struct VirtualGatewayStatus: Swift.Equatable {
        /// <p>The current status.</p>
        public let status: AppMeshClientTypes.VirtualGatewayStatusCode?

        public init (
            status: AppMeshClientTypes.VirtualGatewayStatusCode? = nil
        )
        {
            self.status = status
        }
    }

}

extension AppMeshClientTypes {
    public enum VirtualGatewayStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleted
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [VirtualGatewayStatusCode] {
            return [
                .active,
                .deleted,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VirtualGatewayStatusCode(rawValue: rawValue) ?? VirtualGatewayStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.VirtualGatewayTlsValidationContext: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subjectAlternativeNames
        case trust
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let subjectAlternativeNames = subjectAlternativeNames {
            try encodeContainer.encode(subjectAlternativeNames, forKey: .subjectAlternativeNames)
        }
        if let trust = trust {
            try encodeContainer.encode(trust, forKey: .trust)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trustDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayTlsValidationContextTrust.self, forKey: .trust)
        trust = trustDecoded
        let subjectAlternativeNamesDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.SubjectAlternativeNames.self, forKey: .subjectAlternativeNames)
        subjectAlternativeNames = subjectAlternativeNamesDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayTlsValidationContext: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayTlsValidationContext(subjectAlternativeNames: \(Swift.String(describing: subjectAlternativeNames)), trust: \(Swift.String(describing: trust)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a Transport Layer Security (TLS) validation context.</p>
    public struct VirtualGatewayTlsValidationContext: Swift.Equatable {
        /// <p>A reference to an object that represents the SANs for a virtual gateway's listener's
        ///          Transport Layer Security (TLS) validation context.</p>
        public let subjectAlternativeNames: AppMeshClientTypes.SubjectAlternativeNames?
        /// <p>A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS)
        ///          certificate.</p>
        public let trust: AppMeshClientTypes.VirtualGatewayTlsValidationContextTrust?

        public init (
            subjectAlternativeNames: AppMeshClientTypes.SubjectAlternativeNames? = nil,
            trust: AppMeshClientTypes.VirtualGatewayTlsValidationContextTrust? = nil
        )
        {
            self.subjectAlternativeNames = subjectAlternativeNames
            self.trust = trust
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayTlsValidationContextAcmTrust: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityArns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityArns = certificateAuthorityArns {
            var certificateAuthorityArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificateAuthorityArns)
            for virtualgatewaycertificateauthorityarns0 in certificateAuthorityArns {
                try certificateAuthorityArnsContainer.encode(virtualgatewaycertificateauthorityarns0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateAuthorityArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .certificateAuthorityArns)
        var certificateAuthorityArnsDecoded0:[Swift.String]? = nil
        if let certificateAuthorityArnsContainer = certificateAuthorityArnsContainer {
            certificateAuthorityArnsDecoded0 = [Swift.String]()
            for string0 in certificateAuthorityArnsContainer {
                if let string0 = string0 {
                    certificateAuthorityArnsDecoded0?.append(string0)
                }
            }
        }
        certificateAuthorityArns = certificateAuthorityArnsDecoded0
    }
}

extension AppMeshClientTypes.VirtualGatewayTlsValidationContextAcmTrust: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayTlsValidationContextAcmTrust(certificateAuthorityArns: \(Swift.String(describing: certificateAuthorityArns)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a Transport Layer Security (TLS) validation context trust for an AWS Certicate Manager (ACM)
    ///          certificate.</p>
    public struct VirtualGatewayTlsValidationContextAcmTrust: Swift.Equatable {
        /// <p>One or more ACM Amazon Resource Name (ARN)s.</p>
        public let certificateAuthorityArns: [Swift.String]?

        public init (
            certificateAuthorityArns: [Swift.String]? = nil
        )
        {
            self.certificateAuthorityArns = certificateAuthorityArns
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayTlsValidationContextFileTrust: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateChain
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateChain = certificateChain {
            try encodeContainer.encode(certificateChain, forKey: .certificateChain)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateChainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateChain)
        certificateChain = certificateChainDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayTlsValidationContextFileTrust: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayTlsValidationContextFileTrust(certificateChain: \(Swift.String(describing: certificateChain)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a Transport Layer Security (TLS) validation context trust for a local file.</p>
    public struct VirtualGatewayTlsValidationContextFileTrust: Swift.Equatable {
        /// <p>The certificate trust chain for a certificate stored on the file system of the virtual
        ///          node that the proxy is running on.</p>
        public let certificateChain: Swift.String?

        public init (
            certificateChain: Swift.String? = nil
        )
        {
            self.certificateChain = certificateChain
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayTlsValidationContextSdsTrust: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case secretName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let secretName = secretName {
            try encodeContainer.encode(secretName, forKey: .secretName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let secretNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretName)
        secretName = secretNameDecoded
    }
}

extension AppMeshClientTypes.VirtualGatewayTlsValidationContextSdsTrust: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualGatewayTlsValidationContextSdsTrust(secretName: \(Swift.String(describing: secretName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret Discovery Service
    ///          validation context trust. The proxy must be configured with a local SDS provider via a Unix
    ///          Domain Socket. See App Mesh <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS
    ///             documentation</a> for more info.</p>
    public struct VirtualGatewayTlsValidationContextSdsTrust: Swift.Equatable {
        /// <p>A reference to an object that represents the name of the secret for a virtual gateway's
        ///          Transport Layer Security (TLS) Secret Discovery Service validation context trust.</p>
        public let secretName: Swift.String?

        public init (
            secretName: Swift.String? = nil
        )
        {
            self.secretName = secretName
        }
    }

}

extension AppMeshClientTypes.VirtualGatewayTlsValidationContextTrust: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acm
        case file
        case sdkUnknown
        case sds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .acm(acm):
                try container.encode(acm, forKey: .acm)
            case let .file(file):
                try container.encode(file, forKey: .file)
            case let .sds(sds):
                try container.encode(sds, forKey: .sds)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let acmDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualGatewayTlsValidationContextAcmTrust.self, forKey: .acm)
        if let acm = acmDecoded {
            self = .acm(acm)
            return
        }
        let fileDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualGatewayTlsValidationContextFileTrust.self, forKey: .file)
        if let file = fileDecoded {
            self = .file(file)
            return
        }
        let sdsDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualGatewayTlsValidationContextSdsTrust.self, forKey: .sds)
        if let sds = sdsDecoded {
            self = .sds(sds)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents a Transport Layer Security (TLS) validation context trust.</p>
    public enum VirtualGatewayTlsValidationContextTrust: Swift.Equatable {
        /// <p>A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an
        ///          AWS Certicate Manager (ACM) certificate.</p>
        case acm(AppMeshClientTypes.VirtualGatewayTlsValidationContextAcmTrust)
        /// <p>An object that represents a Transport Layer Security (TLS) validation context trust for a local file.</p>
        case file(AppMeshClientTypes.VirtualGatewayTlsValidationContextFileTrust)
        /// <p>A reference to an object that represents a virtual gateway's Transport Layer Security (TLS) Secret Discovery
        ///          Service validation context trust.</p>
        case sds(AppMeshClientTypes.VirtualGatewayTlsValidationContextSdsTrust)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.VirtualNodeConnectionPool: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grpc
        case http
        case http2
        case sdkUnknown
        case tcp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .grpc(grpc):
                try container.encode(grpc, forKey: .grpc)
            case let .http(http):
                try container.encode(http, forKey: .http)
            case let .http2(http2):
                try container.encode(http2, forKey: .http2)
            case let .tcp(tcp):
                try container.encode(tcp, forKey: .tcp)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let tcpDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualNodeTcpConnectionPool.self, forKey: .tcp)
        if let tcp = tcpDecoded {
            self = .tcp(tcp)
            return
        }
        let httpDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualNodeHttpConnectionPool.self, forKey: .http)
        if let http = httpDecoded {
            self = .http(http)
            return
        }
        let http2Decoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualNodeHttp2ConnectionPool.self, forKey: .http2)
        if let http2 = http2Decoded {
            self = .http2(http2)
            return
        }
        let grpcDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualNodeGrpcConnectionPool.self, forKey: .grpc)
        if let grpc = grpcDecoded {
            self = .grpc(grpc)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents the type of virtual node connection pool.</p>
    ///          <p>Only one protocol is used at a time and should be the same protocol as the one chosen
    ///          under port mapping.</p>
    ///          <p>If not present the default value for <code>maxPendingRequests</code> is
    ///             <code>2147483647</code>.</p>
    ///          <p/>
    public enum VirtualNodeConnectionPool: Swift.Equatable {
        /// <p>An object that represents a type of connection pool.</p>
        case tcp(AppMeshClientTypes.VirtualNodeTcpConnectionPool)
        /// <p>An object that represents a type of connection pool.</p>
        case http(AppMeshClientTypes.VirtualNodeHttpConnectionPool)
        /// <p>An object that represents a type of connection pool.</p>
        case http2(AppMeshClientTypes.VirtualNodeHttp2ConnectionPool)
        /// <p>An object that represents a type of connection pool.</p>
        case grpc(AppMeshClientTypes.VirtualNodeGrpcConnectionPool)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.VirtualNodeData: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case meshName
        case metadata
        case spec
        case status
        case virtualNodeName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let metadata = metadata {
            try encodeContainer.encode(metadata, forKey: .metadata)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let virtualNodeName = virtualNodeName {
            try encodeContainer.encode(virtualNodeName, forKey: .virtualNodeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let virtualNodeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualNodeName)
        virtualNodeName = virtualNodeNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualNodeSpec.self, forKey: .spec)
        spec = specDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ResourceMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualNodeStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension AppMeshClientTypes.VirtualNodeData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualNodeData(meshName: \(Swift.String(describing: meshName)), metadata: \(Swift.String(describing: metadata)), spec: \(Swift.String(describing: spec)), status: \(Swift.String(describing: status)), virtualNodeName: \(Swift.String(describing: virtualNodeName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual node returned by a describe operation.</p>
    public struct VirtualNodeData: Swift.Equatable {
        /// <p>The name of the service mesh that the virtual node resides in.</p>
        public let meshName: Swift.String?
        /// <p>The associated metadata for the virtual node.</p>
        public let metadata: AppMeshClientTypes.ResourceMetadata?
        /// <p>The specifications of the virtual node.</p>
        public let spec: AppMeshClientTypes.VirtualNodeSpec?
        /// <p>The current status for the virtual node.</p>
        public let status: AppMeshClientTypes.VirtualNodeStatus?
        /// <p>The name of the virtual node.</p>
        public let virtualNodeName: Swift.String?

        public init (
            meshName: Swift.String? = nil,
            metadata: AppMeshClientTypes.ResourceMetadata? = nil,
            spec: AppMeshClientTypes.VirtualNodeSpec? = nil,
            status: AppMeshClientTypes.VirtualNodeStatus? = nil,
            virtualNodeName: Swift.String? = nil
        )
        {
            self.meshName = meshName
            self.metadata = metadata
            self.spec = spec
            self.status = status
            self.virtualNodeName = virtualNodeName
        }
    }

}

extension AppMeshClientTypes.VirtualNodeGrpcConnectionPool: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxRequests
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxRequests != 0 {
            try encodeContainer.encode(maxRequests, forKey: .maxRequests)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxRequestsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxRequests)
        maxRequests = maxRequestsDecoded
    }
}

extension AppMeshClientTypes.VirtualNodeGrpcConnectionPool: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualNodeGrpcConnectionPool(maxRequests: \(Swift.String(describing: maxRequests)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a type of connection pool.</p>
    public struct VirtualNodeGrpcConnectionPool: Swift.Equatable {
        /// <p>Maximum number of inflight requests Envoy can concurrently support across hosts in
        ///          upstream cluster.</p>
        public let maxRequests: Swift.Int

        public init (
            maxRequests: Swift.Int = 0
        )
        {
            self.maxRequests = maxRequests
        }
    }

}

extension AppMeshClientTypes.VirtualNodeHttp2ConnectionPool: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxRequests
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxRequests != 0 {
            try encodeContainer.encode(maxRequests, forKey: .maxRequests)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxRequestsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxRequests)
        maxRequests = maxRequestsDecoded
    }
}

extension AppMeshClientTypes.VirtualNodeHttp2ConnectionPool: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualNodeHttp2ConnectionPool(maxRequests: \(Swift.String(describing: maxRequests)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a type of connection pool.</p>
    public struct VirtualNodeHttp2ConnectionPool: Swift.Equatable {
        /// <p>Maximum number of inflight requests Envoy can concurrently support across hosts in
        ///          upstream cluster.</p>
        public let maxRequests: Swift.Int

        public init (
            maxRequests: Swift.Int = 0
        )
        {
            self.maxRequests = maxRequests
        }
    }

}

extension AppMeshClientTypes.VirtualNodeHttpConnectionPool: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxConnections
        case maxPendingRequests
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxConnections != 0 {
            try encodeContainer.encode(maxConnections, forKey: .maxConnections)
        }
        if maxPendingRequests != 0 {
            try encodeContainer.encode(maxPendingRequests, forKey: .maxPendingRequests)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxConnectionsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxConnections)
        maxConnections = maxConnectionsDecoded
        let maxPendingRequestsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxPendingRequests)
        maxPendingRequests = maxPendingRequestsDecoded
    }
}

extension AppMeshClientTypes.VirtualNodeHttpConnectionPool: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualNodeHttpConnectionPool(maxConnections: \(Swift.String(describing: maxConnections)), maxPendingRequests: \(Swift.String(describing: maxPendingRequests)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a type of connection pool.</p>
    public struct VirtualNodeHttpConnectionPool: Swift.Equatable {
        /// <p>Maximum number of outbound TCP connections Envoy can establish concurrently with all
        ///          hosts in upstream cluster.</p>
        public let maxConnections: Swift.Int
        /// <p>Number of overflowing requests after <code>max_connections</code> Envoy will queue to
        ///          upstream cluster.</p>
        public let maxPendingRequests: Swift.Int

        public init (
            maxConnections: Swift.Int = 0,
            maxPendingRequests: Swift.Int = 0
        )
        {
            self.maxConnections = maxConnections
            self.maxPendingRequests = maxPendingRequests
        }
    }

}

extension AppMeshClientTypes.VirtualNodeRef: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case lastUpdatedAt
        case meshName
        case meshOwner
        case resourceOwner
        case version
        case virtualNodeName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let meshOwner = meshOwner {
            try encodeContainer.encode(meshOwner, forKey: .meshOwner)
        }
        if let resourceOwner = resourceOwner {
            try encodeContainer.encode(resourceOwner, forKey: .resourceOwner)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let virtualNodeName = virtualNodeName {
            try encodeContainer.encode(virtualNodeName, forKey: .virtualNodeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let virtualNodeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualNodeName)
        virtualNodeName = virtualNodeNameDecoded
        let meshOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshOwner)
        meshOwner = meshOwnerDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
    }
}

extension AppMeshClientTypes.VirtualNodeRef: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualNodeRef(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), resourceOwner: \(Swift.String(describing: resourceOwner)), version: \(Swift.String(describing: version)), virtualNodeName: \(Swift.String(describing: virtualNodeName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual node returned by a list operation.</p>
    public struct VirtualNodeRef: Swift.Equatable {
        /// <p>The full Amazon Resource Name (ARN) for the virtual node.</p>
        public let arn: Swift.String?
        /// <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The Unix epoch timestamp in seconds for when the resource was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The name of the service mesh that the virtual node resides in.</p>
        public let meshName: Swift.String?
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let meshOwner: Swift.String?
        /// <p>The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's
        ///                the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let resourceOwner: Swift.String?
        /// <p>The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.</p>
        public let version: Swift.Int?
        /// <p>The name of the virtual node.</p>
        public let virtualNodeName: Swift.String?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            meshName: Swift.String? = nil,
            meshOwner: Swift.String? = nil,
            resourceOwner: Swift.String? = nil,
            version: Swift.Int? = nil,
            virtualNodeName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.lastUpdatedAt = lastUpdatedAt
            self.meshName = meshName
            self.meshOwner = meshOwner
            self.resourceOwner = resourceOwner
            self.version = version
            self.virtualNodeName = virtualNodeName
        }
    }

}

extension AppMeshClientTypes.VirtualNodeServiceProvider: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualNodeName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let virtualNodeName = virtualNodeName {
            try encodeContainer.encode(virtualNodeName, forKey: .virtualNodeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualNodeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualNodeName)
        virtualNodeName = virtualNodeNameDecoded
    }
}

extension AppMeshClientTypes.VirtualNodeServiceProvider: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualNodeServiceProvider(virtualNodeName: \(Swift.String(describing: virtualNodeName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual node service provider.</p>
    public struct VirtualNodeServiceProvider: Swift.Equatable {
        /// <p>The name of the virtual node that is acting as a service provider.</p>
        public let virtualNodeName: Swift.String?

        public init (
            virtualNodeName: Swift.String? = nil
        )
        {
            self.virtualNodeName = virtualNodeName
        }
    }

}

extension AppMeshClientTypes.VirtualNodeSpec: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backendDefaults
        case backends
        case listeners
        case logging
        case serviceDiscovery
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backendDefaults = backendDefaults {
            try encodeContainer.encode(backendDefaults, forKey: .backendDefaults)
        }
        if let backends = backends {
            var backendsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .backends)
            for backends0 in backends {
                try backendsContainer.encode(backends0)
            }
        }
        if let listeners = listeners {
            var listenersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .listeners)
            for listeners0 in listeners {
                try listenersContainer.encode(listeners0)
            }
        }
        if let logging = logging {
            try encodeContainer.encode(logging, forKey: .logging)
        }
        if let serviceDiscovery = serviceDiscovery {
            try encodeContainer.encode(serviceDiscovery, forKey: .serviceDiscovery)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceDiscoveryDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ServiceDiscovery.self, forKey: .serviceDiscovery)
        serviceDiscovery = serviceDiscoveryDecoded
        let listenersContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.Listener?].self, forKey: .listeners)
        var listenersDecoded0:[AppMeshClientTypes.Listener]? = nil
        if let listenersContainer = listenersContainer {
            listenersDecoded0 = [AppMeshClientTypes.Listener]()
            for structure0 in listenersContainer {
                if let structure0 = structure0 {
                    listenersDecoded0?.append(structure0)
                }
            }
        }
        listeners = listenersDecoded0
        let backendsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.Backend?].self, forKey: .backends)
        var backendsDecoded0:[AppMeshClientTypes.Backend]? = nil
        if let backendsContainer = backendsContainer {
            backendsDecoded0 = [AppMeshClientTypes.Backend]()
            for union0 in backendsContainer {
                if let union0 = union0 {
                    backendsDecoded0?.append(union0)
                }
            }
        }
        backends = backendsDecoded0
        let backendDefaultsDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.BackendDefaults.self, forKey: .backendDefaults)
        backendDefaults = backendDefaultsDecoded
        let loggingDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.Logging.self, forKey: .logging)
        logging = loggingDecoded
    }
}

extension AppMeshClientTypes.VirtualNodeSpec: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualNodeSpec(backendDefaults: \(Swift.String(describing: backendDefaults)), backends: \(Swift.String(describing: backends)), listeners: \(Swift.String(describing: listeners)), logging: \(Swift.String(describing: logging)), serviceDiscovery: \(Swift.String(describing: serviceDiscovery)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the specification of a virtual node.</p>
    public struct VirtualNodeSpec: Swift.Equatable {
        /// <p>A reference to an object that represents the defaults for backends.</p>
        public let backendDefaults: AppMeshClientTypes.BackendDefaults?
        /// <p>The backends that the virtual node is expected to send outbound traffic to.</p>
        public let backends: [AppMeshClientTypes.Backend]?
        /// <p>The listener that the virtual node is expected to receive inbound traffic from. You can
        ///          specify one listener.</p>
        public let listeners: [AppMeshClientTypes.Listener]?
        /// <p>The inbound and outbound access logging information for the virtual node.</p>
        public let logging: AppMeshClientTypes.Logging?
        /// <p>The service discovery information for the virtual node. If your virtual node does not
        ///          expect ingress traffic, you can omit this parameter. If you specify a
        ///          <code>listener</code>, then you must specify service discovery information.</p>
        public let serviceDiscovery: AppMeshClientTypes.ServiceDiscovery?

        public init (
            backendDefaults: AppMeshClientTypes.BackendDefaults? = nil,
            backends: [AppMeshClientTypes.Backend]? = nil,
            listeners: [AppMeshClientTypes.Listener]? = nil,
            logging: AppMeshClientTypes.Logging? = nil,
            serviceDiscovery: AppMeshClientTypes.ServiceDiscovery? = nil
        )
        {
            self.backendDefaults = backendDefaults
            self.backends = backends
            self.listeners = listeners
            self.logging = logging
            self.serviceDiscovery = serviceDiscovery
        }
    }

}

extension AppMeshClientTypes.VirtualNodeStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualNodeStatusCode.self, forKey: .status)
        status = statusDecoded
    }
}

extension AppMeshClientTypes.VirtualNodeStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualNodeStatus(status: \(Swift.String(describing: status)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the current status of the virtual node.</p>
    public struct VirtualNodeStatus: Swift.Equatable {
        /// <p>The current status of the virtual node.</p>
        public let status: AppMeshClientTypes.VirtualNodeStatusCode?

        public init (
            status: AppMeshClientTypes.VirtualNodeStatusCode? = nil
        )
        {
            self.status = status
        }
    }

}

extension AppMeshClientTypes {
    public enum VirtualNodeStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleted
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [VirtualNodeStatusCode] {
            return [
                .active,
                .deleted,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VirtualNodeStatusCode(rawValue: rawValue) ?? VirtualNodeStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.VirtualNodeTcpConnectionPool: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxConnections
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxConnections != 0 {
            try encodeContainer.encode(maxConnections, forKey: .maxConnections)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxConnectionsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxConnections)
        maxConnections = maxConnectionsDecoded
    }
}

extension AppMeshClientTypes.VirtualNodeTcpConnectionPool: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualNodeTcpConnectionPool(maxConnections: \(Swift.String(describing: maxConnections)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a type of connection pool.</p>
    public struct VirtualNodeTcpConnectionPool: Swift.Equatable {
        /// <p>Maximum number of outbound TCP connections Envoy can establish concurrently with all
        ///          hosts in upstream cluster.</p>
        public let maxConnections: Swift.Int

        public init (
            maxConnections: Swift.Int = 0
        )
        {
            self.maxConnections = maxConnections
        }
    }

}

extension AppMeshClientTypes.VirtualRouterData: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case meshName
        case metadata
        case spec
        case status
        case virtualRouterName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let metadata = metadata {
            try encodeContainer.encode(metadata, forKey: .metadata)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let virtualRouterName = virtualRouterName {
            try encodeContainer.encode(virtualRouterName, forKey: .virtualRouterName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let virtualRouterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualRouterName)
        virtualRouterName = virtualRouterNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualRouterSpec.self, forKey: .spec)
        spec = specDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ResourceMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualRouterStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension AppMeshClientTypes.VirtualRouterData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualRouterData(meshName: \(Swift.String(describing: meshName)), metadata: \(Swift.String(describing: metadata)), spec: \(Swift.String(describing: spec)), status: \(Swift.String(describing: status)), virtualRouterName: \(Swift.String(describing: virtualRouterName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual router returned by a describe operation.</p>
    public struct VirtualRouterData: Swift.Equatable {
        /// <p>The name of the service mesh that the virtual router resides in.</p>
        public let meshName: Swift.String?
        /// <p>The associated metadata for the virtual router.</p>
        public let metadata: AppMeshClientTypes.ResourceMetadata?
        /// <p>The specifications of the virtual router.</p>
        public let spec: AppMeshClientTypes.VirtualRouterSpec?
        /// <p>The current status of the virtual router.</p>
        public let status: AppMeshClientTypes.VirtualRouterStatus?
        /// <p>The name of the virtual router.</p>
        public let virtualRouterName: Swift.String?

        public init (
            meshName: Swift.String? = nil,
            metadata: AppMeshClientTypes.ResourceMetadata? = nil,
            spec: AppMeshClientTypes.VirtualRouterSpec? = nil,
            status: AppMeshClientTypes.VirtualRouterStatus? = nil,
            virtualRouterName: Swift.String? = nil
        )
        {
            self.meshName = meshName
            self.metadata = metadata
            self.spec = spec
            self.status = status
            self.virtualRouterName = virtualRouterName
        }
    }

}

extension AppMeshClientTypes.VirtualRouterListener: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case portMapping
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let portMapping = portMapping {
            try encodeContainer.encode(portMapping, forKey: .portMapping)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portMappingDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.PortMapping.self, forKey: .portMapping)
        portMapping = portMappingDecoded
    }
}

extension AppMeshClientTypes.VirtualRouterListener: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualRouterListener(portMapping: \(Swift.String(describing: portMapping)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual router listener.</p>
    public struct VirtualRouterListener: Swift.Equatable {
        /// <p>An object that represents a port mapping.</p>
        public let portMapping: AppMeshClientTypes.PortMapping?

        public init (
            portMapping: AppMeshClientTypes.PortMapping? = nil
        )
        {
            self.portMapping = portMapping
        }
    }

}

extension AppMeshClientTypes.VirtualRouterRef: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case lastUpdatedAt
        case meshName
        case meshOwner
        case resourceOwner
        case version
        case virtualRouterName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let meshOwner = meshOwner {
            try encodeContainer.encode(meshOwner, forKey: .meshOwner)
        }
        if let resourceOwner = resourceOwner {
            try encodeContainer.encode(resourceOwner, forKey: .resourceOwner)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let virtualRouterName = virtualRouterName {
            try encodeContainer.encode(virtualRouterName, forKey: .virtualRouterName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let virtualRouterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualRouterName)
        virtualRouterName = virtualRouterNameDecoded
        let meshOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshOwner)
        meshOwner = meshOwnerDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
    }
}

extension AppMeshClientTypes.VirtualRouterRef: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualRouterRef(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), resourceOwner: \(Swift.String(describing: resourceOwner)), version: \(Swift.String(describing: version)), virtualRouterName: \(Swift.String(describing: virtualRouterName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual router returned by a list operation.</p>
    public struct VirtualRouterRef: Swift.Equatable {
        /// <p>The full Amazon Resource Name (ARN) for the virtual router.</p>
        public let arn: Swift.String?
        /// <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The Unix epoch timestamp in seconds for when the resource was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The name of the service mesh that the virtual router resides in.</p>
        public let meshName: Swift.String?
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let meshOwner: Swift.String?
        /// <p>The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's
        ///                the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let resourceOwner: Swift.String?
        /// <p>The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.</p>
        public let version: Swift.Int?
        /// <p>The name of the virtual router.</p>
        public let virtualRouterName: Swift.String?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            meshName: Swift.String? = nil,
            meshOwner: Swift.String? = nil,
            resourceOwner: Swift.String? = nil,
            version: Swift.Int? = nil,
            virtualRouterName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.lastUpdatedAt = lastUpdatedAt
            self.meshName = meshName
            self.meshOwner = meshOwner
            self.resourceOwner = resourceOwner
            self.version = version
            self.virtualRouterName = virtualRouterName
        }
    }

}

extension AppMeshClientTypes.VirtualRouterServiceProvider: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualRouterName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let virtualRouterName = virtualRouterName {
            try encodeContainer.encode(virtualRouterName, forKey: .virtualRouterName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualRouterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualRouterName)
        virtualRouterName = virtualRouterNameDecoded
    }
}

extension AppMeshClientTypes.VirtualRouterServiceProvider: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualRouterServiceProvider(virtualRouterName: \(Swift.String(describing: virtualRouterName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual node service provider.</p>
    public struct VirtualRouterServiceProvider: Swift.Equatable {
        /// <p>The name of the virtual router that is acting as a service provider.</p>
        public let virtualRouterName: Swift.String?

        public init (
            virtualRouterName: Swift.String? = nil
        )
        {
            self.virtualRouterName = virtualRouterName
        }
    }

}

extension AppMeshClientTypes.VirtualRouterSpec: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case listeners
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let listeners = listeners {
            var listenersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .listeners)
            for virtualrouterlisteners0 in listeners {
                try listenersContainer.encode(virtualrouterlisteners0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let listenersContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.VirtualRouterListener?].self, forKey: .listeners)
        var listenersDecoded0:[AppMeshClientTypes.VirtualRouterListener]? = nil
        if let listenersContainer = listenersContainer {
            listenersDecoded0 = [AppMeshClientTypes.VirtualRouterListener]()
            for structure0 in listenersContainer {
                if let structure0 = structure0 {
                    listenersDecoded0?.append(structure0)
                }
            }
        }
        listeners = listenersDecoded0
    }
}

extension AppMeshClientTypes.VirtualRouterSpec: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualRouterSpec(listeners: \(Swift.String(describing: listeners)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the specification of a virtual router.</p>
    public struct VirtualRouterSpec: Swift.Equatable {
        /// <p>The listeners that the virtual router is expected to receive inbound traffic from. You
        ///          can specify one listener.</p>
        public let listeners: [AppMeshClientTypes.VirtualRouterListener]?

        public init (
            listeners: [AppMeshClientTypes.VirtualRouterListener]? = nil
        )
        {
            self.listeners = listeners
        }
    }

}

extension AppMeshClientTypes.VirtualRouterStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualRouterStatusCode.self, forKey: .status)
        status = statusDecoded
    }
}

extension AppMeshClientTypes.VirtualRouterStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualRouterStatus(status: \(Swift.String(describing: status)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the status of a virtual router. </p>
    public struct VirtualRouterStatus: Swift.Equatable {
        /// <p>The current status of the virtual router.</p>
        public let status: AppMeshClientTypes.VirtualRouterStatusCode?

        public init (
            status: AppMeshClientTypes.VirtualRouterStatusCode? = nil
        )
        {
            self.status = status
        }
    }

}

extension AppMeshClientTypes {
    public enum VirtualRouterStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleted
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [VirtualRouterStatusCode] {
            return [
                .active,
                .deleted,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VirtualRouterStatusCode(rawValue: rawValue) ?? VirtualRouterStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.VirtualServiceBackend: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientPolicy
        case virtualServiceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientPolicy = clientPolicy {
            try encodeContainer.encode(clientPolicy, forKey: .clientPolicy)
        }
        if let virtualServiceName = virtualServiceName {
            try encodeContainer.encode(virtualServiceName, forKey: .virtualServiceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualServiceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualServiceName)
        virtualServiceName = virtualServiceNameDecoded
        let clientPolicyDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ClientPolicy.self, forKey: .clientPolicy)
        clientPolicy = clientPolicyDecoded
    }
}

extension AppMeshClientTypes.VirtualServiceBackend: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualServiceBackend(clientPolicy: \(Swift.String(describing: clientPolicy)), virtualServiceName: \(Swift.String(describing: virtualServiceName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual service backend for a virtual node.</p>
    public struct VirtualServiceBackend: Swift.Equatable {
        /// <p>A reference to an object that represents the client policy for a backend.</p>
        public let clientPolicy: AppMeshClientTypes.ClientPolicy?
        /// <p>The name of the virtual service that is acting as a virtual node backend.</p>
        public let virtualServiceName: Swift.String?

        public init (
            clientPolicy: AppMeshClientTypes.ClientPolicy? = nil,
            virtualServiceName: Swift.String? = nil
        )
        {
            self.clientPolicy = clientPolicy
            self.virtualServiceName = virtualServiceName
        }
    }

}

extension AppMeshClientTypes.VirtualServiceData: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case meshName
        case metadata
        case spec
        case status
        case virtualServiceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let metadata = metadata {
            try encodeContainer.encode(metadata, forKey: .metadata)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let virtualServiceName = virtualServiceName {
            try encodeContainer.encode(virtualServiceName, forKey: .virtualServiceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let virtualServiceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualServiceName)
        virtualServiceName = virtualServiceNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualServiceSpec.self, forKey: .spec)
        spec = specDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ResourceMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualServiceStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension AppMeshClientTypes.VirtualServiceData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualServiceData(meshName: \(Swift.String(describing: meshName)), metadata: \(Swift.String(describing: metadata)), spec: \(Swift.String(describing: spec)), status: \(Swift.String(describing: status)), virtualServiceName: \(Swift.String(describing: virtualServiceName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual service returned by a describe operation.</p>
    public struct VirtualServiceData: Swift.Equatable {
        /// <p>The name of the service mesh that the virtual service resides in.</p>
        public let meshName: Swift.String?
        /// <p>An object that represents metadata for a resource.</p>
        public let metadata: AppMeshClientTypes.ResourceMetadata?
        /// <p>The specifications of the virtual service.</p>
        public let spec: AppMeshClientTypes.VirtualServiceSpec?
        /// <p>The current status of the virtual service.</p>
        public let status: AppMeshClientTypes.VirtualServiceStatus?
        /// <p>The name of the virtual service.</p>
        public let virtualServiceName: Swift.String?

        public init (
            meshName: Swift.String? = nil,
            metadata: AppMeshClientTypes.ResourceMetadata? = nil,
            spec: AppMeshClientTypes.VirtualServiceSpec? = nil,
            status: AppMeshClientTypes.VirtualServiceStatus? = nil,
            virtualServiceName: Swift.String? = nil
        )
        {
            self.meshName = meshName
            self.metadata = metadata
            self.spec = spec
            self.status = status
            self.virtualServiceName = virtualServiceName
        }
    }

}

extension AppMeshClientTypes.VirtualServiceProvider: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sdkUnknown
        case virtualnode = "virtualNode"
        case virtualrouter = "virtualRouter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .virtualnode(virtualnode):
                try container.encode(virtualnode, forKey: .virtualnode)
            case let .virtualrouter(virtualrouter):
                try container.encode(virtualrouter, forKey: .virtualrouter)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let virtualnodeDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualNodeServiceProvider.self, forKey: .virtualnode)
        if let virtualnode = virtualnodeDecoded {
            self = .virtualnode(virtualnode)
            return
        }
        let virtualrouterDecoded = try values.decodeIfPresent(AppMeshClientTypes.VirtualRouterServiceProvider.self, forKey: .virtualrouter)
        if let virtualrouter = virtualrouterDecoded {
            self = .virtualrouter(virtualrouter)
            return
        }
        self = .sdkUnknown("")
    }
}

extension AppMeshClientTypes {
    /// <p>An object that represents the provider for a virtual service.</p>
    public enum VirtualServiceProvider: Swift.Equatable {
        /// <p>The virtual node associated with a virtual service.</p>
        case virtualnode(AppMeshClientTypes.VirtualNodeServiceProvider)
        /// <p>The virtual router associated with a virtual service.</p>
        case virtualrouter(AppMeshClientTypes.VirtualRouterServiceProvider)
        case sdkUnknown(Swift.String)
    }

}

extension AppMeshClientTypes.VirtualServiceRef: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case lastUpdatedAt
        case meshName
        case meshOwner
        case resourceOwner
        case version
        case virtualServiceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let meshName = meshName {
            try encodeContainer.encode(meshName, forKey: .meshName)
        }
        if let meshOwner = meshOwner {
            try encodeContainer.encode(meshOwner, forKey: .meshOwner)
        }
        if let resourceOwner = resourceOwner {
            try encodeContainer.encode(resourceOwner, forKey: .resourceOwner)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let virtualServiceName = virtualServiceName {
            try encodeContainer.encode(virtualServiceName, forKey: .virtualServiceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meshNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshName)
        meshName = meshNameDecoded
        let virtualServiceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualServiceName)
        virtualServiceName = virtualServiceNameDecoded
        let meshOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meshOwner)
        meshOwner = meshOwnerDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
    }
}

extension AppMeshClientTypes.VirtualServiceRef: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualServiceRef(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), meshName: \(Swift.String(describing: meshName)), meshOwner: \(Swift.String(describing: meshOwner)), resourceOwner: \(Swift.String(describing: resourceOwner)), version: \(Swift.String(describing: version)), virtualServiceName: \(Swift.String(describing: virtualServiceName)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a virtual service returned by a list operation.</p>
    public struct VirtualServiceRef: Swift.Equatable {
        /// <p>The full Amazon Resource Name (ARN) for the virtual service.</p>
        public let arn: Swift.String?
        /// <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The Unix epoch timestamp in seconds for when the resource was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The name of the service mesh that the virtual service resides in.</p>
        public let meshName: Swift.String?
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        ///                the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let meshOwner: Swift.String?
        /// <p>The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's
        ///                the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        public let resourceOwner: Swift.String?
        /// <p>The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.</p>
        public let version: Swift.Int?
        /// <p>The name of the virtual service.</p>
        public let virtualServiceName: Swift.String?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            meshName: Swift.String? = nil,
            meshOwner: Swift.String? = nil,
            resourceOwner: Swift.String? = nil,
            version: Swift.Int? = nil,
            virtualServiceName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.lastUpdatedAt = lastUpdatedAt
            self.meshName = meshName
            self.meshOwner = meshOwner
            self.resourceOwner = resourceOwner
            self.version = version
            self.virtualServiceName = virtualServiceName
        }
    }

}

extension AppMeshClientTypes.VirtualServiceSpec: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case provider
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let provider = provider {
            try encodeContainer.encode(provider, forKey: .provider)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let providerDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualServiceProvider.self, forKey: .provider)
        provider = providerDecoded
    }
}

extension AppMeshClientTypes.VirtualServiceSpec: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualServiceSpec(provider: \(Swift.String(describing: provider)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the specification of a virtual service.</p>
    public struct VirtualServiceSpec: Swift.Equatable {
        /// <p>The App Mesh object that is acting as the provider for a virtual service. You can specify
        ///          a single virtual node or virtual router.</p>
        public let provider: AppMeshClientTypes.VirtualServiceProvider?

        public init (
            provider: AppMeshClientTypes.VirtualServiceProvider? = nil
        )
        {
            self.provider = provider
        }
    }

}

extension AppMeshClientTypes.VirtualServiceStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualServiceStatusCode.self, forKey: .status)
        status = statusDecoded
    }
}

extension AppMeshClientTypes.VirtualServiceStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VirtualServiceStatus(status: \(Swift.String(describing: status)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents the status of a virtual service.</p>
    public struct VirtualServiceStatus: Swift.Equatable {
        /// <p>The current status of the virtual service.</p>
        public let status: AppMeshClientTypes.VirtualServiceStatusCode?

        public init (
            status: AppMeshClientTypes.VirtualServiceStatusCode? = nil
        )
        {
            self.status = status
        }
    }

}

extension AppMeshClientTypes {
    public enum VirtualServiceStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleted
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [VirtualServiceStatusCode] {
            return [
                .active,
                .deleted,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VirtualServiceStatusCode(rawValue: rawValue) ?? VirtualServiceStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension AppMeshClientTypes.WeightedTarget: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case virtualNode
        case weight
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let virtualNode = virtualNode {
            try encodeContainer.encode(virtualNode, forKey: .virtualNode)
        }
        if weight != 0 {
            try encodeContainer.encode(weight, forKey: .weight)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualNodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualNode)
        virtualNode = virtualNodeDecoded
        let weightDecoded = try containerValues.decode(Swift.Int.self, forKey: .weight)
        weight = weightDecoded
    }
}

extension AppMeshClientTypes.WeightedTarget: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WeightedTarget(virtualNode: \(Swift.String(describing: virtualNode)), weight: \(Swift.String(describing: weight)))"}
}

extension AppMeshClientTypes {
    /// <p>An object that represents a target and its relative weight. Traffic is distributed
    ///          across targets according to their relative weight. For example, a weighted target with a
    ///          relative weight of 50 receives five times as much traffic as one with a relative weight of
    ///          10. The total weight for all targets combined must be less than or equal to 100.</p>
    public struct WeightedTarget: Swift.Equatable {
        /// <p>The virtual node to associate with the weighted target.</p>
        public let virtualNode: Swift.String?
        /// <p>The relative weight of the weighted target.</p>
        public let weight: Swift.Int

        public init (
            virtualNode: Swift.String? = nil,
            weight: Swift.Int = 0
        )
        {
            self.virtualNode = virtualNode
            self.weight = weight
        }
    }

}
