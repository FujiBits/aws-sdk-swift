// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateCommentInputHeadersMiddleware: Middleware {
    public let id: String = "CreateCommentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCommentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCommentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let authenticationToken = input.operationInput.authenticationToken {
            input.builder.withHeader(name: "Authentication", value: String(authenticationToken))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCommentInput>
    public typealias MOutput = OperationOutput<CreateCommentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCommentOutputError>
}

public struct CreateCommentInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateCommentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCommentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCommentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCommentInput>
    public typealias MOutput = OperationOutput<CreateCommentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCommentOutputError>
}

public struct CreateCommentInputBodyMiddleware: Middleware {
    public let id: String = "CreateCommentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCommentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCommentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCommentInput>
    public typealias MOutput = OperationOutput<CreateCommentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCommentOutputError>
}

extension CreateCommentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case notifyCollaborators = "NotifyCollaborators"
        case parentId = "ParentId"
        case text = "Text"
        case threadId = "ThreadId"
        case visibility = "Visibility"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if notifyCollaborators != false {
            try encodeContainer.encode(notifyCollaborators, forKey: .notifyCollaborators)
        }
        if let parentId = parentId {
            try encodeContainer.encode(parentId, forKey: .parentId)
        }
        if let text = text {
            try encodeContainer.encode(text, forKey: .text)
        }
        if let threadId = threadId {
            try encodeContainer.encode(threadId, forKey: .threadId)
        }
        if let visibility = visibility {
            try encodeContainer.encode(visibility.rawValue, forKey: .visibility)
        }
    }
}
