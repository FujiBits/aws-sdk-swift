// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension PinpointClient {
    /// <p>Creates an application.</p>
    func createApp(input: CreateAppInput) async throws -> CreateAppOutputResponse
    {
        typealias createAppContinuation = CheckedContinuation<CreateAppOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAppContinuation) in
            createApp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new campaign for an application or updates the settings of an existing campaign for an application.</p>
    func createCampaign(input: CreateCampaignInput) async throws -> CreateCampaignOutputResponse
    {
        typealias createCampaignContinuation = CheckedContinuation<CreateCampaignOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCampaignContinuation) in
            createCampaign(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a message template for messages that are sent through the email channel.</p>
    func createEmailTemplate(input: CreateEmailTemplateInput) async throws -> CreateEmailTemplateOutputResponse
    {
        typealias createEmailTemplateContinuation = CheckedContinuation<CreateEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEmailTemplateContinuation) in
            createEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an export job for an application.</p>
    func createExportJob(input: CreateExportJobInput) async throws -> CreateExportJobOutputResponse
    {
        typealias createExportJobContinuation = CheckedContinuation<CreateExportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createExportJobContinuation) in
            createExportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an import job for an application.</p>
    func createImportJob(input: CreateImportJobInput) async throws -> CreateImportJobOutputResponse
    {
        typealias createImportJobContinuation = CheckedContinuation<CreateImportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createImportJobContinuation) in
            createImportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a journey for an application.</p>
    func createJourney(input: CreateJourneyInput) async throws -> CreateJourneyOutputResponse
    {
        typealias createJourneyContinuation = CheckedContinuation<CreateJourneyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createJourneyContinuation) in
            createJourney(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a message template for messages that are sent through a push notification channel.</p>
    func createPushTemplate(input: CreatePushTemplateInput) async throws -> CreatePushTemplateOutputResponse
    {
        typealias createPushTemplateContinuation = CheckedContinuation<CreatePushTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPushTemplateContinuation) in
            createPushTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an Amazon Pinpoint configuration for a recommender model.</p>
    func createRecommenderConfiguration(input: CreateRecommenderConfigurationInput) async throws -> CreateRecommenderConfigurationOutputResponse
    {
        typealias createRecommenderConfigurationContinuation = CheckedContinuation<CreateRecommenderConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRecommenderConfigurationContinuation) in
            createRecommenderConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that's associated with an application.</p>
    func createSegment(input: CreateSegmentInput) async throws -> CreateSegmentOutputResponse
    {
        typealias createSegmentContinuation = CheckedContinuation<CreateSegmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSegmentContinuation) in
            createSegment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a message template for messages that are sent through the SMS channel.</p>
    func createSmsTemplate(input: CreateSmsTemplateInput) async throws -> CreateSmsTemplateOutputResponse
    {
        typealias createSmsTemplateContinuation = CheckedContinuation<CreateSmsTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSmsTemplateContinuation) in
            createSmsTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a message template for messages that are sent through the voice channel.</p>
    func createVoiceTemplate(input: CreateVoiceTemplateInput) async throws -> CreateVoiceTemplateOutputResponse
    {
        typealias createVoiceTemplateContinuation = CheckedContinuation<CreateVoiceTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createVoiceTemplateContinuation) in
            createVoiceTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables the ADM channel for an application and deletes any existing settings for the channel.</p>
    func deleteAdmChannel(input: DeleteAdmChannelInput) async throws -> DeleteAdmChannelOutputResponse
    {
        typealias deleteAdmChannelContinuation = CheckedContinuation<DeleteAdmChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAdmChannelContinuation) in
            deleteAdmChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables the APNs channel for an application and deletes any existing settings for the channel.</p>
    func deleteApnsChannel(input: DeleteApnsChannelInput) async throws -> DeleteApnsChannelOutputResponse
    {
        typealias deleteApnsChannelContinuation = CheckedContinuation<DeleteApnsChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteApnsChannelContinuation) in
            deleteApnsChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables the APNs sandbox channel for an application and deletes any existing settings for the channel.</p>
    func deleteApnsSandboxChannel(input: DeleteApnsSandboxChannelInput) async throws -> DeleteApnsSandboxChannelOutputResponse
    {
        typealias deleteApnsSandboxChannelContinuation = CheckedContinuation<DeleteApnsSandboxChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteApnsSandboxChannelContinuation) in
            deleteApnsSandboxChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables the APNs VoIP channel for an application and deletes any existing settings for the channel.</p>
    func deleteApnsVoipChannel(input: DeleteApnsVoipChannelInput) async throws -> DeleteApnsVoipChannelOutputResponse
    {
        typealias deleteApnsVoipChannelContinuation = CheckedContinuation<DeleteApnsVoipChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteApnsVoipChannelContinuation) in
            deleteApnsVoipChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables the APNs VoIP sandbox channel for an application and deletes any existing settings for the channel.</p>
    func deleteApnsVoipSandboxChannel(input: DeleteApnsVoipSandboxChannelInput) async throws -> DeleteApnsVoipSandboxChannelOutputResponse
    {
        typealias deleteApnsVoipSandboxChannelContinuation = CheckedContinuation<DeleteApnsVoipSandboxChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteApnsVoipSandboxChannelContinuation) in
            deleteApnsVoipSandboxChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an application.</p>
    func deleteApp(input: DeleteAppInput) async throws -> DeleteAppOutputResponse
    {
        typealias deleteAppContinuation = CheckedContinuation<DeleteAppOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAppContinuation) in
            deleteApp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables the Baidu channel for an application and deletes any existing settings for the channel.</p>
    func deleteBaiduChannel(input: DeleteBaiduChannelInput) async throws -> DeleteBaiduChannelOutputResponse
    {
        typealias deleteBaiduChannelContinuation = CheckedContinuation<DeleteBaiduChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBaiduChannelContinuation) in
            deleteBaiduChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a campaign from an application.</p>
    func deleteCampaign(input: DeleteCampaignInput) async throws -> DeleteCampaignOutputResponse
    {
        typealias deleteCampaignContinuation = CheckedContinuation<DeleteCampaignOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCampaignContinuation) in
            deleteCampaign(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables the email channel for an application and deletes any existing settings for the channel.</p>
    func deleteEmailChannel(input: DeleteEmailChannelInput) async throws -> DeleteEmailChannelOutputResponse
    {
        typealias deleteEmailChannelContinuation = CheckedContinuation<DeleteEmailChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEmailChannelContinuation) in
            deleteEmailChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a message template for messages that were sent through the email channel.</p>
    func deleteEmailTemplate(input: DeleteEmailTemplateInput) async throws -> DeleteEmailTemplateOutputResponse
    {
        typealias deleteEmailTemplateContinuation = CheckedContinuation<DeleteEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEmailTemplateContinuation) in
            deleteEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an endpoint from an application.</p>
    func deleteEndpoint(input: DeleteEndpointInput) async throws -> DeleteEndpointOutputResponse
    {
        typealias deleteEndpointContinuation = CheckedContinuation<DeleteEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEndpointContinuation) in
            deleteEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the event stream for an application.</p>
    func deleteEventStream(input: DeleteEventStreamInput) async throws -> DeleteEventStreamOutputResponse
    {
        typealias deleteEventStreamContinuation = CheckedContinuation<DeleteEventStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEventStreamContinuation) in
            deleteEventStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables the GCM channel for an application and deletes any existing settings for the channel.</p>
    func deleteGcmChannel(input: DeleteGcmChannelInput) async throws -> DeleteGcmChannelOutputResponse
    {
        typealias deleteGcmChannelContinuation = CheckedContinuation<DeleteGcmChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteGcmChannelContinuation) in
            deleteGcmChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a journey from an application.</p>
    func deleteJourney(input: DeleteJourneyInput) async throws -> DeleteJourneyOutputResponse
    {
        typealias deleteJourneyContinuation = CheckedContinuation<DeleteJourneyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteJourneyContinuation) in
            deleteJourney(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a message template for messages that were sent through a push notification channel.</p>
    func deletePushTemplate(input: DeletePushTemplateInput) async throws -> DeletePushTemplateOutputResponse
    {
        typealias deletePushTemplateContinuation = CheckedContinuation<DeletePushTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePushTemplateContinuation) in
            deletePushTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an Amazon Pinpoint configuration for a recommender model.</p>
    func deleteRecommenderConfiguration(input: DeleteRecommenderConfigurationInput) async throws -> DeleteRecommenderConfigurationOutputResponse
    {
        typealias deleteRecommenderConfigurationContinuation = CheckedContinuation<DeleteRecommenderConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRecommenderConfigurationContinuation) in
            deleteRecommenderConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a segment from an application.</p>
    func deleteSegment(input: DeleteSegmentInput) async throws -> DeleteSegmentOutputResponse
    {
        typealias deleteSegmentContinuation = CheckedContinuation<DeleteSegmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSegmentContinuation) in
            deleteSegment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables the SMS channel for an application and deletes any existing settings for the channel.</p>
    func deleteSmsChannel(input: DeleteSmsChannelInput) async throws -> DeleteSmsChannelOutputResponse
    {
        typealias deleteSmsChannelContinuation = CheckedContinuation<DeleteSmsChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSmsChannelContinuation) in
            deleteSmsChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a message template for messages that were sent through the SMS channel.</p>
    func deleteSmsTemplate(input: DeleteSmsTemplateInput) async throws -> DeleteSmsTemplateOutputResponse
    {
        typealias deleteSmsTemplateContinuation = CheckedContinuation<DeleteSmsTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSmsTemplateContinuation) in
            deleteSmsTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes all the endpoints that are associated with a specific user ID.</p>
    func deleteUserEndpoints(input: DeleteUserEndpointsInput) async throws -> DeleteUserEndpointsOutputResponse
    {
        typealias deleteUserEndpointsContinuation = CheckedContinuation<DeleteUserEndpointsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserEndpointsContinuation) in
            deleteUserEndpoints(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables the voice channel for an application and deletes any existing settings for the channel.</p>
    func deleteVoiceChannel(input: DeleteVoiceChannelInput) async throws -> DeleteVoiceChannelOutputResponse
    {
        typealias deleteVoiceChannelContinuation = CheckedContinuation<DeleteVoiceChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVoiceChannelContinuation) in
            deleteVoiceChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a message template for messages that were sent through the voice channel.</p>
    func deleteVoiceTemplate(input: DeleteVoiceTemplateInput) async throws -> DeleteVoiceTemplateOutputResponse
    {
        typealias deleteVoiceTemplateContinuation = CheckedContinuation<DeleteVoiceTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVoiceTemplateContinuation) in
            deleteVoiceTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of the ADM channel for an application.</p>
    func getAdmChannel(input: GetAdmChannelInput) async throws -> GetAdmChannelOutputResponse
    {
        typealias getAdmChannelContinuation = CheckedContinuation<GetAdmChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAdmChannelContinuation) in
            getAdmChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of the APNs channel for an application.</p>
    func getApnsChannel(input: GetApnsChannelInput) async throws -> GetApnsChannelOutputResponse
    {
        typealias getApnsChannelContinuation = CheckedContinuation<GetApnsChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApnsChannelContinuation) in
            getApnsChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of the APNs sandbox channel for an application.</p>
    func getApnsSandboxChannel(input: GetApnsSandboxChannelInput) async throws -> GetApnsSandboxChannelOutputResponse
    {
        typealias getApnsSandboxChannelContinuation = CheckedContinuation<GetApnsSandboxChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApnsSandboxChannelContinuation) in
            getApnsSandboxChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of the APNs VoIP channel for an application.</p>
    func getApnsVoipChannel(input: GetApnsVoipChannelInput) async throws -> GetApnsVoipChannelOutputResponse
    {
        typealias getApnsVoipChannelContinuation = CheckedContinuation<GetApnsVoipChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApnsVoipChannelContinuation) in
            getApnsVoipChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of the APNs VoIP sandbox channel for an application.</p>
    func getApnsVoipSandboxChannel(input: GetApnsVoipSandboxChannelInput) async throws -> GetApnsVoipSandboxChannelOutputResponse
    {
        typealias getApnsVoipSandboxChannelContinuation = CheckedContinuation<GetApnsVoipSandboxChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApnsVoipSandboxChannelContinuation) in
            getApnsVoipSandboxChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about an application.</p>
    func getApp(input: GetAppInput) async throws -> GetAppOutputResponse
    {
        typealias getAppContinuation = CheckedContinuation<GetAppOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAppContinuation) in
            getApp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves (queries) pre-aggregated data for a standard metric that applies to an application.</p>
    func getApplicationDateRangeKpi(input: GetApplicationDateRangeKpiInput) async throws -> GetApplicationDateRangeKpiOutputResponse
    {
        typealias getApplicationDateRangeKpiContinuation = CheckedContinuation<GetApplicationDateRangeKpiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApplicationDateRangeKpiContinuation) in
            getApplicationDateRangeKpi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the settings for an application.</p>
    func getApplicationSettings(input: GetApplicationSettingsInput) async throws -> GetApplicationSettingsOutputResponse
    {
        typealias getApplicationSettingsContinuation = CheckedContinuation<GetApplicationSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApplicationSettingsContinuation) in
            getApplicationSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about all the applications that are associated with your Amazon Pinpoint account.</p>
    func getApps(input: GetAppsInput) async throws -> GetAppsOutputResponse
    {
        typealias getAppsContinuation = CheckedContinuation<GetAppsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAppsContinuation) in
            getApps(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of the Baidu channel for an application.</p>
    func getBaiduChannel(input: GetBaiduChannelInput) async throws -> GetBaiduChannelOutputResponse
    {
        typealias getBaiduChannelContinuation = CheckedContinuation<GetBaiduChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBaiduChannelContinuation) in
            getBaiduChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status, configuration, and other settings for a campaign.</p>
    func getCampaign(input: GetCampaignInput) async throws -> GetCampaignOutputResponse
    {
        typealias getCampaignContinuation = CheckedContinuation<GetCampaignOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCampaignContinuation) in
            getCampaign(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about all the activities for a campaign.</p>
    func getCampaignActivities(input: GetCampaignActivitiesInput) async throws -> GetCampaignActivitiesOutputResponse
    {
        typealias getCampaignActivitiesContinuation = CheckedContinuation<GetCampaignActivitiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCampaignActivitiesContinuation) in
            getCampaignActivities(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves (queries) pre-aggregated data for a standard metric that applies to a campaign.</p>
    func getCampaignDateRangeKpi(input: GetCampaignDateRangeKpiInput) async throws -> GetCampaignDateRangeKpiOutputResponse
    {
        typealias getCampaignDateRangeKpiContinuation = CheckedContinuation<GetCampaignDateRangeKpiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCampaignDateRangeKpiContinuation) in
            getCampaignDateRangeKpi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status, configuration, and other settings for a specific version of a campaign.</p>
    func getCampaignVersion(input: GetCampaignVersionInput) async throws -> GetCampaignVersionOutputResponse
    {
        typealias getCampaignVersionContinuation = CheckedContinuation<GetCampaignVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCampaignVersionContinuation) in
            getCampaignVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status, configuration, and other settings for all versions of a campaign.</p>
    func getCampaignVersions(input: GetCampaignVersionsInput) async throws -> GetCampaignVersionsOutputResponse
    {
        typealias getCampaignVersionsContinuation = CheckedContinuation<GetCampaignVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCampaignVersionsContinuation) in
            getCampaignVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status, configuration, and other settings for all the campaigns that are associated with an application.</p>
    func getCampaigns(input: GetCampaignsInput) async throws -> GetCampaignsOutputResponse
    {
        typealias getCampaignsContinuation = CheckedContinuation<GetCampaignsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCampaignsContinuation) in
            getCampaigns(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the history and status of each channel for an application.</p>
    func getChannels(input: GetChannelsInput) async throws -> GetChannelsOutputResponse
    {
        typealias getChannelsContinuation = CheckedContinuation<GetChannelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getChannelsContinuation) in
            getChannels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of the email channel for an application.</p>
    func getEmailChannel(input: GetEmailChannelInput) async throws -> GetEmailChannelOutputResponse
    {
        typealias getEmailChannelContinuation = CheckedContinuation<GetEmailChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEmailChannelContinuation) in
            getEmailChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the content and settings of a message template for messages that are sent through the email channel.</p>
    func getEmailTemplate(input: GetEmailTemplateInput) async throws -> GetEmailTemplateOutputResponse
    {
        typealias getEmailTemplateContinuation = CheckedContinuation<GetEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEmailTemplateContinuation) in
            getEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the settings and attributes of a specific endpoint for an application.</p>
    func getEndpoint(input: GetEndpointInput) async throws -> GetEndpointOutputResponse
    {
        typealias getEndpointContinuation = CheckedContinuation<GetEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEndpointContinuation) in
            getEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the event stream settings for an application.</p>
    func getEventStream(input: GetEventStreamInput) async throws -> GetEventStreamOutputResponse
    {
        typealias getEventStreamContinuation = CheckedContinuation<GetEventStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEventStreamContinuation) in
            getEventStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of a specific export job for an application.</p>
    func getExportJob(input: GetExportJobInput) async throws -> GetExportJobOutputResponse
    {
        typealias getExportJobContinuation = CheckedContinuation<GetExportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getExportJobContinuation) in
            getExportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of all the export jobs for an application.</p>
    func getExportJobs(input: GetExportJobsInput) async throws -> GetExportJobsOutputResponse
    {
        typealias getExportJobsContinuation = CheckedContinuation<GetExportJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getExportJobsContinuation) in
            getExportJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of the GCM channel for an application.</p>
    func getGcmChannel(input: GetGcmChannelInput) async throws -> GetGcmChannelOutputResponse
    {
        typealias getGcmChannelContinuation = CheckedContinuation<GetGcmChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getGcmChannelContinuation) in
            getGcmChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of a specific import job for an application.</p>
    func getImportJob(input: GetImportJobInput) async throws -> GetImportJobOutputResponse
    {
        typealias getImportJobContinuation = CheckedContinuation<GetImportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getImportJobContinuation) in
            getImportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of all the import jobs for an application.</p>
    func getImportJobs(input: GetImportJobsInput) async throws -> GetImportJobsOutputResponse
    {
        typealias getImportJobsContinuation = CheckedContinuation<GetImportJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getImportJobsContinuation) in
            getImportJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status, configuration, and other settings for a journey.</p>
    func getJourney(input: GetJourneyInput) async throws -> GetJourneyOutputResponse
    {
        typealias getJourneyContinuation = CheckedContinuation<GetJourneyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getJourneyContinuation) in
            getJourney(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves (queries) pre-aggregated data for a standard engagement metric that applies to a journey.</p>
    func getJourneyDateRangeKpi(input: GetJourneyDateRangeKpiInput) async throws -> GetJourneyDateRangeKpiOutputResponse
    {
        typealias getJourneyDateRangeKpiContinuation = CheckedContinuation<GetJourneyDateRangeKpiOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getJourneyDateRangeKpiContinuation) in
            getJourneyDateRangeKpi(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves (queries) pre-aggregated data for a standard execution metric that applies to a journey activity.</p>
    func getJourneyExecutionActivityMetrics(input: GetJourneyExecutionActivityMetricsInput) async throws -> GetJourneyExecutionActivityMetricsOutputResponse
    {
        typealias getJourneyExecutionActivityMetricsContinuation = CheckedContinuation<GetJourneyExecutionActivityMetricsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getJourneyExecutionActivityMetricsContinuation) in
            getJourneyExecutionActivityMetrics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves (queries) pre-aggregated data for a standard execution metric that applies to a journey.</p>
    func getJourneyExecutionMetrics(input: GetJourneyExecutionMetricsInput) async throws -> GetJourneyExecutionMetricsOutputResponse
    {
        typealias getJourneyExecutionMetricsContinuation = CheckedContinuation<GetJourneyExecutionMetricsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getJourneyExecutionMetricsContinuation) in
            getJourneyExecutionMetrics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the content and settings of a message template for messages that are sent through a push notification channel.</p>
    func getPushTemplate(input: GetPushTemplateInput) async throws -> GetPushTemplateOutputResponse
    {
        typealias getPushTemplateContinuation = CheckedContinuation<GetPushTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPushTemplateContinuation) in
            getPushTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about an Amazon Pinpoint configuration for a recommender model.</p>
    func getRecommenderConfiguration(input: GetRecommenderConfigurationInput) async throws -> GetRecommenderConfigurationOutputResponse
    {
        typealias getRecommenderConfigurationContinuation = CheckedContinuation<GetRecommenderConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRecommenderConfigurationContinuation) in
            getRecommenderConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about all the recommender model configurations that are associated with your Amazon Pinpoint account.</p>
    func getRecommenderConfigurations(input: GetRecommenderConfigurationsInput) async throws -> GetRecommenderConfigurationsOutputResponse
    {
        typealias getRecommenderConfigurationsContinuation = CheckedContinuation<GetRecommenderConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRecommenderConfigurationsContinuation) in
            getRecommenderConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the configuration, dimension, and other settings for a specific segment that's associated with an application.</p>
    func getSegment(input: GetSegmentInput) async throws -> GetSegmentOutputResponse
    {
        typealias getSegmentContinuation = CheckedContinuation<GetSegmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSegmentContinuation) in
            getSegment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of the export jobs for a segment.</p>
    func getSegmentExportJobs(input: GetSegmentExportJobsInput) async throws -> GetSegmentExportJobsOutputResponse
    {
        typealias getSegmentExportJobsContinuation = CheckedContinuation<GetSegmentExportJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSegmentExportJobsContinuation) in
            getSegmentExportJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of the import jobs for a segment.</p>
    func getSegmentImportJobs(input: GetSegmentImportJobsInput) async throws -> GetSegmentImportJobsOutputResponse
    {
        typealias getSegmentImportJobsContinuation = CheckedContinuation<GetSegmentImportJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSegmentImportJobsContinuation) in
            getSegmentImportJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the configuration, dimension, and other settings for a specific version of a segment that's associated with an application.</p>
    func getSegmentVersion(input: GetSegmentVersionInput) async throws -> GetSegmentVersionOutputResponse
    {
        typealias getSegmentVersionContinuation = CheckedContinuation<GetSegmentVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSegmentVersionContinuation) in
            getSegmentVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the configuration, dimension, and other settings for all the versions of a specific segment that's associated with an application.</p>
    func getSegmentVersions(input: GetSegmentVersionsInput) async throws -> GetSegmentVersionsOutputResponse
    {
        typealias getSegmentVersionsContinuation = CheckedContinuation<GetSegmentVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSegmentVersionsContinuation) in
            getSegmentVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the configuration, dimension, and other settings for all the segments that are associated with an application.</p>
    func getSegments(input: GetSegmentsInput) async throws -> GetSegmentsOutputResponse
    {
        typealias getSegmentsContinuation = CheckedContinuation<GetSegmentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSegmentsContinuation) in
            getSegments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of the SMS channel for an application.</p>
    func getSmsChannel(input: GetSmsChannelInput) async throws -> GetSmsChannelOutputResponse
    {
        typealias getSmsChannelContinuation = CheckedContinuation<GetSmsChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSmsChannelContinuation) in
            getSmsChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the content and settings of a message template for messages that are sent through the SMS channel.</p>
    func getSmsTemplate(input: GetSmsTemplateInput) async throws -> GetSmsTemplateOutputResponse
    {
        typealias getSmsTemplateContinuation = CheckedContinuation<GetSmsTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSmsTemplateContinuation) in
            getSmsTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about all the endpoints that are associated with a specific user ID.</p>
    func getUserEndpoints(input: GetUserEndpointsInput) async throws -> GetUserEndpointsOutputResponse
    {
        typealias getUserEndpointsContinuation = CheckedContinuation<GetUserEndpointsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUserEndpointsContinuation) in
            getUserEndpoints(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status and settings of the voice channel for an application.</p>
    func getVoiceChannel(input: GetVoiceChannelInput) async throws -> GetVoiceChannelOutputResponse
    {
        typealias getVoiceChannelContinuation = CheckedContinuation<GetVoiceChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVoiceChannelContinuation) in
            getVoiceChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the content and settings of a message template for messages that are sent through the voice channel.</p>
    func getVoiceTemplate(input: GetVoiceTemplateInput) async throws -> GetVoiceTemplateOutputResponse
    {
        typealias getVoiceTemplateContinuation = CheckedContinuation<GetVoiceTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVoiceTemplateContinuation) in
            getVoiceTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the status, configuration, and other settings for all the journeys that are associated with an application.</p>
    func listJourneys(input: ListJourneysInput) async throws -> ListJourneysOutputResponse
    {
        typealias listJourneysContinuation = CheckedContinuation<ListJourneysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJourneysContinuation) in
            listJourneys(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves all the tags (keys and values) that are associated with an application, campaign, message template, or segment.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about all the versions of a specific message template.</p>
    func listTemplateVersions(input: ListTemplateVersionsInput) async throws -> ListTemplateVersionsOutputResponse
    {
        typealias listTemplateVersionsContinuation = CheckedContinuation<ListTemplateVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTemplateVersionsContinuation) in
            listTemplateVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about all the message templates that are associated with your Amazon Pinpoint account.</p>
    func listTemplates(input: ListTemplatesInput) async throws -> ListTemplatesOutputResponse
    {
        typealias listTemplatesContinuation = CheckedContinuation<ListTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTemplatesContinuation) in
            listTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about a phone number.</p>
    func phoneNumberValidate(input: PhoneNumberValidateInput) async throws -> PhoneNumberValidateOutputResponse
    {
        typealias phoneNumberValidateContinuation = CheckedContinuation<PhoneNumberValidateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: phoneNumberValidateContinuation) in
            phoneNumberValidate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new event stream for an application or updates the settings of an existing event stream for an application.</p>
    func putEventStream(input: PutEventStreamInput) async throws -> PutEventStreamOutputResponse
    {
        typealias putEventStreamContinuation = CheckedContinuation<PutEventStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putEventStreamContinuation) in
            putEventStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new event to record for endpoints, or creates or updates endpoint data that existing events are associated with.</p>
    func putEvents(input: PutEventsInput) async throws -> PutEventsOutputResponse
    {
        typealias putEventsContinuation = CheckedContinuation<PutEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putEventsContinuation) in
            putEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes one or more attributes, of the same attribute type, from all the endpoints that are associated with an application.</p>
    func removeAttributes(input: RemoveAttributesInput) async throws -> RemoveAttributesOutputResponse
    {
        typealias removeAttributesContinuation = CheckedContinuation<RemoveAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeAttributesContinuation) in
            removeAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates and sends a direct message.</p>
    func sendMessages(input: SendMessagesInput) async throws -> SendMessagesOutputResponse
    {
        typealias sendMessagesContinuation = CheckedContinuation<SendMessagesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendMessagesContinuation) in
            sendMessages(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates and sends a message to a list of users.</p>
    func sendUsersMessages(input: SendUsersMessagesInput) async throws -> SendUsersMessagesOutputResponse
    {
        typealias sendUsersMessagesContinuation = CheckedContinuation<SendUsersMessagesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendUsersMessagesContinuation) in
            sendUsersMessages(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds one or more tags (keys and values) to an application, campaign, message template, or segment.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes one or more tags (keys and values) from an application, campaign, message template, or segment.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables the ADM channel for an application or updates the status and settings of the ADM channel for an application.</p>
    func updateAdmChannel(input: UpdateAdmChannelInput) async throws -> UpdateAdmChannelOutputResponse
    {
        typealias updateAdmChannelContinuation = CheckedContinuation<UpdateAdmChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAdmChannelContinuation) in
            updateAdmChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables the APNs channel for an application or updates the status and settings of the APNs channel for an application.</p>
    func updateApnsChannel(input: UpdateApnsChannelInput) async throws -> UpdateApnsChannelOutputResponse
    {
        typealias updateApnsChannelContinuation = CheckedContinuation<UpdateApnsChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApnsChannelContinuation) in
            updateApnsChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables the APNs sandbox channel for an application or updates the status and settings of the APNs sandbox channel for an application.</p>
    func updateApnsSandboxChannel(input: UpdateApnsSandboxChannelInput) async throws -> UpdateApnsSandboxChannelOutputResponse
    {
        typealias updateApnsSandboxChannelContinuation = CheckedContinuation<UpdateApnsSandboxChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApnsSandboxChannelContinuation) in
            updateApnsSandboxChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables the APNs VoIP channel for an application or updates the status and settings of the APNs VoIP channel for an application.</p>
    func updateApnsVoipChannel(input: UpdateApnsVoipChannelInput) async throws -> UpdateApnsVoipChannelOutputResponse
    {
        typealias updateApnsVoipChannelContinuation = CheckedContinuation<UpdateApnsVoipChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApnsVoipChannelContinuation) in
            updateApnsVoipChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables the APNs VoIP sandbox channel for an application or updates the status and settings of the APNs VoIP sandbox channel for an application.</p>
    func updateApnsVoipSandboxChannel(input: UpdateApnsVoipSandboxChannelInput) async throws -> UpdateApnsVoipSandboxChannelOutputResponse
    {
        typealias updateApnsVoipSandboxChannelContinuation = CheckedContinuation<UpdateApnsVoipSandboxChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApnsVoipSandboxChannelContinuation) in
            updateApnsVoipSandboxChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the settings for an application.</p>
    func updateApplicationSettings(input: UpdateApplicationSettingsInput) async throws -> UpdateApplicationSettingsOutputResponse
    {
        typealias updateApplicationSettingsContinuation = CheckedContinuation<UpdateApplicationSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApplicationSettingsContinuation) in
            updateApplicationSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables the Baidu channel for an application or updates the status and settings of the Baidu channel for an application.</p>
    func updateBaiduChannel(input: UpdateBaiduChannelInput) async throws -> UpdateBaiduChannelOutputResponse
    {
        typealias updateBaiduChannelContinuation = CheckedContinuation<UpdateBaiduChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBaiduChannelContinuation) in
            updateBaiduChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the configuration and other settings for a campaign.</p>
    func updateCampaign(input: UpdateCampaignInput) async throws -> UpdateCampaignOutputResponse
    {
        typealias updateCampaignContinuation = CheckedContinuation<UpdateCampaignOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateCampaignContinuation) in
            updateCampaign(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables the email channel for an application or updates the status and settings of the email channel for an application.</p>
    func updateEmailChannel(input: UpdateEmailChannelInput) async throws -> UpdateEmailChannelOutputResponse
    {
        typealias updateEmailChannelContinuation = CheckedContinuation<UpdateEmailChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEmailChannelContinuation) in
            updateEmailChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an existing message template for messages that are sent through the email channel.</p>
    func updateEmailTemplate(input: UpdateEmailTemplateInput) async throws -> UpdateEmailTemplateOutputResponse
    {
        typealias updateEmailTemplateContinuation = CheckedContinuation<UpdateEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEmailTemplateContinuation) in
            updateEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new endpoint for an application or updates the settings and attributes of an existing endpoint for an application. You can also use this operation to define custom attributes for an endpoint. If an update includes one or more values for a custom attribute, Amazon Pinpoint replaces (overwrites) any existing values with the new values.</p>
    func updateEndpoint(input: UpdateEndpointInput) async throws -> UpdateEndpointOutputResponse
    {
        typealias updateEndpointContinuation = CheckedContinuation<UpdateEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEndpointContinuation) in
            updateEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new batch of endpoints for an application or updates the settings and attributes of a batch of existing endpoints for an application. You can also use this operation to define custom attributes for a batch of endpoints. If an update includes one or more values for a custom attribute, Amazon Pinpoint replaces (overwrites) any existing values with the new values.</p>
    func updateEndpointsBatch(input: UpdateEndpointsBatchInput) async throws -> UpdateEndpointsBatchOutputResponse
    {
        typealias updateEndpointsBatchContinuation = CheckedContinuation<UpdateEndpointsBatchOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEndpointsBatchContinuation) in
            updateEndpointsBatch(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables the GCM channel for an application or updates the status and settings of the GCM channel for an application.</p>
    func updateGcmChannel(input: UpdateGcmChannelInput) async throws -> UpdateGcmChannelOutputResponse
    {
        typealias updateGcmChannelContinuation = CheckedContinuation<UpdateGcmChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGcmChannelContinuation) in
            updateGcmChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the configuration and other settings for a journey.</p>
    func updateJourney(input: UpdateJourneyInput) async throws -> UpdateJourneyOutputResponse
    {
        typealias updateJourneyContinuation = CheckedContinuation<UpdateJourneyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateJourneyContinuation) in
            updateJourney(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Cancels (stops) an active journey.</p>
    func updateJourneyState(input: UpdateJourneyStateInput) async throws -> UpdateJourneyStateOutputResponse
    {
        typealias updateJourneyStateContinuation = CheckedContinuation<UpdateJourneyStateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateJourneyStateContinuation) in
            updateJourneyState(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an existing message template for messages that are sent through a push notification channel.</p>
    func updatePushTemplate(input: UpdatePushTemplateInput) async throws -> UpdatePushTemplateOutputResponse
    {
        typealias updatePushTemplateContinuation = CheckedContinuation<UpdatePushTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePushTemplateContinuation) in
            updatePushTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an Amazon Pinpoint configuration for a recommender model.</p>
    func updateRecommenderConfiguration(input: UpdateRecommenderConfigurationInput) async throws -> UpdateRecommenderConfigurationOutputResponse
    {
        typealias updateRecommenderConfigurationContinuation = CheckedContinuation<UpdateRecommenderConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRecommenderConfigurationContinuation) in
            updateRecommenderConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that's associated with an application.</p>
    func updateSegment(input: UpdateSegmentInput) async throws -> UpdateSegmentOutputResponse
    {
        typealias updateSegmentContinuation = CheckedContinuation<UpdateSegmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSegmentContinuation) in
            updateSegment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables the SMS channel for an application or updates the status and settings of the SMS channel for an application.</p>
    func updateSmsChannel(input: UpdateSmsChannelInput) async throws -> UpdateSmsChannelOutputResponse
    {
        typealias updateSmsChannelContinuation = CheckedContinuation<UpdateSmsChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSmsChannelContinuation) in
            updateSmsChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an existing message template for messages that are sent through the SMS channel.</p>
    func updateSmsTemplate(input: UpdateSmsTemplateInput) async throws -> UpdateSmsTemplateOutputResponse
    {
        typealias updateSmsTemplateContinuation = CheckedContinuation<UpdateSmsTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSmsTemplateContinuation) in
            updateSmsTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Changes the status of a specific version of a message template to <i>active</i>.</p>
    func updateTemplateActiveVersion(input: UpdateTemplateActiveVersionInput) async throws -> UpdateTemplateActiveVersionOutputResponse
    {
        typealias updateTemplateActiveVersionContinuation = CheckedContinuation<UpdateTemplateActiveVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTemplateActiveVersionContinuation) in
            updateTemplateActiveVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables the voice channel for an application or updates the status and settings of the voice channel for an application.</p>
    func updateVoiceChannel(input: UpdateVoiceChannelInput) async throws -> UpdateVoiceChannelOutputResponse
    {
        typealias updateVoiceChannelContinuation = CheckedContinuation<UpdateVoiceChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateVoiceChannelContinuation) in
            updateVoiceChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an existing message template for messages that are sent through the voice channel.</p>
    func updateVoiceTemplate(input: UpdateVoiceTemplateInput) async throws -> UpdateVoiceTemplateOutputResponse
    {
        typealias updateVoiceTemplateContinuation = CheckedContinuation<UpdateVoiceTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateVoiceTemplateContinuation) in
            updateVoiceTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
