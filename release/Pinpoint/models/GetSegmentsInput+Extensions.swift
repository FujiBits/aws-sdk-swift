// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetSegmentsInputHeadersMiddleware: Middleware {
    public let id: String = "GetSegmentsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetSegmentsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetSegmentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetSegmentsInput>
    public typealias MOutput = OperationOutput<GetSegmentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetSegmentsOutputError>
}

public struct GetSegmentsInputQueryItemMiddleware: Middleware {
    public let id: String = "GetSegmentsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetSegmentsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetSegmentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = URLQueryItem(name: "page-size".urlPercentEncoding(), value: String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        if let token = input.operationInput.token {
            let tokenQueryItem = URLQueryItem(name: "token".urlPercentEncoding(), value: String(token).urlPercentEncoding())
            input.builder.withQueryItem(tokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetSegmentsInput>
    public typealias MOutput = OperationOutput<GetSegmentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetSegmentsOutputError>
}

extension GetSegmentsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
