// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateSmsTemplateInputHeadersMiddleware: Middleware {
    public let id: String = "CreateSmsTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateSmsTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateSmsTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateSmsTemplateInput>
    public typealias MOutput = OperationOutput<CreateSmsTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateSmsTemplateOutputError>
}

public struct CreateSmsTemplateInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateSmsTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateSmsTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateSmsTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateSmsTemplateInput>
    public typealias MOutput = OperationOutput<CreateSmsTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateSmsTemplateOutputError>
}

public struct CreateSmsTemplateInputBodyMiddleware: Middleware {
    public let id: String = "CreateSmsTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateSmsTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateSmsTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let sMSTemplateRequest = input.operationInput.sMSTemplateRequest {
            do {
                let encoder = context.getEncoder()
                let data = try encoder.encode(sMSTemplateRequest)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateSmsTemplateInput>
    public typealias MOutput = OperationOutput<CreateSmsTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateSmsTemplateOutputError>
}

extension CreateSmsTemplateInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case sMSTemplateRequest = "SMSTemplateRequest"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sMSTemplateRequest = sMSTemplateRequest {
            try encodeContainer.encode(sMSTemplateRequest, forKey: .sMSTemplateRequest)
        }
    }
}
