// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension SesClient {
    /// Creates a receipt rule set by cloning an existing one. All receipt rules and
    ///             configurations are copied to the new receipt rule set and are completely independent of
    ///             the source rule set.
    ///         For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES
    ///                 Developer Guide.
    ///         You can execute this operation no more than once per second.
    func cloneReceiptRuleSet(input: CloneReceiptRuleSetInput) async throws -> CloneReceiptRuleSetOutputResponse
    {
        typealias cloneReceiptRuleSetContinuation = CheckedContinuation<CloneReceiptRuleSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cloneReceiptRuleSetContinuation) in
            cloneReceiptRuleSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a configuration set.
    ///         Configuration sets enable you to publish email sending events. For information about
    ///             using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func createConfigurationSet(input: CreateConfigurationSetInput) async throws -> CreateConfigurationSetOutputResponse
    {
        typealias createConfigurationSetContinuation = CheckedContinuation<CreateConfigurationSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConfigurationSetContinuation) in
            createConfigurationSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a configuration set event destination.
    ///
    ///             When you create or update an event destination, you must provide one, and only
    ///                 one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).
    ///
    ///         An event destination is the AWS service to which Amazon SES publishes the email sending
    ///             events associated with a configuration set. For information about using configuration
    ///             sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func createConfigurationSetEventDestination(input: CreateConfigurationSetEventDestinationInput) async throws -> CreateConfigurationSetEventDestinationOutputResponse
    {
        typealias createConfigurationSetEventDestinationContinuation = CheckedContinuation<CreateConfigurationSetEventDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConfigurationSetEventDestinationContinuation) in
            createConfigurationSetEventDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an association between a configuration set and a custom domain for open and
    ///             click event tracking.
    ///         By default, images and links used for tracking open and click events are hosted on
    ///             domains operated by Amazon SES. You can configure a subdomain of your own to handle these
    ///             events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide.
    func createConfigurationSetTrackingOptions(input: CreateConfigurationSetTrackingOptionsInput) async throws -> CreateConfigurationSetTrackingOptionsOutputResponse
    {
        typealias createConfigurationSetTrackingOptionsContinuation = CheckedContinuation<CreateConfigurationSetTrackingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConfigurationSetTrackingOptionsContinuation) in
            createConfigurationSetTrackingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new custom verification email template.
    ///         For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates in the Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func createCustomVerificationEmailTemplate(input: CreateCustomVerificationEmailTemplateInput) async throws -> CreateCustomVerificationEmailTemplateOutputResponse
    {
        typealias createCustomVerificationEmailTemplateContinuation = CheckedContinuation<CreateCustomVerificationEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCustomVerificationEmailTemplateContinuation) in
            createCustomVerificationEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new IP address filter.
    ///         For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide.
    ///         You can execute this operation no more than once per second.
    func createReceiptFilter(input: CreateReceiptFilterInput) async throws -> CreateReceiptFilterOutputResponse
    {
        typealias createReceiptFilterContinuation = CheckedContinuation<CreateReceiptFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createReceiptFilterContinuation) in
            createReceiptFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a receipt rule.
    ///         For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func createReceiptRule(input: CreateReceiptRuleInput) async throws -> CreateReceiptRuleOutputResponse
    {
        typealias createReceiptRuleContinuation = CheckedContinuation<CreateReceiptRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createReceiptRuleContinuation) in
            createReceiptRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an empty receipt rule set.
    ///         For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES
    ///                 Developer Guide.
    ///         You can execute this operation no more than once per second.
    func createReceiptRuleSet(input: CreateReceiptRuleSetInput) async throws -> CreateReceiptRuleSetOutputResponse
    {
        typealias createReceiptRuleSetContinuation = CheckedContinuation<CreateReceiptRuleSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createReceiptRuleSetContinuation) in
            createReceiptRuleSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an email template. Email templates enable you to send personalized email to
    ///             one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func createTemplate(input: CreateTemplateInput) async throws -> CreateTemplateOutputResponse
    {
        typealias createTemplateContinuation = CheckedContinuation<CreateTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTemplateContinuation) in
            createTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a configuration set. Configuration sets enable you to publish email sending
    ///             events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide.
    ///         You can execute this operation no more than once per second.
    func deleteConfigurationSet(input: DeleteConfigurationSetInput) async throws -> DeleteConfigurationSetOutputResponse
    {
        typealias deleteConfigurationSetContinuation = CheckedContinuation<DeleteConfigurationSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConfigurationSetContinuation) in
            deleteConfigurationSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a configuration set event destination. Configuration set event destinations
    ///             are associated with configuration sets, which enable you to publish email sending
    ///             events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide.
    ///         You can execute this operation no more than once per second.
    func deleteConfigurationSetEventDestination(input: DeleteConfigurationSetEventDestinationInput) async throws -> DeleteConfigurationSetEventDestinationOutputResponse
    {
        typealias deleteConfigurationSetEventDestinationContinuation = CheckedContinuation<DeleteConfigurationSetEventDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConfigurationSetEventDestinationContinuation) in
            deleteConfigurationSetEventDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an association between a configuration set and a custom domain for open and
    ///             click event tracking.
    ///         By default, images and links used for tracking open and click events are hosted on
    ///             domains operated by Amazon SES. You can configure a subdomain of your own to handle these
    ///             events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide.
    ///
    ///             Deleting this kind of association will result in emails sent using the specified
    ///                 configuration set to capture open and click events using the standard,
    ///                 Amazon SES-operated domains.
    ///
    func deleteConfigurationSetTrackingOptions(input: DeleteConfigurationSetTrackingOptionsInput) async throws -> DeleteConfigurationSetTrackingOptionsOutputResponse
    {
        typealias deleteConfigurationSetTrackingOptionsContinuation = CheckedContinuation<DeleteConfigurationSetTrackingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConfigurationSetTrackingOptionsContinuation) in
            deleteConfigurationSetTrackingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing custom verification email template.
    ///         For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates in the Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func deleteCustomVerificationEmailTemplate(input: DeleteCustomVerificationEmailTemplateInput) async throws -> DeleteCustomVerificationEmailTemplateOutputResponse
    {
        typealias deleteCustomVerificationEmailTemplateContinuation = CheckedContinuation<DeleteCustomVerificationEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCustomVerificationEmailTemplateContinuation) in
            deleteCustomVerificationEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified identity (an email address or a domain) from the list of
    ///             verified identities.
    ///         You can execute this operation no more than once per second.
    func deleteIdentity(input: DeleteIdentityInput) async throws -> DeleteIdentityOutputResponse
    {
        typealias deleteIdentityContinuation = CheckedContinuation<DeleteIdentityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIdentityContinuation) in
            deleteIdentity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified sending authorization policy for the given identity (an email
    ///             address or a domain). This API returns successfully even if a policy with the specified
    ///             name does not exist.
    ///
    ///             This API is for the identity owner only. If you have not verified the identity,
    ///                 this API will return an error.
    ///
    ///         Sending authorization is a feature that enables an identity owner to authorize other
    ///             senders to use its identities. For information about using sending authorization, see
    ///             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func deleteIdentityPolicy(input: DeleteIdentityPolicyInput) async throws -> DeleteIdentityPolicyOutputResponse
    {
        typealias deleteIdentityPolicyContinuation = CheckedContinuation<DeleteIdentityPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIdentityPolicyContinuation) in
            deleteIdentityPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified IP address filter.
    ///         For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES
    ///                 Developer Guide.
    ///         You can execute this operation no more than once per second.
    func deleteReceiptFilter(input: DeleteReceiptFilterInput) async throws -> DeleteReceiptFilterOutputResponse
    {
        typealias deleteReceiptFilterContinuation = CheckedContinuation<DeleteReceiptFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteReceiptFilterContinuation) in
            deleteReceiptFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified receipt rule.
    ///         For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES
    ///                 Developer Guide.
    ///         You can execute this operation no more than once per second.
    func deleteReceiptRule(input: DeleteReceiptRuleInput) async throws -> DeleteReceiptRuleOutputResponse
    {
        typealias deleteReceiptRuleContinuation = CheckedContinuation<DeleteReceiptRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteReceiptRuleContinuation) in
            deleteReceiptRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified receipt rule set and all of the receipt rules it
    ///             contains.
    ///
    ///             The currently active rule set cannot be deleted.
    ///
    ///         For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide.
    ///         You can execute this operation no more than once per second.
    func deleteReceiptRuleSet(input: DeleteReceiptRuleSetInput) async throws -> DeleteReceiptRuleSetOutputResponse
    {
        typealias deleteReceiptRuleSetContinuation = CheckedContinuation<DeleteReceiptRuleSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteReceiptRuleSetContinuation) in
            deleteReceiptRuleSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an email template.
    ///         You can execute this operation no more than once per second.
    func deleteTemplate(input: DeleteTemplateInput) async throws -> DeleteTemplateOutputResponse
    {
        typealias deleteTemplateContinuation = CheckedContinuation<DeleteTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTemplateContinuation) in
            deleteTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deprecated. Use the DeleteIdentity operation to delete email addresses
    ///             and domains.
    func deleteVerifiedEmailAddress(input: DeleteVerifiedEmailAddressInput) async throws -> DeleteVerifiedEmailAddressOutputResponse
    {
        typealias deleteVerifiedEmailAddressContinuation = CheckedContinuation<DeleteVerifiedEmailAddressOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVerifiedEmailAddressContinuation) in
            deleteVerifiedEmailAddress(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the metadata and receipt rules for the receipt rule set that is currently
    ///             active.
    ///         For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES
    ///                 Developer Guide.
    ///         You can execute this operation no more than once per second.
    func describeActiveReceiptRuleSet(input: DescribeActiveReceiptRuleSetInput) async throws -> DescribeActiveReceiptRuleSetOutputResponse
    {
        typealias describeActiveReceiptRuleSetContinuation = CheckedContinuation<DescribeActiveReceiptRuleSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeActiveReceiptRuleSetContinuation) in
            describeActiveReceiptRuleSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the details of the specified configuration set. For information about using
    ///             configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func describeConfigurationSet(input: DescribeConfigurationSetInput) async throws -> DescribeConfigurationSetOutputResponse
    {
        typealias describeConfigurationSetContinuation = CheckedContinuation<DescribeConfigurationSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeConfigurationSetContinuation) in
            describeConfigurationSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the details of the specified receipt rule.
    ///         For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func describeReceiptRule(input: DescribeReceiptRuleInput) async throws -> DescribeReceiptRuleOutputResponse
    {
        typealias describeReceiptRuleContinuation = CheckedContinuation<DescribeReceiptRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeReceiptRuleContinuation) in
            describeReceiptRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the details of the specified receipt rule set.
    ///         For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide.
    ///         You can execute this operation no more than once per second.
    func describeReceiptRuleSet(input: DescribeReceiptRuleSetInput) async throws -> DescribeReceiptRuleSetOutputResponse
    {
        typealias describeReceiptRuleSetContinuation = CheckedContinuation<DescribeReceiptRuleSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeReceiptRuleSetContinuation) in
            describeReceiptRuleSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the email sending status of the Amazon SES account for the current region.
    ///         You can execute this operation no more than once per second.
    func getAccountSendingEnabled(input: GetAccountSendingEnabledInput) async throws -> GetAccountSendingEnabledOutputResponse
    {
        typealias getAccountSendingEnabledContinuation = CheckedContinuation<GetAccountSendingEnabledOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAccountSendingEnabledContinuation) in
            getAccountSendingEnabled(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the custom email verification template for the template name you
    ///             specify.
    ///         For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates in the Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func getCustomVerificationEmailTemplate(input: GetCustomVerificationEmailTemplateInput) async throws -> GetCustomVerificationEmailTemplateOutputResponse
    {
        typealias getCustomVerificationEmailTemplateContinuation = CheckedContinuation<GetCustomVerificationEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCustomVerificationEmailTemplateContinuation) in
            getCustomVerificationEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the current status of Easy DKIM signing for an entity. For domain name
    ///             identities, this operation also returns the DKIM tokens that are required for Easy DKIM
    ///             signing, and whether Amazon SES has successfully verified that these tokens have been
    ///             published.
    ///         This operation takes a list of identities as input and returns the following
    ///             information for each:
    ///
    ///
    ///                 Whether Easy DKIM signing is enabled or disabled.
    ///
    ///
    ///                 A set of DKIM tokens that represent the identity. If the identity is an email
    ///                     address, the tokens represent the domain of that address.
    ///
    ///
    ///                 Whether Amazon SES has successfully verified the DKIM tokens published in the
    ///                     domain's DNS. This information is only returned for domain name identities, not
    ///                     for email addresses.
    ///
    ///
    ///         This operation is throttled at one request per second and can only get DKIM attributes
    ///             for up to 100 identities at a time.
    ///         For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide.
    func getIdentityDkimAttributes(input: GetIdentityDkimAttributesInput) async throws -> GetIdentityDkimAttributesOutputResponse
    {
        typealias getIdentityDkimAttributesContinuation = CheckedContinuation<GetIdentityDkimAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIdentityDkimAttributesContinuation) in
            getIdentityDkimAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the custom MAIL FROM attributes for a list of identities (email addresses :
    ///             domains).
    ///         This operation is throttled at one request per second and can only get custom MAIL
    ///             FROM attributes for up to 100 identities at a time.
    func getIdentityMailFromDomainAttributes(input: GetIdentityMailFromDomainAttributesInput) async throws -> GetIdentityMailFromDomainAttributesOutputResponse
    {
        typealias getIdentityMailFromDomainAttributesContinuation = CheckedContinuation<GetIdentityMailFromDomainAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIdentityMailFromDomainAttributesContinuation) in
            getIdentityMailFromDomainAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Given a list of verified identities (email addresses and/or domains), returns a
    ///             structure describing identity notification attributes.
    ///         This operation is throttled at one request per second and can only get notification
    ///             attributes for up to 100 identities at a time.
    ///         For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES
    ///                 Developer Guide.
    func getIdentityNotificationAttributes(input: GetIdentityNotificationAttributesInput) async throws -> GetIdentityNotificationAttributesOutputResponse
    {
        typealias getIdentityNotificationAttributesContinuation = CheckedContinuation<GetIdentityNotificationAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIdentityNotificationAttributesContinuation) in
            getIdentityNotificationAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the requested sending authorization policies for the given identity (an email
    ///             address or a domain). The policies are returned as a map of policy names to policy
    ///             contents. You can retrieve a maximum of 20 policies at a time.
    ///
    ///             This API is for the identity owner only. If you have not verified the identity,
    ///                 this API will return an error.
    ///
    ///         Sending authorization is a feature that enables an identity owner to authorize other
    ///             senders to use its identities. For information about using sending authorization, see
    ///             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func getIdentityPolicies(input: GetIdentityPoliciesInput) async throws -> GetIdentityPoliciesOutputResponse
    {
        typealias getIdentityPoliciesContinuation = CheckedContinuation<GetIdentityPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIdentityPoliciesContinuation) in
            getIdentityPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Given a list of identities (email addresses and/or domains), returns the verification
    ///             status and (for domain identities) the verification token for each identity.
    ///         The verification status of an email address is "Pending" until the email address owner
    ///             clicks the link within the verification email that Amazon SES sent to that address. If the
    ///             email address owner clicks the link within 24 hours, the verification status of the
    ///             email address changes to "Success". If the link is not clicked within 24 hours, the
    ///             verification status changes to "Failed." In that case, if you still want to verify the
    ///             email address, you must restart the verification process from the beginning.
    ///         For domain identities, the domain's verification status is "Pending" as Amazon SES searches
    ///             for the required TXT record in the DNS settings of the domain. When Amazon SES detects the
    ///             record, the domain's verification status changes to "Success". If Amazon SES is unable to
    ///             detect the record within 72 hours, the domain's verification status changes to "Failed."
    ///             In that case, if you still want to verify the domain, you must restart the verification
    ///             process from the beginning.
    ///         This operation is throttled at one request per second and can only get verification
    ///             attributes for up to 100 identities at a time.
    func getIdentityVerificationAttributes(input: GetIdentityVerificationAttributesInput) async throws -> GetIdentityVerificationAttributesOutputResponse
    {
        typealias getIdentityVerificationAttributesContinuation = CheckedContinuation<GetIdentityVerificationAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIdentityVerificationAttributesContinuation) in
            getIdentityVerificationAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides the sending limits for the Amazon SES account.
    ///         You can execute this operation no more than once per second.
    func getSendQuota(input: GetSendQuotaInput) async throws -> GetSendQuotaOutputResponse
    {
        typealias getSendQuotaContinuation = CheckedContinuation<GetSendQuotaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSendQuotaContinuation) in
            getSendQuota(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides sending statistics for the current AWS Region. The result is a list of data
    ///             points, representing the last two weeks of sending activity. Each data point in the list
    ///             contains statistics for a 15-minute period of time.
    ///         You can execute this operation no more than once per second.
    func getSendStatistics(input: GetSendStatisticsInput) async throws -> GetSendStatisticsOutputResponse
    {
        typealias getSendStatisticsContinuation = CheckedContinuation<GetSendStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSendStatisticsContinuation) in
            getSendStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Displays the template object (which includes the Subject line, HTML part and text
    ///             part) for the template you specify.
    ///         You can execute this operation no more than once per second.
    func getTemplate(input: GetTemplateInput) async throws -> GetTemplateOutputResponse
    {
        typealias getTemplateContinuation = CheckedContinuation<GetTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTemplateContinuation) in
            getTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides a list of the configuration sets associated with your Amazon SES account in the
    ///             current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity in the Amazon SES Developer
    ///                 Guide.
    ///
    ///         You can execute this operation no more than once per second. This operation will
    ///             return up to 1,000 configuration sets each time it is run. If your Amazon SES account has
    ///             more than 1,000 configuration sets, this operation will also return a NextToken element.
    ///             You can then execute the ListConfigurationSets operation again, passing the
    ///                 NextToken parameter and the value of the NextToken element to retrieve
    ///             additional results.
    func listConfigurationSets(input: ListConfigurationSetsInput) async throws -> ListConfigurationSetsOutputResponse
    {
        typealias listConfigurationSetsContinuation = CheckedContinuation<ListConfigurationSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listConfigurationSetsContinuation) in
            listConfigurationSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the existing custom verification email templates for your account in the current
    ///             AWS Region.
    ///         For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates in the Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func listCustomVerificationEmailTemplates(input: ListCustomVerificationEmailTemplatesInput) async throws -> ListCustomVerificationEmailTemplatesOutputResponse
    {
        typealias listCustomVerificationEmailTemplatesContinuation = CheckedContinuation<ListCustomVerificationEmailTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCustomVerificationEmailTemplatesContinuation) in
            listCustomVerificationEmailTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list containing all of the identities (email addresses and domains) for your
    ///             AWS account in the current AWS Region, regardless of verification status.
    ///         You can execute this operation no more than once per second.
    func listIdentities(input: ListIdentitiesInput) async throws -> ListIdentitiesOutputResponse
    {
        typealias listIdentitiesContinuation = CheckedContinuation<ListIdentitiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIdentitiesContinuation) in
            listIdentities(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of sending authorization policies that are attached to the given
    ///             identity (an email address or a domain). This API returns only a list. If you want the
    ///             actual policy content, you can use GetIdentityPolicies.
    ///
    ///             This API is for the identity owner only. If you have not verified the identity,
    ///                 this API will return an error.
    ///
    ///         Sending authorization is a feature that enables an identity owner to authorize other
    ///             senders to use its identities. For information about using sending authorization, see
    ///             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func listIdentityPolicies(input: ListIdentityPoliciesInput) async throws -> ListIdentityPoliciesOutputResponse
    {
        typealias listIdentityPoliciesContinuation = CheckedContinuation<ListIdentityPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIdentityPoliciesContinuation) in
            listIdentityPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the IP address filters associated with your AWS account in the current AWS
    ///             Region.
    ///         For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES
    ///                 Developer Guide.
    ///         You can execute this operation no more than once per second.
    func listReceiptFilters(input: ListReceiptFiltersInput) async throws -> ListReceiptFiltersOutputResponse
    {
        typealias listReceiptFiltersContinuation = CheckedContinuation<ListReceiptFiltersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listReceiptFiltersContinuation) in
            listReceiptFilters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the receipt rule sets that exist under your AWS account in the current AWS
    ///             Region. If there are additional receipt rule sets to be retrieved, you will receive a
    ///                 NextToken that you can provide to the next call to
    ///                 ListReceiptRuleSets to retrieve the additional entries.
    ///         For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide.
    ///         You can execute this operation no more than once per second.
    func listReceiptRuleSets(input: ListReceiptRuleSetsInput) async throws -> ListReceiptRuleSetsOutputResponse
    {
        typealias listReceiptRuleSetsContinuation = CheckedContinuation<ListReceiptRuleSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listReceiptRuleSetsContinuation) in
            listReceiptRuleSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the email templates present in your Amazon SES account in the current AWS
    ///             Region.
    ///         You can execute this operation no more than once per second.
    func listTemplates(input: ListTemplatesInput) async throws -> ListTemplatesOutputResponse
    {
        typealias listTemplatesContinuation = CheckedContinuation<ListTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTemplatesContinuation) in
            listTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deprecated. Use the ListIdentities operation to list the email addresses
    ///             and domains associated with your account.
    func listVerifiedEmailAddresses(input: ListVerifiedEmailAddressesInput) async throws -> ListVerifiedEmailAddressesOutputResponse
    {
        typealias listVerifiedEmailAddressesContinuation = CheckedContinuation<ListVerifiedEmailAddressesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listVerifiedEmailAddressesContinuation) in
            listVerifiedEmailAddresses(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds or updates the delivery options for a configuration set.
    func putConfigurationSetDeliveryOptions(input: PutConfigurationSetDeliveryOptionsInput) async throws -> PutConfigurationSetDeliveryOptionsOutputResponse
    {
        typealias putConfigurationSetDeliveryOptionsContinuation = CheckedContinuation<PutConfigurationSetDeliveryOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putConfigurationSetDeliveryOptionsContinuation) in
            putConfigurationSetDeliveryOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds or updates a sending authorization policy for the specified identity (an email
    ///             address or a domain).
    ///
    ///             This API is for the identity owner only. If you have not verified the identity,
    ///                 this API will return an error.
    ///
    ///         Sending authorization is a feature that enables an identity owner to authorize other
    ///             senders to use its identities. For information about using sending authorization, see
    ///             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func putIdentityPolicy(input: PutIdentityPolicyInput) async throws -> PutIdentityPolicyOutputResponse
    {
        typealias putIdentityPolicyContinuation = CheckedContinuation<PutIdentityPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putIdentityPolicyContinuation) in
            putIdentityPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Reorders the receipt rules within a receipt rule set.
    ///
    ///             All of the rules in the rule set must be represented in this request. That is,
    ///                 this API will return an error if the reorder request doesn't explicitly position all
    ///                 of the rules.
    ///
    ///         For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide.
    ///         You can execute this operation no more than once per second.
    func reorderReceiptRuleSet(input: ReorderReceiptRuleSetInput) async throws -> ReorderReceiptRuleSetOutputResponse
    {
        typealias reorderReceiptRuleSetContinuation = CheckedContinuation<ReorderReceiptRuleSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: reorderReceiptRuleSetContinuation) in
            reorderReceiptRuleSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Generates and sends a bounce message to the sender of an email you received through
    ///             Amazon SES. You can only use this API on an email up to 24 hours after you receive it.
    ///
    ///             You cannot use this API to send generic bounces for mail that was not received by
    ///                 Amazon SES.
    ///
    ///         For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES
    ///                 Developer Guide.
    ///         You can execute this operation no more than once per second.
    func sendBounce(input: SendBounceInput) async throws -> SendBounceOutputResponse
    {
        typealias sendBounceContinuation = CheckedContinuation<SendBounceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendBounceContinuation) in
            sendBounce(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Composes an email message to multiple destinations. The message body is created using
    ///             an email template.
    ///         In order to send email using the SendBulkTemplatedEmail operation, your
    ///             call to the API must meet the following requirements:
    ///
    ///
    ///                 The call must refer to an existing email template. You can create email
    ///                     templates using the CreateTemplate operation.
    ///
    ///
    ///                 The message must be sent from a verified email address or domain.
    ///
    ///
    ///                 If your account is still in the Amazon SES sandbox, you may only send to verified
    ///                     addresses or domains, or to email addresses associated with the Amazon SES Mailbox
    ///                     Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying
    ///                         Email Addresses and Domains in the Amazon SES Developer
    ///                         Guide.
    ///
    ///
    ///
    ///                 The maximum message size is 10 MB.
    ///
    ///
    ///                 Each Destination parameter must include at least one recipient
    ///                     email address. The recipient address can be a To: address, a CC: address, or a
    ///                     BCC: address. If a recipient email address is invalid (that is, it is not in the
    ///                     format UserName@[SubDomain.]Domain.TopLevelDomain), the
    ///                     entire message will be rejected, even if the message contains other recipients
    ///                     that are valid.
    ///
    ///
    ///                 The message may not include more than 50 recipients, across the To:, CC: and
    ///                     BCC: fields. If you need to send an email message to a larger audience, you can
    ///                     divide your recipient list into groups of 50 or fewer, and then call the
    ///                         SendBulkTemplatedEmail operation several times to send the
    ///                     message to each group.
    ///
    ///
    ///                 The number of destinations you can contact in a single call to the API may be
    ///                     limited by your account's maximum sending rate.
    ///
    ///
    func sendBulkTemplatedEmail(input: SendBulkTemplatedEmailInput) async throws -> SendBulkTemplatedEmailOutputResponse
    {
        typealias sendBulkTemplatedEmailContinuation = CheckedContinuation<SendBulkTemplatedEmailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendBulkTemplatedEmailContinuation) in
            sendBulkTemplatedEmail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds an email address to the list of identities for your Amazon SES account in the current
    ///             AWS Region and attempts to verify it. As a result of executing this operation, a
    ///             customized verification email is sent to the specified address.
    ///         To use this operation, you must first create a custom verification email template. For
    ///             more information about creating and using custom verification email templates, see
    ///                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom
    ///                 Verification Email Templates in the Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func sendCustomVerificationEmail(input: SendCustomVerificationEmailInput) async throws -> SendCustomVerificationEmailOutputResponse
    {
        typealias sendCustomVerificationEmailContinuation = CheckedContinuation<SendCustomVerificationEmailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendCustomVerificationEmailContinuation) in
            sendCustomVerificationEmail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Composes an email message and immediately queues it for sending. In order to send
    ///             email using the SendEmail operation, your message must meet the following
    ///             requirements:
    ///
    ///
    ///
    ///                 The message must be sent from a verified email address or domain. If you
    ///                     attempt to send email using a non-verified address or domain, the operation will
    ///                     result in an "Email address not verified" error.
    ///
    ///
    ///                 If your account is still in the Amazon SES sandbox, you may only send to verified
    ///                     addresses or domains, or to email addresses associated with the Amazon SES Mailbox
    ///                     Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying
    ///                         Email Addresses and Domains in the Amazon SES Developer
    ///                         Guide.
    ///
    ///
    ///
    ///                 The maximum message size is 10 MB.
    ///
    ///
    ///                 The message must include at least one recipient email address. The recipient
    ///                     address can be a To: address, a CC: address, or a BCC: address. If a recipient
    ///                     email address is invalid (that is, it is not in the format
    ///                         UserName@[SubDomain.]Domain.TopLevelDomain), the entire
    ///                     message will be rejected, even if the message contains other recipients that are
    ///                     valid.
    ///
    ///
    ///                 The message may not include more than 50 recipients, across the To:, CC: and
    ///                     BCC: fields. If you need to send an email message to a larger audience, you can
    ///                     divide your recipient list into groups of 50 or fewer, and then call the
    ///                         SendEmail operation several times to send the message to each
    ///                     group.
    ///
    ///
    ///
    ///             For every message that you send, the total number of recipients (including each
    ///                 recipient in the To:, CC: and BCC: fields) is counted against the maximum number of
    ///                 emails you can send in a 24-hour period (your sending quota).
    ///                 For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES
    ///                     Sending Limits in the Amazon SES Developer Guide.
    ///
    ///
    func sendEmail(input: SendEmailInput) async throws -> SendEmailOutputResponse
    {
        typealias sendEmailContinuation = CheckedContinuation<SendEmailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendEmailContinuation) in
            sendEmail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Composes an email message and immediately queues it for sending.
    ///
    ///         This operation is more flexible than the SendEmail API operation. When
    ///             you use the SendRawEmail operation, you can specify the headers of the
    ///             message as well as its content. This flexibility is useful, for example, when you want
    ///             to send a multipart MIME email (such a message that contains both a text and an HTML
    ///             version). You can also use this operation to send messages that include
    ///             attachments.
    ///         The SendRawEmail operation has the following requirements:
    ///
    ///
    ///                 You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains. If you try
    ///                     to send email from an address that isn't verified, the operation results in an
    ///                     "Email address not verified" error.
    ///
    ///
    ///                 If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox, you can only send email to other
    ///                     verified addresses in your account, or to addresses that are associated with the
    ///                         <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator.
    ///
    ///
    ///                 The maximum message size, including attachments, is 10 MB.
    ///
    ///
    ///                 Each message has to include at least one recipient address. A recipient
    ///                     address includes any address on the To:, CC:, or BCC: lines.
    ///
    ///
    ///                 If you send a single message to more than one recipient address, and one of
    ///                     the recipient addresses isn't in a valid format (that is, it's not in the format
    ///                         UserName@[SubDomain.]Domain.TopLevelDomain), Amazon SES
    ///                     rejects the entire message, even if the other addresses are valid.
    ///
    ///
    ///                 Each message can include up to 50 recipient addresses across the To:, CC:, or
    ///                     BCC: lines. If you need to send a single message to more than 50 recipients, you
    ///                     have to split the list of recipient addresses into groups of less than 50
    ///                     recipients, and send separate messages to each group.
    ///
    ///
    ///                 Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message
    ///                     parts. However, if Amazon SES has to modify the contents of your message (for
    ///                     example, if you use open and click tracking), 8-bit content isn't preserved. For
    ///                     this reason, we highly recommend that you encode all content that isn't 7-bit
    ///                     ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding in the Amazon SES Developer
    ///                         Guide.
    ///
    ///
    ///
    ///
    ///
    ///         Additionally, keep the following considerations in mind when using the
    ///                 SendRawEmail operation:
    ///
    ///
    ///
    ///                 Although you can customize the message headers when using the
    ///                         SendRawEmail operation, Amazon SES will automatically apply its own
    ///                         Message-ID and Date headers; if you passed these
    ///                     headers when creating the message, they will be overwritten by the values that
    ///                     Amazon SES provides.
    ///
    ///
    ///                 If you are using sending authorization to send on behalf of another user,
    ///                         SendRawEmail enables you to specify the cross-account identity
    ///                     for the email's Source, From, and Return-Path parameters in one of two ways: you
    ///                     can pass optional parameters SourceArn, FromArn,
    ///                     and/or ReturnPathArn to the API, or you can include the following
    ///                     X-headers in the header of your raw email:
    ///
    ///
    ///
    ///                             X-SES-SOURCE-ARN
    ///
    ///
    ///
    ///
    ///                             X-SES-FROM-ARN
    ///
    ///
    ///
    ///
    ///                             X-SES-RETURN-PATH-ARN
    ///
    ///
    ///
    ///
    ///                     Don't include these X-headers in the DKIM signature. Amazon SES removes these
    ///                         before it sends the email.
    ///
    ///                 If you only specify the SourceIdentityArn parameter, Amazon SES sets
    ///                     the From and Return-Path addresses to the same identity that you
    ///                     specified.
    ///                 For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending
    ///                         Authorization with Amazon SES in the Amazon SES Developer
    ///                         Guide.
    ///
    ///
    ///
    ///                 For every message that you send, the total number of recipients (including
    ///                     each recipient in the To:, CC: and BCC: fields) is counted against the maximum
    ///                     number of emails you can send in a 24-hour period (your sending
    ///                         quota). For more information about sending quotas in Amazon SES, see
    ///                         <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your
    ///                         Amazon SES Sending Limits in the Amazon SES Developer
    ///                         Guide.
    ///
    ///
    ///
    func sendRawEmail(input: SendRawEmailInput) async throws -> SendRawEmailOutputResponse
    {
        typealias sendRawEmailContinuation = CheckedContinuation<SendRawEmailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendRawEmailContinuation) in
            sendRawEmail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Composes an email message using an email template and immediately queues it for
    ///             sending.
    ///         In order to send email using the SendTemplatedEmail operation, your call
    ///             to the API must meet the following requirements:
    ///
    ///
    ///                 The call must refer to an existing email template. You can create email
    ///                     templates using the CreateTemplate operation.
    ///
    ///
    ///                 The message must be sent from a verified email address or domain.
    ///
    ///
    ///                 If your account is still in the Amazon SES sandbox, you may only send to verified
    ///                     addresses or domains, or to email addresses associated with the Amazon SES Mailbox
    ///                     Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying
    ///                         Email Addresses and Domains in the Amazon SES Developer
    ///                         Guide.
    ///
    ///
    ///
    ///                 The maximum message size is 10 MB.
    ///
    ///
    ///                 Calls to the SendTemplatedEmail operation may only include one
    ///                         Destination parameter. A destination is a set of recipients who
    ///                     will receive the same version of the email. The Destination
    ///                     parameter can include up to 50 recipients, across the To:, CC: and BCC:
    ///                     fields.
    ///
    ///
    ///                 The Destination parameter must include at least one recipient
    ///                     email address. The recipient address can be a To: address, a CC: address, or a
    ///                     BCC: address. If a recipient email address is invalid (that is, it is not in the
    ///                     format UserName@[SubDomain.]Domain.TopLevelDomain), the
    ///                     entire message will be rejected, even if the message contains other recipients
    ///                     that are valid.
    ///
    ///
    ///
    ///             If your call to the SendTemplatedEmail operation includes all of the
    ///                 required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES
    ///                 can't render the email because the template contains errors, it doesn't send the
    ///                 email. Additionally, because it already accepted the message, Amazon SES doesn't return a
    ///                 message stating that it was unable to send the email.
    ///             For these reasons, we highly recommend that you set up Amazon SES to send you
    ///                 notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending
    ///                     Personalized Email Using the Amazon SES API in the Amazon Simple Email Service
    ///                     Developer Guide.
    ///
    func sendTemplatedEmail(input: SendTemplatedEmailInput) async throws -> SendTemplatedEmailOutputResponse
    {
        typealias sendTemplatedEmailContinuation = CheckedContinuation<SendTemplatedEmailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendTemplatedEmailContinuation) in
            sendTemplatedEmail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the specified receipt rule set as the active receipt rule set.
    ///
    ///             To disable your email-receiving through Amazon SES completely, you can call this API
    ///                 with RuleSetName set to null.
    ///
    ///         For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide.
    ///         You can execute this operation no more than once per second.
    func setActiveReceiptRuleSet(input: SetActiveReceiptRuleSetInput) async throws -> SetActiveReceiptRuleSetOutputResponse
    {
        typealias setActiveReceiptRuleSetContinuation = CheckedContinuation<SetActiveReceiptRuleSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setActiveReceiptRuleSetContinuation) in
            setActiveReceiptRuleSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM
    ///             signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends
    ///             from addresses on that domain. If Easy DKIM signing is enabled for an email address,
    ///             then Amazon SES uses DKIM to sign all email it sends from that address.
    ///
    ///             For email addresses (for example, user@example.com), you can only
    ///                 enable DKIM signing if the corresponding domain (in this case,
    ///                     example.com) has been set up to use Easy DKIM.
    ///
    ///         You can enable DKIM signing for an identity at any time after you start the
    ///             verification process for the identity, even if the verification process isn't complete.
    ///         You can execute this operation no more than once per second.
    ///         For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide.
    func setIdentityDkimEnabled(input: SetIdentityDkimEnabledInput) async throws -> SetIdentityDkimEnabledOutputResponse
    {
        typealias setIdentityDkimEnabledContinuation = CheckedContinuation<SetIdentityDkimEnabledOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setIdentityDkimEnabledContinuation) in
            setIdentityDkimEnabled(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Given an identity (an email address or a domain), enables or disables whether Amazon SES
    ///             forwards bounce and complaint notifications as email. Feedback forwarding can only be
    ///             disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and
    ///             complaints.
    ///
    ///             Feedback forwarding does not apply to delivery notifications. Delivery
    ///                 notifications are only available through Amazon SNS.
    ///
    ///         You can execute this operation no more than once per second.
    ///         For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES
    ///                 Developer Guide.
    func setIdentityFeedbackForwardingEnabled(input: SetIdentityFeedbackForwardingEnabledInput) async throws -> SetIdentityFeedbackForwardingEnabledOutputResponse
    {
        typealias setIdentityFeedbackForwardingEnabledContinuation = CheckedContinuation<SetIdentityFeedbackForwardingEnabledOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setIdentityFeedbackForwardingEnabledContinuation) in
            setIdentityFeedbackForwardingEnabled(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Given an identity (an email address or a domain), sets whether Amazon SES includes the
    ///             original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified
    ///             type.
    ///         You can execute this operation no more than once per second.
    ///         For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES
    ///                 Developer Guide.
    func setIdentityHeadersInNotificationsEnabled(input: SetIdentityHeadersInNotificationsEnabledInput) async throws -> SetIdentityHeadersInNotificationsEnabledOutputResponse
    {
        typealias setIdentityHeadersInNotificationsEnabledContinuation = CheckedContinuation<SetIdentityHeadersInNotificationsEnabledOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setIdentityHeadersInNotificationsEnabledContinuation) in
            setIdentityHeadersInNotificationsEnabled(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables or disables the custom MAIL FROM domain setup for a verified identity (an
    ///             email address or a domain).
    ///
    ///             To send emails using the specified MAIL FROM domain, you must add an MX record to
    ///                 your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy
    ///                 Framework (SPF) checks, you must also add or update an SPF record. For more
    ///                 information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer
    ///                 Guide.
    ///
    ///         You can execute this operation no more than once per second.
    func setIdentityMailFromDomain(input: SetIdentityMailFromDomainInput) async throws -> SetIdentityMailFromDomainOutputResponse
    {
        typealias setIdentityMailFromDomainContinuation = CheckedContinuation<SetIdentityMailFromDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setIdentityMailFromDomainContinuation) in
            setIdentityMailFromDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use
    ///             this operation, you specify a verified identity, such as an email address or domain.
    ///             When you send an email that uses the chosen identity in the Source field, Amazon SES sends
    ///             notifications to the topic you specified. You can send bounce, complaint, or delivery
    ///             notifications (or any combination of the three) to the Amazon SNS topic that you
    ///             specify.
    ///         You can execute this operation no more than once per second.
    ///         For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer
    ///             Guide.
    func setIdentityNotificationTopic(input: SetIdentityNotificationTopicInput) async throws -> SetIdentityNotificationTopicOutputResponse
    {
        typealias setIdentityNotificationTopicContinuation = CheckedContinuation<SetIdentityNotificationTopicOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setIdentityNotificationTopicContinuation) in
            setIdentityNotificationTopic(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the position of the specified receipt rule in the receipt rule set.
    ///         For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES
    ///                 Developer Guide.
    ///         You can execute this operation no more than once per second.
    func setReceiptRulePosition(input: SetReceiptRulePositionInput) async throws -> SetReceiptRulePositionOutputResponse
    {
        typealias setReceiptRulePositionContinuation = CheckedContinuation<SetReceiptRulePositionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setReceiptRulePositionContinuation) in
            setReceiptRulePosition(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a preview of the MIME content of an email when provided with a template and a
    ///             set of replacement data.
    ///         You can execute this operation no more than once per second.
    func testRenderTemplate(input: TestRenderTemplateInput) async throws -> TestRenderTemplateOutputResponse
    {
        typealias testRenderTemplateContinuation = CheckedContinuation<TestRenderTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testRenderTemplateContinuation) in
            testRenderTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables or disables email sending across your entire Amazon SES account in the current
    ///             AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to
    ///             temporarily pause email sending across your Amazon SES account in a given AWS Region when
    ///             reputation metrics (such as your bounce or complaint rates) reach certain
    ///             thresholds.
    ///         You can execute this operation no more than once per second.
    func updateAccountSendingEnabled(input: UpdateAccountSendingEnabledInput) async throws -> UpdateAccountSendingEnabledOutputResponse
    {
        typealias updateAccountSendingEnabledContinuation = CheckedContinuation<UpdateAccountSendingEnabledOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAccountSendingEnabledContinuation) in
            updateAccountSendingEnabled(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the event destination of a configuration set. Event destinations are
    ///             associated with configuration sets, which enable you to publish email sending events to
    ///             Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets,
    ///             see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES
    ///                 Sending Activity in the Amazon SES Developer Guide.
    ///
    ///
    ///             When you create or update an event destination, you must provide one, and only
    ///                 one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service
    ///                 (Amazon SNS).
    ///
    ///         You can execute this operation no more than once per second.
    func updateConfigurationSetEventDestination(input: UpdateConfigurationSetEventDestinationInput) async throws -> UpdateConfigurationSetEventDestinationOutputResponse
    {
        typealias updateConfigurationSetEventDestinationContinuation = CheckedContinuation<UpdateConfigurationSetEventDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConfigurationSetEventDestinationContinuation) in
            updateConfigurationSetEventDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables or disables the publishing of reputation metrics for emails sent using a
    ///             specific configuration set in a given AWS Region. Reputation metrics include bounce
    ///             and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can
    ///             create alarms when bounce or complaint rates exceed certain thresholds.
    ///         You can execute this operation no more than once per second.
    func updateConfigurationSetReputationMetricsEnabled(input: UpdateConfigurationSetReputationMetricsEnabledInput) async throws -> UpdateConfigurationSetReputationMetricsEnabledOutputResponse
    {
        typealias updateConfigurationSetReputationMetricsEnabledContinuation = CheckedContinuation<UpdateConfigurationSetReputationMetricsEnabledOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConfigurationSetReputationMetricsEnabledContinuation) in
            updateConfigurationSetReputationMetricsEnabled(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables or disables email sending for messages sent using a specific configuration set
    ///             in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms
    ///             to temporarily pause email sending for a configuration set when the reputation metrics
    ///             for that configuration set (such as your bounce on complaint rate) exceed certain
    ///             thresholds.
    ///         You can execute this operation no more than once per second.
    func updateConfigurationSetSendingEnabled(input: UpdateConfigurationSetSendingEnabledInput) async throws -> UpdateConfigurationSetSendingEnabledOutputResponse
    {
        typealias updateConfigurationSetSendingEnabledContinuation = CheckedContinuation<UpdateConfigurationSetSendingEnabledOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConfigurationSetSendingEnabledContinuation) in
            updateConfigurationSetSendingEnabled(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies an association between a configuration set and a custom domain for open and
    ///             click event tracking.
    ///         By default, images and links used for tracking open and click events are hosted on
    ///             domains operated by Amazon SES. You can configure a subdomain of your own to handle these
    ///             events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide.
    func updateConfigurationSetTrackingOptions(input: UpdateConfigurationSetTrackingOptionsInput) async throws -> UpdateConfigurationSetTrackingOptionsOutputResponse
    {
        typealias updateConfigurationSetTrackingOptionsContinuation = CheckedContinuation<UpdateConfigurationSetTrackingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConfigurationSetTrackingOptionsContinuation) in
            updateConfigurationSetTrackingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing custom verification email template.
    ///         For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates in the Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func updateCustomVerificationEmailTemplate(input: UpdateCustomVerificationEmailTemplateInput) async throws -> UpdateCustomVerificationEmailTemplateOutputResponse
    {
        typealias updateCustomVerificationEmailTemplateContinuation = CheckedContinuation<UpdateCustomVerificationEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateCustomVerificationEmailTemplateContinuation) in
            updateCustomVerificationEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a receipt rule.
    ///         For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES
    ///                 Developer Guide.
    ///         You can execute this operation no more than once per second.
    func updateReceiptRule(input: UpdateReceiptRuleInput) async throws -> UpdateReceiptRuleOutputResponse
    {
        typealias updateReceiptRuleContinuation = CheckedContinuation<UpdateReceiptRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateReceiptRuleContinuation) in
            updateReceiptRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an email template. Email templates enable you to send personalized email to
    ///             one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func updateTemplate(input: UpdateTemplateInput) async throws -> UpdateTemplateOutputResponse
    {
        typealias updateTemplateContinuation = CheckedContinuation<UpdateTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTemplateContinuation) in
            updateTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a set of DKIM tokens for a domain identity.
    ///
    ///             When you execute the VerifyDomainDkim operation, the domain that you
    ///                 specify is added to the list of identities that are associated with your account.
    ///                 This is true even if you haven't already associated the domain with your account by
    ///                 using the VerifyDomainIdentity operation. However, you can't send email
    ///                 from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it or you
    ///                 successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for
    ///                 it.
    ///
    ///         You use the tokens that are generated by this operation to create CNAME records. When
    ///             Amazon SES detects that you've added these records to the DNS configuration for a domain, you
    ///             can start sending email from that domain. You can start sending email even if you
    ///             haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS
    ///             configuration for your domain. All email that you send from the domain is authenticated
    ///             using DKIM.
    ///         To create the CNAME records for DKIM authentication, use the following values:
    ///
    ///
    ///
    ///                   Name:
    ///                         token._domainkey.example.com
    ///
    ///
    ///
    ///
    ///                   Type: CNAME
    ///
    ///
    ///
    ///                   Value:
    ///                     token.dkim.amazonses.com
    ///
    ///
    ///         In the preceding example, replace token with one of the tokens
    ///             that are generated when you execute this operation. Replace
    ///                 example.com with your domain. Repeat this process for each
    ///             token that's generated by this operation.
    ///         You can execute this operation no more than once per second.
    func verifyDomainDkim(input: VerifyDomainDkimInput) async throws -> VerifyDomainDkimOutputResponse
    {
        typealias verifyDomainDkimContinuation = CheckedContinuation<VerifyDomainDkimOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: verifyDomainDkimContinuation) in
            verifyDomainDkim(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a domain to the list of identities for your Amazon SES account in the current AWS
    ///             Region and attempts to verify it. For more information about verifying domains, see
    ///                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email
    ///                 Addresses and Domains in the Amazon SES Developer
    ///             Guide.
    ///
    ///         You can execute this operation no more than once per second.
    func verifyDomainIdentity(input: VerifyDomainIdentityInput) async throws -> VerifyDomainIdentityOutputResponse
    {
        typealias verifyDomainIdentityContinuation = CheckedContinuation<VerifyDomainIdentityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: verifyDomainIdentityContinuation) in
            verifyDomainIdentity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deprecated. Use the VerifyEmailIdentity operation to verify a new email
    ///             address.
    func verifyEmailAddress(input: VerifyEmailAddressInput) async throws -> VerifyEmailAddressOutputResponse
    {
        typealias verifyEmailAddressContinuation = CheckedContinuation<VerifyEmailAddressOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: verifyEmailAddressContinuation) in
            verifyEmailAddress(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds an email address to the list of identities for your Amazon SES account in the current
    ///             AWS region and attempts to verify it. As a result of executing this operation, a
    ///             verification email is sent to the specified address.
    ///         You can execute this operation no more than once per second.
    func verifyEmailIdentity(input: VerifyEmailIdentityInput) async throws -> VerifyEmailIdentityOutputResponse
    {
        typealias verifyEmailIdentityContinuation = CheckedContinuation<VerifyEmailIdentityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: verifyEmailIdentityContinuation) in
            verifyEmailIdentity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
