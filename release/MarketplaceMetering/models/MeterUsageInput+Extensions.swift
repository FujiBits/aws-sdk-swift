// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct MeterUsageInputHeadersMiddleware: Middleware {
    public let id: String = "MeterUsageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<MeterUsageInput>,
                  next: H) -> Swift.Result<OperationOutput<MeterUsageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<MeterUsageInput>
    public typealias MOutput = OperationOutput<MeterUsageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<MeterUsageOutputError>
}

public struct MeterUsageInputQueryItemMiddleware: Middleware {
    public let id: String = "MeterUsageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<MeterUsageInput>,
                  next: H) -> Swift.Result<OperationOutput<MeterUsageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<MeterUsageInput>
    public typealias MOutput = OperationOutput<MeterUsageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<MeterUsageOutputError>
}

public struct MeterUsageInputBodyMiddleware: Middleware {
    public let id: String = "MeterUsageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<MeterUsageInput>,
                  next: H) -> Swift.Result<OperationOutput<MeterUsageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<MeterUsageInput>
    public typealias MOutput = OperationOutput<MeterUsageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<MeterUsageOutputError>
}

extension MeterUsageInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dryRun = "DryRun"
        case productCode = "ProductCode"
        case timestamp = "Timestamp"
        case usageAllocations = "UsageAllocations"
        case usageDimension = "UsageDimension"
        case usageQuantity = "UsageQuantity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dryRun = dryRun {
            try encodeContainer.encode(dryRun, forKey: .dryRun)
        }
        if let productCode = productCode {
            try encodeContainer.encode(productCode, forKey: .productCode)
        }
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp.timeIntervalSince1970, forKey: .timestamp)
        }
        if let usageAllocations = usageAllocations {
            var usageAllocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .usageAllocations)
            for usageallocations0 in usageAllocations {
                try usageAllocationsContainer.encode(usageallocations0)
            }
        }
        if let usageDimension = usageDimension {
            try encodeContainer.encode(usageDimension, forKey: .usageDimension)
        }
        if let usageQuantity = usageQuantity {
            try encodeContainer.encode(usageQuantity, forKey: .usageQuantity)
        }
    }
}
