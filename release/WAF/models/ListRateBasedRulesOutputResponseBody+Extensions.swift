// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRateBasedRulesOutputResponseBody: Equatable {
    public let nextMarker: String?
    public let rules: [RuleSummary]?
}

extension ListRateBasedRulesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextMarker = "NextMarker"
        case rules = "Rules"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let rulesContainer = try containerValues.decodeIfPresent([RuleSummary?].self, forKey: .rules)
        var rulesDecoded0:[RuleSummary]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [RuleSummary]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
    }
}
