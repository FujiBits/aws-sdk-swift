// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateRateBasedRuleInputHeadersMiddleware: Middleware {
    public let id: String = "CreateRateBasedRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRateBasedRuleInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRateBasedRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRateBasedRuleInput>
    public typealias MOutput = OperationOutput<CreateRateBasedRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRateBasedRuleOutputError>
}

public struct CreateRateBasedRuleInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateRateBasedRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRateBasedRuleInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRateBasedRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRateBasedRuleInput>
    public typealias MOutput = OperationOutput<CreateRateBasedRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRateBasedRuleOutputError>
}

public struct CreateRateBasedRuleInputBodyMiddleware: Middleware {
    public let id: String = "CreateRateBasedRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRateBasedRuleInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRateBasedRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRateBasedRuleInput>
    public typealias MOutput = OperationOutput<CreateRateBasedRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRateBasedRuleOutputError>
}

extension CreateRateBasedRuleInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case changeToken = "ChangeToken"
        case metricName = "MetricName"
        case name = "Name"
        case rateKey = "RateKey"
        case rateLimit = "RateLimit"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rateKey = rateKey {
            try encodeContainer.encode(rateKey.rawValue, forKey: .rateKey)
        }
        if rateLimit != 0 {
            try encodeContainer.encode(rateLimit, forKey: .rateLimit)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
