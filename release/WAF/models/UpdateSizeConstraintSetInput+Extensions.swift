// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateSizeConstraintSetInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateSizeConstraintSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateSizeConstraintSetInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateSizeConstraintSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateSizeConstraintSetInput>
    public typealias MOutput = OperationOutput<UpdateSizeConstraintSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateSizeConstraintSetOutputError>
}

public struct UpdateSizeConstraintSetInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateSizeConstraintSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateSizeConstraintSetInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateSizeConstraintSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateSizeConstraintSetInput>
    public typealias MOutput = OperationOutput<UpdateSizeConstraintSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateSizeConstraintSetOutputError>
}

public struct UpdateSizeConstraintSetInputBodyMiddleware: Middleware {
    public let id: String = "UpdateSizeConstraintSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateSizeConstraintSetInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateSizeConstraintSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateSizeConstraintSetInput>
    public typealias MOutput = OperationOutput<UpdateSizeConstraintSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateSizeConstraintSetOutputError>
}

extension UpdateSizeConstraintSetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case changeToken = "ChangeToken"
        case sizeConstraintSetId = "SizeConstraintSetId"
        case updates = "Updates"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeToken = changeToken {
            try encodeContainer.encode(changeToken, forKey: .changeToken)
        }
        if let sizeConstraintSetId = sizeConstraintSetId {
            try encodeContainer.encode(sizeConstraintSetId, forKey: .sizeConstraintSetId)
        }
        if let updates = updates {
            var updatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updates)
            for sizeconstraintsetupdates0 in updates {
                try updatesContainer.encode(sizeconstraintsetupdates0)
            }
        }
    }
}
