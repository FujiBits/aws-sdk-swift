// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ValidatePipelineDefinitionInputHeadersMiddleware: Middleware {
    public let id: String = "ValidatePipelineDefinitionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ValidatePipelineDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<ValidatePipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ValidatePipelineDefinitionInput>
    public typealias MOutput = OperationOutput<ValidatePipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ValidatePipelineDefinitionOutputError>
}

public struct ValidatePipelineDefinitionInputQueryItemMiddleware: Middleware {
    public let id: String = "ValidatePipelineDefinitionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ValidatePipelineDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<ValidatePipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ValidatePipelineDefinitionInput>
    public typealias MOutput = OperationOutput<ValidatePipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ValidatePipelineDefinitionOutputError>
}

public struct ValidatePipelineDefinitionInputBodyMiddleware: Middleware {
    public let id: String = "ValidatePipelineDefinitionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ValidatePipelineDefinitionInput>,
                  next: H) -> Swift.Result<OperationOutput<ValidatePipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ValidatePipelineDefinitionInput>
    public typealias MOutput = OperationOutput<ValidatePipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ValidatePipelineDefinitionOutputError>
}

extension ValidatePipelineDefinitionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case parameterObjects
        case parameterValues
        case pipelineId
        case pipelineObjects
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameterObjects = parameterObjects {
            var parameterObjectsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameterObjects)
            for parameterobjectlist0 in parameterObjects {
                try parameterObjectsContainer.encode(parameterobjectlist0)
            }
        }
        if let parameterValues = parameterValues {
            var parameterValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameterValues)
            for parametervaluelist0 in parameterValues {
                try parameterValuesContainer.encode(parametervaluelist0)
            }
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
        if let pipelineObjects = pipelineObjects {
            var pipelineObjectsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineObjects)
            for pipelineobjectlist0 in pipelineObjects {
                try pipelineObjectsContainer.encode(pipelineobjectlist0)
            }
        }
    }
}
