// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeObjectsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeObjectsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeObjectsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeObjectsInput>
    public typealias MOutput = OperationOutput<DescribeObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeObjectsOutputError>
}

public struct DescribeObjectsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeObjectsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeObjectsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeObjectsInput>
    public typealias MOutput = OperationOutput<DescribeObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeObjectsOutputError>
}

public struct DescribeObjectsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeObjectsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeObjectsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeObjectsInput>
    public typealias MOutput = OperationOutput<DescribeObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeObjectsOutputError>
}

extension DescribeObjectsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case evaluateExpressions
        case marker
        case objectIds
        case pipelineId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if evaluateExpressions != false {
            try encodeContainer.encode(evaluateExpressions, forKey: .evaluateExpressions)
        }
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
        if let objectIds = objectIds {
            var objectIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .objectIds)
            for idlist0 in objectIds {
                try objectIdsContainer.encode(idlist0)
            }
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
    }
}
