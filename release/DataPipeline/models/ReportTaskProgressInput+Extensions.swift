// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ReportTaskProgressInputHeadersMiddleware: Middleware {
    public let id: String = "ReportTaskProgressInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReportTaskProgressInput>,
                  next: H) -> Swift.Result<OperationOutput<ReportTaskProgressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReportTaskProgressInput>
    public typealias MOutput = OperationOutput<ReportTaskProgressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReportTaskProgressOutputError>
}

public struct ReportTaskProgressInputQueryItemMiddleware: Middleware {
    public let id: String = "ReportTaskProgressInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReportTaskProgressInput>,
                  next: H) -> Swift.Result<OperationOutput<ReportTaskProgressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReportTaskProgressInput>
    public typealias MOutput = OperationOutput<ReportTaskProgressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReportTaskProgressOutputError>
}

public struct ReportTaskProgressInputBodyMiddleware: Middleware {
    public let id: String = "ReportTaskProgressInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReportTaskProgressInput>,
                  next: H) -> Swift.Result<OperationOutput<ReportTaskProgressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReportTaskProgressInput>
    public typealias MOutput = OperationOutput<ReportTaskProgressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReportTaskProgressOutputError>
}

extension ReportTaskProgressInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fields
        case taskId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fields = fields {
            var fieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fields)
            for fieldlist0 in fields {
                try fieldsContainer.encode(fieldlist0)
            }
        }
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
    }
}
