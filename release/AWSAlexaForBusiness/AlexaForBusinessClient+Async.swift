// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension AlexaForBusinessClient {
    /// Associates a skill with the organization under the customer's AWS account. If a skill
    ///          is private, the user implicitly accepts access to this skill during enablement.
    func approveSkill(input: ApproveSkillInput) async throws -> ApproveSkillOutputResponse
    {
        typealias approveSkillContinuation = CheckedContinuation<ApproveSkillOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: approveSkillContinuation) in
            approveSkill(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a contact with a given address book.
    func associateContactWithAddressBook(input: AssociateContactWithAddressBookInput) async throws -> AssociateContactWithAddressBookOutputResponse
    {
        typealias associateContactWithAddressBookContinuation = CheckedContinuation<AssociateContactWithAddressBookOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateContactWithAddressBookContinuation) in
            associateContactWithAddressBook(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a device with the specified network profile.
    func associateDeviceWithNetworkProfile(input: AssociateDeviceWithNetworkProfileInput) async throws -> AssociateDeviceWithNetworkProfileOutputResponse
    {
        typealias associateDeviceWithNetworkProfileContinuation = CheckedContinuation<AssociateDeviceWithNetworkProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateDeviceWithNetworkProfileContinuation) in
            associateDeviceWithNetworkProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a device with a given room. This applies all the settings from the room
    ///          profile to the device, and all the skills in any skill groups added to that room. This
    ///          operation requires the device to be online, or else a manual sync is required.
    func associateDeviceWithRoom(input: AssociateDeviceWithRoomInput) async throws -> AssociateDeviceWithRoomOutputResponse
    {
        typealias associateDeviceWithRoomContinuation = CheckedContinuation<AssociateDeviceWithRoomOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateDeviceWithRoomContinuation) in
            associateDeviceWithRoom(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a skill group with a given room. This enables all skills in the associated
    ///          skill group on all devices in the room.
    func associateSkillGroupWithRoom(input: AssociateSkillGroupWithRoomInput) async throws -> AssociateSkillGroupWithRoomOutputResponse
    {
        typealias associateSkillGroupWithRoomContinuation = CheckedContinuation<AssociateSkillGroupWithRoomOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateSkillGroupWithRoomContinuation) in
            associateSkillGroupWithRoom(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a skill with a skill group.
    func associateSkillWithSkillGroup(input: AssociateSkillWithSkillGroupInput) async throws -> AssociateSkillWithSkillGroupOutputResponse
    {
        typealias associateSkillWithSkillGroupContinuation = CheckedContinuation<AssociateSkillWithSkillGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateSkillWithSkillGroupContinuation) in
            associateSkillWithSkillGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Makes a private skill available for enrolled users to enable on their devices.
    func associateSkillWithUsers(input: AssociateSkillWithUsersInput) async throws -> AssociateSkillWithUsersOutputResponse
    {
        typealias associateSkillWithUsersContinuation = CheckedContinuation<AssociateSkillWithUsersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateSkillWithUsersContinuation) in
            associateSkillWithUsers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an address book with the specified details.
    func createAddressBook(input: CreateAddressBookInput) async throws -> CreateAddressBookOutputResponse
    {
        typealias createAddressBookContinuation = CheckedContinuation<CreateAddressBookOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAddressBookContinuation) in
            createAddressBook(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a recurring schedule for usage reports to deliver to the specified S3
    ///          location with a specified daily or weekly interval.
    func createBusinessReportSchedule(input: CreateBusinessReportScheduleInput) async throws -> CreateBusinessReportScheduleOutputResponse
    {
        typealias createBusinessReportScheduleContinuation = CheckedContinuation<CreateBusinessReportScheduleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBusinessReportScheduleContinuation) in
            createBusinessReportSchedule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a new conference provider under the user's AWS account.
    func createConferenceProvider(input: CreateConferenceProviderInput) async throws -> CreateConferenceProviderOutputResponse
    {
        typealias createConferenceProviderContinuation = CheckedContinuation<CreateConferenceProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConferenceProviderContinuation) in
            createConferenceProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a contact with the specified details.
    func createContact(input: CreateContactInput) async throws -> CreateContactOutputResponse
    {
        typealias createContactContinuation = CheckedContinuation<CreateContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createContactContinuation) in
            createContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a gateway group with the specified details.
    func createGatewayGroup(input: CreateGatewayGroupInput) async throws -> CreateGatewayGroupOutputResponse
    {
        typealias createGatewayGroupContinuation = CheckedContinuation<CreateGatewayGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createGatewayGroupContinuation) in
            createGatewayGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a network profile with the specified details.
    func createNetworkProfile(input: CreateNetworkProfileInput) async throws -> CreateNetworkProfileOutputResponse
    {
        typealias createNetworkProfileContinuation = CheckedContinuation<CreateNetworkProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createNetworkProfileContinuation) in
            createNetworkProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new room profile with the specified details.
    func createProfile(input: CreateProfileInput) async throws -> CreateProfileOutputResponse
    {
        typealias createProfileContinuation = CheckedContinuation<CreateProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProfileContinuation) in
            createProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a room with the specified details.
    func createRoom(input: CreateRoomInput) async throws -> CreateRoomOutputResponse
    {
        typealias createRoomContinuation = CheckedContinuation<CreateRoomOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRoomContinuation) in
            createRoom(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a skill group with a specified name and description.
    func createSkillGroup(input: CreateSkillGroupInput) async throws -> CreateSkillGroupOutputResponse
    {
        typealias createSkillGroupContinuation = CheckedContinuation<CreateSkillGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSkillGroupContinuation) in
            createSkillGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a user.
    func createUser(input: CreateUserInput) async throws -> CreateUserOutputResponse
    {
        typealias createUserContinuation = CheckedContinuation<CreateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserContinuation) in
            createUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an address book by the address book ARN.
    func deleteAddressBook(input: DeleteAddressBookInput) async throws -> DeleteAddressBookOutputResponse
    {
        typealias deleteAddressBookContinuation = CheckedContinuation<DeleteAddressBookOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAddressBookContinuation) in
            deleteAddressBook(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the recurring report delivery schedule with the specified schedule
    ///          ARN.
    func deleteBusinessReportSchedule(input: DeleteBusinessReportScheduleInput) async throws -> DeleteBusinessReportScheduleOutputResponse
    {
        typealias deleteBusinessReportScheduleContinuation = CheckedContinuation<DeleteBusinessReportScheduleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBusinessReportScheduleContinuation) in
            deleteBusinessReportSchedule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a conference provider.
    func deleteConferenceProvider(input: DeleteConferenceProviderInput) async throws -> DeleteConferenceProviderOutputResponse
    {
        typealias deleteConferenceProviderContinuation = CheckedContinuation<DeleteConferenceProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConferenceProviderContinuation) in
            deleteConferenceProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a contact by the contact ARN.
    func deleteContact(input: DeleteContactInput) async throws -> DeleteContactOutputResponse
    {
        typealias deleteContactContinuation = CheckedContinuation<DeleteContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteContactContinuation) in
            deleteContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a device from Alexa For Business.
    func deleteDevice(input: DeleteDeviceInput) async throws -> DeleteDeviceOutputResponse
    {
        typealias deleteDeviceContinuation = CheckedContinuation<DeleteDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDeviceContinuation) in
            deleteDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// When this action is called for a specified shared device, it allows authorized users to
    ///          delete the device's entire previous history of voice input data and associated response
    ///          data. This action can be called once every 24 hours for a specific shared device.
    func deleteDeviceUsageData(input: DeleteDeviceUsageDataInput) async throws -> DeleteDeviceUsageDataOutputResponse
    {
        typealias deleteDeviceUsageDataContinuation = CheckedContinuation<DeleteDeviceUsageDataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDeviceUsageDataContinuation) in
            deleteDeviceUsageData(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a gateway group.
    func deleteGatewayGroup(input: DeleteGatewayGroupInput) async throws -> DeleteGatewayGroupOutputResponse
    {
        typealias deleteGatewayGroupContinuation = CheckedContinuation<DeleteGatewayGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteGatewayGroupContinuation) in
            deleteGatewayGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a network profile by the network profile ARN.
    func deleteNetworkProfile(input: DeleteNetworkProfileInput) async throws -> DeleteNetworkProfileOutputResponse
    {
        typealias deleteNetworkProfileContinuation = CheckedContinuation<DeleteNetworkProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteNetworkProfileContinuation) in
            deleteNetworkProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a room profile by the profile ARN.
    func deleteProfile(input: DeleteProfileInput) async throws -> DeleteProfileOutputResponse
    {
        typealias deleteProfileContinuation = CheckedContinuation<DeleteProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProfileContinuation) in
            deleteProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a room by the room ARN.
    func deleteRoom(input: DeleteRoomInput) async throws -> DeleteRoomOutputResponse
    {
        typealias deleteRoomContinuation = CheckedContinuation<DeleteRoomOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRoomContinuation) in
            deleteRoom(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes room skill parameter details by room, skill, and parameter key ID.
    func deleteRoomSkillParameter(input: DeleteRoomSkillParameterInput) async throws -> DeleteRoomSkillParameterOutputResponse
    {
        typealias deleteRoomSkillParameterContinuation = CheckedContinuation<DeleteRoomSkillParameterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRoomSkillParameterContinuation) in
            deleteRoomSkillParameter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Unlinks a third-party account from a skill.
    func deleteSkillAuthorization(input: DeleteSkillAuthorizationInput) async throws -> DeleteSkillAuthorizationOutputResponse
    {
        typealias deleteSkillAuthorizationContinuation = CheckedContinuation<DeleteSkillAuthorizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSkillAuthorizationContinuation) in
            deleteSkillAuthorization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a skill group by skill group ARN.
    func deleteSkillGroup(input: DeleteSkillGroupInput) async throws -> DeleteSkillGroupOutputResponse
    {
        typealias deleteSkillGroupContinuation = CheckedContinuation<DeleteSkillGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSkillGroupContinuation) in
            deleteSkillGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a specified user by user ARN and enrollment ARN.
    func deleteUser(input: DeleteUserInput) async throws -> DeleteUserOutputResponse
    {
        typealias deleteUserContinuation = CheckedContinuation<DeleteUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserContinuation) in
            deleteUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a contact from a given address book.
    func disassociateContactFromAddressBook(input: DisassociateContactFromAddressBookInput) async throws -> DisassociateContactFromAddressBookOutputResponse
    {
        typealias disassociateContactFromAddressBookContinuation = CheckedContinuation<DisassociateContactFromAddressBookOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateContactFromAddressBookContinuation) in
            disassociateContactFromAddressBook(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a device from its current room. The device continues to be connected to
    ///          the Wi-Fi network and is still registered to the account. The device settings and skills
    ///          are removed from the room.
    func disassociateDeviceFromRoom(input: DisassociateDeviceFromRoomInput) async throws -> DisassociateDeviceFromRoomOutputResponse
    {
        typealias disassociateDeviceFromRoomContinuation = CheckedContinuation<DisassociateDeviceFromRoomOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateDeviceFromRoomContinuation) in
            disassociateDeviceFromRoom(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a skill from a skill group.
    func disassociateSkillFromSkillGroup(input: DisassociateSkillFromSkillGroupInput) async throws -> DisassociateSkillFromSkillGroupOutputResponse
    {
        typealias disassociateSkillFromSkillGroupContinuation = CheckedContinuation<DisassociateSkillFromSkillGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateSkillFromSkillGroupContinuation) in
            disassociateSkillFromSkillGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Makes a private skill unavailable for enrolled users and prevents them from enabling it
    ///          on their devices.
    func disassociateSkillFromUsers(input: DisassociateSkillFromUsersInput) async throws -> DisassociateSkillFromUsersOutputResponse
    {
        typealias disassociateSkillFromUsersContinuation = CheckedContinuation<DisassociateSkillFromUsersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateSkillFromUsersContinuation) in
            disassociateSkillFromUsers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a skill group from a specified room. This disables all skills in the
    ///          skill group on all devices in the room.
    func disassociateSkillGroupFromRoom(input: DisassociateSkillGroupFromRoomInput) async throws -> DisassociateSkillGroupFromRoomOutputResponse
    {
        typealias disassociateSkillGroupFromRoomContinuation = CheckedContinuation<DisassociateSkillGroupFromRoomOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateSkillGroupFromRoomContinuation) in
            disassociateSkillGroupFromRoom(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Forgets smart home appliances associated to a room.
    func forgetSmartHomeAppliances(input: ForgetSmartHomeAppliancesInput) async throws -> ForgetSmartHomeAppliancesOutputResponse
    {
        typealias forgetSmartHomeAppliancesContinuation = CheckedContinuation<ForgetSmartHomeAppliancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: forgetSmartHomeAppliancesContinuation) in
            forgetSmartHomeAppliances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets address the book details by the address book ARN.
    func getAddressBook(input: GetAddressBookInput) async throws -> GetAddressBookOutputResponse
    {
        typealias getAddressBookContinuation = CheckedContinuation<GetAddressBookOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAddressBookContinuation) in
            getAddressBook(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the existing conference preferences.
    func getConferencePreference(input: GetConferencePreferenceInput) async throws -> GetConferencePreferenceOutputResponse
    {
        typealias getConferencePreferenceContinuation = CheckedContinuation<GetConferencePreferenceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getConferencePreferenceContinuation) in
            getConferencePreference(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets details about a specific conference provider.
    func getConferenceProvider(input: GetConferenceProviderInput) async throws -> GetConferenceProviderOutputResponse
    {
        typealias getConferenceProviderContinuation = CheckedContinuation<GetConferenceProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getConferenceProviderContinuation) in
            getConferenceProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the contact details by the contact ARN.
    func getContact(input: GetContactInput) async throws -> GetContactOutputResponse
    {
        typealias getContactContinuation = CheckedContinuation<GetContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContactContinuation) in
            getContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the details of a device by device ARN.
    func getDevice(input: GetDeviceInput) async throws -> GetDeviceOutputResponse
    {
        typealias getDeviceContinuation = CheckedContinuation<GetDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeviceContinuation) in
            getDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the details of a gateway.
    func getGateway(input: GetGatewayInput) async throws -> GetGatewayOutputResponse
    {
        typealias getGatewayContinuation = CheckedContinuation<GetGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getGatewayContinuation) in
            getGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the details of a gateway group.
    func getGatewayGroup(input: GetGatewayGroupInput) async throws -> GetGatewayGroupOutputResponse
    {
        typealias getGatewayGroupContinuation = CheckedContinuation<GetGatewayGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getGatewayGroupContinuation) in
            getGatewayGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the configured values for the user enrollment invitation email
    ///          template.
    func getInvitationConfiguration(input: GetInvitationConfigurationInput) async throws -> GetInvitationConfigurationOutputResponse
    {
        typealias getInvitationConfigurationContinuation = CheckedContinuation<GetInvitationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInvitationConfigurationContinuation) in
            getInvitationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the network profile details by the network profile ARN.
    func getNetworkProfile(input: GetNetworkProfileInput) async throws -> GetNetworkProfileOutputResponse
    {
        typealias getNetworkProfileContinuation = CheckedContinuation<GetNetworkProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getNetworkProfileContinuation) in
            getNetworkProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the details of a room profile by profile ARN.
    func getProfile(input: GetProfileInput) async throws -> GetProfileOutputResponse
    {
        typealias getProfileContinuation = CheckedContinuation<GetProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getProfileContinuation) in
            getProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets room details by room ARN.
    func getRoom(input: GetRoomInput) async throws -> GetRoomOutputResponse
    {
        typealias getRoomContinuation = CheckedContinuation<GetRoomOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRoomContinuation) in
            getRoom(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets room skill parameter details by room, skill, and parameter key ARN.
    func getRoomSkillParameter(input: GetRoomSkillParameterInput) async throws -> GetRoomSkillParameterOutputResponse
    {
        typealias getRoomSkillParameterContinuation = CheckedContinuation<GetRoomSkillParameterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRoomSkillParameterContinuation) in
            getRoomSkillParameter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets skill group details by skill group ARN.
    func getSkillGroup(input: GetSkillGroupInput) async throws -> GetSkillGroupOutputResponse
    {
        typealias getSkillGroupContinuation = CheckedContinuation<GetSkillGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSkillGroupContinuation) in
            getSkillGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the details of the schedules that a user configured. A download URL of the report associated with each schedule is returned every time this action is called. A new download URL is returned each time, and is valid for 24 hours.
    func listBusinessReportSchedules(input: ListBusinessReportSchedulesInput) async throws -> ListBusinessReportSchedulesOutputResponse
    {
        typealias listBusinessReportSchedulesContinuation = CheckedContinuation<ListBusinessReportSchedulesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBusinessReportSchedulesContinuation) in
            listBusinessReportSchedules(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists conference providers under a specific AWS account.
    func listConferenceProviders(input: ListConferenceProvidersInput) async throws -> ListConferenceProvidersOutputResponse
    {
        typealias listConferenceProvidersContinuation = CheckedContinuation<ListConferenceProvidersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listConferenceProvidersContinuation) in
            listConferenceProviders(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the device event history, including device connection status, for up to 30
    ///          days.
    func listDeviceEvents(input: ListDeviceEventsInput) async throws -> ListDeviceEventsOutputResponse
    {
        typealias listDeviceEventsContinuation = CheckedContinuation<ListDeviceEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDeviceEventsContinuation) in
            listDeviceEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of gateway group summaries. Use GetGatewayGroup to retrieve details of
    ///          a specific gateway group.
    func listGatewayGroups(input: ListGatewayGroupsInput) async throws -> ListGatewayGroupsOutputResponse
    {
        typealias listGatewayGroupsContinuation = CheckedContinuation<ListGatewayGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listGatewayGroupsContinuation) in
            listGatewayGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of gateway summaries. Use GetGateway to retrieve details of a specific
    ///          gateway. An optional gateway group ARN can be provided to only retrieve gateway summaries
    ///          of gateways that are associated with that gateway group ARN.
    func listGateways(input: ListGatewaysInput) async throws -> ListGatewaysOutputResponse
    {
        typealias listGatewaysContinuation = CheckedContinuation<ListGatewaysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listGatewaysContinuation) in
            listGateways(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all enabled skills in a specific skill group.
    func listSkills(input: ListSkillsInput) async throws -> ListSkillsOutputResponse
    {
        typealias listSkillsContinuation = CheckedContinuation<ListSkillsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSkillsContinuation) in
            listSkills(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all categories in the Alexa skill store.
    func listSkillsStoreCategories(input: ListSkillsStoreCategoriesInput) async throws -> ListSkillsStoreCategoriesOutputResponse
    {
        typealias listSkillsStoreCategoriesContinuation = CheckedContinuation<ListSkillsStoreCategoriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSkillsStoreCategoriesContinuation) in
            listSkillsStoreCategories(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all skills in the Alexa skill store by category.
    func listSkillsStoreSkillsByCategory(input: ListSkillsStoreSkillsByCategoryInput) async throws -> ListSkillsStoreSkillsByCategoryOutputResponse
    {
        typealias listSkillsStoreSkillsByCategoryContinuation = CheckedContinuation<ListSkillsStoreSkillsByCategoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSkillsStoreSkillsByCategoryContinuation) in
            listSkillsStoreSkillsByCategory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all of the smart home appliances associated with a room.
    func listSmartHomeAppliances(input: ListSmartHomeAppliancesInput) async throws -> ListSmartHomeAppliancesOutputResponse
    {
        typealias listSmartHomeAppliancesContinuation = CheckedContinuation<ListSmartHomeAppliancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSmartHomeAppliancesContinuation) in
            listSmartHomeAppliances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all tags for the specified resource.
    func listTags(input: ListTagsInput) async throws -> ListTagsOutputResponse
    {
        typealias listTagsContinuation = CheckedContinuation<ListTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsContinuation) in
            listTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the conference preferences on a specific conference provider at the account
    ///          level.
    func putConferencePreference(input: PutConferencePreferenceInput) async throws -> PutConferencePreferenceOutputResponse
    {
        typealias putConferencePreferenceContinuation = CheckedContinuation<PutConferencePreferenceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putConferencePreferenceContinuation) in
            putConferencePreference(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Configures the email template for the user enrollment invitation with the specified
    ///          attributes.
    func putInvitationConfiguration(input: PutInvitationConfigurationInput) async throws -> PutInvitationConfigurationOutputResponse
    {
        typealias putInvitationConfigurationContinuation = CheckedContinuation<PutInvitationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putInvitationConfigurationContinuation) in
            putInvitationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates room skill parameter details by room, skill, and parameter key ID. Not all
    ///          skills have a room skill parameter.
    func putRoomSkillParameter(input: PutRoomSkillParameterInput) async throws -> PutRoomSkillParameterOutputResponse
    {
        typealias putRoomSkillParameterContinuation = CheckedContinuation<PutRoomSkillParameterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putRoomSkillParameterContinuation) in
            putRoomSkillParameter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Links a user's account to a third-party skill provider. If this API operation is
    ///          called by an assumed IAM role, the skill being linked must be a private skill. Also, the
    ///          skill must be owned by the AWS account that assumed the IAM role.
    func putSkillAuthorization(input: PutSkillAuthorizationInput) async throws -> PutSkillAuthorizationOutputResponse
    {
        typealias putSkillAuthorizationContinuation = CheckedContinuation<PutSkillAuthorizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putSkillAuthorizationContinuation) in
            putSkillAuthorization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers an Alexa-enabled device built by an Original Equipment Manufacturer (OEM)
    ///          using Alexa Voice Service (AVS).
    func registerAVSDevice(input: RegisterAVSDeviceInput) async throws -> RegisterAVSDeviceOutputResponse
    {
        typealias registerAVSDeviceContinuation = CheckedContinuation<RegisterAVSDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerAVSDeviceContinuation) in
            registerAVSDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a skill from the organization under a user's AWS account. If the skill
    ///          is a private skill, it moves to an AcceptStatus of PENDING. Any private or public skill
    ///          that is rejected can be added later by calling the ApproveSkill API.
    func rejectSkill(input: RejectSkillInput) async throws -> RejectSkillOutputResponse
    {
        typealias rejectSkillContinuation = CheckedContinuation<RejectSkillOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rejectSkillContinuation) in
            rejectSkill(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Determines the details for the room from which a skill request was invoked. This
    ///          operation is used by skill developers.
    ///          To query ResolveRoom from an Alexa skill, the skill ID needs to be authorized. When
    ///          the skill is using an AWS Lambda function, the skill is automatically authorized when you
    ///          publish your skill as a private skill to your AWS account. Skills that are hosted using a
    ///          custom web service must be manually authorized. To get your skill authorized, contact AWS
    ///          Support with your AWS account ID that queries the ResolveRoom API and skill ID.
    func resolveRoom(input: ResolveRoomInput) async throws -> ResolveRoomOutputResponse
    {
        typealias resolveRoomContinuation = CheckedContinuation<ResolveRoomOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resolveRoomContinuation) in
            resolveRoom(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Revokes an invitation and invalidates the enrollment URL.
    func revokeInvitation(input: RevokeInvitationInput) async throws -> RevokeInvitationOutputResponse
    {
        typealias revokeInvitationContinuation = CheckedContinuation<RevokeInvitationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: revokeInvitationContinuation) in
            revokeInvitation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Searches address books and lists the ones that meet a set of filter and sort
    ///          criteria.
    func searchAddressBooks(input: SearchAddressBooksInput) async throws -> SearchAddressBooksOutputResponse
    {
        typealias searchAddressBooksContinuation = CheckedContinuation<SearchAddressBooksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchAddressBooksContinuation) in
            searchAddressBooks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Searches contacts and lists the ones that meet a set of filter and sort
    ///          criteria.
    func searchContacts(input: SearchContactsInput) async throws -> SearchContactsOutputResponse
    {
        typealias searchContactsContinuation = CheckedContinuation<SearchContactsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchContactsContinuation) in
            searchContacts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Searches devices and lists the ones that meet a set of filter criteria.
    func searchDevices(input: SearchDevicesInput) async throws -> SearchDevicesOutputResponse
    {
        typealias searchDevicesContinuation = CheckedContinuation<SearchDevicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchDevicesContinuation) in
            searchDevices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Searches network profiles and lists the ones that meet a set of filter and sort
    ///          criteria.
    func searchNetworkProfiles(input: SearchNetworkProfilesInput) async throws -> SearchNetworkProfilesOutputResponse
    {
        typealias searchNetworkProfilesContinuation = CheckedContinuation<SearchNetworkProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchNetworkProfilesContinuation) in
            searchNetworkProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Searches room profiles and lists the ones that meet a set of filter
    ///          criteria.
    func searchProfiles(input: SearchProfilesInput) async throws -> SearchProfilesOutputResponse
    {
        typealias searchProfilesContinuation = CheckedContinuation<SearchProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchProfilesContinuation) in
            searchProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Searches rooms and lists the ones that meet a set of filter and sort
    ///          criteria.
    func searchRooms(input: SearchRoomsInput) async throws -> SearchRoomsOutputResponse
    {
        typealias searchRoomsContinuation = CheckedContinuation<SearchRoomsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchRoomsContinuation) in
            searchRooms(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Searches skill groups and lists the ones that meet a set of filter and sort
    ///          criteria.
    func searchSkillGroups(input: SearchSkillGroupsInput) async throws -> SearchSkillGroupsOutputResponse
    {
        typealias searchSkillGroupsContinuation = CheckedContinuation<SearchSkillGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchSkillGroupsContinuation) in
            searchSkillGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Searches users and lists the ones that meet a set of filter and sort
    ///          criteria.
    func searchUsers(input: SearchUsersInput) async throws -> SearchUsersOutputResponse
    {
        typealias searchUsersContinuation = CheckedContinuation<SearchUsersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchUsersContinuation) in
            searchUsers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Triggers an asynchronous flow to send text, SSML, or audio announcements to rooms that
    ///          are identified by a search or filter.
    func sendAnnouncement(input: SendAnnouncementInput) async throws -> SendAnnouncementOutputResponse
    {
        typealias sendAnnouncementContinuation = CheckedContinuation<SendAnnouncementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendAnnouncementContinuation) in
            sendAnnouncement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends an enrollment invitation email with a URL to a user. The URL is valid for 30
    ///          days or until you call this operation again, whichever comes first.
    func sendInvitation(input: SendInvitationInput) async throws -> SendInvitationOutputResponse
    {
        typealias sendInvitationContinuation = CheckedContinuation<SendInvitationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendInvitationContinuation) in
            sendInvitation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Resets a device and its account to the known default settings. This clears all
    ///          information and settings set by previous users in the following ways:
    ///
    ///
    ///                Bluetooth - This unpairs all bluetooth devices paired with your echo
    ///                device.
    ///
    ///
    ///                Volume - This resets the echo device's volume to the default value.
    ///
    ///
    ///                Notifications - This clears all notifications from your echo device.
    ///
    ///
    ///                Lists - This clears all to-do items from your echo device.
    ///
    ///
    ///                Settings - This internally syncs the room's profile (if the device is assigned to
    ///                a room), contacts, address books, delegation access for account linking, and
    ///                communications (if enabled on the room profile).
    ///
    ///
    func startDeviceSync(input: StartDeviceSyncInput) async throws -> StartDeviceSyncOutputResponse
    {
        typealias startDeviceSyncContinuation = CheckedContinuation<StartDeviceSyncOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startDeviceSyncContinuation) in
            startDeviceSync(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Initiates the discovery of any smart home appliances associated with the
    ///          room.
    func startSmartHomeApplianceDiscovery(input: StartSmartHomeApplianceDiscoveryInput) async throws -> StartSmartHomeApplianceDiscoveryOutputResponse
    {
        typealias startSmartHomeApplianceDiscoveryContinuation = CheckedContinuation<StartSmartHomeApplianceDiscoveryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startSmartHomeApplianceDiscoveryContinuation) in
            startSmartHomeApplianceDiscovery(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds metadata tags to a specified resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes metadata tags from a specified resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates address book details by the address book ARN.
    func updateAddressBook(input: UpdateAddressBookInput) async throws -> UpdateAddressBookOutputResponse
    {
        typealias updateAddressBookContinuation = CheckedContinuation<UpdateAddressBookOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAddressBookContinuation) in
            updateAddressBook(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the configuration of the report delivery schedule with the specified schedule
    ///          ARN.
    func updateBusinessReportSchedule(input: UpdateBusinessReportScheduleInput) async throws -> UpdateBusinessReportScheduleOutputResponse
    {
        typealias updateBusinessReportScheduleContinuation = CheckedContinuation<UpdateBusinessReportScheduleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBusinessReportScheduleContinuation) in
            updateBusinessReportSchedule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing conference provider's settings.
    func updateConferenceProvider(input: UpdateConferenceProviderInput) async throws -> UpdateConferenceProviderOutputResponse
    {
        typealias updateConferenceProviderContinuation = CheckedContinuation<UpdateConferenceProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConferenceProviderContinuation) in
            updateConferenceProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the contact details by the contact ARN.
    func updateContact(input: UpdateContactInput) async throws -> UpdateContactOutputResponse
    {
        typealias updateContactContinuation = CheckedContinuation<UpdateContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateContactContinuation) in
            updateContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the device name by device ARN.
    func updateDevice(input: UpdateDeviceInput) async throws -> UpdateDeviceOutputResponse
    {
        typealias updateDeviceContinuation = CheckedContinuation<UpdateDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDeviceContinuation) in
            updateDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the details of a gateway. If any optional field is not provided, the existing
    ///          corresponding value is left unmodified.
    func updateGateway(input: UpdateGatewayInput) async throws -> UpdateGatewayOutputResponse
    {
        typealias updateGatewayContinuation = CheckedContinuation<UpdateGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGatewayContinuation) in
            updateGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the details of a gateway group. If any optional field is not provided, the
    ///          existing corresponding value is left unmodified.
    func updateGatewayGroup(input: UpdateGatewayGroupInput) async throws -> UpdateGatewayGroupOutputResponse
    {
        typealias updateGatewayGroupContinuation = CheckedContinuation<UpdateGatewayGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGatewayGroupContinuation) in
            updateGatewayGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a network profile by the network profile ARN.
    func updateNetworkProfile(input: UpdateNetworkProfileInput) async throws -> UpdateNetworkProfileOutputResponse
    {
        typealias updateNetworkProfileContinuation = CheckedContinuation<UpdateNetworkProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateNetworkProfileContinuation) in
            updateNetworkProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing room profile by room profile ARN.
    func updateProfile(input: UpdateProfileInput) async throws -> UpdateProfileOutputResponse
    {
        typealias updateProfileContinuation = CheckedContinuation<UpdateProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProfileContinuation) in
            updateProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates room details by room ARN.
    func updateRoom(input: UpdateRoomInput) async throws -> UpdateRoomOutputResponse
    {
        typealias updateRoomContinuation = CheckedContinuation<UpdateRoomOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRoomContinuation) in
            updateRoom(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates skill group details by skill group ARN.
    func updateSkillGroup(input: UpdateSkillGroupInput) async throws -> UpdateSkillGroupOutputResponse
    {
        typealias updateSkillGroupContinuation = CheckedContinuation<UpdateSkillGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSkillGroupContinuation) in
            updateSkillGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
