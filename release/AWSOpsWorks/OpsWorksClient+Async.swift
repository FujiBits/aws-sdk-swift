// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension OpsWorksClient {
    /// Assign a registered instance to a layer.
    ///
    ///
    ///                You can assign registered on-premises instances to any layer type.
    ///
    ///
    ///                You can assign registered Amazon EC2 instances only to custom layers.
    ///
    ///
    ///                You cannot use this action with instances that were created with AWS OpsWorks Stacks.
    ///
    ///
    ///
    ///             Required Permissions: To use this action, an AWS Identity and Access Management
    ///       (IAM) user must have a Manage permissions
    ///       level for the stack or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func assignInstance(input: AssignInstanceInput) async throws -> AssignInstanceOutputResponse
    {
        typealias assignInstanceContinuation = CheckedContinuation<AssignInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: assignInstanceContinuation) in
            assignInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Assigns one of the stack's registered Amazon EBS volumes to a specified instance. The volume must
    ///       first be registered with the stack by calling RegisterVolume. After you register the
    ///       volume, you must call UpdateVolume to specify a mount point before calling
    ///         AssignVolume. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func assignVolume(input: AssignVolumeInput) async throws -> AssignVolumeOutputResponse
    {
        typealias assignVolumeContinuation = CheckedContinuation<AssignVolumeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: assignVolumeContinuation) in
            assignVolume(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates one of the stack's registered Elastic IP addresses with a specified instance. The
    ///       address must first be registered with the stack by calling RegisterElasticIp. For more
    ///       information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource
    ///         Management.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func associateElasticIp(input: AssociateElasticIpInput) async throws -> AssociateElasticIpOutputResponse
    {
        typealias associateElasticIpContinuation = CheckedContinuation<AssociateElasticIpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateElasticIpContinuation) in
            associateElasticIp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Attaches an Elastic Load Balancing load balancer to a specified layer. AWS OpsWorks Stacks does not support
    ///           Application Load Balancer. You can only use Classic Load Balancer with AWS OpsWorks Stacks.
    ///           For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers-elb.html">Elastic Load
    ///         Balancing.
    ///
    ///             You must create the Elastic Load Balancing instance separately, by using the Elastic Load Balancing console, API, or CLI. For
    ///         more information, see <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/Welcome.html"> Elastic
    ///           Load Balancing Developer Guide.
    ///
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func attachElasticLoadBalancer(input: AttachElasticLoadBalancerInput) async throws -> AttachElasticLoadBalancerOutputResponse
    {
        typealias attachElasticLoadBalancerContinuation = CheckedContinuation<AttachElasticLoadBalancerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachElasticLoadBalancerContinuation) in
            attachElasticLoadBalancer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a clone of a specified stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-cloning.html">Clone a
    ///         Stack. By default, all parameters are set to the values used by the parent stack.
    ///
    ///             Required Permissions: To use this action, an IAM user must have an attached policy
    ///       that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func cloneStack(input: CloneStackInput) async throws -> CloneStackOutputResponse
    {
        typealias cloneStackContinuation = CheckedContinuation<CloneStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cloneStackContinuation) in
            cloneStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an app for a specified stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-creating.html">Creating
    ///       Apps.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func createApp(input: CreateAppInput) async throws -> CreateAppOutputResponse
    {
        typealias createAppContinuation = CheckedContinuation<CreateAppOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAppContinuation) in
            createApp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Runs deployment or stack commands. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-deploying.html">Deploying
    ///         Apps and <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-commands.html">Run Stack Commands.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Deploy or Manage
    ///       permissions level for the stack, or an attached policy that explicitly grants permissions. For
    ///       more information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func createDeployment(input: CreateDeploymentInput) async throws -> CreateDeploymentOutputResponse
    {
        typealias createDeploymentContinuation = CheckedContinuation<CreateDeploymentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDeploymentContinuation) in
            createDeployment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an instance in a specified stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-add.html">Adding an
    ///         Instance to a Layer.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func createInstance(input: CreateInstanceInput) async throws -> CreateInstanceOutputResponse
    {
        typealias createInstanceContinuation = CheckedContinuation<CreateInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createInstanceContinuation) in
            createInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a layer. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-create.html">How to
    ///         Create a Layer.
    ///
    ///             You should use CreateLayer for noncustom layer types such as PHP App Server only if the stack
    ///         does not have an existing layer of that type. A stack can have at most one instance of each
    ///         noncustom layer; if you attempt to create a second instance, CreateLayer fails. A
    ///         stack can have an arbitrary number of custom layers, so you can call CreateLayer as
    ///         many times as you like for that layer type.
    ///
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func createLayer(input: CreateLayerInput) async throws -> CreateLayerOutputResponse
    {
        typealias createLayerContinuation = CheckedContinuation<CreateLayerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createLayerContinuation) in
            createLayer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-edit.html">Create a New
    ///         Stack.
    ///
    ///             Required Permissions: To use this action, an IAM user must have an attached policy
    ///       that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func createStack(input: CreateStackInput) async throws -> CreateStackOutputResponse
    {
        typealias createStackContinuation = CheckedContinuation<CreateStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createStackContinuation) in
            createStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new user profile.
    ///
    ///             Required Permissions: To use this action, an IAM user must have an attached policy
    ///       that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func createUserProfile(input: CreateUserProfileInput) async throws -> CreateUserProfileOutputResponse
    {
        typealias createUserProfileContinuation = CheckedContinuation<CreateUserProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserProfileContinuation) in
            createUserProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a specified app.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func deleteApp(input: DeleteAppInput) async throws -> DeleteAppOutputResponse
    {
        typealias deleteAppContinuation = CheckedContinuation<DeleteAppOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAppContinuation) in
            deleteApp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a specified instance, which terminates the associated Amazon EC2 instance. You must stop an instance before you can delete it.
    ///          For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-delete.html">Deleting
    ///         Instances.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func deleteInstance(input: DeleteInstanceInput) async throws -> DeleteInstanceOutputResponse
    {
        typealias deleteInstanceContinuation = CheckedContinuation<DeleteInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteInstanceContinuation) in
            deleteInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a specified layer. You must first stop and then delete all associated instances or
    ///       unassign registered instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-delete.html">How to
    ///         Delete a Layer.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func deleteLayer(input: DeleteLayerInput) async throws -> DeleteLayerOutputResponse
    {
        typealias deleteLayerContinuation = CheckedContinuation<DeleteLayerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteLayerContinuation) in
            deleteLayer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a specified stack. You must first delete all instances, layers, and apps or
    ///       deregister registered instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-shutting.html">Shut Down a
    ///         Stack.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func deleteStack(input: DeleteStackInput) async throws -> DeleteStackOutputResponse
    {
        typealias deleteStackContinuation = CheckedContinuation<DeleteStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteStackContinuation) in
            deleteStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a user profile.
    ///
    ///             Required Permissions: To use this action, an IAM user must have an attached policy
    ///       that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func deleteUserProfile(input: DeleteUserProfileInput) async throws -> DeleteUserProfileOutputResponse
    {
        typealias deleteUserProfileContinuation = CheckedContinuation<DeleteUserProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserProfileContinuation) in
            deleteUserProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deregisters a specified Amazon ECS cluster from a stack.
    ///       For more information, see
    ///       <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-ecscluster.html#workinglayers-ecscluster-delete">
    ///         Resource Management.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see
    ///       <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html.
    func deregisterEcsCluster(input: DeregisterEcsClusterInput) async throws -> DeregisterEcsClusterOutputResponse
    {
        typealias deregisterEcsClusterContinuation = CheckedContinuation<DeregisterEcsClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterEcsClusterContinuation) in
            deregisterEcsCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deregisters a specified Elastic IP address. The address can then be registered by another
    ///       stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func deregisterElasticIp(input: DeregisterElasticIpInput) async throws -> DeregisterElasticIpOutputResponse
    {
        typealias deregisterElasticIpContinuation = CheckedContinuation<DeregisterElasticIpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterElasticIpContinuation) in
            deregisterElasticIp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deregister a registered Amazon EC2 or on-premises instance. This action removes the
    ///           instance from the stack and returns it to your control. This action cannot be used with
    ///           instances that were created with AWS OpsWorks Stacks.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func deregisterInstance(input: DeregisterInstanceInput) async throws -> DeregisterInstanceOutputResponse
    {
        typealias deregisterInstanceContinuation = CheckedContinuation<DeregisterInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterInstanceContinuation) in
            deregisterInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deregisters an Amazon RDS instance.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func deregisterRdsDbInstance(input: DeregisterRdsDbInstanceInput) async throws -> DeregisterRdsDbInstanceOutputResponse
    {
        typealias deregisterRdsDbInstanceContinuation = CheckedContinuation<DeregisterRdsDbInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterRdsDbInstanceContinuation) in
            deregisterRdsDbInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deregisters an Amazon EBS volume. The volume can then be registered by another stack. For more
    ///       information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource
    ///         Management.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func deregisterVolume(input: DeregisterVolumeInput) async throws -> DeregisterVolumeOutputResponse
    {
        typealias deregisterVolumeContinuation = CheckedContinuation<DeregisterVolumeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterVolumeContinuation) in
            deregisterVolume(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the available AWS OpsWorks Stacks agent versions. You must specify a stack ID or a
    ///     configuration manager. DescribeAgentVersions returns a list of available
    ///     agent versions for the specified stack or configuration manager.
    func describeAgentVersions(input: DescribeAgentVersionsInput) async throws -> DescribeAgentVersionsOutputResponse
    {
        typealias describeAgentVersionsContinuation = CheckedContinuation<DescribeAgentVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAgentVersionsContinuation) in
            describeAgentVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Requests a description of a specified set of apps.
    ///
    ///             This call accepts only one resource-identifying parameter.
    ///
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeApps(input: DescribeAppsInput) async throws -> DescribeAppsOutputResponse
    {
        typealias describeAppsContinuation = CheckedContinuation<DescribeAppsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAppsContinuation) in
            describeApps(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the results of specified commands.
    ///
    ///             This call accepts only one resource-identifying parameter.
    ///
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeCommands(input: DescribeCommandsInput) async throws -> DescribeCommandsOutputResponse
    {
        typealias describeCommandsContinuation = CheckedContinuation<DescribeCommandsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCommandsContinuation) in
            describeCommands(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Requests a description of a specified set of deployments.
    ///
    ///             This call accepts only one resource-identifying parameter.
    ///
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeDeployments(input: DescribeDeploymentsInput) async throws -> DescribeDeploymentsOutputResponse
    {
        typealias describeDeploymentsContinuation = CheckedContinuation<DescribeDeploymentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDeploymentsContinuation) in
            describeDeployments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes Amazon ECS clusters that are registered with a stack. If you specify only a stack ID,
    ///     you can use the MaxResults and NextToken parameters to paginate the
    ///     response. However, AWS OpsWorks Stacks currently supports only one cluster per layer, so the result
    ///     set has a maximum of one element.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack or an attached policy that explicitly grants
    ///       permission. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    ///          This call accepts only one resource-identifying parameter.
    func describeEcsClusters(input: DescribeEcsClustersInput) async throws -> DescribeEcsClustersOutputResponse
    {
        typealias describeEcsClustersContinuation = CheckedContinuation<DescribeEcsClustersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEcsClustersContinuation) in
            describeEcsClusters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP addresses.
    ///
    ///             This call accepts only one resource-identifying parameter.
    ///
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeElasticIps(input: DescribeElasticIpsInput) async throws -> DescribeElasticIpsOutputResponse
    {
        typealias describeElasticIpsContinuation = CheckedContinuation<DescribeElasticIpsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeElasticIpsContinuation) in
            describeElasticIps(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a stack's Elastic Load Balancing instances.
    ///
    ///             This call accepts only one resource-identifying parameter.
    ///
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeElasticLoadBalancers(input: DescribeElasticLoadBalancersInput) async throws -> DescribeElasticLoadBalancersOutputResponse
    {
        typealias describeElasticLoadBalancersContinuation = CheckedContinuation<DescribeElasticLoadBalancersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeElasticLoadBalancersContinuation) in
            describeElasticLoadBalancers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Requests a description of a set of instances.
    ///
    ///             This call accepts only one resource-identifying parameter.
    ///
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeInstances(input: DescribeInstancesInput) async throws -> DescribeInstancesOutputResponse
    {
        typealias describeInstancesContinuation = CheckedContinuation<DescribeInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInstancesContinuation) in
            describeInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Requests a description of one or more layers in a specified stack.
    ///
    ///             This call accepts only one resource-identifying parameter.
    ///
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeLayers(input: DescribeLayersInput) async throws -> DescribeLayersOutputResponse
    {
        typealias describeLayersContinuation = CheckedContinuation<DescribeLayersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeLayersContinuation) in
            describeLayers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes load-based auto scaling configurations for specified layers.
    ///
    ///             You must specify at least one of the parameters.
    ///
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeLoadBasedAutoScaling(input: DescribeLoadBasedAutoScalingInput) async throws -> DescribeLoadBasedAutoScalingOutputResponse
    {
        typealias describeLoadBasedAutoScalingContinuation = CheckedContinuation<DescribeLoadBasedAutoScalingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeLoadBasedAutoScalingContinuation) in
            describeLoadBasedAutoScaling(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a user's SSH information.
    ///
    ///             Required Permissions: To use this action, an IAM user must have self-management
    ///       enabled or an attached policy that explicitly grants permissions. For more information about user
    ///       permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeMyUserProfile(input: DescribeMyUserProfileInput) async throws -> DescribeMyUserProfileOutputResponse
    {
        typealias describeMyUserProfileContinuation = CheckedContinuation<DescribeMyUserProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMyUserProfileContinuation) in
            describeMyUserProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the operating systems that are supported by AWS OpsWorks Stacks.
    func describeOperatingSystems(input: DescribeOperatingSystemsInput) async throws -> DescribeOperatingSystemsOutputResponse
    {
        typealias describeOperatingSystemsContinuation = CheckedContinuation<DescribeOperatingSystemsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeOperatingSystemsContinuation) in
            describeOperatingSystems(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the permissions for a specified stack.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describePermissions(input: DescribePermissionsInput) async throws -> DescribePermissionsOutputResponse
    {
        typealias describePermissionsContinuation = CheckedContinuation<DescribePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePermissionsContinuation) in
            describePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describe an instance's RAID arrays.
    ///
    ///             This call accepts only one resource-identifying parameter.
    ///
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeRaidArrays(input: DescribeRaidArraysInput) async throws -> DescribeRaidArraysOutputResponse
    {
        typealias describeRaidArraysContinuation = CheckedContinuation<DescribeRaidArraysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRaidArraysContinuation) in
            describeRaidArrays(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes Amazon RDS instances.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    ///          This call accepts only one resource-identifying parameter.
    func describeRdsDbInstances(input: DescribeRdsDbInstancesInput) async throws -> DescribeRdsDbInstancesOutputResponse
    {
        typealias describeRdsDbInstancesContinuation = CheckedContinuation<DescribeRdsDbInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRdsDbInstancesContinuation) in
            describeRdsDbInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes AWS OpsWorks Stacks service errors.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    ///          This call accepts only one resource-identifying parameter.
    func describeServiceErrors(input: DescribeServiceErrorsInput) async throws -> DescribeServiceErrorsOutputResponse
    {
        typealias describeServiceErrorsContinuation = CheckedContinuation<DescribeServiceErrorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeServiceErrorsContinuation) in
            describeServiceErrors(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Requests a description of a stack's provisioning parameters.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeStackProvisioningParameters(input: DescribeStackProvisioningParametersInput) async throws -> DescribeStackProvisioningParametersOutputResponse
    {
        typealias describeStackProvisioningParametersContinuation = CheckedContinuation<DescribeStackProvisioningParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStackProvisioningParametersContinuation) in
            describeStackProvisioningParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the number of layers and apps in a specified stack, and the number of instances in
    ///       each state, such as running_setup or online.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeStackSummary(input: DescribeStackSummaryInput) async throws -> DescribeStackSummaryOutputResponse
    {
        typealias describeStackSummaryContinuation = CheckedContinuation<DescribeStackSummaryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStackSummaryContinuation) in
            describeStackSummary(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Requests a description of one or more stacks.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeStacks(input: DescribeStacksInput) async throws -> DescribeStacksOutputResponse
    {
        typealias describeStacksContinuation = CheckedContinuation<DescribeStacksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStacksContinuation) in
            describeStacks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes time-based auto scaling configurations for specified instances.
    ///
    ///             You must specify at least one of the parameters.
    ///
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeTimeBasedAutoScaling(input: DescribeTimeBasedAutoScalingInput) async throws -> DescribeTimeBasedAutoScalingOutputResponse
    {
        typealias describeTimeBasedAutoScalingContinuation = CheckedContinuation<DescribeTimeBasedAutoScalingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeTimeBasedAutoScalingContinuation) in
            describeTimeBasedAutoScaling(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describe specified users.
    ///
    ///             Required Permissions: To use this action, an IAM user must have an attached policy
    ///       that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeUserProfiles(input: DescribeUserProfilesInput) async throws -> DescribeUserProfilesOutputResponse
    {
        typealias describeUserProfilesContinuation = CheckedContinuation<DescribeUserProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUserProfilesContinuation) in
            describeUserProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an instance's Amazon EBS volumes.
    ///
    ///             This call accepts only one resource-identifying parameter.
    ///
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func describeVolumes(input: DescribeVolumesInput) async throws -> DescribeVolumesOutputResponse
    {
        typealias describeVolumesContinuation = CheckedContinuation<DescribeVolumesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeVolumesContinuation) in
            describeVolumes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Detaches a specified Elastic Load Balancing instance from its layer.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func detachElasticLoadBalancer(input: DetachElasticLoadBalancerInput) async throws -> DetachElasticLoadBalancerOutputResponse
    {
        typealias detachElasticLoadBalancerContinuation = CheckedContinuation<DetachElasticLoadBalancerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachElasticLoadBalancerContinuation) in
            detachElasticLoadBalancer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates an Elastic IP address from its instance. The address remains registered with
    ///       the stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func disassociateElasticIp(input: DisassociateElasticIpInput) async throws -> DisassociateElasticIpOutputResponse
    {
        typealias disassociateElasticIpContinuation = CheckedContinuation<DisassociateElasticIpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateElasticIpContinuation) in
            disassociateElasticIp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a generated host name for the specified layer, based on the current host name theme.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func getHostnameSuggestion(input: GetHostnameSuggestionInput) async throws -> GetHostnameSuggestionOutputResponse
    {
        typealias getHostnameSuggestionContinuation = CheckedContinuation<GetHostnameSuggestionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getHostnameSuggestionContinuation) in
            getHostnameSuggestion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             This action can be used only with Windows stacks.
    ///
    ///          Grants RDP access to a Windows instance for a specified time period.
    func grantAccess(input: GrantAccessInput) async throws -> GrantAccessOutputResponse
    {
        typealias grantAccessContinuation = CheckedContinuation<GrantAccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: grantAccessContinuation) in
            grantAccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of tags that are applied to the specified stack or layer.
    func listTags(input: ListTagsInput) async throws -> ListTagsOutputResponse
    {
        typealias listTagsContinuation = CheckedContinuation<ListTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsContinuation) in
            listTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Reboots a specified instance. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-starting.html">Starting,
    ///         Stopping, and Rebooting Instances.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func rebootInstance(input: RebootInstanceInput) async throws -> RebootInstanceOutputResponse
    {
        typealias rebootInstanceContinuation = CheckedContinuation<RebootInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rebootInstanceContinuation) in
            rebootInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers a specified Amazon ECS cluster with a stack. You can register only one
    ///       cluster with a stack. A cluster can be registered with only one stack.
    ///       For more information, see
    ///       <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-ecscluster.html">
    ///       Resource Management.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see
    ///       <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">
    ///       Managing User Permissions.
    func registerEcsCluster(input: RegisterEcsClusterInput) async throws -> RegisterEcsClusterOutputResponse
    {
        typealias registerEcsClusterContinuation = CheckedContinuation<RegisterEcsClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerEcsClusterContinuation) in
            registerEcsCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers an Elastic IP address with a specified stack. An address can be registered with
    ///       only one stack at a time. If the address is already registered, you must first deregister it
    ///       by calling DeregisterElasticIp. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func registerElasticIp(input: RegisterElasticIpInput) async throws -> RegisterElasticIpOutputResponse
    {
        typealias registerElasticIpContinuation = CheckedContinuation<RegisterElasticIpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerElasticIpContinuation) in
            registerElasticIp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers instances that were created outside of AWS OpsWorks Stacks with a specified stack.
    ///
    ///             We do not recommend using this action to register instances. The complete registration
    ///       operation includes two tasks: installing the AWS OpsWorks Stacks agent on the instance, and registering
    ///       the instance with the stack. RegisterInstance handles only the second step. You
    ///       should instead use the AWS CLI register command, which performs the entire
    ///       registration operation. For more information,
    ///       see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/registered-instances-register.html">
    ///       Registering an Instance with an AWS OpsWorks Stacks Stack.
    ///
    ///          Registered instances have the same requirements as instances that are created by using the CreateInstance API.
    ///       For example, registered instances must be running a supported Linux-based operating system, and they must have a supported instance
    ///       type. For more information about requirements for instances that you want to register, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/registered-instances-register-registering-preparer.html">
    ///           Preparing the Instance.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func registerInstance(input: RegisterInstanceInput) async throws -> RegisterInstanceOutputResponse
    {
        typealias registerInstanceContinuation = CheckedContinuation<RegisterInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerInstanceContinuation) in
            registerInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers an Amazon RDS instance with a stack.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func registerRdsDbInstance(input: RegisterRdsDbInstanceInput) async throws -> RegisterRdsDbInstanceOutputResponse
    {
        typealias registerRdsDbInstanceContinuation = CheckedContinuation<RegisterRdsDbInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerRdsDbInstanceContinuation) in
            registerRdsDbInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers an Amazon EBS volume with a specified stack. A volume can be registered with only one
    ///       stack at a time. If the volume is already registered, you must first deregister it by calling
    ///         DeregisterVolume. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func registerVolume(input: RegisterVolumeInput) async throws -> RegisterVolumeOutputResponse
    {
        typealias registerVolumeContinuation = CheckedContinuation<RegisterVolumeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerVolumeContinuation) in
            registerVolume(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Specify the load-based auto scaling configuration for a specified layer. For more
    ///       information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-autoscaling.html">Managing
    ///         Load with Time-based and Load-based Instances.
    ///
    ///             To use load-based auto scaling, you must create a set of load-based auto scaling instances. Load-based auto scaling operates only on the instances from that set, so you must ensure that you have created enough instances to handle the maximum anticipated load.
    ///
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func setLoadBasedAutoScaling(input: SetLoadBasedAutoScalingInput) async throws -> SetLoadBasedAutoScalingOutputResponse
    {
        typealias setLoadBasedAutoScalingContinuation = CheckedContinuation<SetLoadBasedAutoScalingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setLoadBasedAutoScalingContinuation) in
            setLoadBasedAutoScaling(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Specifies a user's permissions. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingsecurity.html">Security and
    ///         Permissions.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func setPermission(input: SetPermissionInput) async throws -> SetPermissionOutputResponse
    {
        typealias setPermissionContinuation = CheckedContinuation<SetPermissionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setPermissionContinuation) in
            setPermission(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Specify the time-based auto scaling configuration for a specified instance. For more
    ///       information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-autoscaling.html">Managing
    ///         Load with Time-based and Load-based Instances.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func setTimeBasedAutoScaling(input: SetTimeBasedAutoScalingInput) async throws -> SetTimeBasedAutoScalingOutputResponse
    {
        typealias setTimeBasedAutoScalingContinuation = CheckedContinuation<SetTimeBasedAutoScalingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setTimeBasedAutoScalingContinuation) in
            setTimeBasedAutoScaling(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts a specified instance. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-starting.html">Starting,
    ///         Stopping, and Rebooting Instances.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func startInstance(input: StartInstanceInput) async throws -> StartInstanceOutputResponse
    {
        typealias startInstanceContinuation = CheckedContinuation<StartInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startInstanceContinuation) in
            startInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts a stack's instances.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func startStack(input: StartStackInput) async throws -> StartStackOutputResponse
    {
        typealias startStackContinuation = CheckedContinuation<StartStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startStackContinuation) in
            startStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops a specified instance. When you stop a standard instance, the data disappears and must
    ///       be reinstalled when you restart the instance. You can stop an Amazon EBS-backed instance without
    ///       losing data. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-starting.html">Starting,
    ///         Stopping, and Rebooting Instances.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func stopInstance(input: StopInstanceInput) async throws -> StopInstanceOutputResponse
    {
        typealias stopInstanceContinuation = CheckedContinuation<StopInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopInstanceContinuation) in
            stopInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops a specified stack.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func stopStack(input: StopStackInput) async throws -> StopStackOutputResponse
    {
        typealias stopStackContinuation = CheckedContinuation<StopStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopStackContinuation) in
            stopStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Apply cost-allocation tags to a specified stack or layer in AWS OpsWorks Stacks. For more information about how tagging works, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/tagging.html">Tags in the AWS OpsWorks User Guide.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Unassigns a registered instance from all layers that are using the instance.
    ///           The instance remains in the stack as an unassigned instance, and can be assigned to
    ///           another layer as needed. You cannot use this action with instances that were created
    ///           with AWS OpsWorks Stacks.
    ///
    ///             Required Permissions: To use this action, an IAM user must
    ///           have a Manage permissions level for the stack or an attached policy that explicitly
    ///           grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func unassignInstance(input: UnassignInstanceInput) async throws -> UnassignInstanceOutputResponse
    {
        typealias unassignInstanceContinuation = CheckedContinuation<UnassignInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: unassignInstanceContinuation) in
            unassignInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Unassigns an assigned Amazon EBS volume. The volume remains registered with the stack. For more
    ///       information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource
    ///         Management.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func unassignVolume(input: UnassignVolumeInput) async throws -> UnassignVolumeOutputResponse
    {
        typealias unassignVolumeContinuation = CheckedContinuation<UnassignVolumeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: unassignVolumeContinuation) in
            unassignVolume(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes tags from a specified stack or layer.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a specified app.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Deploy or Manage
    ///       permissions level for the stack, or an attached policy that explicitly grants permissions. For
    ///       more information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func updateApp(input: UpdateAppInput) async throws -> UpdateAppOutputResponse
    {
        typealias updateAppContinuation = CheckedContinuation<UpdateAppOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAppContinuation) in
            updateApp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a registered Elastic IP address's name. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func updateElasticIp(input: UpdateElasticIpInput) async throws -> UpdateElasticIpOutputResponse
    {
        typealias updateElasticIpContinuation = CheckedContinuation<UpdateElasticIpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateElasticIpContinuation) in
            updateElasticIp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a specified instance.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func updateInstance(input: UpdateInstanceInput) async throws -> UpdateInstanceOutputResponse
    {
        typealias updateInstanceContinuation = CheckedContinuation<UpdateInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateInstanceContinuation) in
            updateInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a specified layer.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func updateLayer(input: UpdateLayerInput) async throws -> UpdateLayerOutputResponse
    {
        typealias updateLayerContinuation = CheckedContinuation<UpdateLayerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateLayerContinuation) in
            updateLayer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a user's SSH public key.
    ///
    ///             Required Permissions: To use this action, an IAM user must have self-management
    ///       enabled or an attached policy that explicitly grants permissions. For more information about user
    ///       permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func updateMyUserProfile(input: UpdateMyUserProfileInput) async throws -> UpdateMyUserProfileOutputResponse
    {
        typealias updateMyUserProfileContinuation = CheckedContinuation<UpdateMyUserProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMyUserProfileContinuation) in
            updateMyUserProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an Amazon RDS instance.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func updateRdsDbInstance(input: UpdateRdsDbInstanceInput) async throws -> UpdateRdsDbInstanceOutputResponse
    {
        typealias updateRdsDbInstanceContinuation = CheckedContinuation<UpdateRdsDbInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRdsDbInstanceContinuation) in
            updateRdsDbInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a specified stack.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func updateStack(input: UpdateStackInput) async throws -> UpdateStackOutputResponse
    {
        typealias updateStackContinuation = CheckedContinuation<UpdateStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateStackContinuation) in
            updateStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a specified user profile.
    ///
    ///             Required Permissions: To use this action, an IAM user must have an attached policy
    ///       that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func updateUserProfile(input: UpdateUserProfileInput) async throws -> UpdateUserProfileOutputResponse
    {
        typealias updateUserProfileContinuation = CheckedContinuation<UpdateUserProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserProfileContinuation) in
            updateUserProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an Amazon EBS volume's name or mount point. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management.
    ///
    ///             Required Permissions: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions.
    func updateVolume(input: UpdateVolumeInput) async throws -> UpdateVolumeOutputResponse
    {
        typealias updateVolumeContinuation = CheckedContinuation<UpdateVolumeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateVolumeContinuation) in
            updateVolume(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
