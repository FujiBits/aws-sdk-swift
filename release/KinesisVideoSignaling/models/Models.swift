// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension ClientLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ClientLimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension ClientLimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ClientLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Your request was throttled because you have exceeded the limit of allowed client
///             calls. Try making the call later.</p>
public struct ClientLimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ClientLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ClientLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct GetIceServerConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIceServerConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIceServerConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIceServerConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIceServerConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIceServerConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIceServerConfigOutputError>
}

extension GetIceServerConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIceServerConfigInput(channelARN: \(Swift.String(describing: channelARN)), clientId: \(Swift.String(describing: clientId)), service: \(Swift.String(describing: service)), username: \(Swift.String(describing: username)))"}
}

extension GetIceServerConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelARN = "ChannelARN"
        case clientId = "ClientId"
        case service = "Service"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelARN = channelARN {
            try encodeContainer.encode(channelARN, forKey: .channelARN)
        }
        if let clientId = clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let service = service {
            try encodeContainer.encode(service.rawValue, forKey: .service)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

public struct GetIceServerConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIceServerConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIceServerConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIceServerConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIceServerConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIceServerConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIceServerConfigOutputError>
}

public struct GetIceServerConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIceServerConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIceServerConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIceServerConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIceServerConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIceServerConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIceServerConfigOutputError>
}

public struct GetIceServerConfigInput: Swift.Equatable {
    /// <p>The ARN of the signaling channel to be used for the peer-to-peer connection between
    ///             configured peers. </p>
    public let channelARN: Swift.String?
    /// <p>Unique identifier for the viewer. Must be unique within the signaling channel.</p>
    public let clientId: Swift.String?
    /// <p>Specifies the desired service. Currently, <code>TURN</code> is the only valid
    ///             value.</p>
    public let service: KinesisVideoSignalingClientTypes.Service?
    /// <p>An optional user ID to be associated with the credentials.</p>
    public let username: Swift.String?

    public init (
        channelARN: Swift.String? = nil,
        clientId: Swift.String? = nil,
        service: KinesisVideoSignalingClientTypes.Service? = nil,
        username: Swift.String? = nil
    )
    {
        self.channelARN = channelARN
        self.clientId = clientId
        self.service = service
        self.username = username
    }
}

struct GetIceServerConfigInputBody: Swift.Equatable {
    public let channelARN: Swift.String?
    public let clientId: Swift.String?
    public let service: KinesisVideoSignalingClientTypes.Service?
    public let username: Swift.String?
}

extension GetIceServerConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelARN = "ChannelARN"
        case clientId = "ClientId"
        case service = "Service"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelARN)
        channelARN = channelARNDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let serviceDecoded = try containerValues.decodeIfPresent(KinesisVideoSignalingClientTypes.Service.self, forKey: .service)
        service = serviceDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
    }
}

extension GetIceServerConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetIceServerConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientLimitExceededException" : self = .clientLimitExceededException(try ClientLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArgumentException" : self = .invalidArgumentException(try InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidClientException" : self = .invalidClientException(try InvalidClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SessionExpiredException" : self = .sessionExpiredException(try SessionExpiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetIceServerConfigOutputError: Swift.Error, Swift.Equatable {
    case clientLimitExceededException(ClientLimitExceededException)
    case invalidArgumentException(InvalidArgumentException)
    case invalidClientException(InvalidClientException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case sessionExpiredException(SessionExpiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIceServerConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIceServerConfigOutputResponse(iceServerList: \(Swift.String(describing: iceServerList)))"}
}

extension GetIceServerConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetIceServerConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.iceServerList = output.iceServerList
        } else {
            self.iceServerList = nil
        }
    }
}

public struct GetIceServerConfigOutputResponse: Swift.Equatable {
    /// <p>The list of ICE server information objects.</p>
    public let iceServerList: [KinesisVideoSignalingClientTypes.IceServer]?

    public init (
        iceServerList: [KinesisVideoSignalingClientTypes.IceServer]? = nil
    )
    {
        self.iceServerList = iceServerList
    }
}

struct GetIceServerConfigOutputResponseBody: Swift.Equatable {
    public let iceServerList: [KinesisVideoSignalingClientTypes.IceServer]?
}

extension GetIceServerConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iceServerList = "IceServerList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iceServerListContainer = try containerValues.decodeIfPresent([KinesisVideoSignalingClientTypes.IceServer?].self, forKey: .iceServerList)
        var iceServerListDecoded0:[KinesisVideoSignalingClientTypes.IceServer]? = nil
        if let iceServerListContainer = iceServerListContainer {
            iceServerListDecoded0 = [KinesisVideoSignalingClientTypes.IceServer]()
            for structure0 in iceServerListContainer {
                if let structure0 = structure0 {
                    iceServerListDecoded0?.append(structure0)
                }
            }
        }
        iceServerList = iceServerListDecoded0
    }
}

extension KinesisVideoSignalingClientTypes.IceServer: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case password = "Password"
        case ttl = "Ttl"
        case uris = "Uris"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if ttl != 0 {
            try encodeContainer.encode(ttl, forKey: .ttl)
        }
        if let uris = uris {
            var urisContainer = encodeContainer.nestedUnkeyedContainer(forKey: .uris)
            for uris0 in uris {
                try urisContainer.encode(uris0)
            }
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urisContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .uris)
        var urisDecoded0:[Swift.String]? = nil
        if let urisContainer = urisContainer {
            urisDecoded0 = [Swift.String]()
            for string0 in urisContainer {
                if let string0 = string0 {
                    urisDecoded0?.append(string0)
                }
            }
        }
        uris = urisDecoded0
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let ttlDecoded = try containerValues.decode(Swift.Int.self, forKey: .ttl)
        ttl = ttlDecoded
    }
}

extension KinesisVideoSignalingClientTypes.IceServer: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IceServer(password: \(Swift.String(describing: password)), ttl: \(Swift.String(describing: ttl)), uris: \(Swift.String(describing: uris)), username: \(Swift.String(describing: username)))"}
}

extension KinesisVideoSignalingClientTypes {
    /// <p>A structure for the ICE server connection data.</p>
    public struct IceServer: Swift.Equatable {
        /// <p>A password to login to the ICE server.</p>
        public let password: Swift.String?
        /// <p>The period of time, in seconds, during which the username and password are
        ///             valid.</p>
        public let ttl: Swift.Int
        /// <p>An array of URIs, in the form specified in the <a href="https://tools.ietf.org/html/draft-petithuguenin-behave-turn-uris-03">I-D.petithuguenin-behave-turn-uris</a> spec. These URIs provide the different
        ///             addresses and/or protocols that can be used to reach the TURN server.</p>
        public let uris: [Swift.String]?
        /// <p>A username to login to the ICE server.</p>
        public let username: Swift.String?

        public init (
            password: Swift.String? = nil,
            ttl: Swift.Int = 0,
            uris: [Swift.String]? = nil,
            username: Swift.String? = nil
        )
        {
            self.password = password
            self.ttl = ttl
            self.uris = uris
            self.username = username
        }
    }

}

extension InvalidArgumentException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidArgumentException(message: \(Swift.String(describing: message)))"}
}

extension InvalidArgumentException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidArgumentExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The value for this input parameter is invalid.</p>
public struct InvalidArgumentException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidArgumentExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidArgumentExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidClientException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidClientException(message: \(Swift.String(describing: message)))"}
}

extension InvalidClientException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidClientExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified client is invalid.</p>
public struct InvalidClientException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidClientExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidClientExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NotAuthorizedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotAuthorizedException(message: \(Swift.String(describing: message)))"}
}

extension NotAuthorizedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NotAuthorizedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The caller is not authorized to perform this operation.</p>
public struct NotAuthorizedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotAuthorizedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NotAuthorizedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified resource is not found.</p>
public struct ResourceNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct SendAlexaOfferToMasterInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendAlexaOfferToMasterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendAlexaOfferToMasterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendAlexaOfferToMasterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendAlexaOfferToMasterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendAlexaOfferToMasterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendAlexaOfferToMasterOutputError>
}

extension SendAlexaOfferToMasterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendAlexaOfferToMasterInput(channelARN: \(Swift.String(describing: channelARN)), messagePayload: \(Swift.String(describing: messagePayload)), senderClientId: \(Swift.String(describing: senderClientId)))"}
}

extension SendAlexaOfferToMasterInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelARN = "ChannelARN"
        case messagePayload = "MessagePayload"
        case senderClientId = "SenderClientId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelARN = channelARN {
            try encodeContainer.encode(channelARN, forKey: .channelARN)
        }
        if let messagePayload = messagePayload {
            try encodeContainer.encode(messagePayload, forKey: .messagePayload)
        }
        if let senderClientId = senderClientId {
            try encodeContainer.encode(senderClientId, forKey: .senderClientId)
        }
    }
}

public struct SendAlexaOfferToMasterInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendAlexaOfferToMasterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendAlexaOfferToMasterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendAlexaOfferToMasterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendAlexaOfferToMasterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendAlexaOfferToMasterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendAlexaOfferToMasterOutputError>
}

public struct SendAlexaOfferToMasterInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendAlexaOfferToMasterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendAlexaOfferToMasterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendAlexaOfferToMasterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendAlexaOfferToMasterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendAlexaOfferToMasterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendAlexaOfferToMasterOutputError>
}

public struct SendAlexaOfferToMasterInput: Swift.Equatable {
    /// <p>The ARN of the signaling channel by which Alexa and the master peer
    ///             communicate.</p>
    public let channelARN: Swift.String?
    /// <p>The base64-encoded SDP offer content.</p>
    public let messagePayload: Swift.String?
    /// <p>The unique identifier for the sender client.</p>
    public let senderClientId: Swift.String?

    public init (
        channelARN: Swift.String? = nil,
        messagePayload: Swift.String? = nil,
        senderClientId: Swift.String? = nil
    )
    {
        self.channelARN = channelARN
        self.messagePayload = messagePayload
        self.senderClientId = senderClientId
    }
}

struct SendAlexaOfferToMasterInputBody: Swift.Equatable {
    public let channelARN: Swift.String?
    public let senderClientId: Swift.String?
    public let messagePayload: Swift.String?
}

extension SendAlexaOfferToMasterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelARN = "ChannelARN"
        case messagePayload = "MessagePayload"
        case senderClientId = "SenderClientId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelARN)
        channelARN = channelARNDecoded
        let senderClientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .senderClientId)
        senderClientId = senderClientIdDecoded
        let messagePayloadDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messagePayload)
        messagePayload = messagePayloadDecoded
    }
}

extension SendAlexaOfferToMasterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendAlexaOfferToMasterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientLimitExceededException" : self = .clientLimitExceededException(try ClientLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArgumentException" : self = .invalidArgumentException(try InvalidArgumentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendAlexaOfferToMasterOutputError: Swift.Error, Swift.Equatable {
    case clientLimitExceededException(ClientLimitExceededException)
    case invalidArgumentException(InvalidArgumentException)
    case notAuthorizedException(NotAuthorizedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendAlexaOfferToMasterOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendAlexaOfferToMasterOutputResponse(answer: \(Swift.String(describing: answer)))"}
}

extension SendAlexaOfferToMasterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendAlexaOfferToMasterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.answer = output.answer
        } else {
            self.answer = nil
        }
    }
}

public struct SendAlexaOfferToMasterOutputResponse: Swift.Equatable {
    /// <p>The base64-encoded SDP answer content.</p>
    public let answer: Swift.String?

    public init (
        answer: Swift.String? = nil
    )
    {
        self.answer = answer
    }
}

struct SendAlexaOfferToMasterOutputResponseBody: Swift.Equatable {
    public let answer: Swift.String?
}

extension SendAlexaOfferToMasterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case answer = "Answer"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let answerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .answer)
        answer = answerDecoded
    }
}

extension KinesisVideoSignalingClientTypes {
    public enum Service: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case turn
        case sdkUnknown(Swift.String)

        public static var allCases: [Service] {
            return [
                .turn,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .turn: return "TURN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Service(rawValue: rawValue) ?? Service.sdkUnknown(rawValue)
        }
    }
}

extension SessionExpiredException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SessionExpiredException(message: \(Swift.String(describing: message)))"}
}

extension SessionExpiredException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SessionExpiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>If the client session is expired. Once the client is connected, the session is valid
///             for 45 minutes. Client should reconnect to the channel to continue sending/receiving
///             messages.</p>
public struct SessionExpiredException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SessionExpiredExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension SessionExpiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
