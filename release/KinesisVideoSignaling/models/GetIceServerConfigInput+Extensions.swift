// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetIceServerConfigInputHeadersMiddleware: Middleware {
    public let id: String = "GetIceServerConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetIceServerConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<GetIceServerConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetIceServerConfigInput>
    public typealias MOutput = OperationOutput<GetIceServerConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetIceServerConfigOutputError>
}

public struct GetIceServerConfigInputQueryItemMiddleware: Middleware {
    public let id: String = "GetIceServerConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetIceServerConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<GetIceServerConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetIceServerConfigInput>
    public typealias MOutput = OperationOutput<GetIceServerConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetIceServerConfigOutputError>
}

public struct GetIceServerConfigInputBodyMiddleware: Middleware {
    public let id: String = "GetIceServerConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetIceServerConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<GetIceServerConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetIceServerConfigInput>
    public typealias MOutput = OperationOutput<GetIceServerConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetIceServerConfigOutputError>
}

extension GetIceServerConfigInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channelARN = "ChannelARN"
        case clientId = "ClientId"
        case service = "Service"
        case username = "Username"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelARN = channelARN {
            try encodeContainer.encode(channelARN, forKey: .channelARN)
        }
        if let clientId = clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let service = service {
            try encodeContainer.encode(service.rawValue, forKey: .service)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}
