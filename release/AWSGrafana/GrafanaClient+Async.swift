// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension GrafanaClient {
    /// Assigns a Grafana Enterprise license to a workspace. Upgrading to Grafana Enterprise incurs additional fees. For more information, see [Upgrade a workspace to Grafana Enterprise](https://docs.aws.amazon.com/grafana/latest/userguide/upgrade-to-Grafana-Enterprise.html).
    func associateLicense(input: AssociateLicenseInput) async throws -> AssociateLicenseOutputResponse
    {
        typealias associateLicenseContinuation = CheckedContinuation<AssociateLicenseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateLicenseContinuation) in
            associateLicense(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a workspace. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces. You don't have to build, package, or deploy any hardware to run the Grafana server. Don't use CreateWorkspace to modify an existing workspace. Instead, use [UpdateWorkspace](https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdateWorkspace.html).
    func createWorkspace(input: CreateWorkspaceInput) async throws -> CreateWorkspaceOutputResponse
    {
        typealias createWorkspaceContinuation = CheckedContinuation<CreateWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWorkspaceContinuation) in
            createWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an Amazon Managed Grafana workspace.
    func deleteWorkspace(input: DeleteWorkspaceInput) async throws -> DeleteWorkspaceOutputResponse
    {
        typealias deleteWorkspaceContinuation = CheckedContinuation<DeleteWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWorkspaceContinuation) in
            deleteWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Displays information about one Amazon Managed Grafana workspace.
    func describeWorkspace(input: DescribeWorkspaceInput) async throws -> DescribeWorkspaceOutputResponse
    {
        typealias describeWorkspaceContinuation = CheckedContinuation<DescribeWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeWorkspaceContinuation) in
            describeWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Displays information about the authentication methods used in one Amazon Managed Grafana workspace.
    func describeWorkspaceAuthentication(input: DescribeWorkspaceAuthenticationInput) async throws -> DescribeWorkspaceAuthenticationOutputResponse
    {
        typealias describeWorkspaceAuthenticationContinuation = CheckedContinuation<DescribeWorkspaceAuthenticationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeWorkspaceAuthenticationContinuation) in
            describeWorkspaceAuthentication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the Grafana Enterprise license from a workspace.
    func disassociateLicense(input: DisassociateLicenseInput) async throws -> DisassociateLicenseOutputResponse
    {
        typealias disassociateLicenseContinuation = CheckedContinuation<DisassociateLicenseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateLicenseContinuation) in
            disassociateLicense(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the users and groups who have the Grafana Admin and Editor roles in this workspace. If you use this operation without specifying userId or groupId, the operation returns the roles of all users and groups. If you specify a userId or a groupId, only the roles for that user or group are returned. If you do this, you can specify only one userId or one groupId.
    func listPermissions(input: ListPermissionsInput) async throws -> ListPermissionsOutputResponse
    {
        typealias listPermissionsContinuation = CheckedContinuation<ListPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPermissionsContinuation) in
            listPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of Amazon Managed Grafana workspaces in the account, with some information about each workspace. For more complete information about one workspace, use [DescribeWorkspace](https://docs.aws.amazon.com/AAMG/latest/APIReference/API_DescribeWorkspace.html).
    func listWorkspaces(input: ListWorkspacesInput) async throws -> ListWorkspacesOutputResponse
    {
        typealias listWorkspacesContinuation = CheckedContinuation<ListWorkspacesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWorkspacesContinuation) in
            listWorkspaces(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates which users in a workspace have the Grafana Admin or Editor roles.
    func updatePermissions(input: UpdatePermissionsInput) async throws -> UpdatePermissionsOutputResponse
    {
        typealias updatePermissionsContinuation = CheckedContinuation<UpdatePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePermissionsContinuation) in
            updatePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies an existing Amazon Managed Grafana workspace. If you use this operation and omit any optional parameters, the existing values of those parameters are not changed. To modify the user authentication methods that the workspace uses, such as SAML or Amazon Web Services SSO, use [UpdateWorkspaceAuthentication](https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdateWorkspaceAuthentication.html). To modify which users in the workspace have the Admin and Editor Grafana roles, use [UpdatePermissions](https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdatePermissions.html).
    func updateWorkspace(input: UpdateWorkspaceInput) async throws -> UpdateWorkspaceOutputResponse
    {
        typealias updateWorkspaceContinuation = CheckedContinuation<UpdateWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateWorkspaceContinuation) in
            updateWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Use this operation to define the identity provider (IdP) that this workspace authenticates users from, using SAML. You can also map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the Admin and Editor roles in the workspace.
    func updateWorkspaceAuthentication(input: UpdateWorkspaceAuthenticationInput) async throws -> UpdateWorkspaceAuthenticationOutputResponse
    {
        typealias updateWorkspaceAuthenticationContinuation = CheckedContinuation<UpdateWorkspaceAuthenticationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateWorkspaceAuthenticationContinuation) in
            updateWorkspaceAuthentication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
