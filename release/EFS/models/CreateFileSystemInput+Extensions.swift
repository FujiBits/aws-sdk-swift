// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateFileSystemInputHeadersMiddleware: Middleware {
    public let id: String = "CreateFileSystemInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFileSystemInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFileSystemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFileSystemInput>
    public typealias MOutput = OperationOutput<CreateFileSystemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFileSystemOutputError>
}

public struct CreateFileSystemInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateFileSystemInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFileSystemInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFileSystemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFileSystemInput>
    public typealias MOutput = OperationOutput<CreateFileSystemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFileSystemOutputError>
}

public struct CreateFileSystemInputBodyMiddleware: Middleware {
    public let id: String = "CreateFileSystemInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFileSystemInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFileSystemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFileSystemInput>
    public typealias MOutput = OperationOutput<CreateFileSystemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFileSystemOutputError>
}

extension CreateFileSystemInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZoneName = "AvailabilityZoneName"
        case backup = "Backup"
        case creationToken = "CreationToken"
        case encrypted = "Encrypted"
        case kmsKeyId = "KmsKeyId"
        case performanceMode = "PerformanceMode"
        case provisionedThroughputInMibps = "ProvisionedThroughputInMibps"
        case tags = "Tags"
        case throughputMode = "ThroughputMode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZoneName = availabilityZoneName {
            try encodeContainer.encode(availabilityZoneName, forKey: .availabilityZoneName)
        }
        if let backup = backup {
            try encodeContainer.encode(backup, forKey: .backup)
        }
        if let creationToken = creationToken {
            try encodeContainer.encode(creationToken, forKey: .creationToken)
        }
        if let encrypted = encrypted {
            try encodeContainer.encode(encrypted, forKey: .encrypted)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let performanceMode = performanceMode {
            try encodeContainer.encode(performanceMode.rawValue, forKey: .performanceMode)
        }
        if let provisionedThroughputInMibps = provisionedThroughputInMibps {
            try encodeContainer.encode(provisionedThroughputInMibps, forKey: .provisionedThroughputInMibps)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let throughputMode = throughputMode {
            try encodeContainer.encode(throughputMode.rawValue, forKey: .throughputMode)
        }
    }
}
