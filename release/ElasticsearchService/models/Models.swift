// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AcceptInboundCrossClusterSearchConnectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AcceptInboundCrossClusterSearchConnectionInput(crossClusterSearchConnectionId: \(Swift.String(describing: crossClusterSearchConnectionId)))"}
}

extension AcceptInboundCrossClusterSearchConnectionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct AcceptInboundCrossClusterSearchConnectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptInboundCrossClusterSearchConnectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptInboundCrossClusterSearchConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptInboundCrossClusterSearchConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptInboundCrossClusterSearchConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptInboundCrossClusterSearchConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptInboundCrossClusterSearchConnectionOutputError>
}

public struct AcceptInboundCrossClusterSearchConnectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptInboundCrossClusterSearchConnectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptInboundCrossClusterSearchConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptInboundCrossClusterSearchConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptInboundCrossClusterSearchConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptInboundCrossClusterSearchConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptInboundCrossClusterSearchConnectionOutputError>
}

/// Container for the parameters to the AcceptInboundCrossClusterSearchConnection operation.
public struct AcceptInboundCrossClusterSearchConnectionInput: Swift.Equatable {
    /// The id of the inbound connection that you want to accept.
    /// This member is required.
    public let crossClusterSearchConnectionId: Swift.String?

    public init (
        crossClusterSearchConnectionId: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
    }
}

struct AcceptInboundCrossClusterSearchConnectionInputBody: Swift.Equatable {
}

extension AcceptInboundCrossClusterSearchConnectionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AcceptInboundCrossClusterSearchConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptInboundCrossClusterSearchConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AcceptInboundCrossClusterSearchConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptInboundCrossClusterSearchConnectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AcceptInboundCrossClusterSearchConnectionOutputResponse(crossClusterSearchConnection: \(Swift.String(describing: crossClusterSearchConnection)))"}
}

extension AcceptInboundCrossClusterSearchConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AcceptInboundCrossClusterSearchConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crossClusterSearchConnection = output.crossClusterSearchConnection
        } else {
            self.crossClusterSearchConnection = nil
        }
    }
}

/// The result of a AcceptInboundCrossClusterSearchConnection operation. Contains details of accepted inbound connection.
public struct AcceptInboundCrossClusterSearchConnectionOutputResponse: Swift.Equatable {
    /// Specifies the InboundCrossClusterSearchConnection of accepted inbound connection.
    public let crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?

    public init (
        crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection? = nil
    )
    {
        self.crossClusterSearchConnection = crossClusterSearchConnection
    }
}

struct AcceptInboundCrossClusterSearchConnectionOutputResponseBody: Swift.Equatable {
    public let crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?
}

extension AcceptInboundCrossClusterSearchConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crossClusterSearchConnection = "CrossClusterSearchConnection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crossClusterSearchConnectionDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.InboundCrossClusterSearchConnection.self, forKey: .crossClusterSearchConnection)
        crossClusterSearchConnection = crossClusterSearchConnectionDecoded
    }
}

extension AccessDeniedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessDeniedException(message: \(Swift.String(describing: message)))"}
}

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticsearchClientTypes.AccessPoliciesStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes.AccessPoliciesStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessPoliciesStatus(options: \(Swift.String(describing: options)), status: \(Swift.String(describing: status)))"}
}

extension ElasticsearchClientTypes {
    /// The configured access rules for the domain's document and search endpoints, and the current status of those rules.
    public struct AccessPoliciesStatus: Swift.Equatable {
        /// The access policy configured for the Elasticsearch domain.  Access policies may be resource-based, IP-based, or IAM-based.  See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-access-policies" target="_blank">
        ///            Configuring Access Policiesfor more information.
        /// This member is required.
        public let options: Swift.String?
        /// The status of the access policy for the Elasticsearch domain. See OptionStatus for the status information that's included.
        /// This member is required.
        public let status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: Swift.String? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

public struct AddTagsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsOutputError>
}

extension AddTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddTagsInput(aRN: \(Swift.String(describing: aRN)), tagList: \(Swift.String(describing: tagList)))"}
}

extension AddTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case tagList = "TagList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
    }
}

public struct AddTagsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsOutputError>
}

public struct AddTagsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsOutputError>
}

/// Container for the parameters to the AddTags operation. Specify the tags that you want to attach to the Elasticsearch domain.
public struct AddTagsInput: Swift.Equatable {
    ///  Specify the ARN for which you want to add the tags.
    /// This member is required.
    public let aRN: Swift.String?
    ///  List of Tag that need to be added for the Elasticsearch domain.
    /// This member is required.
    public let tagList: [ElasticsearchClientTypes.Tag]?

    public init (
        aRN: Swift.String? = nil,
        tagList: [ElasticsearchClientTypes.Tag]? = nil
    )
    {
        self.aRN = aRN
        self.tagList = tagList
    }
}

struct AddTagsInputBody: Swift.Equatable {
    public let aRN: Swift.String?
    public let tagList: [ElasticsearchClientTypes.Tag]?
}

extension AddTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case tagList = "TagList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let tagListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[ElasticsearchClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [ElasticsearchClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
    }
}

extension AddTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddTagsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddTagsOutputResponse()"}
}

extension AddTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AddTagsOutputResponse: Swift.Equatable {

    public init() {}
}

struct AddTagsOutputResponseBody: Swift.Equatable {
}

extension AddTagsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ElasticsearchClientTypes.AdditionalLimit: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limitName = "LimitName"
        case limitValues = "LimitValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limitName = limitName {
            try encodeContainer.encode(limitName, forKey: .limitName)
        }
        if let limitValues = limitValues {
            var limitValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .limitValues)
            for limitvaluelist0 in limitValues {
                try limitValuesContainer.encode(limitvaluelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .limitName)
        limitName = limitNameDecoded
        let limitValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .limitValues)
        var limitValuesDecoded0:[Swift.String]? = nil
        if let limitValuesContainer = limitValuesContainer {
            limitValuesDecoded0 = [Swift.String]()
            for string0 in limitValuesContainer {
                if let string0 = string0 {
                    limitValuesDecoded0?.append(string0)
                }
            }
        }
        limitValues = limitValuesDecoded0
    }
}

extension ElasticsearchClientTypes.AdditionalLimit: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdditionalLimit(limitName: \(Swift.String(describing: limitName)), limitValues: \(Swift.String(describing: limitValues)))"}
}

extension ElasticsearchClientTypes {
    ///
    ///       List of limits that are specific to a given InstanceType and for each of it's
    ///
    ///         InstanceRole
    ///
    ///       .
    ///
    public struct AdditionalLimit: Swift.Equatable {
        ///
        ///       Name of Additional Limit is specific to a given InstanceType and for each of it's
        ///
        ///         InstanceRole
        ///
        ///       etc.
        ///       <br></br>
        ///       Attributes and their details:
        ///       <br></br>
        ///
        ///         MaximumNumberOfDataNodesSupported
        ///         This attribute will be present in Master node only to specify how
        ///         much data nodes upto which given
        ///
        ///           ESPartitionInstanceType
        ///
        ///         can support as master node.
        ///         MaximumNumberOfDataNodesWithoutMasterNode
        ///         This attribute will be present in Data node only to specify how much
        ///         data nodes of given
        ///
        ///           ESPartitionInstanceType
        ///
        ///         upto which you don't need any master nodes to govern them.
        ///
        ///
        public let limitName: Swift.String?
        ///
        ///     Value for given
        ///
        ///       AdditionalLimit$LimitName
        ///
        ///     .
        ///
        public let limitValues: [Swift.String]?

        public init (
            limitName: Swift.String? = nil,
            limitValues: [Swift.String]? = nil
        )
        {
            self.limitName = limitName
            self.limitValues = limitValues
        }
    }

}

extension ElasticsearchClientTypes.AdvancedOptionsStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            var optionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .options)
            for (dictKey0, advancedoptions0) in options {
                try optionsContainer.encode(advancedoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .options)
        var optionsDecoded0: [Swift.String:Swift.String]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in optionsContainer {
                if let string0 = string0 {
                    optionsDecoded0?[key0] = string0
                }
            }
        }
        options = optionsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes.AdvancedOptionsStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdvancedOptionsStatus(options: \(Swift.String(describing: options)), status: \(Swift.String(describing: status)))"}
}

extension ElasticsearchClientTypes {
    ///  Status of the advanced options for the specified Elasticsearch domain. Currently, the following advanced options are available:
    ///
    ///            Option to allow references to indices in an HTTP request body.  Must be false when configuring access to individual sub-resources.  By default, the value is true.
    ///                See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options" target="_blank">Configuration Advanced Options for more information.
    ///            Option to specify the percentage of heap space that is allocated to field data. By default, this setting is unbounded.
    ///
    ///        For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options">Configuring Advanced Options.
    public struct AdvancedOptionsStatus: Swift.Equatable {
        ///  Specifies the status of advanced options for the specified Elasticsearch domain.
        /// This member is required.
        public let options: [Swift.String:Swift.String]?
        ///  Specifies the status of OptionStatus for advanced options for the specified Elasticsearch domain.
        /// This member is required.
        public let status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: [Swift.String:Swift.String]? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes.AdvancedSecurityOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case internalUserDatabaseEnabled = "InternalUserDatabaseEnabled"
        case sAMLOptions = "SAMLOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let internalUserDatabaseEnabled = internalUserDatabaseEnabled {
            try encodeContainer.encode(internalUserDatabaseEnabled, forKey: .internalUserDatabaseEnabled)
        }
        if let sAMLOptions = sAMLOptions {
            try encodeContainer.encode(sAMLOptions, forKey: .sAMLOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let internalUserDatabaseEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .internalUserDatabaseEnabled)
        internalUserDatabaseEnabled = internalUserDatabaseEnabledDecoded
        let sAMLOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SAMLOptionsOutput.self, forKey: .sAMLOptions)
        sAMLOptions = sAMLOptionsDecoded
    }
}

extension ElasticsearchClientTypes.AdvancedSecurityOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdvancedSecurityOptions(enabled: \(Swift.String(describing: enabled)), internalUserDatabaseEnabled: \(Swift.String(describing: internalUserDatabaseEnabled)), sAMLOptions: \(Swift.String(describing: sAMLOptions)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies the advanced security configuration: whether advanced security is enabled, whether the internal database option is enabled.
    public struct AdvancedSecurityOptions: Swift.Equatable {
        /// True if advanced security is enabled.
        public let enabled: Swift.Bool?
        /// True if the internal user database is enabled.
        public let internalUserDatabaseEnabled: Swift.Bool?
        /// Describes the SAML application configured for a domain.
        public let sAMLOptions: ElasticsearchClientTypes.SAMLOptionsOutput?

        public init (
            enabled: Swift.Bool? = nil,
            internalUserDatabaseEnabled: Swift.Bool? = nil,
            sAMLOptions: ElasticsearchClientTypes.SAMLOptionsOutput? = nil
        )
        {
            self.enabled = enabled
            self.internalUserDatabaseEnabled = internalUserDatabaseEnabled
            self.sAMLOptions = sAMLOptions
        }
    }

}

extension ElasticsearchClientTypes.AdvancedSecurityOptionsInput: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case internalUserDatabaseEnabled = "InternalUserDatabaseEnabled"
        case masterUserOptions = "MasterUserOptions"
        case sAMLOptions = "SAMLOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let internalUserDatabaseEnabled = internalUserDatabaseEnabled {
            try encodeContainer.encode(internalUserDatabaseEnabled, forKey: .internalUserDatabaseEnabled)
        }
        if let masterUserOptions = masterUserOptions {
            try encodeContainer.encode(masterUserOptions, forKey: .masterUserOptions)
        }
        if let sAMLOptions = sAMLOptions {
            try encodeContainer.encode(sAMLOptions, forKey: .sAMLOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let internalUserDatabaseEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .internalUserDatabaseEnabled)
        internalUserDatabaseEnabled = internalUserDatabaseEnabledDecoded
        let masterUserOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.MasterUserOptions.self, forKey: .masterUserOptions)
        masterUserOptions = masterUserOptionsDecoded
        let sAMLOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SAMLOptionsInput.self, forKey: .sAMLOptions)
        sAMLOptions = sAMLOptionsDecoded
    }
}

extension ElasticsearchClientTypes.AdvancedSecurityOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdvancedSecurityOptionsInput(enabled: \(Swift.String(describing: enabled)), internalUserDatabaseEnabled: \(Swift.String(describing: internalUserDatabaseEnabled)), masterUserOptions: \(Swift.String(describing: masterUserOptions)), sAMLOptions: \(Swift.String(describing: sAMLOptions)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies the advanced security configuration: whether advanced security is enabled, whether the internal database option is enabled, master username and password (if internal database is enabled), and master user ARN (if IAM is enabled).
    public struct AdvancedSecurityOptionsInput: Swift.Equatable {
        /// True if advanced security is enabled.
        public let enabled: Swift.Bool?
        /// True if the internal user database is enabled.
        public let internalUserDatabaseEnabled: Swift.Bool?
        /// Credentials for the master user: username and password, ARN, or both.
        public let masterUserOptions: ElasticsearchClientTypes.MasterUserOptions?
        /// Specifies the SAML application configuration for the domain.
        public let sAMLOptions: ElasticsearchClientTypes.SAMLOptionsInput?

        public init (
            enabled: Swift.Bool? = nil,
            internalUserDatabaseEnabled: Swift.Bool? = nil,
            masterUserOptions: ElasticsearchClientTypes.MasterUserOptions? = nil,
            sAMLOptions: ElasticsearchClientTypes.SAMLOptionsInput? = nil
        )
        {
            self.enabled = enabled
            self.internalUserDatabaseEnabled = internalUserDatabaseEnabled
            self.masterUserOptions = masterUserOptions
            self.sAMLOptions = sAMLOptions
        }
    }

}

extension ElasticsearchClientTypes.AdvancedSecurityOptionsStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AdvancedSecurityOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes.AdvancedSecurityOptionsStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdvancedSecurityOptionsStatus(options: \(Swift.String(describing: options)), status: \(Swift.String(describing: status)))"}
}

extension ElasticsearchClientTypes {
    ///  Specifies the status of advanced security options for the specified Elasticsearch domain.
    public struct AdvancedSecurityOptionsStatus: Swift.Equatable {
        ///  Specifies advanced security options for the specified Elasticsearch domain.
        /// This member is required.
        public let options: ElasticsearchClientTypes.AdvancedSecurityOptions?
        ///  Status of the advanced security options for the specified Elasticsearch domain.
        /// This member is required.
        public let status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.AdvancedSecurityOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension AssociatePackageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociatePackageInput(domainName: \(Swift.String(describing: domainName)), packageID: \(Swift.String(describing: packageID)))"}
}

extension AssociatePackageInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct AssociatePackageInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociatePackageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociatePackageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociatePackageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociatePackageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociatePackageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociatePackageOutputError>
}

public struct AssociatePackageInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociatePackageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociatePackageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociatePackageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociatePackageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociatePackageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociatePackageOutputError>
}

///
///       Container for request parameters to
///
///         AssociatePackage
///
///       operation.
///
public struct AssociatePackageInput: Swift.Equatable {
    /// Name of the domain that you want to associate the package with.
    /// This member is required.
    public let domainName: Swift.String?
    /// Internal ID of the package that you want to associate with a domain. Use DescribePackages to find this value.
    /// This member is required.
    public let packageID: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.packageID = packageID
    }
}

struct AssociatePackageInputBody: Swift.Equatable {
}

extension AssociatePackageInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AssociatePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociatePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociatePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case conflictException(ConflictException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociatePackageOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociatePackageOutputResponse(domainPackageDetails: \(Swift.String(describing: domainPackageDetails)))"}
}

extension AssociatePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AssociatePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainPackageDetails = output.domainPackageDetails
        } else {
            self.domainPackageDetails = nil
        }
    }
}

///
///       Container for response returned by
///
///         AssociatePackage
///
///       operation.
///
public struct AssociatePackageOutputResponse: Swift.Equatable {
    /// DomainPackageDetails
    public let domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails?

    public init (
        domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails? = nil
    )
    {
        self.domainPackageDetails = domainPackageDetails
    }
}

struct AssociatePackageOutputResponseBody: Swift.Equatable {
    public let domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails?
}

extension AssociatePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainPackageDetails = "DomainPackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainPackageDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainPackageDetails.self, forKey: .domainPackageDetails)
        domainPackageDetails = domainPackageDetailsDecoded
    }
}

extension ElasticsearchClientTypes.AutoTune: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoTuneDetails = "AutoTuneDetails"
        case autoTuneType = "AutoTuneType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoTuneDetails = autoTuneDetails {
            try encodeContainer.encode(autoTuneDetails, forKey: .autoTuneDetails)
        }
        if let autoTuneType = autoTuneType {
            try encodeContainer.encode(autoTuneType.rawValue, forKey: .autoTuneType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoTuneTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneType.self, forKey: .autoTuneType)
        autoTuneType = autoTuneTypeDecoded
        let autoTuneDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneDetails.self, forKey: .autoTuneDetails)
        autoTuneDetails = autoTuneDetailsDecoded
    }
}

extension ElasticsearchClientTypes.AutoTune: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoTune(autoTuneDetails: \(Swift.String(describing: autoTuneDetails)), autoTuneType: \(Swift.String(describing: autoTuneType)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies Auto-Tune type and Auto-Tune action details.
    public struct AutoTune: Swift.Equatable {
        /// Specifies details of the Auto-Tune action. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
        public let autoTuneDetails: ElasticsearchClientTypes.AutoTuneDetails?
        /// Specifies Auto-Tune type. Valid value is SCHEDULED_ACTION.
        public let autoTuneType: ElasticsearchClientTypes.AutoTuneType?

        public init (
            autoTuneDetails: ElasticsearchClientTypes.AutoTuneDetails? = nil,
            autoTuneType: ElasticsearchClientTypes.AutoTuneType? = nil
        )
        {
            self.autoTuneDetails = autoTuneDetails
            self.autoTuneType = autoTuneType
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the Auto-Tune desired state. Valid values are ENABLED, DISABLED.
    public enum AutoTuneDesiredState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoTuneDesiredState] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoTuneDesiredState(rawValue: rawValue) ?? AutoTuneDesiredState.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.AutoTuneDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduledAutoTuneDetails = "ScheduledAutoTuneDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scheduledAutoTuneDetails = scheduledAutoTuneDetails {
            try encodeContainer.encode(scheduledAutoTuneDetails, forKey: .scheduledAutoTuneDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledAutoTuneDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ScheduledAutoTuneDetails.self, forKey: .scheduledAutoTuneDetails)
        scheduledAutoTuneDetails = scheduledAutoTuneDetailsDecoded
    }
}

extension ElasticsearchClientTypes.AutoTuneDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoTuneDetails(scheduledAutoTuneDetails: \(Swift.String(describing: scheduledAutoTuneDetails)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies details of the Auto-Tune action. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
    public struct AutoTuneDetails: Swift.Equatable {
        /// Specifies details of the scheduled Auto-Tune action. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
        public let scheduledAutoTuneDetails: ElasticsearchClientTypes.ScheduledAutoTuneDetails?

        public init (
            scheduledAutoTuneDetails: ElasticsearchClientTypes.ScheduledAutoTuneDetails? = nil
        )
        {
            self.scheduledAutoTuneDetails = scheduledAutoTuneDetails
        }
    }

}

extension ElasticsearchClientTypes.AutoTuneMaintenanceSchedule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cronExpressionForRecurrence = "CronExpressionForRecurrence"
        case duration = "Duration"
        case startAt = "StartAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cronExpressionForRecurrence = cronExpressionForRecurrence {
            try encodeContainer.encode(cronExpressionForRecurrence, forKey: .cronExpressionForRecurrence)
        }
        if let duration = duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let startAt = startAt {
            try encodeContainer.encode(startAt.timeIntervalSince1970, forKey: .startAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startAt)
        startAt = startAtDecoded
        let durationDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.Duration.self, forKey: .duration)
        duration = durationDecoded
        let cronExpressionForRecurrenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cronExpressionForRecurrence)
        cronExpressionForRecurrence = cronExpressionForRecurrenceDecoded
    }
}

extension ElasticsearchClientTypes.AutoTuneMaintenanceSchedule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoTuneMaintenanceSchedule(cronExpressionForRecurrence: \(Swift.String(describing: cronExpressionForRecurrence)), duration: \(Swift.String(describing: duration)), startAt: \(Swift.String(describing: startAt)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies Auto-Tune maitenance schedule. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
    public struct AutoTuneMaintenanceSchedule: Swift.Equatable {
        /// Specifies cron expression for a recurring maintenance schedule. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
        public let cronExpressionForRecurrence: Swift.String?
        /// Specifies maintenance schedule duration: duration value and duration unit. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
        public let duration: ElasticsearchClientTypes.Duration?
        /// Specifies timestamp at which Auto-Tune maintenance schedule start.
        public let startAt: ClientRuntime.Date?

        public init (
            cronExpressionForRecurrence: Swift.String? = nil,
            duration: ElasticsearchClientTypes.Duration? = nil,
            startAt: ClientRuntime.Date? = nil
        )
        {
            self.cronExpressionForRecurrence = cronExpressionForRecurrence
            self.duration = duration
            self.startAt = startAt
        }
    }

}

extension ElasticsearchClientTypes.AutoTuneOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredState = "DesiredState"
        case maintenanceSchedules = "MaintenanceSchedules"
        case rollbackOnDisable = "RollbackOnDisable"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredState = desiredState {
            try encodeContainer.encode(desiredState.rawValue, forKey: .desiredState)
        }
        if let maintenanceSchedules = maintenanceSchedules {
            var maintenanceSchedulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .maintenanceSchedules)
            for autotunemaintenanceschedulelist0 in maintenanceSchedules {
                try maintenanceSchedulesContainer.encode(autotunemaintenanceschedulelist0)
            }
        }
        if let rollbackOnDisable = rollbackOnDisable {
            try encodeContainer.encode(rollbackOnDisable.rawValue, forKey: .rollbackOnDisable)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let desiredStateDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneDesiredState.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let rollbackOnDisableDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.RollbackOnDisable.self, forKey: .rollbackOnDisable)
        rollbackOnDisable = rollbackOnDisableDecoded
        let maintenanceSchedulesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.AutoTuneMaintenanceSchedule?].self, forKey: .maintenanceSchedules)
        var maintenanceSchedulesDecoded0:[ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]? = nil
        if let maintenanceSchedulesContainer = maintenanceSchedulesContainer {
            maintenanceSchedulesDecoded0 = [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]()
            for structure0 in maintenanceSchedulesContainer {
                if let structure0 = structure0 {
                    maintenanceSchedulesDecoded0?.append(structure0)
                }
            }
        }
        maintenanceSchedules = maintenanceSchedulesDecoded0
    }
}

extension ElasticsearchClientTypes.AutoTuneOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoTuneOptions(desiredState: \(Swift.String(describing: desiredState)), maintenanceSchedules: \(Swift.String(describing: maintenanceSchedules)), rollbackOnDisable: \(Swift.String(describing: rollbackOnDisable)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies the Auto-Tune options: the Auto-Tune desired state for the domain, rollback state when disabling Auto-Tune options and list of maintenance schedules.
    public struct AutoTuneOptions: Swift.Equatable {
        /// Specifies the Auto-Tune desired state. Valid values are ENABLED, DISABLED.
        public let desiredState: ElasticsearchClientTypes.AutoTuneDesiredState?
        /// Specifies list of maitenance schedules. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
        public let maintenanceSchedules: [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]?
        /// Specifies the rollback state while disabling Auto-Tune for the domain. Valid values are NO_ROLLBACK, DEFAULT_ROLLBACK.
        public let rollbackOnDisable: ElasticsearchClientTypes.RollbackOnDisable?

        public init (
            desiredState: ElasticsearchClientTypes.AutoTuneDesiredState? = nil,
            maintenanceSchedules: [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]? = nil,
            rollbackOnDisable: ElasticsearchClientTypes.RollbackOnDisable? = nil
        )
        {
            self.desiredState = desiredState
            self.maintenanceSchedules = maintenanceSchedules
            self.rollbackOnDisable = rollbackOnDisable
        }
    }

}

extension ElasticsearchClientTypes.AutoTuneOptionsInput: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredState = "DesiredState"
        case maintenanceSchedules = "MaintenanceSchedules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredState = desiredState {
            try encodeContainer.encode(desiredState.rawValue, forKey: .desiredState)
        }
        if let maintenanceSchedules = maintenanceSchedules {
            var maintenanceSchedulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .maintenanceSchedules)
            for autotunemaintenanceschedulelist0 in maintenanceSchedules {
                try maintenanceSchedulesContainer.encode(autotunemaintenanceschedulelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let desiredStateDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneDesiredState.self, forKey: .desiredState)
        desiredState = desiredStateDecoded
        let maintenanceSchedulesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.AutoTuneMaintenanceSchedule?].self, forKey: .maintenanceSchedules)
        var maintenanceSchedulesDecoded0:[ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]? = nil
        if let maintenanceSchedulesContainer = maintenanceSchedulesContainer {
            maintenanceSchedulesDecoded0 = [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]()
            for structure0 in maintenanceSchedulesContainer {
                if let structure0 = structure0 {
                    maintenanceSchedulesDecoded0?.append(structure0)
                }
            }
        }
        maintenanceSchedules = maintenanceSchedulesDecoded0
    }
}

extension ElasticsearchClientTypes.AutoTuneOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoTuneOptionsInput(desiredState: \(Swift.String(describing: desiredState)), maintenanceSchedules: \(Swift.String(describing: maintenanceSchedules)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies the Auto-Tune options: the Auto-Tune desired state for the domain and list of maintenance schedules.
    public struct AutoTuneOptionsInput: Swift.Equatable {
        /// Specifies the Auto-Tune desired state. Valid values are ENABLED, DISABLED.
        public let desiredState: ElasticsearchClientTypes.AutoTuneDesiredState?
        /// Specifies list of maitenance schedules. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
        public let maintenanceSchedules: [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]?

        public init (
            desiredState: ElasticsearchClientTypes.AutoTuneDesiredState? = nil,
            maintenanceSchedules: [ElasticsearchClientTypes.AutoTuneMaintenanceSchedule]? = nil
        )
        {
            self.desiredState = desiredState
            self.maintenanceSchedules = maintenanceSchedules
        }
    }

}

extension ElasticsearchClientTypes.AutoTuneOptionsOutput: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorMessage = "ErrorMessage"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneState.self, forKey: .state)
        state = stateDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension ElasticsearchClientTypes.AutoTuneOptionsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoTuneOptionsOutput(errorMessage: \(Swift.String(describing: errorMessage)), state: \(Swift.String(describing: state)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies the Auto-Tune options: the Auto-Tune desired state for the domain and list of maintenance schedules.
    public struct AutoTuneOptionsOutput: Swift.Equatable {
        /// Specifies the error message while enabling or disabling the Auto-Tune.
        public let errorMessage: Swift.String?
        /// Specifies the AutoTuneState for the Elasticsearch domain.
        public let state: ElasticsearchClientTypes.AutoTuneState?

        public init (
            errorMessage: Swift.String? = nil,
            state: ElasticsearchClientTypes.AutoTuneState? = nil
        )
        {
            self.errorMessage = errorMessage
            self.state = state
        }
    }

}

extension ElasticsearchClientTypes.AutoTuneOptionsStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes.AutoTuneOptionsStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoTuneOptionsStatus(options: \(Swift.String(describing: options)), status: \(Swift.String(describing: status)))"}
}

extension ElasticsearchClientTypes {
    ///  Specifies the status of Auto-Tune options for the specified Elasticsearch domain.
    public struct AutoTuneOptionsStatus: Swift.Equatable {
        ///  Specifies Auto-Tune options for the specified Elasticsearch domain.
        public let options: ElasticsearchClientTypes.AutoTuneOptions?
        ///  Specifies Status of the Auto-Tune options for the specified Elasticsearch domain.
        public let status: ElasticsearchClientTypes.AutoTuneStatus?

        public init (
            options: ElasticsearchClientTypes.AutoTuneOptions? = nil,
            status: ElasticsearchClientTypes.AutoTuneStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the Auto-Tune state for the Elasticsearch domain. For valid states see the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide.
    public enum AutoTuneState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case disabledAndRollbackComplete
        case disabledAndRollbackError
        case disabledAndRollbackInProgress
        case disabledAndRollbackScheduled
        case disableInProgress
        case enabled
        case enableInProgress
        case error
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoTuneState] {
            return [
                .disabled,
                .disabledAndRollbackComplete,
                .disabledAndRollbackError,
                .disabledAndRollbackInProgress,
                .disabledAndRollbackScheduled,
                .disableInProgress,
                .enabled,
                .enableInProgress,
                .error,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabledAndRollbackComplete: return "DISABLED_AND_ROLLBACK_COMPLETE"
            case .disabledAndRollbackError: return "DISABLED_AND_ROLLBACK_ERROR"
            case .disabledAndRollbackInProgress: return "DISABLED_AND_ROLLBACK_IN_PROGRESS"
            case .disabledAndRollbackScheduled: return "DISABLED_AND_ROLLBACK_SCHEDULED"
            case .disableInProgress: return "DISABLE_IN_PROGRESS"
            case .enabled: return "ENABLED"
            case .enableInProgress: return "ENABLE_IN_PROGRESS"
            case .error: return "ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoTuneState(rawValue: rawValue) ?? AutoTuneState.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.AutoTuneStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case errorMessage = "ErrorMessage"
        case pendingDeletion = "PendingDeletion"
        case state = "State"
        case updateDate = "UpdateDate"
        case updateVersion = "UpdateVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let pendingDeletion = pendingDeletion {
            try encodeContainer.encode(pendingDeletion, forKey: .pendingDeletion)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let updateDate = updateDate {
            try encodeContainer.encode(updateDate.timeIntervalSince1970, forKey: .updateDate)
        }
        if updateVersion != 0 {
            try encodeContainer.encode(updateVersion, forKey: .updateVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let updateDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updateDate)
        updateDate = updateDateDecoded
        let updateVersionDecoded = try containerValues.decode(Swift.Int.self, forKey: .updateVersion)
        updateVersion = updateVersionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneState.self, forKey: .state)
        state = stateDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let pendingDeletionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .pendingDeletion)
        pendingDeletion = pendingDeletionDecoded
    }
}

extension ElasticsearchClientTypes.AutoTuneStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoTuneStatus(creationDate: \(Swift.String(describing: creationDate)), errorMessage: \(Swift.String(describing: errorMessage)), pendingDeletion: \(Swift.String(describing: pendingDeletion)), state: \(Swift.String(describing: state)), updateDate: \(Swift.String(describing: updateDate)), updateVersion: \(Swift.String(describing: updateVersion)))"}
}

extension ElasticsearchClientTypes {
    /// Provides the current status of the Auto-Tune options.
    public struct AutoTuneStatus: Swift.Equatable {
        /// Timestamp which tells Auto-Tune options creation date .
        /// This member is required.
        public let creationDate: ClientRuntime.Date?
        /// Specifies the error message while enabling or disabling the Auto-Tune options.
        public let errorMessage: Swift.String?
        /// Indicates whether the Elasticsearch domain is being deleted.
        public let pendingDeletion: Swift.Bool?
        /// Specifies the AutoTuneState for the Elasticsearch domain.
        /// This member is required.
        public let state: ElasticsearchClientTypes.AutoTuneState?
        /// Timestamp which tells Auto-Tune options last updated time.
        /// This member is required.
        public let updateDate: ClientRuntime.Date?
        /// Specifies the Auto-Tune options latest version.
        public let updateVersion: Swift.Int

        public init (
            creationDate: ClientRuntime.Date? = nil,
            errorMessage: Swift.String? = nil,
            pendingDeletion: Swift.Bool? = nil,
            state: ElasticsearchClientTypes.AutoTuneState? = nil,
            updateDate: ClientRuntime.Date? = nil,
            updateVersion: Swift.Int = 0
        )
        {
            self.creationDate = creationDate
            self.errorMessage = errorMessage
            self.pendingDeletion = pendingDeletion
            self.state = state
            self.updateDate = updateDate
            self.updateVersion = updateVersion
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies Auto-Tune type. Valid value is SCHEDULED_ACTION.
    public enum AutoTuneType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case scheduledAction
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoTuneType] {
            return [
                .scheduledAction,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .scheduledAction: return "SCHEDULED_ACTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoTuneType(rawValue: rawValue) ?? AutoTuneType.sdkUnknown(rawValue)
        }
    }
}

extension BaseException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BaseException(message: \(Swift.String(describing: message)))"}
}

extension BaseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BaseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occurred while processing the request.
public struct BaseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BaseExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension BaseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct CancelElasticsearchServiceSoftwareUpdateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelElasticsearchServiceSoftwareUpdateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelElasticsearchServiceSoftwareUpdateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelElasticsearchServiceSoftwareUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelElasticsearchServiceSoftwareUpdateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelElasticsearchServiceSoftwareUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelElasticsearchServiceSoftwareUpdateOutputError>
}

extension CancelElasticsearchServiceSoftwareUpdateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelElasticsearchServiceSoftwareUpdateInput(domainName: \(Swift.String(describing: domainName)))"}
}

extension CancelElasticsearchServiceSoftwareUpdateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

public struct CancelElasticsearchServiceSoftwareUpdateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelElasticsearchServiceSoftwareUpdateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelElasticsearchServiceSoftwareUpdateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelElasticsearchServiceSoftwareUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelElasticsearchServiceSoftwareUpdateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelElasticsearchServiceSoftwareUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelElasticsearchServiceSoftwareUpdateOutputError>
}

public struct CancelElasticsearchServiceSoftwareUpdateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelElasticsearchServiceSoftwareUpdateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelElasticsearchServiceSoftwareUpdateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelElasticsearchServiceSoftwareUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelElasticsearchServiceSoftwareUpdateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelElasticsearchServiceSoftwareUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelElasticsearchServiceSoftwareUpdateOutputError>
}

/// Container for the parameters to the CancelElasticsearchServiceSoftwareUpdate operation. Specifies the name of the Elasticsearch domain that you wish to cancel a service software update on.
public struct CancelElasticsearchServiceSoftwareUpdateInput: Swift.Equatable {
    /// The name of the domain that you want to stop the latest service software update on.
    /// This member is required.
    public let domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct CancelElasticsearchServiceSoftwareUpdateInputBody: Swift.Equatable {
    public let domainName: Swift.String?
}

extension CancelElasticsearchServiceSoftwareUpdateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
    }
}

extension CancelElasticsearchServiceSoftwareUpdateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelElasticsearchServiceSoftwareUpdateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelElasticsearchServiceSoftwareUpdateOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelElasticsearchServiceSoftwareUpdateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelElasticsearchServiceSoftwareUpdateOutputResponse(serviceSoftwareOptions: \(Swift.String(describing: serviceSoftwareOptions)))"}
}

extension CancelElasticsearchServiceSoftwareUpdateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CancelElasticsearchServiceSoftwareUpdateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.serviceSoftwareOptions = output.serviceSoftwareOptions
        } else {
            self.serviceSoftwareOptions = nil
        }
    }
}

/// The result of a CancelElasticsearchServiceSoftwareUpdate operation. Contains the status of the update.
public struct CancelElasticsearchServiceSoftwareUpdateOutputResponse: Swift.Equatable {
    /// The current status of the Elasticsearch service software update.
    public let serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions?

    public init (
        serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions? = nil
    )
    {
        self.serviceSoftwareOptions = serviceSoftwareOptions
    }
}

struct CancelElasticsearchServiceSoftwareUpdateOutputResponseBody: Swift.Equatable {
    public let serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions?
}

extension CancelElasticsearchServiceSoftwareUpdateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceSoftwareOptions = "ServiceSoftwareOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceSoftwareOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ServiceSoftwareOptions.self, forKey: .serviceSoftwareOptions)
        serviceSoftwareOptions = serviceSoftwareOptionsDecoded
    }
}

extension ElasticsearchClientTypes.CognitoOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case identityPoolId = "IdentityPoolId"
        case roleArn = "RoleArn"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let identityPoolId = identityPoolId {
            try encodeContainer.encode(identityPoolId, forKey: .identityPoolId)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let userPoolId = userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let identityPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityPoolId)
        identityPoolId = identityPoolIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension ElasticsearchClientTypes.CognitoOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CognitoOptions(enabled: \(Swift.String(describing: enabled)), identityPoolId: \(Swift.String(describing: identityPoolId)), roleArn: \(Swift.String(describing: roleArn)), userPoolId: \(Swift.String(describing: userPoolId)))"}
}

extension ElasticsearchClientTypes {
    /// Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html" target="_blank">Amazon Cognito Authentication for Kibana.
    public struct CognitoOptions: Swift.Equatable {
        /// Specifies the option to enable Cognito for Kibana authentication.
        public let enabled: Swift.Bool?
        /// Specifies the Cognito identity pool ID for Kibana authentication.
        public let identityPoolId: Swift.String?
        /// Specifies the role ARN that provides Elasticsearch permissions for accessing Cognito resources.
        public let roleArn: Swift.String?
        /// Specifies the Cognito user pool ID for Kibana authentication.
        public let userPoolId: Swift.String?

        public init (
            enabled: Swift.Bool? = nil,
            identityPoolId: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            userPoolId: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.identityPoolId = identityPoolId
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }
    }

}

extension ElasticsearchClientTypes.CognitoOptionsStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.CognitoOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes.CognitoOptionsStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CognitoOptionsStatus(options: \(Swift.String(describing: options)), status: \(Swift.String(describing: status)))"}
}

extension ElasticsearchClientTypes {
    /// Status of the Cognito options for the specified Elasticsearch domain.
    public struct CognitoOptionsStatus: Swift.Equatable {
        /// Specifies the Cognito options for the specified Elasticsearch domain.
        /// This member is required.
        public let options: ElasticsearchClientTypes.CognitoOptions?
        /// Specifies the status of the Cognito options for the specified Elasticsearch domain.
        /// This member is required.
        public let status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.CognitoOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes.ColdStorageOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension ElasticsearchClientTypes.ColdStorageOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ColdStorageOptions(enabled: \(Swift.String(describing: enabled)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies settings for cold storage.
    public struct ColdStorageOptions: Swift.Equatable {
        /// True to enable cold storage for an Elasticsearch domain.
        /// This member is required.
        public let enabled: Swift.Bool?

        public init (
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }

}

extension ElasticsearchClientTypes.CompatibleVersionsMap: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceVersion = "SourceVersion"
        case targetVersions = "TargetVersions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceVersion = sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
        if let targetVersions = targetVersions {
            var targetVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetVersions)
            for elasticsearchversionlist0 in targetVersions {
                try targetVersionsContainer.encode(elasticsearchversionlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
        let targetVersionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetVersions)
        var targetVersionsDecoded0:[Swift.String]? = nil
        if let targetVersionsContainer = targetVersionsContainer {
            targetVersionsDecoded0 = [Swift.String]()
            for string0 in targetVersionsContainer {
                if let string0 = string0 {
                    targetVersionsDecoded0?.append(string0)
                }
            }
        }
        targetVersions = targetVersionsDecoded0
    }
}

extension ElasticsearchClientTypes.CompatibleVersionsMap: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CompatibleVersionsMap(sourceVersion: \(Swift.String(describing: sourceVersion)), targetVersions: \(Swift.String(describing: targetVersions)))"}
}

extension ElasticsearchClientTypes {
    ///
    ///       A map from an
    ///
    ///         ElasticsearchVersion
    ///
    ///       to a list of compatible
    ///
    ///         ElasticsearchVersion
    ///
    ///       s to which the domain can be upgraded.
    ///
    public struct CompatibleVersionsMap: Swift.Equatable {
        /// The current version of Elasticsearch on which a domain is.
        public let sourceVersion: Swift.String?
        /// List of supported elastic search versions.
        ///
        public let targetVersions: [Swift.String]?

        public init (
            sourceVersion: Swift.String? = nil,
            targetVersions: [Swift.String]? = nil
        )
        {
            self.sourceVersion = sourceVersion
            self.targetVersions = targetVersions
        }
    }

}

extension ConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConflictException(message: \(Swift.String(describing: message)))"}
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occurred because the client attempts to remove a resource that is currently in use. Returns HTTP status code 409.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct CreateElasticsearchDomainInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateElasticsearchDomainInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateElasticsearchDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateElasticsearchDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateElasticsearchDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateElasticsearchDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateElasticsearchDomainOutputError>
}

extension CreateElasticsearchDomainInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateElasticsearchDomainInput(accessPolicies: \(Swift.String(describing: accessPolicies)), advancedOptions: \(Swift.String(describing: advancedOptions)), advancedSecurityOptions: \(Swift.String(describing: advancedSecurityOptions)), autoTuneOptions: \(Swift.String(describing: autoTuneOptions)), cognitoOptions: \(Swift.String(describing: cognitoOptions)), domainEndpointOptions: \(Swift.String(describing: domainEndpointOptions)), domainName: \(Swift.String(describing: domainName)), eBSOptions: \(Swift.String(describing: eBSOptions)), elasticsearchClusterConfig: \(Swift.String(describing: elasticsearchClusterConfig)), elasticsearchVersion: \(Swift.String(describing: elasticsearchVersion)), encryptionAtRestOptions: \(Swift.String(describing: encryptionAtRestOptions)), logPublishingOptions: \(Swift.String(describing: logPublishingOptions)), nodeToNodeEncryptionOptions: \(Swift.String(describing: nodeToNodeEncryptionOptions)), snapshotOptions: \(Swift.String(describing: snapshotOptions)), tagList: \(Swift.String(describing: tagList)), vPCOptions: \(Swift.String(describing: vPCOptions)))"}
}

extension CreateElasticsearchDomainInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case domainName = "DomainName"
        case eBSOptions = "EBSOptions"
        case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
        case elasticsearchVersion = "ElasticsearchVersion"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case tagList = "TagList"
        case vPCOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicies = accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = advancedOptions {
            var advancedOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .advancedOptions)
            for (dictKey0, advancedoptions0) in advancedOptions {
                try advancedOptionsContainer.encode(advancedoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let advancedSecurityOptions = advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let cognitoOptions = cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let domainEndpointOptions = domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let eBSOptions = eBSOptions {
            try encodeContainer.encode(eBSOptions, forKey: .eBSOptions)
        }
        if let elasticsearchClusterConfig = elasticsearchClusterConfig {
            try encodeContainer.encode(elasticsearchClusterConfig, forKey: .elasticsearchClusterConfig)
        }
        if let elasticsearchVersion = elasticsearchVersion {
            try encodeContainer.encode(elasticsearchVersion, forKey: .elasticsearchVersion)
        }
        if let encryptionAtRestOptions = encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let logPublishingOptions = logPublishingOptions {
            var logPublishingOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .logPublishingOptions)
            for (dictKey0, logpublishingoptions0) in logPublishingOptions {
                try logPublishingOptionsContainer.encode(logpublishingoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let snapshotOptions = snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
        if let vPCOptions = vPCOptions {
            try encodeContainer.encode(vPCOptions, forKey: .vPCOptions)
        }
    }
}

public struct CreateElasticsearchDomainInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateElasticsearchDomainInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateElasticsearchDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateElasticsearchDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateElasticsearchDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateElasticsearchDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateElasticsearchDomainOutputError>
}

public struct CreateElasticsearchDomainInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateElasticsearchDomainInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateElasticsearchDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateElasticsearchDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateElasticsearchDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateElasticsearchDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateElasticsearchDomainOutputError>
}

public struct CreateElasticsearchDomainInput: Swift.Equatable {
    ///  IAM access policy as a JSON-formatted string.
    public let accessPolicies: Swift.String?
    ///  Option to allow references to indices in an HTTP request body.  Must be false when configuring access to individual sub-resources.  By default, the value is true.
    ///           See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options" target="_blank">Configuration Advanced Options for more information.
    public let advancedOptions: [Swift.String:Swift.String]?
    /// Specifies advanced security options.
    public let advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput?
    /// Specifies Auto-Tune options.
    public let autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsInput?
    /// Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html" target="_blank">Amazon Cognito Authentication for Kibana.
    public let cognitoOptions: ElasticsearchClientTypes.CognitoOptions?
    /// Options to specify configuration that will be applied to the domain endpoint.
    public let domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions?
    /// The name of the Elasticsearch domain that you are creating. Domain names are unique across the domains owned by an account within an AWS region. Domain names must start with a lowercase letter and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    /// This member is required.
    public let domainName: Swift.String?
    /// Options to enable, disable and specify the type and size of EBS storage volumes.
    public let eBSOptions: ElasticsearchClientTypes.EBSOptions?
    /// Configuration options for an Elasticsearch domain. Specifies the instance type and number of instances in the domain cluster.
    public let elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig?
    /// String of format X.Y to specify version for the Elasticsearch domain eg. "1.5" or "2.3". For more information,
    ///           see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomains" target="_blank">Creating Elasticsearch Domains in the Amazon Elasticsearch Service Developer Guide.
    public let elasticsearchVersion: Swift.String?
    /// Specifies the Encryption At Rest Options.
    public let encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions?
    /// Map of LogType and LogPublishingOption, each containing options to publish a given type of Elasticsearch log.
    public let logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]?
    /// Specifies the NodeToNodeEncryptionOptions.
    public let nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
    /// Option to set time, in UTC format, of the daily automated snapshot. Default value is 0 hours.
    public let snapshotOptions: ElasticsearchClientTypes.SnapshotOptions?
    /// A list of Tag added during domain creation.
    public let tagList: [ElasticsearchClientTypes.Tag]?
    /// Options to specify the subnets and security groups for VPC endpoint. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-creating-vpc" target="_blank">Creating a VPC in VPC Endpoints for Amazon Elasticsearch Service Domains
    public let vPCOptions: ElasticsearchClientTypes.VPCOptions?

    public init (
        accessPolicies: Swift.String? = nil,
        advancedOptions: [Swift.String:Swift.String]? = nil,
        advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput? = nil,
        autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsInput? = nil,
        cognitoOptions: ElasticsearchClientTypes.CognitoOptions? = nil,
        domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions? = nil,
        domainName: Swift.String? = nil,
        eBSOptions: ElasticsearchClientTypes.EBSOptions? = nil,
        elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig? = nil,
        elasticsearchVersion: Swift.String? = nil,
        encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions? = nil,
        logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil,
        nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions? = nil,
        snapshotOptions: ElasticsearchClientTypes.SnapshotOptions? = nil,
        tagList: [ElasticsearchClientTypes.Tag]? = nil,
        vPCOptions: ElasticsearchClientTypes.VPCOptions? = nil
    )
    {
        self.accessPolicies = accessPolicies
        self.advancedOptions = advancedOptions
        self.advancedSecurityOptions = advancedSecurityOptions
        self.autoTuneOptions = autoTuneOptions
        self.cognitoOptions = cognitoOptions
        self.domainEndpointOptions = domainEndpointOptions
        self.domainName = domainName
        self.eBSOptions = eBSOptions
        self.elasticsearchClusterConfig = elasticsearchClusterConfig
        self.elasticsearchVersion = elasticsearchVersion
        self.encryptionAtRestOptions = encryptionAtRestOptions
        self.logPublishingOptions = logPublishingOptions
        self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
        self.snapshotOptions = snapshotOptions
        self.tagList = tagList
        self.vPCOptions = vPCOptions
    }
}

struct CreateElasticsearchDomainInputBody: Swift.Equatable {
    public let domainName: Swift.String?
    public let elasticsearchVersion: Swift.String?
    public let elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig?
    public let eBSOptions: ElasticsearchClientTypes.EBSOptions?
    public let accessPolicies: Swift.String?
    public let snapshotOptions: ElasticsearchClientTypes.SnapshotOptions?
    public let vPCOptions: ElasticsearchClientTypes.VPCOptions?
    public let cognitoOptions: ElasticsearchClientTypes.CognitoOptions?
    public let encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions?
    public let nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
    public let advancedOptions: [Swift.String:Swift.String]?
    public let logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]?
    public let domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions?
    public let advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput?
    public let autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsInput?
    public let tagList: [ElasticsearchClientTypes.Tag]?
}

extension CreateElasticsearchDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case domainName = "DomainName"
        case eBSOptions = "EBSOptions"
        case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
        case elasticsearchVersion = "ElasticsearchVersion"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case tagList = "TagList"
        case vPCOptions = "VPCOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let elasticsearchVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticsearchVersion)
        elasticsearchVersion = elasticsearchVersionDecoded
        let elasticsearchClusterConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchClusterConfig.self, forKey: .elasticsearchClusterConfig)
        elasticsearchClusterConfig = elasticsearchClusterConfigDecoded
        let eBSOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EBSOptions.self, forKey: .eBSOptions)
        eBSOptions = eBSOptionsDecoded
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SnapshotOptions.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vPCOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VPCOptions.self, forKey: .vPCOptions)
        vPCOptions = vPCOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.CognitoOptions.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EncryptionAtRestOptions.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.NodeToNodeEncryptionOptions.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let advancedOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .advancedOptions)
        var advancedOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let advancedOptionsContainer = advancedOptionsContainer {
            advancedOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in advancedOptionsContainer {
                if let string0 = string0 {
                    advancedOptionsDecoded0?[key0] = string0
                }
            }
        }
        advancedOptions = advancedOptionsDecoded0
        let logPublishingOptionsContainer = try containerValues.decodeIfPresent([Swift.String: ElasticsearchClientTypes.LogPublishingOption?].self, forKey: .logPublishingOptions)
        var logPublishingOptionsDecoded0: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil
        if let logPublishingOptionsContainer = logPublishingOptionsContainer {
            logPublishingOptionsDecoded0 = [Swift.String:ElasticsearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in logPublishingOptionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    logPublishingOptionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        logPublishingOptions = logPublishingOptionsDecoded0
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainEndpointOptions.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AdvancedSecurityOptionsInput.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneOptionsInput.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
        let tagListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[ElasticsearchClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [ElasticsearchClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
    }
}

extension CreateElasticsearchDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateElasticsearchDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTypeException" : self = .invalidTypeException(try InvalidTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateElasticsearchDomainOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case invalidTypeException(InvalidTypeException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateElasticsearchDomainOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateElasticsearchDomainOutputResponse(domainStatus: \(Swift.String(describing: domainStatus)))"}
}

extension CreateElasticsearchDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateElasticsearchDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainStatus = output.domainStatus
        } else {
            self.domainStatus = nil
        }
    }
}

/// The result of a CreateElasticsearchDomain operation. Contains the status of the newly created Elasticsearch domain.
public struct CreateElasticsearchDomainOutputResponse: Swift.Equatable {
    /// The status of the newly created Elasticsearch domain.
    public let domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?

    public init (
        domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus? = nil
    )
    {
        self.domainStatus = domainStatus
    }
}

struct CreateElasticsearchDomainOutputResponseBody: Swift.Equatable {
    public let domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?
}

extension CreateElasticsearchDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainStatus = "DomainStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchDomainStatus.self, forKey: .domainStatus)
        domainStatus = domainStatusDecoded
    }
}

public struct CreateOutboundCrossClusterSearchConnectionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateOutboundCrossClusterSearchConnectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateOutboundCrossClusterSearchConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateOutboundCrossClusterSearchConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateOutboundCrossClusterSearchConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateOutboundCrossClusterSearchConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateOutboundCrossClusterSearchConnectionOutputError>
}

extension CreateOutboundCrossClusterSearchConnectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateOutboundCrossClusterSearchConnectionInput(connectionAlias: \(Swift.String(describing: connectionAlias)), destinationDomainInfo: \(Swift.String(describing: destinationDomainInfo)), sourceDomainInfo: \(Swift.String(describing: sourceDomainInfo)))"}
}

extension CreateOutboundCrossClusterSearchConnectionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionAlias = "ConnectionAlias"
        case destinationDomainInfo = "DestinationDomainInfo"
        case sourceDomainInfo = "SourceDomainInfo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionAlias = connectionAlias {
            try encodeContainer.encode(connectionAlias, forKey: .connectionAlias)
        }
        if let destinationDomainInfo = destinationDomainInfo {
            try encodeContainer.encode(destinationDomainInfo, forKey: .destinationDomainInfo)
        }
        if let sourceDomainInfo = sourceDomainInfo {
            try encodeContainer.encode(sourceDomainInfo, forKey: .sourceDomainInfo)
        }
    }
}

public struct CreateOutboundCrossClusterSearchConnectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateOutboundCrossClusterSearchConnectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateOutboundCrossClusterSearchConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateOutboundCrossClusterSearchConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateOutboundCrossClusterSearchConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateOutboundCrossClusterSearchConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateOutboundCrossClusterSearchConnectionOutputError>
}

public struct CreateOutboundCrossClusterSearchConnectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateOutboundCrossClusterSearchConnectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateOutboundCrossClusterSearchConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateOutboundCrossClusterSearchConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateOutboundCrossClusterSearchConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateOutboundCrossClusterSearchConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateOutboundCrossClusterSearchConnectionOutputError>
}

/// Container for the parameters to the CreateOutboundCrossClusterSearchConnection operation.
public struct CreateOutboundCrossClusterSearchConnectionInput: Swift.Equatable {
    /// Specifies the connection alias that will be used by the customer for this connection.
    /// This member is required.
    public let connectionAlias: Swift.String?
    /// Specifies the DomainInformation for the destination Elasticsearch domain.
    /// This member is required.
    public let destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
    /// Specifies the DomainInformation for the source Elasticsearch domain.
    /// This member is required.
    public let sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?

    public init (
        connectionAlias: Swift.String? = nil,
        destinationDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil,
        sourceDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil
    )
    {
        self.connectionAlias = connectionAlias
        self.destinationDomainInfo = destinationDomainInfo
        self.sourceDomainInfo = sourceDomainInfo
    }
}

struct CreateOutboundCrossClusterSearchConnectionInputBody: Swift.Equatable {
    public let sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?
    public let destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
    public let connectionAlias: Swift.String?
}

extension CreateOutboundCrossClusterSearchConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionAlias = "ConnectionAlias"
        case destinationDomainInfo = "DestinationDomainInfo"
        case sourceDomainInfo = "SourceDomainInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .sourceDomainInfo)
        sourceDomainInfo = sourceDomainInfoDecoded
        let destinationDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .destinationDomainInfo)
        destinationDomainInfo = destinationDomainInfoDecoded
        let connectionAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionAlias)
        connectionAlias = connectionAliasDecoded
    }
}

extension CreateOutboundCrossClusterSearchConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateOutboundCrossClusterSearchConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateOutboundCrossClusterSearchConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateOutboundCrossClusterSearchConnectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateOutboundCrossClusterSearchConnectionOutputResponse(connectionAlias: \(Swift.String(describing: connectionAlias)), connectionStatus: \(Swift.String(describing: connectionStatus)), crossClusterSearchConnectionId: \(Swift.String(describing: crossClusterSearchConnectionId)), destinationDomainInfo: \(Swift.String(describing: destinationDomainInfo)), sourceDomainInfo: \(Swift.String(describing: sourceDomainInfo)))"}
}

extension CreateOutboundCrossClusterSearchConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateOutboundCrossClusterSearchConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connectionAlias = output.connectionAlias
            self.connectionStatus = output.connectionStatus
            self.crossClusterSearchConnectionId = output.crossClusterSearchConnectionId
            self.destinationDomainInfo = output.destinationDomainInfo
            self.sourceDomainInfo = output.sourceDomainInfo
        } else {
            self.connectionAlias = nil
            self.connectionStatus = nil
            self.crossClusterSearchConnectionId = nil
            self.destinationDomainInfo = nil
            self.sourceDomainInfo = nil
        }
    }
}

/// The result of a CreateOutboundCrossClusterSearchConnection request. Contains the details of the newly created cross-cluster search connection.
public struct CreateOutboundCrossClusterSearchConnectionOutputResponse: Swift.Equatable {
    /// Specifies the connection alias provided during the create connection request.
    public let connectionAlias: Swift.String?
    /// Specifies the OutboundCrossClusterSearchConnectionStatus for the newly created connection.
    public let connectionStatus: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus?
    /// Unique id for the created outbound connection, which is used for subsequent operations on connection.
    public let crossClusterSearchConnectionId: Swift.String?
    /// Specifies the DomainInformation for the destination Elasticsearch domain.
    public let destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
    /// Specifies the DomainInformation for the source Elasticsearch domain.
    public let sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?

    public init (
        connectionAlias: Swift.String? = nil,
        connectionStatus: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus? = nil,
        crossClusterSearchConnectionId: Swift.String? = nil,
        destinationDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil,
        sourceDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil
    )
    {
        self.connectionAlias = connectionAlias
        self.connectionStatus = connectionStatus
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
        self.destinationDomainInfo = destinationDomainInfo
        self.sourceDomainInfo = sourceDomainInfo
    }
}

struct CreateOutboundCrossClusterSearchConnectionOutputResponseBody: Swift.Equatable {
    public let sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?
    public let destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
    public let connectionAlias: Swift.String?
    public let connectionStatus: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus?
    public let crossClusterSearchConnectionId: Swift.String?
}

extension CreateOutboundCrossClusterSearchConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionAlias = "ConnectionAlias"
        case connectionStatus = "ConnectionStatus"
        case crossClusterSearchConnectionId = "CrossClusterSearchConnectionId"
        case destinationDomainInfo = "DestinationDomainInfo"
        case sourceDomainInfo = "SourceDomainInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .sourceDomainInfo)
        sourceDomainInfo = sourceDomainInfoDecoded
        let destinationDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .destinationDomainInfo)
        destinationDomainInfo = destinationDomainInfoDecoded
        let connectionAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionAlias)
        connectionAlias = connectionAliasDecoded
        let connectionStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus.self, forKey: .connectionStatus)
        connectionStatus = connectionStatusDecoded
        let crossClusterSearchConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crossClusterSearchConnectionId)
        crossClusterSearchConnectionId = crossClusterSearchConnectionIdDecoded
    }
}

public struct CreatePackageInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePackageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePackageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePackageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePackageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePackageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePackageOutputError>
}

extension CreatePackageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePackageInput(packageDescription: \(Swift.String(describing: packageDescription)), packageName: \(Swift.String(describing: packageName)), packageSource: \(Swift.String(describing: packageSource)), packageType: \(Swift.String(describing: packageType)))"}
}

extension CreatePackageInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDescription = "PackageDescription"
        case packageName = "PackageName"
        case packageSource = "PackageSource"
        case packageType = "PackageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let packageDescription = packageDescription {
            try encodeContainer.encode(packageDescription, forKey: .packageDescription)
        }
        if let packageName = packageName {
            try encodeContainer.encode(packageName, forKey: .packageName)
        }
        if let packageSource = packageSource {
            try encodeContainer.encode(packageSource, forKey: .packageSource)
        }
        if let packageType = packageType {
            try encodeContainer.encode(packageType.rawValue, forKey: .packageType)
        }
    }
}

public struct CreatePackageInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePackageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePackageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePackageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePackageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePackageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePackageOutputError>
}

public struct CreatePackageInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePackageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePackageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePackageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePackageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePackageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePackageOutputError>
}

///
///       Container for request parameters to
///
///         CreatePackage
///
///       operation.
///
public struct CreatePackageInput: Swift.Equatable {
    /// Description of the package.
    public let packageDescription: Swift.String?
    /// Unique identifier for the package.
    /// This member is required.
    public let packageName: Swift.String?
    /// The customer S3 location PackageSource for importing the package.
    /// This member is required.
    public let packageSource: ElasticsearchClientTypes.PackageSource?
    /// Type of package. Currently supports only TXT-DICTIONARY.
    /// This member is required.
    public let packageType: ElasticsearchClientTypes.PackageType?

    public init (
        packageDescription: Swift.String? = nil,
        packageName: Swift.String? = nil,
        packageSource: ElasticsearchClientTypes.PackageSource? = nil,
        packageType: ElasticsearchClientTypes.PackageType? = nil
    )
    {
        self.packageDescription = packageDescription
        self.packageName = packageName
        self.packageSource = packageSource
        self.packageType = packageType
    }
}

struct CreatePackageInputBody: Swift.Equatable {
    public let packageName: Swift.String?
    public let packageType: ElasticsearchClientTypes.PackageType?
    public let packageDescription: Swift.String?
    public let packageSource: ElasticsearchClientTypes.PackageSource?
}

extension CreatePackageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDescription = "PackageDescription"
        case packageName = "PackageName"
        case packageSource = "PackageSource"
        case packageType = "PackageType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let packageTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageType.self, forKey: .packageType)
        packageType = packageTypeDecoded
        let packageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageDescription)
        packageDescription = packageDescriptionDecoded
        let packageSourceDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageSource.self, forKey: .packageSource)
        packageSource = packageSourceDecoded
    }
}

extension CreatePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTypeException" : self = .invalidTypeException(try InvalidTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case invalidTypeException(InvalidTypeException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePackageOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePackageOutputResponse(packageDetails: \(Swift.String(describing: packageDetails)))"}
}

extension CreatePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreatePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.packageDetails = output.packageDetails
        } else {
            self.packageDetails = nil
        }
    }
}

///
///       Container for response returned by
///
///         CreatePackage
///
///       operation.
///
public struct CreatePackageOutputResponse: Swift.Equatable {
    /// Information about the package PackageDetails.
    public let packageDetails: ElasticsearchClientTypes.PackageDetails?

    public init (
        packageDetails: ElasticsearchClientTypes.PackageDetails? = nil
    )
    {
        self.packageDetails = packageDetails
    }
}

struct CreatePackageOutputResponseBody: Swift.Equatable {
    public let packageDetails: ElasticsearchClientTypes.PackageDetails?
}

extension CreatePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDetails = "PackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageDetails.self, forKey: .packageDetails)
        packageDetails = packageDetailsDecoded
    }
}

extension DeleteElasticsearchDomainInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteElasticsearchDomainInput(domainName: \(Swift.String(describing: domainName)))"}
}

extension DeleteElasticsearchDomainInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteElasticsearchDomainInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteElasticsearchDomainInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteElasticsearchDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteElasticsearchDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteElasticsearchDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteElasticsearchDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteElasticsearchDomainOutputError>
}

public struct DeleteElasticsearchDomainInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteElasticsearchDomainInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteElasticsearchDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteElasticsearchDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteElasticsearchDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteElasticsearchDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteElasticsearchDomainOutputError>
}

/// Container for the parameters to the DeleteElasticsearchDomain operation. Specifies the name of the Elasticsearch domain that you want to delete.
public struct DeleteElasticsearchDomainInput: Swift.Equatable {
    /// The name of the Elasticsearch domain that you want to permanently delete.
    /// This member is required.
    public let domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct DeleteElasticsearchDomainInputBody: Swift.Equatable {
}

extension DeleteElasticsearchDomainInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteElasticsearchDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteElasticsearchDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteElasticsearchDomainOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteElasticsearchDomainOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteElasticsearchDomainOutputResponse(domainStatus: \(Swift.String(describing: domainStatus)))"}
}

extension DeleteElasticsearchDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteElasticsearchDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainStatus = output.domainStatus
        } else {
            self.domainStatus = nil
        }
    }
}

/// The result of a DeleteElasticsearchDomain request. Contains the status of the pending deletion, or no status if the domain and all of its resources have been deleted.
public struct DeleteElasticsearchDomainOutputResponse: Swift.Equatable {
    /// The status of the Elasticsearch domain being deleted.
    public let domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?

    public init (
        domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus? = nil
    )
    {
        self.domainStatus = domainStatus
    }
}

struct DeleteElasticsearchDomainOutputResponseBody: Swift.Equatable {
    public let domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?
}

extension DeleteElasticsearchDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainStatus = "DomainStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchDomainStatus.self, forKey: .domainStatus)
        domainStatus = domainStatusDecoded
    }
}

extension DeleteElasticsearchServiceRoleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteElasticsearchServiceRoleInput()"}
}

extension DeleteElasticsearchServiceRoleInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteElasticsearchServiceRoleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteElasticsearchServiceRoleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteElasticsearchServiceRoleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteElasticsearchServiceRoleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteElasticsearchServiceRoleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteElasticsearchServiceRoleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteElasticsearchServiceRoleOutputError>
}

public struct DeleteElasticsearchServiceRoleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteElasticsearchServiceRoleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteElasticsearchServiceRoleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteElasticsearchServiceRoleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteElasticsearchServiceRoleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteElasticsearchServiceRoleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteElasticsearchServiceRoleOutputError>
}

public struct DeleteElasticsearchServiceRoleInput: Swift.Equatable {

    public init() {}
}

struct DeleteElasticsearchServiceRoleInputBody: Swift.Equatable {
}

extension DeleteElasticsearchServiceRoleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteElasticsearchServiceRoleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteElasticsearchServiceRoleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteElasticsearchServiceRoleOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteElasticsearchServiceRoleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteElasticsearchServiceRoleOutputResponse()"}
}

extension DeleteElasticsearchServiceRoleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteElasticsearchServiceRoleOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteElasticsearchServiceRoleOutputResponseBody: Swift.Equatable {
}

extension DeleteElasticsearchServiceRoleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteInboundCrossClusterSearchConnectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInboundCrossClusterSearchConnectionInput(crossClusterSearchConnectionId: \(Swift.String(describing: crossClusterSearchConnectionId)))"}
}

extension DeleteInboundCrossClusterSearchConnectionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteInboundCrossClusterSearchConnectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInboundCrossClusterSearchConnectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInboundCrossClusterSearchConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInboundCrossClusterSearchConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInboundCrossClusterSearchConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInboundCrossClusterSearchConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInboundCrossClusterSearchConnectionOutputError>
}

public struct DeleteInboundCrossClusterSearchConnectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInboundCrossClusterSearchConnectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInboundCrossClusterSearchConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInboundCrossClusterSearchConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInboundCrossClusterSearchConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInboundCrossClusterSearchConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInboundCrossClusterSearchConnectionOutputError>
}

/// Container for the parameters to the DeleteInboundCrossClusterSearchConnection operation.
public struct DeleteInboundCrossClusterSearchConnectionInput: Swift.Equatable {
    /// The id of the inbound connection that you want to permanently delete.
    /// This member is required.
    public let crossClusterSearchConnectionId: Swift.String?

    public init (
        crossClusterSearchConnectionId: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
    }
}

struct DeleteInboundCrossClusterSearchConnectionInputBody: Swift.Equatable {
}

extension DeleteInboundCrossClusterSearchConnectionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteInboundCrossClusterSearchConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInboundCrossClusterSearchConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteInboundCrossClusterSearchConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInboundCrossClusterSearchConnectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInboundCrossClusterSearchConnectionOutputResponse(crossClusterSearchConnection: \(Swift.String(describing: crossClusterSearchConnection)))"}
}

extension DeleteInboundCrossClusterSearchConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteInboundCrossClusterSearchConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crossClusterSearchConnection = output.crossClusterSearchConnection
        } else {
            self.crossClusterSearchConnection = nil
        }
    }
}

/// The result of a DeleteInboundCrossClusterSearchConnection operation. Contains details of deleted inbound connection.
public struct DeleteInboundCrossClusterSearchConnectionOutputResponse: Swift.Equatable {
    /// Specifies the InboundCrossClusterSearchConnection of deleted inbound connection.
    public let crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?

    public init (
        crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection? = nil
    )
    {
        self.crossClusterSearchConnection = crossClusterSearchConnection
    }
}

struct DeleteInboundCrossClusterSearchConnectionOutputResponseBody: Swift.Equatable {
    public let crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?
}

extension DeleteInboundCrossClusterSearchConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crossClusterSearchConnection = "CrossClusterSearchConnection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crossClusterSearchConnectionDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.InboundCrossClusterSearchConnection.self, forKey: .crossClusterSearchConnection)
        crossClusterSearchConnection = crossClusterSearchConnectionDecoded
    }
}

extension DeleteOutboundCrossClusterSearchConnectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteOutboundCrossClusterSearchConnectionInput(crossClusterSearchConnectionId: \(Swift.String(describing: crossClusterSearchConnectionId)))"}
}

extension DeleteOutboundCrossClusterSearchConnectionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteOutboundCrossClusterSearchConnectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteOutboundCrossClusterSearchConnectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteOutboundCrossClusterSearchConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteOutboundCrossClusterSearchConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteOutboundCrossClusterSearchConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteOutboundCrossClusterSearchConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteOutboundCrossClusterSearchConnectionOutputError>
}

public struct DeleteOutboundCrossClusterSearchConnectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteOutboundCrossClusterSearchConnectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteOutboundCrossClusterSearchConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteOutboundCrossClusterSearchConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteOutboundCrossClusterSearchConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteOutboundCrossClusterSearchConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteOutboundCrossClusterSearchConnectionOutputError>
}

/// Container for the parameters to the DeleteOutboundCrossClusterSearchConnection operation.
public struct DeleteOutboundCrossClusterSearchConnectionInput: Swift.Equatable {
    /// The id of the outbound connection that you want to permanently delete.
    /// This member is required.
    public let crossClusterSearchConnectionId: Swift.String?

    public init (
        crossClusterSearchConnectionId: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
    }
}

struct DeleteOutboundCrossClusterSearchConnectionInputBody: Swift.Equatable {
}

extension DeleteOutboundCrossClusterSearchConnectionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteOutboundCrossClusterSearchConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteOutboundCrossClusterSearchConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteOutboundCrossClusterSearchConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteOutboundCrossClusterSearchConnectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteOutboundCrossClusterSearchConnectionOutputResponse(crossClusterSearchConnection: \(Swift.String(describing: crossClusterSearchConnection)))"}
}

extension DeleteOutboundCrossClusterSearchConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteOutboundCrossClusterSearchConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crossClusterSearchConnection = output.crossClusterSearchConnection
        } else {
            self.crossClusterSearchConnection = nil
        }
    }
}

/// The result of a DeleteOutboundCrossClusterSearchConnection operation. Contains details of deleted outbound connection.
public struct DeleteOutboundCrossClusterSearchConnectionOutputResponse: Swift.Equatable {
    /// Specifies the OutboundCrossClusterSearchConnection of deleted outbound connection.
    public let crossClusterSearchConnection: ElasticsearchClientTypes.OutboundCrossClusterSearchConnection?

    public init (
        crossClusterSearchConnection: ElasticsearchClientTypes.OutboundCrossClusterSearchConnection? = nil
    )
    {
        self.crossClusterSearchConnection = crossClusterSearchConnection
    }
}

struct DeleteOutboundCrossClusterSearchConnectionOutputResponseBody: Swift.Equatable {
    public let crossClusterSearchConnection: ElasticsearchClientTypes.OutboundCrossClusterSearchConnection?
}

extension DeleteOutboundCrossClusterSearchConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crossClusterSearchConnection = "CrossClusterSearchConnection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crossClusterSearchConnectionDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OutboundCrossClusterSearchConnection.self, forKey: .crossClusterSearchConnection)
        crossClusterSearchConnection = crossClusterSearchConnectionDecoded
    }
}

extension DeletePackageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePackageInput(packageID: \(Swift.String(describing: packageID)))"}
}

extension DeletePackageInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeletePackageInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePackageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePackageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePackageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePackageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePackageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePackageOutputError>
}

public struct DeletePackageInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePackageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePackageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePackageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePackageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePackageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePackageOutputError>
}

///
///       Container for request parameters to
///
///         DeletePackage
///
///       operation.
///
public struct DeletePackageInput: Swift.Equatable {
    /// Internal ID of the package that you want to delete. Use DescribePackages to find this value.
    /// This member is required.
    public let packageID: Swift.String?

    public init (
        packageID: Swift.String? = nil
    )
    {
        self.packageID = packageID
    }
}

struct DeletePackageInputBody: Swift.Equatable {
}

extension DeletePackageInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeletePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case conflictException(ConflictException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePackageOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePackageOutputResponse(packageDetails: \(Swift.String(describing: packageDetails)))"}
}

extension DeletePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeletePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.packageDetails = output.packageDetails
        } else {
            self.packageDetails = nil
        }
    }
}

///
///       Container for response parameters to
///
///         DeletePackage
///
///       operation.
///
public struct DeletePackageOutputResponse: Swift.Equatable {
    /// PackageDetails
    public let packageDetails: ElasticsearchClientTypes.PackageDetails?

    public init (
        packageDetails: ElasticsearchClientTypes.PackageDetails? = nil
    )
    {
        self.packageDetails = packageDetails
    }
}

struct DeletePackageOutputResponseBody: Swift.Equatable {
    public let packageDetails: ElasticsearchClientTypes.PackageDetails?
}

extension DeletePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDetails = "PackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageDetails.self, forKey: .packageDetails)
        packageDetails = packageDetailsDecoded
    }
}

extension ElasticsearchClientTypes {
    public enum DeploymentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case eligible
        case inProgress
        case notEligible
        case pendingUpdate
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentStatus] {
            return [
                .completed,
                .eligible,
                .inProgress,
                .notEligible,
                .pendingUpdate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .eligible: return "ELIGIBLE"
            case .inProgress: return "IN_PROGRESS"
            case .notEligible: return "NOT_ELIGIBLE"
            case .pendingUpdate: return "PENDING_UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeploymentStatus(rawValue: rawValue) ?? DeploymentStatus.sdkUnknown(rawValue)
        }
    }
}

public struct DescribeDomainAutoTunesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDomainAutoTunesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDomainAutoTunesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDomainAutoTunesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDomainAutoTunesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDomainAutoTunesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDomainAutoTunesOutputError>
}

extension DescribeDomainAutoTunesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDomainAutoTunesInput(domainName: \(Swift.String(describing: domainName)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeDomainAutoTunesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeDomainAutoTunesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDomainAutoTunesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDomainAutoTunesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDomainAutoTunesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDomainAutoTunesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDomainAutoTunesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDomainAutoTunesOutputError>
}

public struct DescribeDomainAutoTunesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDomainAutoTunesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDomainAutoTunesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDomainAutoTunesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDomainAutoTunesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDomainAutoTunesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDomainAutoTunesOutputError>
}

/// Container for the parameters to the DescribeDomainAutoTunes operation.
public struct DescribeDomainAutoTunesInput: Swift.Equatable {
    /// Specifies the domain name for which you want Auto-Tune action details.
    /// This member is required.
    public let domainName: Swift.String?
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public let maxResults: Swift.Int
    /// NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.
    public let nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeDomainAutoTunesInputBody: Swift.Equatable {
    public let maxResults: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeDomainAutoTunesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeDomainAutoTunesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDomainAutoTunesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDomainAutoTunesOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDomainAutoTunesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDomainAutoTunesOutputResponse(autoTunes: \(Swift.String(describing: autoTunes)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeDomainAutoTunesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDomainAutoTunesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoTunes = output.autoTunes
            self.nextToken = output.nextToken
        } else {
            self.autoTunes = nil
            self.nextToken = nil
        }
    }
}

/// The result of DescribeDomainAutoTunes request. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
public struct DescribeDomainAutoTunesOutputResponse: Swift.Equatable {
    /// Specifies the list of setting adjustments that Auto-Tune has made to the domain. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
    public let autoTunes: [ElasticsearchClientTypes.AutoTune]?
    /// Specifies an identifier to allow retrieval of paginated results.
    public let nextToken: Swift.String?

    public init (
        autoTunes: [ElasticsearchClientTypes.AutoTune]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoTunes = autoTunes
        self.nextToken = nextToken
    }
}

struct DescribeDomainAutoTunesOutputResponseBody: Swift.Equatable {
    public let autoTunes: [ElasticsearchClientTypes.AutoTune]?
    public let nextToken: Swift.String?
}

extension DescribeDomainAutoTunesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoTunes = "AutoTunes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoTunesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.AutoTune?].self, forKey: .autoTunes)
        var autoTunesDecoded0:[ElasticsearchClientTypes.AutoTune]? = nil
        if let autoTunesContainer = autoTunesContainer {
            autoTunesDecoded0 = [ElasticsearchClientTypes.AutoTune]()
            for structure0 in autoTunesContainer {
                if let structure0 = structure0 {
                    autoTunesDecoded0?.append(structure0)
                }
            }
        }
        autoTunes = autoTunesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeElasticsearchDomainConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeElasticsearchDomainConfigInput(domainName: \(Swift.String(describing: domainName)))"}
}

extension DescribeElasticsearchDomainConfigInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeElasticsearchDomainConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeElasticsearchDomainConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeElasticsearchDomainConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeElasticsearchDomainConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeElasticsearchDomainConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeElasticsearchDomainConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeElasticsearchDomainConfigOutputError>
}

public struct DescribeElasticsearchDomainConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeElasticsearchDomainConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeElasticsearchDomainConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeElasticsearchDomainConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeElasticsearchDomainConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeElasticsearchDomainConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeElasticsearchDomainConfigOutputError>
}

///  Container for the parameters to the DescribeElasticsearchDomainConfig operation. Specifies the domain name for which you want configuration information.
public struct DescribeElasticsearchDomainConfigInput: Swift.Equatable {
    /// The Elasticsearch domain that you want to get information about.
    /// This member is required.
    public let domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct DescribeElasticsearchDomainConfigInputBody: Swift.Equatable {
}

extension DescribeElasticsearchDomainConfigInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeElasticsearchDomainConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeElasticsearchDomainConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeElasticsearchDomainConfigOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeElasticsearchDomainConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeElasticsearchDomainConfigOutputResponse(domainConfig: \(Swift.String(describing: domainConfig)))"}
}

extension DescribeElasticsearchDomainConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeElasticsearchDomainConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainConfig = output.domainConfig
        } else {
            self.domainConfig = nil
        }
    }
}

/// The result of a DescribeElasticsearchDomainConfig request. Contains the configuration information of the requested domain.
public struct DescribeElasticsearchDomainConfigOutputResponse: Swift.Equatable {
    /// The configuration information of the domain requested in the DescribeElasticsearchDomainConfig request.
    /// This member is required.
    public let domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig?

    public init (
        domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig? = nil
    )
    {
        self.domainConfig = domainConfig
    }
}

struct DescribeElasticsearchDomainConfigOutputResponseBody: Swift.Equatable {
    public let domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig?
}

extension DescribeElasticsearchDomainConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainConfig = "DomainConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchDomainConfig.self, forKey: .domainConfig)
        domainConfig = domainConfigDecoded
    }
}

extension DescribeElasticsearchDomainInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeElasticsearchDomainInput(domainName: \(Swift.String(describing: domainName)))"}
}

extension DescribeElasticsearchDomainInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeElasticsearchDomainInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeElasticsearchDomainInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeElasticsearchDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeElasticsearchDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeElasticsearchDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeElasticsearchDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeElasticsearchDomainOutputError>
}

public struct DescribeElasticsearchDomainInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeElasticsearchDomainInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeElasticsearchDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeElasticsearchDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeElasticsearchDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeElasticsearchDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeElasticsearchDomainOutputError>
}

/// Container for the parameters to the DescribeElasticsearchDomain operation.
public struct DescribeElasticsearchDomainInput: Swift.Equatable {
    /// The name of the Elasticsearch domain for which you want information.
    /// This member is required.
    public let domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct DescribeElasticsearchDomainInputBody: Swift.Equatable {
}

extension DescribeElasticsearchDomainInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeElasticsearchDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeElasticsearchDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeElasticsearchDomainOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeElasticsearchDomainOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeElasticsearchDomainOutputResponse(domainStatus: \(Swift.String(describing: domainStatus)))"}
}

extension DescribeElasticsearchDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeElasticsearchDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainStatus = output.domainStatus
        } else {
            self.domainStatus = nil
        }
    }
}

/// The result of a DescribeElasticsearchDomain request. Contains the status of the domain specified in the request.
public struct DescribeElasticsearchDomainOutputResponse: Swift.Equatable {
    /// The current status of the Elasticsearch domain.
    /// This member is required.
    public let domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?

    public init (
        domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus? = nil
    )
    {
        self.domainStatus = domainStatus
    }
}

struct DescribeElasticsearchDomainOutputResponseBody: Swift.Equatable {
    public let domainStatus: ElasticsearchClientTypes.ElasticsearchDomainStatus?
}

extension DescribeElasticsearchDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainStatus = "DomainStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchDomainStatus.self, forKey: .domainStatus)
        domainStatus = domainStatusDecoded
    }
}

public struct DescribeElasticsearchDomainsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeElasticsearchDomainsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeElasticsearchDomainsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeElasticsearchDomainsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeElasticsearchDomainsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeElasticsearchDomainsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeElasticsearchDomainsOutputError>
}

extension DescribeElasticsearchDomainsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeElasticsearchDomainsInput(domainNames: \(Swift.String(describing: domainNames)))"}
}

extension DescribeElasticsearchDomainsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainNames = "DomainNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainNames = domainNames {
            var domainNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainNames)
            for domainnamelist0 in domainNames {
                try domainNamesContainer.encode(domainnamelist0)
            }
        }
    }
}

public struct DescribeElasticsearchDomainsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeElasticsearchDomainsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeElasticsearchDomainsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeElasticsearchDomainsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeElasticsearchDomainsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeElasticsearchDomainsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeElasticsearchDomainsOutputError>
}

public struct DescribeElasticsearchDomainsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeElasticsearchDomainsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeElasticsearchDomainsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeElasticsearchDomainsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeElasticsearchDomainsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeElasticsearchDomainsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeElasticsearchDomainsOutputError>
}

/// Container for the parameters to the DescribeElasticsearchDomains operation. By default, the API returns the status of all Elasticsearch domains.
public struct DescribeElasticsearchDomainsInput: Swift.Equatable {
    /// The Elasticsearch domains for which you want information.
    /// This member is required.
    public let domainNames: [Swift.String]?

    public init (
        domainNames: [Swift.String]? = nil
    )
    {
        self.domainNames = domainNames
    }
}

struct DescribeElasticsearchDomainsInputBody: Swift.Equatable {
    public let domainNames: [Swift.String]?
}

extension DescribeElasticsearchDomainsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainNames = "DomainNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .domainNames)
        var domainNamesDecoded0:[Swift.String]? = nil
        if let domainNamesContainer = domainNamesContainer {
            domainNamesDecoded0 = [Swift.String]()
            for string0 in domainNamesContainer {
                if let string0 = string0 {
                    domainNamesDecoded0?.append(string0)
                }
            }
        }
        domainNames = domainNamesDecoded0
    }
}

extension DescribeElasticsearchDomainsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeElasticsearchDomainsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeElasticsearchDomainsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeElasticsearchDomainsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeElasticsearchDomainsOutputResponse(domainStatusList: \(Swift.String(describing: domainStatusList)))"}
}

extension DescribeElasticsearchDomainsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeElasticsearchDomainsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainStatusList = output.domainStatusList
        } else {
            self.domainStatusList = nil
        }
    }
}

/// The result of a DescribeElasticsearchDomains request. Contains the status of the specified domains or all domains owned by the account.
public struct DescribeElasticsearchDomainsOutputResponse: Swift.Equatable {
    /// The status of the domains requested in the DescribeElasticsearchDomains request.
    /// This member is required.
    public let domainStatusList: [ElasticsearchClientTypes.ElasticsearchDomainStatus]?

    public init (
        domainStatusList: [ElasticsearchClientTypes.ElasticsearchDomainStatus]? = nil
    )
    {
        self.domainStatusList = domainStatusList
    }
}

struct DescribeElasticsearchDomainsOutputResponseBody: Swift.Equatable {
    public let domainStatusList: [ElasticsearchClientTypes.ElasticsearchDomainStatus]?
}

extension DescribeElasticsearchDomainsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainStatusList = "DomainStatusList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainStatusListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.ElasticsearchDomainStatus?].self, forKey: .domainStatusList)
        var domainStatusListDecoded0:[ElasticsearchClientTypes.ElasticsearchDomainStatus]? = nil
        if let domainStatusListContainer = domainStatusListContainer {
            domainStatusListDecoded0 = [ElasticsearchClientTypes.ElasticsearchDomainStatus]()
            for structure0 in domainStatusListContainer {
                if let structure0 = structure0 {
                    domainStatusListDecoded0?.append(structure0)
                }
            }
        }
        domainStatusList = domainStatusListDecoded0
    }
}

extension DescribeElasticsearchInstanceTypeLimitsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeElasticsearchInstanceTypeLimitsInput(domainName: \(Swift.String(describing: domainName)), elasticsearchVersion: \(Swift.String(describing: elasticsearchVersion)), instanceType: \(Swift.String(describing: instanceType)))"}
}

extension DescribeElasticsearchInstanceTypeLimitsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeElasticsearchInstanceTypeLimitsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeElasticsearchInstanceTypeLimitsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeElasticsearchInstanceTypeLimitsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeElasticsearchInstanceTypeLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeElasticsearchInstanceTypeLimitsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeElasticsearchInstanceTypeLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeElasticsearchInstanceTypeLimitsOutputError>
}

public struct DescribeElasticsearchInstanceTypeLimitsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeElasticsearchInstanceTypeLimitsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeElasticsearchInstanceTypeLimitsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeElasticsearchInstanceTypeLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let domainName = input.operationInput.domainName {
            let domainNameQueryItem = ClientRuntime.URLQueryItem(name: "domainName".urlPercentEncoding(), value: Swift.String(domainName).urlPercentEncoding())
            input.builder.withQueryItem(domainNameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeElasticsearchInstanceTypeLimitsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeElasticsearchInstanceTypeLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeElasticsearchInstanceTypeLimitsOutputError>
}

///
///       Container for the parameters to
///
///         DescribeElasticsearchInstanceTypeLimits
///
///       operation.
///
public struct DescribeElasticsearchInstanceTypeLimitsInput: Swift.Equatable {
    ///
    ///       DomainName represents the name of the Domain that we are trying to
    ///       modify. This should be present only if we are
    ///       querying for Elasticsearch
    ///
    ///         Limits
    ///
    ///       for existing domain.
    ///
    public let domainName: Swift.String?
    ///
    ///       Version of Elasticsearch for which
    ///
    ///         Limits
    ///
    ///       are needed.
    ///
    /// This member is required.
    public let elasticsearchVersion: Swift.String?
    ///
    ///       The instance type for an Elasticsearch cluster for which Elasticsearch
    ///
    ///         Limits
    ///
    ///       are needed.
    ///
    /// This member is required.
    public let instanceType: ElasticsearchClientTypes.ESPartitionInstanceType?

    public init (
        domainName: Swift.String? = nil,
        elasticsearchVersion: Swift.String? = nil,
        instanceType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil
    )
    {
        self.domainName = domainName
        self.elasticsearchVersion = elasticsearchVersion
        self.instanceType = instanceType
    }
}

struct DescribeElasticsearchInstanceTypeLimitsInputBody: Swift.Equatable {
}

extension DescribeElasticsearchInstanceTypeLimitsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeElasticsearchInstanceTypeLimitsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeElasticsearchInstanceTypeLimitsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTypeException" : self = .invalidTypeException(try InvalidTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeElasticsearchInstanceTypeLimitsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case invalidTypeException(InvalidTypeException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeElasticsearchInstanceTypeLimitsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeElasticsearchInstanceTypeLimitsOutputResponse(limitsByRole: \(Swift.String(describing: limitsByRole)))"}
}

extension DescribeElasticsearchInstanceTypeLimitsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeElasticsearchInstanceTypeLimitsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.limitsByRole = output.limitsByRole
        } else {
            self.limitsByRole = nil
        }
    }
}

///
///       Container for the parameters received from
///
///         DescribeElasticsearchInstanceTypeLimits
///
///       operation.
///
public struct DescribeElasticsearchInstanceTypeLimitsOutputResponse: Swift.Equatable {
    ///
    ///       Map of Role of the Instance and Limits that are applicable.
    ///       Role performed by given Instance in Elasticsearch
    ///       can be one of the following:
    ///
    ///         data: If the given InstanceType is used as data node
    ///         master: If the given InstanceType is used as master node
    ///         ultra_warm: If the given InstanceType is used as warm node
    ///
    ///
    public let limitsByRole: [Swift.String:ElasticsearchClientTypes.Limits]?

    public init (
        limitsByRole: [Swift.String:ElasticsearchClientTypes.Limits]? = nil
    )
    {
        self.limitsByRole = limitsByRole
    }
}

struct DescribeElasticsearchInstanceTypeLimitsOutputResponseBody: Swift.Equatable {
    public let limitsByRole: [Swift.String:ElasticsearchClientTypes.Limits]?
}

extension DescribeElasticsearchInstanceTypeLimitsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limitsByRole = "LimitsByRole"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitsByRoleContainer = try containerValues.decodeIfPresent([Swift.String: ElasticsearchClientTypes.Limits?].self, forKey: .limitsByRole)
        var limitsByRoleDecoded0: [Swift.String:ElasticsearchClientTypes.Limits]? = nil
        if let limitsByRoleContainer = limitsByRoleContainer {
            limitsByRoleDecoded0 = [Swift.String:ElasticsearchClientTypes.Limits]()
            for (key0, limits0) in limitsByRoleContainer {
                if let limits0 = limits0 {
                    limitsByRoleDecoded0?[key0] = limits0
                }
            }
        }
        limitsByRole = limitsByRoleDecoded0
    }
}

public struct DescribeInboundCrossClusterSearchConnectionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInboundCrossClusterSearchConnectionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInboundCrossClusterSearchConnectionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInboundCrossClusterSearchConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInboundCrossClusterSearchConnectionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInboundCrossClusterSearchConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInboundCrossClusterSearchConnectionsOutputError>
}

extension DescribeInboundCrossClusterSearchConnectionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInboundCrossClusterSearchConnectionsInput(filters: \(Swift.String(describing: filters)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeInboundCrossClusterSearchConnectionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filterlist0 in filters {
                try filtersContainer.encode(filterlist0)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeInboundCrossClusterSearchConnectionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInboundCrossClusterSearchConnectionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInboundCrossClusterSearchConnectionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInboundCrossClusterSearchConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInboundCrossClusterSearchConnectionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInboundCrossClusterSearchConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInboundCrossClusterSearchConnectionsOutputError>
}

public struct DescribeInboundCrossClusterSearchConnectionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInboundCrossClusterSearchConnectionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInboundCrossClusterSearchConnectionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInboundCrossClusterSearchConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInboundCrossClusterSearchConnectionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInboundCrossClusterSearchConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInboundCrossClusterSearchConnectionsOutputError>
}

/// Container for the parameters to the DescribeInboundCrossClusterSearchConnections operation.
public struct DescribeInboundCrossClusterSearchConnectionsInput: Swift.Equatable {
    ///
    ///       A list of filters used to match properties for inbound cross-cluster search connection.
    ///       Available Filter names for this operation are:
    ///
    ///         cross-cluster-search-connection-id
    ///         source-domain-info.domain-name
    ///         source-domain-info.owner-id
    ///         source-domain-info.region
    ///         destination-domain-info.domain-name
    ///
    ///
    public let filters: [ElasticsearchClientTypes.Filter]?
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public let maxResults: Swift.Int
    ///  NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.
    public let nextToken: Swift.String?

    public init (
        filters: [ElasticsearchClientTypes.Filter]? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeInboundCrossClusterSearchConnectionsInputBody: Swift.Equatable {
    public let filters: [ElasticsearchClientTypes.Filter]?
    public let maxResults: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeInboundCrossClusterSearchConnectionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[ElasticsearchClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ElasticsearchClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeInboundCrossClusterSearchConnectionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInboundCrossClusterSearchConnectionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInboundCrossClusterSearchConnectionsOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInboundCrossClusterSearchConnectionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInboundCrossClusterSearchConnectionsOutputResponse(crossClusterSearchConnections: \(Swift.String(describing: crossClusterSearchConnections)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeInboundCrossClusterSearchConnectionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeInboundCrossClusterSearchConnectionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crossClusterSearchConnections = output.crossClusterSearchConnections
            self.nextToken = output.nextToken
        } else {
            self.crossClusterSearchConnections = nil
            self.nextToken = nil
        }
    }
}

/// The result of a DescribeInboundCrossClusterSearchConnections request. Contains the list of connections matching the filter criteria.
public struct DescribeInboundCrossClusterSearchConnectionsOutputResponse: Swift.Equatable {
    /// Consists of list of InboundCrossClusterSearchConnection matching the specified filter criteria.
    public let crossClusterSearchConnections: [ElasticsearchClientTypes.InboundCrossClusterSearchConnection]?
    /// If more results are available and NextToken is present, make the next request to the same API with the received NextToken to paginate the remaining results.
    ///
    public let nextToken: Swift.String?

    public init (
        crossClusterSearchConnections: [ElasticsearchClientTypes.InboundCrossClusterSearchConnection]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnections = crossClusterSearchConnections
        self.nextToken = nextToken
    }
}

struct DescribeInboundCrossClusterSearchConnectionsOutputResponseBody: Swift.Equatable {
    public let crossClusterSearchConnections: [ElasticsearchClientTypes.InboundCrossClusterSearchConnection]?
    public let nextToken: Swift.String?
}

extension DescribeInboundCrossClusterSearchConnectionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crossClusterSearchConnections = "CrossClusterSearchConnections"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crossClusterSearchConnectionsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.InboundCrossClusterSearchConnection?].self, forKey: .crossClusterSearchConnections)
        var crossClusterSearchConnectionsDecoded0:[ElasticsearchClientTypes.InboundCrossClusterSearchConnection]? = nil
        if let crossClusterSearchConnectionsContainer = crossClusterSearchConnectionsContainer {
            crossClusterSearchConnectionsDecoded0 = [ElasticsearchClientTypes.InboundCrossClusterSearchConnection]()
            for structure0 in crossClusterSearchConnectionsContainer {
                if let structure0 = structure0 {
                    crossClusterSearchConnectionsDecoded0?.append(structure0)
                }
            }
        }
        crossClusterSearchConnections = crossClusterSearchConnectionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeOutboundCrossClusterSearchConnectionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOutboundCrossClusterSearchConnectionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOutboundCrossClusterSearchConnectionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOutboundCrossClusterSearchConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOutboundCrossClusterSearchConnectionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOutboundCrossClusterSearchConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOutboundCrossClusterSearchConnectionsOutputError>
}

extension DescribeOutboundCrossClusterSearchConnectionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeOutboundCrossClusterSearchConnectionsInput(filters: \(Swift.String(describing: filters)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeOutboundCrossClusterSearchConnectionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filterlist0 in filters {
                try filtersContainer.encode(filterlist0)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeOutboundCrossClusterSearchConnectionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOutboundCrossClusterSearchConnectionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOutboundCrossClusterSearchConnectionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOutboundCrossClusterSearchConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOutboundCrossClusterSearchConnectionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOutboundCrossClusterSearchConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOutboundCrossClusterSearchConnectionsOutputError>
}

public struct DescribeOutboundCrossClusterSearchConnectionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOutboundCrossClusterSearchConnectionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOutboundCrossClusterSearchConnectionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOutboundCrossClusterSearchConnectionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOutboundCrossClusterSearchConnectionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOutboundCrossClusterSearchConnectionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOutboundCrossClusterSearchConnectionsOutputError>
}

/// Container for the parameters to the DescribeOutboundCrossClusterSearchConnections operation.
public struct DescribeOutboundCrossClusterSearchConnectionsInput: Swift.Equatable {
    ///
    ///       A list of filters used to match properties for outbound cross-cluster search connection.
    ///       Available Filter names for this operation are:
    ///
    ///         cross-cluster-search-connection-id
    ///         destination-domain-info.domain-name
    ///         destination-domain-info.owner-id
    ///         destination-domain-info.region
    ///         source-domain-info.domain-name
    ///
    ///
    public let filters: [ElasticsearchClientTypes.Filter]?
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public let maxResults: Swift.Int
    ///  NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.
    public let nextToken: Swift.String?

    public init (
        filters: [ElasticsearchClientTypes.Filter]? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeOutboundCrossClusterSearchConnectionsInputBody: Swift.Equatable {
    public let filters: [ElasticsearchClientTypes.Filter]?
    public let maxResults: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeOutboundCrossClusterSearchConnectionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[ElasticsearchClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ElasticsearchClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeOutboundCrossClusterSearchConnectionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeOutboundCrossClusterSearchConnectionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationTokenException" : self = .invalidPaginationTokenException(try InvalidPaginationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeOutboundCrossClusterSearchConnectionsOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case invalidPaginationTokenException(InvalidPaginationTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeOutboundCrossClusterSearchConnectionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeOutboundCrossClusterSearchConnectionsOutputResponse(crossClusterSearchConnections: \(Swift.String(describing: crossClusterSearchConnections)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeOutboundCrossClusterSearchConnectionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeOutboundCrossClusterSearchConnectionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crossClusterSearchConnections = output.crossClusterSearchConnections
            self.nextToken = output.nextToken
        } else {
            self.crossClusterSearchConnections = nil
            self.nextToken = nil
        }
    }
}

/// The result of a DescribeOutboundCrossClusterSearchConnections request. Contains the list of connections matching the filter criteria.
public struct DescribeOutboundCrossClusterSearchConnectionsOutputResponse: Swift.Equatable {
    /// Consists of list of OutboundCrossClusterSearchConnection matching the specified filter criteria.
    public let crossClusterSearchConnections: [ElasticsearchClientTypes.OutboundCrossClusterSearchConnection]?
    /// If more results are available and NextToken is present, make the next request to the same API with the received NextToken to paginate the remaining results.
    ///
    public let nextToken: Swift.String?

    public init (
        crossClusterSearchConnections: [ElasticsearchClientTypes.OutboundCrossClusterSearchConnection]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnections = crossClusterSearchConnections
        self.nextToken = nextToken
    }
}

struct DescribeOutboundCrossClusterSearchConnectionsOutputResponseBody: Swift.Equatable {
    public let crossClusterSearchConnections: [ElasticsearchClientTypes.OutboundCrossClusterSearchConnection]?
    public let nextToken: Swift.String?
}

extension DescribeOutboundCrossClusterSearchConnectionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crossClusterSearchConnections = "CrossClusterSearchConnections"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crossClusterSearchConnectionsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.OutboundCrossClusterSearchConnection?].self, forKey: .crossClusterSearchConnections)
        var crossClusterSearchConnectionsDecoded0:[ElasticsearchClientTypes.OutboundCrossClusterSearchConnection]? = nil
        if let crossClusterSearchConnectionsContainer = crossClusterSearchConnectionsContainer {
            crossClusterSearchConnectionsDecoded0 = [ElasticsearchClientTypes.OutboundCrossClusterSearchConnection]()
            for structure0 in crossClusterSearchConnectionsContainer {
                if let structure0 = structure0 {
                    crossClusterSearchConnectionsDecoded0?.append(structure0)
                }
            }
        }
        crossClusterSearchConnections = crossClusterSearchConnectionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ElasticsearchClientTypes.DescribePackagesFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let value = value {
            var valueContainer = encodeContainer.nestedUnkeyedContainer(forKey: .value)
            for describepackagesfiltervalues0 in value {
                try valueContainer.encode(describepackagesfiltervalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DescribePackagesFilterName.self, forKey: .name)
        name = nameDecoded
        let valueContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .value)
        var valueDecoded0:[Swift.String]? = nil
        if let valueContainer = valueContainer {
            valueDecoded0 = [Swift.String]()
            for string0 in valueContainer {
                if let string0 = string0 {
                    valueDecoded0?.append(string0)
                }
            }
        }
        value = valueDecoded0
    }
}

extension ElasticsearchClientTypes.DescribePackagesFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribePackagesFilter(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension ElasticsearchClientTypes {
    /// Filter to apply in DescribePackage response.
    public struct DescribePackagesFilter: Swift.Equatable {
        /// Any field from PackageDetails.
        public let name: ElasticsearchClientTypes.DescribePackagesFilterName?
        /// A list of values for the specified field.
        public let value: [Swift.String]?

        public init (
            name: ElasticsearchClientTypes.DescribePackagesFilterName? = nil,
            value: [Swift.String]? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension ElasticsearchClientTypes {
    public enum DescribePackagesFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case packageid
        case packagename
        case packagestatus
        case sdkUnknown(Swift.String)

        public static var allCases: [DescribePackagesFilterName] {
            return [
                .packageid,
                .packagename,
                .packagestatus,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .packageid: return "PackageID"
            case .packagename: return "PackageName"
            case .packagestatus: return "PackageStatus"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DescribePackagesFilterName(rawValue: rawValue) ?? DescribePackagesFilterName.sdkUnknown(rawValue)
        }
    }
}

public struct DescribePackagesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePackagesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribePackagesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePackagesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribePackagesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePackagesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePackagesOutputError>
}

extension DescribePackagesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribePackagesInput(filters: \(Swift.String(describing: filters)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribePackagesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for describepackagesfilterlist0 in filters {
                try filtersContainer.encode(describepackagesfilterlist0)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribePackagesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePackagesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribePackagesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePackagesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribePackagesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePackagesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePackagesOutputError>
}

public struct DescribePackagesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePackagesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribePackagesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePackagesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribePackagesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePackagesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePackagesOutputError>
}

///
///       Container for request parameters to
///
///         DescribePackage
///
///       operation.
///
public struct DescribePackagesInput: Swift.Equatable {
    /// Only returns packages that match the DescribePackagesFilterList values.
    public let filters: [ElasticsearchClientTypes.DescribePackagesFilter]?
    /// Limits results to a maximum number of packages.
    public let maxResults: Swift.Int
    /// Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
    public let nextToken: Swift.String?

    public init (
        filters: [ElasticsearchClientTypes.DescribePackagesFilter]? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribePackagesInputBody: Swift.Equatable {
    public let filters: [ElasticsearchClientTypes.DescribePackagesFilter]?
    public let maxResults: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribePackagesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.DescribePackagesFilter?].self, forKey: .filters)
        var filtersDecoded0:[ElasticsearchClientTypes.DescribePackagesFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ElasticsearchClientTypes.DescribePackagesFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribePackagesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePackagesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribePackagesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePackagesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribePackagesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), packageDetailsList: \(Swift.String(describing: packageDetailsList)))"}
}

extension DescribePackagesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribePackagesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.packageDetailsList = output.packageDetailsList
        } else {
            self.nextToken = nil
            self.packageDetailsList = nil
        }
    }
}

///
///       Container for response returned by
///
///         DescribePackages
///
///       operation.
///
public struct DescribePackagesOutputResponse: Swift.Equatable {
    public let nextToken: Swift.String?
    /// List of PackageDetails objects.
    public let packageDetailsList: [ElasticsearchClientTypes.PackageDetails]?

    public init (
        nextToken: Swift.String? = nil,
        packageDetailsList: [ElasticsearchClientTypes.PackageDetails]? = nil
    )
    {
        self.nextToken = nextToken
        self.packageDetailsList = packageDetailsList
    }
}

struct DescribePackagesOutputResponseBody: Swift.Equatable {
    public let packageDetailsList: [ElasticsearchClientTypes.PackageDetails]?
    public let nextToken: Swift.String?
}

extension DescribePackagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case packageDetailsList = "PackageDetailsList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageDetailsListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.PackageDetails?].self, forKey: .packageDetailsList)
        var packageDetailsListDecoded0:[ElasticsearchClientTypes.PackageDetails]? = nil
        if let packageDetailsListContainer = packageDetailsListContainer {
            packageDetailsListDecoded0 = [ElasticsearchClientTypes.PackageDetails]()
            for structure0 in packageDetailsListContainer {
                if let structure0 = structure0 {
                    packageDetailsListDecoded0?.append(structure0)
                }
            }
        }
        packageDetailsList = packageDetailsListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeReservedElasticsearchInstanceOfferingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeReservedElasticsearchInstanceOfferingsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), reservedElasticsearchInstanceOfferingId: \(Swift.String(describing: reservedElasticsearchInstanceOfferingId)))"}
}

extension DescribeReservedElasticsearchInstanceOfferingsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeReservedElasticsearchInstanceOfferingsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeReservedElasticsearchInstanceOfferingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeReservedElasticsearchInstanceOfferingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeReservedElasticsearchInstanceOfferingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeReservedElasticsearchInstanceOfferingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeReservedElasticsearchInstanceOfferingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeReservedElasticsearchInstanceOfferingsOutputError>
}

public struct DescribeReservedElasticsearchInstanceOfferingsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeReservedElasticsearchInstanceOfferingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeReservedElasticsearchInstanceOfferingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeReservedElasticsearchInstanceOfferingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let reservedElasticsearchInstanceOfferingId = input.operationInput.reservedElasticsearchInstanceOfferingId {
            let reservedElasticsearchInstanceOfferingIdQueryItem = ClientRuntime.URLQueryItem(name: "offeringId".urlPercentEncoding(), value: Swift.String(reservedElasticsearchInstanceOfferingId).urlPercentEncoding())
            input.builder.withQueryItem(reservedElasticsearchInstanceOfferingIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeReservedElasticsearchInstanceOfferingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeReservedElasticsearchInstanceOfferingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeReservedElasticsearchInstanceOfferingsOutputError>
}

/// Container for parameters to DescribeReservedElasticsearchInstanceOfferings
public struct DescribeReservedElasticsearchInstanceOfferingsInput: Swift.Equatable {
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public let maxResults: Swift.Int
    /// NextToken should be sent in case if earlier API call produced result
    /// 		containing NextToken. It is used for pagination.
    public let nextToken: Swift.String?
    /// The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.
    public let reservedElasticsearchInstanceOfferingId: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        reservedElasticsearchInstanceOfferingId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
    }
}

struct DescribeReservedElasticsearchInstanceOfferingsInputBody: Swift.Equatable {
}

extension DescribeReservedElasticsearchInstanceOfferingsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeReservedElasticsearchInstanceOfferingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeReservedElasticsearchInstanceOfferingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeReservedElasticsearchInstanceOfferingsOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReservedElasticsearchInstanceOfferingsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeReservedElasticsearchInstanceOfferingsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), reservedElasticsearchInstanceOfferings: \(Swift.String(describing: reservedElasticsearchInstanceOfferings)))"}
}

extension DescribeReservedElasticsearchInstanceOfferingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeReservedElasticsearchInstanceOfferingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.reservedElasticsearchInstanceOfferings = output.reservedElasticsearchInstanceOfferings
        } else {
            self.nextToken = nil
            self.reservedElasticsearchInstanceOfferings = nil
        }
    }
}

/// Container for results from DescribeReservedElasticsearchInstanceOfferings
public struct DescribeReservedElasticsearchInstanceOfferingsOutputResponse: Swift.Equatable {
    /// Provides an identifier to allow retrieval of paginated results.
    public let nextToken: Swift.String?
    /// List of reserved Elasticsearch instance offerings
    public let reservedElasticsearchInstanceOfferings: [ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]?

    public init (
        nextToken: Swift.String? = nil,
        reservedElasticsearchInstanceOfferings: [ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]? = nil
    )
    {
        self.nextToken = nextToken
        self.reservedElasticsearchInstanceOfferings = reservedElasticsearchInstanceOfferings
    }
}

struct DescribeReservedElasticsearchInstanceOfferingsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let reservedElasticsearchInstanceOfferings: [ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]?
}

extension DescribeReservedElasticsearchInstanceOfferingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case reservedElasticsearchInstanceOfferings = "ReservedElasticsearchInstanceOfferings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let reservedElasticsearchInstanceOfferingsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering?].self, forKey: .reservedElasticsearchInstanceOfferings)
        var reservedElasticsearchInstanceOfferingsDecoded0:[ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]? = nil
        if let reservedElasticsearchInstanceOfferingsContainer = reservedElasticsearchInstanceOfferingsContainer {
            reservedElasticsearchInstanceOfferingsDecoded0 = [ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]()
            for structure0 in reservedElasticsearchInstanceOfferingsContainer {
                if let structure0 = structure0 {
                    reservedElasticsearchInstanceOfferingsDecoded0?.append(structure0)
                }
            }
        }
        reservedElasticsearchInstanceOfferings = reservedElasticsearchInstanceOfferingsDecoded0
    }
}

extension DescribeReservedElasticsearchInstancesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeReservedElasticsearchInstancesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), reservedElasticsearchInstanceId: \(Swift.String(describing: reservedElasticsearchInstanceId)))"}
}

extension DescribeReservedElasticsearchInstancesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeReservedElasticsearchInstancesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeReservedElasticsearchInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeReservedElasticsearchInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeReservedElasticsearchInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeReservedElasticsearchInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeReservedElasticsearchInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeReservedElasticsearchInstancesOutputError>
}

public struct DescribeReservedElasticsearchInstancesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeReservedElasticsearchInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeReservedElasticsearchInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeReservedElasticsearchInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let reservedElasticsearchInstanceId = input.operationInput.reservedElasticsearchInstanceId {
            let reservedElasticsearchInstanceIdQueryItem = ClientRuntime.URLQueryItem(name: "reservationId".urlPercentEncoding(), value: Swift.String(reservedElasticsearchInstanceId).urlPercentEncoding())
            input.builder.withQueryItem(reservedElasticsearchInstanceIdQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeReservedElasticsearchInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeReservedElasticsearchInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeReservedElasticsearchInstancesOutputError>
}

/// Container for parameters to DescribeReservedElasticsearchInstances
public struct DescribeReservedElasticsearchInstancesInput: Swift.Equatable {
    /// Set this value to limit the number of results returned. If not specified, defaults to 100.
    public let maxResults: Swift.Int
    /// NextToken should be sent in case if earlier API call produced result
    /// 		containing NextToken. It is used for pagination.
    public let nextToken: Swift.String?
    /// The reserved instance identifier filter value. Use this parameter to show only the reservation that matches the specified reserved Elasticsearch instance ID.
    public let reservedElasticsearchInstanceId: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        reservedElasticsearchInstanceId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
    }
}

struct DescribeReservedElasticsearchInstancesInputBody: Swift.Equatable {
}

extension DescribeReservedElasticsearchInstancesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeReservedElasticsearchInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeReservedElasticsearchInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeReservedElasticsearchInstancesOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReservedElasticsearchInstancesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeReservedElasticsearchInstancesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), reservedElasticsearchInstances: \(Swift.String(describing: reservedElasticsearchInstances)))"}
}

extension DescribeReservedElasticsearchInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeReservedElasticsearchInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.reservedElasticsearchInstances = output.reservedElasticsearchInstances
        } else {
            self.nextToken = nil
            self.reservedElasticsearchInstances = nil
        }
    }
}

/// Container for results from DescribeReservedElasticsearchInstances
public struct DescribeReservedElasticsearchInstancesOutputResponse: Swift.Equatable {
    /// Provides an identifier to allow retrieval of paginated results.
    public let nextToken: Swift.String?
    /// List of reserved Elasticsearch instances.
    public let reservedElasticsearchInstances: [ElasticsearchClientTypes.ReservedElasticsearchInstance]?

    public init (
        nextToken: Swift.String? = nil,
        reservedElasticsearchInstances: [ElasticsearchClientTypes.ReservedElasticsearchInstance]? = nil
    )
    {
        self.nextToken = nextToken
        self.reservedElasticsearchInstances = reservedElasticsearchInstances
    }
}

struct DescribeReservedElasticsearchInstancesOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let reservedElasticsearchInstances: [ElasticsearchClientTypes.ReservedElasticsearchInstance]?
}

extension DescribeReservedElasticsearchInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case reservedElasticsearchInstances = "ReservedElasticsearchInstances"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let reservedElasticsearchInstancesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.ReservedElasticsearchInstance?].self, forKey: .reservedElasticsearchInstances)
        var reservedElasticsearchInstancesDecoded0:[ElasticsearchClientTypes.ReservedElasticsearchInstance]? = nil
        if let reservedElasticsearchInstancesContainer = reservedElasticsearchInstancesContainer {
            reservedElasticsearchInstancesDecoded0 = [ElasticsearchClientTypes.ReservedElasticsearchInstance]()
            for structure0 in reservedElasticsearchInstancesContainer {
                if let structure0 = structure0 {
                    reservedElasticsearchInstancesDecoded0?.append(structure0)
                }
            }
        }
        reservedElasticsearchInstances = reservedElasticsearchInstancesDecoded0
    }
}

extension DisabledOperationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisabledOperationException(message: \(Swift.String(describing: message)))"}
}

extension DisabledOperationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DisabledOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occured because the client wanted to access a not supported operation. Gives http status code of 409.
public struct DisabledOperationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DisabledOperationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DisabledOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DissociatePackageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DissociatePackageInput(domainName: \(Swift.String(describing: domainName)), packageID: \(Swift.String(describing: packageID)))"}
}

extension DissociatePackageInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DissociatePackageInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DissociatePackageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DissociatePackageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DissociatePackageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DissociatePackageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DissociatePackageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DissociatePackageOutputError>
}

public struct DissociatePackageInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DissociatePackageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DissociatePackageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DissociatePackageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DissociatePackageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DissociatePackageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DissociatePackageOutputError>
}

///
///       Container for request parameters to
///
///         DissociatePackage
///
///       operation.
///
public struct DissociatePackageInput: Swift.Equatable {
    /// Name of the domain that you want to associate the package with.
    /// This member is required.
    public let domainName: Swift.String?
    /// Internal ID of the package that you want to associate with a domain. Use DescribePackages to find this value.
    /// This member is required.
    public let packageID: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.packageID = packageID
    }
}

struct DissociatePackageInputBody: Swift.Equatable {
}

extension DissociatePackageInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DissociatePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DissociatePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DissociatePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case conflictException(ConflictException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DissociatePackageOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DissociatePackageOutputResponse(domainPackageDetails: \(Swift.String(describing: domainPackageDetails)))"}
}

extension DissociatePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DissociatePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainPackageDetails = output.domainPackageDetails
        } else {
            self.domainPackageDetails = nil
        }
    }
}

///
///       Container for response returned by
///
///         DissociatePackage
///
///       operation.
///
public struct DissociatePackageOutputResponse: Swift.Equatable {
    /// DomainPackageDetails
    public let domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails?

    public init (
        domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails? = nil
    )
    {
        self.domainPackageDetails = domainPackageDetails
    }
}

struct DissociatePackageOutputResponseBody: Swift.Equatable {
    public let domainPackageDetails: ElasticsearchClientTypes.DomainPackageDetails?
}

extension DissociatePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainPackageDetails = "DomainPackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainPackageDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainPackageDetails.self, forKey: .domainPackageDetails)
        domainPackageDetails = domainPackageDetailsDecoded
    }
}

extension ElasticsearchClientTypes.DomainEndpointOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customEndpoint = "CustomEndpoint"
        case customEndpointCertificateArn = "CustomEndpointCertificateArn"
        case customEndpointEnabled = "CustomEndpointEnabled"
        case enforceHTTPS = "EnforceHTTPS"
        case tLSSecurityPolicy = "TLSSecurityPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customEndpoint = customEndpoint {
            try encodeContainer.encode(customEndpoint, forKey: .customEndpoint)
        }
        if let customEndpointCertificateArn = customEndpointCertificateArn {
            try encodeContainer.encode(customEndpointCertificateArn, forKey: .customEndpointCertificateArn)
        }
        if let customEndpointEnabled = customEndpointEnabled {
            try encodeContainer.encode(customEndpointEnabled, forKey: .customEndpointEnabled)
        }
        if let enforceHTTPS = enforceHTTPS {
            try encodeContainer.encode(enforceHTTPS, forKey: .enforceHTTPS)
        }
        if let tLSSecurityPolicy = tLSSecurityPolicy {
            try encodeContainer.encode(tLSSecurityPolicy.rawValue, forKey: .tLSSecurityPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enforceHTTPSDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enforceHTTPS)
        enforceHTTPS = enforceHTTPSDecoded
        let tLSSecurityPolicyDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.TLSSecurityPolicy.self, forKey: .tLSSecurityPolicy)
        tLSSecurityPolicy = tLSSecurityPolicyDecoded
        let customEndpointEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .customEndpointEnabled)
        customEndpointEnabled = customEndpointEnabledDecoded
        let customEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customEndpoint)
        customEndpoint = customEndpointDecoded
        let customEndpointCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customEndpointCertificateArn)
        customEndpointCertificateArn = customEndpointCertificateArnDecoded
    }
}

extension ElasticsearchClientTypes.DomainEndpointOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainEndpointOptions(customEndpoint: \(Swift.String(describing: customEndpoint)), customEndpointCertificateArn: \(Swift.String(describing: customEndpointCertificateArn)), customEndpointEnabled: \(Swift.String(describing: customEndpointEnabled)), enforceHTTPS: \(Swift.String(describing: enforceHTTPS)), tLSSecurityPolicy: \(Swift.String(describing: tLSSecurityPolicy)))"}
}

extension ElasticsearchClientTypes {
    /// Options to configure endpoint for the Elasticsearch domain.
    public struct DomainEndpointOptions: Swift.Equatable {
        /// Specify the fully qualified domain for your custom endpoint.
        public let customEndpoint: Swift.String?
        /// Specify ACM certificate ARN for your custom endpoint.
        public let customEndpointCertificateArn: Swift.String?
        /// Specify if custom endpoint should be enabled for the Elasticsearch domain.
        public let customEndpointEnabled: Swift.Bool?
        /// Specify if only HTTPS endpoint should be enabled for the Elasticsearch domain.
        public let enforceHTTPS: Swift.Bool?
        /// Specify the TLS security policy that needs to be applied to the HTTPS endpoint of Elasticsearch domain.
        ///         <br></br> It can be one of the following values:
        ///
        ///             Policy-Min-TLS-1-0-2019-07:  TLS security policy which supports TLSv1.0 and higher.
        ///             Policy-Min-TLS-1-2-2019-07:  TLS security policy which supports only TLSv1.2
        ///
        ///
        public let tLSSecurityPolicy: ElasticsearchClientTypes.TLSSecurityPolicy?

        public init (
            customEndpoint: Swift.String? = nil,
            customEndpointCertificateArn: Swift.String? = nil,
            customEndpointEnabled: Swift.Bool? = nil,
            enforceHTTPS: Swift.Bool? = nil,
            tLSSecurityPolicy: ElasticsearchClientTypes.TLSSecurityPolicy? = nil
        )
        {
            self.customEndpoint = customEndpoint
            self.customEndpointCertificateArn = customEndpointCertificateArn
            self.customEndpointEnabled = customEndpointEnabled
            self.enforceHTTPS = enforceHTTPS
            self.tLSSecurityPolicy = tLSSecurityPolicy
        }
    }

}

extension ElasticsearchClientTypes.DomainEndpointOptionsStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainEndpointOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes.DomainEndpointOptionsStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainEndpointOptionsStatus(options: \(Swift.String(describing: options)), status: \(Swift.String(describing: status)))"}
}

extension ElasticsearchClientTypes {
    /// The configured endpoint options for the domain and their current status.
    public struct DomainEndpointOptionsStatus: Swift.Equatable {
        /// Options to configure endpoint for the Elasticsearch domain.
        /// This member is required.
        public let options: ElasticsearchClientTypes.DomainEndpointOptions?
        /// The status of the endpoint options for the Elasticsearch domain. See OptionStatus for the status information that's included.
        /// This member is required.
        public let status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.DomainEndpointOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes.DomainInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
    }
}

extension ElasticsearchClientTypes.DomainInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainInfo(domainName: \(Swift.String(describing: domainName)))"}
}

extension ElasticsearchClientTypes {
    public struct DomainInfo: Swift.Equatable {
        ///  Specifies the DomainName.
        public let domainName: Swift.String?

        public init (
            domainName: Swift.String? = nil
        )
        {
            self.domainName = domainName
        }
    }

}

extension ElasticsearchClientTypes.DomainInformation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case ownerId = "OwnerId"
        case region = "Region"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let ownerId = ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
    }
}

extension ElasticsearchClientTypes.DomainInformation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainInformation(domainName: \(Swift.String(describing: domainName)), ownerId: \(Swift.String(describing: ownerId)), region: \(Swift.String(describing: region)))"}
}

extension ElasticsearchClientTypes {
    public struct DomainInformation: Swift.Equatable {
        /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
        /// This member is required.
        public let domainName: Swift.String?
        public let ownerId: Swift.String?
        public let region: Swift.String?

        public init (
            domainName: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            region: Swift.String? = nil
        )
        {
            self.domainName = domainName
            self.ownerId = ownerId
            self.region = region
        }
    }

}

extension ElasticsearchClientTypes.DomainPackageDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case domainPackageStatus = "DomainPackageStatus"
        case errorDetails = "ErrorDetails"
        case lastUpdated = "LastUpdated"
        case packageID = "PackageID"
        case packageName = "PackageName"
        case packageType = "PackageType"
        case packageVersion = "PackageVersion"
        case referencePath = "ReferencePath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainPackageStatus = domainPackageStatus {
            try encodeContainer.encode(domainPackageStatus.rawValue, forKey: .domainPackageStatus)
        }
        if let errorDetails = errorDetails {
            try encodeContainer.encode(errorDetails, forKey: .errorDetails)
        }
        if let lastUpdated = lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let packageID = packageID {
            try encodeContainer.encode(packageID, forKey: .packageID)
        }
        if let packageName = packageName {
            try encodeContainer.encode(packageName, forKey: .packageName)
        }
        if let packageType = packageType {
            try encodeContainer.encode(packageType.rawValue, forKey: .packageType)
        }
        if let packageVersion = packageVersion {
            try encodeContainer.encode(packageVersion, forKey: .packageVersion)
        }
        if let referencePath = referencePath {
            try encodeContainer.encode(referencePath, forKey: .referencePath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let packageTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageType.self, forKey: .packageType)
        packageType = packageTypeDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let domainPackageStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainPackageStatus.self, forKey: .domainPackageStatus)
        domainPackageStatus = domainPackageStatusDecoded
        let packageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageVersion)
        packageVersion = packageVersionDecoded
        let referencePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referencePath)
        referencePath = referencePathDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ErrorDetails.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}

extension ElasticsearchClientTypes.DomainPackageDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainPackageDetails(domainName: \(Swift.String(describing: domainName)), domainPackageStatus: \(Swift.String(describing: domainPackageStatus)), errorDetails: \(Swift.String(describing: errorDetails)), lastUpdated: \(Swift.String(describing: lastUpdated)), packageID: \(Swift.String(describing: packageID)), packageName: \(Swift.String(describing: packageName)), packageType: \(Swift.String(describing: packageType)), packageVersion: \(Swift.String(describing: packageVersion)), referencePath: \(Swift.String(describing: referencePath)))"}
}

extension ElasticsearchClientTypes {
    /// Information on a package that is associated with a domain.
    public struct DomainPackageDetails: Swift.Equatable {
        /// Name of the domain you've associated a package with.
        public let domainName: Swift.String?
        /// State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.
        public let domainPackageStatus: ElasticsearchClientTypes.DomainPackageStatus?
        /// Additional information if the package is in an error state. Null otherwise.
        public let errorDetails: ElasticsearchClientTypes.ErrorDetails?
        /// Timestamp of the most-recent update to the association status.
        public let lastUpdated: ClientRuntime.Date?
        /// Internal ID of the package.
        public let packageID: Swift.String?
        /// User specified name of the package.
        public let packageName: Swift.String?
        /// Currently supports only TXT-DICTIONARY.
        public let packageType: ElasticsearchClientTypes.PackageType?
        public let packageVersion: Swift.String?
        /// The relative path on Amazon ES nodes, which can be used as synonym_path when the package is synonym file.
        public let referencePath: Swift.String?

        public init (
            domainName: Swift.String? = nil,
            domainPackageStatus: ElasticsearchClientTypes.DomainPackageStatus? = nil,
            errorDetails: ElasticsearchClientTypes.ErrorDetails? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            packageID: Swift.String? = nil,
            packageName: Swift.String? = nil,
            packageType: ElasticsearchClientTypes.PackageType? = nil,
            packageVersion: Swift.String? = nil,
            referencePath: Swift.String? = nil
        )
        {
            self.domainName = domainName
            self.domainPackageStatus = domainPackageStatus
            self.errorDetails = errorDetails
            self.lastUpdated = lastUpdated
            self.packageID = packageID
            self.packageName = packageName
            self.packageType = packageType
            self.packageVersion = packageVersion
            self.referencePath = referencePath
        }
    }

}

extension ElasticsearchClientTypes {
    public enum DomainPackageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case associating
        case associationFailed
        case dissociating
        case dissociationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [DomainPackageStatus] {
            return [
                .active,
                .associating,
                .associationFailed,
                .dissociating,
                .dissociationFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .associating: return "ASSOCIATING"
            case .associationFailed: return "ASSOCIATION_FAILED"
            case .dissociating: return "DISSOCIATING"
            case .dissociationFailed: return "DISSOCIATION_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DomainPackageStatus(rawValue: rawValue) ?? DomainPackageStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.Duration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case unit = "Unit"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
        if value != 0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decode(Swift.Int.self, forKey: .value)
        value = valueDecoded
        let unitDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.TimeUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension ElasticsearchClientTypes.Duration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Duration(unit: \(Swift.String(describing: unit)), value: \(Swift.String(describing: value)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies maintenance schedule duration: duration value and duration unit. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
    public struct Duration: Swift.Equatable {
        /// Specifies the unit of a maintenance schedule duration. Valid value is HOURS. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
        public let unit: ElasticsearchClientTypes.TimeUnit?
        ///  Integer to specify the value of a maintenance schedule duration. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
        public let value: Swift.Int

        public init (
            unit: ElasticsearchClientTypes.TimeUnit? = nil,
            value: Swift.Int = 0
        )
        {
            self.unit = unit
            self.value = value
        }
    }

}

extension ElasticsearchClientTypes.EBSOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eBSEnabled = "EBSEnabled"
        case iops = "Iops"
        case volumeSize = "VolumeSize"
        case volumeType = "VolumeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eBSEnabled = eBSEnabled {
            try encodeContainer.encode(eBSEnabled, forKey: .eBSEnabled)
        }
        if let iops = iops {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let volumeSize = volumeSize {
            try encodeContainer.encode(volumeSize, forKey: .volumeSize)
        }
        if let volumeType = volumeType {
            try encodeContainer.encode(volumeType.rawValue, forKey: .volumeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eBSEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .eBSEnabled)
        eBSEnabled = eBSEnabledDecoded
        let volumeTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VolumeType.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
    }
}

extension ElasticsearchClientTypes.EBSOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EBSOptions(eBSEnabled: \(Swift.String(describing: eBSEnabled)), iops: \(Swift.String(describing: iops)), volumeSize: \(Swift.String(describing: volumeSize)), volumeType: \(Swift.String(describing: volumeType)))"}
}

extension ElasticsearchClientTypes {
    /// Options to enable, disable, and specify the properties of EBS storage volumes. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-ebs" target="_blank"> Configuring EBS-based Storage.
    public struct EBSOptions: Swift.Equatable {
        /// Specifies whether EBS-based storage is enabled.
        public let eBSEnabled: Swift.Bool?
        /// Specifies the IOPD for a Provisioned IOPS EBS volume (SSD).
        public let iops: Swift.Int?
        ///  Integer to specify the size of an EBS volume.
        public let volumeSize: Swift.Int?
        ///  Specifies the volume type for EBS-based storage.
        public let volumeType: ElasticsearchClientTypes.VolumeType?

        public init (
            eBSEnabled: Swift.Bool? = nil,
            iops: Swift.Int? = nil,
            volumeSize: Swift.Int? = nil,
            volumeType: ElasticsearchClientTypes.VolumeType? = nil
        )
        {
            self.eBSEnabled = eBSEnabled
            self.iops = iops
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }
    }

}

extension ElasticsearchClientTypes.EBSOptionsStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EBSOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes.EBSOptionsStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EBSOptionsStatus(options: \(Swift.String(describing: options)), status: \(Swift.String(describing: status)))"}
}

extension ElasticsearchClientTypes {
    ///  Status of the EBS options for the specified Elasticsearch domain.
    public struct EBSOptionsStatus: Swift.Equatable {
        ///  Specifies the EBS options for the specified Elasticsearch domain.
        /// This member is required.
        public let options: ElasticsearchClientTypes.EBSOptions?
        ///  Specifies the status of the EBS options for the specified Elasticsearch domain.
        /// This member is required.
        public let status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.EBSOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    public enum ESPartitionInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case c42xlargeElasticsearch
        case c44xlargeElasticsearch
        case c48xlargeElasticsearch
        case c4LargeElasticsearch
        case c4XlargeElasticsearch
        case c518xlargeElasticsearch
        case c52xlargeElasticsearch
        case c54xlargeElasticsearch
        case c59xlargeElasticsearch
        case c5LargeElasticsearch
        case c5XlargeElasticsearch
        case d22xlargeElasticsearch
        case d24xlargeElasticsearch
        case d28xlargeElasticsearch
        case d2XlargeElasticsearch
        case i22xlargeElasticsearch
        case i2XlargeElasticsearch
        case i316xlargeElasticsearch
        case i32xlargeElasticsearch
        case i34xlargeElasticsearch
        case i38xlargeElasticsearch
        case i3LargeElasticsearch
        case i3XlargeElasticsearch
        case m32xlargeElasticsearch
        case m3LargeElasticsearch
        case m3MediumElasticsearch
        case m3XlargeElasticsearch
        case m410xlargeElasticsearch
        case m42xlargeElasticsearch
        case m44xlargeElasticsearch
        case m4LargeElasticsearch
        case m4XlargeElasticsearch
        case m512xlargeElasticsearch
        case m52xlargeElasticsearch
        case m54xlargeElasticsearch
        case m5LargeElasticsearch
        case m5XlargeElasticsearch
        case r32xlargeElasticsearch
        case r34xlargeElasticsearch
        case r38xlargeElasticsearch
        case r3LargeElasticsearch
        case r3XlargeElasticsearch
        case r416xlargeElasticsearch
        case r42xlargeElasticsearch
        case r44xlargeElasticsearch
        case r48xlargeElasticsearch
        case r4LargeElasticsearch
        case r4XlargeElasticsearch
        case r512xlargeElasticsearch
        case r52xlargeElasticsearch
        case r54xlargeElasticsearch
        case r5LargeElasticsearch
        case r5XlargeElasticsearch
        case t2MediumElasticsearch
        case t2MicroElasticsearch
        case t2SmallElasticsearch
        case ultrawarm1LargeElasticsearch
        case ultrawarm1MediumElasticsearch
        case sdkUnknown(Swift.String)

        public static var allCases: [ESPartitionInstanceType] {
            return [
                .c42xlargeElasticsearch,
                .c44xlargeElasticsearch,
                .c48xlargeElasticsearch,
                .c4LargeElasticsearch,
                .c4XlargeElasticsearch,
                .c518xlargeElasticsearch,
                .c52xlargeElasticsearch,
                .c54xlargeElasticsearch,
                .c59xlargeElasticsearch,
                .c5LargeElasticsearch,
                .c5XlargeElasticsearch,
                .d22xlargeElasticsearch,
                .d24xlargeElasticsearch,
                .d28xlargeElasticsearch,
                .d2XlargeElasticsearch,
                .i22xlargeElasticsearch,
                .i2XlargeElasticsearch,
                .i316xlargeElasticsearch,
                .i32xlargeElasticsearch,
                .i34xlargeElasticsearch,
                .i38xlargeElasticsearch,
                .i3LargeElasticsearch,
                .i3XlargeElasticsearch,
                .m32xlargeElasticsearch,
                .m3LargeElasticsearch,
                .m3MediumElasticsearch,
                .m3XlargeElasticsearch,
                .m410xlargeElasticsearch,
                .m42xlargeElasticsearch,
                .m44xlargeElasticsearch,
                .m4LargeElasticsearch,
                .m4XlargeElasticsearch,
                .m512xlargeElasticsearch,
                .m52xlargeElasticsearch,
                .m54xlargeElasticsearch,
                .m5LargeElasticsearch,
                .m5XlargeElasticsearch,
                .r32xlargeElasticsearch,
                .r34xlargeElasticsearch,
                .r38xlargeElasticsearch,
                .r3LargeElasticsearch,
                .r3XlargeElasticsearch,
                .r416xlargeElasticsearch,
                .r42xlargeElasticsearch,
                .r44xlargeElasticsearch,
                .r48xlargeElasticsearch,
                .r4LargeElasticsearch,
                .r4XlargeElasticsearch,
                .r512xlargeElasticsearch,
                .r52xlargeElasticsearch,
                .r54xlargeElasticsearch,
                .r5LargeElasticsearch,
                .r5XlargeElasticsearch,
                .t2MediumElasticsearch,
                .t2MicroElasticsearch,
                .t2SmallElasticsearch,
                .ultrawarm1LargeElasticsearch,
                .ultrawarm1MediumElasticsearch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .c42xlargeElasticsearch: return "c4.2xlarge.elasticsearch"
            case .c44xlargeElasticsearch: return "c4.4xlarge.elasticsearch"
            case .c48xlargeElasticsearch: return "c4.8xlarge.elasticsearch"
            case .c4LargeElasticsearch: return "c4.large.elasticsearch"
            case .c4XlargeElasticsearch: return "c4.xlarge.elasticsearch"
            case .c518xlargeElasticsearch: return "c5.18xlarge.elasticsearch"
            case .c52xlargeElasticsearch: return "c5.2xlarge.elasticsearch"
            case .c54xlargeElasticsearch: return "c5.4xlarge.elasticsearch"
            case .c59xlargeElasticsearch: return "c5.9xlarge.elasticsearch"
            case .c5LargeElasticsearch: return "c5.large.elasticsearch"
            case .c5XlargeElasticsearch: return "c5.xlarge.elasticsearch"
            case .d22xlargeElasticsearch: return "d2.2xlarge.elasticsearch"
            case .d24xlargeElasticsearch: return "d2.4xlarge.elasticsearch"
            case .d28xlargeElasticsearch: return "d2.8xlarge.elasticsearch"
            case .d2XlargeElasticsearch: return "d2.xlarge.elasticsearch"
            case .i22xlargeElasticsearch: return "i2.2xlarge.elasticsearch"
            case .i2XlargeElasticsearch: return "i2.xlarge.elasticsearch"
            case .i316xlargeElasticsearch: return "i3.16xlarge.elasticsearch"
            case .i32xlargeElasticsearch: return "i3.2xlarge.elasticsearch"
            case .i34xlargeElasticsearch: return "i3.4xlarge.elasticsearch"
            case .i38xlargeElasticsearch: return "i3.8xlarge.elasticsearch"
            case .i3LargeElasticsearch: return "i3.large.elasticsearch"
            case .i3XlargeElasticsearch: return "i3.xlarge.elasticsearch"
            case .m32xlargeElasticsearch: return "m3.2xlarge.elasticsearch"
            case .m3LargeElasticsearch: return "m3.large.elasticsearch"
            case .m3MediumElasticsearch: return "m3.medium.elasticsearch"
            case .m3XlargeElasticsearch: return "m3.xlarge.elasticsearch"
            case .m410xlargeElasticsearch: return "m4.10xlarge.elasticsearch"
            case .m42xlargeElasticsearch: return "m4.2xlarge.elasticsearch"
            case .m44xlargeElasticsearch: return "m4.4xlarge.elasticsearch"
            case .m4LargeElasticsearch: return "m4.large.elasticsearch"
            case .m4XlargeElasticsearch: return "m4.xlarge.elasticsearch"
            case .m512xlargeElasticsearch: return "m5.12xlarge.elasticsearch"
            case .m52xlargeElasticsearch: return "m5.2xlarge.elasticsearch"
            case .m54xlargeElasticsearch: return "m5.4xlarge.elasticsearch"
            case .m5LargeElasticsearch: return "m5.large.elasticsearch"
            case .m5XlargeElasticsearch: return "m5.xlarge.elasticsearch"
            case .r32xlargeElasticsearch: return "r3.2xlarge.elasticsearch"
            case .r34xlargeElasticsearch: return "r3.4xlarge.elasticsearch"
            case .r38xlargeElasticsearch: return "r3.8xlarge.elasticsearch"
            case .r3LargeElasticsearch: return "r3.large.elasticsearch"
            case .r3XlargeElasticsearch: return "r3.xlarge.elasticsearch"
            case .r416xlargeElasticsearch: return "r4.16xlarge.elasticsearch"
            case .r42xlargeElasticsearch: return "r4.2xlarge.elasticsearch"
            case .r44xlargeElasticsearch: return "r4.4xlarge.elasticsearch"
            case .r48xlargeElasticsearch: return "r4.8xlarge.elasticsearch"
            case .r4LargeElasticsearch: return "r4.large.elasticsearch"
            case .r4XlargeElasticsearch: return "r4.xlarge.elasticsearch"
            case .r512xlargeElasticsearch: return "r5.12xlarge.elasticsearch"
            case .r52xlargeElasticsearch: return "r5.2xlarge.elasticsearch"
            case .r54xlargeElasticsearch: return "r5.4xlarge.elasticsearch"
            case .r5LargeElasticsearch: return "r5.large.elasticsearch"
            case .r5XlargeElasticsearch: return "r5.xlarge.elasticsearch"
            case .t2MediumElasticsearch: return "t2.medium.elasticsearch"
            case .t2MicroElasticsearch: return "t2.micro.elasticsearch"
            case .t2SmallElasticsearch: return "t2.small.elasticsearch"
            case .ultrawarm1LargeElasticsearch: return "ultrawarm1.large.elasticsearch"
            case .ultrawarm1MediumElasticsearch: return "ultrawarm1.medium.elasticsearch"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ESPartitionInstanceType(rawValue: rawValue) ?? ESPartitionInstanceType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes {
    public enum ESWarmPartitionInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ultrawarm1LargeElasticsearch
        case ultrawarm1MediumElasticsearch
        case sdkUnknown(Swift.String)

        public static var allCases: [ESWarmPartitionInstanceType] {
            return [
                .ultrawarm1LargeElasticsearch,
                .ultrawarm1MediumElasticsearch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ultrawarm1LargeElasticsearch: return "ultrawarm1.large.elasticsearch"
            case .ultrawarm1MediumElasticsearch: return "ultrawarm1.medium.elasticsearch"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ESWarmPartitionInstanceType(rawValue: rawValue) ?? ESWarmPartitionInstanceType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.ElasticsearchClusterConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case coldStorageOptions = "ColdStorageOptions"
        case dedicatedMasterCount = "DedicatedMasterCount"
        case dedicatedMasterEnabled = "DedicatedMasterEnabled"
        case dedicatedMasterType = "DedicatedMasterType"
        case instanceCount = "InstanceCount"
        case instanceType = "InstanceType"
        case warmCount = "WarmCount"
        case warmEnabled = "WarmEnabled"
        case warmType = "WarmType"
        case zoneAwarenessConfig = "ZoneAwarenessConfig"
        case zoneAwarenessEnabled = "ZoneAwarenessEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let coldStorageOptions = coldStorageOptions {
            try encodeContainer.encode(coldStorageOptions, forKey: .coldStorageOptions)
        }
        if let dedicatedMasterCount = dedicatedMasterCount {
            try encodeContainer.encode(dedicatedMasterCount, forKey: .dedicatedMasterCount)
        }
        if let dedicatedMasterEnabled = dedicatedMasterEnabled {
            try encodeContainer.encode(dedicatedMasterEnabled, forKey: .dedicatedMasterEnabled)
        }
        if let dedicatedMasterType = dedicatedMasterType {
            try encodeContainer.encode(dedicatedMasterType.rawValue, forKey: .dedicatedMasterType)
        }
        if let instanceCount = instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let warmCount = warmCount {
            try encodeContainer.encode(warmCount, forKey: .warmCount)
        }
        if let warmEnabled = warmEnabled {
            try encodeContainer.encode(warmEnabled, forKey: .warmEnabled)
        }
        if let warmType = warmType {
            try encodeContainer.encode(warmType.rawValue, forKey: .warmType)
        }
        if let zoneAwarenessConfig = zoneAwarenessConfig {
            try encodeContainer.encode(zoneAwarenessConfig, forKey: .zoneAwarenessConfig)
        }
        if let zoneAwarenessEnabled = zoneAwarenessEnabled {
            try encodeContainer.encode(zoneAwarenessEnabled, forKey: .zoneAwarenessEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ESPartitionInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let dedicatedMasterEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dedicatedMasterEnabled)
        dedicatedMasterEnabled = dedicatedMasterEnabledDecoded
        let zoneAwarenessEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .zoneAwarenessEnabled)
        zoneAwarenessEnabled = zoneAwarenessEnabledDecoded
        let zoneAwarenessConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ZoneAwarenessConfig.self, forKey: .zoneAwarenessConfig)
        zoneAwarenessConfig = zoneAwarenessConfigDecoded
        let dedicatedMasterTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ESPartitionInstanceType.self, forKey: .dedicatedMasterType)
        dedicatedMasterType = dedicatedMasterTypeDecoded
        let dedicatedMasterCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dedicatedMasterCount)
        dedicatedMasterCount = dedicatedMasterCountDecoded
        let warmEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .warmEnabled)
        warmEnabled = warmEnabledDecoded
        let warmTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ESWarmPartitionInstanceType.self, forKey: .warmType)
        warmType = warmTypeDecoded
        let warmCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .warmCount)
        warmCount = warmCountDecoded
        let coldStorageOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ColdStorageOptions.self, forKey: .coldStorageOptions)
        coldStorageOptions = coldStorageOptionsDecoded
    }
}

extension ElasticsearchClientTypes.ElasticsearchClusterConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ElasticsearchClusterConfig(coldStorageOptions: \(Swift.String(describing: coldStorageOptions)), dedicatedMasterCount: \(Swift.String(describing: dedicatedMasterCount)), dedicatedMasterEnabled: \(Swift.String(describing: dedicatedMasterEnabled)), dedicatedMasterType: \(Swift.String(describing: dedicatedMasterType)), instanceCount: \(Swift.String(describing: instanceCount)), instanceType: \(Swift.String(describing: instanceType)), warmCount: \(Swift.String(describing: warmCount)), warmEnabled: \(Swift.String(describing: warmEnabled)), warmType: \(Swift.String(describing: warmType)), zoneAwarenessConfig: \(Swift.String(describing: zoneAwarenessConfig)), zoneAwarenessEnabled: \(Swift.String(describing: zoneAwarenessEnabled)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies the configuration for the domain cluster, such as the type and number of instances.
    public struct ElasticsearchClusterConfig: Swift.Equatable {
        /// Specifies the ColdStorageOptions configuration for an Elasticsearch domain.
        public let coldStorageOptions: ElasticsearchClientTypes.ColdStorageOptions?
        /// Total number of dedicated master nodes, active and on standby, for the cluster.
        public let dedicatedMasterCount: Swift.Int?
        /// A boolean value to indicate whether a dedicated master node is enabled.  See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-dedicatedmasternodes" target="_blank">About Dedicated Master Nodes for more information.
        public let dedicatedMasterEnabled: Swift.Bool?
        /// The instance type for a dedicated master node.
        public let dedicatedMasterType: ElasticsearchClientTypes.ESPartitionInstanceType?
        /// The number of instances in the specified domain cluster.
        public let instanceCount: Swift.Int?
        /// The instance type for an Elasticsearch cluster. UltraWarm instance types are not supported for data instances.
        public let instanceType: ElasticsearchClientTypes.ESPartitionInstanceType?
        /// The number of warm nodes in the cluster.
        public let warmCount: Swift.Int?
        /// True to enable warm storage.
        public let warmEnabled: Swift.Bool?
        /// The instance type for the Elasticsearch cluster's warm nodes.
        public let warmType: ElasticsearchClientTypes.ESWarmPartitionInstanceType?
        /// Specifies the zone awareness configuration for a domain when zone awareness is enabled.
        public let zoneAwarenessConfig: ElasticsearchClientTypes.ZoneAwarenessConfig?
        /// A boolean value to indicate whether zone awareness is enabled.  See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-zoneawareness" target="_blank">About Zone Awareness for more information.
        public let zoneAwarenessEnabled: Swift.Bool?

        public init (
            coldStorageOptions: ElasticsearchClientTypes.ColdStorageOptions? = nil,
            dedicatedMasterCount: Swift.Int? = nil,
            dedicatedMasterEnabled: Swift.Bool? = nil,
            dedicatedMasterType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil,
            instanceCount: Swift.Int? = nil,
            instanceType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil,
            warmCount: Swift.Int? = nil,
            warmEnabled: Swift.Bool? = nil,
            warmType: ElasticsearchClientTypes.ESWarmPartitionInstanceType? = nil,
            zoneAwarenessConfig: ElasticsearchClientTypes.ZoneAwarenessConfig? = nil,
            zoneAwarenessEnabled: Swift.Bool? = nil
        )
        {
            self.coldStorageOptions = coldStorageOptions
            self.dedicatedMasterCount = dedicatedMasterCount
            self.dedicatedMasterEnabled = dedicatedMasterEnabled
            self.dedicatedMasterType = dedicatedMasterType
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.warmCount = warmCount
            self.warmEnabled = warmEnabled
            self.warmType = warmType
            self.zoneAwarenessConfig = zoneAwarenessConfig
            self.zoneAwarenessEnabled = zoneAwarenessEnabled
        }
    }

}

extension ElasticsearchClientTypes.ElasticsearchClusterConfigStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchClusterConfig.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes.ElasticsearchClusterConfigStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ElasticsearchClusterConfigStatus(options: \(Swift.String(describing: options)), status: \(Swift.String(describing: status)))"}
}

extension ElasticsearchClientTypes {
    ///  Specifies the configuration status for the specified Elasticsearch domain.
    public struct ElasticsearchClusterConfigStatus: Swift.Equatable {
        ///  Specifies the cluster configuration for the specified Elasticsearch domain.
        /// This member is required.
        public let options: ElasticsearchClientTypes.ElasticsearchClusterConfig?
        ///  Specifies the status of the configuration for the specified Elasticsearch domain.
        /// This member is required.
        public let status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.ElasticsearchClusterConfig? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes.ElasticsearchDomainConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case eBSOptions = "EBSOptions"
        case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
        case elasticsearchVersion = "ElasticsearchVersion"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case vPCOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicies = accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = advancedOptions {
            try encodeContainer.encode(advancedOptions, forKey: .advancedOptions)
        }
        if let advancedSecurityOptions = advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let cognitoOptions = cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let domainEndpointOptions = domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let eBSOptions = eBSOptions {
            try encodeContainer.encode(eBSOptions, forKey: .eBSOptions)
        }
        if let elasticsearchClusterConfig = elasticsearchClusterConfig {
            try encodeContainer.encode(elasticsearchClusterConfig, forKey: .elasticsearchClusterConfig)
        }
        if let elasticsearchVersion = elasticsearchVersion {
            try encodeContainer.encode(elasticsearchVersion, forKey: .elasticsearchVersion)
        }
        if let encryptionAtRestOptions = encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let logPublishingOptions = logPublishingOptions {
            try encodeContainer.encode(logPublishingOptions, forKey: .logPublishingOptions)
        }
        if let nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let snapshotOptions = snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let vPCOptions = vPCOptions {
            try encodeContainer.encode(vPCOptions, forKey: .vPCOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elasticsearchVersionDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchVersionStatus.self, forKey: .elasticsearchVersion)
        elasticsearchVersion = elasticsearchVersionDecoded
        let elasticsearchClusterConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchClusterConfigStatus.self, forKey: .elasticsearchClusterConfig)
        elasticsearchClusterConfig = elasticsearchClusterConfigDecoded
        let eBSOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EBSOptionsStatus.self, forKey: .eBSOptions)
        eBSOptions = eBSOptionsDecoded
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AccessPoliciesStatus.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SnapshotOptionsStatus.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vPCOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VPCDerivedInfoStatus.self, forKey: .vPCOptions)
        vPCOptions = vPCOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.CognitoOptionsStatus.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EncryptionAtRestOptionsStatus.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let advancedOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AdvancedOptionsStatus.self, forKey: .advancedOptions)
        advancedOptions = advancedOptionsDecoded
        let logPublishingOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.LogPublishingOptionsStatus.self, forKey: .logPublishingOptions)
        logPublishingOptions = logPublishingOptionsDecoded
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainEndpointOptionsStatus.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AdvancedSecurityOptionsStatus.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneOptionsStatus.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
    }
}

extension ElasticsearchClientTypes.ElasticsearchDomainConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ElasticsearchDomainConfig(accessPolicies: \(Swift.String(describing: accessPolicies)), advancedOptions: \(Swift.String(describing: advancedOptions)), advancedSecurityOptions: \(Swift.String(describing: advancedSecurityOptions)), autoTuneOptions: \(Swift.String(describing: autoTuneOptions)), cognitoOptions: \(Swift.String(describing: cognitoOptions)), domainEndpointOptions: \(Swift.String(describing: domainEndpointOptions)), eBSOptions: \(Swift.String(describing: eBSOptions)), elasticsearchClusterConfig: \(Swift.String(describing: elasticsearchClusterConfig)), elasticsearchVersion: \(Swift.String(describing: elasticsearchVersion)), encryptionAtRestOptions: \(Swift.String(describing: encryptionAtRestOptions)), logPublishingOptions: \(Swift.String(describing: logPublishingOptions)), nodeToNodeEncryptionOptions: \(Swift.String(describing: nodeToNodeEncryptionOptions)), snapshotOptions: \(Swift.String(describing: snapshotOptions)), vPCOptions: \(Swift.String(describing: vPCOptions)))"}
}

extension ElasticsearchClientTypes {
    /// The configuration of an Elasticsearch domain.
    public struct ElasticsearchDomainConfig: Swift.Equatable {
        /// IAM access policy as a JSON-formatted string.
        public let accessPolicies: ElasticsearchClientTypes.AccessPoliciesStatus?
        /// Specifies the AdvancedOptions for the domain.  See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options" target="_blank">Configuring Advanced Options for more information.
        public let advancedOptions: ElasticsearchClientTypes.AdvancedOptionsStatus?
        /// Specifies AdvancedSecurityOptions for the domain.
        public let advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsStatus?
        /// Specifies AutoTuneOptions for the domain.
        public let autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsStatus?
        /// The CognitoOptions for the specified domain. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html" target="_blank">Amazon Cognito Authentication for Kibana.
        public let cognitoOptions: ElasticsearchClientTypes.CognitoOptionsStatus?
        /// Specifies the DomainEndpointOptions for the Elasticsearch domain.
        public let domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptionsStatus?
        /// Specifies the EBSOptions for the Elasticsearch domain.
        public let eBSOptions: ElasticsearchClientTypes.EBSOptionsStatus?
        /// Specifies the ElasticsearchClusterConfig for the Elasticsearch domain.
        public let elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfigStatus?
        /// String of format X.Y to specify version for the Elasticsearch domain.
        public let elasticsearchVersion: ElasticsearchClientTypes.ElasticsearchVersionStatus?
        /// Specifies the EncryptionAtRestOptions for the Elasticsearch domain.
        public let encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptionsStatus?
        /// Log publishing options for the given domain.
        public let logPublishingOptions: ElasticsearchClientTypes.LogPublishingOptionsStatus?
        /// Specifies the NodeToNodeEncryptionOptions for the Elasticsearch domain.
        public let nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus?
        /// Specifies the SnapshotOptions for the Elasticsearch domain.
        public let snapshotOptions: ElasticsearchClientTypes.SnapshotOptionsStatus?
        /// The VPCOptions for the specified domain. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html" target="_blank">VPC Endpoints for Amazon Elasticsearch Service Domains.
        public let vPCOptions: ElasticsearchClientTypes.VPCDerivedInfoStatus?

        public init (
            accessPolicies: ElasticsearchClientTypes.AccessPoliciesStatus? = nil,
            advancedOptions: ElasticsearchClientTypes.AdvancedOptionsStatus? = nil,
            advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsStatus? = nil,
            autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsStatus? = nil,
            cognitoOptions: ElasticsearchClientTypes.CognitoOptionsStatus? = nil,
            domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptionsStatus? = nil,
            eBSOptions: ElasticsearchClientTypes.EBSOptionsStatus? = nil,
            elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfigStatus? = nil,
            elasticsearchVersion: ElasticsearchClientTypes.ElasticsearchVersionStatus? = nil,
            encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptionsStatus? = nil,
            logPublishingOptions: ElasticsearchClientTypes.LogPublishingOptionsStatus? = nil,
            nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus? = nil,
            snapshotOptions: ElasticsearchClientTypes.SnapshotOptionsStatus? = nil,
            vPCOptions: ElasticsearchClientTypes.VPCDerivedInfoStatus? = nil
        )
        {
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.advancedSecurityOptions = advancedSecurityOptions
            self.autoTuneOptions = autoTuneOptions
            self.cognitoOptions = cognitoOptions
            self.domainEndpointOptions = domainEndpointOptions
            self.eBSOptions = eBSOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.elasticsearchVersion = elasticsearchVersion
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.logPublishingOptions = logPublishingOptions
            self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
            self.snapshotOptions = snapshotOptions
            self.vPCOptions = vPCOptions
        }
    }

}

extension ElasticsearchClientTypes.ElasticsearchDomainStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case cognitoOptions = "CognitoOptions"
        case created = "Created"
        case deleted = "Deleted"
        case domainEndpointOptions = "DomainEndpointOptions"
        case domainId = "DomainId"
        case domainName = "DomainName"
        case eBSOptions = "EBSOptions"
        case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
        case elasticsearchVersion = "ElasticsearchVersion"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case endpoint = "Endpoint"
        case endpoints = "Endpoints"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case processing = "Processing"
        case serviceSoftwareOptions = "ServiceSoftwareOptions"
        case snapshotOptions = "SnapshotOptions"
        case upgradeProcessing = "UpgradeProcessing"
        case vPCOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let accessPolicies = accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = advancedOptions {
            var advancedOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .advancedOptions)
            for (dictKey0, advancedoptions0) in advancedOptions {
                try advancedOptionsContainer.encode(advancedoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let advancedSecurityOptions = advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let cognitoOptions = cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let created = created {
            try encodeContainer.encode(created, forKey: .created)
        }
        if let deleted = deleted {
            try encodeContainer.encode(deleted, forKey: .deleted)
        }
        if let domainEndpointOptions = domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let eBSOptions = eBSOptions {
            try encodeContainer.encode(eBSOptions, forKey: .eBSOptions)
        }
        if let elasticsearchClusterConfig = elasticsearchClusterConfig {
            try encodeContainer.encode(elasticsearchClusterConfig, forKey: .elasticsearchClusterConfig)
        }
        if let elasticsearchVersion = elasticsearchVersion {
            try encodeContainer.encode(elasticsearchVersion, forKey: .elasticsearchVersion)
        }
        if let encryptionAtRestOptions = encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let endpoint = endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let endpoints = endpoints {
            var endpointsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .endpoints)
            for (dictKey0, endpointsmap0) in endpoints {
                try endpointsContainer.encode(endpointsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let logPublishingOptions = logPublishingOptions {
            var logPublishingOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .logPublishingOptions)
            for (dictKey0, logpublishingoptions0) in logPublishingOptions {
                try logPublishingOptionsContainer.encode(logpublishingoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let processing = processing {
            try encodeContainer.encode(processing, forKey: .processing)
        }
        if let serviceSoftwareOptions = serviceSoftwareOptions {
            try encodeContainer.encode(serviceSoftwareOptions, forKey: .serviceSoftwareOptions)
        }
        if let snapshotOptions = snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let upgradeProcessing = upgradeProcessing {
            try encodeContainer.encode(upgradeProcessing, forKey: .upgradeProcessing)
        }
        if let vPCOptions = vPCOptions {
            try encodeContainer.encode(vPCOptions, forKey: .vPCOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let createdDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .created)
        created = createdDecoded
        let deletedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleted)
        deleted = deletedDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let endpointsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .endpoints)
        var endpointsDecoded0: [Swift.String:Swift.String]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [Swift.String:Swift.String]()
            for (key0, serviceurl0) in endpointsContainer {
                if let serviceurl0 = serviceurl0 {
                    endpointsDecoded0?[key0] = serviceurl0
                }
            }
        }
        endpoints = endpointsDecoded0
        let processingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .processing)
        processing = processingDecoded
        let upgradeProcessingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .upgradeProcessing)
        upgradeProcessing = upgradeProcessingDecoded
        let elasticsearchVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticsearchVersion)
        elasticsearchVersion = elasticsearchVersionDecoded
        let elasticsearchClusterConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchClusterConfig.self, forKey: .elasticsearchClusterConfig)
        elasticsearchClusterConfig = elasticsearchClusterConfigDecoded
        let eBSOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EBSOptions.self, forKey: .eBSOptions)
        eBSOptions = eBSOptionsDecoded
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SnapshotOptions.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vPCOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VPCDerivedInfo.self, forKey: .vPCOptions)
        vPCOptions = vPCOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.CognitoOptions.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EncryptionAtRestOptions.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.NodeToNodeEncryptionOptions.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let advancedOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .advancedOptions)
        var advancedOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let advancedOptionsContainer = advancedOptionsContainer {
            advancedOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in advancedOptionsContainer {
                if let string0 = string0 {
                    advancedOptionsDecoded0?[key0] = string0
                }
            }
        }
        advancedOptions = advancedOptionsDecoded0
        let logPublishingOptionsContainer = try containerValues.decodeIfPresent([Swift.String: ElasticsearchClientTypes.LogPublishingOption?].self, forKey: .logPublishingOptions)
        var logPublishingOptionsDecoded0: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil
        if let logPublishingOptionsContainer = logPublishingOptionsContainer {
            logPublishingOptionsDecoded0 = [Swift.String:ElasticsearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in logPublishingOptionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    logPublishingOptionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        logPublishingOptions = logPublishingOptionsDecoded0
        let serviceSoftwareOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ServiceSoftwareOptions.self, forKey: .serviceSoftwareOptions)
        serviceSoftwareOptions = serviceSoftwareOptionsDecoded
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainEndpointOptions.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AdvancedSecurityOptions.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneOptionsOutput.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
    }
}

extension ElasticsearchClientTypes.ElasticsearchDomainStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ElasticsearchDomainStatus(aRN: \(Swift.String(describing: aRN)), accessPolicies: \(Swift.String(describing: accessPolicies)), advancedOptions: \(Swift.String(describing: advancedOptions)), advancedSecurityOptions: \(Swift.String(describing: advancedSecurityOptions)), autoTuneOptions: \(Swift.String(describing: autoTuneOptions)), cognitoOptions: \(Swift.String(describing: cognitoOptions)), created: \(Swift.String(describing: created)), deleted: \(Swift.String(describing: deleted)), domainEndpointOptions: \(Swift.String(describing: domainEndpointOptions)), domainId: \(Swift.String(describing: domainId)), domainName: \(Swift.String(describing: domainName)), eBSOptions: \(Swift.String(describing: eBSOptions)), elasticsearchClusterConfig: \(Swift.String(describing: elasticsearchClusterConfig)), elasticsearchVersion: \(Swift.String(describing: elasticsearchVersion)), encryptionAtRestOptions: \(Swift.String(describing: encryptionAtRestOptions)), endpoint: \(Swift.String(describing: endpoint)), endpoints: \(Swift.String(describing: endpoints)), logPublishingOptions: \(Swift.String(describing: logPublishingOptions)), nodeToNodeEncryptionOptions: \(Swift.String(describing: nodeToNodeEncryptionOptions)), processing: \(Swift.String(describing: processing)), serviceSoftwareOptions: \(Swift.String(describing: serviceSoftwareOptions)), snapshotOptions: \(Swift.String(describing: snapshotOptions)), upgradeProcessing: \(Swift.String(describing: upgradeProcessing)), vPCOptions: \(Swift.String(describing: vPCOptions)))"}
}

extension ElasticsearchClientTypes {
    /// The current status of an Elasticsearch domain.
    public struct ElasticsearchDomainStatus: Swift.Equatable {
        /// The Amazon resource name (ARN) of an Elasticsearch domain.  See <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities in Using AWS Identity and Access Management for more information.
        /// This member is required.
        public let aRN: Swift.String?
        ///  IAM access policy as a JSON-formatted string.
        public let accessPolicies: Swift.String?
        /// Specifies the status of the AdvancedOptions
        public let advancedOptions: [Swift.String:Swift.String]?
        /// The current status of the Elasticsearch domain's advanced security options.
        public let advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptions?
        /// The current status of the Elasticsearch domain's Auto-Tune options.
        public let autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsOutput?
        /// The CognitoOptions for the specified domain. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html" target="_blank">Amazon Cognito Authentication for Kibana.
        public let cognitoOptions: ElasticsearchClientTypes.CognitoOptions?
        /// The domain creation status. True if the creation of an Elasticsearch domain is complete. False if domain creation is still in progress.
        public let created: Swift.Bool?
        /// The domain deletion status. True if a delete request has been received for the domain but resource cleanup is still in progress. False if the domain has not been deleted. Once domain deletion is complete, the status of the domain is no longer returned.
        public let deleted: Swift.Bool?
        /// The current status of the Elasticsearch domain's endpoint options.
        public let domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions?
        /// The unique identifier for the specified Elasticsearch domain.
        /// This member is required.
        public let domainId: Swift.String?
        /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
        /// This member is required.
        public let domainName: Swift.String?
        /// The EBSOptions for the specified domain.  See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-ebs" target="_blank">Configuring EBS-based Storage for more information.
        public let eBSOptions: ElasticsearchClientTypes.EBSOptions?
        /// The type and number of instances in the domain cluster.
        /// This member is required.
        public let elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig?
        public let elasticsearchVersion: Swift.String?
        ///  Specifies the status of the EncryptionAtRestOptions.
        public let encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions?
        /// The Elasticsearch domain endpoint that you use to submit index and search requests.
        public let endpoint: Swift.String?
        /// Map containing the Elasticsearch domain endpoints used to submit index and search requests. Example key, value: 'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'.
        public let endpoints: [Swift.String:Swift.String]?
        /// Log publishing options for the given domain.
        public let logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]?
        /// Specifies the status of the NodeToNodeEncryptionOptions.
        public let nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
        /// The status of the Elasticsearch domain configuration. True if Amazon Elasticsearch Service is processing configuration changes. False if the configuration is active.
        public let processing: Swift.Bool?
        /// The current status of the Elasticsearch domain's service software.
        public let serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions?
        /// Specifies the status of the SnapshotOptions
        public let snapshotOptions: ElasticsearchClientTypes.SnapshotOptions?
        /// The status of an Elasticsearch domain version upgrade. True if Amazon Elasticsearch Service is undergoing a version upgrade. False if the configuration is active.
        public let upgradeProcessing: Swift.Bool?
        /// The VPCOptions for the specified domain. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html" target="_blank">VPC Endpoints for Amazon Elasticsearch Service Domains.
        public let vPCOptions: ElasticsearchClientTypes.VPCDerivedInfo?

        public init (
            aRN: Swift.String? = nil,
            accessPolicies: Swift.String? = nil,
            advancedOptions: [Swift.String:Swift.String]? = nil,
            advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptions? = nil,
            autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptionsOutput? = nil,
            cognitoOptions: ElasticsearchClientTypes.CognitoOptions? = nil,
            created: Swift.Bool? = nil,
            deleted: Swift.Bool? = nil,
            domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions? = nil,
            domainId: Swift.String? = nil,
            domainName: Swift.String? = nil,
            eBSOptions: ElasticsearchClientTypes.EBSOptions? = nil,
            elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig? = nil,
            elasticsearchVersion: Swift.String? = nil,
            encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions? = nil,
            endpoint: Swift.String? = nil,
            endpoints: [Swift.String:Swift.String]? = nil,
            logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil,
            nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions? = nil,
            processing: Swift.Bool? = nil,
            serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions? = nil,
            snapshotOptions: ElasticsearchClientTypes.SnapshotOptions? = nil,
            upgradeProcessing: Swift.Bool? = nil,
            vPCOptions: ElasticsearchClientTypes.VPCDerivedInfo? = nil
        )
        {
            self.aRN = aRN
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.advancedSecurityOptions = advancedSecurityOptions
            self.autoTuneOptions = autoTuneOptions
            self.cognitoOptions = cognitoOptions
            self.created = created
            self.deleted = deleted
            self.domainEndpointOptions = domainEndpointOptions
            self.domainId = domainId
            self.domainName = domainName
            self.eBSOptions = eBSOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.elasticsearchVersion = elasticsearchVersion
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.endpoint = endpoint
            self.endpoints = endpoints
            self.logPublishingOptions = logPublishingOptions
            self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
            self.processing = processing
            self.serviceSoftwareOptions = serviceSoftwareOptions
            self.snapshotOptions = snapshotOptions
            self.upgradeProcessing = upgradeProcessing
            self.vPCOptions = vPCOptions
        }
    }

}

extension ElasticsearchClientTypes.ElasticsearchVersionStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes.ElasticsearchVersionStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ElasticsearchVersionStatus(options: \(Swift.String(describing: options)), status: \(Swift.String(describing: status)))"}
}

extension ElasticsearchClientTypes {
    ///  Status of the Elasticsearch version options for the specified Elasticsearch domain.
    public struct ElasticsearchVersionStatus: Swift.Equatable {
        ///  Specifies the Elasticsearch version for the specified Elasticsearch domain.
        /// This member is required.
        public let options: Swift.String?
        ///  Specifies the status of the Elasticsearch version options for the specified Elasticsearch domain.
        /// This member is required.
        public let status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: Swift.String? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes.EncryptionAtRestOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case kmsKeyId = "KmsKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension ElasticsearchClientTypes.EncryptionAtRestOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EncryptionAtRestOptions(enabled: \(Swift.String(describing: enabled)), kmsKeyId: \(Swift.String(describing: kmsKeyId)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies the Encryption At Rest Options.
    public struct EncryptionAtRestOptions: Swift.Equatable {
        /// Specifies the option to enable Encryption At Rest.
        public let enabled: Swift.Bool?
        ///  Specifies the KMS Key ID for Encryption At Rest options.
        public let kmsKeyId: Swift.String?

        public init (
            enabled: Swift.Bool? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension ElasticsearchClientTypes.EncryptionAtRestOptionsStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EncryptionAtRestOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes.EncryptionAtRestOptionsStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EncryptionAtRestOptionsStatus(options: \(Swift.String(describing: options)), status: \(Swift.String(describing: status)))"}
}

extension ElasticsearchClientTypes {
    ///  Status of the Encryption At Rest options for the specified Elasticsearch domain.
    public struct EncryptionAtRestOptionsStatus: Swift.Equatable {
        ///  Specifies the Encryption At Rest options for the specified Elasticsearch domain.
        /// This member is required.
        public let options: ElasticsearchClientTypes.EncryptionAtRestOptions?
        ///  Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
        /// This member is required.
        public let status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.EncryptionAtRestOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes.ErrorDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorMessage = "ErrorMessage"
        case errorType = "ErrorType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let errorType = errorType {
            try encodeContainer.encode(errorType, forKey: .errorType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorType)
        errorType = errorTypeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension ElasticsearchClientTypes.ErrorDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ErrorDetails(errorMessage: \(Swift.String(describing: errorMessage)), errorType: \(Swift.String(describing: errorType)))"}
}

extension ElasticsearchClientTypes {
    public struct ErrorDetails: Swift.Equatable {
        public let errorMessage: Swift.String?
        public let errorType: Swift.String?

        public init (
            errorMessage: Swift.String? = nil,
            errorType: Swift.String? = nil
        )
        {
            self.errorMessage = errorMessage
            self.errorType = errorType
        }
    }

}

extension ElasticsearchClientTypes.Filter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for valuestringlist0 in values {
                try valuesContainer.encode(valuestringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ElasticsearchClientTypes.Filter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Filter(name: \(Swift.String(describing: name)), values: \(Swift.String(describing: values)))"}
}

extension ElasticsearchClientTypes {
    ///
    ///       A filter used to limit results when describing inbound or outbound cross-cluster search connections.
    ///       Multiple values can be specified per filter.
    ///       A cross-cluster search connection must match at least one of the specified values for it to be
    ///       returned from an operation.
    ///
    public struct Filter: Swift.Equatable {
        ///
        ///       Specifies the name of the filter.
        ///
        public let name: Swift.String?
        ///
        ///       Contains one or more values for the filter.
        ///
        public let values: [Swift.String]?

        public init (
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension GetCompatibleElasticsearchVersionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCompatibleElasticsearchVersionsInput(domainName: \(Swift.String(describing: domainName)))"}
}

extension GetCompatibleElasticsearchVersionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetCompatibleElasticsearchVersionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCompatibleElasticsearchVersionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCompatibleElasticsearchVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCompatibleElasticsearchVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCompatibleElasticsearchVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCompatibleElasticsearchVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCompatibleElasticsearchVersionsOutputError>
}

public struct GetCompatibleElasticsearchVersionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCompatibleElasticsearchVersionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCompatibleElasticsearchVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCompatibleElasticsearchVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let domainName = input.operationInput.domainName {
            let domainNameQueryItem = ClientRuntime.URLQueryItem(name: "domainName".urlPercentEncoding(), value: Swift.String(domainName).urlPercentEncoding())
            input.builder.withQueryItem(domainNameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCompatibleElasticsearchVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCompatibleElasticsearchVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCompatibleElasticsearchVersionsOutputError>
}

///
///       Container for request parameters to
///
///         GetCompatibleElasticsearchVersions
///
///       operation.
///
public struct GetCompatibleElasticsearchVersionsInput: Swift.Equatable {
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    public let domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct GetCompatibleElasticsearchVersionsInputBody: Swift.Equatable {
}

extension GetCompatibleElasticsearchVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCompatibleElasticsearchVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCompatibleElasticsearchVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCompatibleElasticsearchVersionsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCompatibleElasticsearchVersionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCompatibleElasticsearchVersionsOutputResponse(compatibleElasticsearchVersions: \(Swift.String(describing: compatibleElasticsearchVersions)))"}
}

extension GetCompatibleElasticsearchVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCompatibleElasticsearchVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.compatibleElasticsearchVersions = output.compatibleElasticsearchVersions
        } else {
            self.compatibleElasticsearchVersions = nil
        }
    }
}

///
///       Container for response returned by
///
///         GetCompatibleElasticsearchVersions
///
///       operation.
///
public struct GetCompatibleElasticsearchVersionsOutputResponse: Swift.Equatable {
    ///
    ///       A map of compatible Elasticsearch versions returned as part of the
    ///
    ///         GetCompatibleElasticsearchVersions
    ///
    ///       operation.
    ///
    public let compatibleElasticsearchVersions: [ElasticsearchClientTypes.CompatibleVersionsMap]?

    public init (
        compatibleElasticsearchVersions: [ElasticsearchClientTypes.CompatibleVersionsMap]? = nil
    )
    {
        self.compatibleElasticsearchVersions = compatibleElasticsearchVersions
    }
}

struct GetCompatibleElasticsearchVersionsOutputResponseBody: Swift.Equatable {
    public let compatibleElasticsearchVersions: [ElasticsearchClientTypes.CompatibleVersionsMap]?
}

extension GetCompatibleElasticsearchVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibleElasticsearchVersions = "CompatibleElasticsearchVersions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compatibleElasticsearchVersionsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.CompatibleVersionsMap?].self, forKey: .compatibleElasticsearchVersions)
        var compatibleElasticsearchVersionsDecoded0:[ElasticsearchClientTypes.CompatibleVersionsMap]? = nil
        if let compatibleElasticsearchVersionsContainer = compatibleElasticsearchVersionsContainer {
            compatibleElasticsearchVersionsDecoded0 = [ElasticsearchClientTypes.CompatibleVersionsMap]()
            for structure0 in compatibleElasticsearchVersionsContainer {
                if let structure0 = structure0 {
                    compatibleElasticsearchVersionsDecoded0?.append(structure0)
                }
            }
        }
        compatibleElasticsearchVersions = compatibleElasticsearchVersionsDecoded0
    }
}

extension GetPackageVersionHistoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPackageVersionHistoryInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), packageID: \(Swift.String(describing: packageID)))"}
}

extension GetPackageVersionHistoryInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetPackageVersionHistoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPackageVersionHistoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPackageVersionHistoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPackageVersionHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPackageVersionHistoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPackageVersionHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPackageVersionHistoryOutputError>
}

public struct GetPackageVersionHistoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPackageVersionHistoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPackageVersionHistoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPackageVersionHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPackageVersionHistoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPackageVersionHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPackageVersionHistoryOutputError>
}

///
///       Container for request parameters to
///
///         GetPackageVersionHistory
///
///       operation.
///
public struct GetPackageVersionHistoryInput: Swift.Equatable {
    /// Limits results to a maximum number of versions.
    public let maxResults: Swift.Int
    /// Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
    public let nextToken: Swift.String?
    /// Returns an audit history of versions of the package.
    /// This member is required.
    public let packageID: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.packageID = packageID
    }
}

struct GetPackageVersionHistoryInputBody: Swift.Equatable {
}

extension GetPackageVersionHistoryInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetPackageVersionHistoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPackageVersionHistoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPackageVersionHistoryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPackageVersionHistoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPackageVersionHistoryOutputResponse(nextToken: \(Swift.String(describing: nextToken)), packageID: \(Swift.String(describing: packageID)), packageVersionHistoryList: \(Swift.String(describing: packageVersionHistoryList)))"}
}

extension GetPackageVersionHistoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetPackageVersionHistoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.packageID = output.packageID
            self.packageVersionHistoryList = output.packageVersionHistoryList
        } else {
            self.nextToken = nil
            self.packageID = nil
            self.packageVersionHistoryList = nil
        }
    }
}

///
///       Container for response returned by
///
///         GetPackageVersionHistory
///
///       operation.
///
public struct GetPackageVersionHistoryOutputResponse: Swift.Equatable {
    public let nextToken: Swift.String?
    public let packageID: Swift.String?
    /// List of PackageVersionHistory objects.
    public let packageVersionHistoryList: [ElasticsearchClientTypes.PackageVersionHistory]?

    public init (
        nextToken: Swift.String? = nil,
        packageID: Swift.String? = nil,
        packageVersionHistoryList: [ElasticsearchClientTypes.PackageVersionHistory]? = nil
    )
    {
        self.nextToken = nextToken
        self.packageID = packageID
        self.packageVersionHistoryList = packageVersionHistoryList
    }
}

struct GetPackageVersionHistoryOutputResponseBody: Swift.Equatable {
    public let packageID: Swift.String?
    public let packageVersionHistoryList: [ElasticsearchClientTypes.PackageVersionHistory]?
    public let nextToken: Swift.String?
}

extension GetPackageVersionHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case packageID = "PackageID"
        case packageVersionHistoryList = "PackageVersionHistoryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageVersionHistoryListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.PackageVersionHistory?].self, forKey: .packageVersionHistoryList)
        var packageVersionHistoryListDecoded0:[ElasticsearchClientTypes.PackageVersionHistory]? = nil
        if let packageVersionHistoryListContainer = packageVersionHistoryListContainer {
            packageVersionHistoryListDecoded0 = [ElasticsearchClientTypes.PackageVersionHistory]()
            for structure0 in packageVersionHistoryListContainer {
                if let structure0 = structure0 {
                    packageVersionHistoryListDecoded0?.append(structure0)
                }
            }
        }
        packageVersionHistoryList = packageVersionHistoryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetUpgradeHistoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUpgradeHistoryInput(domainName: \(Swift.String(describing: domainName)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetUpgradeHistoryInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetUpgradeHistoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetUpgradeHistoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetUpgradeHistoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetUpgradeHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetUpgradeHistoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetUpgradeHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetUpgradeHistoryOutputError>
}

public struct GetUpgradeHistoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetUpgradeHistoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetUpgradeHistoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetUpgradeHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetUpgradeHistoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetUpgradeHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetUpgradeHistoryOutputError>
}

///
///       Container for request parameters to
///
///         GetUpgradeHistory
///
///       operation.
///
public struct GetUpgradeHistoryInput: Swift.Equatable {
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    /// This member is required.
    public let domainName: Swift.String?
    ///
    ///       Set this value to limit the number of results returned.
    ///
    public let maxResults: Swift.Int
    ///
    ///       Paginated APIs accepts NextToken input to returns next page results and provides
    ///       a NextToken output in the response which can be used by the client to retrieve more results.
    ///
    public let nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetUpgradeHistoryInputBody: Swift.Equatable {
}

extension GetUpgradeHistoryInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetUpgradeHistoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetUpgradeHistoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetUpgradeHistoryOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUpgradeHistoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUpgradeHistoryOutputResponse(nextToken: \(Swift.String(describing: nextToken)), upgradeHistories: \(Swift.String(describing: upgradeHistories)))"}
}

extension GetUpgradeHistoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetUpgradeHistoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.upgradeHistories = output.upgradeHistories
        } else {
            self.nextToken = nil
            self.upgradeHistories = nil
        }
    }
}

///
///       Container for response returned by
///
///         GetUpgradeHistory
///
///       operation.
///
public struct GetUpgradeHistoryOutputResponse: Swift.Equatable {
    /// Pagination token that needs to be supplied to the next call to get the next page of results
    public let nextToken: Swift.String?
    ///
    ///       A list of
    ///
    ///         UpgradeHistory
    ///
    ///       objects corresponding to each Upgrade or Upgrade Eligibility Check performed on a domain returned as part of
    ///
    ///         GetUpgradeHistoryResponse
    ///
    ///       object.
    ///
    public let upgradeHistories: [ElasticsearchClientTypes.UpgradeHistory]?

    public init (
        nextToken: Swift.String? = nil,
        upgradeHistories: [ElasticsearchClientTypes.UpgradeHistory]? = nil
    )
    {
        self.nextToken = nextToken
        self.upgradeHistories = upgradeHistories
    }
}

struct GetUpgradeHistoryOutputResponseBody: Swift.Equatable {
    public let upgradeHistories: [ElasticsearchClientTypes.UpgradeHistory]?
    public let nextToken: Swift.String?
}

extension GetUpgradeHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case upgradeHistories = "UpgradeHistories"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeHistoriesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.UpgradeHistory?].self, forKey: .upgradeHistories)
        var upgradeHistoriesDecoded0:[ElasticsearchClientTypes.UpgradeHistory]? = nil
        if let upgradeHistoriesContainer = upgradeHistoriesContainer {
            upgradeHistoriesDecoded0 = [ElasticsearchClientTypes.UpgradeHistory]()
            for structure0 in upgradeHistoriesContainer {
                if let structure0 = structure0 {
                    upgradeHistoriesDecoded0?.append(structure0)
                }
            }
        }
        upgradeHistories = upgradeHistoriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetUpgradeStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUpgradeStatusInput(domainName: \(Swift.String(describing: domainName)))"}
}

extension GetUpgradeStatusInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetUpgradeStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetUpgradeStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetUpgradeStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetUpgradeStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetUpgradeStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetUpgradeStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetUpgradeStatusOutputError>
}

public struct GetUpgradeStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetUpgradeStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetUpgradeStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetUpgradeStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetUpgradeStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetUpgradeStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetUpgradeStatusOutputError>
}

///
///       Container for request parameters to
///
///         GetUpgradeStatus
///
///       operation.
///
public struct GetUpgradeStatusInput: Swift.Equatable {
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    /// This member is required.
    public let domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct GetUpgradeStatusInputBody: Swift.Equatable {
}

extension GetUpgradeStatusInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetUpgradeStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetUpgradeStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetUpgradeStatusOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUpgradeStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUpgradeStatusOutputResponse(stepStatus: \(Swift.String(describing: stepStatus)), upgradeName: \(Swift.String(describing: upgradeName)), upgradeStep: \(Swift.String(describing: upgradeStep)))"}
}

extension GetUpgradeStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetUpgradeStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stepStatus = output.stepStatus
            self.upgradeName = output.upgradeName
            self.upgradeStep = output.upgradeStep
        } else {
            self.stepStatus = nil
            self.upgradeName = nil
            self.upgradeStep = nil
        }
    }
}

///
///       Container for response returned by
///
///         GetUpgradeStatus
///
///       operation.
///
public struct GetUpgradeStatusOutputResponse: Swift.Equatable {
    ///
    ///       One of 4 statuses that a step can go through returned as part of the
    ///
    ///         GetUpgradeStatusResponse
    ///
    ///       object. The status can take one of the following values:
    ///
    ///         In Progress
    ///         Succeeded
    ///         Succeeded with Issues
    ///         Failed
    ///
    ///
    public let stepStatus: ElasticsearchClientTypes.UpgradeStatus?
    /// A string that describes the update briefly
    public let upgradeName: Swift.String?
    ///
    ///       Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through:
    ///
    ///         PreUpgradeCheck
    ///         Snapshot
    ///         Upgrade
    ///
    ///
    public let upgradeStep: ElasticsearchClientTypes.UpgradeStep?

    public init (
        stepStatus: ElasticsearchClientTypes.UpgradeStatus? = nil,
        upgradeName: Swift.String? = nil,
        upgradeStep: ElasticsearchClientTypes.UpgradeStep? = nil
    )
    {
        self.stepStatus = stepStatus
        self.upgradeName = upgradeName
        self.upgradeStep = upgradeStep
    }
}

struct GetUpgradeStatusOutputResponseBody: Swift.Equatable {
    public let upgradeStep: ElasticsearchClientTypes.UpgradeStep?
    public let stepStatus: ElasticsearchClientTypes.UpgradeStatus?
    public let upgradeName: Swift.String?
}

extension GetUpgradeStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stepStatus = "StepStatus"
        case upgradeName = "UpgradeName"
        case upgradeStep = "UpgradeStep"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeStepDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.UpgradeStep.self, forKey: .upgradeStep)
        upgradeStep = upgradeStepDecoded
        let stepStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.UpgradeStatus.self, forKey: .stepStatus)
        stepStatus = stepStatusDecoded
        let upgradeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .upgradeName)
        upgradeName = upgradeNameDecoded
    }
}

extension ElasticsearchClientTypes.InboundCrossClusterSearchConnection: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionStatus = "ConnectionStatus"
        case crossClusterSearchConnectionId = "CrossClusterSearchConnectionId"
        case destinationDomainInfo = "DestinationDomainInfo"
        case sourceDomainInfo = "SourceDomainInfo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionStatus = connectionStatus {
            try encodeContainer.encode(connectionStatus, forKey: .connectionStatus)
        }
        if let crossClusterSearchConnectionId = crossClusterSearchConnectionId {
            try encodeContainer.encode(crossClusterSearchConnectionId, forKey: .crossClusterSearchConnectionId)
        }
        if let destinationDomainInfo = destinationDomainInfo {
            try encodeContainer.encode(destinationDomainInfo, forKey: .destinationDomainInfo)
        }
        if let sourceDomainInfo = sourceDomainInfo {
            try encodeContainer.encode(sourceDomainInfo, forKey: .sourceDomainInfo)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .sourceDomainInfo)
        sourceDomainInfo = sourceDomainInfoDecoded
        let destinationDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .destinationDomainInfo)
        destinationDomainInfo = destinationDomainInfoDecoded
        let crossClusterSearchConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crossClusterSearchConnectionId)
        crossClusterSearchConnectionId = crossClusterSearchConnectionIdDecoded
        let connectionStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus.self, forKey: .connectionStatus)
        connectionStatus = connectionStatusDecoded
    }
}

extension ElasticsearchClientTypes.InboundCrossClusterSearchConnection: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InboundCrossClusterSearchConnection(connectionStatus: \(Swift.String(describing: connectionStatus)), crossClusterSearchConnectionId: \(Swift.String(describing: crossClusterSearchConnectionId)), destinationDomainInfo: \(Swift.String(describing: destinationDomainInfo)), sourceDomainInfo: \(Swift.String(describing: sourceDomainInfo)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies details of an inbound connection.
    public struct InboundCrossClusterSearchConnection: Swift.Equatable {
        /// Specifies the InboundCrossClusterSearchConnectionStatus for the outbound connection.
        public let connectionStatus: ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus?
        /// Specifies the connection id for the inbound cross-cluster search connection.
        public let crossClusterSearchConnectionId: Swift.String?
        /// Specifies the DomainInformation for the destination Elasticsearch domain.
        public let destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
        /// Specifies the DomainInformation for the source Elasticsearch domain.
        public let sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?

        public init (
            connectionStatus: ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus? = nil,
            crossClusterSearchConnectionId: Swift.String? = nil,
            destinationDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil,
            sourceDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil
        )
        {
            self.connectionStatus = connectionStatus
            self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
            self.destinationDomainInfo = destinationDomainInfo
            self.sourceDomainInfo = sourceDomainInfo
        }
    }

}

extension ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case statusCode = "StatusCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let statusCode = statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusCodeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InboundCrossClusterSearchConnectionStatus(message: \(Swift.String(describing: message)), statusCode: \(Swift.String(describing: statusCode)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies the coonection status of an inbound cross-cluster search connection.
    public struct InboundCrossClusterSearchConnectionStatus: Swift.Equatable {
        /// Specifies verbose information for the inbound connection status.
        public let message: Swift.String?
        /// The state code for inbound connection. This can be one of the following:
        ///
        ///       PENDING_ACCEPTANCE: Inbound connection is not yet accepted by destination domain owner.
        ///       APPROVED: Inbound connection is pending acceptance by destination domain owner.
        ///       REJECTING: Inbound connection rejection is in process.
        ///       REJECTED: Inbound connection is rejected.
        ///       DELETING: Inbound connection deletion is in progress.
        ///       DELETED: Inbound connection is deleted and cannot be used further.
        ///
        public let statusCode: ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatusCode?

        public init (
            message: Swift.String? = nil,
            statusCode: ElasticsearchClientTypes.InboundCrossClusterSearchConnectionStatusCode? = nil
        )
        {
            self.message = message
            self.statusCode = statusCode
        }
    }

}

extension ElasticsearchClientTypes {
    public enum InboundCrossClusterSearchConnectionStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case approved
        case deleted
        case deleting
        case pendingAcceptance
        case rejected
        case rejecting
        case sdkUnknown(Swift.String)

        public static var allCases: [InboundCrossClusterSearchConnectionStatusCode] {
            return [
                .approved,
                .deleted,
                .deleting,
                .pendingAcceptance,
                .rejected,
                .rejecting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .approved: return "APPROVED"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .pendingAcceptance: return "PENDING_ACCEPTANCE"
            case .rejected: return "REJECTED"
            case .rejecting: return "REJECTING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InboundCrossClusterSearchConnectionStatusCode(rawValue: rawValue) ?? InboundCrossClusterSearchConnectionStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.InstanceCountLimits: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumInstanceCount = "MaximumInstanceCount"
        case minimumInstanceCount = "MinimumInstanceCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumInstanceCount != 0 {
            try encodeContainer.encode(maximumInstanceCount, forKey: .maximumInstanceCount)
        }
        if minimumInstanceCount != 0 {
            try encodeContainer.encode(minimumInstanceCount, forKey: .minimumInstanceCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumInstanceCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .minimumInstanceCount)
        minimumInstanceCount = minimumInstanceCountDecoded
        let maximumInstanceCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .maximumInstanceCount)
        maximumInstanceCount = maximumInstanceCountDecoded
    }
}

extension ElasticsearchClientTypes.InstanceCountLimits: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceCountLimits(maximumInstanceCount: \(Swift.String(describing: maximumInstanceCount)), minimumInstanceCount: \(Swift.String(describing: minimumInstanceCount)))"}
}

extension ElasticsearchClientTypes {
    ///
    ///       InstanceCountLimits represents the limits on number of instances that be created in Amazon Elasticsearch for
    ///       given InstanceType.
    ///
    public struct InstanceCountLimits: Swift.Equatable {
        ///
        ///       Maximum number of Instances that can be instantiated for given InstanceType.
        ///
        public let maximumInstanceCount: Swift.Int
        ///
        ///       Minimum number of Instances that can be instantiated for given InstanceType.
        ///
        public let minimumInstanceCount: Swift.Int

        public init (
            maximumInstanceCount: Swift.Int = 0,
            minimumInstanceCount: Swift.Int = 0
        )
        {
            self.maximumInstanceCount = maximumInstanceCount
            self.minimumInstanceCount = minimumInstanceCount
        }
    }

}

extension ElasticsearchClientTypes.InstanceLimits: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceCountLimits = "InstanceCountLimits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceCountLimits = instanceCountLimits {
            try encodeContainer.encode(instanceCountLimits, forKey: .instanceCountLimits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceCountLimitsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.InstanceCountLimits.self, forKey: .instanceCountLimits)
        instanceCountLimits = instanceCountLimitsDecoded
    }
}

extension ElasticsearchClientTypes.InstanceLimits: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceLimits(instanceCountLimits: \(Swift.String(describing: instanceCountLimits)))"}
}

extension ElasticsearchClientTypes {
    /// InstanceLimits represents the list of instance related attributes that are available for given InstanceType.
    ///
    public struct InstanceLimits: Swift.Equatable {
        ///
        ///       InstanceCountLimits represents the limits on number of instances that be created in Amazon Elasticsearch for
        ///       given InstanceType.
        ///
        public let instanceCountLimits: ElasticsearchClientTypes.InstanceCountLimits?

        public init (
            instanceCountLimits: ElasticsearchClientTypes.InstanceCountLimits? = nil
        )
        {
            self.instanceCountLimits = instanceCountLimits
        }
    }

}

extension InternalException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalException(message: \(Swift.String(describing: message)))"}
}

extension InternalException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
public struct InternalException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidPaginationTokenException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidPaginationTokenException(message: \(Swift.String(describing: message)))"}
}

extension InvalidPaginationTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidPaginationTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request processing has failed because of invalid pagination token provided by customer. Returns an HTTP status code of 400.
public struct InvalidPaginationTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidPaginationTokenExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidPaginationTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTypeException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidTypeException(message: \(Swift.String(describing: message)))"}
}

extension InvalidTypeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidTypeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for trying to create or access sub-resource that is either invalid or not supported. Gives http status code of 409.
public struct InvalidTypeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTypeExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidTypeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for trying to create more than allowed resources or sub-resources. Gives http status code of 409.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticsearchClientTypes.Limits: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalLimits = "AdditionalLimits"
        case instanceLimits = "InstanceLimits"
        case storageTypes = "StorageTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalLimits = additionalLimits {
            var additionalLimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalLimits)
            for additionallimitlist0 in additionalLimits {
                try additionalLimitsContainer.encode(additionallimitlist0)
            }
        }
        if let instanceLimits = instanceLimits {
            try encodeContainer.encode(instanceLimits, forKey: .instanceLimits)
        }
        if let storageTypes = storageTypes {
            var storageTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .storageTypes)
            for storagetypelist0 in storageTypes {
                try storageTypesContainer.encode(storagetypelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageTypesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.StorageType?].self, forKey: .storageTypes)
        var storageTypesDecoded0:[ElasticsearchClientTypes.StorageType]? = nil
        if let storageTypesContainer = storageTypesContainer {
            storageTypesDecoded0 = [ElasticsearchClientTypes.StorageType]()
            for structure0 in storageTypesContainer {
                if let structure0 = structure0 {
                    storageTypesDecoded0?.append(structure0)
                }
            }
        }
        storageTypes = storageTypesDecoded0
        let instanceLimitsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.InstanceLimits.self, forKey: .instanceLimits)
        instanceLimits = instanceLimitsDecoded
        let additionalLimitsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.AdditionalLimit?].self, forKey: .additionalLimits)
        var additionalLimitsDecoded0:[ElasticsearchClientTypes.AdditionalLimit]? = nil
        if let additionalLimitsContainer = additionalLimitsContainer {
            additionalLimitsDecoded0 = [ElasticsearchClientTypes.AdditionalLimit]()
            for structure0 in additionalLimitsContainer {
                if let structure0 = structure0 {
                    additionalLimitsDecoded0?.append(structure0)
                }
            }
        }
        additionalLimits = additionalLimitsDecoded0
    }
}

extension ElasticsearchClientTypes.Limits: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Limits(additionalLimits: \(Swift.String(describing: additionalLimits)), instanceLimits: \(Swift.String(describing: instanceLimits)), storageTypes: \(Swift.String(describing: storageTypes)))"}
}

extension ElasticsearchClientTypes {
    ///
    ///       Limits for given InstanceType and for each of it's role.
    ///       <br></br>
    ///       Limits contains following
    ///
    ///         StorageTypes,
    ///
    ///
    ///         InstanceLimits
    ///
    ///       and
    ///
    ///         AdditionalLimits
    ///
    ///
    public struct Limits: Swift.Equatable {
        ///
        ///       List of additional limits that are specific to a given InstanceType and for each of it's
        ///
        ///         InstanceRole
        ///
        ///       .
        ///
        public let additionalLimits: [ElasticsearchClientTypes.AdditionalLimit]?
        /// InstanceLimits represents the list of instance related attributes that are available for given InstanceType.
        ///
        public let instanceLimits: ElasticsearchClientTypes.InstanceLimits?
        /// StorageType represents the list of storage related types and attributes
        ///       that are available for given InstanceType.
        ///
        public let storageTypes: [ElasticsearchClientTypes.StorageType]?

        public init (
            additionalLimits: [ElasticsearchClientTypes.AdditionalLimit]? = nil,
            instanceLimits: ElasticsearchClientTypes.InstanceLimits? = nil,
            storageTypes: [ElasticsearchClientTypes.StorageType]? = nil
        )
        {
            self.additionalLimits = additionalLimits
            self.instanceLimits = instanceLimits
            self.storageTypes = storageTypes
        }
    }

}

extension ListDomainNamesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDomainNamesInput()"}
}

extension ListDomainNamesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListDomainNamesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDomainNamesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDomainNamesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDomainNamesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDomainNamesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDomainNamesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDomainNamesOutputError>
}

public struct ListDomainNamesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDomainNamesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDomainNamesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDomainNamesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDomainNamesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDomainNamesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDomainNamesOutputError>
}

public struct ListDomainNamesInput: Swift.Equatable {

    public init() {}
}

struct ListDomainNamesInputBody: Swift.Equatable {
}

extension ListDomainNamesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDomainNamesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDomainNamesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDomainNamesOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDomainNamesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDomainNamesOutputResponse(domainNames: \(Swift.String(describing: domainNames)))"}
}

extension ListDomainNamesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDomainNamesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainNames = output.domainNames
        } else {
            self.domainNames = nil
        }
    }
}

/// The result of a ListDomainNames operation. Contains the names of all Elasticsearch domains owned by this account.
public struct ListDomainNamesOutputResponse: Swift.Equatable {
    /// List of Elasticsearch domain names.
    public let domainNames: [ElasticsearchClientTypes.DomainInfo]?

    public init (
        domainNames: [ElasticsearchClientTypes.DomainInfo]? = nil
    )
    {
        self.domainNames = domainNames
    }
}

struct ListDomainNamesOutputResponseBody: Swift.Equatable {
    public let domainNames: [ElasticsearchClientTypes.DomainInfo]?
}

extension ListDomainNamesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainNames = "DomainNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNamesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.DomainInfo?].self, forKey: .domainNames)
        var domainNamesDecoded0:[ElasticsearchClientTypes.DomainInfo]? = nil
        if let domainNamesContainer = domainNamesContainer {
            domainNamesDecoded0 = [ElasticsearchClientTypes.DomainInfo]()
            for structure0 in domainNamesContainer {
                if let structure0 = structure0 {
                    domainNamesDecoded0?.append(structure0)
                }
            }
        }
        domainNames = domainNamesDecoded0
    }
}

extension ListDomainsForPackageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDomainsForPackageInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), packageID: \(Swift.String(describing: packageID)))"}
}

extension ListDomainsForPackageInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListDomainsForPackageInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDomainsForPackageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDomainsForPackageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDomainsForPackageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDomainsForPackageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDomainsForPackageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDomainsForPackageOutputError>
}

public struct ListDomainsForPackageInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDomainsForPackageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDomainsForPackageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDomainsForPackageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDomainsForPackageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDomainsForPackageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDomainsForPackageOutputError>
}

///
///       Container for request parameters to
///
///         ListDomainsForPackage
///
///       operation.
///
public struct ListDomainsForPackageInput: Swift.Equatable {
    /// Limits results to a maximum number of domains.
    public let maxResults: Swift.Int
    /// Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
    public let nextToken: Swift.String?
    /// The package for which to list domains.
    /// This member is required.
    public let packageID: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        packageID: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.packageID = packageID
    }
}

struct ListDomainsForPackageInputBody: Swift.Equatable {
}

extension ListDomainsForPackageInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDomainsForPackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDomainsForPackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDomainsForPackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDomainsForPackageOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDomainsForPackageOutputResponse(domainPackageDetailsList: \(Swift.String(describing: domainPackageDetailsList)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListDomainsForPackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDomainsForPackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainPackageDetailsList = output.domainPackageDetailsList
            self.nextToken = output.nextToken
        } else {
            self.domainPackageDetailsList = nil
            self.nextToken = nil
        }
    }
}

///
///       Container for response parameters to
///
///         ListDomainsForPackage
///
///       operation.
///
public struct ListDomainsForPackageOutputResponse: Swift.Equatable {
    /// List of DomainPackageDetails objects.
    public let domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]?
    public let nextToken: Swift.String?

    public init (
        domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainPackageDetailsList = domainPackageDetailsList
        self.nextToken = nextToken
    }
}

struct ListDomainsForPackageOutputResponseBody: Swift.Equatable {
    public let domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]?
    public let nextToken: Swift.String?
}

extension ListDomainsForPackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainPackageDetailsList = "DomainPackageDetailsList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainPackageDetailsListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.DomainPackageDetails?].self, forKey: .domainPackageDetailsList)
        var domainPackageDetailsListDecoded0:[ElasticsearchClientTypes.DomainPackageDetails]? = nil
        if let domainPackageDetailsListContainer = domainPackageDetailsListContainer {
            domainPackageDetailsListDecoded0 = [ElasticsearchClientTypes.DomainPackageDetails]()
            for structure0 in domainPackageDetailsListContainer {
                if let structure0 = structure0 {
                    domainPackageDetailsListDecoded0?.append(structure0)
                }
            }
        }
        domainPackageDetailsList = domainPackageDetailsListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListElasticsearchInstanceTypesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListElasticsearchInstanceTypesInput(domainName: \(Swift.String(describing: domainName)), elasticsearchVersion: \(Swift.String(describing: elasticsearchVersion)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListElasticsearchInstanceTypesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListElasticsearchInstanceTypesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListElasticsearchInstanceTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListElasticsearchInstanceTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListElasticsearchInstanceTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListElasticsearchInstanceTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListElasticsearchInstanceTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListElasticsearchInstanceTypesOutputError>
}

public struct ListElasticsearchInstanceTypesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListElasticsearchInstanceTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListElasticsearchInstanceTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListElasticsearchInstanceTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let domainName = input.operationInput.domainName {
            let domainNameQueryItem = ClientRuntime.URLQueryItem(name: "domainName".urlPercentEncoding(), value: Swift.String(domainName).urlPercentEncoding())
            input.builder.withQueryItem(domainNameQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListElasticsearchInstanceTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListElasticsearchInstanceTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListElasticsearchInstanceTypesOutputError>
}

///
///       Container for the parameters to the
///
///         ListElasticsearchInstanceTypes
///
///       operation.
///
public struct ListElasticsearchInstanceTypesInput: Swift.Equatable {
    /// DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are
    ///       querying for list of available Elasticsearch instance types when modifying existing domain.
    ///
    public let domainName: Swift.String?
    /// Version of Elasticsearch for which list of supported elasticsearch
    ///       instance types are needed.
    ///
    /// This member is required.
    public let elasticsearchVersion: Swift.String?
    ///
    ///     Set this value to limit the number of results returned.
    ///     Value provided must be greater than 30 else it wont be honored.
    ///
    public let maxResults: Swift.Int
    /// NextToken should be sent in case if earlier API call produced result
    ///       containing NextToken. It is used for pagination.
    ///
    public let nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        elasticsearchVersion: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.elasticsearchVersion = elasticsearchVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListElasticsearchInstanceTypesInputBody: Swift.Equatable {
}

extension ListElasticsearchInstanceTypesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListElasticsearchInstanceTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListElasticsearchInstanceTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListElasticsearchInstanceTypesOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListElasticsearchInstanceTypesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListElasticsearchInstanceTypesOutputResponse(elasticsearchInstanceTypes: \(Swift.String(describing: elasticsearchInstanceTypes)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListElasticsearchInstanceTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListElasticsearchInstanceTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.elasticsearchInstanceTypes = output.elasticsearchInstanceTypes
            self.nextToken = output.nextToken
        } else {
            self.elasticsearchInstanceTypes = nil
            self.nextToken = nil
        }
    }
}

///
///       Container for the parameters returned by
///
///         ListElasticsearchInstanceTypes
///
///       operation.
///
public struct ListElasticsearchInstanceTypesOutputResponse: Swift.Equatable {
    ///
    ///       List of instance types supported by Amazon Elasticsearch service for
    ///       given
    ///
    ///         ElasticsearchVersion
    ///
    ///
    public let elasticsearchInstanceTypes: [ElasticsearchClientTypes.ESPartitionInstanceType]?
    /// In case if there are more results available NextToken would be
    ///       present, make further request to the same API with
    ///       received NextToken to paginate remaining results.
    ///
    public let nextToken: Swift.String?

    public init (
        elasticsearchInstanceTypes: [ElasticsearchClientTypes.ESPartitionInstanceType]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.elasticsearchInstanceTypes = elasticsearchInstanceTypes
        self.nextToken = nextToken
    }
}

struct ListElasticsearchInstanceTypesOutputResponseBody: Swift.Equatable {
    public let elasticsearchInstanceTypes: [ElasticsearchClientTypes.ESPartitionInstanceType]?
    public let nextToken: Swift.String?
}

extension ListElasticsearchInstanceTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case elasticsearchInstanceTypes = "ElasticsearchInstanceTypes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elasticsearchInstanceTypesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.ESPartitionInstanceType?].self, forKey: .elasticsearchInstanceTypes)
        var elasticsearchInstanceTypesDecoded0:[ElasticsearchClientTypes.ESPartitionInstanceType]? = nil
        if let elasticsearchInstanceTypesContainer = elasticsearchInstanceTypesContainer {
            elasticsearchInstanceTypesDecoded0 = [ElasticsearchClientTypes.ESPartitionInstanceType]()
            for string0 in elasticsearchInstanceTypesContainer {
                if let string0 = string0 {
                    elasticsearchInstanceTypesDecoded0?.append(string0)
                }
            }
        }
        elasticsearchInstanceTypes = elasticsearchInstanceTypesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListElasticsearchVersionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListElasticsearchVersionsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListElasticsearchVersionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListElasticsearchVersionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListElasticsearchVersionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListElasticsearchVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListElasticsearchVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListElasticsearchVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListElasticsearchVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListElasticsearchVersionsOutputError>
}

public struct ListElasticsearchVersionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListElasticsearchVersionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListElasticsearchVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListElasticsearchVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListElasticsearchVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListElasticsearchVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListElasticsearchVersionsOutputError>
}

///
///       Container for the parameters to the
///
///         ListElasticsearchVersions
///
///       operation.
///
///         Use
///
///           MaxResults
///
///         to control the maximum number of results to retrieve in a single
///         call.
///
///
///         Use
///
///           NextToken
///
///         in response to retrieve more results. If the received response does
///         not contain a NextToken, then there are no more results to retrieve.
///
///
public struct ListElasticsearchVersionsInput: Swift.Equatable {
    ///
    ///       Set this value to limit the number of results returned.
    ///       Value provided must be greater than 10 else it wont be honored.
    ///
    public let maxResults: Swift.Int
    ///
    ///       Paginated APIs accepts NextToken input to returns next page results and provides
    ///       a NextToken output in the response which can be used by the client to retrieve more results.
    ///
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListElasticsearchVersionsInputBody: Swift.Equatable {
}

extension ListElasticsearchVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListElasticsearchVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListElasticsearchVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListElasticsearchVersionsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListElasticsearchVersionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListElasticsearchVersionsOutputResponse(elasticsearchVersions: \(Swift.String(describing: elasticsearchVersions)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListElasticsearchVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListElasticsearchVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.elasticsearchVersions = output.elasticsearchVersions
            self.nextToken = output.nextToken
        } else {
            self.elasticsearchVersions = nil
            self.nextToken = nil
        }
    }
}

///
///       Container for the parameters for response received from
///
///         ListElasticsearchVersions
///
///       operation.
///
public struct ListElasticsearchVersionsOutputResponse: Swift.Equatable {
    /// List of supported elastic search versions.
    ///
    public let elasticsearchVersions: [Swift.String]?
    ///
    ///       Paginated APIs accepts NextToken input to returns next page results and provides
    ///       a NextToken output in the response which can be used by the client to retrieve more results.
    ///
    public let nextToken: Swift.String?

    public init (
        elasticsearchVersions: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.elasticsearchVersions = elasticsearchVersions
        self.nextToken = nextToken
    }
}

struct ListElasticsearchVersionsOutputResponseBody: Swift.Equatable {
    public let elasticsearchVersions: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListElasticsearchVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case elasticsearchVersions = "ElasticsearchVersions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elasticsearchVersionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .elasticsearchVersions)
        var elasticsearchVersionsDecoded0:[Swift.String]? = nil
        if let elasticsearchVersionsContainer = elasticsearchVersionsContainer {
            elasticsearchVersionsDecoded0 = [Swift.String]()
            for string0 in elasticsearchVersionsContainer {
                if let string0 = string0 {
                    elasticsearchVersionsDecoded0?.append(string0)
                }
            }
        }
        elasticsearchVersions = elasticsearchVersionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPackagesForDomainInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPackagesForDomainInput(domainName: \(Swift.String(describing: domainName)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListPackagesForDomainInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListPackagesForDomainInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPackagesForDomainInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPackagesForDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPackagesForDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPackagesForDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPackagesForDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPackagesForDomainOutputError>
}

public struct ListPackagesForDomainInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPackagesForDomainInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPackagesForDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPackagesForDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPackagesForDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPackagesForDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPackagesForDomainOutputError>
}

///
///       Container for request parameters to
///
///         ListPackagesForDomain
///
///       operation.
///
public struct ListPackagesForDomainInput: Swift.Equatable {
    /// The name of the domain for which you want to list associated packages.
    /// This member is required.
    public let domainName: Swift.String?
    /// Limits results to a maximum number of packages.
    public let maxResults: Swift.Int
    /// Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
    public let nextToken: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListPackagesForDomainInputBody: Swift.Equatable {
}

extension ListPackagesForDomainInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListPackagesForDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPackagesForDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPackagesForDomainOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPackagesForDomainOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPackagesForDomainOutputResponse(domainPackageDetailsList: \(Swift.String(describing: domainPackageDetailsList)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListPackagesForDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPackagesForDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainPackageDetailsList = output.domainPackageDetailsList
            self.nextToken = output.nextToken
        } else {
            self.domainPackageDetailsList = nil
            self.nextToken = nil
        }
    }
}

///
///       Container for response parameters to
///
///         ListPackagesForDomain
///
///       operation.
///
public struct ListPackagesForDomainOutputResponse: Swift.Equatable {
    /// List of DomainPackageDetails objects.
    public let domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]?
    /// Pagination token that needs to be supplied to the next call to get the next page of results.
    public let nextToken: Swift.String?

    public init (
        domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainPackageDetailsList = domainPackageDetailsList
        self.nextToken = nextToken
    }
}

struct ListPackagesForDomainOutputResponseBody: Swift.Equatable {
    public let domainPackageDetailsList: [ElasticsearchClientTypes.DomainPackageDetails]?
    public let nextToken: Swift.String?
}

extension ListPackagesForDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainPackageDetailsList = "DomainPackageDetailsList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainPackageDetailsListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.DomainPackageDetails?].self, forKey: .domainPackageDetailsList)
        var domainPackageDetailsListDecoded0:[ElasticsearchClientTypes.DomainPackageDetails]? = nil
        if let domainPackageDetailsListContainer = domainPackageDetailsListContainer {
            domainPackageDetailsListDecoded0 = [ElasticsearchClientTypes.DomainPackageDetails]()
            for structure0 in domainPackageDetailsListContainer {
                if let structure0 = structure0 {
                    domainPackageDetailsListDecoded0?.append(structure0)
                }
            }
        }
        domainPackageDetailsList = domainPackageDetailsListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsInput(aRN: \(Swift.String(describing: aRN)))"}
}

extension ListTagsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTagsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsOutputError>
}

public struct ListTagsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let aRN = input.operationInput.aRN {
            let aRNQueryItem = ClientRuntime.URLQueryItem(name: "arn".urlPercentEncoding(), value: Swift.String(aRN).urlPercentEncoding())
            input.builder.withQueryItem(aRNQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsOutputError>
}

/// Container for the parameters to the ListTags operation. Specify the ARN for the Elasticsearch domain to which the tags are attached that you want to view are attached.
public struct ListTagsInput: Swift.Equatable {
    ///  Specify the ARN for the Elasticsearch domain to which the tags are attached that you want to view.
    /// This member is required.
    public let aRN: Swift.String?

    public init (
        aRN: Swift.String? = nil
    )
    {
        self.aRN = aRN
    }
}

struct ListTagsInputBody: Swift.Equatable {
}

extension ListTagsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsOutputResponse(tagList: \(Swift.String(describing: tagList)))"}
}

extension ListTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tagList = output.tagList
        } else {
            self.tagList = nil
        }
    }
}

/// The result of a ListTags operation. Contains tags for all requested Elasticsearch domains.
public struct ListTagsOutputResponse: Swift.Equatable {
    ///  List of Tag for the requested Elasticsearch domain.
    public let tagList: [ElasticsearchClientTypes.Tag]?

    public init (
        tagList: [ElasticsearchClientTypes.Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

struct ListTagsOutputResponseBody: Swift.Equatable {
    public let tagList: [ElasticsearchClientTypes.Tag]?
}

extension ListTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagList = "TagList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[ElasticsearchClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [ElasticsearchClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
    }
}

extension ElasticsearchClientTypes.LogPublishingOption: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn {
            try encodeContainer.encode(cloudWatchLogsLogGroupArn, forKey: .cloudWatchLogsLogGroupArn)
        }
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudWatchLogsLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogsLogGroupArn)
        cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArnDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension ElasticsearchClientTypes.LogPublishingOption: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LogPublishingOption(cloudWatchLogsLogGroupArn: \(Swift.String(describing: cloudWatchLogsLogGroupArn)), enabled: \(Swift.String(describing: enabled)))"}
}

extension ElasticsearchClientTypes {
    /// Log Publishing option that is set for given domain.
    ///        <br></br>Attributes and their details:
    ///
    ///        CloudWatchLogsLogGroupArn: ARN of the Cloudwatch log group to which log needs to be published.
    ///        Enabled: Whether the log publishing for given log type is enabled or not
    ///
    ///
    public struct LogPublishingOption: Swift.Equatable {
        /// ARN of the Cloudwatch log group to which log needs to be published.
        public let cloudWatchLogsLogGroupArn: Swift.String?
        ///  Specifies whether given log publishing option is enabled or not.
        public let enabled: Swift.Bool?

        public init (
            cloudWatchLogsLogGroupArn: Swift.String? = nil,
            enabled: Swift.Bool? = nil
        )
        {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.enabled = enabled
        }
    }

}

extension ElasticsearchClientTypes.LogPublishingOptionsStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            var optionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .options)
            for (dictKey0, logpublishingoptions0) in options {
                try optionsContainer.encode(logpublishingoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsContainer = try containerValues.decodeIfPresent([Swift.String: ElasticsearchClientTypes.LogPublishingOption?].self, forKey: .options)
        var optionsDecoded0: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [Swift.String:ElasticsearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in optionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    optionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        options = optionsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes.LogPublishingOptionsStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LogPublishingOptionsStatus(options: \(Swift.String(describing: options)), status: \(Swift.String(describing: status)))"}
}

extension ElasticsearchClientTypes {
    /// The configured log publishing options for the domain and their current status.
    public struct LogPublishingOptionsStatus: Swift.Equatable {
        /// The log publishing options configured for the Elasticsearch domain.
        public let options: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]?
        /// The status of the log publishing options for the Elasticsearch domain. See OptionStatus for the status information that's included.
        public let status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// Type of Log File, it can be one of the following:
    ///
    ///        INDEX_SLOW_LOGS: Index slow logs contain insert requests that took more time than configured index query log threshold to execute.
    ///        SEARCH_SLOW_LOGS: Search slow logs contain search queries that took more time than configured search query log threshold to execute.
    ///        ES_APPLICATION_LOGS: Elasticsearch application logs contain information about errors and warnings raised during the operation of the service and can be useful for troubleshooting.
    ///        AUDIT_LOGS: Audit logs contain records of user requests for access from the domain.
    ///
    ///
    public enum LogType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auditLogs
        case esApplicationLogs
        case indexSlowLogs
        case searchSlowLogs
        case sdkUnknown(Swift.String)

        public static var allCases: [LogType] {
            return [
                .auditLogs,
                .esApplicationLogs,
                .indexSlowLogs,
                .searchSlowLogs,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auditLogs: return "AUDIT_LOGS"
            case .esApplicationLogs: return "ES_APPLICATION_LOGS"
            case .indexSlowLogs: return "INDEX_SLOW_LOGS"
            case .searchSlowLogs: return "SEARCH_SLOW_LOGS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogType(rawValue: rawValue) ?? LogType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.MasterUserOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case masterUserARN = "MasterUserARN"
        case masterUserName = "MasterUserName"
        case masterUserPassword = "MasterUserPassword"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let masterUserARN = masterUserARN {
            try encodeContainer.encode(masterUserARN, forKey: .masterUserARN)
        }
        if let masterUserName = masterUserName {
            try encodeContainer.encode(masterUserName, forKey: .masterUserName)
        }
        if let masterUserPassword = masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterUserARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserARN)
        masterUserARN = masterUserARNDecoded
        let masterUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserName)
        masterUserName = masterUserNameDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
    }
}

extension ElasticsearchClientTypes.MasterUserOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MasterUserOptions(masterUserARN: \(Swift.String(describing: masterUserARN)), masterUserName: \(Swift.String(describing: masterUserName)), masterUserPassword: \(Swift.String(describing: masterUserPassword)))"}
}

extension ElasticsearchClientTypes {
    /// Credentials for the master user: username and password, ARN, or both.
    public struct MasterUserOptions: Swift.Equatable {
        /// ARN for the master user (if IAM is enabled).
        public let masterUserARN: Swift.String?
        /// The master user's username, which is stored in the Amazon Elasticsearch Service domain's internal database.
        public let masterUserName: Swift.String?
        /// The master user's password, which is stored in the Amazon Elasticsearch Service domain's internal database.
        public let masterUserPassword: Swift.String?

        public init (
            masterUserARN: Swift.String? = nil,
            masterUserName: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil
        )
        {
            self.masterUserARN = masterUserARN
            self.masterUserName = masterUserName
            self.masterUserPassword = masterUserPassword
        }
    }

}

extension ElasticsearchClientTypes.NodeToNodeEncryptionOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension ElasticsearchClientTypes.NodeToNodeEncryptionOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodeToNodeEncryptionOptions(enabled: \(Swift.String(describing: enabled)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies the node-to-node encryption options.
    public struct NodeToNodeEncryptionOptions: Swift.Equatable {
        /// Specify true to enable node-to-node encryption.
        public let enabled: Swift.Bool?

        public init (
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }

}

extension ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.NodeToNodeEncryptionOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes.NodeToNodeEncryptionOptionsStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NodeToNodeEncryptionOptionsStatus(options: \(Swift.String(describing: options)), status: \(Swift.String(describing: status)))"}
}

extension ElasticsearchClientTypes {
    /// Status of the node-to-node encryption options for the specified Elasticsearch domain.
    public struct NodeToNodeEncryptionOptionsStatus: Swift.Equatable {
        /// Specifies the node-to-node encryption options for the specified Elasticsearch domain.
        /// This member is required.
        public let options: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
        /// Specifies the status of the node-to-node encryption options for the specified Elasticsearch domain.
        /// This member is required.
        public let status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.NodeToNodeEncryptionOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes {
    /// The state of a requested change. One of the following:
    ///
    ///       Processing: The request change is still in-process.
    ///       Active: The request change is processed and deployed to the Elasticsearch domain.
    ///
    public enum OptionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case processing
        case requiresindexdocuments
        case sdkUnknown(Swift.String)

        public static var allCases: [OptionState] {
            return [
                .active,
                .processing,
                .requiresindexdocuments,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .processing: return "Processing"
            case .requiresindexdocuments: return "RequiresIndexDocuments"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OptionState(rawValue: rawValue) ?? OptionState.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.OptionStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case pendingDeletion = "PendingDeletion"
        case state = "State"
        case updateDate = "UpdateDate"
        case updateVersion = "UpdateVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let pendingDeletion = pendingDeletion {
            try encodeContainer.encode(pendingDeletion, forKey: .pendingDeletion)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let updateDate = updateDate {
            try encodeContainer.encode(updateDate.timeIntervalSince1970, forKey: .updateDate)
        }
        if updateVersion != 0 {
            try encodeContainer.encode(updateVersion, forKey: .updateVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let updateDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updateDate)
        updateDate = updateDateDecoded
        let updateVersionDecoded = try containerValues.decode(Swift.Int.self, forKey: .updateVersion)
        updateVersion = updateVersionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionState.self, forKey: .state)
        state = stateDecoded
        let pendingDeletionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .pendingDeletion)
        pendingDeletion = pendingDeletionDecoded
    }
}

extension ElasticsearchClientTypes.OptionStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OptionStatus(creationDate: \(Swift.String(describing: creationDate)), pendingDeletion: \(Swift.String(describing: pendingDeletion)), state: \(Swift.String(describing: state)), updateDate: \(Swift.String(describing: updateDate)), updateVersion: \(Swift.String(describing: updateVersion)))"}
}

extension ElasticsearchClientTypes {
    /// Provides the current status of the entity.
    public struct OptionStatus: Swift.Equatable {
        /// Timestamp which tells the creation date for the entity.
        /// This member is required.
        public let creationDate: ClientRuntime.Date?
        /// Indicates whether the Elasticsearch domain is being deleted.
        public let pendingDeletion: Swift.Bool?
        /// Provides the OptionState for the Elasticsearch domain.
        /// This member is required.
        public let state: ElasticsearchClientTypes.OptionState?
        /// Timestamp which tells the last updated time for the entity.
        /// This member is required.
        public let updateDate: ClientRuntime.Date?
        /// Specifies the latest version for the entity.
        public let updateVersion: Swift.Int

        public init (
            creationDate: ClientRuntime.Date? = nil,
            pendingDeletion: Swift.Bool? = nil,
            state: ElasticsearchClientTypes.OptionState? = nil,
            updateDate: ClientRuntime.Date? = nil,
            updateVersion: Swift.Int = 0
        )
        {
            self.creationDate = creationDate
            self.pendingDeletion = pendingDeletion
            self.state = state
            self.updateDate = updateDate
            self.updateVersion = updateVersion
        }
    }

}

extension ElasticsearchClientTypes.OutboundCrossClusterSearchConnection: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionAlias = "ConnectionAlias"
        case connectionStatus = "ConnectionStatus"
        case crossClusterSearchConnectionId = "CrossClusterSearchConnectionId"
        case destinationDomainInfo = "DestinationDomainInfo"
        case sourceDomainInfo = "SourceDomainInfo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionAlias = connectionAlias {
            try encodeContainer.encode(connectionAlias, forKey: .connectionAlias)
        }
        if let connectionStatus = connectionStatus {
            try encodeContainer.encode(connectionStatus, forKey: .connectionStatus)
        }
        if let crossClusterSearchConnectionId = crossClusterSearchConnectionId {
            try encodeContainer.encode(crossClusterSearchConnectionId, forKey: .crossClusterSearchConnectionId)
        }
        if let destinationDomainInfo = destinationDomainInfo {
            try encodeContainer.encode(destinationDomainInfo, forKey: .destinationDomainInfo)
        }
        if let sourceDomainInfo = sourceDomainInfo {
            try encodeContainer.encode(sourceDomainInfo, forKey: .sourceDomainInfo)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .sourceDomainInfo)
        sourceDomainInfo = sourceDomainInfoDecoded
        let destinationDomainInfoDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainInformation.self, forKey: .destinationDomainInfo)
        destinationDomainInfo = destinationDomainInfoDecoded
        let crossClusterSearchConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crossClusterSearchConnectionId)
        crossClusterSearchConnectionId = crossClusterSearchConnectionIdDecoded
        let connectionAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionAlias)
        connectionAlias = connectionAliasDecoded
        let connectionStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus.self, forKey: .connectionStatus)
        connectionStatus = connectionStatusDecoded
    }
}

extension ElasticsearchClientTypes.OutboundCrossClusterSearchConnection: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OutboundCrossClusterSearchConnection(connectionAlias: \(Swift.String(describing: connectionAlias)), connectionStatus: \(Swift.String(describing: connectionStatus)), crossClusterSearchConnectionId: \(Swift.String(describing: crossClusterSearchConnectionId)), destinationDomainInfo: \(Swift.String(describing: destinationDomainInfo)), sourceDomainInfo: \(Swift.String(describing: sourceDomainInfo)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies details of an outbound connection.
    public struct OutboundCrossClusterSearchConnection: Swift.Equatable {
        /// Specifies the connection alias for the outbound cross-cluster search connection.
        public let connectionAlias: Swift.String?
        /// Specifies the OutboundCrossClusterSearchConnectionStatus for the outbound connection.
        public let connectionStatus: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus?
        /// Specifies the connection id for the outbound cross-cluster search connection.
        public let crossClusterSearchConnectionId: Swift.String?
        /// Specifies the DomainInformation for the destination Elasticsearch domain.
        public let destinationDomainInfo: ElasticsearchClientTypes.DomainInformation?
        /// Specifies the DomainInformation for the source Elasticsearch domain.
        public let sourceDomainInfo: ElasticsearchClientTypes.DomainInformation?

        public init (
            connectionAlias: Swift.String? = nil,
            connectionStatus: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus? = nil,
            crossClusterSearchConnectionId: Swift.String? = nil,
            destinationDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil,
            sourceDomainInfo: ElasticsearchClientTypes.DomainInformation? = nil
        )
        {
            self.connectionAlias = connectionAlias
            self.connectionStatus = connectionStatus
            self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
            self.destinationDomainInfo = destinationDomainInfo
            self.sourceDomainInfo = sourceDomainInfo
        }
    }

}

extension ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case statusCode = "StatusCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let statusCode = statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusCodeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OutboundCrossClusterSearchConnectionStatus(message: \(Swift.String(describing: message)), statusCode: \(Swift.String(describing: statusCode)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies the connection status of an outbound cross-cluster search connection.
    public struct OutboundCrossClusterSearchConnectionStatus: Swift.Equatable {
        /// Specifies verbose information for the outbound connection status.
        public let message: Swift.String?
        /// The state code for outbound connection. This can be one of the following:
        ///
        ///       VALIDATING: The outbound connection request is being validated.
        ///       VALIDATION_FAILED: Validation failed for the connection request.
        ///       PENDING_ACCEPTANCE: Outbound connection request is validated and is not yet accepted by destination domain owner.
        ///       PROVISIONING: Outbound connection request is in process.
        ///       ACTIVE: Outbound connection is active and ready to use.
        ///       REJECTED: Outbound connection request is rejected by destination domain owner.
        ///       DELETING: Outbound connection deletion is in progress.
        ///       DELETED: Outbound connection is deleted and cannot be used further.
        ///
        public let statusCode: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatusCode?

        public init (
            message: Swift.String? = nil,
            statusCode: ElasticsearchClientTypes.OutboundCrossClusterSearchConnectionStatusCode? = nil
        )
        {
            self.message = message
            self.statusCode = statusCode
        }
    }

}

extension ElasticsearchClientTypes {
    public enum OutboundCrossClusterSearchConnectionStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleted
        case deleting
        case pendingAcceptance
        case provisioning
        case rejected
        case validating
        case validationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [OutboundCrossClusterSearchConnectionStatusCode] {
            return [
                .active,
                .deleted,
                .deleting,
                .pendingAcceptance,
                .provisioning,
                .rejected,
                .validating,
                .validationFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .pendingAcceptance: return "PENDING_ACCEPTANCE"
            case .provisioning: return "PROVISIONING"
            case .rejected: return "REJECTED"
            case .validating: return "VALIDATING"
            case .validationFailed: return "VALIDATION_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OutboundCrossClusterSearchConnectionStatusCode(rawValue: rawValue) ?? OutboundCrossClusterSearchConnectionStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.PackageDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availablePackageVersion = "AvailablePackageVersion"
        case createdAt = "CreatedAt"
        case errorDetails = "ErrorDetails"
        case lastUpdatedAt = "LastUpdatedAt"
        case packageDescription = "PackageDescription"
        case packageID = "PackageID"
        case packageName = "PackageName"
        case packageStatus = "PackageStatus"
        case packageType = "PackageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availablePackageVersion = availablePackageVersion {
            try encodeContainer.encode(availablePackageVersion, forKey: .availablePackageVersion)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let errorDetails = errorDetails {
            try encodeContainer.encode(errorDetails, forKey: .errorDetails)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let packageDescription = packageDescription {
            try encodeContainer.encode(packageDescription, forKey: .packageDescription)
        }
        if let packageID = packageID {
            try encodeContainer.encode(packageID, forKey: .packageID)
        }
        if let packageName = packageName {
            try encodeContainer.encode(packageName, forKey: .packageName)
        }
        if let packageStatus = packageStatus {
            try encodeContainer.encode(packageStatus.rawValue, forKey: .packageStatus)
        }
        if let packageType = packageType {
            try encodeContainer.encode(packageType.rawValue, forKey: .packageType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let packageTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageType.self, forKey: .packageType)
        packageType = packageTypeDecoded
        let packageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageDescription)
        packageDescription = packageDescriptionDecoded
        let packageStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageStatus.self, forKey: .packageStatus)
        packageStatus = packageStatusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let availablePackageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availablePackageVersion)
        availablePackageVersion = availablePackageVersionDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ErrorDetails.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}

extension ElasticsearchClientTypes.PackageDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PackageDetails(availablePackageVersion: \(Swift.String(describing: availablePackageVersion)), createdAt: \(Swift.String(describing: createdAt)), errorDetails: \(Swift.String(describing: errorDetails)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), packageDescription: \(Swift.String(describing: packageDescription)), packageID: \(Swift.String(describing: packageID)), packageName: \(Swift.String(describing: packageName)), packageStatus: \(Swift.String(describing: packageStatus)), packageType: \(Swift.String(describing: packageType)))"}
}

extension ElasticsearchClientTypes {
    /// Basic information about a package.
    public struct PackageDetails: Swift.Equatable {
        public let availablePackageVersion: Swift.String?
        /// Timestamp which tells creation date of the package.
        public let createdAt: ClientRuntime.Date?
        /// Additional information if the package is in an error state. Null otherwise.
        public let errorDetails: ElasticsearchClientTypes.ErrorDetails?
        public let lastUpdatedAt: ClientRuntime.Date?
        /// User-specified description of the package.
        public let packageDescription: Swift.String?
        /// Internal ID of the package.
        public let packageID: Swift.String?
        /// User specified name of the package.
        public let packageName: Swift.String?
        /// Current state of the package. Values are COPYING/COPY_FAILED/AVAILABLE/DELETING/DELETE_FAILED
        public let packageStatus: ElasticsearchClientTypes.PackageStatus?
        /// Currently supports only TXT-DICTIONARY.
        public let packageType: ElasticsearchClientTypes.PackageType?

        public init (
            availablePackageVersion: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            errorDetails: ElasticsearchClientTypes.ErrorDetails? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            packageDescription: Swift.String? = nil,
            packageID: Swift.String? = nil,
            packageName: Swift.String? = nil,
            packageStatus: ElasticsearchClientTypes.PackageStatus? = nil,
            packageType: ElasticsearchClientTypes.PackageType? = nil
        )
        {
            self.availablePackageVersion = availablePackageVersion
            self.createdAt = createdAt
            self.errorDetails = errorDetails
            self.lastUpdatedAt = lastUpdatedAt
            self.packageDescription = packageDescription
            self.packageID = packageID
            self.packageName = packageName
            self.packageStatus = packageStatus
            self.packageType = packageType
        }
    }

}

extension ElasticsearchClientTypes.PackageSource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3BucketName = "S3BucketName"
        case s3Key = "S3Key"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3BucketName = s3BucketName {
            try encodeContainer.encode(s3BucketName, forKey: .s3BucketName)
        }
        if let s3Key = s3Key {
            try encodeContainer.encode(s3Key, forKey: .s3Key)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let s3KeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Key)
        s3Key = s3KeyDecoded
    }
}

extension ElasticsearchClientTypes.PackageSource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PackageSource(s3BucketName: \(Swift.String(describing: s3BucketName)), s3Key: \(Swift.String(describing: s3Key)))"}
}

extension ElasticsearchClientTypes {
    /// The S3 location for importing the package specified as S3BucketName and S3Key
    public struct PackageSource: Swift.Equatable {
        /// Name of the bucket containing the package.
        public let s3BucketName: Swift.String?
        /// Key (file name) of the package.
        public let s3Key: Swift.String?

        public init (
            s3BucketName: Swift.String? = nil,
            s3Key: Swift.String? = nil
        )
        {
            self.s3BucketName = s3BucketName
            self.s3Key = s3Key
        }
    }

}

extension ElasticsearchClientTypes {
    public enum PackageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case copying
        case copyFailed
        case deleted
        case deleteFailed
        case deleting
        case validating
        case validationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [PackageStatus] {
            return [
                .available,
                .copying,
                .copyFailed,
                .deleted,
                .deleteFailed,
                .deleting,
                .validating,
                .validationFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .copying: return "COPYING"
            case .copyFailed: return "COPY_FAILED"
            case .deleted: return "DELETED"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .validating: return "VALIDATING"
            case .validationFailed: return "VALIDATION_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PackageStatus(rawValue: rawValue) ?? PackageStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes {
    public enum PackageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case txtDictionary
        case sdkUnknown(Swift.String)

        public static var allCases: [PackageType] {
            return [
                .txtDictionary,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .txtDictionary: return "TXT-DICTIONARY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PackageType(rawValue: rawValue) ?? PackageType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.PackageVersionHistory: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commitMessage = "CommitMessage"
        case createdAt = "CreatedAt"
        case packageVersion = "PackageVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commitMessage = commitMessage {
            try encodeContainer.encode(commitMessage, forKey: .commitMessage)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let packageVersion = packageVersion {
            try encodeContainer.encode(packageVersion, forKey: .packageVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageVersion)
        packageVersion = packageVersionDecoded
        let commitMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commitMessage)
        commitMessage = commitMessageDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension ElasticsearchClientTypes.PackageVersionHistory: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PackageVersionHistory(commitMessage: \(Swift.String(describing: commitMessage)), createdAt: \(Swift.String(describing: createdAt)), packageVersion: \(Swift.String(describing: packageVersion)))"}
}

extension ElasticsearchClientTypes {
    /// Details of a package version.
    public struct PackageVersionHistory: Swift.Equatable {
        /// A message associated with the version.
        public let commitMessage: Swift.String?
        /// Timestamp which tells creation time of the package version.
        public let createdAt: ClientRuntime.Date?
        /// Version of the package.
        public let packageVersion: Swift.String?

        public init (
            commitMessage: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            packageVersion: Swift.String? = nil
        )
        {
            self.commitMessage = commitMessage
            self.createdAt = createdAt
            self.packageVersion = packageVersion
        }
    }

}

public struct PurchaseReservedElasticsearchInstanceOfferingInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PurchaseReservedElasticsearchInstanceOfferingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PurchaseReservedElasticsearchInstanceOfferingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PurchaseReservedElasticsearchInstanceOfferingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PurchaseReservedElasticsearchInstanceOfferingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PurchaseReservedElasticsearchInstanceOfferingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PurchaseReservedElasticsearchInstanceOfferingOutputError>
}

extension PurchaseReservedElasticsearchInstanceOfferingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PurchaseReservedElasticsearchInstanceOfferingInput(instanceCount: \(Swift.String(describing: instanceCount)), reservationName: \(Swift.String(describing: reservationName)), reservedElasticsearchInstanceOfferingId: \(Swift.String(describing: reservedElasticsearchInstanceOfferingId)))"}
}

extension PurchaseReservedElasticsearchInstanceOfferingInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceCount = "InstanceCount"
        case reservationName = "ReservationName"
        case reservedElasticsearchInstanceOfferingId = "ReservedElasticsearchInstanceOfferingId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if instanceCount != 0 {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let reservationName = reservationName {
            try encodeContainer.encode(reservationName, forKey: .reservationName)
        }
        if let reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId {
            try encodeContainer.encode(reservedElasticsearchInstanceOfferingId, forKey: .reservedElasticsearchInstanceOfferingId)
        }
    }
}

public struct PurchaseReservedElasticsearchInstanceOfferingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PurchaseReservedElasticsearchInstanceOfferingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PurchaseReservedElasticsearchInstanceOfferingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PurchaseReservedElasticsearchInstanceOfferingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PurchaseReservedElasticsearchInstanceOfferingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PurchaseReservedElasticsearchInstanceOfferingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PurchaseReservedElasticsearchInstanceOfferingOutputError>
}

public struct PurchaseReservedElasticsearchInstanceOfferingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PurchaseReservedElasticsearchInstanceOfferingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PurchaseReservedElasticsearchInstanceOfferingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PurchaseReservedElasticsearchInstanceOfferingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PurchaseReservedElasticsearchInstanceOfferingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PurchaseReservedElasticsearchInstanceOfferingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PurchaseReservedElasticsearchInstanceOfferingOutputError>
}

/// Container for parameters to PurchaseReservedElasticsearchInstanceOffering
public struct PurchaseReservedElasticsearchInstanceOfferingInput: Swift.Equatable {
    /// The number of Elasticsearch instances to reserve.
    public let instanceCount: Swift.Int
    /// A customer-specified identifier to track this reservation.
    /// This member is required.
    public let reservationName: Swift.String?
    /// The ID of the reserved Elasticsearch instance offering to purchase.
    /// This member is required.
    public let reservedElasticsearchInstanceOfferingId: Swift.String?

    public init (
        instanceCount: Swift.Int = 0,
        reservationName: Swift.String? = nil,
        reservedElasticsearchInstanceOfferingId: Swift.String? = nil
    )
    {
        self.instanceCount = instanceCount
        self.reservationName = reservationName
        self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
    }
}

struct PurchaseReservedElasticsearchInstanceOfferingInputBody: Swift.Equatable {
    public let reservedElasticsearchInstanceOfferingId: Swift.String?
    public let reservationName: Swift.String?
    public let instanceCount: Swift.Int
}

extension PurchaseReservedElasticsearchInstanceOfferingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceCount = "InstanceCount"
        case reservationName = "ReservationName"
        case reservedElasticsearchInstanceOfferingId = "ReservedElasticsearchInstanceOfferingId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedElasticsearchInstanceOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedElasticsearchInstanceOfferingId)
        reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingIdDecoded
        let reservationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservationName)
        reservationName = reservationNameDecoded
        let instanceCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
    }
}

extension PurchaseReservedElasticsearchInstanceOfferingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PurchaseReservedElasticsearchInstanceOfferingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PurchaseReservedElasticsearchInstanceOfferingOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PurchaseReservedElasticsearchInstanceOfferingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PurchaseReservedElasticsearchInstanceOfferingOutputResponse(reservationName: \(Swift.String(describing: reservationName)), reservedElasticsearchInstanceId: \(Swift.String(describing: reservedElasticsearchInstanceId)))"}
}

extension PurchaseReservedElasticsearchInstanceOfferingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PurchaseReservedElasticsearchInstanceOfferingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.reservationName = output.reservationName
            self.reservedElasticsearchInstanceId = output.reservedElasticsearchInstanceId
        } else {
            self.reservationName = nil
            self.reservedElasticsearchInstanceId = nil
        }
    }
}

/// Represents the output of a PurchaseReservedElasticsearchInstanceOffering operation.
public struct PurchaseReservedElasticsearchInstanceOfferingOutputResponse: Swift.Equatable {
    /// The customer-specified identifier used to track this reservation.
    public let reservationName: Swift.String?
    /// Details of the reserved Elasticsearch instance which was purchased.
    public let reservedElasticsearchInstanceId: Swift.String?

    public init (
        reservationName: Swift.String? = nil,
        reservedElasticsearchInstanceId: Swift.String? = nil
    )
    {
        self.reservationName = reservationName
        self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
    }
}

struct PurchaseReservedElasticsearchInstanceOfferingOutputResponseBody: Swift.Equatable {
    public let reservedElasticsearchInstanceId: Swift.String?
    public let reservationName: Swift.String?
}

extension PurchaseReservedElasticsearchInstanceOfferingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reservationName = "ReservationName"
        case reservedElasticsearchInstanceId = "ReservedElasticsearchInstanceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedElasticsearchInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedElasticsearchInstanceId)
        reservedElasticsearchInstanceId = reservedElasticsearchInstanceIdDecoded
        let reservationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservationName)
        reservationName = reservationNameDecoded
    }
}

extension ElasticsearchClientTypes.RecurringCharge: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recurringChargeAmount = "RecurringChargeAmount"
        case recurringChargeFrequency = "RecurringChargeFrequency"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let recurringChargeAmount = recurringChargeAmount {
            try encodeContainer.encode(recurringChargeAmount, forKey: .recurringChargeAmount)
        }
        if let recurringChargeFrequency = recurringChargeFrequency {
            try encodeContainer.encode(recurringChargeFrequency, forKey: .recurringChargeFrequency)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recurringChargeAmountDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .recurringChargeAmount)
        recurringChargeAmount = recurringChargeAmountDecoded
        let recurringChargeFrequencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recurringChargeFrequency)
        recurringChargeFrequency = recurringChargeFrequencyDecoded
    }
}

extension ElasticsearchClientTypes.RecurringCharge: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecurringCharge(recurringChargeAmount: \(Swift.String(describing: recurringChargeAmount)), recurringChargeFrequency: \(Swift.String(describing: recurringChargeFrequency)))"}
}

extension ElasticsearchClientTypes {
    /// Contains the specific price and frequency of a recurring charges for a reserved Elasticsearch instance, or for a reserved Elasticsearch instance offering.
    public struct RecurringCharge: Swift.Equatable {
        /// The monetary amount of the recurring charge.
        public let recurringChargeAmount: Swift.Double?
        /// The frequency of the recurring charge.
        public let recurringChargeFrequency: Swift.String?

        public init (
            recurringChargeAmount: Swift.Double? = nil,
            recurringChargeFrequency: Swift.String? = nil
        )
        {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }
    }

}

extension RejectInboundCrossClusterSearchConnectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RejectInboundCrossClusterSearchConnectionInput(crossClusterSearchConnectionId: \(Swift.String(describing: crossClusterSearchConnectionId)))"}
}

extension RejectInboundCrossClusterSearchConnectionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct RejectInboundCrossClusterSearchConnectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RejectInboundCrossClusterSearchConnectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RejectInboundCrossClusterSearchConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RejectInboundCrossClusterSearchConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RejectInboundCrossClusterSearchConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RejectInboundCrossClusterSearchConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RejectInboundCrossClusterSearchConnectionOutputError>
}

public struct RejectInboundCrossClusterSearchConnectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RejectInboundCrossClusterSearchConnectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RejectInboundCrossClusterSearchConnectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RejectInboundCrossClusterSearchConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RejectInboundCrossClusterSearchConnectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RejectInboundCrossClusterSearchConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RejectInboundCrossClusterSearchConnectionOutputError>
}

/// Container for the parameters to the RejectInboundCrossClusterSearchConnection operation.
public struct RejectInboundCrossClusterSearchConnectionInput: Swift.Equatable {
    /// The id of the inbound connection that you want to reject.
    /// This member is required.
    public let crossClusterSearchConnectionId: Swift.String?

    public init (
        crossClusterSearchConnectionId: Swift.String? = nil
    )
    {
        self.crossClusterSearchConnectionId = crossClusterSearchConnectionId
    }
}

struct RejectInboundCrossClusterSearchConnectionInputBody: Swift.Equatable {
}

extension RejectInboundCrossClusterSearchConnectionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension RejectInboundCrossClusterSearchConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RejectInboundCrossClusterSearchConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RejectInboundCrossClusterSearchConnectionOutputError: Swift.Error, Swift.Equatable {
    case disabledOperationException(DisabledOperationException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RejectInboundCrossClusterSearchConnectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RejectInboundCrossClusterSearchConnectionOutputResponse(crossClusterSearchConnection: \(Swift.String(describing: crossClusterSearchConnection)))"}
}

extension RejectInboundCrossClusterSearchConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RejectInboundCrossClusterSearchConnectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.crossClusterSearchConnection = output.crossClusterSearchConnection
        } else {
            self.crossClusterSearchConnection = nil
        }
    }
}

/// The result of a RejectInboundCrossClusterSearchConnection operation. Contains details of rejected inbound connection.
public struct RejectInboundCrossClusterSearchConnectionOutputResponse: Swift.Equatable {
    /// Specifies the InboundCrossClusterSearchConnection of rejected inbound connection.
    public let crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?

    public init (
        crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection? = nil
    )
    {
        self.crossClusterSearchConnection = crossClusterSearchConnection
    }
}

struct RejectInboundCrossClusterSearchConnectionOutputResponseBody: Swift.Equatable {
    public let crossClusterSearchConnection: ElasticsearchClientTypes.InboundCrossClusterSearchConnection?
}

extension RejectInboundCrossClusterSearchConnectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crossClusterSearchConnection = "CrossClusterSearchConnection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crossClusterSearchConnectionDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.InboundCrossClusterSearchConnection.self, forKey: .crossClusterSearchConnection)
        crossClusterSearchConnection = crossClusterSearchConnectionDecoded
    }
}

public struct RemoveTagsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveTagsOutputError>
}

extension RemoveTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveTagsInput(aRN: \(Swift.String(describing: aRN)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension RemoveTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for stringlist0 in tagKeys {
                try tagKeysContainer.encode(stringlist0)
            }
        }
    }
}

public struct RemoveTagsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveTagsOutputError>
}

public struct RemoveTagsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveTagsOutputError>
}

/// Container for the parameters to the RemoveTags operation. Specify the ARN for the Elasticsearch domain from which you want to remove the specified TagKey.
public struct RemoveTagsInput: Swift.Equatable {
    /// Specifies the ARN for the Elasticsearch domain from which you want to delete the specified tags.
    /// This member is required.
    public let aRN: Swift.String?
    /// Specifies the TagKey list which you want to remove from the Elasticsearch domain.
    /// This member is required.
    public let tagKeys: [Swift.String]?

    public init (
        aRN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.aRN = aRN
        self.tagKeys = tagKeys
    }
}

struct RemoveTagsInputBody: Swift.Equatable {
    public let aRN: Swift.String?
    public let tagKeys: [Swift.String]?
}

extension RemoveTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension RemoveTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveTagsOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveTagsOutputResponse()"}
}

extension RemoveTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveTagsOutputResponse: Swift.Equatable {

    public init() {}
}

struct RemoveTagsOutputResponseBody: Swift.Equatable {
}

extension RemoveTagsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ElasticsearchClientTypes.ReservedElasticsearchInstance: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencyCode = "CurrencyCode"
        case duration = "Duration"
        case elasticsearchInstanceCount = "ElasticsearchInstanceCount"
        case elasticsearchInstanceType = "ElasticsearchInstanceType"
        case fixedPrice = "FixedPrice"
        case paymentOption = "PaymentOption"
        case recurringCharges = "RecurringCharges"
        case reservationName = "ReservationName"
        case reservedElasticsearchInstanceId = "ReservedElasticsearchInstanceId"
        case reservedElasticsearchInstanceOfferingId = "ReservedElasticsearchInstanceOfferingId"
        case startTime = "StartTime"
        case state = "State"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currencyCode = currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if elasticsearchInstanceCount != 0 {
            try encodeContainer.encode(elasticsearchInstanceCount, forKey: .elasticsearchInstanceCount)
        }
        if let elasticsearchInstanceType = elasticsearchInstanceType {
            try encodeContainer.encode(elasticsearchInstanceType.rawValue, forKey: .elasticsearchInstanceType)
        }
        if let fixedPrice = fixedPrice {
            try encodeContainer.encode(fixedPrice, forKey: .fixedPrice)
        }
        if let paymentOption = paymentOption {
            try encodeContainer.encode(paymentOption.rawValue, forKey: .paymentOption)
        }
        if let recurringCharges = recurringCharges {
            var recurringChargesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recurringCharges)
            for recurringchargelist0 in recurringCharges {
                try recurringChargesContainer.encode(recurringchargelist0)
            }
        }
        if let reservationName = reservationName {
            try encodeContainer.encode(reservationName, forKey: .reservationName)
        }
        if let reservedElasticsearchInstanceId = reservedElasticsearchInstanceId {
            try encodeContainer.encode(reservedElasticsearchInstanceId, forKey: .reservedElasticsearchInstanceId)
        }
        if let reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId {
            try encodeContainer.encode(reservedElasticsearchInstanceOfferingId, forKey: .reservedElasticsearchInstanceOfferingId)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let usagePrice = usagePrice {
            try encodeContainer.encode(usagePrice, forKey: .usagePrice)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservationName)
        reservationName = reservationNameDecoded
        let reservedElasticsearchInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedElasticsearchInstanceId)
        reservedElasticsearchInstanceId = reservedElasticsearchInstanceIdDecoded
        let reservedElasticsearchInstanceOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedElasticsearchInstanceOfferingId)
        reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingIdDecoded
        let elasticsearchInstanceTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ESPartitionInstanceType.self, forKey: .elasticsearchInstanceType)
        elasticsearchInstanceType = elasticsearchInstanceTypeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let durationDecoded = try containerValues.decode(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let fixedPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let usagePriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let elasticsearchInstanceCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .elasticsearchInstanceCount)
        elasticsearchInstanceCount = elasticsearchInstanceCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let paymentOptionDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption.self, forKey: .paymentOption)
        paymentOption = paymentOptionDecoded
        let recurringChargesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.RecurringCharge?].self, forKey: .recurringCharges)
        var recurringChargesDecoded0:[ElasticsearchClientTypes.RecurringCharge]? = nil
        if let recurringChargesContainer = recurringChargesContainer {
            recurringChargesDecoded0 = [ElasticsearchClientTypes.RecurringCharge]()
            for structure0 in recurringChargesContainer {
                if let structure0 = structure0 {
                    recurringChargesDecoded0?.append(structure0)
                }
            }
        }
        recurringCharges = recurringChargesDecoded0
    }
}

extension ElasticsearchClientTypes.ReservedElasticsearchInstance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReservedElasticsearchInstance(currencyCode: \(Swift.String(describing: currencyCode)), duration: \(Swift.String(describing: duration)), elasticsearchInstanceCount: \(Swift.String(describing: elasticsearchInstanceCount)), elasticsearchInstanceType: \(Swift.String(describing: elasticsearchInstanceType)), fixedPrice: \(Swift.String(describing: fixedPrice)), paymentOption: \(Swift.String(describing: paymentOption)), recurringCharges: \(Swift.String(describing: recurringCharges)), reservationName: \(Swift.String(describing: reservationName)), reservedElasticsearchInstanceId: \(Swift.String(describing: reservedElasticsearchInstanceId)), reservedElasticsearchInstanceOfferingId: \(Swift.String(describing: reservedElasticsearchInstanceOfferingId)), startTime: \(Swift.String(describing: startTime)), state: \(Swift.String(describing: state)), usagePrice: \(Swift.String(describing: usagePrice)))"}
}

extension ElasticsearchClientTypes {
    /// Details of a reserved Elasticsearch instance.
    public struct ReservedElasticsearchInstance: Swift.Equatable {
        /// The currency code for the reserved Elasticsearch instance offering.
        public let currencyCode: Swift.String?
        /// The duration, in seconds, for which the Elasticsearch instance is reserved.
        public let duration: Swift.Int
        /// The number of Elasticsearch instances that have been reserved.
        public let elasticsearchInstanceCount: Swift.Int
        /// The Elasticsearch instance type offered by the reserved instance offering.
        public let elasticsearchInstanceType: ElasticsearchClientTypes.ESPartitionInstanceType?
        /// The upfront fixed charge you will paid to purchase the specific reserved Elasticsearch instance offering.
        public let fixedPrice: Swift.Double?
        /// The payment option as defined in the reserved Elasticsearch instance offering.
        public let paymentOption: ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption?
        /// The charge to your account regardless of whether you are creating any domains using the instance offering.
        public let recurringCharges: [ElasticsearchClientTypes.RecurringCharge]?
        /// The customer-specified identifier to track this reservation.
        public let reservationName: Swift.String?
        /// The unique identifier for the reservation.
        public let reservedElasticsearchInstanceId: Swift.String?
        /// The offering identifier.
        public let reservedElasticsearchInstanceOfferingId: Swift.String?
        /// The time the reservation started.
        public let startTime: ClientRuntime.Date?
        /// The state of the reserved Elasticsearch instance.
        public let state: Swift.String?
        /// The rate you are charged for each hour for the domain that is using this reserved instance.
        public let usagePrice: Swift.Double?

        public init (
            currencyCode: Swift.String? = nil,
            duration: Swift.Int = 0,
            elasticsearchInstanceCount: Swift.Int = 0,
            elasticsearchInstanceType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil,
            fixedPrice: Swift.Double? = nil,
            paymentOption: ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption? = nil,
            recurringCharges: [ElasticsearchClientTypes.RecurringCharge]? = nil,
            reservationName: Swift.String? = nil,
            reservedElasticsearchInstanceId: Swift.String? = nil,
            reservedElasticsearchInstanceOfferingId: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            state: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.duration = duration
            self.elasticsearchInstanceCount = elasticsearchInstanceCount
            self.elasticsearchInstanceType = elasticsearchInstanceType
            self.fixedPrice = fixedPrice
            self.paymentOption = paymentOption
            self.recurringCharges = recurringCharges
            self.reservationName = reservationName
            self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
            self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
            self.startTime = startTime
            self.state = state
            self.usagePrice = usagePrice
        }
    }

}

extension ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencyCode = "CurrencyCode"
        case duration = "Duration"
        case elasticsearchInstanceType = "ElasticsearchInstanceType"
        case fixedPrice = "FixedPrice"
        case paymentOption = "PaymentOption"
        case recurringCharges = "RecurringCharges"
        case reservedElasticsearchInstanceOfferingId = "ReservedElasticsearchInstanceOfferingId"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currencyCode = currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let elasticsearchInstanceType = elasticsearchInstanceType {
            try encodeContainer.encode(elasticsearchInstanceType.rawValue, forKey: .elasticsearchInstanceType)
        }
        if let fixedPrice = fixedPrice {
            try encodeContainer.encode(fixedPrice, forKey: .fixedPrice)
        }
        if let paymentOption = paymentOption {
            try encodeContainer.encode(paymentOption.rawValue, forKey: .paymentOption)
        }
        if let recurringCharges = recurringCharges {
            var recurringChargesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recurringCharges)
            for recurringchargelist0 in recurringCharges {
                try recurringChargesContainer.encode(recurringchargelist0)
            }
        }
        if let reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId {
            try encodeContainer.encode(reservedElasticsearchInstanceOfferingId, forKey: .reservedElasticsearchInstanceOfferingId)
        }
        if let usagePrice = usagePrice {
            try encodeContainer.encode(usagePrice, forKey: .usagePrice)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedElasticsearchInstanceOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedElasticsearchInstanceOfferingId)
        reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingIdDecoded
        let elasticsearchInstanceTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ESPartitionInstanceType.self, forKey: .elasticsearchInstanceType)
        elasticsearchInstanceType = elasticsearchInstanceTypeDecoded
        let durationDecoded = try containerValues.decode(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let fixedPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let usagePriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let paymentOptionDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption.self, forKey: .paymentOption)
        paymentOption = paymentOptionDecoded
        let recurringChargesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.RecurringCharge?].self, forKey: .recurringCharges)
        var recurringChargesDecoded0:[ElasticsearchClientTypes.RecurringCharge]? = nil
        if let recurringChargesContainer = recurringChargesContainer {
            recurringChargesDecoded0 = [ElasticsearchClientTypes.RecurringCharge]()
            for structure0 in recurringChargesContainer {
                if let structure0 = structure0 {
                    recurringChargesDecoded0?.append(structure0)
                }
            }
        }
        recurringCharges = recurringChargesDecoded0
    }
}

extension ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReservedElasticsearchInstanceOffering(currencyCode: \(Swift.String(describing: currencyCode)), duration: \(Swift.String(describing: duration)), elasticsearchInstanceType: \(Swift.String(describing: elasticsearchInstanceType)), fixedPrice: \(Swift.String(describing: fixedPrice)), paymentOption: \(Swift.String(describing: paymentOption)), recurringCharges: \(Swift.String(describing: recurringCharges)), reservedElasticsearchInstanceOfferingId: \(Swift.String(describing: reservedElasticsearchInstanceOfferingId)), usagePrice: \(Swift.String(describing: usagePrice)))"}
}

extension ElasticsearchClientTypes {
    /// Details of a reserved Elasticsearch instance offering.
    public struct ReservedElasticsearchInstanceOffering: Swift.Equatable {
        /// The currency code for the reserved Elasticsearch instance offering.
        public let currencyCode: Swift.String?
        /// The duration, in seconds, for which the offering will reserve the Elasticsearch instance.
        public let duration: Swift.Int
        /// The Elasticsearch instance type offered by the reserved instance offering.
        public let elasticsearchInstanceType: ElasticsearchClientTypes.ESPartitionInstanceType?
        /// The upfront fixed charge you will pay to purchase the specific reserved Elasticsearch instance offering.
        public let fixedPrice: Swift.Double?
        /// Payment option for the reserved Elasticsearch instance offering
        public let paymentOption: ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption?
        /// The charge to your account regardless of whether you are creating any domains using the instance offering.
        public let recurringCharges: [ElasticsearchClientTypes.RecurringCharge]?
        /// The Elasticsearch reserved instance offering identifier.
        public let reservedElasticsearchInstanceOfferingId: Swift.String?
        /// The rate you are charged for each hour the domain that is using the offering is running.
        public let usagePrice: Swift.Double?

        public init (
            currencyCode: Swift.String? = nil,
            duration: Swift.Int = 0,
            elasticsearchInstanceType: ElasticsearchClientTypes.ESPartitionInstanceType? = nil,
            fixedPrice: Swift.Double? = nil,
            paymentOption: ElasticsearchClientTypes.ReservedElasticsearchInstancePaymentOption? = nil,
            recurringCharges: [ElasticsearchClientTypes.RecurringCharge]? = nil,
            reservedElasticsearchInstanceOfferingId: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.duration = duration
            self.elasticsearchInstanceType = elasticsearchInstanceType
            self.fixedPrice = fixedPrice
            self.paymentOption = paymentOption
            self.recurringCharges = recurringCharges
            self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
            self.usagePrice = usagePrice
        }
    }

}

extension ElasticsearchClientTypes {
    public enum ReservedElasticsearchInstancePaymentOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allUpfront
        case noUpfront
        case partialUpfront
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservedElasticsearchInstancePaymentOption] {
            return [
                .allUpfront,
                .noUpfront,
                .partialUpfront,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allUpfront: return "ALL_UPFRONT"
            case .noUpfront: return "NO_UPFRONT"
            case .partialUpfront: return "PARTIAL_UPFRONT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservedElasticsearchInstancePaymentOption(rawValue: rawValue) ?? ReservedElasticsearchInstancePaymentOption.sdkUnknown(rawValue)
        }
    }
}

extension ResourceAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceAlreadyExistsException(message: \(Swift.String(describing: message)))"}
}

extension ResourceAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for creating a resource that already exists. Gives http status code of 400.
public struct ResourceAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceAlreadyExistsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticsearchClientTypes {
    /// Specifies the rollback state while disabling Auto-Tune for the domain. Valid values are NO_ROLLBACK, DEFAULT_ROLLBACK.
    public enum RollbackOnDisable: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case defaultRollback
        case noRollback
        case sdkUnknown(Swift.String)

        public static var allCases: [RollbackOnDisable] {
            return [
                .defaultRollback,
                .noRollback,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .defaultRollback: return "DEFAULT_ROLLBACK"
            case .noRollback: return "NO_ROLLBACK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RollbackOnDisable(rawValue: rawValue) ?? RollbackOnDisable.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.SAMLIdp: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityId = "EntityId"
        case metadataContent = "MetadataContent"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityId = entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let metadataContent = metadataContent {
            try encodeContainer.encode(metadataContent, forKey: .metadataContent)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metadataContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadataContent)
        metadataContent = metadataContentDecoded
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
    }
}

extension ElasticsearchClientTypes.SAMLIdp: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SAMLIdp(entityId: \(Swift.String(describing: entityId)), metadataContent: \(Swift.String(describing: metadataContent)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies the SAML Identity Provider's information.
    public struct SAMLIdp: Swift.Equatable {
        /// The unique Entity ID of the application in SAML Identity Provider.
        /// This member is required.
        public let entityId: Swift.String?
        /// The Metadata of the SAML application in xml format.
        /// This member is required.
        public let metadataContent: Swift.String?

        public init (
            entityId: Swift.String? = nil,
            metadataContent: Swift.String? = nil
        )
        {
            self.entityId = entityId
            self.metadataContent = metadataContent
        }
    }

}

extension ElasticsearchClientTypes.SAMLOptionsInput: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case idp = "Idp"
        case masterBackendRole = "MasterBackendRole"
        case masterUserName = "MasterUserName"
        case rolesKey = "RolesKey"
        case sessionTimeoutMinutes = "SessionTimeoutMinutes"
        case subjectKey = "SubjectKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let idp = idp {
            try encodeContainer.encode(idp, forKey: .idp)
        }
        if let masterBackendRole = masterBackendRole {
            try encodeContainer.encode(masterBackendRole, forKey: .masterBackendRole)
        }
        if let masterUserName = masterUserName {
            try encodeContainer.encode(masterUserName, forKey: .masterUserName)
        }
        if let rolesKey = rolesKey {
            try encodeContainer.encode(rolesKey, forKey: .rolesKey)
        }
        if let sessionTimeoutMinutes = sessionTimeoutMinutes {
            try encodeContainer.encode(sessionTimeoutMinutes, forKey: .sessionTimeoutMinutes)
        }
        if let subjectKey = subjectKey {
            try encodeContainer.encode(subjectKey, forKey: .subjectKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let idpDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SAMLIdp.self, forKey: .idp)
        idp = idpDecoded
        let masterUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserName)
        masterUserName = masterUserNameDecoded
        let masterBackendRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterBackendRole)
        masterBackendRole = masterBackendRoleDecoded
        let subjectKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subjectKey)
        subjectKey = subjectKeyDecoded
        let rolesKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rolesKey)
        rolesKey = rolesKeyDecoded
        let sessionTimeoutMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionTimeoutMinutes)
        sessionTimeoutMinutes = sessionTimeoutMinutesDecoded
    }
}

extension ElasticsearchClientTypes.SAMLOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SAMLOptionsInput(enabled: \(Swift.String(describing: enabled)), idp: \(Swift.String(describing: idp)), masterBackendRole: \(Swift.String(describing: masterBackendRole)), masterUserName: \(Swift.String(describing: masterUserName)), rolesKey: \(Swift.String(describing: rolesKey)), sessionTimeoutMinutes: \(Swift.String(describing: sessionTimeoutMinutes)), subjectKey: \(Swift.String(describing: subjectKey)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies the SAML application configuration for the domain.
    public struct SAMLOptionsInput: Swift.Equatable {
        /// True if SAML is enabled.
        public let enabled: Swift.Bool?
        /// Specifies the SAML Identity Provider's information.
        public let idp: ElasticsearchClientTypes.SAMLIdp?
        /// The backend role to which the SAML master user is mapped to.
        public let masterBackendRole: Swift.String?
        /// The SAML master username, which is stored in the Amazon Elasticsearch Service domain's internal database.
        public let masterUserName: Swift.String?
        /// The key to use for matching the SAML Roles attribute.
        public let rolesKey: Swift.String?
        /// The duration, in minutes, after which a user session becomes inactive. Acceptable values are between 1 and 1440, and the default value is 60.
        public let sessionTimeoutMinutes: Swift.Int?
        /// The key to use for matching the SAML Subject attribute.
        public let subjectKey: Swift.String?

        public init (
            enabled: Swift.Bool? = nil,
            idp: ElasticsearchClientTypes.SAMLIdp? = nil,
            masterBackendRole: Swift.String? = nil,
            masterUserName: Swift.String? = nil,
            rolesKey: Swift.String? = nil,
            sessionTimeoutMinutes: Swift.Int? = nil,
            subjectKey: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.idp = idp
            self.masterBackendRole = masterBackendRole
            self.masterUserName = masterUserName
            self.rolesKey = rolesKey
            self.sessionTimeoutMinutes = sessionTimeoutMinutes
            self.subjectKey = subjectKey
        }
    }

}

extension ElasticsearchClientTypes.SAMLOptionsOutput: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case idp = "Idp"
        case rolesKey = "RolesKey"
        case sessionTimeoutMinutes = "SessionTimeoutMinutes"
        case subjectKey = "SubjectKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let idp = idp {
            try encodeContainer.encode(idp, forKey: .idp)
        }
        if let rolesKey = rolesKey {
            try encodeContainer.encode(rolesKey, forKey: .rolesKey)
        }
        if let sessionTimeoutMinutes = sessionTimeoutMinutes {
            try encodeContainer.encode(sessionTimeoutMinutes, forKey: .sessionTimeoutMinutes)
        }
        if let subjectKey = subjectKey {
            try encodeContainer.encode(subjectKey, forKey: .subjectKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let idpDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SAMLIdp.self, forKey: .idp)
        idp = idpDecoded
        let subjectKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subjectKey)
        subjectKey = subjectKeyDecoded
        let rolesKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rolesKey)
        rolesKey = rolesKeyDecoded
        let sessionTimeoutMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionTimeoutMinutes)
        sessionTimeoutMinutes = sessionTimeoutMinutesDecoded
    }
}

extension ElasticsearchClientTypes.SAMLOptionsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SAMLOptionsOutput(enabled: \(Swift.String(describing: enabled)), idp: \(Swift.String(describing: idp)), rolesKey: \(Swift.String(describing: rolesKey)), sessionTimeoutMinutes: \(Swift.String(describing: sessionTimeoutMinutes)), subjectKey: \(Swift.String(describing: subjectKey)))"}
}

extension ElasticsearchClientTypes {
    /// Describes the SAML application configured for the domain.
    public struct SAMLOptionsOutput: Swift.Equatable {
        /// True if SAML is enabled.
        public let enabled: Swift.Bool?
        /// Describes the SAML Identity Provider's information.
        public let idp: ElasticsearchClientTypes.SAMLIdp?
        /// The key used for matching the SAML Roles attribute.
        public let rolesKey: Swift.String?
        /// The duration, in minutes, after which a user session becomes inactive.
        public let sessionTimeoutMinutes: Swift.Int?
        /// The key used for matching the SAML Subject attribute.
        public let subjectKey: Swift.String?

        public init (
            enabled: Swift.Bool? = nil,
            idp: ElasticsearchClientTypes.SAMLIdp? = nil,
            rolesKey: Swift.String? = nil,
            sessionTimeoutMinutes: Swift.Int? = nil,
            subjectKey: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.idp = idp
            self.rolesKey = rolesKey
            self.sessionTimeoutMinutes = sessionTimeoutMinutes
            self.subjectKey = subjectKey
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies Auto-Tune action type. Valid values are JVM_HEAP_SIZE_TUNING and JVM_YOUNG_GEN_TUNING.
    public enum ScheduledAutoTuneActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case jvmHeapSizeTuning
        case jvmYoungGenTuning
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledAutoTuneActionType] {
            return [
                .jvmHeapSizeTuning,
                .jvmYoungGenTuning,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .jvmHeapSizeTuning: return "JVM_HEAP_SIZE_TUNING"
            case .jvmYoungGenTuning: return "JVM_YOUNG_GEN_TUNING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduledAutoTuneActionType(rawValue: rawValue) ?? ScheduledAutoTuneActionType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.ScheduledAutoTuneDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case actionType = "ActionType"
        case date = "Date"
        case severity = "Severity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let actionType = actionType {
            try encodeContainer.encode(actionType.rawValue, forKey: .actionType)
        }
        if let date = date {
            try encodeContainer.encode(date.timeIntervalSince1970, forKey: .date)
        }
        if let severity = severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .date)
        date = dateDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ScheduledAutoTuneActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let actionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .action)
        action = actionDecoded
        let severityDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ScheduledAutoTuneSeverityType.self, forKey: .severity)
        severity = severityDecoded
    }
}

extension ElasticsearchClientTypes.ScheduledAutoTuneDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScheduledAutoTuneDetails(action: \(Swift.String(describing: action)), actionType: \(Swift.String(describing: actionType)), date: \(Swift.String(describing: date)), severity: \(Swift.String(describing: severity)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies details of the scheduled Auto-Tune action. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
    public struct ScheduledAutoTuneDetails: Swift.Equatable {
        /// Specifies Auto-Tune action description.
        public let action: Swift.String?
        /// Specifies Auto-Tune action type. Valid values are JVM_HEAP_SIZE_TUNING and JVM_YOUNG_GEN_TUNING.
        public let actionType: ElasticsearchClientTypes.ScheduledAutoTuneActionType?
        /// Specifies timestamp for the Auto-Tune action scheduled for the domain.
        public let date: ClientRuntime.Date?
        /// Specifies Auto-Tune action severity. Valid values are LOW, MEDIUM and HIGH.
        public let severity: ElasticsearchClientTypes.ScheduledAutoTuneSeverityType?

        public init (
            action: Swift.String? = nil,
            actionType: ElasticsearchClientTypes.ScheduledAutoTuneActionType? = nil,
            date: ClientRuntime.Date? = nil,
            severity: ElasticsearchClientTypes.ScheduledAutoTuneSeverityType? = nil
        )
        {
            self.action = action
            self.actionType = actionType
            self.date = date
            self.severity = severity
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies Auto-Tune action severity. Valid values are LOW, MEDIUM and HIGH.
    public enum ScheduledAutoTuneSeverityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledAutoTuneSeverityType] {
            return [
                .high,
                .low,
                .medium,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduledAutoTuneSeverityType(rawValue: rawValue) ?? ScheduledAutoTuneSeverityType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.ServiceSoftwareOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automatedUpdateDate = "AutomatedUpdateDate"
        case cancellable = "Cancellable"
        case currentVersion = "CurrentVersion"
        case description = "Description"
        case newVersion = "NewVersion"
        case optionalDeployment = "OptionalDeployment"
        case updateAvailable = "UpdateAvailable"
        case updateStatus = "UpdateStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automatedUpdateDate = automatedUpdateDate {
            try encodeContainer.encode(automatedUpdateDate.timeIntervalSince1970, forKey: .automatedUpdateDate)
        }
        if let cancellable = cancellable {
            try encodeContainer.encode(cancellable, forKey: .cancellable)
        }
        if let currentVersion = currentVersion {
            try encodeContainer.encode(currentVersion, forKey: .currentVersion)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let newVersion = newVersion {
            try encodeContainer.encode(newVersion, forKey: .newVersion)
        }
        if let optionalDeployment = optionalDeployment {
            try encodeContainer.encode(optionalDeployment, forKey: .optionalDeployment)
        }
        if let updateAvailable = updateAvailable {
            try encodeContainer.encode(updateAvailable, forKey: .updateAvailable)
        }
        if let updateStatus = updateStatus {
            try encodeContainer.encode(updateStatus.rawValue, forKey: .updateStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let currentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentVersion)
        currentVersion = currentVersionDecoded
        let newVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newVersion)
        newVersion = newVersionDecoded
        let updateAvailableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .updateAvailable)
        updateAvailable = updateAvailableDecoded
        let cancellableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cancellable)
        cancellable = cancellableDecoded
        let updateStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DeploymentStatus.self, forKey: .updateStatus)
        updateStatus = updateStatusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let automatedUpdateDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .automatedUpdateDate)
        automatedUpdateDate = automatedUpdateDateDecoded
        let optionalDeploymentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .optionalDeployment)
        optionalDeployment = optionalDeploymentDecoded
    }
}

extension ElasticsearchClientTypes.ServiceSoftwareOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceSoftwareOptions(automatedUpdateDate: \(Swift.String(describing: automatedUpdateDate)), cancellable: \(Swift.String(describing: cancellable)), currentVersion: \(Swift.String(describing: currentVersion)), description: \(Swift.String(describing: description)), newVersion: \(Swift.String(describing: newVersion)), optionalDeployment: \(Swift.String(describing: optionalDeployment)), updateAvailable: \(Swift.String(describing: updateAvailable)), updateStatus: \(Swift.String(describing: updateStatus)))"}
}

extension ElasticsearchClientTypes {
    /// The current options of an Elasticsearch domain service software options.
    public struct ServiceSoftwareOptions: Swift.Equatable {
        /// Timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.
        public let automatedUpdateDate: ClientRuntime.Date?
        /// True if you are able to cancel your service software version update. False if you are not able to cancel your service software version.
        public let cancellable: Swift.Bool?
        /// The current service software version that is present on the domain.
        public let currentVersion: Swift.String?
        /// The description of the UpdateStatus.
        public let description: Swift.String?
        /// The new service software version if one is available.
        public let newVersion: Swift.String?
        /// True if a service software is never automatically updated. False if a service software is automatically updated after AutomatedUpdateDate.
        public let optionalDeployment: Swift.Bool?
        /// True if you are able to update you service software version. False if you are not able to update your service software version.
        public let updateAvailable: Swift.Bool?
        /// The status of your service software update. This field can take the following values: ELIGIBLE, PENDING_UPDATE, IN_PROGRESS, COMPLETED, and NOT_ELIGIBLE.
        public let updateStatus: ElasticsearchClientTypes.DeploymentStatus?

        public init (
            automatedUpdateDate: ClientRuntime.Date? = nil,
            cancellable: Swift.Bool? = nil,
            currentVersion: Swift.String? = nil,
            description: Swift.String? = nil,
            newVersion: Swift.String? = nil,
            optionalDeployment: Swift.Bool? = nil,
            updateAvailable: Swift.Bool? = nil,
            updateStatus: ElasticsearchClientTypes.DeploymentStatus? = nil
        )
        {
            self.automatedUpdateDate = automatedUpdateDate
            self.cancellable = cancellable
            self.currentVersion = currentVersion
            self.description = description
            self.newVersion = newVersion
            self.optionalDeployment = optionalDeployment
            self.updateAvailable = updateAvailable
            self.updateStatus = updateStatus
        }
    }

}

extension ElasticsearchClientTypes.SnapshotOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automatedSnapshotStartHour = "AutomatedSnapshotStartHour"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automatedSnapshotStartHour = automatedSnapshotStartHour {
            try encodeContainer.encode(automatedSnapshotStartHour, forKey: .automatedSnapshotStartHour)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automatedSnapshotStartHourDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automatedSnapshotStartHour)
        automatedSnapshotStartHour = automatedSnapshotStartHourDecoded
    }
}

extension ElasticsearchClientTypes.SnapshotOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SnapshotOptions(automatedSnapshotStartHour: \(Swift.String(describing: automatedSnapshotStartHour)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
    public struct SnapshotOptions: Swift.Equatable {
        /// Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
        public let automatedSnapshotStartHour: Swift.Int?

        public init (
            automatedSnapshotStartHour: Swift.Int? = nil
        )
        {
            self.automatedSnapshotStartHour = automatedSnapshotStartHour
        }
    }

}

extension ElasticsearchClientTypes.SnapshotOptionsStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SnapshotOptions.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes.SnapshotOptionsStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SnapshotOptionsStatus(options: \(Swift.String(describing: options)), status: \(Swift.String(describing: status)))"}
}

extension ElasticsearchClientTypes {
    /// Status of a daily automated snapshot.
    public struct SnapshotOptionsStatus: Swift.Equatable {
        /// Specifies the daily snapshot options specified for the Elasticsearch domain.
        /// This member is required.
        public let options: ElasticsearchClientTypes.SnapshotOptions?
        /// Specifies the status of a daily automated snapshot.
        /// This member is required.
        public let status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.SnapshotOptions? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

public struct StartElasticsearchServiceSoftwareUpdateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartElasticsearchServiceSoftwareUpdateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartElasticsearchServiceSoftwareUpdateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartElasticsearchServiceSoftwareUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartElasticsearchServiceSoftwareUpdateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartElasticsearchServiceSoftwareUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartElasticsearchServiceSoftwareUpdateOutputError>
}

extension StartElasticsearchServiceSoftwareUpdateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartElasticsearchServiceSoftwareUpdateInput(domainName: \(Swift.String(describing: domainName)))"}
}

extension StartElasticsearchServiceSoftwareUpdateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

public struct StartElasticsearchServiceSoftwareUpdateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartElasticsearchServiceSoftwareUpdateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartElasticsearchServiceSoftwareUpdateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartElasticsearchServiceSoftwareUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartElasticsearchServiceSoftwareUpdateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartElasticsearchServiceSoftwareUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartElasticsearchServiceSoftwareUpdateOutputError>
}

public struct StartElasticsearchServiceSoftwareUpdateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartElasticsearchServiceSoftwareUpdateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartElasticsearchServiceSoftwareUpdateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartElasticsearchServiceSoftwareUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartElasticsearchServiceSoftwareUpdateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartElasticsearchServiceSoftwareUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartElasticsearchServiceSoftwareUpdateOutputError>
}

/// Container for the parameters to the StartElasticsearchServiceSoftwareUpdate operation. Specifies the name of the Elasticsearch domain that you wish to schedule a service software update on.
public struct StartElasticsearchServiceSoftwareUpdateInput: Swift.Equatable {
    /// The name of the domain that you want to update to the latest service software.
    /// This member is required.
    public let domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct StartElasticsearchServiceSoftwareUpdateInputBody: Swift.Equatable {
    public let domainName: Swift.String?
}

extension StartElasticsearchServiceSoftwareUpdateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
    }
}

extension StartElasticsearchServiceSoftwareUpdateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartElasticsearchServiceSoftwareUpdateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartElasticsearchServiceSoftwareUpdateOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartElasticsearchServiceSoftwareUpdateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartElasticsearchServiceSoftwareUpdateOutputResponse(serviceSoftwareOptions: \(Swift.String(describing: serviceSoftwareOptions)))"}
}

extension StartElasticsearchServiceSoftwareUpdateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartElasticsearchServiceSoftwareUpdateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.serviceSoftwareOptions = output.serviceSoftwareOptions
        } else {
            self.serviceSoftwareOptions = nil
        }
    }
}

/// The result of a StartElasticsearchServiceSoftwareUpdate operation. Contains the status of the update.
public struct StartElasticsearchServiceSoftwareUpdateOutputResponse: Swift.Equatable {
    /// The current status of the Elasticsearch service software update.
    public let serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions?

    public init (
        serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions? = nil
    )
    {
        self.serviceSoftwareOptions = serviceSoftwareOptions
    }
}

struct StartElasticsearchServiceSoftwareUpdateOutputResponseBody: Swift.Equatable {
    public let serviceSoftwareOptions: ElasticsearchClientTypes.ServiceSoftwareOptions?
}

extension StartElasticsearchServiceSoftwareUpdateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceSoftwareOptions = "ServiceSoftwareOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceSoftwareOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ServiceSoftwareOptions.self, forKey: .serviceSoftwareOptions)
        serviceSoftwareOptions = serviceSoftwareOptionsDecoded
    }
}

extension ElasticsearchClientTypes.StorageType: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageSubTypeName = "StorageSubTypeName"
        case storageTypeLimits = "StorageTypeLimits"
        case storageTypeName = "StorageTypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let storageSubTypeName = storageSubTypeName {
            try encodeContainer.encode(storageSubTypeName, forKey: .storageSubTypeName)
        }
        if let storageTypeLimits = storageTypeLimits {
            var storageTypeLimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .storageTypeLimits)
            for storagetypelimitlist0 in storageTypeLimits {
                try storageTypeLimitsContainer.encode(storagetypelimitlist0)
            }
        }
        if let storageTypeName = storageTypeName {
            try encodeContainer.encode(storageTypeName, forKey: .storageTypeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageTypeName)
        storageTypeName = storageTypeNameDecoded
        let storageSubTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageSubTypeName)
        storageSubTypeName = storageSubTypeNameDecoded
        let storageTypeLimitsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.StorageTypeLimit?].self, forKey: .storageTypeLimits)
        var storageTypeLimitsDecoded0:[ElasticsearchClientTypes.StorageTypeLimit]? = nil
        if let storageTypeLimitsContainer = storageTypeLimitsContainer {
            storageTypeLimitsDecoded0 = [ElasticsearchClientTypes.StorageTypeLimit]()
            for structure0 in storageTypeLimitsContainer {
                if let structure0 = structure0 {
                    storageTypeLimitsDecoded0?.append(structure0)
                }
            }
        }
        storageTypeLimits = storageTypeLimitsDecoded0
    }
}

extension ElasticsearchClientTypes.StorageType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StorageType(storageSubTypeName: \(Swift.String(describing: storageSubTypeName)), storageTypeLimits: \(Swift.String(describing: storageTypeLimits)), storageTypeName: \(Swift.String(describing: storageTypeName)))"}
}

extension ElasticsearchClientTypes {
    /// StorageTypes represents the list of storage related types and their attributes
    ///       that are available for given InstanceType.
    ///
    public struct StorageType: Swift.Equatable {
        ///
        ///       SubType of the given storage type.
        ///       List of available sub-storage options:
        ///       For "instance" storageType we wont have any storageSubType,
        ///       in case of "ebs" storageType we will have following valid storageSubTypes
        ///       <ol>
        ///         standard
        ///         gp2
        ///         io1
        ///       </ol>
        ///       Refer VolumeType for more information regarding above EBS storage options.
        ///
        public let storageSubTypeName: Swift.String?
        /// List of limits that are applicable for given storage type.
        ///
        public let storageTypeLimits: [ElasticsearchClientTypes.StorageTypeLimit]?
        ///
        ///   Type of the storage.
        ///   List of available storage options:
        ///   <ol>
        ///     instance Inbuilt storage available for the given Instance
        ///     ebs Elastic block storage that would be attached to the given Instance
        ///   </ol>
        ///
        public let storageTypeName: Swift.String?

        public init (
            storageSubTypeName: Swift.String? = nil,
            storageTypeLimits: [ElasticsearchClientTypes.StorageTypeLimit]? = nil,
            storageTypeName: Swift.String? = nil
        )
        {
            self.storageSubTypeName = storageSubTypeName
            self.storageTypeLimits = storageTypeLimits
            self.storageTypeName = storageTypeName
        }
    }

}

extension ElasticsearchClientTypes.StorageTypeLimit: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limitName = "LimitName"
        case limitValues = "LimitValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limitName = limitName {
            try encodeContainer.encode(limitName, forKey: .limitName)
        }
        if let limitValues = limitValues {
            var limitValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .limitValues)
            for limitvaluelist0 in limitValues {
                try limitValuesContainer.encode(limitvaluelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .limitName)
        limitName = limitNameDecoded
        let limitValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .limitValues)
        var limitValuesDecoded0:[Swift.String]? = nil
        if let limitValuesContainer = limitValuesContainer {
            limitValuesDecoded0 = [Swift.String]()
            for string0 in limitValuesContainer {
                if let string0 = string0 {
                    limitValuesDecoded0?.append(string0)
                }
            }
        }
        limitValues = limitValuesDecoded0
    }
}

extension ElasticsearchClientTypes.StorageTypeLimit: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StorageTypeLimit(limitName: \(Swift.String(describing: limitName)), limitValues: \(Swift.String(describing: limitValues)))"}
}

extension ElasticsearchClientTypes {
    /// Limits that are applicable for given storage type.
    ///
    public struct StorageTypeLimit: Swift.Equatable {
        ///
        ///     Name of storage limits that are applicable for given storage type.
        ///     If
        ///
        ///       StorageType
        ///
        ///     is ebs, following storage options are applicable
        ///     <ol>
        ///       MinimumVolumeSize
        ///       Minimum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable.
        ///       MaximumVolumeSize
        ///       Maximum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable.
        ///       MaximumIops
        ///       Maximum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable.
        ///       MinimumIops
        ///       Minimum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable.
        ///     </ol>
        ///
        public let limitName: Swift.String?
        ///
        ///       Values for the
        ///
        ///         StorageTypeLimit$LimitName
        ///
        ///       .
        ///
        public let limitValues: [Swift.String]?

        public init (
            limitName: Swift.String? = nil,
            limitValues: [Swift.String]? = nil
        )
        {
            self.limitName = limitName
            self.limitValues = limitValues
        }
    }

}

extension ElasticsearchClientTypes {
    public enum TLSSecurityPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case policyMinTls10201907
        case policyMinTls12201907
        case sdkUnknown(Swift.String)

        public static var allCases: [TLSSecurityPolicy] {
            return [
                .policyMinTls10201907,
                .policyMinTls12201907,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .policyMinTls10201907: return "Policy-Min-TLS-1-0-2019-07"
            case .policyMinTls12201907: return "Policy-Min-TLS-1-2-2019-07"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TLSSecurityPolicy(rawValue: rawValue) ?? TLSSecurityPolicy.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension ElasticsearchClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies a key value pair for a resource tag.
    public struct Tag: Swift.Equatable {
        /// Specifies the TagKey, the name of the tag.  Tag keys must be unique for the Elasticsearch domain to which they are attached.
        /// This member is required.
        public let key: Swift.String?
        /// Specifies the TagValue, the value assigned to the corresponding tag key.  Tag values can be null and do not have to be unique in a tag set.  For example, you can have a key value
        ///        pair in a tag set of project : Trinity and cost-center : Trinity
        /// This member is required.
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension ElasticsearchClientTypes {
    /// Specifies the unit of a maintenance schedule duration. Valid value is HOUR. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide for more information.
    public enum TimeUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hours
        case sdkUnknown(Swift.String)

        public static var allCases: [TimeUnit] {
            return [
                .hours,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hours: return "HOURS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TimeUnit(rawValue: rawValue) ?? TimeUnit.sdkUnknown(rawValue)
        }
    }
}

public struct UpdateElasticsearchDomainConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateElasticsearchDomainConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateElasticsearchDomainConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateElasticsearchDomainConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateElasticsearchDomainConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateElasticsearchDomainConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateElasticsearchDomainConfigOutputError>
}

extension UpdateElasticsearchDomainConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateElasticsearchDomainConfigInput(accessPolicies: \(Swift.String(describing: accessPolicies)), advancedOptions: \(Swift.String(describing: advancedOptions)), advancedSecurityOptions: \(Swift.String(describing: advancedSecurityOptions)), autoTuneOptions: \(Swift.String(describing: autoTuneOptions)), cognitoOptions: \(Swift.String(describing: cognitoOptions)), domainEndpointOptions: \(Swift.String(describing: domainEndpointOptions)), domainName: \(Swift.String(describing: domainName)), eBSOptions: \(Swift.String(describing: eBSOptions)), elasticsearchClusterConfig: \(Swift.String(describing: elasticsearchClusterConfig)), encryptionAtRestOptions: \(Swift.String(describing: encryptionAtRestOptions)), logPublishingOptions: \(Swift.String(describing: logPublishingOptions)), nodeToNodeEncryptionOptions: \(Swift.String(describing: nodeToNodeEncryptionOptions)), snapshotOptions: \(Swift.String(describing: snapshotOptions)), vPCOptions: \(Swift.String(describing: vPCOptions)))"}
}

extension UpdateElasticsearchDomainConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case eBSOptions = "EBSOptions"
        case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case vPCOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicies = accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = advancedOptions {
            var advancedOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .advancedOptions)
            for (dictKey0, advancedoptions0) in advancedOptions {
                try advancedOptionsContainer.encode(advancedoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let advancedSecurityOptions = advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let cognitoOptions = cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let domainEndpointOptions = domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let eBSOptions = eBSOptions {
            try encodeContainer.encode(eBSOptions, forKey: .eBSOptions)
        }
        if let elasticsearchClusterConfig = elasticsearchClusterConfig {
            try encodeContainer.encode(elasticsearchClusterConfig, forKey: .elasticsearchClusterConfig)
        }
        if let encryptionAtRestOptions = encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let logPublishingOptions = logPublishingOptions {
            var logPublishingOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .logPublishingOptions)
            for (dictKey0, logpublishingoptions0) in logPublishingOptions {
                try logPublishingOptionsContainer.encode(logpublishingoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let snapshotOptions = snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let vPCOptions = vPCOptions {
            try encodeContainer.encode(vPCOptions, forKey: .vPCOptions)
        }
    }
}

public struct UpdateElasticsearchDomainConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateElasticsearchDomainConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateElasticsearchDomainConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateElasticsearchDomainConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateElasticsearchDomainConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateElasticsearchDomainConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateElasticsearchDomainConfigOutputError>
}

public struct UpdateElasticsearchDomainConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateElasticsearchDomainConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateElasticsearchDomainConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateElasticsearchDomainConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateElasticsearchDomainConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateElasticsearchDomainConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateElasticsearchDomainConfigOutputError>
}

/// Container for the parameters to the UpdateElasticsearchDomain operation. Specifies the type and number of instances in the domain cluster.
public struct UpdateElasticsearchDomainConfigInput: Swift.Equatable {
    /// IAM access policy as a JSON-formatted string.
    public let accessPolicies: Swift.String?
    /// Modifies the advanced option to allow references to indices in an HTTP request body.  Must be false when configuring access to individual sub-resources.  By default, the value is true.
    ///        See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options" target="_blank">Configuration Advanced Options for more information.
    public let advancedOptions: [Swift.String:Swift.String]?
    /// Specifies advanced security options.
    public let advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput?
    /// Specifies Auto-Tune options.
    public let autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptions?
    /// Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html" target="_blank">Amazon Cognito Authentication for Kibana.
    public let cognitoOptions: ElasticsearchClientTypes.CognitoOptions?
    /// Options to specify configuration that will be applied to the domain endpoint.
    public let domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions?
    /// The name of the Elasticsearch domain that you are updating.
    /// This member is required.
    public let domainName: Swift.String?
    /// Specify the type and size of the EBS volume that you want to use.
    public let eBSOptions: ElasticsearchClientTypes.EBSOptions?
    /// The type and number of instances to instantiate for the domain cluster.
    public let elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig?
    /// Specifies the Encryption At Rest Options.
    public let encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions?
    /// Map of LogType and LogPublishingOption, each containing options to publish a given type of Elasticsearch log.
    public let logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]?
    /// Specifies the NodeToNodeEncryptionOptions.
    public let nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
    /// Option to set the time, in UTC format, for the daily automated snapshot. Default value is 0 hours.
    public let snapshotOptions: ElasticsearchClientTypes.SnapshotOptions?
    /// Options to specify the subnets and security groups for VPC endpoint. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-creating-vpc" target="_blank">Creating a VPC in VPC Endpoints for Amazon Elasticsearch Service Domains
    public let vPCOptions: ElasticsearchClientTypes.VPCOptions?

    public init (
        accessPolicies: Swift.String? = nil,
        advancedOptions: [Swift.String:Swift.String]? = nil,
        advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput? = nil,
        autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptions? = nil,
        cognitoOptions: ElasticsearchClientTypes.CognitoOptions? = nil,
        domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions? = nil,
        domainName: Swift.String? = nil,
        eBSOptions: ElasticsearchClientTypes.EBSOptions? = nil,
        elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig? = nil,
        encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions? = nil,
        logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil,
        nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions? = nil,
        snapshotOptions: ElasticsearchClientTypes.SnapshotOptions? = nil,
        vPCOptions: ElasticsearchClientTypes.VPCOptions? = nil
    )
    {
        self.accessPolicies = accessPolicies
        self.advancedOptions = advancedOptions
        self.advancedSecurityOptions = advancedSecurityOptions
        self.autoTuneOptions = autoTuneOptions
        self.cognitoOptions = cognitoOptions
        self.domainEndpointOptions = domainEndpointOptions
        self.domainName = domainName
        self.eBSOptions = eBSOptions
        self.elasticsearchClusterConfig = elasticsearchClusterConfig
        self.encryptionAtRestOptions = encryptionAtRestOptions
        self.logPublishingOptions = logPublishingOptions
        self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
        self.snapshotOptions = snapshotOptions
        self.vPCOptions = vPCOptions
    }
}

struct UpdateElasticsearchDomainConfigInputBody: Swift.Equatable {
    public let elasticsearchClusterConfig: ElasticsearchClientTypes.ElasticsearchClusterConfig?
    public let eBSOptions: ElasticsearchClientTypes.EBSOptions?
    public let snapshotOptions: ElasticsearchClientTypes.SnapshotOptions?
    public let vPCOptions: ElasticsearchClientTypes.VPCOptions?
    public let cognitoOptions: ElasticsearchClientTypes.CognitoOptions?
    public let advancedOptions: [Swift.String:Swift.String]?
    public let accessPolicies: Swift.String?
    public let logPublishingOptions: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]?
    public let domainEndpointOptions: ElasticsearchClientTypes.DomainEndpointOptions?
    public let advancedSecurityOptions: ElasticsearchClientTypes.AdvancedSecurityOptionsInput?
    public let nodeToNodeEncryptionOptions: ElasticsearchClientTypes.NodeToNodeEncryptionOptions?
    public let encryptionAtRestOptions: ElasticsearchClientTypes.EncryptionAtRestOptions?
    public let autoTuneOptions: ElasticsearchClientTypes.AutoTuneOptions?
}

extension UpdateElasticsearchDomainConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case eBSOptions = "EBSOptions"
        case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case vPCOptions = "VPCOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elasticsearchClusterConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchClusterConfig.self, forKey: .elasticsearchClusterConfig)
        elasticsearchClusterConfig = elasticsearchClusterConfigDecoded
        let eBSOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EBSOptions.self, forKey: .eBSOptions)
        eBSOptions = eBSOptionsDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SnapshotOptions.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vPCOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VPCOptions.self, forKey: .vPCOptions)
        vPCOptions = vPCOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.CognitoOptions.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let advancedOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .advancedOptions)
        var advancedOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let advancedOptionsContainer = advancedOptionsContainer {
            advancedOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in advancedOptionsContainer {
                if let string0 = string0 {
                    advancedOptionsDecoded0?[key0] = string0
                }
            }
        }
        advancedOptions = advancedOptionsDecoded0
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let logPublishingOptionsContainer = try containerValues.decodeIfPresent([Swift.String: ElasticsearchClientTypes.LogPublishingOption?].self, forKey: .logPublishingOptions)
        var logPublishingOptionsDecoded0: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil
        if let logPublishingOptionsContainer = logPublishingOptionsContainer {
            logPublishingOptionsDecoded0 = [Swift.String:ElasticsearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in logPublishingOptionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    logPublishingOptionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        logPublishingOptions = logPublishingOptionsDecoded0
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainEndpointOptions.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AdvancedSecurityOptionsInput.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.NodeToNodeEncryptionOptions.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EncryptionAtRestOptions.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneOptions.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
    }
}

extension UpdateElasticsearchDomainConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateElasticsearchDomainConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTypeException" : self = .invalidTypeException(try InvalidTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateElasticsearchDomainConfigOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case internalException(InternalException)
    case invalidTypeException(InvalidTypeException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateElasticsearchDomainConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateElasticsearchDomainConfigOutputResponse(domainConfig: \(Swift.String(describing: domainConfig)))"}
}

extension UpdateElasticsearchDomainConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateElasticsearchDomainConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainConfig = output.domainConfig
        } else {
            self.domainConfig = nil
        }
    }
}

/// The result of an UpdateElasticsearchDomain request. Contains the status of the Elasticsearch domain being updated.
public struct UpdateElasticsearchDomainConfigOutputResponse: Swift.Equatable {
    /// The status of the updated Elasticsearch domain.
    /// This member is required.
    public let domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig?

    public init (
        domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig? = nil
    )
    {
        self.domainConfig = domainConfig
    }
}

struct UpdateElasticsearchDomainConfigOutputResponseBody: Swift.Equatable {
    public let domainConfig: ElasticsearchClientTypes.ElasticsearchDomainConfig?
}

extension UpdateElasticsearchDomainConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainConfig = "DomainConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchDomainConfig.self, forKey: .domainConfig)
        domainConfig = domainConfigDecoded
    }
}

public struct UpdatePackageInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdatePackageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdatePackageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdatePackageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdatePackageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdatePackageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdatePackageOutputError>
}

extension UpdatePackageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdatePackageInput(commitMessage: \(Swift.String(describing: commitMessage)), packageDescription: \(Swift.String(describing: packageDescription)), packageID: \(Swift.String(describing: packageID)), packageSource: \(Swift.String(describing: packageSource)))"}
}

extension UpdatePackageInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commitMessage = "CommitMessage"
        case packageDescription = "PackageDescription"
        case packageID = "PackageID"
        case packageSource = "PackageSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commitMessage = commitMessage {
            try encodeContainer.encode(commitMessage, forKey: .commitMessage)
        }
        if let packageDescription = packageDescription {
            try encodeContainer.encode(packageDescription, forKey: .packageDescription)
        }
        if let packageID = packageID {
            try encodeContainer.encode(packageID, forKey: .packageID)
        }
        if let packageSource = packageSource {
            try encodeContainer.encode(packageSource, forKey: .packageSource)
        }
    }
}

public struct UpdatePackageInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdatePackageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdatePackageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdatePackageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdatePackageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdatePackageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdatePackageOutputError>
}

public struct UpdatePackageInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdatePackageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdatePackageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdatePackageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdatePackageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdatePackageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdatePackageOutputError>
}

///
///       Container for request parameters to
///
///         UpdatePackage
///
///       operation.
///
public struct UpdatePackageInput: Swift.Equatable {
    /// An info message for the new version which will be shown as part of GetPackageVersionHistoryResponse.
    public let commitMessage: Swift.String?
    /// New description of the package.
    public let packageDescription: Swift.String?
    /// Unique identifier for the package.
    /// This member is required.
    public let packageID: Swift.String?
    /// The S3 location for importing the package specified as S3BucketName and S3Key
    /// This member is required.
    public let packageSource: ElasticsearchClientTypes.PackageSource?

    public init (
        commitMessage: Swift.String? = nil,
        packageDescription: Swift.String? = nil,
        packageID: Swift.String? = nil,
        packageSource: ElasticsearchClientTypes.PackageSource? = nil
    )
    {
        self.commitMessage = commitMessage
        self.packageDescription = packageDescription
        self.packageID = packageID
        self.packageSource = packageSource
    }
}

struct UpdatePackageInputBody: Swift.Equatable {
    public let packageID: Swift.String?
    public let packageSource: ElasticsearchClientTypes.PackageSource?
    public let packageDescription: Swift.String?
    public let commitMessage: Swift.String?
}

extension UpdatePackageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commitMessage = "CommitMessage"
        case packageDescription = "PackageDescription"
        case packageID = "PackageID"
        case packageSource = "PackageSource"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageSourceDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageSource.self, forKey: .packageSource)
        packageSource = packageSourceDecoded
        let packageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageDescription)
        packageDescription = packageDescriptionDecoded
        let commitMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commitMessage)
        commitMessage = commitMessageDecoded
    }
}

extension UpdatePackageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePackageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdatePackageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case baseException(BaseException)
    case internalException(InternalException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdatePackageOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdatePackageOutputResponse(packageDetails: \(Swift.String(describing: packageDetails)))"}
}

extension UpdatePackageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdatePackageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.packageDetails = output.packageDetails
        } else {
            self.packageDetails = nil
        }
    }
}

///
///       Container for response returned by
///
///         UpdatePackage
///
///       operation.
///
public struct UpdatePackageOutputResponse: Swift.Equatable {
    /// Information about the package PackageDetails.
    public let packageDetails: ElasticsearchClientTypes.PackageDetails?

    public init (
        packageDetails: ElasticsearchClientTypes.PackageDetails? = nil
    )
    {
        self.packageDetails = packageDetails
    }
}

struct UpdatePackageOutputResponseBody: Swift.Equatable {
    public let packageDetails: ElasticsearchClientTypes.PackageDetails?
}

extension UpdatePackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case packageDetails = "PackageDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.PackageDetails.self, forKey: .packageDetails)
        packageDetails = packageDetailsDecoded
    }
}

public struct UpgradeElasticsearchDomainInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpgradeElasticsearchDomainInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpgradeElasticsearchDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpgradeElasticsearchDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpgradeElasticsearchDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpgradeElasticsearchDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpgradeElasticsearchDomainOutputError>
}

extension UpgradeElasticsearchDomainInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpgradeElasticsearchDomainInput(domainName: \(Swift.String(describing: domainName)), performCheckOnly: \(Swift.String(describing: performCheckOnly)), targetVersion: \(Swift.String(describing: targetVersion)))"}
}

extension UpgradeElasticsearchDomainInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case performCheckOnly = "PerformCheckOnly"
        case targetVersion = "TargetVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let performCheckOnly = performCheckOnly {
            try encodeContainer.encode(performCheckOnly, forKey: .performCheckOnly)
        }
        if let targetVersion = targetVersion {
            try encodeContainer.encode(targetVersion, forKey: .targetVersion)
        }
    }
}

public struct UpgradeElasticsearchDomainInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpgradeElasticsearchDomainInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpgradeElasticsearchDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpgradeElasticsearchDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpgradeElasticsearchDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpgradeElasticsearchDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpgradeElasticsearchDomainOutputError>
}

public struct UpgradeElasticsearchDomainInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpgradeElasticsearchDomainInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpgradeElasticsearchDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpgradeElasticsearchDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpgradeElasticsearchDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpgradeElasticsearchDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpgradeElasticsearchDomainOutputError>
}

///
///       Container for request parameters to
///
///         UpgradeElasticsearchDomain
///
///       operation.
///
public struct UpgradeElasticsearchDomainInput: Swift.Equatable {
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    /// This member is required.
    public let domainName: Swift.String?
    ///
    ///       This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed.
    ///       This will not actually perform the Upgrade.
    ///
    public let performCheckOnly: Swift.Bool?
    /// The version of Elasticsearch that you intend to upgrade the domain to.
    /// This member is required.
    public let targetVersion: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        performCheckOnly: Swift.Bool? = nil,
        targetVersion: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.performCheckOnly = performCheckOnly
        self.targetVersion = targetVersion
    }
}

struct UpgradeElasticsearchDomainInputBody: Swift.Equatable {
    public let domainName: Swift.String?
    public let targetVersion: Swift.String?
    public let performCheckOnly: Swift.Bool?
}

extension UpgradeElasticsearchDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case performCheckOnly = "PerformCheckOnly"
        case targetVersion = "TargetVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let targetVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetVersion)
        targetVersion = targetVersionDecoded
        let performCheckOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .performCheckOnly)
        performCheckOnly = performCheckOnlyDecoded
    }
}

extension UpgradeElasticsearchDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpgradeElasticsearchDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BaseException" : self = .baseException(try BaseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DisabledOperationException" : self = .disabledOperationException(try DisabledOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpgradeElasticsearchDomainOutputError: Swift.Error, Swift.Equatable {
    case baseException(BaseException)
    case disabledOperationException(DisabledOperationException)
    case internalException(InternalException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpgradeElasticsearchDomainOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpgradeElasticsearchDomainOutputResponse(domainName: \(Swift.String(describing: domainName)), performCheckOnly: \(Swift.String(describing: performCheckOnly)), targetVersion: \(Swift.String(describing: targetVersion)))"}
}

extension UpgradeElasticsearchDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpgradeElasticsearchDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainName = output.domainName
            self.performCheckOnly = output.performCheckOnly
            self.targetVersion = output.targetVersion
        } else {
            self.domainName = nil
            self.performCheckOnly = nil
            self.targetVersion = nil
        }
    }
}

///
///       Container for response returned by
///
///         UpgradeElasticsearchDomain
///
///       operation.
///
public struct UpgradeElasticsearchDomainOutputResponse: Swift.Equatable {
    /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
    public let domainName: Swift.String?
    ///
    ///       This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed.
    ///       This will not actually perform the Upgrade.
    ///
    public let performCheckOnly: Swift.Bool?
    /// The version of Elasticsearch that you intend to upgrade the domain to.
    public let targetVersion: Swift.String?

    public init (
        domainName: Swift.String? = nil,
        performCheckOnly: Swift.Bool? = nil,
        targetVersion: Swift.String? = nil
    )
    {
        self.domainName = domainName
        self.performCheckOnly = performCheckOnly
        self.targetVersion = targetVersion
    }
}

struct UpgradeElasticsearchDomainOutputResponseBody: Swift.Equatable {
    public let domainName: Swift.String?
    public let targetVersion: Swift.String?
    public let performCheckOnly: Swift.Bool?
}

extension UpgradeElasticsearchDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case performCheckOnly = "PerformCheckOnly"
        case targetVersion = "TargetVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let targetVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetVersion)
        targetVersion = targetVersionDecoded
        let performCheckOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .performCheckOnly)
        performCheckOnly = performCheckOnlyDecoded
    }
}

extension ElasticsearchClientTypes.UpgradeHistory: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case startTimestamp = "StartTimestamp"
        case stepsList = "StepsList"
        case upgradeName = "UpgradeName"
        case upgradeStatus = "UpgradeStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let startTimestamp = startTimestamp {
            try encodeContainer.encode(startTimestamp.timeIntervalSince1970, forKey: .startTimestamp)
        }
        if let stepsList = stepsList {
            var stepsListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stepsList)
            for upgradestepslist0 in stepsList {
                try stepsListContainer.encode(upgradestepslist0)
            }
        }
        if let upgradeName = upgradeName {
            try encodeContainer.encode(upgradeName, forKey: .upgradeName)
        }
        if let upgradeStatus = upgradeStatus {
            try encodeContainer.encode(upgradeStatus.rawValue, forKey: .upgradeStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .upgradeName)
        upgradeName = upgradeNameDecoded
        let startTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTimestamp)
        startTimestamp = startTimestampDecoded
        let upgradeStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.UpgradeStatus.self, forKey: .upgradeStatus)
        upgradeStatus = upgradeStatusDecoded
        let stepsListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.UpgradeStepItem?].self, forKey: .stepsList)
        var stepsListDecoded0:[ElasticsearchClientTypes.UpgradeStepItem]? = nil
        if let stepsListContainer = stepsListContainer {
            stepsListDecoded0 = [ElasticsearchClientTypes.UpgradeStepItem]()
            for structure0 in stepsListContainer {
                if let structure0 = structure0 {
                    stepsListDecoded0?.append(structure0)
                }
            }
        }
        stepsList = stepsListDecoded0
    }
}

extension ElasticsearchClientTypes.UpgradeHistory: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpgradeHistory(startTimestamp: \(Swift.String(describing: startTimestamp)), stepsList: \(Swift.String(describing: stepsList)), upgradeName: \(Swift.String(describing: upgradeName)), upgradeStatus: \(Swift.String(describing: upgradeStatus)))"}
}

extension ElasticsearchClientTypes {
    /// History of the last 10 Upgrades and Upgrade Eligibility Checks.
    public struct UpgradeHistory: Swift.Equatable {
        /// UTC Timestamp at which the Upgrade API call was made in "yyyy-MM-ddTHH:mm:ssZ" format.
        public let startTimestamp: ClientRuntime.Date?
        ///
        ///       A list of
        ///
        ///         UpgradeStepItem
        ///
        ///       s representing information about each step performed as pard of a specific Upgrade or Upgrade Eligibility Check.
        ///
        public let stepsList: [ElasticsearchClientTypes.UpgradeStepItem]?
        /// A string that describes the update briefly
        public let upgradeName: Swift.String?
        ///
        ///       The overall status of the update. The status can take one of the following values:
        ///
        ///         In Progress
        ///         Succeeded
        ///         Succeeded with Issues
        ///         Failed
        ///
        ///
        public let upgradeStatus: ElasticsearchClientTypes.UpgradeStatus?

        public init (
            startTimestamp: ClientRuntime.Date? = nil,
            stepsList: [ElasticsearchClientTypes.UpgradeStepItem]? = nil,
            upgradeName: Swift.String? = nil,
            upgradeStatus: ElasticsearchClientTypes.UpgradeStatus? = nil
        )
        {
            self.startTimestamp = startTimestamp
            self.stepsList = stepsList
            self.upgradeName = upgradeName
            self.upgradeStatus = upgradeStatus
        }
    }

}

extension ElasticsearchClientTypes {
    public enum UpgradeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case succeeded
        case succeededWithIssues
        case sdkUnknown(Swift.String)

        public static var allCases: [UpgradeStatus] {
            return [
                .failed,
                .inProgress,
                .succeeded,
                .succeededWithIssues,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .succeeded: return "SUCCEEDED"
            case .succeededWithIssues: return "SUCCEEDED_WITH_ISSUES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UpgradeStatus(rawValue: rawValue) ?? UpgradeStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes {
    public enum UpgradeStep: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case preUpgradeCheck
        case snapshot
        case upgrade
        case sdkUnknown(Swift.String)

        public static var allCases: [UpgradeStep] {
            return [
                .preUpgradeCheck,
                .snapshot,
                .upgrade,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .preUpgradeCheck: return "PRE_UPGRADE_CHECK"
            case .snapshot: return "SNAPSHOT"
            case .upgrade: return "UPGRADE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UpgradeStep(rawValue: rawValue) ?? UpgradeStep.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.UpgradeStepItem: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case issues = "Issues"
        case progressPercent = "ProgressPercent"
        case upgradeStep = "UpgradeStep"
        case upgradeStepStatus = "UpgradeStepStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let issues = issues {
            var issuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .issues)
            for issues0 in issues {
                try issuesContainer.encode(issues0)
            }
        }
        if let progressPercent = progressPercent {
            try encodeContainer.encode(progressPercent, forKey: .progressPercent)
        }
        if let upgradeStep = upgradeStep {
            try encodeContainer.encode(upgradeStep.rawValue, forKey: .upgradeStep)
        }
        if let upgradeStepStatus = upgradeStepStatus {
            try encodeContainer.encode(upgradeStepStatus.rawValue, forKey: .upgradeStepStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeStepDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.UpgradeStep.self, forKey: .upgradeStep)
        upgradeStep = upgradeStepDecoded
        let upgradeStepStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.UpgradeStatus.self, forKey: .upgradeStepStatus)
        upgradeStepStatus = upgradeStepStatusDecoded
        let issuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .issues)
        var issuesDecoded0:[Swift.String]? = nil
        if let issuesContainer = issuesContainer {
            issuesDecoded0 = [Swift.String]()
            for string0 in issuesContainer {
                if let string0 = string0 {
                    issuesDecoded0?.append(string0)
                }
            }
        }
        issues = issuesDecoded0
        let progressPercentDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .progressPercent)
        progressPercent = progressPercentDecoded
    }
}

extension ElasticsearchClientTypes.UpgradeStepItem: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpgradeStepItem(issues: \(Swift.String(describing: issues)), progressPercent: \(Swift.String(describing: progressPercent)), upgradeStep: \(Swift.String(describing: upgradeStep)), upgradeStepStatus: \(Swift.String(describing: upgradeStepStatus)))"}
}

extension ElasticsearchClientTypes {
    /// Represents a single step of the Upgrade or Upgrade Eligibility Check workflow.
    public struct UpgradeStepItem: Swift.Equatable {
        /// A list of strings containing detailed information about the errors encountered in a particular step.
        public let issues: [Swift.String]?
        /// The Floating point value representing progress percentage of a particular step.
        public let progressPercent: Swift.Double?
        ///
        ///       Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through:
        ///
        ///         PreUpgradeCheck
        ///         Snapshot
        ///         Upgrade
        ///
        ///
        public let upgradeStep: ElasticsearchClientTypes.UpgradeStep?
        ///
        ///       The status of a particular step during an upgrade. The status can take one of the following values:
        ///
        ///         In Progress
        ///         Succeeded
        ///         Succeeded with Issues
        ///         Failed
        ///
        ///
        public let upgradeStepStatus: ElasticsearchClientTypes.UpgradeStatus?

        public init (
            issues: [Swift.String]? = nil,
            progressPercent: Swift.Double? = nil,
            upgradeStep: ElasticsearchClientTypes.UpgradeStep? = nil,
            upgradeStepStatus: ElasticsearchClientTypes.UpgradeStatus? = nil
        )
        {
            self.issues = issues
            self.progressPercent = progressPercent
            self.upgradeStep = upgradeStep
            self.upgradeStepStatus = upgradeStepStatus
        }
    }

}

extension ElasticsearchClientTypes.VPCDerivedInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case securityGroupIds = "SecurityGroupIds"
        case subnetIds = "SubnetIds"
        case vPCId = "VPCId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for stringlist0 in availabilityZones {
                try availabilityZonesContainer.encode(stringlist0)
            }
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for stringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(stringlist0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for stringlist0 in subnetIds {
                try subnetIdsContainer.encode(stringlist0)
            }
        }
        if let vPCId = vPCId {
            try encodeContainer.encode(vPCId, forKey: .vPCId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vPCIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vPCId)
        vPCId = vPCIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}

extension ElasticsearchClientTypes.VPCDerivedInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VPCDerivedInfo(availabilityZones: \(Swift.String(describing: availabilityZones)), securityGroupIds: \(Swift.String(describing: securityGroupIds)), subnetIds: \(Swift.String(describing: subnetIds)), vPCId: \(Swift.String(describing: vPCId)))"}
}

extension ElasticsearchClientTypes {
    /// Options to specify the subnets and security groups for VPC endpoint. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html" target="_blank"> VPC Endpoints for Amazon Elasticsearch Service Domains.
    public struct VPCDerivedInfo: Swift.Equatable {
        /// The availability zones for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
        public let availabilityZones: [Swift.String]?
        /// Specifies the security groups for VPC endpoint.
        public let securityGroupIds: [Swift.String]?
        /// Specifies the subnets for VPC endpoint.
        public let subnetIds: [Swift.String]?
        /// The VPC Id for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
        public let vPCId: Swift.String?

        public init (
            availabilityZones: [Swift.String]? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil,
            vPCId: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vPCId = vPCId
        }
    }

}

extension ElasticsearchClientTypes.VPCDerivedInfoStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VPCDerivedInfo.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElasticsearchClientTypes.VPCDerivedInfoStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VPCDerivedInfoStatus(options: \(Swift.String(describing: options)), status: \(Swift.String(describing: status)))"}
}

extension ElasticsearchClientTypes {
    ///  Status of the VPC options for the specified Elasticsearch domain.
    public struct VPCDerivedInfoStatus: Swift.Equatable {
        ///  Specifies the VPC options for the specified Elasticsearch domain.
        /// This member is required.
        public let options: ElasticsearchClientTypes.VPCDerivedInfo?
        ///  Specifies the status of the VPC options for the specified Elasticsearch domain.
        /// This member is required.
        public let status: ElasticsearchClientTypes.OptionStatus?

        public init (
            options: ElasticsearchClientTypes.VPCDerivedInfo? = nil,
            status: ElasticsearchClientTypes.OptionStatus? = nil
        )
        {
            self.options = options
            self.status = status
        }
    }

}

extension ElasticsearchClientTypes.VPCOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupIds = "SecurityGroupIds"
        case subnetIds = "SubnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for stringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(stringlist0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for stringlist0 in subnetIds {
                try subnetIdsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}

extension ElasticsearchClientTypes.VPCOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VPCOptions(securityGroupIds: \(Swift.String(describing: securityGroupIds)), subnetIds: \(Swift.String(describing: subnetIds)))"}
}

extension ElasticsearchClientTypes {
    /// Options to specify the subnets and security groups for VPC endpoint. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html" target="_blank"> VPC Endpoints for Amazon Elasticsearch Service Domains.
    public struct VPCOptions: Swift.Equatable {
        /// Specifies the security groups for VPC endpoint.
        public let securityGroupIds: [Swift.String]?
        /// Specifies the subnets for VPC endpoint.
        public let subnetIds: [Swift.String]?

        public init (
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

extension ValidationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationException(message: \(Swift.String(describing: message)))"}
}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An exception for missing / invalid input fields. Gives http status code of 400.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElasticsearchClientTypes {
    ///  The type of EBS volume, standard, gp2, or io1. See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-ebs" target="_blank">Configuring EBS-based Storagefor more information.
    public enum VolumeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case gp2
        case io1
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [VolumeType] {
            return [
                .gp2,
                .io1,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .gp2: return "gp2"
            case .io1: return "io1"
            case .standard: return "standard"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VolumeType(rawValue: rawValue) ?? VolumeType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticsearchClientTypes.ZoneAwarenessConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZoneCount = "AvailabilityZoneCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZoneCount = availabilityZoneCount {
            try encodeContainer.encode(availabilityZoneCount, forKey: .availabilityZoneCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .availabilityZoneCount)
        availabilityZoneCount = availabilityZoneCountDecoded
    }
}

extension ElasticsearchClientTypes.ZoneAwarenessConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ZoneAwarenessConfig(availabilityZoneCount: \(Swift.String(describing: availabilityZoneCount)))"}
}

extension ElasticsearchClientTypes {
    /// Specifies the zone awareness configuration for the domain cluster, such as the number of availability zones.
    public struct ZoneAwarenessConfig: Swift.Equatable {
        /// An integer value to indicate the number of availability zones for a domain when zone awareness is enabled. This should be equal to number of subnets if VPC endpoints is enabled
        public let availabilityZoneCount: Swift.Int?

        public init (
            availabilityZoneCount: Swift.Int? = nil
        )
        {
            self.availabilityZoneCount = availabilityZoneCount
        }
    }

}
