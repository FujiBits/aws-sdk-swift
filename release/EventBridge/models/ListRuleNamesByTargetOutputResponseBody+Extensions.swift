// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRuleNamesByTargetOutputResponseBody: Equatable {
    public let ruleNames: [String]?
    public let nextToken: String?
}

extension ListRuleNamesByTargetOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case ruleNames = "RuleNames"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .ruleNames)
        var ruleNamesDecoded0:[String]? = nil
        if let ruleNamesContainer = ruleNamesContainer {
            ruleNamesDecoded0 = [String]()
            for string0 in ruleNamesContainer {
                if let string0 = string0 {
                    ruleNamesDecoded0?.append(string0)
                }
            }
        }
        ruleNames = ruleNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
