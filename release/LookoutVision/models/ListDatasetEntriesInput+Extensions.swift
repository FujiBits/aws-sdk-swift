// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListDatasetEntriesInputHeadersMiddleware: Middleware {
    public let id: String = "ListDatasetEntriesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDatasetEntriesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDatasetEntriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDatasetEntriesInput>
    public typealias MOutput = OperationOutput<ListDatasetEntriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDatasetEntriesOutputError>
}

public struct ListDatasetEntriesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListDatasetEntriesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDatasetEntriesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDatasetEntriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let sourceRefContains = input.operationInput.sourceRefContains {
            let sourceRefContainsQueryItem = URLQueryItem(name: "sourceRefContains".urlPercentEncoding(), value: String(sourceRefContains).urlPercentEncoding())
            input.builder.withQueryItem(sourceRefContainsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let labeled = input.operationInput.labeled {
            let labeledQueryItem = URLQueryItem(name: "labeled".urlPercentEncoding(), value: String(labeled).urlPercentEncoding())
            input.builder.withQueryItem(labeledQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let beforeCreationDate = input.operationInput.beforeCreationDate {
            let beforeCreationDateQueryItem = URLQueryItem(name: "createdBefore".urlPercentEncoding(), value: String(beforeCreationDate.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(beforeCreationDateQueryItem)
        }
        if let afterCreationDate = input.operationInput.afterCreationDate {
            let afterCreationDateQueryItem = URLQueryItem(name: "createdAfter".urlPercentEncoding(), value: String(afterCreationDate.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(afterCreationDateQueryItem)
        }
        if let anomalyClass = input.operationInput.anomalyClass {
            let anomalyClassQueryItem = URLQueryItem(name: "anomalyClass".urlPercentEncoding(), value: String(anomalyClass).urlPercentEncoding())
            input.builder.withQueryItem(anomalyClassQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDatasetEntriesInput>
    public typealias MOutput = OperationOutput<ListDatasetEntriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDatasetEntriesOutputError>
}

extension ListDatasetEntriesInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
