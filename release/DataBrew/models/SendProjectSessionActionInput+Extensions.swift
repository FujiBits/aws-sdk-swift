// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SendProjectSessionActionInputHeadersMiddleware: Middleware {
    public let id: String = "SendProjectSessionActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendProjectSessionActionInput>,
                  next: H) -> Swift.Result<OperationOutput<SendProjectSessionActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendProjectSessionActionInput>
    public typealias MOutput = OperationOutput<SendProjectSessionActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendProjectSessionActionOutputError>
}

public struct SendProjectSessionActionInputQueryItemMiddleware: Middleware {
    public let id: String = "SendProjectSessionActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendProjectSessionActionInput>,
                  next: H) -> Swift.Result<OperationOutput<SendProjectSessionActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendProjectSessionActionInput>
    public typealias MOutput = OperationOutput<SendProjectSessionActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendProjectSessionActionOutputError>
}

public struct SendProjectSessionActionInputBodyMiddleware: Middleware {
    public let id: String = "SendProjectSessionActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendProjectSessionActionInput>,
                  next: H) -> Swift.Result<OperationOutput<SendProjectSessionActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendProjectSessionActionInput>
    public typealias MOutput = OperationOutput<SendProjectSessionActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendProjectSessionActionOutputError>
}

extension SendProjectSessionActionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientSessionId = "ClientSessionId"
        case preview = "Preview"
        case recipeStep = "RecipeStep"
        case stepIndex = "StepIndex"
        case viewFrame = "ViewFrame"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientSessionId = clientSessionId {
            try encodeContainer.encode(clientSessionId, forKey: .clientSessionId)
        }
        if preview != false {
            try encodeContainer.encode(preview, forKey: .preview)
        }
        if let recipeStep = recipeStep {
            try encodeContainer.encode(recipeStep, forKey: .recipeStep)
        }
        if let stepIndex = stepIndex {
            try encodeContainer.encode(stepIndex, forKey: .stepIndex)
        }
        if let viewFrame = viewFrame {
            try encodeContainer.encode(viewFrame, forKey: .viewFrame)
        }
    }
}
