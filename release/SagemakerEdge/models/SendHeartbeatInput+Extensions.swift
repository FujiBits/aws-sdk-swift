// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SendHeartbeatInputHeadersMiddleware: Middleware {
    public let id: String = "SendHeartbeatInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendHeartbeatInput>,
                  next: H) -> Swift.Result<OperationOutput<SendHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendHeartbeatInput>
    public typealias MOutput = OperationOutput<SendHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendHeartbeatOutputError>
}

public struct SendHeartbeatInputQueryItemMiddleware: Middleware {
    public let id: String = "SendHeartbeatInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendHeartbeatInput>,
                  next: H) -> Swift.Result<OperationOutput<SendHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendHeartbeatInput>
    public typealias MOutput = OperationOutput<SendHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendHeartbeatOutputError>
}

public struct SendHeartbeatInputBodyMiddleware: Middleware {
    public let id: String = "SendHeartbeatInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendHeartbeatInput>,
                  next: H) -> Swift.Result<OperationOutput<SendHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendHeartbeatInput>
    public typealias MOutput = OperationOutput<SendHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendHeartbeatOutputError>
}

extension SendHeartbeatInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case agentMetrics = "AgentMetrics"
        case agentVersion = "AgentVersion"
        case deviceFleetName = "DeviceFleetName"
        case deviceName = "DeviceName"
        case models = "Models"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentMetrics = agentMetrics {
            var agentMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentMetrics)
            for edgemetrics0 in agentMetrics {
                try agentMetricsContainer.encode(edgemetrics0)
            }
        }
        if let agentVersion = agentVersion {
            try encodeContainer.encode(agentVersion, forKey: .agentVersion)
        }
        if let deviceFleetName = deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
        if let deviceName = deviceName {
            try encodeContainer.encode(deviceName, forKey: .deviceName)
        }
        if let models = models {
            var modelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .models)
            for models0 in models {
                try modelsContainer.encode(models0)
            }
        }
    }
}
