// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension IoTSiteWiseClient {
    /// Associates a child asset with the given parent asset through a hierarchy defined in the parent asset's model. For more information, see [Associating assets](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/add-associated-assets.html) in the IoT SiteWise User Guide.
    func associateAssets(input: AssociateAssetsInput) async throws -> AssociateAssetsOutputResponse
    {
        typealias associateAssetsContinuation = CheckedContinuation<AssociateAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateAssetsContinuation) in
            associateAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a group (batch) of assets with an IoT SiteWise Monitor project.
    func batchAssociateProjectAssets(input: BatchAssociateProjectAssetsInput) async throws -> BatchAssociateProjectAssetsOutputResponse
    {
        typealias batchAssociateProjectAssetsContinuation = CheckedContinuation<BatchAssociateProjectAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchAssociateProjectAssetsContinuation) in
            batchAssociateProjectAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a group (batch) of assets from an IoT SiteWise Monitor project.
    func batchDisassociateProjectAssets(input: BatchDisassociateProjectAssetsInput) async throws -> BatchDisassociateProjectAssetsOutputResponse
    {
        typealias batchDisassociateProjectAssetsContinuation = CheckedContinuation<BatchDisassociateProjectAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDisassociateProjectAssetsContinuation) in
            batchDisassociateProjectAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends a list of asset property values to IoT SiteWise. Each value is a timestamp-quality-value (TQV) data point. For more information, see [Ingesting data using the API](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/ingest-api.html) in the IoT SiteWise User Guide. To identify an asset property, you must specify one of the following:
    ///
    /// * The assetId and propertyId of an asset property.
    ///
    /// * A propertyAlias, which is a data stream alias (for example, /company/windfarm/3/turbine/7/temperature). To define an asset property's alias, see [UpdateAssetProperty](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html).
    ///
    ///
    /// With respect to Unix epoch time, IoT SiteWise accepts only TQVs that have a timestamp of no more than 7 days in the past and no more than 10 minutes in the future. IoT SiteWise rejects timestamps outside of the inclusive range of [-7 days, +10 minutes] and returns a TimestampOutOfRangeException error. For each asset property, IoT SiteWise overwrites TQVs with duplicate timestamps unless the newer TQV has a different quality. For example, if you store a TQV {T1, GOOD, V1}, then storing {T1, GOOD, V2} replaces the existing TQV. IoT SiteWise authorizes access to each BatchPutAssetPropertyValue entry individually. For more information, see [BatchPutAssetPropertyValue authorization](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-batchputassetpropertyvalue-action) in the IoT SiteWise User Guide.
    func batchPutAssetPropertyValue(input: BatchPutAssetPropertyValueInput) async throws -> BatchPutAssetPropertyValueOutputResponse
    {
        typealias batchPutAssetPropertyValueContinuation = CheckedContinuation<BatchPutAssetPropertyValueOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchPutAssetPropertyValueContinuation) in
            batchPutAssetPropertyValue(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an access policy that grants the specified identity (Amazon Web Services SSO user, Amazon Web Services SSO group, or IAM user) access to the specified IoT SiteWise Monitor portal or project resource.
    func createAccessPolicy(input: CreateAccessPolicyInput) async throws -> CreateAccessPolicyOutputResponse
    {
        typealias createAccessPolicyContinuation = CheckedContinuation<CreateAccessPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAccessPolicyContinuation) in
            createAccessPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an asset from an existing asset model. For more information, see [Creating assets](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-assets.html) in the IoT SiteWise User Guide.
    func createAsset(input: CreateAssetInput) async throws -> CreateAssetOutputResponse
    {
        typealias createAssetContinuation = CheckedContinuation<CreateAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAssetContinuation) in
            createAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an asset model from specified property and hierarchy definitions. You create assets from asset models. With asset models, you can easily create assets of the same type that have standardized definitions. Each asset created from a model inherits the asset model's property and hierarchy definitions. For more information, see [Defining asset models](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/define-models.html) in the IoT SiteWise User Guide.
    func createAssetModel(input: CreateAssetModelInput) async throws -> CreateAssetModelOutputResponse
    {
        typealias createAssetModelContinuation = CheckedContinuation<CreateAssetModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAssetModelContinuation) in
            createAssetModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a dashboard in an IoT SiteWise Monitor project.
    func createDashboard(input: CreateDashboardInput) async throws -> CreateDashboardOutputResponse
    {
        typealias createDashboardContinuation = CheckedContinuation<CreateDashboardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDashboardContinuation) in
            createDashboard(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a gateway, which is a virtual or edge device that delivers industrial data streams from local servers to IoT SiteWise. For more information, see [Ingesting data using a gateway](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/gateway-connector.html) in the IoT SiteWise User Guide.
    func createGateway(input: CreateGatewayInput) async throws -> CreateGatewayOutputResponse
    {
        typealias createGatewayContinuation = CheckedContinuation<CreateGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createGatewayContinuation) in
            createGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a portal, which can contain projects and dashboards. IoT SiteWise Monitor uses Amazon Web Services SSO or IAM to authenticate portal users and manage user permissions. Before you can sign in to a new portal, you must add at least one identity to that portal. For more information, see [Adding or removing portal administrators](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/administer-portals.html#portal-change-admins) in the IoT SiteWise User Guide.
    func createPortal(input: CreatePortalInput) async throws -> CreatePortalOutputResponse
    {
        typealias createPortalContinuation = CheckedContinuation<CreatePortalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPortalContinuation) in
            createPortal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a project in the specified portal.
    func createProject(input: CreateProjectInput) async throws -> CreateProjectOutputResponse
    {
        typealias createProjectContinuation = CheckedContinuation<CreateProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProjectContinuation) in
            createProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an access policy that grants the specified identity access to the specified IoT SiteWise Monitor resource. You can use this operation to revoke access to an IoT SiteWise Monitor resource.
    func deleteAccessPolicy(input: DeleteAccessPolicyInput) async throws -> DeleteAccessPolicyOutputResponse
    {
        typealias deleteAccessPolicyContinuation = CheckedContinuation<DeleteAccessPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAccessPolicyContinuation) in
            deleteAccessPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an asset. This action can't be undone. For more information, see [Deleting assets and models](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/delete-assets-and-models.html) in the IoT SiteWise User Guide. You can't delete an asset that's associated to another asset. For more information, see [DisassociateAssets](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DisassociateAssets.html).
    func deleteAsset(input: DeleteAssetInput) async throws -> DeleteAssetOutputResponse
    {
        typealias deleteAssetContinuation = CheckedContinuation<DeleteAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAssetContinuation) in
            deleteAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an asset model. This action can't be undone. You must delete all assets created from an asset model before you can delete the model. Also, you can't delete an asset model if a parent asset model exists that contains a property formula expression that depends on the asset model that you want to delete. For more information, see [Deleting assets and models](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/delete-assets-and-models.html) in the IoT SiteWise User Guide.
    func deleteAssetModel(input: DeleteAssetModelInput) async throws -> DeleteAssetModelOutputResponse
    {
        typealias deleteAssetModelContinuation = CheckedContinuation<DeleteAssetModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAssetModelContinuation) in
            deleteAssetModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a dashboard from IoT SiteWise Monitor.
    func deleteDashboard(input: DeleteDashboardInput) async throws -> DeleteDashboardOutputResponse
    {
        typealias deleteDashboardContinuation = CheckedContinuation<DeleteDashboardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDashboardContinuation) in
            deleteDashboard(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a gateway from IoT SiteWise. When you delete a gateway, some of the gateway's files remain in your gateway's file system.
    func deleteGateway(input: DeleteGatewayInput) async throws -> DeleteGatewayOutputResponse
    {
        typealias deleteGatewayContinuation = CheckedContinuation<DeleteGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteGatewayContinuation) in
            deleteGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a portal from IoT SiteWise Monitor.
    func deletePortal(input: DeletePortalInput) async throws -> DeletePortalOutputResponse
    {
        typealias deletePortalContinuation = CheckedContinuation<DeletePortalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePortalContinuation) in
            deletePortal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a project from IoT SiteWise Monitor.
    func deleteProject(input: DeleteProjectInput) async throws -> DeleteProjectOutputResponse
    {
        typealias deleteProjectContinuation = CheckedContinuation<DeleteProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProjectContinuation) in
            deleteProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an access policy, which specifies an identity's access to an IoT SiteWise Monitor portal or project.
    func describeAccessPolicy(input: DescribeAccessPolicyInput) async throws -> DescribeAccessPolicyOutputResponse
    {
        typealias describeAccessPolicyContinuation = CheckedContinuation<DescribeAccessPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccessPolicyContinuation) in
            describeAccessPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about an asset.
    func describeAsset(input: DescribeAssetInput) async throws -> DescribeAssetOutputResponse
    {
        typealias describeAssetContinuation = CheckedContinuation<DescribeAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAssetContinuation) in
            describeAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about an asset model.
    func describeAssetModel(input: DescribeAssetModelInput) async throws -> DescribeAssetModelOutputResponse
    {
        typealias describeAssetModelContinuation = CheckedContinuation<DescribeAssetModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAssetModelContinuation) in
            describeAssetModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about an asset property. When you call this operation for an attribute property, this response includes the default attribute value that you define in the asset model. If you update the default value in the model, this operation's response includes the new default value. This operation doesn't return the value of the asset property. To get the value of an asset property, use [GetAssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_GetAssetPropertyValue.html).
    func describeAssetProperty(input: DescribeAssetPropertyInput) async throws -> DescribeAssetPropertyOutputResponse
    {
        typealias describeAssetPropertyContinuation = CheckedContinuation<DescribeAssetPropertyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAssetPropertyContinuation) in
            describeAssetProperty(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about a dashboard.
    func describeDashboard(input: DescribeDashboardInput) async throws -> DescribeDashboardOutputResponse
    {
        typealias describeDashboardContinuation = CheckedContinuation<DescribeDashboardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDashboardContinuation) in
            describeDashboard(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about the default encryption configuration for the Amazon Web Services account in the default or specified Region. For more information, see [Key management](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/key-management.html) in the IoT SiteWise User Guide.
    func describeDefaultEncryptionConfiguration(input: DescribeDefaultEncryptionConfigurationInput) async throws -> DescribeDefaultEncryptionConfigurationOutputResponse
    {
        typealias describeDefaultEncryptionConfigurationContinuation = CheckedContinuation<DescribeDefaultEncryptionConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDefaultEncryptionConfigurationContinuation) in
            describeDefaultEncryptionConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about a gateway.
    func describeGateway(input: DescribeGatewayInput) async throws -> DescribeGatewayOutputResponse
    {
        typealias describeGatewayContinuation = CheckedContinuation<DescribeGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeGatewayContinuation) in
            describeGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about a gateway capability configuration. Each gateway capability defines data sources for a gateway. A capability configuration can contain multiple data source configurations. If you define OPC-UA sources for a gateway in the IoT SiteWise console, all of your OPC-UA sources are stored in one capability configuration. To list all capability configurations for a gateway, use [DescribeGateway](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeGateway.html).
    func describeGatewayCapabilityConfiguration(input: DescribeGatewayCapabilityConfigurationInput) async throws -> DescribeGatewayCapabilityConfigurationOutputResponse
    {
        typealias describeGatewayCapabilityConfigurationContinuation = CheckedContinuation<DescribeGatewayCapabilityConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeGatewayCapabilityConfigurationContinuation) in
            describeGatewayCapabilityConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the current IoT SiteWise logging options.
    func describeLoggingOptions(input: DescribeLoggingOptionsInput) async throws -> DescribeLoggingOptionsOutputResponse
    {
        typealias describeLoggingOptionsContinuation = CheckedContinuation<DescribeLoggingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeLoggingOptionsContinuation) in
            describeLoggingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about a portal.
    func describePortal(input: DescribePortalInput) async throws -> DescribePortalOutputResponse
    {
        typealias describePortalContinuation = CheckedContinuation<DescribePortalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePortalContinuation) in
            describePortal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about a project.
    func describeProject(input: DescribeProjectInput) async throws -> DescribeProjectOutputResponse
    {
        typealias describeProjectContinuation = CheckedContinuation<DescribeProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProjectContinuation) in
            describeProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about the storage configuration for IoT SiteWise.
    func describeStorageConfiguration(input: DescribeStorageConfigurationInput) async throws -> DescribeStorageConfigurationOutputResponse
    {
        typealias describeStorageConfigurationContinuation = CheckedContinuation<DescribeStorageConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStorageConfigurationContinuation) in
            describeStorageConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a child asset from the given parent asset through a hierarchy defined in the parent asset's model.
    func disassociateAssets(input: DisassociateAssetsInput) async throws -> DisassociateAssetsOutputResponse
    {
        typealias disassociateAssetsContinuation = CheckedContinuation<DisassociateAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateAssetsContinuation) in
            disassociateAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets aggregated values for an asset property. For more information, see [Querying aggregates](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/query-industrial-data.html#aggregates) in the IoT SiteWise User Guide. To identify an asset property, you must specify one of the following:
    ///
    /// * The assetId and propertyId of an asset property.
    ///
    /// * A propertyAlias, which is a data stream alias (for example, /company/windfarm/3/turbine/7/temperature). To define an asset property's alias, see [UpdateAssetProperty](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html).
    func getAssetPropertyAggregates(input: GetAssetPropertyAggregatesInput) async throws -> GetAssetPropertyAggregatesOutputResponse
    {
        typealias getAssetPropertyAggregatesContinuation = CheckedContinuation<GetAssetPropertyAggregatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAssetPropertyAggregatesContinuation) in
            getAssetPropertyAggregates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets an asset property's current value. For more information, see [Querying current values](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/query-industrial-data.html#current-values) in the IoT SiteWise User Guide. To identify an asset property, you must specify one of the following:
    ///
    /// * The assetId and propertyId of an asset property.
    ///
    /// * A propertyAlias, which is a data stream alias (for example, /company/windfarm/3/turbine/7/temperature). To define an asset property's alias, see [UpdateAssetProperty](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html).
    func getAssetPropertyValue(input: GetAssetPropertyValueInput) async throws -> GetAssetPropertyValueOutputResponse
    {
        typealias getAssetPropertyValueContinuation = CheckedContinuation<GetAssetPropertyValueOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAssetPropertyValueContinuation) in
            getAssetPropertyValue(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the history of an asset property's values. For more information, see [Querying historical values](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/query-industrial-data.html#historical-values) in the IoT SiteWise User Guide. To identify an asset property, you must specify one of the following:
    ///
    /// * The assetId and propertyId of an asset property.
    ///
    /// * A propertyAlias, which is a data stream alias (for example, /company/windfarm/3/turbine/7/temperature). To define an asset property's alias, see [UpdateAssetProperty](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html).
    func getAssetPropertyValueHistory(input: GetAssetPropertyValueHistoryInput) async throws -> GetAssetPropertyValueHistoryOutputResponse
    {
        typealias getAssetPropertyValueHistoryContinuation = CheckedContinuation<GetAssetPropertyValueHistoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAssetPropertyValueHistoryContinuation) in
            getAssetPropertyValueHistory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get interpolated values for an asset property for a specified time interval, during a period of time. If your time series is missing data points during the specified time interval, you can use interpolation to estimate the missing data. For example, you can use this operation to return the interpolated temperature values for a wind turbine every 24 hours over a duration of 7 days. To identify an asset property, you must specify one of the following:
    ///
    /// * The assetId and propertyId of an asset property.
    ///
    /// * A propertyAlias, which is a data stream alias (for example, /company/windfarm/3/turbine/7/temperature). To define an asset property's alias, see [UpdateAssetProperty](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html).
    func getInterpolatedAssetPropertyValues(input: GetInterpolatedAssetPropertyValuesInput) async throws -> GetInterpolatedAssetPropertyValuesOutputResponse
    {
        typealias getInterpolatedAssetPropertyValuesContinuation = CheckedContinuation<GetInterpolatedAssetPropertyValuesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInterpolatedAssetPropertyValuesContinuation) in
            getInterpolatedAssetPropertyValues(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a paginated list of access policies for an identity (an Amazon Web Services SSO user, an Amazon Web Services SSO group, or an IAM user) or an IoT SiteWise Monitor resource (a portal or project).
    func listAccessPolicies(input: ListAccessPoliciesInput) async throws -> ListAccessPoliciesOutputResponse
    {
        typealias listAccessPoliciesContinuation = CheckedContinuation<ListAccessPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAccessPoliciesContinuation) in
            listAccessPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a paginated list of summaries of all asset models.
    func listAssetModels(input: ListAssetModelsInput) async throws -> ListAssetModelsOutputResponse
    {
        typealias listAssetModelsContinuation = CheckedContinuation<ListAssetModelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssetModelsContinuation) in
            listAssetModels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a paginated list of asset relationships for an asset. You can use this operation to identify an asset's root asset and all associated assets between that asset and its root.
    func listAssetRelationships(input: ListAssetRelationshipsInput) async throws -> ListAssetRelationshipsOutputResponse
    {
        typealias listAssetRelationshipsContinuation = CheckedContinuation<ListAssetRelationshipsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssetRelationshipsContinuation) in
            listAssetRelationships(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a paginated list of asset summaries. You can use this operation to do the following:
    ///
    /// * List assets based on a specific asset model.
    ///
    /// * List top-level assets.
    ///
    ///
    /// You can't use this operation to list all assets. To retrieve summaries for all of your assets, use [ListAssetModels](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_ListAssetModels.html) to get all of your asset model IDs. Then, use ListAssets to get all assets for each asset model.
    func listAssets(input: ListAssetsInput) async throws -> ListAssetsOutputResponse
    {
        typealias listAssetsContinuation = CheckedContinuation<ListAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssetsContinuation) in
            listAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a paginated list of associated assets. You can use this operation to do the following:
    ///
    /// * List child assets associated to a parent asset by a hierarchy that you specify.
    ///
    /// * List an asset's parent asset.
    func listAssociatedAssets(input: ListAssociatedAssetsInput) async throws -> ListAssociatedAssetsOutputResponse
    {
        typealias listAssociatedAssetsContinuation = CheckedContinuation<ListAssociatedAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssociatedAssetsContinuation) in
            listAssociatedAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a paginated list of dashboards for an IoT SiteWise Monitor project.
    func listDashboards(input: ListDashboardsInput) async throws -> ListDashboardsOutputResponse
    {
        typealias listDashboardsContinuation = CheckedContinuation<ListDashboardsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDashboardsContinuation) in
            listDashboards(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a paginated list of gateways.
    func listGateways(input: ListGatewaysInput) async throws -> ListGatewaysOutputResponse
    {
        typealias listGatewaysContinuation = CheckedContinuation<ListGatewaysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listGatewaysContinuation) in
            listGateways(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a paginated list of IoT SiteWise Monitor portals.
    func listPortals(input: ListPortalsInput) async throws -> ListPortalsOutputResponse
    {
        typealias listPortalsContinuation = CheckedContinuation<ListPortalsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPortalsContinuation) in
            listPortals(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a paginated list of assets associated with an IoT SiteWise Monitor project.
    func listProjectAssets(input: ListProjectAssetsInput) async throws -> ListProjectAssetsOutputResponse
    {
        typealias listProjectAssetsContinuation = CheckedContinuation<ListProjectAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProjectAssetsContinuation) in
            listProjectAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a paginated list of projects for an IoT SiteWise Monitor portal.
    func listProjects(input: ListProjectsInput) async throws -> ListProjectsOutputResponse
    {
        typealias listProjectsContinuation = CheckedContinuation<ListProjectsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProjectsContinuation) in
            listProjects(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the list of tags for an IoT SiteWise resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the default encryption configuration for the Amazon Web Services account. For more information, see [Key management](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/key-management.html) in the IoT SiteWise User Guide.
    func putDefaultEncryptionConfiguration(input: PutDefaultEncryptionConfigurationInput) async throws -> PutDefaultEncryptionConfigurationOutputResponse
    {
        typealias putDefaultEncryptionConfigurationContinuation = CheckedContinuation<PutDefaultEncryptionConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putDefaultEncryptionConfigurationContinuation) in
            putDefaultEncryptionConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets logging options for IoT SiteWise.
    func putLoggingOptions(input: PutLoggingOptionsInput) async throws -> PutLoggingOptionsOutputResponse
    {
        typealias putLoggingOptionsContinuation = CheckedContinuation<PutLoggingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putLoggingOptionsContinuation) in
            putLoggingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Configures storage settings for IoT SiteWise.
    func putStorageConfiguration(input: PutStorageConfigurationInput) async throws -> PutStorageConfigurationOutputResponse
    {
        typealias putStorageConfigurationContinuation = CheckedContinuation<PutStorageConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putStorageConfigurationContinuation) in
            putStorageConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds tags to an IoT SiteWise resource. If a tag already exists for the resource, this operation updates the tag's value.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a tag from an IoT SiteWise resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing access policy that specifies an identity's access to an IoT SiteWise Monitor portal or project resource.
    func updateAccessPolicy(input: UpdateAccessPolicyInput) async throws -> UpdateAccessPolicyOutputResponse
    {
        typealias updateAccessPolicyContinuation = CheckedContinuation<UpdateAccessPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAccessPolicyContinuation) in
            updateAccessPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an asset's name. For more information, see [Updating assets and models](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-assets-and-models.html) in the IoT SiteWise User Guide.
    func updateAsset(input: UpdateAssetInput) async throws -> UpdateAssetOutputResponse
    {
        typealias updateAssetContinuation = CheckedContinuation<UpdateAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAssetContinuation) in
            updateAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an asset model and all of the assets that were created from the model. Each asset created from the model inherits the updated asset model's property and hierarchy definitions. For more information, see [Updating assets and models](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-assets-and-models.html) in the IoT SiteWise User Guide. This operation overwrites the existing model with the provided model. To avoid deleting your asset model's properties or hierarchies, you must include their IDs and definitions in the updated asset model payload. For more information, see [DescribeAssetModel](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeAssetModel.html). If you remove a property from an asset model, IoT SiteWise deletes all previous data for that property. If you remove a hierarchy definition from an asset model, IoT SiteWise disassociates every asset associated with that hierarchy. You can't change the type or data type of an existing property.
    func updateAssetModel(input: UpdateAssetModelInput) async throws -> UpdateAssetModelOutputResponse
    {
        typealias updateAssetModelContinuation = CheckedContinuation<UpdateAssetModelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAssetModelContinuation) in
            updateAssetModel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an asset property's alias and notification state. This operation overwrites the property's existing alias and notification state. To keep your existing property's alias or notification state, you must include the existing values in the UpdateAssetProperty request. For more information, see [DescribeAssetProperty](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeAssetProperty.html).
    func updateAssetProperty(input: UpdateAssetPropertyInput) async throws -> UpdateAssetPropertyOutputResponse
    {
        typealias updateAssetPropertyContinuation = CheckedContinuation<UpdateAssetPropertyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAssetPropertyContinuation) in
            updateAssetProperty(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an IoT SiteWise Monitor dashboard.
    func updateDashboard(input: UpdateDashboardInput) async throws -> UpdateDashboardOutputResponse
    {
        typealias updateDashboardContinuation = CheckedContinuation<UpdateDashboardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDashboardContinuation) in
            updateDashboard(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a gateway's name.
    func updateGateway(input: UpdateGatewayInput) async throws -> UpdateGatewayOutputResponse
    {
        typealias updateGatewayContinuation = CheckedContinuation<UpdateGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGatewayContinuation) in
            updateGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a gateway capability configuration or defines a new capability configuration. Each gateway capability defines data sources for a gateway. A capability configuration can contain multiple data source configurations. If you define OPC-UA sources for a gateway in the IoT SiteWise console, all of your OPC-UA sources are stored in one capability configuration. To list all capability configurations for a gateway, use [DescribeGateway](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeGateway.html).
    func updateGatewayCapabilityConfiguration(input: UpdateGatewayCapabilityConfigurationInput) async throws -> UpdateGatewayCapabilityConfigurationOutputResponse
    {
        typealias updateGatewayCapabilityConfigurationContinuation = CheckedContinuation<UpdateGatewayCapabilityConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGatewayCapabilityConfigurationContinuation) in
            updateGatewayCapabilityConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an IoT SiteWise Monitor portal.
    func updatePortal(input: UpdatePortalInput) async throws -> UpdatePortalOutputResponse
    {
        typealias updatePortalContinuation = CheckedContinuation<UpdatePortalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePortalContinuation) in
            updatePortal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an IoT SiteWise Monitor project.
    func updateProject(input: UpdateProjectInput) async throws -> UpdateProjectOutputResponse
    {
        typealias updateProjectContinuation = CheckedContinuation<UpdateProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProjectContinuation) in
            updateProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
