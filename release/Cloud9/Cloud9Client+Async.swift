// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension Cloud9Client {
    /// <p>Creates an AWS Cloud9 development environment, launches an Amazon Elastic Compute Cloud (Amazon EC2) instance, and then connects from the instance to the environment.</p>
    func createEnvironmentEC2(input: CreateEnvironmentEC2Input) async throws -> CreateEnvironmentEC2OutputResponse
    {
        typealias createEnvironmentEC2Continuation = CheckedContinuation<CreateEnvironmentEC2OutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEnvironmentEC2Continuation) in
            createEnvironmentEC2(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds an environment member to an AWS Cloud9 development environment.</p>
    func createEnvironmentMembership(input: CreateEnvironmentMembershipInput) async throws -> CreateEnvironmentMembershipOutputResponse
    {
        typealias createEnvironmentMembershipContinuation = CheckedContinuation<CreateEnvironmentMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEnvironmentMembershipContinuation) in
            createEnvironmentMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an AWS Cloud9 development environment. If an Amazon EC2 instance is connected to the environment, also terminates the instance.</p>
    func deleteEnvironment(input: DeleteEnvironmentInput) async throws -> DeleteEnvironmentOutputResponse
    {
        typealias deleteEnvironmentContinuation = CheckedContinuation<DeleteEnvironmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEnvironmentContinuation) in
            deleteEnvironment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an environment member from an AWS Cloud9 development environment.</p>
    func deleteEnvironmentMembership(input: DeleteEnvironmentMembershipInput) async throws -> DeleteEnvironmentMembershipOutputResponse
    {
        typealias deleteEnvironmentMembershipContinuation = CheckedContinuation<DeleteEnvironmentMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEnvironmentMembershipContinuation) in
            deleteEnvironmentMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about environment members for an AWS Cloud9 development environment.</p>
    func describeEnvironmentMemberships(input: DescribeEnvironmentMembershipsInput) async throws -> DescribeEnvironmentMembershipsOutputResponse
    {
        typealias describeEnvironmentMembershipsContinuation = CheckedContinuation<DescribeEnvironmentMembershipsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEnvironmentMembershipsContinuation) in
            describeEnvironmentMemberships(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets status information for an AWS Cloud9 development environment.</p>
    func describeEnvironmentStatus(input: DescribeEnvironmentStatusInput) async throws -> DescribeEnvironmentStatusOutputResponse
    {
        typealias describeEnvironmentStatusContinuation = CheckedContinuation<DescribeEnvironmentStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEnvironmentStatusContinuation) in
            describeEnvironmentStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about AWS Cloud9 development environments.</p>
    func describeEnvironments(input: DescribeEnvironmentsInput) async throws -> DescribeEnvironmentsOutputResponse
    {
        typealias describeEnvironmentsContinuation = CheckedContinuation<DescribeEnvironmentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEnvironmentsContinuation) in
            describeEnvironments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a list of AWS Cloud9 development environment identifiers.</p>
    func listEnvironments(input: ListEnvironmentsInput) async throws -> ListEnvironmentsOutputResponse
    {
        typealias listEnvironmentsContinuation = CheckedContinuation<ListEnvironmentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEnvironmentsContinuation) in
            listEnvironments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a list of the tags associated with an AWS Cloud9 development environment.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds tags to an AWS Cloud9 development environment.</p>
    ///          <important>
    ///             <p>Tags that you add to an AWS Cloud9 environment by using this method will NOT be automatically propagated to underlying resources.</p>
    ///          </important>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes tags from an AWS Cloud9 development environment.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Changes the settings of an existing AWS Cloud9 development environment.</p>
    func updateEnvironment(input: UpdateEnvironmentInput) async throws -> UpdateEnvironmentOutputResponse
    {
        typealias updateEnvironmentContinuation = CheckedContinuation<UpdateEnvironmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEnvironmentContinuation) in
            updateEnvironment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Changes the settings of an existing environment member for an AWS Cloud9 development environment.</p>
    func updateEnvironmentMembership(input: UpdateEnvironmentMembershipInput) async throws -> UpdateEnvironmentMembershipOutputResponse
    {
        typealias updateEnvironmentMembershipContinuation = CheckedContinuation<UpdateEnvironmentMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEnvironmentMembershipContinuation) in
            updateEnvironmentMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
