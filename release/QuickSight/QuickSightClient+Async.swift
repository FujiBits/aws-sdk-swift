// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension QuickSightClient {
    /// <p>Cancels an ongoing ingestion of data into SPICE.</p>
    func cancelIngestion(input: CancelIngestionInput) async throws -> CancelIngestionOutputResponse
    {
        typealias cancelIngestionContinuation = CheckedContinuation<CancelIngestionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelIngestionContinuation) in
            cancelIngestion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates Amazon QuickSight customizations the current AWS Region. Currently, you can
    ///             add a custom default theme by using the <code>CreateAccountCustomization</code> or
    ///                 <code>UpdateAccountCustomization</code> API operation. To further customize
    ///             QuickSight by removing QuickSight sample assets and videos for all new users, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-quicksight.html">Customizing QuickSight</a> in the <i>Amazon QuickSight User
    ///                 Guide.</i>
    ///          </p>
    ///         <p>You can create customizations for your AWS account or, if you specify a namespace, for
    ///             a QuickSight namespace instead. Customizations that apply to a namespace always override
    ///             customizations that apply to an AWS account. To find out which customizations apply, use
    ///             the <code>DescribeAccountCustomization</code> API operation.</p>
    ///         <p>Before you use the <code>CreateAccountCustomization</code> API operation to add a theme
    ///             as the namespace default, make sure that you first share the theme with the namespace.
    ///             If you don't share it with the namespace, the theme isn't visible to your users
    ///             even if you make it the default theme.
    ///             To check if the theme is shared, view the current permissions by using the
    ///             <code>
    ///                <a>DescribeThemePermissions</a>
    ///             </code> API operation.
    ///             To share the theme, grant permissions by using the
    ///             <code>
    ///                <a>UpdateThemePermissions</a>
    ///             </code> API operation. </p>
    func createAccountCustomization(input: CreateAccountCustomizationInput) async throws -> CreateAccountCustomizationOutputResponse
    {
        typealias createAccountCustomizationContinuation = CheckedContinuation<CreateAccountCustomizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAccountCustomizationContinuation) in
            createAccountCustomization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an analysis in Amazon QuickSight.</p>
    func createAnalysis(input: CreateAnalysisInput) async throws -> CreateAnalysisOutputResponse
    {
        typealias createAnalysisContinuation = CheckedContinuation<CreateAnalysisOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAnalysisContinuation) in
            createAnalysis(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a dashboard from a template. To first create a template, see the <code>
    ///                <a>CreateTemplate</a>
    ///             </code> API operation.</p>
    ///         <p>A dashboard is an entity in QuickSight that identifies QuickSight reports, created
    ///             from analyses. You can share QuickSight dashboards. With the right permissions, you can
    ///             create scheduled email reports from them. If you have the correct permissions, you can
    ///             create a dashboard from a template that exists in a different AWS account.</p>
    func createDashboard(input: CreateDashboardInput) async throws -> CreateDashboardOutputResponse
    {
        typealias createDashboardContinuation = CheckedContinuation<CreateDashboardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDashboardContinuation) in
            createDashboard(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a dataset.</p>
    func createDataSet(input: CreateDataSetInput) async throws -> CreateDataSetOutputResponse
    {
        typealias createDataSetContinuation = CheckedContinuation<CreateDataSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDataSetContinuation) in
            createDataSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a data source.</p>
    func createDataSource(input: CreateDataSourceInput) async throws -> CreateDataSourceOutputResponse
    {
        typealias createDataSourceContinuation = CheckedContinuation<CreateDataSourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDataSourceContinuation) in
            createDataSource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an Amazon QuickSight group.</p>
    /// 		       <p>The permissions resource is
    /// 					<code>arn:aws:quicksight:us-east-1:<i><relevant-aws-account-id></i>:group/default/<i><group-name></i>
    ///             </code>.</p>
    /// 		       <p>The response is a group object.</p>
    func createGroup(input: CreateGroupInput) async throws -> CreateGroupOutputResponse
    {
        typealias createGroupContinuation = CheckedContinuation<CreateGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createGroupContinuation) in
            createGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds an Amazon QuickSight user to an Amazon QuickSight group. </p>
    func createGroupMembership(input: CreateGroupMembershipInput) async throws -> CreateGroupMembershipOutputResponse
    {
        typealias createGroupMembershipContinuation = CheckedContinuation<CreateGroupMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createGroupMembershipContinuation) in
            createGroupMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an assignment with one specified IAM policy, identified by its Amazon Resource Name
    /// 			(ARN). This policy assignment is attached to the specified groups or users of Amazon QuickSight.
    /// 			Assignment names are unique per AWS account. To avoid overwriting rules in other namespaces,
    /// 			use assignment names that are unique.</p>
    func createIAMPolicyAssignment(input: CreateIAMPolicyAssignmentInput) async throws -> CreateIAMPolicyAssignmentOutputResponse
    {
        typealias createIAMPolicyAssignmentContinuation = CheckedContinuation<CreateIAMPolicyAssignmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createIAMPolicyAssignmentContinuation) in
            createIAMPolicyAssignment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates and starts a new SPICE ingestion on a dataset</p>
    /// 		
    /// 		       <p>Any ingestions operating on tagged datasets inherit the same tags automatically for use in
    /// 			access control. For an example, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/iam-ec2-resource-tags/">How do I create an IAM policy to control access to Amazon EC2 resources using
    /// 				tags?</a> in the AWS Knowledge Center. Tags are visible on the tagged dataset, but not on the ingestion resource.</p>
    func createIngestion(input: CreateIngestionInput) async throws -> CreateIngestionOutputResponse
    {
        typealias createIngestionContinuation = CheckedContinuation<CreateIngestionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createIngestionContinuation) in
            createIngestion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>(Enterprise edition only) Creates a new namespace for you to use with Amazon QuickSight.</p>
    ///         <p>A namespace allows you to isolate the QuickSight users and groups that are registered
    ///             for that namespace. Users that access the namespace can share assets only with other
    ///             users or groups in the same namespace. They can't see users and groups in other
    ///             namespaces. You can create a namespace after your AWS account is subscribed to
    ///             QuickSight. The namespace must be unique within the AWS account. By default, there is a
    ///             limit of 100 namespaces per AWS account. To increase your limit, create a ticket with
    ///             AWS Support. </p>
    func createNamespace(input: CreateNamespaceInput) async throws -> CreateNamespaceOutputResponse
    {
        typealias createNamespaceContinuation = CheckedContinuation<CreateNamespaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createNamespaceContinuation) in
            createNamespace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a template from an existing QuickSight analysis or template. You can use the resulting
    /// 			template to create a dashboard.</p>
    /// 		       <p>A <i>template</i> is an entity in QuickSight that encapsulates the metadata
    /// 			required to create an analysis and that you can use to create s dashboard. A template adds
    /// 			a layer of abstraction by using placeholders to replace the dataset associated with the
    /// 			analysis. You can use templates to create dashboards by replacing dataset placeholders
    /// 			with datasets that follow the same schema that was used to create the source analysis
    /// 			and template.</p>
    func createTemplate(input: CreateTemplateInput) async throws -> CreateTemplateOutputResponse
    {
        typealias createTemplateContinuation = CheckedContinuation<CreateTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTemplateContinuation) in
            createTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a template alias for a template.</p>
    func createTemplateAlias(input: CreateTemplateAliasInput) async throws -> CreateTemplateAliasOutputResponse
    {
        typealias createTemplateAliasContinuation = CheckedContinuation<CreateTemplateAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTemplateAliasContinuation) in
            createTemplateAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a theme.</p>
    /// 		       <p>A <i>theme</i> is set of configuration options for color and layout.
    /// 			Themes apply to analyses and dashboards. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using
    /// 			Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    func createTheme(input: CreateThemeInput) async throws -> CreateThemeOutputResponse
    {
        typealias createThemeContinuation = CheckedContinuation<CreateThemeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createThemeContinuation) in
            createTheme(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a theme alias for a theme.</p>
    func createThemeAlias(input: CreateThemeAliasInput) async throws -> CreateThemeAliasOutputResponse
    {
        typealias createThemeAliasContinuation = CheckedContinuation<CreateThemeAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createThemeAliasContinuation) in
            createThemeAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes all Amazon QuickSight customizations in this AWS Region for the specified AWS
    ///             account and QuickSight namespace.</p>
    func deleteAccountCustomization(input: DeleteAccountCustomizationInput) async throws -> DeleteAccountCustomizationOutputResponse
    {
        typealias deleteAccountCustomizationContinuation = CheckedContinuation<DeleteAccountCustomizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAccountCustomizationContinuation) in
            deleteAccountCustomization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an analysis from Amazon QuickSight. You can optionally include a recovery window during
    ///             which you can restore the analysis. If you don't specify a recovery window value, the
    ///             operation defaults to 30 days. QuickSight attaches a <code>DeletionTime</code> stamp to
    ///             the response that specifies the end of the recovery window. At the end of the recovery
    ///             window, QuickSight deletes the analysis permanently.</p>
    ///         <p>At any time before recovery window ends, you can use the <code>RestoreAnalysis</code>
    ///             API operation to remove the <code>DeletionTime</code> stamp and cancel the deletion of
    ///             the analysis. The analysis remains visible in the API until it's deleted, so you can
    ///             describe it but you can't make a template from it.</p>
    ///         <p>An analysis that's scheduled for deletion isn't accessible in the QuickSight console.
    ///             To access it in the console, restore it. Deleting an analysis doesn't delete the
    ///             dashboards that you publish from it.</p>
    func deleteAnalysis(input: DeleteAnalysisInput) async throws -> DeleteAnalysisOutputResponse
    {
        typealias deleteAnalysisContinuation = CheckedContinuation<DeleteAnalysisOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAnalysisContinuation) in
            deleteAnalysis(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a dashboard.</p>
    func deleteDashboard(input: DeleteDashboardInput) async throws -> DeleteDashboardOutputResponse
    {
        typealias deleteDashboardContinuation = CheckedContinuation<DeleteDashboardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDashboardContinuation) in
            deleteDashboard(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a dataset.</p>
    func deleteDataSet(input: DeleteDataSetInput) async throws -> DeleteDataSetOutputResponse
    {
        typealias deleteDataSetContinuation = CheckedContinuation<DeleteDataSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDataSetContinuation) in
            deleteDataSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the data source permanently. This operation breaks
    /// 			all the datasets that reference the deleted data source.</p>
    func deleteDataSource(input: DeleteDataSourceInput) async throws -> DeleteDataSourceOutputResponse
    {
        typealias deleteDataSourceContinuation = CheckedContinuation<DeleteDataSourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDataSourceContinuation) in
            deleteDataSource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes a user group from Amazon QuickSight. </p>
    func deleteGroup(input: DeleteGroupInput) async throws -> DeleteGroupOutputResponse
    {
        typealias deleteGroupContinuation = CheckedContinuation<DeleteGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteGroupContinuation) in
            deleteGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes a user from a group so that the user is no longer a member of the group.</p>
    func deleteGroupMembership(input: DeleteGroupMembershipInput) async throws -> DeleteGroupMembershipOutputResponse
    {
        typealias deleteGroupMembershipContinuation = CheckedContinuation<DeleteGroupMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteGroupMembershipContinuation) in
            deleteGroupMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an existing IAM policy assignment.</p>
    func deleteIAMPolicyAssignment(input: DeleteIAMPolicyAssignmentInput) async throws -> DeleteIAMPolicyAssignmentOutputResponse
    {
        typealias deleteIAMPolicyAssignmentContinuation = CheckedContinuation<DeleteIAMPolicyAssignmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIAMPolicyAssignmentContinuation) in
            deleteIAMPolicyAssignment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a namespace and the users and groups that are associated with the namespace.
    ///         This is an asynchronous process. Assets including dashboards, analyses, datasets and data sources are not
    ///         deleted. To delete these assets, you use the API operations for the relevant asset. </p>
    func deleteNamespace(input: DeleteNamespaceInput) async throws -> DeleteNamespaceOutputResponse
    {
        typealias deleteNamespaceContinuation = CheckedContinuation<DeleteNamespaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteNamespaceContinuation) in
            deleteNamespace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a template.</p>
    func deleteTemplate(input: DeleteTemplateInput) async throws -> DeleteTemplateOutputResponse
    {
        typealias deleteTemplateContinuation = CheckedContinuation<DeleteTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTemplateContinuation) in
            deleteTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the item that the specified template alias points to. If you provide a specific
    /// 			alias, you delete the version of the template that the alias points to.</p>
    func deleteTemplateAlias(input: DeleteTemplateAliasInput) async throws -> DeleteTemplateAliasOutputResponse
    {
        typealias deleteTemplateAliasContinuation = CheckedContinuation<DeleteTemplateAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTemplateAliasContinuation) in
            deleteTemplateAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a theme.</p>
    func deleteTheme(input: DeleteThemeInput) async throws -> DeleteThemeOutputResponse
    {
        typealias deleteThemeContinuation = CheckedContinuation<DeleteThemeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteThemeContinuation) in
            deleteTheme(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the version of the theme that the specified theme alias points to.
    /// 			If you provide a specific alias, you delete the version of the theme
    /// 			that the alias points to.</p>
    func deleteThemeAlias(input: DeleteThemeAliasInput) async throws -> DeleteThemeAliasOutputResponse
    {
        typealias deleteThemeAliasContinuation = CheckedContinuation<DeleteThemeAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteThemeAliasContinuation) in
            deleteThemeAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the Amazon QuickSight user that is associated with the identity of the AWS
    /// 			Identity and Access Management (IAM) user or role that's making the call. The IAM user
    /// 			isn't deleted as a result of this call. </p>
    func deleteUser(input: DeleteUserInput) async throws -> DeleteUserOutputResponse
    {
        typealias deleteUserContinuation = CheckedContinuation<DeleteUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserContinuation) in
            deleteUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a user identified by its principal ID. </p>
    func deleteUserByPrincipalId(input: DeleteUserByPrincipalIdInput) async throws -> DeleteUserByPrincipalIdOutputResponse
    {
        typealias deleteUserByPrincipalIdContinuation = CheckedContinuation<DeleteUserByPrincipalIdOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserByPrincipalIdContinuation) in
            deleteUserByPrincipalId(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the customizations associated with the provided AWS account and Amazon
    ///             QuickSight namespace in an AWS Region. The QuickSight console evaluates which
    ///             customizations to apply by running this API operation with the <code>Resolved</code> flag
    ///             included. </p>
    ///         <p>To determine what customizations display when you run this command, it can help to
    ///             visualize the relationship of the entities involved. </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>AWS Account</code> - The AWS account exists at the top of the hierarchy.
    ///                     It has the potential to use all of the AWS Regions and AWS Services. When you
    ///                     subscribe to QuickSight, you choose one AWS Region to use as your home Region.
    ///                     That's where your free SPICE capacity is located. You can use QuickSight in any
    ///                     supported AWS Region. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>AWS Region</code> - In each AWS Region where you sign in to QuickSight
    ///                     at least once, QuickSight acts as a separate instance of the same service. If
    ///                     you have a user directory, it resides in us-east-1, which is the US East (N.
    ///                     Virginia). Generally speaking, these users have access to QuickSight in any AWS
    ///                     Region, unless they are constrained to a namespace. </p>
    ///                 <p>To run the command in a different AWS Region, you change your Region settings.
    ///                     If you're using the AWS CLI, you can use one of the following options:</p>
    ///                 <ul>
    ///                   <li>
    ///                         <p>Use <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-options.html">command line options</a>. </p>
    ///                     </li>
    ///                   <li>
    ///                         <p>Use <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html">named profiles</a>. </p>
    ///                     </li>
    ///                   <li>
    ///                         <p>Run <code>aws configure</code> to change your default AWS Region. Use
    ///                             Enter to key the same settings for your keys. For more information, see
    ///                             <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html">Configuring the AWS CLI</a>.</p>
    ///                     </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Namespace</code> - A QuickSight namespace is a partition that contains
    ///                     users and assets (data sources, datasets, dashboards, and so on). To access
    ///                     assets that are in a specific namespace, users and groups must also be part of
    ///                     the same namespace. People who share a namespace are completely isolated from
    ///                     users and assets in other namespaces, even if they are in the same AWS account
    ///                     and AWS Region.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Applied customizations</code> -  Within an AWS Region, a set of
    ///                     QuickSight customizations can apply to an AWS account or to a namespace.
    ///                     Settings that you apply to a namespace override settings that you apply to an
    ///                     AWS account. All settings are isolated to a single AWS Region. To apply them in
    ///                     other AWS Regions, run the <code>CreateAccountCustomization</code> command in
    ///                     each AWS Region where you want to apply the same customizations. </p>
    ///             </li>
    ///          </ul>
    func describeAccountCustomization(input: DescribeAccountCustomizationInput) async throws -> DescribeAccountCustomizationOutputResponse
    {
        typealias describeAccountCustomizationContinuation = CheckedContinuation<DescribeAccountCustomizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccountCustomizationContinuation) in
            describeAccountCustomization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the settings that were used when your QuickSight subscription was first
    ///             created in this AWS account.</p>
    func describeAccountSettings(input: DescribeAccountSettingsInput) async throws -> DescribeAccountSettingsOutputResponse
    {
        typealias describeAccountSettingsContinuation = CheckedContinuation<DescribeAccountSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccountSettingsContinuation) in
            describeAccountSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides a summary of the metadata for an analysis.</p>
    func describeAnalysis(input: DescribeAnalysisInput) async throws -> DescribeAnalysisOutputResponse
    {
        typealias describeAnalysisContinuation = CheckedContinuation<DescribeAnalysisOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAnalysisContinuation) in
            describeAnalysis(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides the read and write permissions for an analysis.</p>
    func describeAnalysisPermissions(input: DescribeAnalysisPermissionsInput) async throws -> DescribeAnalysisPermissionsOutputResponse
    {
        typealias describeAnalysisPermissionsContinuation = CheckedContinuation<DescribeAnalysisPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAnalysisPermissionsContinuation) in
            describeAnalysisPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides a summary for a dashboard.</p>
    func describeDashboard(input: DescribeDashboardInput) async throws -> DescribeDashboardOutputResponse
    {
        typealias describeDashboardContinuation = CheckedContinuation<DescribeDashboardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDashboardContinuation) in
            describeDashboard(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes read and write permissions for a dashboard.</p>
    func describeDashboardPermissions(input: DescribeDashboardPermissionsInput) async throws -> DescribeDashboardPermissionsOutputResponse
    {
        typealias describeDashboardPermissionsContinuation = CheckedContinuation<DescribeDashboardPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDashboardPermissionsContinuation) in
            describeDashboardPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a dataset. </p>
    func describeDataSet(input: DescribeDataSetInput) async throws -> DescribeDataSetOutputResponse
    {
        typealias describeDataSetContinuation = CheckedContinuation<DescribeDataSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDataSetContinuation) in
            describeDataSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the permissions on a dataset.</p>
    /// 		       <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p>
    func describeDataSetPermissions(input: DescribeDataSetPermissionsInput) async throws -> DescribeDataSetPermissionsOutputResponse
    {
        typealias describeDataSetPermissionsContinuation = CheckedContinuation<DescribeDataSetPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDataSetPermissionsContinuation) in
            describeDataSetPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a data source.</p>
    func describeDataSource(input: DescribeDataSourceInput) async throws -> DescribeDataSourceOutputResponse
    {
        typealias describeDataSourceContinuation = CheckedContinuation<DescribeDataSourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDataSourceContinuation) in
            describeDataSource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the resource permissions for a data source.</p>
    func describeDataSourcePermissions(input: DescribeDataSourcePermissionsInput) async throws -> DescribeDataSourcePermissionsOutputResponse
    {
        typealias describeDataSourcePermissionsContinuation = CheckedContinuation<DescribeDataSourcePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDataSourcePermissionsContinuation) in
            describeDataSourcePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns an Amazon QuickSight group's description and Amazon Resource Name (ARN). </p>
    func describeGroup(input: DescribeGroupInput) async throws -> DescribeGroupOutputResponse
    {
        typealias describeGroupContinuation = CheckedContinuation<DescribeGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeGroupContinuation) in
            describeGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes an existing IAM policy assignment, as specified by the assignment name.</p>
    func describeIAMPolicyAssignment(input: DescribeIAMPolicyAssignmentInput) async throws -> DescribeIAMPolicyAssignmentOutputResponse
    {
        typealias describeIAMPolicyAssignmentContinuation = CheckedContinuation<DescribeIAMPolicyAssignmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeIAMPolicyAssignmentContinuation) in
            describeIAMPolicyAssignment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a SPICE ingestion.</p>
    func describeIngestion(input: DescribeIngestionInput) async throws -> DescribeIngestionOutputResponse
    {
        typealias describeIngestionContinuation = CheckedContinuation<DescribeIngestionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeIngestionContinuation) in
            describeIngestion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the current namespace.</p>
    func describeNamespace(input: DescribeNamespaceInput) async throws -> DescribeNamespaceOutputResponse
    {
        typealias describeNamespaceContinuation = CheckedContinuation<DescribeNamespaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeNamespaceContinuation) in
            describeNamespace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a template's metadata.</p>
    func describeTemplate(input: DescribeTemplateInput) async throws -> DescribeTemplateOutputResponse
    {
        typealias describeTemplateContinuation = CheckedContinuation<DescribeTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeTemplateContinuation) in
            describeTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the template alias for a template.</p>
    func describeTemplateAlias(input: DescribeTemplateAliasInput) async throws -> DescribeTemplateAliasOutputResponse
    {
        typealias describeTemplateAliasContinuation = CheckedContinuation<DescribeTemplateAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeTemplateAliasContinuation) in
            describeTemplateAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes read and write permissions on a template.</p>
    func describeTemplatePermissions(input: DescribeTemplatePermissionsInput) async throws -> DescribeTemplatePermissionsOutputResponse
    {
        typealias describeTemplatePermissionsContinuation = CheckedContinuation<DescribeTemplatePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeTemplatePermissionsContinuation) in
            describeTemplatePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a theme.</p>
    func describeTheme(input: DescribeThemeInput) async throws -> DescribeThemeOutputResponse
    {
        typealias describeThemeContinuation = CheckedContinuation<DescribeThemeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeThemeContinuation) in
            describeTheme(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the alias for a theme.</p>
    func describeThemeAlias(input: DescribeThemeAliasInput) async throws -> DescribeThemeAliasOutputResponse
    {
        typealias describeThemeAliasContinuation = CheckedContinuation<DescribeThemeAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeThemeAliasContinuation) in
            describeThemeAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the read and write permissions for a theme.</p>
    func describeThemePermissions(input: DescribeThemePermissionsInput) async throws -> DescribeThemePermissionsOutputResponse
    {
        typealias describeThemePermissionsContinuation = CheckedContinuation<DescribeThemePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeThemePermissionsContinuation) in
            describeThemePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a user, given the user name. </p>
    func describeUser(input: DescribeUserInput) async throws -> DescribeUserOutputResponse
    {
        typealias describeUserContinuation = CheckedContinuation<DescribeUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUserContinuation) in
            describeUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Generates a session URL and authorization code that you can use to embed an Amazon
    ///             QuickSight read-only dashboard in your web server code. Before you use this command,
    ///             make sure that you have configured the dashboards and permissions. </p>
    ///         <p>Currently, you can use <code>GetDashboardEmbedURL</code> only from the server, not
    ///             from the user's browser. The following rules apply to the combination of URL and
    ///             authorization code:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>They must be used together.</p>
    ///             </li>
    ///             <li>
    ///                 <p>They can be used one time only.</p>
    ///             </li>
    ///             <li>
    ///                 <p>They are valid for 5 minutes after you run this command.</p>
    ///             </li>
    ///             <li>
    ///                 <p>The resulting user session is valid for 10 hours.</p>
    ///             </li>
    ///          </ul>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedded Analytics</a> in the <i>Amazon QuickSight User
    ///             Guide</i>.</p>
    func getDashboardEmbedUrl(input: GetDashboardEmbedUrlInput) async throws -> GetDashboardEmbedUrlOutputResponse
    {
        typealias getDashboardEmbedUrlContinuation = CheckedContinuation<GetDashboardEmbedUrlOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDashboardEmbedUrlContinuation) in
            getDashboardEmbedUrl(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Generates a session URL and authorization code that you can use to embed the Amazon
    ///             QuickSight console in your web server code. Use <code>GetSessionEmbedUrl</code> where
    ///             you want to provide an authoring portal that allows users to create data sources,
    ///             datasets, analyses, and dashboards. The users who access an embedded QuickSight console
    ///             need belong to the author or admin security cohort. If you want to restrict permissions
    ///             to some of these features, add a custom permissions profile to the user with the
    ///             <code>
    ///                <a>UpdateUser</a>
    ///             </code> API operation. Use <code>
    ///                <a>RegisterUser</a>
    ///             </code> API operation to add a new user with a custom permission profile attached. For more
    ///             information, see the following sections in the <i>Amazon QuickSight User
    ///             Guide</i>:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedding-the-quicksight-console.html">Embedding the Amazon QuickSight Console</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-permissions-to-the-quicksight-console.html">Customizing Access to the Amazon QuickSight Console</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    func getSessionEmbedUrl(input: GetSessionEmbedUrlInput) async throws -> GetSessionEmbedUrlOutputResponse
    {
        typealias getSessionEmbedUrlContinuation = CheckedContinuation<GetSessionEmbedUrlOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSessionEmbedUrlContinuation) in
            getSessionEmbedUrl(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists Amazon QuickSight analyses that exist in the specified AWS account.</p>
    func listAnalyses(input: ListAnalysesInput) async throws -> ListAnalysesOutputResponse
    {
        typealias listAnalysesContinuation = CheckedContinuation<ListAnalysesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAnalysesContinuation) in
            listAnalyses(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all the versions of the dashboards in the QuickSight subscription.</p>
    func listDashboardVersions(input: ListDashboardVersionsInput) async throws -> ListDashboardVersionsOutputResponse
    {
        typealias listDashboardVersionsContinuation = CheckedContinuation<ListDashboardVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDashboardVersionsContinuation) in
            listDashboardVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists dashboards in an AWS account.</p>
    func listDashboards(input: ListDashboardsInput) async throws -> ListDashboardsOutputResponse
    {
        typealias listDashboardsContinuation = CheckedContinuation<ListDashboardsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDashboardsContinuation) in
            listDashboards(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all of the datasets belonging to the current AWS account in an AWS Region.</p>
    /// 		       <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/*</code>.</p>
    func listDataSets(input: ListDataSetsInput) async throws -> ListDataSetsOutputResponse
    {
        typealias listDataSetsContinuation = CheckedContinuation<ListDataSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDataSetsContinuation) in
            listDataSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists data sources in current AWS Region that belong to this AWS account.</p>
    func listDataSources(input: ListDataSourcesInput) async throws -> ListDataSourcesOutputResponse
    {
        typealias listDataSourcesContinuation = CheckedContinuation<ListDataSourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDataSourcesContinuation) in
            listDataSources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists member users in a group.</p>
    func listGroupMemberships(input: ListGroupMembershipsInput) async throws -> ListGroupMembershipsOutputResponse
    {
        typealias listGroupMembershipsContinuation = CheckedContinuation<ListGroupMembershipsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listGroupMembershipsContinuation) in
            listGroupMemberships(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all user groups in Amazon QuickSight. </p>
    func listGroups(input: ListGroupsInput) async throws -> ListGroupsOutputResponse
    {
        typealias listGroupsContinuation = CheckedContinuation<ListGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listGroupsContinuation) in
            listGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists IAM policy assignments in the current Amazon QuickSight account.</p>
    func listIAMPolicyAssignments(input: ListIAMPolicyAssignmentsInput) async throws -> ListIAMPolicyAssignmentsOutputResponse
    {
        typealias listIAMPolicyAssignmentsContinuation = CheckedContinuation<ListIAMPolicyAssignmentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIAMPolicyAssignmentsContinuation) in
            listIAMPolicyAssignments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all the IAM policy assignments, including the Amazon Resource Names (ARNs) for the IAM
    /// 			policies assigned to the specified user and group or groups that the user belongs
    /// 			to.</p>
    func listIAMPolicyAssignmentsForUser(input: ListIAMPolicyAssignmentsForUserInput) async throws -> ListIAMPolicyAssignmentsForUserOutputResponse
    {
        typealias listIAMPolicyAssignmentsForUserContinuation = CheckedContinuation<ListIAMPolicyAssignmentsForUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIAMPolicyAssignmentsForUserContinuation) in
            listIAMPolicyAssignmentsForUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the history of SPICE ingestions for a dataset.</p>
    func listIngestions(input: ListIngestionsInput) async throws -> ListIngestionsOutputResponse
    {
        typealias listIngestionsContinuation = CheckedContinuation<ListIngestionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIngestionsContinuation) in
            listIngestions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the namespaces for the specified AWS account.</p>
    func listNamespaces(input: ListNamespacesInput) async throws -> ListNamespacesOutputResponse
    {
        typealias listNamespacesContinuation = CheckedContinuation<ListNamespacesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listNamespacesContinuation) in
            listNamespaces(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the tags assigned to a resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all the aliases of a template.</p>
    func listTemplateAliases(input: ListTemplateAliasesInput) async throws -> ListTemplateAliasesOutputResponse
    {
        typealias listTemplateAliasesContinuation = CheckedContinuation<ListTemplateAliasesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTemplateAliasesContinuation) in
            listTemplateAliases(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all the versions of the templates in the current Amazon QuickSight account.</p>
    func listTemplateVersions(input: ListTemplateVersionsInput) async throws -> ListTemplateVersionsOutputResponse
    {
        typealias listTemplateVersionsContinuation = CheckedContinuation<ListTemplateVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTemplateVersionsContinuation) in
            listTemplateVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all the templates in the current Amazon QuickSight account.</p>
    func listTemplates(input: ListTemplatesInput) async throws -> ListTemplatesOutputResponse
    {
        typealias listTemplatesContinuation = CheckedContinuation<ListTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTemplatesContinuation) in
            listTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all the aliases of a theme.</p>
    func listThemeAliases(input: ListThemeAliasesInput) async throws -> ListThemeAliasesOutputResponse
    {
        typealias listThemeAliasesContinuation = CheckedContinuation<ListThemeAliasesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThemeAliasesContinuation) in
            listThemeAliases(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all the versions of the themes in the current AWS account.</p>
    func listThemeVersions(input: ListThemeVersionsInput) async throws -> ListThemeVersionsOutputResponse
    {
        typealias listThemeVersionsContinuation = CheckedContinuation<ListThemeVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThemeVersionsContinuation) in
            listThemeVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all the themes in the current AWS account.</p>
    func listThemes(input: ListThemesInput) async throws -> ListThemesOutputResponse
    {
        typealias listThemesContinuation = CheckedContinuation<ListThemesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThemesContinuation) in
            listThemes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the Amazon QuickSight groups that an Amazon QuickSight user is a member of.</p>
    func listUserGroups(input: ListUserGroupsInput) async throws -> ListUserGroupsOutputResponse
    {
        typealias listUserGroupsContinuation = CheckedContinuation<ListUserGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUserGroupsContinuation) in
            listUserGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of all of the Amazon QuickSight users belonging to this account. </p>
    func listUsers(input: ListUsersInput) async throws -> ListUsersOutputResponse
    {
        typealias listUsersContinuation = CheckedContinuation<ListUsersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUsersContinuation) in
            listUsers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an Amazon QuickSight user, whose identity is associated with the AWS Identity
    /// 			and Access Management (IAM) identity or role specified in the request. </p>
    func registerUser(input: RegisterUserInput) async throws -> RegisterUserOutputResponse
    {
        typealias registerUserContinuation = CheckedContinuation<RegisterUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerUserContinuation) in
            registerUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Restores an analysis.</p>
    func restoreAnalysis(input: RestoreAnalysisInput) async throws -> RestoreAnalysisOutputResponse
    {
        typealias restoreAnalysisContinuation = CheckedContinuation<RestoreAnalysisOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: restoreAnalysisContinuation) in
            restoreAnalysis(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Searches for analyses that belong to the user specified in the filter.</p>
    func searchAnalyses(input: SearchAnalysesInput) async throws -> SearchAnalysesOutputResponse
    {
        typealias searchAnalysesContinuation = CheckedContinuation<SearchAnalysesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchAnalysesContinuation) in
            searchAnalyses(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Searches for dashboards that belong to a user. </p>
    func searchDashboards(input: SearchDashboardsInput) async throws -> SearchDashboardsOutputResponse
    {
        typealias searchDashboardsContinuation = CheckedContinuation<SearchDashboardsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchDashboardsContinuation) in
            searchDashboards(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Assigns one or more tags (key-value pairs) to the specified QuickSight resource. </p>
    /// 		       <p>Tags can help you organize and categorize your resources. You can also use them to
    /// 			scope user permissions, by granting a user permission to access or change only resources
    /// 			with certain tag values. You can use the <code>TagResource</code> operation with a
    /// 			resource that already has tags. If you specify a new tag key for the resource, this tag
    /// 			is appended to the list of tags associated with the resource. If you specify a tag key
    /// 			that is already associated with the resource, the new tag value that you specify
    /// 			replaces the previous value for that tag.</p>
    /// 		       <p>You can associate as many as 50 tags with a resource. QuickSight supports tagging on data
    /// 			set, data source, dashboard, and template. </p>
    /// 		       <p>Tagging for QuickSight works in a similar way to tagging for other AWS services, except for
    /// 			the following:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>You can't use tags to track AWS costs for QuickSight. This restriction is because QuickSight
    /// 					costs are based on users and SPICE capacity, which aren't taggable
    /// 					resources.</p>
    ///             </li>
    ///             <li>
    ///                <p>QuickSight doesn't currently support the Tag Editor for AWS Resource Groups.</p>
    ///             </li>
    ///          </ul>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes a tag or tags from a resource.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates Amazon QuickSight customizations the current AWS Region. Currently, the only
    ///             customization you can use is a theme.</p>
    ///         <p>You can use customizations for your AWS account or, if you specify a namespace, for a
    ///             QuickSight namespace instead. Customizations that apply to a namespace override
    ///             customizations that apply to an AWS account. To find out which customizations apply, use
    ///             the <code>DescribeAccountCustomization</code> API operation. </p>
    func updateAccountCustomization(input: UpdateAccountCustomizationInput) async throws -> UpdateAccountCustomizationOutputResponse
    {
        typealias updateAccountCustomizationContinuation = CheckedContinuation<UpdateAccountCustomizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAccountCustomizationContinuation) in
            updateAccountCustomization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the Amazon QuickSight settings in your AWS account.</p>
    func updateAccountSettings(input: UpdateAccountSettingsInput) async throws -> UpdateAccountSettingsOutputResponse
    {
        typealias updateAccountSettingsContinuation = CheckedContinuation<UpdateAccountSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAccountSettingsContinuation) in
            updateAccountSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an analysis in Amazon QuickSight</p>
    func updateAnalysis(input: UpdateAnalysisInput) async throws -> UpdateAnalysisOutputResponse
    {
        typealias updateAnalysisContinuation = CheckedContinuation<UpdateAnalysisOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAnalysisContinuation) in
            updateAnalysis(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the read and write permissions for an analysis.</p>
    func updateAnalysisPermissions(input: UpdateAnalysisPermissionsInput) async throws -> UpdateAnalysisPermissionsOutputResponse
    {
        typealias updateAnalysisPermissionsContinuation = CheckedContinuation<UpdateAnalysisPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAnalysisPermissionsContinuation) in
            updateAnalysisPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a dashboard in an AWS account.</p>
    func updateDashboard(input: UpdateDashboardInput) async throws -> UpdateDashboardOutputResponse
    {
        typealias updateDashboardContinuation = CheckedContinuation<UpdateDashboardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDashboardContinuation) in
            updateDashboard(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates read and write permissions on a dashboard.</p>
    func updateDashboardPermissions(input: UpdateDashboardPermissionsInput) async throws -> UpdateDashboardPermissionsOutputResponse
    {
        typealias updateDashboardPermissionsContinuation = CheckedContinuation<UpdateDashboardPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDashboardPermissionsContinuation) in
            updateDashboardPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the published version of a dashboard.</p>
    func updateDashboardPublishedVersion(input: UpdateDashboardPublishedVersionInput) async throws -> UpdateDashboardPublishedVersionOutputResponse
    {
        typealias updateDashboardPublishedVersionContinuation = CheckedContinuation<UpdateDashboardPublishedVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDashboardPublishedVersionContinuation) in
            updateDashboardPublishedVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a dataset.</p>
    func updateDataSet(input: UpdateDataSetInput) async throws -> UpdateDataSetOutputResponse
    {
        typealias updateDataSetContinuation = CheckedContinuation<UpdateDataSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDataSetContinuation) in
            updateDataSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the permissions on a dataset.</p>
    /// 		       <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p>
    func updateDataSetPermissions(input: UpdateDataSetPermissionsInput) async throws -> UpdateDataSetPermissionsOutputResponse
    {
        typealias updateDataSetPermissionsContinuation = CheckedContinuation<UpdateDataSetPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDataSetPermissionsContinuation) in
            updateDataSetPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a data source.</p>
    func updateDataSource(input: UpdateDataSourceInput) async throws -> UpdateDataSourceOutputResponse
    {
        typealias updateDataSourceContinuation = CheckedContinuation<UpdateDataSourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDataSourceContinuation) in
            updateDataSource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the permissions to a data source.</p>
    func updateDataSourcePermissions(input: UpdateDataSourcePermissionsInput) async throws -> UpdateDataSourcePermissionsOutputResponse
    {
        typealias updateDataSourcePermissionsContinuation = CheckedContinuation<UpdateDataSourcePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDataSourcePermissionsContinuation) in
            updateDataSourcePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Changes a group description. </p>
    func updateGroup(input: UpdateGroupInput) async throws -> UpdateGroupOutputResponse
    {
        typealias updateGroupContinuation = CheckedContinuation<UpdateGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGroupContinuation) in
            updateGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an existing IAM policy assignment. This operation updates only the optional
    /// 			parameter or parameters that are specified in the request.
    /// 		    This overwrites all of the users included in <code>Identities</code>.
    /// 		</p>
    func updateIAMPolicyAssignment(input: UpdateIAMPolicyAssignmentInput) async throws -> UpdateIAMPolicyAssignmentOutputResponse
    {
        typealias updateIAMPolicyAssignmentContinuation = CheckedContinuation<UpdateIAMPolicyAssignmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateIAMPolicyAssignmentContinuation) in
            updateIAMPolicyAssignment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a template from an existing Amazon QuickSight analysis or another template.</p>
    func updateTemplate(input: UpdateTemplateInput) async throws -> UpdateTemplateOutputResponse
    {
        typealias updateTemplateContinuation = CheckedContinuation<UpdateTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTemplateContinuation) in
            updateTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the template alias of a template.</p>
    func updateTemplateAlias(input: UpdateTemplateAliasInput) async throws -> UpdateTemplateAliasOutputResponse
    {
        typealias updateTemplateAliasContinuation = CheckedContinuation<UpdateTemplateAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTemplateAliasContinuation) in
            updateTemplateAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the resource permissions for a template.</p>
    func updateTemplatePermissions(input: UpdateTemplatePermissionsInput) async throws -> UpdateTemplatePermissionsOutputResponse
    {
        typealias updateTemplatePermissionsContinuation = CheckedContinuation<UpdateTemplatePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTemplatePermissionsContinuation) in
            updateTemplatePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a theme.</p>
    func updateTheme(input: UpdateThemeInput) async throws -> UpdateThemeOutputResponse
    {
        typealias updateThemeContinuation = CheckedContinuation<UpdateThemeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateThemeContinuation) in
            updateTheme(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an alias of a theme.</p>
    func updateThemeAlias(input: UpdateThemeAliasInput) async throws -> UpdateThemeAliasOutputResponse
    {
        typealias updateThemeAliasContinuation = CheckedContinuation<UpdateThemeAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateThemeAliasContinuation) in
            updateThemeAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the resource permissions for a theme. Permissions apply to the action to grant or
    /// 			revoke permissions on, for example <code>"quicksight:DescribeTheme"</code>.</p>
    /// 		       <p>Theme permissions apply in groupings. Valid groupings include the following for the three
    /// 			levels of permissions, which are user, owner, or no permissions: </p>
    /// 			      <ul>
    ///             <li>
    ///                <p>User</p>
    /// 					          <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:DescribeTheme"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:DescribeThemeAlias"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:ListThemeAliases"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:ListThemeVersions"</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    /// 				        </li>
    ///             <li>
    ///                <p>Owner</p>
    /// 					          <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:DescribeTheme"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:DescribeThemeAlias"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:ListThemeAliases"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:ListThemeVersions"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:DeleteTheme"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:UpdateTheme"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:CreateThemeAlias"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:DeleteThemeAlias"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:UpdateThemeAlias"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:UpdateThemePermissions"</code>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>"quicksight:DescribeThemePermissions"</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    /// 				        </li>
    ///             <li>
    ///                <p>To specify no permissions, omit the permissions list.</p>
    ///             </li>
    ///          </ul>
    func updateThemePermissions(input: UpdateThemePermissionsInput) async throws -> UpdateThemePermissionsOutputResponse
    {
        typealias updateThemePermissionsContinuation = CheckedContinuation<UpdateThemePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateThemePermissionsContinuation) in
            updateThemePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an Amazon QuickSight user.</p>
    func updateUser(input: UpdateUserInput) async throws -> UpdateUserOutputResponse
    {
        typealias updateUserContinuation = CheckedContinuation<UpdateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserContinuation) in
            updateUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
