// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname>Amazon QuickSight API Reference</fullname>
///         Amazon QuickSight is a fully managed, serverless business intelligence service for the
///             Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your
///             organization. This API reference contains documentation for a programming interface that
///             you can use to manage Amazon QuickSight.
public protocol QuickSightClientProtocol {
    /// Cancels an ongoing ingestion of data into SPICE.
    func cancelIngestion(input: CancelIngestionInput, completion: @escaping (ClientRuntime.SdkResult<CancelIngestionOutputResponse, CancelIngestionOutputError>) -> Void)
    /// Creates Amazon QuickSight customizations the current Amazon Web Services Region;. Currently, you can
    ///             add a custom default theme by using the CreateAccountCustomization or
    ///                 UpdateAccountCustomization API operation. To further customize
    ///             QuickSight by removing QuickSight sample assets and videos for all new users, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-quicksight.html">Customizing QuickSight in the Amazon QuickSight User
    ///                 Guide.
    ///
    ///         You can create customizations for your Amazon Web Services account; or, if you specify a namespace, for
    ///             a QuickSight namespace instead. Customizations that apply to a namespace always override
    ///             customizations that apply to an Amazon Web Services account;. To find out which customizations apply, use
    ///             the DescribeAccountCustomization API operation.
    ///         Before you use the CreateAccountCustomization API operation to add a theme
    ///             as the namespace default, make sure that you first share the theme with the namespace.
    ///             If you don't share it with the namespace, the theme isn't visible to your users
    ///             even if you make it the default theme.
    ///             To check if the theme is shared, view the current permissions by using the
    ///
    ///                DescribeThemePermissions
    ///              API operation.
    ///             To share the theme, grant permissions by using the
    ///
    ///                UpdateThemePermissions
    ///              API operation.
    func createAccountCustomization(input: CreateAccountCustomizationInput, completion: @escaping (ClientRuntime.SdkResult<CreateAccountCustomizationOutputResponse, CreateAccountCustomizationOutputError>) -> Void)
    /// Creates an analysis in Amazon QuickSight.
    func createAnalysis(input: CreateAnalysisInput, completion: @escaping (ClientRuntime.SdkResult<CreateAnalysisOutputResponse, CreateAnalysisOutputError>) -> Void)
    /// Creates a dashboard from a template. To first create a template, see the
    ///                CreateTemplate
    ///              API operation.
    ///         A dashboard is an entity in QuickSight that identifies QuickSight reports, created
    ///             from analyses. You can share QuickSight dashboards. With the right permissions, you can
    ///             create scheduled email reports from them. If you have the correct permissions, you can
    ///             create a dashboard from a template that exists in a different Amazon Web Services account;.
    func createDashboard(input: CreateDashboardInput, completion: @escaping (ClientRuntime.SdkResult<CreateDashboardOutputResponse, CreateDashboardOutputError>) -> Void)
    /// Creates a dataset.
    func createDataSet(input: CreateDataSetInput, completion: @escaping (ClientRuntime.SdkResult<CreateDataSetOutputResponse, CreateDataSetOutputError>) -> Void)
    /// Creates a data source.
    func createDataSource(input: CreateDataSourceInput, completion: @escaping (ClientRuntime.SdkResult<CreateDataSourceOutputResponse, CreateDataSourceOutputError>) -> Void)
    /// Creates an empty shared folder.
    func createFolder(input: CreateFolderInput, completion: @escaping (ClientRuntime.SdkResult<CreateFolderOutputResponse, CreateFolderOutputError>) -> Void)
    /// Adds an asset, such as a dashboard, analysis, or dataset into a folder.
    func createFolderMembership(input: CreateFolderMembershipInput, completion: @escaping (ClientRuntime.SdkResult<CreateFolderMembershipOutputResponse, CreateFolderMembershipOutputError>) -> Void)
    /// Creates an Amazon QuickSight group.
    /// 		       The permissions resource is
    /// 					arn:aws:quicksight:us-east-1:<relevant-aws-account-id>:group/default/<group-name>
    ///             .
    /// 		       The response is a group object.
    func createGroup(input: CreateGroupInput, completion: @escaping (ClientRuntime.SdkResult<CreateGroupOutputResponse, CreateGroupOutputError>) -> Void)
    /// Adds an Amazon QuickSight user to an Amazon QuickSight group.
    func createGroupMembership(input: CreateGroupMembershipInput, completion: @escaping (ClientRuntime.SdkResult<CreateGroupMembershipOutputResponse, CreateGroupMembershipOutputError>) -> Void)
    /// Creates an assignment with one specified IAM policy, identified by its Amazon Resource Name
    /// 			(ARN). This policy assignment is attached to the specified groups or users of Amazon QuickSight.
    /// 			Assignment names are unique per Amazon Web Services account;. To avoid overwriting rules in other namespaces,
    /// 			use assignment names that are unique.
    func createIAMPolicyAssignment(input: CreateIAMPolicyAssignmentInput, completion: @escaping (ClientRuntime.SdkResult<CreateIAMPolicyAssignmentOutputResponse, CreateIAMPolicyAssignmentOutputError>) -> Void)
    /// Creates and starts a new SPICE ingestion on a dataset
    /// 		
    /// 		       Any ingestions operating on tagged datasets inherit the same tags automatically for use in
    /// 			access control. For an example, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/iam-ec2-resource-tags/">How do I create an IAM policy to control access to Amazon EC2 resources using
    /// 				tags? in the Amazon Web Services Knowledge Center. Tags are visible on the tagged dataset, but not on the ingestion resource.
    func createIngestion(input: CreateIngestionInput, completion: @escaping (ClientRuntime.SdkResult<CreateIngestionOutputResponse, CreateIngestionOutputError>) -> Void)
    /// (Enterprise edition only) Creates a new namespace for you to use with Amazon QuickSight.
    ///         A namespace allows you to isolate the QuickSight users and groups that are registered
    ///             for that namespace. Users that access the namespace can share assets only with other
    ///             users or groups in the same namespace. They can't see users and groups in other
    ///             namespaces. You can create a namespace after your Amazon Web Services account; is subscribed to
    ///             QuickSight. The namespace must be unique within the Amazon Web Services account;. By default, there is a
    ///             limit of 100 namespaces per Amazon Web Services account;. To increase your limit, create a ticket with
    ///             Amazon Web Services Support.
    func createNamespace(input: CreateNamespaceInput, completion: @escaping (ClientRuntime.SdkResult<CreateNamespaceOutputResponse, CreateNamespaceOutputError>) -> Void)
    /// Creates a template from an existing Amazon QuickSight analysis or template. You can use the resulting
    /// 			template to create a dashboard.
    /// 		       A template is an entity in QuickSight that encapsulates the metadata
    /// 			required to create an analysis and that you can use to create s dashboard. A template adds
    /// 			a layer of abstraction by using placeholders to replace the dataset associated with the
    /// 			analysis. You can use templates to create dashboards by replacing dataset placeholders
    /// 			with datasets that follow the same schema that was used to create the source analysis
    /// 			and template.
    func createTemplate(input: CreateTemplateInput, completion: @escaping (ClientRuntime.SdkResult<CreateTemplateOutputResponse, CreateTemplateOutputError>) -> Void)
    /// Creates a template alias for a template.
    func createTemplateAlias(input: CreateTemplateAliasInput, completion: @escaping (ClientRuntime.SdkResult<CreateTemplateAliasOutputResponse, CreateTemplateAliasOutputError>) -> Void)
    /// Creates a theme.
    /// 		       A theme is set of configuration options for color and layout.
    /// 			Themes apply to analyses and dashboards. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using
    /// 			Themes in Amazon QuickSight in the Amazon QuickSight User Guide.
    func createTheme(input: CreateThemeInput, completion: @escaping (ClientRuntime.SdkResult<CreateThemeOutputResponse, CreateThemeOutputError>) -> Void)
    /// Creates a theme alias for a theme.
    func createThemeAlias(input: CreateThemeAliasInput, completion: @escaping (ClientRuntime.SdkResult<CreateThemeAliasOutputResponse, CreateThemeAliasOutputError>) -> Void)
    /// Deletes all Amazon QuickSight customizations in this Amazon Web Services Region; for the specified
    ///             Amazon Web Services account; and QuickSight namespace.
    func deleteAccountCustomization(input: DeleteAccountCustomizationInput, completion: @escaping (ClientRuntime.SdkResult<DeleteAccountCustomizationOutputResponse, DeleteAccountCustomizationOutputError>) -> Void)
    /// Deletes an analysis from Amazon QuickSight. You can optionally include a recovery window during
    ///             which you can restore the analysis. If you don't specify a recovery window value, the
    ///             operation defaults to 30 days. QuickSight attaches a DeletionTime stamp to
    ///             the response that specifies the end of the recovery window. At the end of the recovery
    ///             window, QuickSight deletes the analysis permanently.
    ///         At any time before recovery window ends, you can use the RestoreAnalysis
    ///             API operation to remove the DeletionTime stamp and cancel the deletion of
    ///             the analysis. The analysis remains visible in the API until it's deleted, so you can
    ///             describe it but you can't make a template from it.
    ///         An analysis that's scheduled for deletion isn't accessible in the QuickSight console.
    ///             To access it in the console, restore it. Deleting an analysis doesn't delete the
    ///             dashboards that you publish from it.
    func deleteAnalysis(input: DeleteAnalysisInput, completion: @escaping (ClientRuntime.SdkResult<DeleteAnalysisOutputResponse, DeleteAnalysisOutputError>) -> Void)
    /// Deletes a dashboard.
    func deleteDashboard(input: DeleteDashboardInput, completion: @escaping (ClientRuntime.SdkResult<DeleteDashboardOutputResponse, DeleteDashboardOutputError>) -> Void)
    /// Deletes a dataset.
    func deleteDataSet(input: DeleteDataSetInput, completion: @escaping (ClientRuntime.SdkResult<DeleteDataSetOutputResponse, DeleteDataSetOutputError>) -> Void)
    /// Deletes the data source permanently. This operation breaks
    /// 			all the datasets that reference the deleted data source.
    func deleteDataSource(input: DeleteDataSourceInput, completion: @escaping (ClientRuntime.SdkResult<DeleteDataSourceOutputResponse, DeleteDataSourceOutputError>) -> Void)
    /// Deletes an empty folder.
    func deleteFolder(input: DeleteFolderInput, completion: @escaping (ClientRuntime.SdkResult<DeleteFolderOutputResponse, DeleteFolderOutputError>) -> Void)
    /// Removes an asset, such as a dashboard, analysis, or dataset, from a folder.
    func deleteFolderMembership(input: DeleteFolderMembershipInput, completion: @escaping (ClientRuntime.SdkResult<DeleteFolderMembershipOutputResponse, DeleteFolderMembershipOutputError>) -> Void)
    /// Removes a user group from Amazon QuickSight.
    func deleteGroup(input: DeleteGroupInput, completion: @escaping (ClientRuntime.SdkResult<DeleteGroupOutputResponse, DeleteGroupOutputError>) -> Void)
    /// Removes a user from a group so that the user is no longer a member of the group.
    func deleteGroupMembership(input: DeleteGroupMembershipInput, completion: @escaping (ClientRuntime.SdkResult<DeleteGroupMembershipOutputResponse, DeleteGroupMembershipOutputError>) -> Void)
    /// Deletes an existing IAM policy assignment.
    func deleteIAMPolicyAssignment(input: DeleteIAMPolicyAssignmentInput, completion: @escaping (ClientRuntime.SdkResult<DeleteIAMPolicyAssignmentOutputResponse, DeleteIAMPolicyAssignmentOutputError>) -> Void)
    /// Deletes a namespace and the users and groups that are associated with the namespace.
    ///         This is an asynchronous process. Assets including dashboards, analyses, datasets and data sources are not
    ///         deleted. To delete these assets, you use the API operations for the relevant asset.
    func deleteNamespace(input: DeleteNamespaceInput, completion: @escaping (ClientRuntime.SdkResult<DeleteNamespaceOutputResponse, DeleteNamespaceOutputError>) -> Void)
    /// Deletes a template.
    func deleteTemplate(input: DeleteTemplateInput, completion: @escaping (ClientRuntime.SdkResult<DeleteTemplateOutputResponse, DeleteTemplateOutputError>) -> Void)
    /// Deletes the item that the specified template alias points to. If you provide a specific
    /// 			alias, you delete the version of the template that the alias points to.
    func deleteTemplateAlias(input: DeleteTemplateAliasInput, completion: @escaping (ClientRuntime.SdkResult<DeleteTemplateAliasOutputResponse, DeleteTemplateAliasOutputError>) -> Void)
    /// Deletes a theme.
    func deleteTheme(input: DeleteThemeInput, completion: @escaping (ClientRuntime.SdkResult<DeleteThemeOutputResponse, DeleteThemeOutputError>) -> Void)
    /// Deletes the version of the theme that the specified theme alias points to.
    /// 			If you provide a specific alias, you delete the version of the theme
    /// 			that the alias points to.
    func deleteThemeAlias(input: DeleteThemeAliasInput, completion: @escaping (ClientRuntime.SdkResult<DeleteThemeAliasOutputResponse, DeleteThemeAliasOutputError>) -> Void)
    /// Deletes the Amazon QuickSight user that is associated with the identity of the
    /// 			Identity and Access Management (IAM) user or role that's making the call. The IAM user
    /// 			isn't deleted as a result of this call.
    func deleteUser(input: DeleteUserInput, completion: @escaping (ClientRuntime.SdkResult<DeleteUserOutputResponse, DeleteUserOutputError>) -> Void)
    /// Deletes a user identified by its principal ID.
    func deleteUserByPrincipalId(input: DeleteUserByPrincipalIdInput, completion: @escaping (ClientRuntime.SdkResult<DeleteUserByPrincipalIdOutputResponse, DeleteUserByPrincipalIdOutputError>) -> Void)
    /// Describes the customizations associated with the provided Amazon Web Services account; and Amazon
    ///             QuickSight namespace in an Amazon Web Services Region;. The QuickSight console evaluates which
    ///             customizations to apply by running this API operation with the Resolved flag
    ///             included.
    ///         To determine what customizations display when you run this command, it can help to
    ///             visualize the relationship of the entities involved.
    ///
    ///
    ///
    ///                   Amazon Web Services account; - The Amazon Web Services account; exists at the top of the hierarchy.
    ///                     It has the potential to use all of the Amazon Web Services Regions; and AWS Services. When you
    ///                     subscribe to QuickSight, you choose one Amazon Web Services Region; to use as your home Region.
    ///                     That's where your free SPICE capacity is located. You can use QuickSight in any
    ///                     supported Amazon Web Services Region;.
    ///
    ///
    ///
    ///                   Amazon Web Services Region; - In each Amazon Web Services Region; where you sign in to QuickSight
    ///                     at least once, QuickSight acts as a separate instance of the same service. If
    ///                     you have a user directory, it resides in us-east-1, which is the US East (N.
    ///                     Virginia). Generally speaking, these users have access to QuickSight in any
    ///                     Amazon Web Services Region;, unless they are constrained to a namespace.
    ///                 To run the command in a different Amazon Web Services Region;, you change your Region settings.
    ///                     If you're using the AWS CLI, you can use one of the following options:
    ///
    ///
    ///                         Use <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-options.html">command line options.
    ///
    ///
    ///                         Use <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html">named profiles.
    ///
    ///
    ///                         Run aws configure to change your default Amazon Web Services Region;. Use
    ///                             Enter to key the same settings for your keys. For more information, see
    ///                             <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html">Configuring the AWS CLI.
    ///
    ///
    ///
    ///
    ///
    ///                   Namespace - A QuickSight namespace is a partition that contains
    ///                     users and assets (data sources, datasets, dashboards, and so on). To access
    ///                     assets that are in a specific namespace, users and groups must also be part of
    ///                     the same namespace. People who share a namespace are completely isolated from
    ///                     users and assets in other namespaces, even if they are in the same Amazon Web Services account;
    ///                     and Amazon Web Services Region;.
    ///
    ///
    ///
    ///                   Applied customizations -  Within an Amazon Web Services Region;, a set of
    ///                     QuickSight customizations can apply to an Amazon Web Services account; or to a namespace.
    ///                     Settings that you apply to a namespace override settings that you apply to an
    ///                     Amazon Web Services account;. All settings are isolated to a single Amazon Web Services Region;. To apply them in
    ///                     other Amazon Web Services Regions;, run the CreateAccountCustomization command in
    ///                     each Amazon Web Services Region; where you want to apply the same customizations.
    ///
    ///
    func describeAccountCustomization(input: DescribeAccountCustomizationInput, completion: @escaping (ClientRuntime.SdkResult<DescribeAccountCustomizationOutputResponse, DescribeAccountCustomizationOutputError>) -> Void)
    /// Describes the settings that were used when your QuickSight subscription was first
    ///             created in this Amazon Web Services account;.
    func describeAccountSettings(input: DescribeAccountSettingsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeAccountSettingsOutputResponse, DescribeAccountSettingsOutputError>) -> Void)
    /// Provides a summary of the metadata for an analysis.
    func describeAnalysis(input: DescribeAnalysisInput, completion: @escaping (ClientRuntime.SdkResult<DescribeAnalysisOutputResponse, DescribeAnalysisOutputError>) -> Void)
    /// Provides the read and write permissions for an analysis.
    func describeAnalysisPermissions(input: DescribeAnalysisPermissionsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeAnalysisPermissionsOutputResponse, DescribeAnalysisPermissionsOutputError>) -> Void)
    /// Provides a summary for a dashboard.
    func describeDashboard(input: DescribeDashboardInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDashboardOutputResponse, DescribeDashboardOutputError>) -> Void)
    /// Describes read and write permissions for a dashboard.
    func describeDashboardPermissions(input: DescribeDashboardPermissionsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDashboardPermissionsOutputResponse, DescribeDashboardPermissionsOutputError>) -> Void)
    /// Describes a dataset.
    func describeDataSet(input: DescribeDataSetInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDataSetOutputResponse, DescribeDataSetOutputError>) -> Void)
    /// Describes the permissions on a dataset.
    /// 		       The permissions resource is arn:aws:quicksight:region:aws-account-id:dataset/data-set-id.
    func describeDataSetPermissions(input: DescribeDataSetPermissionsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDataSetPermissionsOutputResponse, DescribeDataSetPermissionsOutputError>) -> Void)
    /// Describes a data source.
    func describeDataSource(input: DescribeDataSourceInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDataSourceOutputResponse, DescribeDataSourceOutputError>) -> Void)
    /// Describes the resource permissions for a data source.
    func describeDataSourcePermissions(input: DescribeDataSourcePermissionsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDataSourcePermissionsOutputResponse, DescribeDataSourcePermissionsOutputError>) -> Void)
    /// Describes a folder.
    func describeFolder(input: DescribeFolderInput, completion: @escaping (ClientRuntime.SdkResult<DescribeFolderOutputResponse, DescribeFolderOutputError>) -> Void)
    /// Describes permissions for a folder.
    func describeFolderPermissions(input: DescribeFolderPermissionsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeFolderPermissionsOutputResponse, DescribeFolderPermissionsOutputError>) -> Void)
    /// Describes the folder resolved permissions. Permissions consists of both folder direct permissions and the inherited permissions from the ancestor folders.
    func describeFolderResolvedPermissions(input: DescribeFolderResolvedPermissionsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeFolderResolvedPermissionsOutputResponse, DescribeFolderResolvedPermissionsOutputError>) -> Void)
    /// Returns an Amazon QuickSight group's description and Amazon Resource Name (ARN).
    func describeGroup(input: DescribeGroupInput, completion: @escaping (ClientRuntime.SdkResult<DescribeGroupOutputResponse, DescribeGroupOutputError>) -> Void)
    /// Describes an existing IAM policy assignment, as specified by the assignment name.
    func describeIAMPolicyAssignment(input: DescribeIAMPolicyAssignmentInput, completion: @escaping (ClientRuntime.SdkResult<DescribeIAMPolicyAssignmentOutputResponse, DescribeIAMPolicyAssignmentOutputError>) -> Void)
    /// Describes a SPICE ingestion.
    func describeIngestion(input: DescribeIngestionInput, completion: @escaping (ClientRuntime.SdkResult<DescribeIngestionOutputResponse, DescribeIngestionOutputError>) -> Void)
    /// Describes the current namespace.
    func describeNamespace(input: DescribeNamespaceInput, completion: @escaping (ClientRuntime.SdkResult<DescribeNamespaceOutputResponse, DescribeNamespaceOutputError>) -> Void)
    /// Describes a template's metadata.
    func describeTemplate(input: DescribeTemplateInput, completion: @escaping (ClientRuntime.SdkResult<DescribeTemplateOutputResponse, DescribeTemplateOutputError>) -> Void)
    /// Describes the template alias for a template.
    func describeTemplateAlias(input: DescribeTemplateAliasInput, completion: @escaping (ClientRuntime.SdkResult<DescribeTemplateAliasOutputResponse, DescribeTemplateAliasOutputError>) -> Void)
    /// Describes read and write permissions on a template.
    func describeTemplatePermissions(input: DescribeTemplatePermissionsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeTemplatePermissionsOutputResponse, DescribeTemplatePermissionsOutputError>) -> Void)
    /// Describes a theme.
    func describeTheme(input: DescribeThemeInput, completion: @escaping (ClientRuntime.SdkResult<DescribeThemeOutputResponse, DescribeThemeOutputError>) -> Void)
    /// Describes the alias for a theme.
    func describeThemeAlias(input: DescribeThemeAliasInput, completion: @escaping (ClientRuntime.SdkResult<DescribeThemeAliasOutputResponse, DescribeThemeAliasOutputError>) -> Void)
    /// Describes the read and write permissions for a theme.
    func describeThemePermissions(input: DescribeThemePermissionsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeThemePermissionsOutputResponse, DescribeThemePermissionsOutputError>) -> Void)
    /// Returns information about a user, given the user name.
    func describeUser(input: DescribeUserInput, completion: @escaping (ClientRuntime.SdkResult<DescribeUserOutputResponse, DescribeUserOutputError>) -> Void)
    /// Generates an embed URL that you can use to embed an Amazon QuickSight dashboard in your website, without having to register any reader users. Before you use this action, make sure that you have configured the dashboards and permissions.
    ///         The following rules apply to the generated URL:
    ///
    ///
    ///                 It contains a temporary bearer token. It is valid for 5 minutes after it is generated. Once redeemed within this period, it cannot be re-used again.
    ///
    ///
    ///                 The URL validity period should not be confused with the actual session lifetime
    ///         that can be customized using the
    ///                      <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_GenerateEmbedUrlForAnonymousUser.html#QS-GenerateEmbedUrlForAnonymousUser-request-SessionLifetimeInMinutes">SessionLifetimeInMinutes
    ///                    parameter.
    ///                 The resulting user session is valid for 15 minutes (default) to 10 hours (maximum).
    ///
    ///
    ///                 You are charged only when the URL is used or there is interaction with Amazon QuickSight.
    ///
    ///
    ///         For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedded Analytics in the Amazon QuickSight User
    ///             Guide.
    ///         For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal.
    func generateEmbedUrlForAnonymousUser(input: GenerateEmbedUrlForAnonymousUserInput, completion: @escaping (ClientRuntime.SdkResult<GenerateEmbedUrlForAnonymousUserOutputResponse, GenerateEmbedUrlForAnonymousUserOutputError>) -> Void)
    /// Generates an embed URL that you can use to embed an Amazon QuickSight experience in your website. This action can be used for any type of user registered in an Amazon QuickSight account. Before you use this action, make sure that you have configured the relevant Amazon QuickSight resource and permissions.
    ///         The following rules apply to the generated URL:
    ///
    ///
    ///                 It contains a temporary bearer token. It is valid for 5 minutes after it is generated. Once redeemed within this period, it cannot be re-used again.
    ///
    ///
    ///                 The URL validity period should not be confused with the actual session lifetime
    ///         that can be customized using the
    ///                      <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_GenerateEmbedUrlForRegisteredUser.html#QS-GenerateEmbedUrlForRegisteredUser-request-SessionLifetimeInMinutes">SessionLifetimeInMinutes
    ///                    parameter.
    ///                 The resulting user session is valid for 15 minutes (default) to 10 hours (maximum).
    ///
    ///
    ///                 You are charged only when the URL is used or there is interaction with Amazon QuickSight.
    ///
    ///
    ///         For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedded Analytics in the Amazon QuickSight User
    ///             Guide.
    ///             For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal.
    func generateEmbedUrlForRegisteredUser(input: GenerateEmbedUrlForRegisteredUserInput, completion: @escaping (ClientRuntime.SdkResult<GenerateEmbedUrlForRegisteredUserOutputResponse, GenerateEmbedUrlForRegisteredUserOutputError>) -> Void)
    /// Generates a session URL and authorization code that you can use to embed an Amazon
    ///             QuickSight read-only dashboard in your web server code. Before you use this command,
    ///             make sure that you have configured the dashboards and permissions.
    ///         Currently, you can use GetDashboardEmbedURL only from the server, not
    ///             from the user's browser. The following rules apply to the combination of URL and
    ///             authorization code:
    ///
    ///
    ///                 They must be used together.
    ///
    ///
    ///                 They can be used one time only.
    ///
    ///
    ///                 They are valid for 5 minutes after you run this command.
    ///
    ///
    ///                 The resulting user session is valid for 10 hours.
    ///
    ///
    ///         For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics-deprecated.html">Embedding Analytics Using GetDashboardEmbedUrl in the Amazon QuickSight User
    ///             Guide.
    ///             For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal.
    func getDashboardEmbedUrl(input: GetDashboardEmbedUrlInput, completion: @escaping (ClientRuntime.SdkResult<GetDashboardEmbedUrlOutputResponse, GetDashboardEmbedUrlOutputError>) -> Void)
    /// Generates a session URL and authorization code that you can use to embed the Amazon
    ///             QuickSight console in your web server code. Use GetSessionEmbedUrl where
    ///             you want to provide an authoring portal that allows users to create data sources,
    ///             datasets, analyses, and dashboards. The users who access an embedded QuickSight console
    ///             need belong to the author or admin security cohort. If you want to restrict permissions
    ///             to some of these features, add a custom permissions profile to the user with the
    ///
    ///                UpdateUser
    ///              API operation. Use
    ///                RegisterUser
    ///              API operation to add a new user with a custom permission profile attached. For more
    ///             information, see the following sections in the Amazon QuickSight User
    ///             Guide:
    ///
    ///
    ///
    ///                   <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics-full-console-for-authenticated-users-get.html">Embedding the Amazon QuickSight Console Using GetSessionEmbedUrl
    ///
    ///
    ///
    ///
    ///                   <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-permissions-to-the-quicksight-console.html">Customizing Access to the Amazon QuickSight Console
    ///
    ///
    ///
    func getSessionEmbedUrl(input: GetSessionEmbedUrlInput, completion: @escaping (ClientRuntime.SdkResult<GetSessionEmbedUrlOutputResponse, GetSessionEmbedUrlOutputError>) -> Void)
    /// Lists Amazon QuickSight analyses that exist in the specified Amazon Web Services account;.
    func listAnalyses(input: ListAnalysesInput, completion: @escaping (ClientRuntime.SdkResult<ListAnalysesOutputResponse, ListAnalysesOutputError>) -> Void)
    /// Lists dashboards in an Amazon Web Services account;.
    func listDashboards(input: ListDashboardsInput, completion: @escaping (ClientRuntime.SdkResult<ListDashboardsOutputResponse, ListDashboardsOutputError>) -> Void)
    /// Lists all the versions of the dashboards in the QuickSight subscription.
    func listDashboardVersions(input: ListDashboardVersionsInput, completion: @escaping (ClientRuntime.SdkResult<ListDashboardVersionsOutputResponse, ListDashboardVersionsOutputError>) -> Void)
    /// Lists all of the datasets belonging to the current Amazon Web Services account; in an Amazon Web Services Region;.
    /// 		       The permissions resource is arn:aws:quicksight:region:aws-account-id:dataset/*.
    func listDataSets(input: ListDataSetsInput, completion: @escaping (ClientRuntime.SdkResult<ListDataSetsOutputResponse, ListDataSetsOutputError>) -> Void)
    /// Lists data sources in current Amazon Web Services Region; that belong to this Amazon Web Services account;.
    func listDataSources(input: ListDataSourcesInput, completion: @escaping (ClientRuntime.SdkResult<ListDataSourcesOutputResponse, ListDataSourcesOutputError>) -> Void)
    /// List all assets (DASHBOARD, ANALYSIS, and DATASET) in a folder.
    func listFolderMembers(input: ListFolderMembersInput, completion: @escaping (ClientRuntime.SdkResult<ListFolderMembersOutputResponse, ListFolderMembersOutputError>) -> Void)
    /// Lists all folders in an account.
    func listFolders(input: ListFoldersInput, completion: @escaping (ClientRuntime.SdkResult<ListFoldersOutputResponse, ListFoldersOutputError>) -> Void)
    /// Lists member users in a group.
    func listGroupMemberships(input: ListGroupMembershipsInput, completion: @escaping (ClientRuntime.SdkResult<ListGroupMembershipsOutputResponse, ListGroupMembershipsOutputError>) -> Void)
    /// Lists all user groups in Amazon QuickSight.
    func listGroups(input: ListGroupsInput, completion: @escaping (ClientRuntime.SdkResult<ListGroupsOutputResponse, ListGroupsOutputError>) -> Void)
    /// Lists IAM policy assignments in the current Amazon QuickSight account.
    func listIAMPolicyAssignments(input: ListIAMPolicyAssignmentsInput, completion: @escaping (ClientRuntime.SdkResult<ListIAMPolicyAssignmentsOutputResponse, ListIAMPolicyAssignmentsOutputError>) -> Void)
    /// Lists all the IAM policy assignments, including the Amazon Resource Names (ARNs) for the IAM
    /// 			policies assigned to the specified user and group or groups that the user belongs
    /// 			to.
    func listIAMPolicyAssignmentsForUser(input: ListIAMPolicyAssignmentsForUserInput, completion: @escaping (ClientRuntime.SdkResult<ListIAMPolicyAssignmentsForUserOutputResponse, ListIAMPolicyAssignmentsForUserOutputError>) -> Void)
    /// Lists the history of SPICE ingestions for a dataset.
    func listIngestions(input: ListIngestionsInput, completion: @escaping (ClientRuntime.SdkResult<ListIngestionsOutputResponse, ListIngestionsOutputError>) -> Void)
    /// Lists the namespaces for the specified Amazon Web Services account;.
    func listNamespaces(input: ListNamespacesInput, completion: @escaping (ClientRuntime.SdkResult<ListNamespacesOutputResponse, ListNamespacesOutputError>) -> Void)
    /// Lists the tags assigned to a resource.
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (ClientRuntime.SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// Lists all the aliases of a template.
    func listTemplateAliases(input: ListTemplateAliasesInput, completion: @escaping (ClientRuntime.SdkResult<ListTemplateAliasesOutputResponse, ListTemplateAliasesOutputError>) -> Void)
    /// Lists all the templates in the current Amazon QuickSight account.
    func listTemplates(input: ListTemplatesInput, completion: @escaping (ClientRuntime.SdkResult<ListTemplatesOutputResponse, ListTemplatesOutputError>) -> Void)
    /// Lists all the versions of the templates in the current Amazon QuickSight account.
    func listTemplateVersions(input: ListTemplateVersionsInput, completion: @escaping (ClientRuntime.SdkResult<ListTemplateVersionsOutputResponse, ListTemplateVersionsOutputError>) -> Void)
    /// Lists all the aliases of a theme.
    func listThemeAliases(input: ListThemeAliasesInput, completion: @escaping (ClientRuntime.SdkResult<ListThemeAliasesOutputResponse, ListThemeAliasesOutputError>) -> Void)
    /// Lists all the themes in the current Amazon Web Services account;.
    func listThemes(input: ListThemesInput, completion: @escaping (ClientRuntime.SdkResult<ListThemesOutputResponse, ListThemesOutputError>) -> Void)
    /// Lists all the versions of the themes in the current Amazon Web Services account;.
    func listThemeVersions(input: ListThemeVersionsInput, completion: @escaping (ClientRuntime.SdkResult<ListThemeVersionsOutputResponse, ListThemeVersionsOutputError>) -> Void)
    /// Lists the Amazon QuickSight groups that an Amazon QuickSight user is a member of.
    func listUserGroups(input: ListUserGroupsInput, completion: @escaping (ClientRuntime.SdkResult<ListUserGroupsOutputResponse, ListUserGroupsOutputError>) -> Void)
    /// Returns a list of all of the Amazon QuickSight users belonging to this account.
    func listUsers(input: ListUsersInput, completion: @escaping (ClientRuntime.SdkResult<ListUsersOutputResponse, ListUsersOutputError>) -> Void)
    /// Creates an Amazon QuickSight user, whose identity is associated with the AWS Identity
    /// 			and Access Management (IAM) identity or role specified in the request.
    func registerUser(input: RegisterUserInput, completion: @escaping (ClientRuntime.SdkResult<RegisterUserOutputResponse, RegisterUserOutputError>) -> Void)
    /// Restores an analysis.
    func restoreAnalysis(input: RestoreAnalysisInput, completion: @escaping (ClientRuntime.SdkResult<RestoreAnalysisOutputResponse, RestoreAnalysisOutputError>) -> Void)
    /// Searches for analyses that belong to the user specified in the filter.
    ///
    ///             This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.
    ///
    func searchAnalyses(input: SearchAnalysesInput, completion: @escaping (ClientRuntime.SdkResult<SearchAnalysesOutputResponse, SearchAnalysesOutputError>) -> Void)
    /// Searches for dashboards that belong to a user.
    ///
    ///             This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.
    ///
    func searchDashboards(input: SearchDashboardsInput, completion: @escaping (ClientRuntime.SdkResult<SearchDashboardsOutputResponse, SearchDashboardsOutputError>) -> Void)
    /// Searches the subfolders in a folder.
    func searchFolders(input: SearchFoldersInput, completion: @escaping (ClientRuntime.SdkResult<SearchFoldersOutputResponse, SearchFoldersOutputError>) -> Void)
    /// Assigns one or more tags (key-value pairs) to the specified QuickSight resource.
    /// 		       Tags can help you organize and categorize your resources. You can also use them to
    /// 			scope user permissions, by granting a user permission to access or change only resources
    /// 			with certain tag values. You can use the TagResource operation with a
    /// 			resource that already has tags. If you specify a new tag key for the resource, this tag
    /// 			is appended to the list of tags associated with the resource. If you specify a tag key
    /// 			that is already associated with the resource, the new tag value that you specify
    /// 			replaces the previous value for that tag.
    /// 		       You can associate as many as 50 tags with a resource. QuickSight supports tagging on data
    /// 			set, data source, dashboard, and template.
    /// 		       Tagging for QuickSight works in a similar way to tagging for other AWS services, except for
    /// 			the following:
    /// 		
    ///
    ///                You can't use tags to track AWS costs for QuickSight. This restriction is because QuickSight
    /// 					costs are based on users and SPICE capacity, which aren't taggable
    /// 					resources.
    ///
    ///
    ///                QuickSight doesn't currently support the Tag Editor for Resource Groups.
    ///
    ///
    func tagResource(input: TagResourceInput, completion: @escaping (ClientRuntime.SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// Removes a tag or tags from a resource.
    func untagResource(input: UntagResourceInput, completion: @escaping (ClientRuntime.SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// Updates Amazon QuickSight customizations the current Amazon Web Services Region;. Currently, the only
    ///             customization you can use is a theme.
    ///         You can use customizations for your Amazon Web Services account; or, if you specify a namespace, for a
    ///             QuickSight namespace instead. Customizations that apply to a namespace override
    ///             customizations that apply to an Amazon Web Services account;. To find out which customizations apply, use
    ///             the DescribeAccountCustomization API operation.
    func updateAccountCustomization(input: UpdateAccountCustomizationInput, completion: @escaping (ClientRuntime.SdkResult<UpdateAccountCustomizationOutputResponse, UpdateAccountCustomizationOutputError>) -> Void)
    /// Updates the Amazon QuickSight settings in your Amazon Web Services account;.
    func updateAccountSettings(input: UpdateAccountSettingsInput, completion: @escaping (ClientRuntime.SdkResult<UpdateAccountSettingsOutputResponse, UpdateAccountSettingsOutputError>) -> Void)
    /// Updates an analysis in Amazon QuickSight
    func updateAnalysis(input: UpdateAnalysisInput, completion: @escaping (ClientRuntime.SdkResult<UpdateAnalysisOutputResponse, UpdateAnalysisOutputError>) -> Void)
    /// Updates the read and write permissions for an analysis.
    func updateAnalysisPermissions(input: UpdateAnalysisPermissionsInput, completion: @escaping (ClientRuntime.SdkResult<UpdateAnalysisPermissionsOutputResponse, UpdateAnalysisPermissionsOutputError>) -> Void)
    /// Updates a dashboard in an Amazon Web Services account;.
    ///
    ///             Updating a Dashboard creates a new dashboard version but does not immediately publish
    ///                 the new version.  You can update the published version of a dashboard by
    ///                 using the UpdateDashboardPublishedVersion API operation.
    ///
    func updateDashboard(input: UpdateDashboardInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDashboardOutputResponse, UpdateDashboardOutputError>) -> Void)
    /// Updates read and write permissions on a dashboard.
    func updateDashboardPermissions(input: UpdateDashboardPermissionsInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDashboardPermissionsOutputResponse, UpdateDashboardPermissionsOutputError>) -> Void)
    /// Updates the published version of a dashboard.
    func updateDashboardPublishedVersion(input: UpdateDashboardPublishedVersionInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDashboardPublishedVersionOutputResponse, UpdateDashboardPublishedVersionOutputError>) -> Void)
    /// Updates a dataset.
    func updateDataSet(input: UpdateDataSetInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDataSetOutputResponse, UpdateDataSetOutputError>) -> Void)
    /// Updates the permissions on a dataset.
    /// 		       The permissions resource is arn:aws:quicksight:region:aws-account-id:dataset/data-set-id.
    func updateDataSetPermissions(input: UpdateDataSetPermissionsInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDataSetPermissionsOutputResponse, UpdateDataSetPermissionsOutputError>) -> Void)
    /// Updates a data source.
    func updateDataSource(input: UpdateDataSourceInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDataSourceOutputResponse, UpdateDataSourceOutputError>) -> Void)
    /// Updates the permissions to a data source.
    func updateDataSourcePermissions(input: UpdateDataSourcePermissionsInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDataSourcePermissionsOutputResponse, UpdateDataSourcePermissionsOutputError>) -> Void)
    /// Updates the name of a folder.
    func updateFolder(input: UpdateFolderInput, completion: @escaping (ClientRuntime.SdkResult<UpdateFolderOutputResponse, UpdateFolderOutputError>) -> Void)
    /// Updates permissions of a folder.
    func updateFolderPermissions(input: UpdateFolderPermissionsInput, completion: @escaping (ClientRuntime.SdkResult<UpdateFolderPermissionsOutputResponse, UpdateFolderPermissionsOutputError>) -> Void)
    /// Changes a group description.
    func updateGroup(input: UpdateGroupInput, completion: @escaping (ClientRuntime.SdkResult<UpdateGroupOutputResponse, UpdateGroupOutputError>) -> Void)
    /// Updates an existing IAM policy assignment. This operation updates only the optional
    /// 			parameter or parameters that are specified in the request.
    /// 		    This overwrites all of the users included in Identities.
    /// 		
    func updateIAMPolicyAssignment(input: UpdateIAMPolicyAssignmentInput, completion: @escaping (ClientRuntime.SdkResult<UpdateIAMPolicyAssignmentOutputResponse, UpdateIAMPolicyAssignmentOutputError>) -> Void)
    /// Updates a template from an existing Amazon QuickSight analysis or another template.
    func updateTemplate(input: UpdateTemplateInput, completion: @escaping (ClientRuntime.SdkResult<UpdateTemplateOutputResponse, UpdateTemplateOutputError>) -> Void)
    /// Updates the template alias of a template.
    func updateTemplateAlias(input: UpdateTemplateAliasInput, completion: @escaping (ClientRuntime.SdkResult<UpdateTemplateAliasOutputResponse, UpdateTemplateAliasOutputError>) -> Void)
    /// Updates the resource permissions for a template.
    func updateTemplatePermissions(input: UpdateTemplatePermissionsInput, completion: @escaping (ClientRuntime.SdkResult<UpdateTemplatePermissionsOutputResponse, UpdateTemplatePermissionsOutputError>) -> Void)
    /// Updates a theme.
    func updateTheme(input: UpdateThemeInput, completion: @escaping (ClientRuntime.SdkResult<UpdateThemeOutputResponse, UpdateThemeOutputError>) -> Void)
    /// Updates an alias of a theme.
    func updateThemeAlias(input: UpdateThemeAliasInput, completion: @escaping (ClientRuntime.SdkResult<UpdateThemeAliasOutputResponse, UpdateThemeAliasOutputError>) -> Void)
    /// Updates the resource permissions for a theme. Permissions apply to the action to grant or
    /// 			revoke permissions on, for example "quicksight:DescribeTheme".
    /// 		       Theme permissions apply in groupings. Valid groupings include the following for the three
    /// 			levels of permissions, which are user, owner, or no permissions:
    /// 			
    ///
    ///                User
    /// 					
    ///
    ///
    ///                         "quicksight:DescribeTheme"
    ///
    ///
    ///
    ///
    ///                         "quicksight:DescribeThemeAlias"
    ///
    ///
    ///
    ///
    ///                         "quicksight:ListThemeAliases"
    ///
    ///
    ///
    ///
    ///                         "quicksight:ListThemeVersions"
    ///
    ///
    ///
    /// 				
    ///
    ///                Owner
    /// 					
    ///
    ///
    ///                         "quicksight:DescribeTheme"
    ///
    ///
    ///
    ///
    ///                         "quicksight:DescribeThemeAlias"
    ///
    ///
    ///
    ///
    ///                         "quicksight:ListThemeAliases"
    ///
    ///
    ///
    ///
    ///                         "quicksight:ListThemeVersions"
    ///
    ///
    ///
    ///
    ///                         "quicksight:DeleteTheme"
    ///
    ///
    ///
    ///
    ///                         "quicksight:UpdateTheme"
    ///
    ///
    ///
    ///
    ///                         "quicksight:CreateThemeAlias"
    ///
    ///
    ///
    ///
    ///                         "quicksight:DeleteThemeAlias"
    ///
    ///
    ///
    ///
    ///                         "quicksight:UpdateThemeAlias"
    ///
    ///
    ///
    ///
    ///                         "quicksight:UpdateThemePermissions"
    ///
    ///
    ///
    ///
    ///                         "quicksight:DescribeThemePermissions"
    ///
    ///
    ///
    /// 				
    ///
    ///                To specify no permissions, omit the permissions list.
    ///
    ///
    func updateThemePermissions(input: UpdateThemePermissionsInput, completion: @escaping (ClientRuntime.SdkResult<UpdateThemePermissionsOutputResponse, UpdateThemePermissionsOutputError>) -> Void)
    /// Updates an Amazon QuickSight user.
    func updateUser(input: UpdateUserInput, completion: @escaping (ClientRuntime.SdkResult<UpdateUserOutputResponse, UpdateUserOutputError>) -> Void)
}

public enum QuickSightClientTypes {}
