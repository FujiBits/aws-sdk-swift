// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateIAMPolicyAssignmentInputHeadersMiddleware: Middleware {
    public let id: String = "CreateIAMPolicyAssignmentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateIAMPolicyAssignmentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateIAMPolicyAssignmentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateIAMPolicyAssignmentInput>
    public typealias MOutput = OperationOutput<CreateIAMPolicyAssignmentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateIAMPolicyAssignmentOutputError>
}

public struct CreateIAMPolicyAssignmentInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateIAMPolicyAssignmentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateIAMPolicyAssignmentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateIAMPolicyAssignmentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateIAMPolicyAssignmentInput>
    public typealias MOutput = OperationOutput<CreateIAMPolicyAssignmentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateIAMPolicyAssignmentOutputError>
}

public struct CreateIAMPolicyAssignmentInputBodyMiddleware: Middleware {
    public let id: String = "CreateIAMPolicyAssignmentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateIAMPolicyAssignmentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateIAMPolicyAssignmentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateIAMPolicyAssignmentInput>
    public typealias MOutput = OperationOutput<CreateIAMPolicyAssignmentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateIAMPolicyAssignmentOutputError>
}

extension CreateIAMPolicyAssignmentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case assignmentName = "AssignmentName"
        case assignmentStatus = "AssignmentStatus"
        case identities = "Identities"
        case policyArn = "PolicyArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentName = assignmentName {
            try encodeContainer.encode(assignmentName, forKey: .assignmentName)
        }
        if let assignmentStatus = assignmentStatus {
            try encodeContainer.encode(assignmentStatus.rawValue, forKey: .assignmentStatus)
        }
        if let identities = identities {
            var identitiesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .identities)
            for (dictKey0, identitymap0) in identities {
                try identitiesContainer.encode(identitymap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let policyArn = policyArn {
            try encodeContainer.encode(policyArn, forKey: .policyArn)
        }
    }
}
