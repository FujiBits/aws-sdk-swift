// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDashboardVersionsOutputResponseBody: Equatable {
    public let dashboardVersionSummaryList: [DashboardVersionSummary]?
    public let nextToken: String?
    public let status: Int
    public let requestId: String?
}

extension ListDashboardVersionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dashboardVersionSummaryList = "DashboardVersionSummaryList"
        case nextToken = "NextToken"
        case requestId = "RequestId"
        case status = "Status"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardVersionSummaryListContainer = try containerValues.decodeIfPresent([DashboardVersionSummary?].self, forKey: .dashboardVersionSummaryList)
        var dashboardVersionSummaryListDecoded0:[DashboardVersionSummary]? = nil
        if let dashboardVersionSummaryListContainer = dashboardVersionSummaryListContainer {
            dashboardVersionSummaryListDecoded0 = [DashboardVersionSummary]()
            for structure0 in dashboardVersionSummaryListContainer {
                if let structure0 = structure0 {
                    dashboardVersionSummaryListDecoded0?.append(structure0)
                }
            }
        }
        dashboardVersionSummaryList = dashboardVersionSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let statusDecoded = try containerValues.decode(Int.self, forKey: .status)
        status = statusDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}
