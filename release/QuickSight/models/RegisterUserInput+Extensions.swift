// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RegisterUserInputHeadersMiddleware: Middleware {
    public let id: String = "RegisterUserInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterUserInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterUserInput>
    public typealias MOutput = OperationOutput<RegisterUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterUserOutputError>
}

public struct RegisterUserInputQueryItemMiddleware: Middleware {
    public let id: String = "RegisterUserInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterUserInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterUserInput>
    public typealias MOutput = OperationOutput<RegisterUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterUserOutputError>
}

public struct RegisterUserInputBodyMiddleware: Middleware {
    public let id: String = "RegisterUserInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterUserInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterUserOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterUserInput>
    public typealias MOutput = OperationOutput<RegisterUserOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterUserOutputError>
}

extension RegisterUserInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customFederationProviderUrl = "CustomFederationProviderUrl"
        case customPermissionsName = "CustomPermissionsName"
        case email = "Email"
        case externalLoginFederationProviderType = "ExternalLoginFederationProviderType"
        case externalLoginId = "ExternalLoginId"
        case iamArn = "IamArn"
        case identityType = "IdentityType"
        case sessionName = "SessionName"
        case userName = "UserName"
        case userRole = "UserRole"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customFederationProviderUrl = customFederationProviderUrl {
            try encodeContainer.encode(customFederationProviderUrl, forKey: .customFederationProviderUrl)
        }
        if let customPermissionsName = customPermissionsName {
            try encodeContainer.encode(customPermissionsName, forKey: .customPermissionsName)
        }
        if let email = email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if let externalLoginFederationProviderType = externalLoginFederationProviderType {
            try encodeContainer.encode(externalLoginFederationProviderType, forKey: .externalLoginFederationProviderType)
        }
        if let externalLoginId = externalLoginId {
            try encodeContainer.encode(externalLoginId, forKey: .externalLoginId)
        }
        if let iamArn = iamArn {
            try encodeContainer.encode(iamArn, forKey: .iamArn)
        }
        if let identityType = identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let sessionName = sessionName {
            try encodeContainer.encode(sessionName, forKey: .sessionName)
        }
        if let userName = userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
        if let userRole = userRole {
            try encodeContainer.encode(userRole.rawValue, forKey: .userRole)
        }
    }
}
